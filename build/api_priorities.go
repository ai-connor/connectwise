/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PrioritiesAPIService PrioritiesAPI service
type PrioritiesAPIService service

type ApiDeleteServicePrioritiesByIdRequest struct {
	ctx        context.Context
	ApiService *PrioritiesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteServicePrioritiesByIdRequest) ClientId(clientId string) ApiDeleteServicePrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServicePrioritiesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServicePrioritiesByIdExecute(r)
}

/*
DeleteServicePrioritiesById Delete Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@return ApiDeleteServicePrioritiesByIdRequest
*/
func (a *PrioritiesAPIService) DeleteServicePrioritiesById(ctx context.Context, id int32) ApiDeleteServicePrioritiesByIdRequest {
	return ApiDeleteServicePrioritiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PrioritiesAPIService) DeleteServicePrioritiesByIdExecute(r ApiDeleteServicePrioritiesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.DeleteServicePrioritiesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServicePrioritiesRequest struct {
	ctx                   context.Context
	ApiService            *PrioritiesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServicePrioritiesRequest) ClientId(clientId string) ApiGetServicePrioritiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServicePrioritiesRequest) Conditions(conditions string) ApiGetServicePrioritiesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServicePrioritiesRequest) ChildConditions(childConditions string) ApiGetServicePrioritiesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServicePrioritiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServicePrioritiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServicePrioritiesRequest) OrderBy(orderBy string) ApiGetServicePrioritiesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServicePrioritiesRequest) Fields(fields string) ApiGetServicePrioritiesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServicePrioritiesRequest) Page(page int32) ApiGetServicePrioritiesRequest {
	r.page = &page
	return r
}

func (r ApiGetServicePrioritiesRequest) PageSize(pageSize int32) ApiGetServicePrioritiesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicePrioritiesRequest) PageId(pageId int32) ApiGetServicePrioritiesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServicePrioritiesRequest) Execute() ([]Priority, *http.Response, error) {
	return r.ApiService.GetServicePrioritiesExecute(r)
}

/*
GetServicePriorities Get List of Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServicePrioritiesRequest
*/
func (a *PrioritiesAPIService) GetServicePriorities(ctx context.Context) ApiGetServicePrioritiesRequest {
	return ApiGetServicePrioritiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Priority
func (a *PrioritiesAPIService) GetServicePrioritiesExecute(r ApiGetServicePrioritiesRequest) ([]Priority, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Priority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.GetServicePriorities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServicePrioritiesByIdRequest struct {
	ctx                   context.Context
	ApiService            *PrioritiesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServicePrioritiesByIdRequest) ClientId(clientId string) ApiGetServicePrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) Conditions(conditions string) ApiGetServicePrioritiesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) ChildConditions(childConditions string) ApiGetServicePrioritiesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServicePrioritiesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) OrderBy(orderBy string) ApiGetServicePrioritiesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) Fields(fields string) ApiGetServicePrioritiesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) Page(page int32) ApiGetServicePrioritiesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) PageSize(pageSize int32) ApiGetServicePrioritiesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) PageId(pageId int32) ApiGetServicePrioritiesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServicePrioritiesByIdRequest) Execute() (*Priority, *http.Response, error) {
	return r.ApiService.GetServicePrioritiesByIdExecute(r)
}

/*
GetServicePrioritiesById Get Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@return ApiGetServicePrioritiesByIdRequest
*/
func (a *PrioritiesAPIService) GetServicePrioritiesById(ctx context.Context, id int32) ApiGetServicePrioritiesByIdRequest {
	return ApiGetServicePrioritiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Priority
func (a *PrioritiesAPIService) GetServicePrioritiesByIdExecute(r ApiGetServicePrioritiesByIdRequest) (*Priority, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Priority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.GetServicePrioritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServicePrioritiesByIdImageRequest struct {
	ctx                   context.Context
	ApiService            *PrioritiesAPIService
	id                    int32
	clientId              *string
	lastModified          string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServicePrioritiesByIdImageRequest) ClientId(clientId string) ApiGetServicePrioritiesByIdImageRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) Conditions(conditions string) ApiGetServicePrioritiesByIdImageRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) ChildConditions(childConditions string) ApiGetServicePrioritiesByIdImageRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) CustomFieldConditions(customFieldConditions string) ApiGetServicePrioritiesByIdImageRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) OrderBy(orderBy string) ApiGetServicePrioritiesByIdImageRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) Fields(fields string) ApiGetServicePrioritiesByIdImageRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) Page(page int32) ApiGetServicePrioritiesByIdImageRequest {
	r.page = &page
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) PageSize(pageSize int32) ApiGetServicePrioritiesByIdImageRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) PageId(pageId int32) ApiGetServicePrioritiesByIdImageRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServicePrioritiesByIdImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetServicePrioritiesByIdImageExecute(r)
}

/*
GetServicePrioritiesByIdImage Get Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@param lastModified lastModified
	@return ApiGetServicePrioritiesByIdImageRequest
*/
func (a *PrioritiesAPIService) GetServicePrioritiesByIdImage(ctx context.Context, id int32, lastModified string) ApiGetServicePrioritiesByIdImageRequest {
	return ApiGetServicePrioritiesByIdImageRequest{
		ApiService:   a,
		ctx:          ctx,
		id:           id,
		lastModified: lastModified,
	}
}

// Execute executes the request
func (a *PrioritiesAPIService) GetServicePrioritiesByIdImageExecute(r ApiGetServicePrioritiesByIdImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.GetServicePrioritiesByIdImage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}/image"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lastModified"+"}", url.PathEscape(parameterValueToString(r.lastModified, "lastModified")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServicePrioritiesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *PrioritiesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) ClientId(clientId string) ApiGetServicePrioritiesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) Conditions(conditions string) ApiGetServicePrioritiesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServicePrioritiesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServicePrioritiesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) OrderBy(orderBy string) ApiGetServicePrioritiesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) Fields(fields string) ApiGetServicePrioritiesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) Page(page int32) ApiGetServicePrioritiesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) PageSize(pageSize int32) ApiGetServicePrioritiesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) PageId(pageId int32) ApiGetServicePrioritiesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServicePrioritiesByIdUsagesExecute(r)
}

/*
GetServicePrioritiesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@return ApiGetServicePrioritiesByIdUsagesRequest
*/
func (a *PrioritiesAPIService) GetServicePrioritiesByIdUsages(ctx context.Context, id int32) ApiGetServicePrioritiesByIdUsagesRequest {
	return ApiGetServicePrioritiesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *PrioritiesAPIService) GetServicePrioritiesByIdUsagesExecute(r ApiGetServicePrioritiesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.GetServicePrioritiesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServicePrioritiesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *PrioritiesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) ClientId(clientId string) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) Conditions(conditions string) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) Fields(fields string) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) Page(page int32) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) PageId(pageId int32) ApiGetServicePrioritiesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServicePrioritiesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServicePrioritiesByIdUsagesListExecute(r)
}

/*
GetServicePrioritiesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@return ApiGetServicePrioritiesByIdUsagesListRequest
*/
func (a *PrioritiesAPIService) GetServicePrioritiesByIdUsagesList(ctx context.Context, id int32) ApiGetServicePrioritiesByIdUsagesListRequest {
	return ApiGetServicePrioritiesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *PrioritiesAPIService) GetServicePrioritiesByIdUsagesListExecute(r ApiGetServicePrioritiesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.GetServicePrioritiesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServicePrioritiesCountRequest struct {
	ctx                   context.Context
	ApiService            *PrioritiesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServicePrioritiesCountRequest) ClientId(clientId string) ApiGetServicePrioritiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServicePrioritiesCountRequest) Conditions(conditions string) ApiGetServicePrioritiesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServicePrioritiesCountRequest) ChildConditions(childConditions string) ApiGetServicePrioritiesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServicePrioritiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServicePrioritiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServicePrioritiesCountRequest) OrderBy(orderBy string) ApiGetServicePrioritiesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServicePrioritiesCountRequest) Fields(fields string) ApiGetServicePrioritiesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServicePrioritiesCountRequest) Page(page int32) ApiGetServicePrioritiesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServicePrioritiesCountRequest) PageSize(pageSize int32) ApiGetServicePrioritiesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServicePrioritiesCountRequest) PageId(pageId int32) ApiGetServicePrioritiesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServicePrioritiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServicePrioritiesCountExecute(r)
}

/*
GetServicePrioritiesCount Get Count of Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServicePrioritiesCountRequest
*/
func (a *PrioritiesAPIService) GetServicePrioritiesCount(ctx context.Context) ApiGetServicePrioritiesCountRequest {
	return ApiGetServicePrioritiesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PrioritiesAPIService) GetServicePrioritiesCountExecute(r ApiGetServicePrioritiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.GetServicePrioritiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServicePrioritiesByIdRequest struct {
	ctx            context.Context
	ApiService     *PrioritiesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServicePrioritiesByIdRequest) ClientId(clientId string) ApiPatchServicePrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServicePrioritiesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServicePrioritiesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServicePrioritiesByIdRequest) Execute() (*Priority, *http.Response, error) {
	return r.ApiService.PatchServicePrioritiesByIdExecute(r)
}

/*
PatchServicePrioritiesById Patch Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@return ApiPatchServicePrioritiesByIdRequest
*/
func (a *PrioritiesAPIService) PatchServicePrioritiesById(ctx context.Context, id int32) ApiPatchServicePrioritiesByIdRequest {
	return ApiPatchServicePrioritiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Priority
func (a *PrioritiesAPIService) PatchServicePrioritiesByIdExecute(r ApiPatchServicePrioritiesByIdRequest) (*Priority, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Priority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.PatchServicePrioritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServicePrioritiesRequest struct {
	ctx        context.Context
	ApiService *PrioritiesAPIService
	clientId   *string
	priority   *Priority
}

func (r ApiPostServicePrioritiesRequest) ClientId(clientId string) ApiPostServicePrioritiesRequest {
	r.clientId = &clientId
	return r
}

// priority
func (r ApiPostServicePrioritiesRequest) Priority(priority Priority) ApiPostServicePrioritiesRequest {
	r.priority = &priority
	return r
}

func (r ApiPostServicePrioritiesRequest) Execute() (*Priority, *http.Response, error) {
	return r.ApiService.PostServicePrioritiesExecute(r)
}

/*
PostServicePriorities Post Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostServicePrioritiesRequest
*/
func (a *PrioritiesAPIService) PostServicePriorities(ctx context.Context) ApiPostServicePrioritiesRequest {
	return ApiPostServicePrioritiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Priority
func (a *PrioritiesAPIService) PostServicePrioritiesExecute(r ApiPostServicePrioritiesRequest) (*Priority, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Priority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.PostServicePriorities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.priority == nil {
		return localVarReturnValue, nil, reportError("priority is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.priority
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServicePrioritiesByIdRequest struct {
	ctx        context.Context
	ApiService *PrioritiesAPIService
	id         int32
	clientId   *string
	priority   *Priority
}

func (r ApiPutServicePrioritiesByIdRequest) ClientId(clientId string) ApiPutServicePrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

// priority
func (r ApiPutServicePrioritiesByIdRequest) Priority(priority Priority) ApiPutServicePrioritiesByIdRequest {
	r.priority = &priority
	return r
}

func (r ApiPutServicePrioritiesByIdRequest) Execute() (*Priority, *http.Response, error) {
	return r.ApiService.PutServicePrioritiesByIdExecute(r)
}

/*
PutServicePrioritiesById Put Priority

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id priorityId
	@return ApiPutServicePrioritiesByIdRequest
*/
func (a *PrioritiesAPIService) PutServicePrioritiesById(ctx context.Context, id int32) ApiPutServicePrioritiesByIdRequest {
	return ApiPutServicePrioritiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Priority
func (a *PrioritiesAPIService) PutServicePrioritiesByIdExecute(r ApiPutServicePrioritiesByIdRequest) (*Priority, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Priority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrioritiesAPIService.PutServicePrioritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.priority == nil {
		return localVarReturnValue, nil, reportError("priority is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.priority
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
