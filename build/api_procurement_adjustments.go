/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProcurementAdjustmentsAPIService ProcurementAdjustmentsAPI service
type ProcurementAdjustmentsAPIService service

type ApiDeleteProcurementAdjustmentsByIdRequest struct {
	ctx        context.Context
	ApiService *ProcurementAdjustmentsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProcurementAdjustmentsByIdRequest) ClientId(clientId string) ApiDeleteProcurementAdjustmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementAdjustmentsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementAdjustmentsByIdExecute(r)
}

/*
DeleteProcurementAdjustmentsById Delete ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id adjustmentId
	@return ApiDeleteProcurementAdjustmentsByIdRequest
*/
func (a *ProcurementAdjustmentsAPIService) DeleteProcurementAdjustmentsById(ctx context.Context, id int32) ApiDeleteProcurementAdjustmentsByIdRequest {
	return ApiDeleteProcurementAdjustmentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProcurementAdjustmentsAPIService) DeleteProcurementAdjustmentsByIdExecute(r ApiDeleteProcurementAdjustmentsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.DeleteProcurementAdjustmentsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementAdjustmentsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementAdjustmentsRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) Fields(fields string) ApiGetProcurementAdjustmentsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) Page(page int32) ApiGetProcurementAdjustmentsRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementAdjustmentsRequest) Execute() ([]ProcurementAdjustment, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsExecute(r)
}

/*
GetProcurementAdjustments Get List of ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementAdjustmentsRequest
*/
func (a *ProcurementAdjustmentsAPIService) GetProcurementAdjustments(ctx context.Context) ApiGetProcurementAdjustmentsRequest {
	return ApiGetProcurementAdjustmentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProcurementAdjustment
func (a *ProcurementAdjustmentsAPIService) GetProcurementAdjustmentsExecute(r ApiGetProcurementAdjustmentsRequest) ([]ProcurementAdjustment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProcurementAdjustment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.GetProcurementAdjustments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementAdjustmentsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementAdjustmentsByIdRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) Fields(fields string) ApiGetProcurementAdjustmentsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) Page(page int32) ApiGetProcurementAdjustmentsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementAdjustmentsByIdRequest) Execute() (*ProcurementAdjustment, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsByIdExecute(r)
}

/*
GetProcurementAdjustmentsById Get ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id adjustmentId
	@return ApiGetProcurementAdjustmentsByIdRequest
*/
func (a *ProcurementAdjustmentsAPIService) GetProcurementAdjustmentsById(ctx context.Context, id int32) ApiGetProcurementAdjustmentsByIdRequest {
	return ApiGetProcurementAdjustmentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProcurementAdjustment
func (a *ProcurementAdjustmentsAPIService) GetProcurementAdjustmentsByIdExecute(r ApiGetProcurementAdjustmentsByIdRequest) (*ProcurementAdjustment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementAdjustment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.GetProcurementAdjustmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementAdjustmentsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementAdjustmentsCountRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) Fields(fields string) ApiGetProcurementAdjustmentsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) Page(page int32) ApiGetProcurementAdjustmentsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementAdjustmentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsCountExecute(r)
}

/*
GetProcurementAdjustmentsCount Get Count of ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementAdjustmentsCountRequest
*/
func (a *ProcurementAdjustmentsAPIService) GetProcurementAdjustmentsCount(ctx context.Context) ApiGetProcurementAdjustmentsCountRequest {
	return ApiGetProcurementAdjustmentsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProcurementAdjustmentsAPIService) GetProcurementAdjustmentsCountExecute(r ApiGetProcurementAdjustmentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.GetProcurementAdjustmentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementAdjustmentsByIdRequest struct {
	ctx            context.Context
	ApiService     *ProcurementAdjustmentsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementAdjustmentsByIdRequest) ClientId(clientId string) ApiPatchProcurementAdjustmentsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementAdjustmentsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementAdjustmentsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementAdjustmentsByIdRequest) Execute() (*ProcurementAdjustment, *http.Response, error) {
	return r.ApiService.PatchProcurementAdjustmentsByIdExecute(r)
}

/*
PatchProcurementAdjustmentsById Patch ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id adjustmentId
	@return ApiPatchProcurementAdjustmentsByIdRequest
*/
func (a *ProcurementAdjustmentsAPIService) PatchProcurementAdjustmentsById(ctx context.Context, id int32) ApiPatchProcurementAdjustmentsByIdRequest {
	return ApiPatchProcurementAdjustmentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProcurementAdjustment
func (a *ProcurementAdjustmentsAPIService) PatchProcurementAdjustmentsByIdExecute(r ApiPatchProcurementAdjustmentsByIdRequest) (*ProcurementAdjustment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementAdjustment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.PatchProcurementAdjustmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementAdjustmentsRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementAdjustmentsAPIService
	clientId              *string
	procurementAdjustment *ProcurementAdjustment
}

func (r ApiPostProcurementAdjustmentsRequest) ClientId(clientId string) ApiPostProcurementAdjustmentsRequest {
	r.clientId = &clientId
	return r
}

// adjustment
func (r ApiPostProcurementAdjustmentsRequest) ProcurementAdjustment(procurementAdjustment ProcurementAdjustment) ApiPostProcurementAdjustmentsRequest {
	r.procurementAdjustment = &procurementAdjustment
	return r
}

func (r ApiPostProcurementAdjustmentsRequest) Execute() (*ProcurementAdjustment, *http.Response, error) {
	return r.ApiService.PostProcurementAdjustmentsExecute(r)
}

/*
PostProcurementAdjustments Post ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProcurementAdjustmentsRequest
*/
func (a *ProcurementAdjustmentsAPIService) PostProcurementAdjustments(ctx context.Context) ApiPostProcurementAdjustmentsRequest {
	return ApiPostProcurementAdjustmentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProcurementAdjustment
func (a *ProcurementAdjustmentsAPIService) PostProcurementAdjustmentsExecute(r ApiPostProcurementAdjustmentsRequest) (*ProcurementAdjustment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementAdjustment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.PostProcurementAdjustments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.procurementAdjustment == nil {
		return localVarReturnValue, nil, reportError("procurementAdjustment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.procurementAdjustment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementAdjustmentsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementAdjustmentsAPIService
	id                    int32
	clientId              *string
	procurementAdjustment *ProcurementAdjustment
}

func (r ApiPutProcurementAdjustmentsByIdRequest) ClientId(clientId string) ApiPutProcurementAdjustmentsByIdRequest {
	r.clientId = &clientId
	return r
}

// adjustment
func (r ApiPutProcurementAdjustmentsByIdRequest) ProcurementAdjustment(procurementAdjustment ProcurementAdjustment) ApiPutProcurementAdjustmentsByIdRequest {
	r.procurementAdjustment = &procurementAdjustment
	return r
}

func (r ApiPutProcurementAdjustmentsByIdRequest) Execute() (*ProcurementAdjustment, *http.Response, error) {
	return r.ApiService.PutProcurementAdjustmentsByIdExecute(r)
}

/*
PutProcurementAdjustmentsById Put ProcurementAdjustment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id adjustmentId
	@return ApiPutProcurementAdjustmentsByIdRequest
*/
func (a *ProcurementAdjustmentsAPIService) PutProcurementAdjustmentsById(ctx context.Context, id int32) ApiPutProcurementAdjustmentsByIdRequest {
	return ApiPutProcurementAdjustmentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProcurementAdjustment
func (a *ProcurementAdjustmentsAPIService) PutProcurementAdjustmentsByIdExecute(r ApiPutProcurementAdjustmentsByIdRequest) (*ProcurementAdjustment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementAdjustment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementAdjustmentsAPIService.PutProcurementAdjustmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.procurementAdjustment == nil {
		return localVarReturnValue, nil, reportError("procurementAdjustment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.procurementAdjustment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
