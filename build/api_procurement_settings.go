/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProcurementSettingsAPIService ProcurementSettingsAPI service
type ProcurementSettingsAPIService service

type ApiGetProcurementSettingsRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementSettingsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementSettingsRequest) ClientId(clientId string) ApiGetProcurementSettingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementSettingsRequest) Conditions(conditions string) ApiGetProcurementSettingsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementSettingsRequest) ChildConditions(childConditions string) ApiGetProcurementSettingsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementSettingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSettingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementSettingsRequest) OrderBy(orderBy string) ApiGetProcurementSettingsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementSettingsRequest) Fields(fields string) ApiGetProcurementSettingsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementSettingsRequest) Page(page int32) ApiGetProcurementSettingsRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementSettingsRequest) PageSize(pageSize int32) ApiGetProcurementSettingsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementSettingsRequest) PageId(pageId int32) ApiGetProcurementSettingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSettingsRequest) Execute() ([]ProcurementSetting, *http.Response, error) {
	return r.ApiService.GetProcurementSettingsExecute(r)
}

/*
GetProcurementSettings Get List of ProcurementSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementSettingsRequest
*/
func (a *ProcurementSettingsAPIService) GetProcurementSettings(ctx context.Context) ApiGetProcurementSettingsRequest {
	return ApiGetProcurementSettingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProcurementSetting
func (a *ProcurementSettingsAPIService) GetProcurementSettingsExecute(r ApiGetProcurementSettingsRequest) ([]ProcurementSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProcurementSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementSettingsAPIService.GetProcurementSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSettingsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementSettingsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementSettingsByIdRequest) ClientId(clientId string) ApiGetProcurementSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) Conditions(conditions string) ApiGetProcurementSettingsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementSettingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSettingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) OrderBy(orderBy string) ApiGetProcurementSettingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) Fields(fields string) ApiGetProcurementSettingsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) Page(page int32) ApiGetProcurementSettingsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) PageSize(pageSize int32) ApiGetProcurementSettingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) PageId(pageId int32) ApiGetProcurementSettingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSettingsByIdRequest) Execute() (*ProcurementSetting, *http.Response, error) {
	return r.ApiService.GetProcurementSettingsByIdExecute(r)
}

/*
GetProcurementSettingsById Get ProcurementSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id settingId
	@return ApiGetProcurementSettingsByIdRequest
*/
func (a *ProcurementSettingsAPIService) GetProcurementSettingsById(ctx context.Context, id int32) ApiGetProcurementSettingsByIdRequest {
	return ApiGetProcurementSettingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProcurementSetting
func (a *ProcurementSettingsAPIService) GetProcurementSettingsByIdExecute(r ApiGetProcurementSettingsByIdRequest) (*ProcurementSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementSettingsAPIService.GetProcurementSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/settings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSettingsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProcurementSettingsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementSettingsCountRequest) ClientId(clientId string) ApiGetProcurementSettingsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementSettingsCountRequest) Conditions(conditions string) ApiGetProcurementSettingsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementSettingsCountRequest) ChildConditions(childConditions string) ApiGetProcurementSettingsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementSettingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSettingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementSettingsCountRequest) OrderBy(orderBy string) ApiGetProcurementSettingsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementSettingsCountRequest) Fields(fields string) ApiGetProcurementSettingsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementSettingsCountRequest) Page(page int32) ApiGetProcurementSettingsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementSettingsCountRequest) PageSize(pageSize int32) ApiGetProcurementSettingsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementSettingsCountRequest) PageId(pageId int32) ApiGetProcurementSettingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSettingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementSettingsCountExecute(r)
}

/*
GetProcurementSettingsCount Get Count of ProcurementSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementSettingsCountRequest
*/
func (a *ProcurementSettingsAPIService) GetProcurementSettingsCount(ctx context.Context) ApiGetProcurementSettingsCountRequest {
	return ApiGetProcurementSettingsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProcurementSettingsAPIService) GetProcurementSettingsCountExecute(r ApiGetProcurementSettingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementSettingsAPIService.GetProcurementSettingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/settings/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementSettingsByIdRequest struct {
	ctx            context.Context
	ApiService     *ProcurementSettingsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementSettingsByIdRequest) ClientId(clientId string) ApiPatchProcurementSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementSettingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementSettingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementSettingsByIdRequest) Execute() (*ProcurementSetting, *http.Response, error) {
	return r.ApiService.PatchProcurementSettingsByIdExecute(r)
}

/*
PatchProcurementSettingsById Patch ProcurementSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id settingId
	@return ApiPatchProcurementSettingsByIdRequest
*/
func (a *ProcurementSettingsAPIService) PatchProcurementSettingsById(ctx context.Context, id int32) ApiPatchProcurementSettingsByIdRequest {
	return ApiPatchProcurementSettingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProcurementSetting
func (a *ProcurementSettingsAPIService) PatchProcurementSettingsByIdExecute(r ApiPatchProcurementSettingsByIdRequest) (*ProcurementSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementSettingsAPIService.PatchProcurementSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/settings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementSettingsByIdRequest struct {
	ctx                context.Context
	ApiService         *ProcurementSettingsAPIService
	id                 int32
	clientId           *string
	procurementSetting *ProcurementSetting
}

func (r ApiPutProcurementSettingsByIdRequest) ClientId(clientId string) ApiPutProcurementSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// procurementSetting
func (r ApiPutProcurementSettingsByIdRequest) ProcurementSetting(procurementSetting ProcurementSetting) ApiPutProcurementSettingsByIdRequest {
	r.procurementSetting = &procurementSetting
	return r
}

func (r ApiPutProcurementSettingsByIdRequest) Execute() (*ProcurementSetting, *http.Response, error) {
	return r.ApiService.PutProcurementSettingsByIdExecute(r)
}

/*
PutProcurementSettingsById Put ProcurementSetting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id settingId
	@return ApiPutProcurementSettingsByIdRequest
*/
func (a *ProcurementSettingsAPIService) PutProcurementSettingsById(ctx context.Context, id int32) ApiPutProcurementSettingsByIdRequest {
	return ApiPutProcurementSettingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProcurementSetting
func (a *ProcurementSettingsAPIService) PutProcurementSettingsByIdExecute(r ApiPutProcurementSettingsByIdRequest) (*ProcurementSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcurementSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcurementSettingsAPIService.PutProcurementSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/settings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.procurementSetting == nil {
		return localVarReturnValue, nil, reportError("procurementSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.procurementSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
