/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectBoardTeamsAPIService ProjectBoardTeamsAPI service
type ProjectBoardTeamsAPIService service

type ApiDeleteProjectBoardsByParentIdTeamsByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectBoardTeamsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProjectBoardsByParentIdTeamsByIdRequest) ClientId(clientId string) ApiDeleteProjectBoardsByParentIdTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectBoardsByParentIdTeamsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectBoardsByParentIdTeamsByIdExecute(r)
}

/*
DeleteProjectBoardsByParentIdTeamsById Delete ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamId
	@param parentId boardId
	@return ApiDeleteProjectBoardsByParentIdTeamsByIdRequest
*/
func (a *ProjectBoardTeamsAPIService) DeleteProjectBoardsByParentIdTeamsById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectBoardsByParentIdTeamsByIdRequest {
	return ApiDeleteProjectBoardsByParentIdTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ProjectBoardTeamsAPIService) DeleteProjectBoardsByParentIdTeamsByIdExecute(r ApiDeleteProjectBoardsByParentIdTeamsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.DeleteProjectBoardsByParentIdTeamsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdTeamsRequest struct {
	ctx                   context.Context
	ApiService            *ProjectBoardTeamsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) Fields(fields string) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) Page(page int32) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdTeamsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsRequest) Execute() ([]ProjectBoardTeam, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdTeamsExecute(r)
}

/*
GetProjectBoardsByParentIdTeams Get List of ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetProjectBoardsByParentIdTeamsRequest
*/
func (a *ProjectBoardTeamsAPIService) GetProjectBoardsByParentIdTeams(ctx context.Context, parentId int32) ApiGetProjectBoardsByParentIdTeamsRequest {
	return ApiGetProjectBoardsByParentIdTeamsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ProjectBoardTeam
func (a *ProjectBoardTeamsAPIService) GetProjectBoardsByParentIdTeamsExecute(r ApiGetProjectBoardsByParentIdTeamsRequest) ([]ProjectBoardTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectBoardTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.GetProjectBoardsByParentIdTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdTeamsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectBoardTeamsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) Fields(fields string) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) Page(page int32) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdRequest) Execute() (*ProjectBoardTeam, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdTeamsByIdExecute(r)
}

/*
GetProjectBoardsByParentIdTeamsById Get ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamId
	@param parentId boardId
	@return ApiGetProjectBoardsByParentIdTeamsByIdRequest
*/
func (a *ProjectBoardTeamsAPIService) GetProjectBoardsByParentIdTeamsById(ctx context.Context, id int32, parentId int32) ApiGetProjectBoardsByParentIdTeamsByIdRequest {
	return ApiGetProjectBoardsByParentIdTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectBoardTeam
func (a *ProjectBoardTeamsAPIService) GetProjectBoardsByParentIdTeamsByIdExecute(r ApiGetProjectBoardsByParentIdTeamsByIdRequest) (*ProjectBoardTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectBoardTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.GetProjectBoardsByParentIdTeamsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdTeamsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectBoardTeamsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) Fields(fields string) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) Page(page int32) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdTeamsCountExecute(r)
}

/*
GetProjectBoardsByParentIdTeamsCount Get Count of ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetProjectBoardsByParentIdTeamsCountRequest
*/
func (a *ProjectBoardTeamsAPIService) GetProjectBoardsByParentIdTeamsCount(ctx context.Context, parentId int32) ApiGetProjectBoardsByParentIdTeamsCountRequest {
	return ApiGetProjectBoardsByParentIdTeamsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectBoardTeamsAPIService) GetProjectBoardsByParentIdTeamsCountExecute(r ApiGetProjectBoardsByParentIdTeamsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.GetProjectBoardsByParentIdTeamsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectBoardsByParentIdTeamsByIdRequest struct {
	ctx            context.Context
	ApiService     *ProjectBoardTeamsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectBoardsByParentIdTeamsByIdRequest) ClientId(clientId string) ApiPatchProjectBoardsByParentIdTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectBoardsByParentIdTeamsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectBoardsByParentIdTeamsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectBoardsByParentIdTeamsByIdRequest) Execute() (*ProjectBoardTeam, *http.Response, error) {
	return r.ApiService.PatchProjectBoardsByParentIdTeamsByIdExecute(r)
}

/*
PatchProjectBoardsByParentIdTeamsById Patch ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamId
	@param parentId boardId
	@return ApiPatchProjectBoardsByParentIdTeamsByIdRequest
*/
func (a *ProjectBoardTeamsAPIService) PatchProjectBoardsByParentIdTeamsById(ctx context.Context, id int32, parentId int32) ApiPatchProjectBoardsByParentIdTeamsByIdRequest {
	return ApiPatchProjectBoardsByParentIdTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectBoardTeam
func (a *ProjectBoardTeamsAPIService) PatchProjectBoardsByParentIdTeamsByIdExecute(r ApiPatchProjectBoardsByParentIdTeamsByIdRequest) (*ProjectBoardTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectBoardTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.PatchProjectBoardsByParentIdTeamsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectBoardsByParentIdTeamsRequest struct {
	ctx              context.Context
	ApiService       *ProjectBoardTeamsAPIService
	parentId         int32
	clientId         *string
	projectBoardTeam *ProjectBoardTeam
}

func (r ApiPostProjectBoardsByParentIdTeamsRequest) ClientId(clientId string) ApiPostProjectBoardsByParentIdTeamsRequest {
	r.clientId = &clientId
	return r
}

// team
func (r ApiPostProjectBoardsByParentIdTeamsRequest) ProjectBoardTeam(projectBoardTeam ProjectBoardTeam) ApiPostProjectBoardsByParentIdTeamsRequest {
	r.projectBoardTeam = &projectBoardTeam
	return r
}

func (r ApiPostProjectBoardsByParentIdTeamsRequest) Execute() (*ProjectBoardTeam, *http.Response, error) {
	return r.ApiService.PostProjectBoardsByParentIdTeamsExecute(r)
}

/*
PostProjectBoardsByParentIdTeams Post ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiPostProjectBoardsByParentIdTeamsRequest
*/
func (a *ProjectBoardTeamsAPIService) PostProjectBoardsByParentIdTeams(ctx context.Context, parentId int32) ApiPostProjectBoardsByParentIdTeamsRequest {
	return ApiPostProjectBoardsByParentIdTeamsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectBoardTeam
func (a *ProjectBoardTeamsAPIService) PostProjectBoardsByParentIdTeamsExecute(r ApiPostProjectBoardsByParentIdTeamsRequest) (*ProjectBoardTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectBoardTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.PostProjectBoardsByParentIdTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectBoardTeam == nil {
		return localVarReturnValue, nil, reportError("projectBoardTeam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectBoardTeam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectBoardsByParentIdTeamsByIdRequest struct {
	ctx              context.Context
	ApiService       *ProjectBoardTeamsAPIService
	id               int32
	parentId         int32
	clientId         *string
	projectBoardTeam *ProjectBoardTeam
}

func (r ApiPutProjectBoardsByParentIdTeamsByIdRequest) ClientId(clientId string) ApiPutProjectBoardsByParentIdTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

// team
func (r ApiPutProjectBoardsByParentIdTeamsByIdRequest) ProjectBoardTeam(projectBoardTeam ProjectBoardTeam) ApiPutProjectBoardsByParentIdTeamsByIdRequest {
	r.projectBoardTeam = &projectBoardTeam
	return r
}

func (r ApiPutProjectBoardsByParentIdTeamsByIdRequest) Execute() (*ProjectBoardTeam, *http.Response, error) {
	return r.ApiService.PutProjectBoardsByParentIdTeamsByIdExecute(r)
}

/*
PutProjectBoardsByParentIdTeamsById Put ProjectBoardTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamId
	@param parentId boardId
	@return ApiPutProjectBoardsByParentIdTeamsByIdRequest
*/
func (a *ProjectBoardTeamsAPIService) PutProjectBoardsByParentIdTeamsById(ctx context.Context, id int32, parentId int32) ApiPutProjectBoardsByParentIdTeamsByIdRequest {
	return ApiPutProjectBoardsByParentIdTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectBoardTeam
func (a *ProjectBoardTeamsAPIService) PutProjectBoardsByParentIdTeamsByIdExecute(r ApiPutProjectBoardsByParentIdTeamsByIdRequest) (*ProjectBoardTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectBoardTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamsAPIService.PutProjectBoardsByParentIdTeamsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectBoardTeam == nil {
		return localVarReturnValue, nil, reportError("projectBoardTeam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectBoardTeam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
