/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectContactsAPIService ProjectContactsAPI service
type ProjectContactsAPIService service

type ApiDeleteProjectProjectsByParentIdContactsByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectContactsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProjectProjectsByParentIdContactsByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectsByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectsByParentIdContactsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectsByParentIdContactsByIdExecute(r)
}

/*
DeleteProjectProjectsByParentIdContactsById Delete ProjectContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id contactId
	@param parentId projectId
	@return ApiDeleteProjectProjectsByParentIdContactsByIdRequest
*/
func (a *ProjectContactsAPIService) DeleteProjectProjectsByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectProjectsByParentIdContactsByIdRequest {
	return ApiDeleteProjectProjectsByParentIdContactsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ProjectContactsAPIService) DeleteProjectProjectsByParentIdContactsByIdExecute(r ApiDeleteProjectProjectsByParentIdContactsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectContactsAPIService.DeleteProjectProjectsByParentIdContactsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdContactsRequest struct {
	ctx                   context.Context
	ApiService            *ProjectContactsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdContactsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdContactsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdContactsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdContactsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdContactsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) Fields(fields string) ApiGetProjectProjectsByParentIdContactsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) Page(page int32) ApiGetProjectProjectsByParentIdContactsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdContactsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdContactsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsRequest) Execute() ([]ProjectContact, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdContactsExecute(r)
}

/*
GetProjectProjectsByParentIdContacts Get List of ProjectContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId projectId
	@return ApiGetProjectProjectsByParentIdContactsRequest
*/
func (a *ProjectContactsAPIService) GetProjectProjectsByParentIdContacts(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdContactsRequest {
	return ApiGetProjectProjectsByParentIdContactsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ProjectContact
func (a *ProjectContactsAPIService) GetProjectProjectsByParentIdContactsExecute(r ApiGetProjectProjectsByParentIdContactsRequest) ([]ProjectContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectContactsAPIService.GetProjectProjectsByParentIdContacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdContactsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectContactsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) Fields(fields string) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) Page(page int32) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectsByParentIdContactsByIdRequest) Execute() (*ProjectContact, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdContactsByIdExecute(r)
}

/*
GetProjectProjectsByParentIdContactsById Get ProjectContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id contactId
	@param parentId projectId
	@return ApiGetProjectProjectsByParentIdContactsByIdRequest
*/
func (a *ProjectContactsAPIService) GetProjectProjectsByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiGetProjectProjectsByParentIdContactsByIdRequest {
	return ApiGetProjectProjectsByParentIdContactsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectContact
func (a *ProjectContactsAPIService) GetProjectProjectsByParentIdContactsByIdExecute(r ApiGetProjectProjectsByParentIdContactsByIdRequest) (*ProjectContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectContactsAPIService.GetProjectProjectsByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectsByParentIdContactsRequest struct {
	ctx            context.Context
	ApiService     *ProjectContactsAPIService
	parentId       int32
	clientId       *string
	projectContact *ProjectContact
}

func (r ApiPostProjectProjectsByParentIdContactsRequest) ClientId(clientId string) ApiPostProjectProjectsByParentIdContactsRequest {
	r.clientId = &clientId
	return r
}

// contact
func (r ApiPostProjectProjectsByParentIdContactsRequest) ProjectContact(projectContact ProjectContact) ApiPostProjectProjectsByParentIdContactsRequest {
	r.projectContact = &projectContact
	return r
}

func (r ApiPostProjectProjectsByParentIdContactsRequest) Execute() (*ProjectContact, *http.Response, error) {
	return r.ApiService.PostProjectProjectsByParentIdContactsExecute(r)
}

/*
PostProjectProjectsByParentIdContacts Post ProjectContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId projectId
	@return ApiPostProjectProjectsByParentIdContactsRequest
*/
func (a *ProjectContactsAPIService) PostProjectProjectsByParentIdContacts(ctx context.Context, parentId int32) ApiPostProjectProjectsByParentIdContactsRequest {
	return ApiPostProjectProjectsByParentIdContactsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectContact
func (a *ProjectContactsAPIService) PostProjectProjectsByParentIdContactsExecute(r ApiPostProjectProjectsByParentIdContactsRequest) (*ProjectContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectContactsAPIService.PostProjectProjectsByParentIdContacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectContact == nil {
		return localVarReturnValue, nil, reportError("projectContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
