/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectStatusesAPIService ProjectStatusesAPI service
type ProjectStatusesAPIService service

type ApiDeleteProjectStatusesByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectStatusesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProjectStatusesByIdRequest) ClientId(clientId string) ApiDeleteProjectStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectStatusesByIdExecute(r)
}

/*
DeleteProjectStatusesById Delete ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiDeleteProjectStatusesByIdRequest
*/
func (a *ProjectStatusesAPIService) DeleteProjectStatusesById(ctx context.Context, id int32) ApiDeleteProjectStatusesByIdRequest {
	return ApiDeleteProjectStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProjectStatusesAPIService) DeleteProjectStatusesByIdExecute(r ApiDeleteProjectStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.DeleteProjectStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectStatusesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectStatusesRequest) ClientId(clientId string) ApiGetProjectStatusesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectStatusesRequest) Conditions(conditions string) ApiGetProjectStatusesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectStatusesRequest) ChildConditions(childConditions string) ApiGetProjectStatusesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectStatusesRequest) OrderBy(orderBy string) ApiGetProjectStatusesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectStatusesRequest) Fields(fields string) ApiGetProjectStatusesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectStatusesRequest) Page(page int32) ApiGetProjectStatusesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectStatusesRequest) PageSize(pageSize int32) ApiGetProjectStatusesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectStatusesRequest) PageId(pageId int32) ApiGetProjectStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectStatusesRequest) Execute() ([]ProjectStatus, *http.Response, error) {
	return r.ApiService.GetProjectStatusesExecute(r)
}

/*
GetProjectStatuses Get List of ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectStatusesRequest
*/
func (a *ProjectStatusesAPIService) GetProjectStatuses(ctx context.Context) ApiGetProjectStatusesRequest {
	return ApiGetProjectStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectStatus
func (a *ProjectStatusesAPIService) GetProjectStatusesExecute(r ApiGetProjectStatusesRequest) ([]ProjectStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.GetProjectStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectStatusesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectStatusesByIdRequest) ClientId(clientId string) ApiGetProjectStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectStatusesByIdRequest) Conditions(conditions string) ApiGetProjectStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectStatusesByIdRequest) ChildConditions(childConditions string) ApiGetProjectStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectStatusesByIdRequest) OrderBy(orderBy string) ApiGetProjectStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectStatusesByIdRequest) Fields(fields string) ApiGetProjectStatusesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectStatusesByIdRequest) Page(page int32) ApiGetProjectStatusesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectStatusesByIdRequest) PageSize(pageSize int32) ApiGetProjectStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectStatusesByIdRequest) PageId(pageId int32) ApiGetProjectStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectStatusesByIdRequest) Execute() (*ProjectStatus, *http.Response, error) {
	return r.ApiService.GetProjectStatusesByIdExecute(r)
}

/*
GetProjectStatusesById Get ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetProjectStatusesByIdRequest
*/
func (a *ProjectStatusesAPIService) GetProjectStatusesById(ctx context.Context, id int32) ApiGetProjectStatusesByIdRequest {
	return ApiGetProjectStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectStatus
func (a *ProjectStatusesAPIService) GetProjectStatusesByIdExecute(r ApiGetProjectStatusesByIdRequest) (*ProjectStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.GetProjectStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectStatusesCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectStatusesCountRequest) ClientId(clientId string) ApiGetProjectStatusesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectStatusesCountRequest) Conditions(conditions string) ApiGetProjectStatusesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectStatusesCountRequest) ChildConditions(childConditions string) ApiGetProjectStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectStatusesCountRequest) OrderBy(orderBy string) ApiGetProjectStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectStatusesCountRequest) Fields(fields string) ApiGetProjectStatusesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectStatusesCountRequest) Page(page int32) ApiGetProjectStatusesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectStatusesCountRequest) PageSize(pageSize int32) ApiGetProjectStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectStatusesCountRequest) PageId(pageId int32) ApiGetProjectStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectStatusesCountExecute(r)
}

/*
GetProjectStatusesCount Get Count of ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectStatusesCountRequest
*/
func (a *ProjectStatusesAPIService) GetProjectStatusesCount(ctx context.Context) ApiGetProjectStatusesCountRequest {
	return ApiGetProjectStatusesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectStatusesAPIService) GetProjectStatusesCountExecute(r ApiGetProjectStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.GetProjectStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectStatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *ProjectStatusesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectStatusesByIdRequest) ClientId(clientId string) ApiPatchProjectStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectStatusesByIdRequest) Execute() (*ProjectStatus, *http.Response, error) {
	return r.ApiService.PatchProjectStatusesByIdExecute(r)
}

/*
PatchProjectStatusesById Patch ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPatchProjectStatusesByIdRequest
*/
func (a *ProjectStatusesAPIService) PatchProjectStatusesById(ctx context.Context, id int32) ApiPatchProjectStatusesByIdRequest {
	return ApiPatchProjectStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectStatus
func (a *ProjectStatusesAPIService) PatchProjectStatusesByIdExecute(r ApiPatchProjectStatusesByIdRequest) (*ProjectStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.PatchProjectStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectStatusesRequest struct {
	ctx           context.Context
	ApiService    *ProjectStatusesAPIService
	clientId      *string
	projectStatus *ProjectStatus
}

func (r ApiPostProjectStatusesRequest) ClientId(clientId string) ApiPostProjectStatusesRequest {
	r.clientId = &clientId
	return r
}

// projectStatus
func (r ApiPostProjectStatusesRequest) ProjectStatus(projectStatus ProjectStatus) ApiPostProjectStatusesRequest {
	r.projectStatus = &projectStatus
	return r
}

func (r ApiPostProjectStatusesRequest) Execute() (*ProjectStatus, *http.Response, error) {
	return r.ApiService.PostProjectStatusesExecute(r)
}

/*
PostProjectStatuses Post ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProjectStatusesRequest
*/
func (a *ProjectStatusesAPIService) PostProjectStatuses(ctx context.Context) ApiPostProjectStatusesRequest {
	return ApiPostProjectStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectStatus
func (a *ProjectStatusesAPIService) PostProjectStatusesExecute(r ApiPostProjectStatusesRequest) (*ProjectStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.PostProjectStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectStatus == nil {
		return localVarReturnValue, nil, reportError("projectStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectStatusesByIdRequest struct {
	ctx           context.Context
	ApiService    *ProjectStatusesAPIService
	id            int32
	clientId      *string
	projectStatus *ProjectStatus
}

func (r ApiPutProjectStatusesByIdRequest) ClientId(clientId string) ApiPutProjectStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// projectStatus
func (r ApiPutProjectStatusesByIdRequest) ProjectStatus(projectStatus ProjectStatus) ApiPutProjectStatusesByIdRequest {
	r.projectStatus = &projectStatus
	return r
}

func (r ApiPutProjectStatusesByIdRequest) Execute() (*ProjectStatus, *http.Response, error) {
	return r.ApiService.PutProjectStatusesByIdExecute(r)
}

/*
PutProjectStatusesById Put ProjectStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPutProjectStatusesByIdRequest
*/
func (a *ProjectStatusesAPIService) PutProjectStatusesById(ctx context.Context, id int32) ApiPutProjectStatusesByIdRequest {
	return ApiPutProjectStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectStatus
func (a *ProjectStatusesAPIService) PutProjectStatusesByIdExecute(r ApiPutProjectStatusesByIdRequest) (*ProjectStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectStatusesAPIService.PutProjectStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectStatus == nil {
		return localVarReturnValue, nil, reportError("projectStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
