/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectTemplatePhasesAPIService ProjectTemplatePhasesAPI service
type ProjectTemplatePhasesAPIService service

type ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectTemplatePhasesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r)
}

/*
DeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesById Delete ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplatePhaseId
	@param parentId templateProjectId
	@return ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest
*/
func (a *ProjectTemplatePhasesAPIService) DeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	return ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ProjectTemplatePhasesAPIService) DeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r ApiDeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.DeleteProjectProjectTemplatesByParentIdProjectTemplatePhasesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplatePhases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplatePhasesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) Fields(fields string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) Page(page int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) Execute() ([]ProjectTemplatePhase, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByParentIdProjectTemplatePhasesExecute(r)
}

/*
GetProjectProjectTemplatesByParentIdProjectTemplatePhases Get List of ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId templateProjectId
	@return ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest
*/
func (a *ProjectTemplatePhasesAPIService) GetProjectProjectTemplatesByParentIdProjectTemplatePhases(ctx context.Context, parentId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	return ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ProjectTemplatePhase
func (a *ProjectTemplatePhasesAPIService) GetProjectProjectTemplatesByParentIdProjectTemplatePhasesExecute(r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) ([]ProjectTemplatePhase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTemplatePhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.GetProjectProjectTemplatesByParentIdProjectTemplatePhases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplatePhases"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplatePhasesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Fields(fields string) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Page(page int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Execute() (*ProjectTemplatePhase, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r)
}

/*
GetProjectProjectTemplatesByParentIdProjectTemplatePhasesById Get ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplatePhaseId
	@param parentId templateProjectId
	@return ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest
*/
func (a *ProjectTemplatePhasesAPIService) GetProjectProjectTemplatesByParentIdProjectTemplatePhasesById(ctx context.Context, id int32, parentId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	return ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplatePhase
func (a *ProjectTemplatePhasesAPIService) GetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r ApiGetProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) (*ProjectTemplatePhase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplatePhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.GetProjectProjectTemplatesByParentIdProjectTemplatePhasesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplatePhases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplatePhasesAPIService
	clientId              *string
	parentId              int32
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) Fields(fields string) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) Page(page int32) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) Execute() ([]ProjectTemplatePhase, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesProjectTemplatePhasesExecute(r)
}

/*
GetProjectProjectTemplatesProjectTemplatePhases Get List of ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId templateProjectId
	@return ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest
*/
func (a *ProjectTemplatePhasesAPIService) GetProjectProjectTemplatesProjectTemplatePhases(ctx context.Context, parentId int32) ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest {
	return ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ProjectTemplatePhase
func (a *ProjectTemplatePhasesAPIService) GetProjectProjectTemplatesProjectTemplatePhasesExecute(r ApiGetProjectProjectTemplatesProjectTemplatePhasesRequest) ([]ProjectTemplatePhase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTemplatePhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.GetProjectProjectTemplatesProjectTemplatePhases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/projectTemplatePhases"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest struct {
	ctx            context.Context
	ApiService     *ProjectTemplatePhasesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) ClientId(clientId string) ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Execute() (*ProjectTemplatePhase, *http.Response, error) {
	return r.ApiService.PatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r)
}

/*
PatchProjectProjectTemplatesByParentIdProjectTemplatePhasesById Patch ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplatePhaseId
	@param parentId templateProjectId
	@return ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest
*/
func (a *ProjectTemplatePhasesAPIService) PatchProjectProjectTemplatesByParentIdProjectTemplatePhasesById(ctx context.Context, id int32, parentId int32) ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	return ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplatePhase
func (a *ProjectTemplatePhasesAPIService) PatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r ApiPatchProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) (*ProjectTemplatePhase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplatePhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.PatchProjectProjectTemplatesByParentIdProjectTemplatePhasesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplatePhases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest struct {
	ctx                  context.Context
	ApiService           *ProjectTemplatePhasesAPIService
	parentId             int32
	clientId             *string
	projectTemplatePhase *ProjectTemplatePhase
}

func (r ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) ClientId(clientId string) ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.clientId = &clientId
	return r
}

// ProjectTemplatePhase
func (r ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) ProjectTemplatePhase(projectTemplatePhase ProjectTemplatePhase) ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	r.projectTemplatePhase = &projectTemplatePhase
	return r
}

func (r ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) Execute() (*ProjectTemplatePhase, *http.Response, error) {
	return r.ApiService.PostProjectProjectTemplatesByParentIdProjectTemplatePhasesExecute(r)
}

/*
PostProjectProjectTemplatesByParentIdProjectTemplatePhases Post ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId templateProjectId
	@return ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest
*/
func (a *ProjectTemplatePhasesAPIService) PostProjectProjectTemplatesByParentIdProjectTemplatePhases(ctx context.Context, parentId int32) ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest {
	return ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplatePhase
func (a *ProjectTemplatePhasesAPIService) PostProjectProjectTemplatesByParentIdProjectTemplatePhasesExecute(r ApiPostProjectProjectTemplatesByParentIdProjectTemplatePhasesRequest) (*ProjectTemplatePhase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplatePhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.PostProjectProjectTemplatesByParentIdProjectTemplatePhases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplatePhases"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplatePhase == nil {
		return localVarReturnValue, nil, reportError("projectTemplatePhase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplatePhase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest struct {
	ctx                  context.Context
	ApiService           *ProjectTemplatePhasesAPIService
	id                   int32
	parentId             int32
	clientId             *string
	projectTemplatePhase *ProjectTemplatePhase
}

func (r ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) ClientId(clientId string) ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.clientId = &clientId
	return r
}

// projectTemplatePhase
func (r ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) ProjectTemplatePhase(projectTemplatePhase ProjectTemplatePhase) ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	r.projectTemplatePhase = &projectTemplatePhase
	return r
}

func (r ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) Execute() (*ProjectTemplatePhase, *http.Response, error) {
	return r.ApiService.PutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r)
}

/*
PutProjectProjectTemplatesByParentIdProjectTemplatePhasesById Put ProjectTemplatePhases

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplatePhaseId
	@param parentId templateProjectId
	@return ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest
*/
func (a *ProjectTemplatePhasesAPIService) PutProjectProjectTemplatesByParentIdProjectTemplatePhasesById(ctx context.Context, id int32, parentId int32) ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest {
	return ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplatePhase
func (a *ProjectTemplatePhasesAPIService) PutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdExecute(r ApiPutProjectProjectTemplatesByParentIdProjectTemplatePhasesByIdRequest) (*ProjectTemplatePhase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplatePhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatePhasesAPIService.PutProjectProjectTemplatesByParentIdProjectTemplatePhasesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplatePhases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplatePhase == nil {
		return localVarReturnValue, nil, reportError("projectTemplatePhase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplatePhase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
