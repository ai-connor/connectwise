/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectTemplateTasksAPIService ProjectTemplateTasksAPI service
type ProjectTemplateTasksAPIService service

type ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest struct {
	ctx           context.Context
	ApiService    *ProjectTemplateTasksAPIService
	id            int32
	grandParentId int32
	parentId      int32
	clientId      *string
}

func (r ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r)
}

/*
DeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById Delete ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplateTaskId
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest
*/
func (a *ProjectTemplateTasksAPIService) DeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById(ctx context.Context, id int32, grandParentId int32, parentId int32) ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	return ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
func (a *ProjectTemplateTasksAPIService) DeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r ApiDeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.DeleteProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplateTasksAPIService
	grandParentId         int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) Fields(fields string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) Page(page int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) Execute() ([]ProjectTemplateTask, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksExecute(r)
}

/*
GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasks Get List of ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest
*/
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasks(ctx context.Context, grandParentId int32, parentId int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	return ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest{
		ApiService:    a,
		ctx:           ctx,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
//
//	@return []ProjectTemplateTask
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksExecute(r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) ([]ProjectTemplateTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTemplateTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplateTasksAPIService
	id                    int32
	grandParentId         int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Fields(fields string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Page(page int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Execute() (*ProjectTemplateTask, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r)
}

/*
GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById Get ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplateTaskId
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest
*/
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById(ctx context.Context, id int32, grandParentId int32, parentId int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	return ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplateTask
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) (*ProjectTemplateTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplateTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplateTasksAPIService
	grandParentId         int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) Fields(fields string) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) Page(page int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountExecute(r)
}

/*
GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCount Get Count of ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest
*/
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCount(ctx context.Context, grandParentId int32, parentId int32) ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest {
	return ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest{
		ApiService:    a,
		ctx:           ctx,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountExecute(r ApiGetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.GetProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks/count"
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTemplateTasksAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) Fields(fields string) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) Page(page int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) Execute() ([]ProjectTemplateTask, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesProjectTemplateTicketsTasksExecute(r)
}

/*
GetProjectProjectTemplatesProjectTemplateTicketsTasks Get List of ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest
*/
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesProjectTemplateTicketsTasks(ctx context.Context) ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest {
	return ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectTemplateTask
func (a *ProjectTemplateTasksAPIService) GetProjectProjectTemplatesProjectTemplateTicketsTasksExecute(r ApiGetProjectProjectTemplatesProjectTemplateTicketsTasksRequest) ([]ProjectTemplateTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTemplateTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.GetProjectProjectTemplatesProjectTemplateTicketsTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/projectTemplateTickets/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest struct {
	ctx            context.Context
	ApiService     *ProjectTemplateTasksAPIService
	id             int32
	grandParentId  int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Execute() (*ProjectTemplateTask, *http.Response, error) {
	return r.ApiService.PatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r)
}

/*
PatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById Patch ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplateTaskId
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest
*/
func (a *ProjectTemplateTasksAPIService) PatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById(ctx context.Context, id int32, grandParentId int32, parentId int32) ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	return ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplateTask
func (a *ProjectTemplateTasksAPIService) PatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r ApiPatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) (*ProjectTemplateTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplateTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.PatchProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest struct {
	ctx                 context.Context
	ApiService          *ProjectTemplateTasksAPIService
	grandParentId       int32
	parentId            int32
	clientId            *string
	projectTemplateTask *ProjectTemplateTask
}

func (r ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) ClientId(clientId string) ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.clientId = &clientId
	return r
}

// ProjectTemplateTask
func (r ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) ProjectTemplateTask(projectTemplateTask ProjectTemplateTask) ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	r.projectTemplateTask = &projectTemplateTask
	return r
}

func (r ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) Execute() (*ProjectTemplateTask, *http.Response, error) {
	return r.ApiService.PostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksExecute(r)
}

/*
PostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasks Post ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest
*/
func (a *ProjectTemplateTasksAPIService) PostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasks(ctx context.Context, grandParentId int32, parentId int32) ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest {
	return ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest{
		ApiService:    a,
		ctx:           ctx,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplateTask
func (a *ProjectTemplateTasksAPIService) PostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksExecute(r ApiPostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksRequest) (*ProjectTemplateTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplateTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.PostProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplateTask == nil {
		return localVarReturnValue, nil, reportError("projectTemplateTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplateTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest struct {
	ctx                 context.Context
	ApiService          *ProjectTemplateTasksAPIService
	id                  int32
	grandParentId       int32
	parentId            int32
	clientId            *string
	projectTemplateTask *ProjectTemplateTask
}

func (r ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) ProjectTemplateTask(projectTemplateTask ProjectTemplateTask) ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	r.projectTemplateTask = &projectTemplateTask
	return r
}

func (r ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) Execute() (*ProjectTemplateTask, *http.Response, error) {
	return r.ApiService.PutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r)
}

/*
PutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById Put ProjectTemplateTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ProjectTemplateTaskId
	@param grandParentId ProjectTemplateId
	@param parentId ProjectTemplateTicketId
	@return ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest
*/
func (a *ProjectTemplateTasksAPIService) PutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById(ctx context.Context, id int32, grandParentId int32, parentId int32) ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest {
	return ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		grandParentId: grandParentId,
		parentId:      parentId,
	}
}

// Execute executes the request
//
//	@return ProjectTemplateTask
func (a *ProjectTemplateTasksAPIService) PutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdExecute(r ApiPutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksByIdRequest) (*ProjectTemplateTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTemplateTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTasksAPIService.PutProjectProjectTemplatesByGrandParentIdProjectTemplateTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{grandParentId}/projectTemplateTickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandParentId"+"}", url.PathEscape(parameterValueToString(r.grandParentId, "grandParentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplateTask == nil {
		return localVarReturnValue, nil, reportError("projectTemplateTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplateTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
