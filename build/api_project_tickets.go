/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectTicketsAPIService ProjectTicketsAPI service
type ProjectTicketsAPIService service

type ApiDeleteProjectTicketsByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectTicketsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProjectTicketsByIdRequest) ClientId(clientId string) ApiDeleteProjectTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectTicketsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectTicketsByIdExecute(r)
}

/*
DeleteProjectTicketsById Delete ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ticketId
	@return ApiDeleteProjectTicketsByIdRequest
*/
func (a *ProjectTicketsAPIService) DeleteProjectTicketsById(ctx context.Context, id int32) ApiDeleteProjectTicketsByIdRequest {
	return ApiDeleteProjectTicketsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProjectTicketsAPIService) DeleteProjectTicketsByIdExecute(r ApiDeleteProjectTicketsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.DeleteProjectTicketsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectTicketsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectTicketsByParentIdConfigurationsByIdExecute(r)
}

/*
DeleteProjectTicketsByParentIdConfigurationsById Delete ConfigurationReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ticketId
	@param parentId ticketId
	@return ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest
*/
func (a *ProjectTicketsAPIService) DeleteProjectTicketsByParentIdConfigurationsById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest {
	return ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ProjectTicketsAPIService) DeleteProjectTicketsByParentIdConfigurationsByIdExecute(r ApiDeleteProjectTicketsByParentIdConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.DeleteProjectTicketsByParentIdConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectTicketsRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsRequest) ClientId(clientId string) ApiGetProjectTicketsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsRequest) Conditions(conditions string) ApiGetProjectTicketsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsRequest) ChildConditions(childConditions string) ApiGetProjectTicketsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsRequest) OrderBy(orderBy string) ApiGetProjectTicketsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsRequest) Fields(fields string) ApiGetProjectTicketsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsRequest) Page(page int32) ApiGetProjectTicketsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsRequest) PageSize(pageSize int32) ApiGetProjectTicketsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsRequest) PageId(pageId int32) ApiGetProjectTicketsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsRequest) Execute() ([]ProjectTicket, *http.Response, error) {
	return r.ApiService.GetProjectTicketsExecute(r)
}

/*
GetProjectTickets Get List of ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectTicketsRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTickets(ctx context.Context) ApiGetProjectTicketsRequest {
	return ApiGetProjectTicketsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectTicket
func (a *ProjectTicketsAPIService) GetProjectTicketsExecute(r ApiGetProjectTicketsRequest) ([]ProjectTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByIdRequest) ClientId(clientId string) ApiGetProjectTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByIdRequest) Conditions(conditions string) ApiGetProjectTicketsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByIdRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByIdRequest) OrderBy(orderBy string) ApiGetProjectTicketsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByIdRequest) Fields(fields string) ApiGetProjectTicketsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByIdRequest) Page(page int32) ApiGetProjectTicketsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByIdRequest) PageSize(pageSize int32) ApiGetProjectTicketsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByIdRequest) PageId(pageId int32) ApiGetProjectTicketsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByIdRequest) Execute() (*ProjectTicket, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByIdExecute(r)
}

/*
GetProjectTicketsById Get ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ticketId
	@return ApiGetProjectTicketsByIdRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsById(ctx context.Context, id int32) ApiGetProjectTicketsByIdRequest {
	return ApiGetProjectTicketsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTicket
func (a *ProjectTicketsAPIService) GetProjectTicketsByIdExecute(r ApiGetProjectTicketsByIdRequest) (*ProjectTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdActivitiesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) Fields(fields string) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) Page(page int32) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdActivitiesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesRequest) Execute() ([]ActivityReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdActivitiesExecute(r)
}

/*
GetProjectTicketsByParentIdActivities Get List of ActivityReference              Gets activities associated to the ticket              Please use the /sales/activities?conditions=ticket/id={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdActivitiesRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdActivities(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdActivitiesRequest {
	return ApiGetProjectTicketsByParentIdActivitiesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ActivityReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdActivitiesExecute(r ApiGetProjectTicketsByParentIdActivitiesRequest) ([]ActivityReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ActivityReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/activities"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdActivitiesCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdActivitiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdActivitiesCountExecute(r)
}

/*
GetProjectTicketsByParentIdActivitiesCount Get Count of ActivityReference              Gets count of activities associated to the ticket              Please use the /sales/activities/count?conditions=ticket/id={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdActivitiesCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdActivitiesCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdActivitiesCountRequest {
	return ApiGetProjectTicketsByParentIdActivitiesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdActivitiesCountExecute(r ApiGetProjectTicketsByParentIdActivitiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdActivitiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/activities/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdConfigurationsRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) Fields(fields string) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) Page(page int32) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsRequest) Execute() ([]ConfigurationReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdConfigurationsExecute(r)
}

/*
GetProjectTicketsByParentIdConfigurations Get List of ConfigurationReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdConfigurationsRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdConfigurations(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdConfigurationsRequest {
	return ApiGetProjectTicketsByParentIdConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ConfigurationReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdConfigurationsExecute(r ApiGetProjectTicketsByParentIdConfigurationsRequest) ([]ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdConfigurationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) Fields(fields string) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) Page(page int32) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) Execute() (*ConfigurationReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdConfigurationsByIdExecute(r)
}

/*
GetProjectTicketsByParentIdConfigurationsById Get ConfigurationReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ticketId
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdConfigurationsByIdRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdConfigurationsById(ctx context.Context, id int32, parentId int32) ApiGetProjectTicketsByParentIdConfigurationsByIdRequest {
	return ApiGetProjectTicketsByParentIdConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ConfigurationReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdConfigurationsByIdExecute(r ApiGetProjectTicketsByParentIdConfigurationsByIdRequest) (*ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdConfigurationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdConfigurationsCountExecute(r)
}

/*
GetProjectTicketsByParentIdConfigurationsCount Get Count of ConfigurationReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdConfigurationsCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdConfigurationsCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdConfigurationsCountRequest {
	return ApiGetProjectTicketsByParentIdConfigurationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdConfigurationsCountExecute(r ApiGetProjectTicketsByParentIdConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/configurations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdDocumentsRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) Fields(fields string) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) Page(page int32) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdDocumentsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsRequest) Execute() ([]DocumentReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdDocumentsExecute(r)
}

/*
GetProjectTicketsByParentIdDocuments Get List of DocumentReference              Gets the documents associated to the ticket              Please use the /system/documents?recordType=Ticket&amp;recordId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdDocumentsRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdDocuments(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdDocumentsRequest {
	return ApiGetProjectTicketsByParentIdDocumentsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []DocumentReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdDocumentsExecute(r ApiGetProjectTicketsByParentIdDocumentsRequest) ([]DocumentReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DocumentReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/documents"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdDocumentsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdDocumentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdDocumentsCountExecute(r)
}

/*
GetProjectTicketsByParentIdDocumentsCount Get Count of DocumentReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdDocumentsCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdDocumentsCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdDocumentsCountRequest {
	return ApiGetProjectTicketsByParentIdDocumentsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdDocumentsCountExecute(r ApiGetProjectTicketsByParentIdDocumentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdDocumentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/documents/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdProductsRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdProductsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdProductsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdProductsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdProductsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdProductsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) Fields(fields string) ApiGetProjectTicketsByParentIdProductsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) Page(page int32) ApiGetProjectTicketsByParentIdProductsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdProductsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdProductsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsRequest) Execute() ([]ProductReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdProductsExecute(r)
}

/*
GetProjectTicketsByParentIdProducts Get List of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdProductsRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdProducts(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdProductsRequest {
	return ApiGetProjectTicketsByParentIdProductsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ProductReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdProductsExecute(r ApiGetProjectTicketsByParentIdProductsRequest) ([]ProductReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProductReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/products"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdProductsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdProductsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdProductsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdProductsCountExecute(r)
}

/*
GetProjectTicketsByParentIdProductsCount Get Count of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products/count?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdProductsCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdProductsCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdProductsCountRequest {
	return ApiGetProjectTicketsByParentIdProductsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdProductsCountExecute(r ApiGetProjectTicketsByParentIdProductsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdProductsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/products/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdScheduleentriesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) Fields(fields string) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) Page(page int32) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesRequest) Execute() ([]ScheduleEntryReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdScheduleentriesExecute(r)
}

/*
GetProjectTicketsByParentIdScheduleentries Get List of ScheduleEntryReference              Gets the schedule entries associated to the ticket              Please use the /schedule/entries?conditions=type/id=4 AND objectId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdScheduleentriesRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdScheduleentries(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdScheduleentriesRequest {
	return ApiGetProjectTicketsByParentIdScheduleentriesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ScheduleEntryReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdScheduleentriesExecute(r ApiGetProjectTicketsByParentIdScheduleentriesRequest) ([]ScheduleEntryReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ScheduleEntryReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdScheduleentries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/scheduleentries"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdScheduleentriesCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdScheduleentriesCountExecute(r)
}

/*
GetProjectTicketsByParentIdScheduleentriesCount Get Count of ScheduleEntryReference              Gets the schedule entries count associated to the ticket              Please use the /schedule/entries/count?conditions=type/id=4 AND objectId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdScheduleentriesCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdScheduleentriesCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdScheduleentriesCountRequest {
	return ApiGetProjectTicketsByParentIdScheduleentriesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdScheduleentriesCountExecute(r ApiGetProjectTicketsByParentIdScheduleentriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdScheduleentriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/scheduleentries/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdTimeentriesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) Fields(fields string) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) Page(page int32) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesRequest) Execute() ([]TimeEntryReference, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdTimeentriesExecute(r)
}

/*
GetProjectTicketsByParentIdTimeentries Get List of TimeEntryReference              Gets time entries associated to the ticket              Please use the /time/entries?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdTimeentriesRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdTimeentries(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdTimeentriesRequest {
	return ApiGetProjectTicketsByParentIdTimeentriesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []TimeEntryReference
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdTimeentriesExecute(r ApiGetProjectTicketsByParentIdTimeentriesRequest) ([]TimeEntryReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TimeEntryReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdTimeentries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/timeentries"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdTimeentriesCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdTimeentriesCountExecute(r)
}

/*
GetProjectTicketsByParentIdTimeentriesCount Get Count of TimeEntryReference              Gets time entries count associated to the ticket              Please use the /time/entries/count?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdTimeentriesCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdTimeentriesCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdTimeentriesCountRequest {
	return ApiGetProjectTicketsByParentIdTimeentriesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsByParentIdTimeentriesCountExecute(r ApiGetProjectTicketsByParentIdTimeentriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsByParentIdTimeentriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/timeentries/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTicketsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsCountRequest) ClientId(clientId string) ApiGetProjectTicketsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsCountRequest) Conditions(conditions string) ApiGetProjectTicketsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsCountRequest) Fields(fields string) ApiGetProjectTicketsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsCountRequest) Page(page int32) ApiGetProjectTicketsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsCountRequest) PageId(pageId int32) ApiGetProjectTicketsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsCountExecute(r)
}

/*
GetProjectTicketsCount Get Count of ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectTicketsCountRequest
*/
func (a *ProjectTicketsAPIService) GetProjectTicketsCount(ctx context.Context) ApiGetProjectTicketsCountRequest {
	return ApiGetProjectTicketsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTicketsAPIService) GetProjectTicketsCountExecute(r ApiGetProjectTicketsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.GetProjectTicketsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectTicketsByIdRequest struct {
	ctx            context.Context
	ApiService     *ProjectTicketsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectTicketsByIdRequest) ClientId(clientId string) ApiPatchProjectTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectTicketsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectTicketsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectTicketsByIdRequest) Execute() (*ProjectTicket, *http.Response, error) {
	return r.ApiService.PatchProjectTicketsByIdExecute(r)
}

/*
PatchProjectTicketsById Patch ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ticketId
	@return ApiPatchProjectTicketsByIdRequest
*/
func (a *ProjectTicketsAPIService) PatchProjectTicketsById(ctx context.Context, id int32) ApiPatchProjectTicketsByIdRequest {
	return ApiPatchProjectTicketsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTicket
func (a *ProjectTicketsAPIService) PatchProjectTicketsByIdExecute(r ApiPatchProjectTicketsByIdRequest) (*ProjectTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.PatchProjectTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectTicketsRequest struct {
	ctx           context.Context
	ApiService    *ProjectTicketsAPIService
	clientId      *string
	projectTicket *ProjectTicket
}

func (r ApiPostProjectTicketsRequest) ClientId(clientId string) ApiPostProjectTicketsRequest {
	r.clientId = &clientId
	return r
}

// ticket
func (r ApiPostProjectTicketsRequest) ProjectTicket(projectTicket ProjectTicket) ApiPostProjectTicketsRequest {
	r.projectTicket = &projectTicket
	return r
}

func (r ApiPostProjectTicketsRequest) Execute() (*ProjectTicket, *http.Response, error) {
	return r.ApiService.PostProjectTicketsExecute(r)
}

/*
PostProjectTickets Post ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProjectTicketsRequest
*/
func (a *ProjectTicketsAPIService) PostProjectTickets(ctx context.Context) ApiPostProjectTicketsRequest {
	return ApiPostProjectTicketsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectTicket
func (a *ProjectTicketsAPIService) PostProjectTicketsExecute(r ApiPostProjectTicketsRequest) (*ProjectTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.PostProjectTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTicket == nil {
		return localVarReturnValue, nil, reportError("projectTicket is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTicket
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectTicketsByParentIdConfigurationsRequest struct {
	ctx                    context.Context
	ApiService             *ProjectTicketsAPIService
	parentId               int32
	clientId               *string
	configurationReference *ConfigurationReference
}

func (r ApiPostProjectTicketsByParentIdConfigurationsRequest) ClientId(clientId string) ApiPostProjectTicketsByParentIdConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// configuration
func (r ApiPostProjectTicketsByParentIdConfigurationsRequest) ConfigurationReference(configurationReference ConfigurationReference) ApiPostProjectTicketsByParentIdConfigurationsRequest {
	r.configurationReference = &configurationReference
	return r
}

func (r ApiPostProjectTicketsByParentIdConfigurationsRequest) Execute() (*ConfigurationReference, *http.Response, error) {
	return r.ApiService.PostProjectTicketsByParentIdConfigurationsExecute(r)
}

/*
PostProjectTicketsByParentIdConfigurations Post ConfigurationReference

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiPostProjectTicketsByParentIdConfigurationsRequest
*/
func (a *ProjectTicketsAPIService) PostProjectTicketsByParentIdConfigurations(ctx context.Context, parentId int32) ApiPostProjectTicketsByParentIdConfigurationsRequest {
	return ApiPostProjectTicketsByParentIdConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ConfigurationReference
func (a *ProjectTicketsAPIService) PostProjectTicketsByParentIdConfigurationsExecute(r ApiPostProjectTicketsByParentIdConfigurationsRequest) (*ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.PostProjectTicketsByParentIdConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.configurationReference == nil {
		return localVarReturnValue, nil, reportError("configurationReference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.configurationReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectTicketsByParentIdConvertRequest struct {
	ctx         context.Context
	ApiService  *ProjectTicketsAPIService
	parentId    int32
	clientId    *string
	convertItem *ConvertItem
}

func (r ApiPostProjectTicketsByParentIdConvertRequest) ClientId(clientId string) ApiPostProjectTicketsByParentIdConvertRequest {
	r.clientId = &clientId
	return r
}

// item
func (r ApiPostProjectTicketsByParentIdConvertRequest) ConvertItem(convertItem ConvertItem) ApiPostProjectTicketsByParentIdConvertRequest {
	r.convertItem = &convertItem
	return r
}

func (r ApiPostProjectTicketsByParentIdConvertRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostProjectTicketsByParentIdConvertExecute(r)
}

/*
PostProjectTicketsByParentIdConvert Post SuccessResponse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiPostProjectTicketsByParentIdConvertRequest
*/
func (a *ProjectTicketsAPIService) PostProjectTicketsByParentIdConvert(ctx context.Context, parentId int32) ApiPostProjectTicketsByParentIdConvertRequest {
	return ApiPostProjectTicketsByParentIdConvertRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *ProjectTicketsAPIService) PostProjectTicketsByParentIdConvertExecute(r ApiPostProjectTicketsByParentIdConvertRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.PostProjectTicketsByParentIdConvert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/convert"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.convertItem == nil {
		return localVarReturnValue, nil, reportError("convertItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.convertItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectTicketsSearchRequest struct {
	ctx          context.Context
	ApiService   *ProjectTicketsAPIService
	clientId     *string
	filterValues *FilterValues
}

func (r ApiPostProjectTicketsSearchRequest) ClientId(clientId string) ApiPostProjectTicketsSearchRequest {
	r.clientId = &clientId
	return r
}

// filterValues
func (r ApiPostProjectTicketsSearchRequest) FilterValues(filterValues FilterValues) ApiPostProjectTicketsSearchRequest {
	r.filterValues = &filterValues
	return r
}

func (r ApiPostProjectTicketsSearchRequest) Execute() ([]ProjectTicket, *http.Response, error) {
	return r.ApiService.PostProjectTicketsSearchExecute(r)
}

/*
PostProjectTicketsSearch Post List of ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProjectTicketsSearchRequest
*/
func (a *ProjectTicketsAPIService) PostProjectTicketsSearch(ctx context.Context) ApiPostProjectTicketsSearchRequest {
	return ApiPostProjectTicketsSearchRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectTicket
func (a *ProjectTicketsAPIService) PostProjectTicketsSearchExecute(r ApiPostProjectTicketsSearchRequest) ([]ProjectTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.PostProjectTicketsSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.filterValues == nil {
		return localVarReturnValue, nil, reportError("filterValues is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.filterValues
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectTicketsByIdRequest struct {
	ctx           context.Context
	ApiService    *ProjectTicketsAPIService
	id            int32
	clientId      *string
	projectTicket *ProjectTicket
}

func (r ApiPutProjectTicketsByIdRequest) ClientId(clientId string) ApiPutProjectTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// ticket
func (r ApiPutProjectTicketsByIdRequest) ProjectTicket(projectTicket ProjectTicket) ApiPutProjectTicketsByIdRequest {
	r.projectTicket = &projectTicket
	return r
}

func (r ApiPutProjectTicketsByIdRequest) Execute() (*ProjectTicket, *http.Response, error) {
	return r.ApiService.PutProjectTicketsByIdExecute(r)
}

/*
PutProjectTicketsById Put ProjectTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ticketId
	@return ApiPutProjectTicketsByIdRequest
*/
func (a *ProjectTicketsAPIService) PutProjectTicketsById(ctx context.Context, id int32) ApiPutProjectTicketsByIdRequest {
	return ApiPutProjectTicketsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectTicket
func (a *ProjectTicketsAPIService) PutProjectTicketsByIdExecute(r ApiPutProjectTicketsByIdRequest) (*ProjectTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTicketsAPIService.PutProjectTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTicket == nil {
		return localVarReturnValue, nil, reportError("projectTicket is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTicket
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
