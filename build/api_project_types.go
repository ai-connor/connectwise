/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ProjectTypesAPIService ProjectTypesAPI service
type ProjectTypesAPIService service

type ApiDeleteProjectProjectTypesByIdRequest struct {
	ctx        context.Context
	ApiService *ProjectTypesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProjectProjectTypesByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectTypesByIdExecute(r)
}

/*
DeleteProjectProjectTypesById Delete ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id projectTypeId
	@return ApiDeleteProjectProjectTypesByIdRequest
*/
func (a *ProjectTypesAPIService) DeleteProjectProjectTypesById(ctx context.Context, id int32) ApiDeleteProjectProjectTypesByIdRequest {
	return ApiDeleteProjectProjectTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ProjectTypesAPIService) DeleteProjectProjectTypesByIdExecute(r ApiDeleteProjectProjectTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.DeleteProjectProjectTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectTypesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTypesRequest) ClientId(clientId string) ApiGetProjectProjectTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTypesRequest) Conditions(conditions string) ApiGetProjectProjectTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTypesRequest) ChildConditions(childConditions string) ApiGetProjectProjectTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTypesRequest) OrderBy(orderBy string) ApiGetProjectProjectTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTypesRequest) Fields(fields string) ApiGetProjectProjectTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTypesRequest) Page(page int32) ApiGetProjectProjectTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTypesRequest) PageSize(pageSize int32) ApiGetProjectProjectTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTypesRequest) PageId(pageId int32) ApiGetProjectProjectTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTypesRequest) Execute() ([]ProjectType, *http.Response, error) {
	return r.ApiService.GetProjectProjectTypesExecute(r)
}

/*
GetProjectProjectTypes Get List of ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectProjectTypesRequest
*/
func (a *ProjectTypesAPIService) GetProjectProjectTypes(ctx context.Context) ApiGetProjectProjectTypesRequest {
	return ApiGetProjectProjectTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ProjectType
func (a *ProjectTypesAPIService) GetProjectProjectTypesExecute(r ApiGetProjectProjectTypesRequest) ([]ProjectType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProjectType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.GetProjectProjectTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTypesByIdRequest) ClientId(clientId string) ApiGetProjectProjectTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) Conditions(conditions string) ApiGetProjectProjectTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) Fields(fields string) ApiGetProjectProjectTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) Page(page int32) ApiGetProjectProjectTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) PageId(pageId int32) ApiGetProjectProjectTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTypesByIdRequest) Execute() (*ProjectType, *http.Response, error) {
	return r.ApiService.GetProjectProjectTypesByIdExecute(r)
}

/*
GetProjectProjectTypesById Get ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id projectTypeId
	@return ApiGetProjectProjectTypesByIdRequest
*/
func (a *ProjectTypesAPIService) GetProjectProjectTypesById(ctx context.Context, id int32) ApiGetProjectProjectTypesByIdRequest {
	return ApiGetProjectProjectTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectType
func (a *ProjectTypesAPIService) GetProjectProjectTypesByIdExecute(r ApiGetProjectProjectTypesByIdRequest) (*ProjectType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.GetProjectProjectTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTypesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) ClientId(clientId string) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) Conditions(conditions string) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) Fields(fields string) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) Page(page int32) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) PageId(pageId int32) ApiGetProjectProjectTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProjectProjectTypesByIdUsagesExecute(r)
}

/*
GetProjectProjectTypesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id projectTypeId
	@return ApiGetProjectProjectTypesByIdUsagesRequest
*/
func (a *ProjectTypesAPIService) GetProjectProjectTypesByIdUsages(ctx context.Context, id int32) ApiGetProjectProjectTypesByIdUsagesRequest {
	return ApiGetProjectProjectTypesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ProjectTypesAPIService) GetProjectProjectTypesByIdUsagesExecute(r ApiGetProjectProjectTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.GetProjectProjectTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTypesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) Fields(fields string) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) Page(page int32) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetProjectProjectTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProjectProjectTypesByIdUsagesListExecute(r)
}

/*
GetProjectProjectTypesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id projectTypeId
	@return ApiGetProjectProjectTypesByIdUsagesListRequest
*/
func (a *ProjectTypesAPIService) GetProjectProjectTypesByIdUsagesList(ctx context.Context, id int32) ApiGetProjectProjectTypesByIdUsagesListRequest {
	return ApiGetProjectProjectTypesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ProjectTypesAPIService) GetProjectProjectTypesByIdUsagesListExecute(r ApiGetProjectProjectTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.GetProjectProjectTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTypesCountRequest struct {
	ctx                   context.Context
	ApiService            *ProjectTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectProjectTypesCountRequest) ClientId(clientId string) ApiGetProjectProjectTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) Conditions(conditions string) ApiGetProjectProjectTypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) OrderBy(orderBy string) ApiGetProjectProjectTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) Fields(fields string) ApiGetProjectProjectTypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) Page(page int32) ApiGetProjectProjectTypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) PageSize(pageSize int32) ApiGetProjectProjectTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) PageId(pageId int32) ApiGetProjectProjectTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectTypesCountExecute(r)
}

/*
GetProjectProjectTypesCount Get Count of ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectProjectTypesCountRequest
*/
func (a *ProjectTypesAPIService) GetProjectProjectTypesCount(ctx context.Context) ApiGetProjectProjectTypesCountRequest {
	return ApiGetProjectProjectTypesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ProjectTypesAPIService) GetProjectProjectTypesCountExecute(r ApiGetProjectProjectTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.GetProjectProjectTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectTypesByIdRequest struct {
	ctx            context.Context
	ApiService     *ProjectTypesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectProjectTypesByIdRequest) ClientId(clientId string) ApiPatchProjectProjectTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectProjectTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectProjectTypesByIdRequest) Execute() (*ProjectType, *http.Response, error) {
	return r.ApiService.PatchProjectProjectTypesByIdExecute(r)
}

/*
PatchProjectProjectTypesById Patch ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id projectTypeId
	@return ApiPatchProjectProjectTypesByIdRequest
*/
func (a *ProjectTypesAPIService) PatchProjectProjectTypesById(ctx context.Context, id int32) ApiPatchProjectProjectTypesByIdRequest {
	return ApiPatchProjectProjectTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectType
func (a *ProjectTypesAPIService) PatchProjectProjectTypesByIdExecute(r ApiPatchProjectProjectTypesByIdRequest) (*ProjectType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.PatchProjectProjectTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectTypesRequest struct {
	ctx         context.Context
	ApiService  *ProjectTypesAPIService
	clientId    *string
	projectType *ProjectType
}

func (r ApiPostProjectProjectTypesRequest) ClientId(clientId string) ApiPostProjectProjectTypesRequest {
	r.clientId = &clientId
	return r
}

// projectType
func (r ApiPostProjectProjectTypesRequest) ProjectType(projectType ProjectType) ApiPostProjectProjectTypesRequest {
	r.projectType = &projectType
	return r
}

func (r ApiPostProjectProjectTypesRequest) Execute() (*ProjectType, *http.Response, error) {
	return r.ApiService.PostProjectProjectTypesExecute(r)
}

/*
PostProjectProjectTypes Post ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProjectProjectTypesRequest
*/
func (a *ProjectTypesAPIService) PostProjectProjectTypes(ctx context.Context) ApiPostProjectProjectTypesRequest {
	return ApiPostProjectProjectTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProjectType
func (a *ProjectTypesAPIService) PostProjectProjectTypesExecute(r ApiPostProjectProjectTypesRequest) (*ProjectType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.PostProjectProjectTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectType == nil {
		return localVarReturnValue, nil, reportError("projectType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectTypesByIdRequest struct {
	ctx         context.Context
	ApiService  *ProjectTypesAPIService
	id          int32
	clientId    *string
	projectType *ProjectType
}

func (r ApiPutProjectProjectTypesByIdRequest) ClientId(clientId string) ApiPutProjectProjectTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// projectType
func (r ApiPutProjectProjectTypesByIdRequest) ProjectType(projectType ProjectType) ApiPutProjectProjectTypesByIdRequest {
	r.projectType = &projectType
	return r
}

func (r ApiPutProjectProjectTypesByIdRequest) Execute() (*ProjectType, *http.Response, error) {
	return r.ApiService.PutProjectProjectTypesByIdExecute(r)
}

/*
PutProjectProjectTypesById Put ProjectType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id projectTypeId
	@return ApiPutProjectProjectTypesByIdRequest
*/
func (a *ProjectTypesAPIService) PutProjectProjectTypesById(ctx context.Context, id int32) ApiPutProjectProjectTypesByIdRequest {
	return ApiPutProjectProjectTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ProjectType
func (a *ProjectTypesAPIService) PutProjectProjectTypesByIdExecute(r ApiPutProjectProjectTypesByIdRequest) (*ProjectType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProjectType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTypesAPIService.PutProjectProjectTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectType == nil {
		return localVarReturnValue, nil, reportError("projectType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
