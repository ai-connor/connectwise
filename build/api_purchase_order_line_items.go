/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PurchaseOrderLineItemsAPIService PurchaseOrderLineItemsAPI service
type PurchaseOrderLineItemsAPIService service

type ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest struct {
	ctx        context.Context
	ApiService *PurchaseOrderLineItemsAPIService
	parentId   int32
	clientId   *string
	id         int32
}

func (r ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseordersByParentIdLineitemsExecute(r)
}

/*
DeleteProcurementPurchaseordersByParentIdLineitems Delete PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@param id lineitemId
	@return ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest
*/
func (a *PurchaseOrderLineItemsAPIService) DeleteProcurementPurchaseordersByParentIdLineitems(ctx context.Context, parentId int32, id int32) ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest {
	return ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
		id:         id,
	}
}

// Execute executes the request
func (a *PurchaseOrderLineItemsAPIService) DeleteProcurementPurchaseordersByParentIdLineitemsExecute(r ApiDeleteProcurementPurchaseordersByParentIdLineitemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.DeleteProcurementPurchaseordersByParentIdLineitems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest struct {
	ctx          context.Context
	ApiService   *PurchaseOrderLineItemsAPIService
	parentId     int32
	clientId     *string
	idCollection *IdCollection
}

func (r ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrderLineItems
func (r ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest) IdCollection(idCollection IdCollection) ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	r.idCollection = &idCollection
	return r
}

func (r ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest) Execute() (*BulkResult, *http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseordersByParentIdLineitemsBulkExecute(r)
}

/*
DeleteProcurementPurchaseordersByParentIdLineitemsBulk Delete BulkResult

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@return ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest
*/
func (a *PurchaseOrderLineItemsAPIService) DeleteProcurementPurchaseordersByParentIdLineitemsBulk(ctx context.Context, parentId int32) ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	return ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BulkResult
func (a *PurchaseOrderLineItemsAPIService) DeleteProcurementPurchaseordersByParentIdLineitemsBulkExecute(r ApiDeleteProcurementPurchaseordersByParentIdLineitemsBulkRequest) (*BulkResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BulkResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.DeleteProcurementPurchaseordersByParentIdLineitemsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.idCollection == nil {
		return localVarReturnValue, nil, reportError("idCollection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.idCollection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByParentIdLineitemsRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) Fields(fields string) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) Page(page int32) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) Execute() ([]PurchaseOrderLineItem, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByParentIdLineitemsExecute(r)
}

/*
GetProcurementPurchaseordersByParentIdLineitems Get List of PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@return ApiGetProcurementPurchaseordersByParentIdLineitemsRequest
*/
func (a *PurchaseOrderLineItemsAPIService) GetProcurementPurchaseordersByParentIdLineitems(ctx context.Context, parentId int32) ApiGetProcurementPurchaseordersByParentIdLineitemsRequest {
	return ApiGetProcurementPurchaseordersByParentIdLineitemsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []PurchaseOrderLineItem
func (a *PurchaseOrderLineItemsAPIService) GetProcurementPurchaseordersByParentIdLineitemsExecute(r ApiGetProcurementPurchaseordersByParentIdLineitemsRequest) ([]PurchaseOrderLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PurchaseOrderLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.GetProcurementPurchaseordersByParentIdLineitems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) Fields(fields string) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) Page(page int32) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) Execute() (*PurchaseOrderLineItem, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByParentIdLineitemsByIdExecute(r)
}

/*
GetProcurementPurchaseordersByParentIdLineitemsById Get PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id lineitemId
	@param parentId purchaseorderId
	@return ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest
*/
func (a *PurchaseOrderLineItemsAPIService) GetProcurementPurchaseordersByParentIdLineitemsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	return ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderLineItem
func (a *PurchaseOrderLineItemsAPIService) GetProcurementPurchaseordersByParentIdLineitemsByIdExecute(r ApiGetProcurementPurchaseordersByParentIdLineitemsByIdRequest) (*PurchaseOrderLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.GetProcurementPurchaseordersByParentIdLineitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) Fields(fields string) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) Page(page int32) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByParentIdLineitemsCountExecute(r)
}

/*
GetProcurementPurchaseordersByParentIdLineitemsCount Get Count of PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@return ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest
*/
func (a *PurchaseOrderLineItemsAPIService) GetProcurementPurchaseordersByParentIdLineitemsCount(ctx context.Context, parentId int32) ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest {
	return ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PurchaseOrderLineItemsAPIService) GetProcurementPurchaseordersByParentIdLineitemsCountExecute(r ApiGetProcurementPurchaseordersByParentIdLineitemsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.GetProcurementPurchaseordersByParentIdLineitemsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest struct {
	ctx            context.Context
	ApiService     *PurchaseOrderLineItemsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest) Execute() (*PurchaseOrderLineItem, *http.Response, error) {
	return r.ApiService.PatchProcurementPurchaseordersByParentIdLineitemsByIdExecute(r)
}

/*
PatchProcurementPurchaseordersByParentIdLineitemsById Patch PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id lineitemId
	@param parentId purchaseorderId
	@return ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest
*/
func (a *PurchaseOrderLineItemsAPIService) PatchProcurementPurchaseordersByParentIdLineitemsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	return ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderLineItem
func (a *PurchaseOrderLineItemsAPIService) PatchProcurementPurchaseordersByParentIdLineitemsByIdExecute(r ApiPatchProcurementPurchaseordersByParentIdLineitemsByIdRequest) (*PurchaseOrderLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.PatchProcurementPurchaseordersByParentIdLineitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersByParentIdLineitemsRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	parentId              int32
	clientId              *string
	purchaseOrderLineItem *PurchaseOrderLineItem
}

func (r ApiPostProcurementPurchaseordersByParentIdLineitemsRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersByParentIdLineitemsRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrderLineItem
func (r ApiPostProcurementPurchaseordersByParentIdLineitemsRequest) PurchaseOrderLineItem(purchaseOrderLineItem PurchaseOrderLineItem) ApiPostProcurementPurchaseordersByParentIdLineitemsRequest {
	r.purchaseOrderLineItem = &purchaseOrderLineItem
	return r
}

func (r ApiPostProcurementPurchaseordersByParentIdLineitemsRequest) Execute() (*PurchaseOrderLineItem, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersByParentIdLineitemsExecute(r)
}

/*
PostProcurementPurchaseordersByParentIdLineitems Post PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@return ApiPostProcurementPurchaseordersByParentIdLineitemsRequest
*/
func (a *PurchaseOrderLineItemsAPIService) PostProcurementPurchaseordersByParentIdLineitems(ctx context.Context, parentId int32) ApiPostProcurementPurchaseordersByParentIdLineitemsRequest {
	return ApiPostProcurementPurchaseordersByParentIdLineitemsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderLineItem
func (a *PurchaseOrderLineItemsAPIService) PostProcurementPurchaseordersByParentIdLineitemsExecute(r ApiPostProcurementPurchaseordersByParentIdLineitemsRequest) (*PurchaseOrderLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.PostProcurementPurchaseordersByParentIdLineitems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderLineItem == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderLineItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderLineItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	parentId              int32
	clientId              *string
	purchaseOrderLineItem *[]PurchaseOrderLineItem
}

func (r ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	r.clientId = &clientId
	return r
}

// List of PurchaseOrderLineItem
func (r ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest) PurchaseOrderLineItem(purchaseOrderLineItem []PurchaseOrderLineItem) ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	r.purchaseOrderLineItem = &purchaseOrderLineItem
	return r
}

func (r ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest) Execute() (*BulkResult, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersByParentIdLineitemsBulkExecute(r)
}

/*
PostProcurementPurchaseordersByParentIdLineitemsBulk Post BulkResult

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@return ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest
*/
func (a *PurchaseOrderLineItemsAPIService) PostProcurementPurchaseordersByParentIdLineitemsBulk(ctx context.Context, parentId int32) ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	return ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BulkResult
func (a *PurchaseOrderLineItemsAPIService) PostProcurementPurchaseordersByParentIdLineitemsBulkExecute(r ApiPostProcurementPurchaseordersByParentIdLineitemsBulkRequest) (*BulkResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BulkResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.PostProcurementPurchaseordersByParentIdLineitemsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderLineItem == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderLineItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderLineItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	parentId              int32
	clientId              *string
	purchaseOrderLineItem *[]PurchaseOrderLineItem
}

func (r ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest) ClientId(clientId string) ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	r.clientId = &clientId
	return r
}

// List of PurchaseOrderLineItem
func (r ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest) PurchaseOrderLineItem(purchaseOrderLineItem []PurchaseOrderLineItem) ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	r.purchaseOrderLineItem = &purchaseOrderLineItem
	return r
}

func (r ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest) Execute() (*BulkResult, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseordersByParentIdLineitemsBulkExecute(r)
}

/*
PutProcurementPurchaseordersByParentIdLineitemsBulk Put BulkResult

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderId
	@return ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest
*/
func (a *PurchaseOrderLineItemsAPIService) PutProcurementPurchaseordersByParentIdLineitemsBulk(ctx context.Context, parentId int32) ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest {
	return ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BulkResult
func (a *PurchaseOrderLineItemsAPIService) PutProcurementPurchaseordersByParentIdLineitemsBulkExecute(r ApiPutProcurementPurchaseordersByParentIdLineitemsBulkRequest) (*BulkResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BulkResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.PutProcurementPurchaseordersByParentIdLineitemsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderLineItem == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderLineItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderLineItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderLineItemsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	purchaseOrderLineItem *PurchaseOrderLineItem
}

func (r ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrderLineItem
func (r ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest) PurchaseOrderLineItem(purchaseOrderLineItem PurchaseOrderLineItem) ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	r.purchaseOrderLineItem = &purchaseOrderLineItem
	return r
}

func (r ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest) Execute() (*PurchaseOrderLineItem, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseordersByParentIdLineitemsByIdExecute(r)
}

/*
PutProcurementPurchaseordersByParentIdLineitemsById Put PurchaseOrderLineItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id lineitemId
	@param parentId purchaseorderId
	@return ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest
*/
func (a *PurchaseOrderLineItemsAPIService) PutProcurementPurchaseordersByParentIdLineitemsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest {
	return ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderLineItem
func (a *PurchaseOrderLineItemsAPIService) PutProcurementPurchaseordersByParentIdLineitemsByIdExecute(r ApiPutProcurementPurchaseordersByParentIdLineitemsByIdRequest) (*PurchaseOrderLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderLineItemsAPIService.PutProcurementPurchaseordersByParentIdLineitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderLineItem == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderLineItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderLineItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
