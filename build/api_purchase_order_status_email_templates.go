/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PurchaseOrderStatusEmailTemplatesAPIService PurchaseOrderStatusEmailTemplatesAPI service
type PurchaseOrderStatusEmailTemplatesAPIService service

type ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx        context.Context
	ApiService *PurchaseOrderStatusEmailTemplatesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
DeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesById Delete PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailtemplateId
	@param parentId purchaseorderstatusId
	@return ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) DeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	return ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *PurchaseOrderStatusEmailTemplatesAPIService) DeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r ApiDeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.DeleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusEmailTemplatesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) Execute() ([]PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByParentIdEmailtemplates Get List of PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) GetProcurementPurchaseorderstatusesByParentIdEmailtemplates(ctx context.Context, parentId int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	return ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []PurchaseOrderStatusEmailTemplate
func (a *PurchaseOrderStatusEmailTemplatesAPIService) GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesExecute(r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) ([]PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PurchaseOrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.GetProcurementPurchaseorderstatusesByParentIdEmailtemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusEmailTemplatesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Execute() (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesById Get PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailtemplateId
	@param parentId purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	return ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatusEmailTemplate
func (a *PurchaseOrderStatusEmailTemplatesAPIService) GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusEmailTemplatesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCount Get Count of PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCount(ctx context.Context, parentId int32) ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest {
	return ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PurchaseOrderStatusEmailTemplatesAPIService) GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountExecute(r ApiGetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.GetProcurementPurchaseorderstatusesByParentIdEmailtemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx            context.Context
	ApiService     *PurchaseOrderStatusEmailTemplatesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Execute() (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
PatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesById Patch PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailtemplateId
	@param parentId purchaseorderstatusId
	@return ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) PatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	return ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatusEmailTemplate
func (a *PurchaseOrderStatusEmailTemplatesAPIService) PatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r ApiPatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.PatchProcurementPurchaseorderstatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest struct {
	ctx                              context.Context
	ApiService                       *PurchaseOrderStatusEmailTemplatesAPIService
	parentId                         int32
	clientId                         *string
	purchaseOrderStatusEmailTemplate *PurchaseOrderStatusEmailTemplate
}

func (r ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) ClientId(clientId string) ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrderStatusEmailTemplate
func (r ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) PurchaseOrderStatusEmailTemplate(purchaseOrderStatusEmailTemplate PurchaseOrderStatusEmailTemplate) ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	r.purchaseOrderStatusEmailTemplate = &purchaseOrderStatusEmailTemplate
	return r
}

func (r ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) Execute() (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseorderstatusesByParentIdEmailtemplatesExecute(r)
}

/*
PostProcurementPurchaseorderstatusesByParentIdEmailtemplates Post PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId purchaseorderstatusId
	@return ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) PostProcurementPurchaseorderstatusesByParentIdEmailtemplates(ctx context.Context, parentId int32) ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest {
	return ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatusEmailTemplate
func (a *PurchaseOrderStatusEmailTemplatesAPIService) PostProcurementPurchaseorderstatusesByParentIdEmailtemplatesExecute(r ApiPostProcurementPurchaseorderstatusesByParentIdEmailtemplatesRequest) (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.PostProcurementPurchaseorderstatusesByParentIdEmailtemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderStatusEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderStatusEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderStatusEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx                              context.Context
	ApiService                       *PurchaseOrderStatusEmailTemplatesAPIService
	id                               int32
	parentId                         int32
	clientId                         *string
	purchaseOrderStatusEmailTemplate *PurchaseOrderStatusEmailTemplate
}

func (r ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrderStatusEmailTemplate
func (r ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) PurchaseOrderStatusEmailTemplate(purchaseOrderStatusEmailTemplate PurchaseOrderStatusEmailTemplate) ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	r.purchaseOrderStatusEmailTemplate = &purchaseOrderStatusEmailTemplate
	return r
}

func (r ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) Execute() (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
PutProcurementPurchaseorderstatusesByParentIdEmailtemplatesById Put PurchaseOrderStatusEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailtemplateId
	@param parentId purchaseorderstatusId
	@return ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *PurchaseOrderStatusEmailTemplatesAPIService) PutProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest {
	return ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatusEmailTemplate
func (a *PurchaseOrderStatusEmailTemplatesAPIService) PutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdExecute(r ApiPutProcurementPurchaseorderstatusesByParentIdEmailtemplatesByIdRequest) (*PurchaseOrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusEmailTemplatesAPIService.PutProcurementPurchaseorderstatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderStatusEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderStatusEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderStatusEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
