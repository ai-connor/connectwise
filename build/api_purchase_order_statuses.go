/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PurchaseOrderStatusesAPIService PurchaseOrderStatusesAPI service
type PurchaseOrderStatusesAPIService service

type ApiDeleteProcurementPurchaseorderstatusesByIdRequest struct {
	ctx        context.Context
	ApiService *PurchaseOrderStatusesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProcurementPurchaseorderstatusesByIdRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseorderstatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPurchaseorderstatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseorderstatusesByIdExecute(r)
}

/*
DeleteProcurementPurchaseorderstatusesById Delete PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiDeleteProcurementPurchaseorderstatusesByIdRequest
*/
func (a *PurchaseOrderStatusesAPIService) DeleteProcurementPurchaseorderstatusesById(ctx context.Context, id int32) ApiDeleteProcurementPurchaseorderstatusesByIdRequest {
	return ApiDeleteProcurementPurchaseorderstatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PurchaseOrderStatusesAPIService) DeleteProcurementPurchaseorderstatusesByIdExecute(r ApiDeleteProcurementPurchaseorderstatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.DeleteProcurementPurchaseorderstatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesRequest) Execute() ([]PurchaseOrderStatus, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesExecute(r)
}

/*
GetProcurementPurchaseorderstatuses Get List of PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementPurchaseorderstatusesRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatuses(ctx context.Context) ApiGetProcurementPurchaseorderstatusesRequest {
	return ApiGetProcurementPurchaseorderstatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PurchaseOrderStatus
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesExecute(r ApiGetProcurementPurchaseorderstatusesRequest) ([]PurchaseOrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PurchaseOrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByIdRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdRequest) Execute() (*PurchaseOrderStatus, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByIdExecute(r)
}

/*
GetProcurementPurchaseorderstatusesById Get PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByIdRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesById(ctx context.Context, id int32) ApiGetProcurementPurchaseorderstatusesByIdRequest {
	return ApiGetProcurementPurchaseorderstatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatus
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdExecute(r ApiGetProcurementPurchaseorderstatusesByIdRequest) (*PurchaseOrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) Execute() (*PurchaseOrderStatusInfo, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByIdInfoExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByIdInfo Get PurchaseOrderStatusInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByIdInfoRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdInfo(ctx context.Context, id int32) ApiGetProcurementPurchaseorderstatusesByIdInfoRequest {
	return ApiGetProcurementPurchaseorderstatusesByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatusInfo
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdInfoExecute(r ApiGetProcurementPurchaseorderstatusesByIdInfoRequest) (*PurchaseOrderStatusInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatusInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByIdUsagesExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdUsages(ctx context.Context, id int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest {
	return ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdUsagesExecute(r ApiGetProcurementPurchaseorderstatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByIdUsagesListExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest {
	return ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesByIdUsagesListExecute(r ApiGetProcurementPurchaseorderstatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesCountRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesCountExecute(r)
}

/*
GetProcurementPurchaseorderstatusesCount Get Count of PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementPurchaseorderstatusesCountRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesCount(ctx context.Context) ApiGetProcurementPurchaseorderstatusesCountRequest {
	return ApiGetProcurementPurchaseorderstatusesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesCountExecute(r ApiGetProcurementPurchaseorderstatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesInfoRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoRequest) Execute() ([]PurchaseOrderStatusInfo, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesInfoExecute(r)
}

/*
GetProcurementPurchaseorderstatusesInfo Get List of PurchaseOrderStatusInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementPurchaseorderstatusesInfoRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesInfo(ctx context.Context) ApiGetProcurementPurchaseorderstatusesInfoRequest {
	return ApiGetProcurementPurchaseorderstatusesInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PurchaseOrderStatusInfo
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesInfoExecute(r ApiGetProcurementPurchaseorderstatusesInfoRequest) ([]PurchaseOrderStatusInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PurchaseOrderStatusInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrderStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesInfoCountExecute(r)
}

/*
GetProcurementPurchaseorderstatusesInfoCount Get Count of PurchaseOrderStatusInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementPurchaseorderstatusesInfoCountRequest
*/
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesInfoCount(ctx context.Context) ApiGetProcurementPurchaseorderstatusesInfoCountRequest {
	return ApiGetProcurementPurchaseorderstatusesInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PurchaseOrderStatusesAPIService) GetProcurementPurchaseorderstatusesInfoCountExecute(r ApiGetProcurementPurchaseorderstatusesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.GetProcurementPurchaseorderstatusesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/Info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPurchaseorderstatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *PurchaseOrderStatusesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementPurchaseorderstatusesByIdRequest) ClientId(clientId string) ApiPatchProcurementPurchaseorderstatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPurchaseorderstatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPurchaseorderstatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPurchaseorderstatusesByIdRequest) Execute() (*PurchaseOrderStatus, *http.Response, error) {
	return r.ApiService.PatchProcurementPurchaseorderstatusesByIdExecute(r)
}

/*
PatchProcurementPurchaseorderstatusesById Patch PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiPatchProcurementPurchaseorderstatusesByIdRequest
*/
func (a *PurchaseOrderStatusesAPIService) PatchProcurementPurchaseorderstatusesById(ctx context.Context, id int32) ApiPatchProcurementPurchaseorderstatusesByIdRequest {
	return ApiPatchProcurementPurchaseorderstatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatus
func (a *PurchaseOrderStatusesAPIService) PatchProcurementPurchaseorderstatusesByIdExecute(r ApiPatchProcurementPurchaseorderstatusesByIdRequest) (*PurchaseOrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.PatchProcurementPurchaseorderstatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseorderstatusesRequest struct {
	ctx                 context.Context
	ApiService          *PurchaseOrderStatusesAPIService
	clientId            *string
	purchaseOrderStatus *PurchaseOrderStatus
}

func (r ApiPostProcurementPurchaseorderstatusesRequest) ClientId(clientId string) ApiPostProcurementPurchaseorderstatusesRequest {
	r.clientId = &clientId
	return r
}

// poStatus
func (r ApiPostProcurementPurchaseorderstatusesRequest) PurchaseOrderStatus(purchaseOrderStatus PurchaseOrderStatus) ApiPostProcurementPurchaseorderstatusesRequest {
	r.purchaseOrderStatus = &purchaseOrderStatus
	return r
}

func (r ApiPostProcurementPurchaseorderstatusesRequest) Execute() (*PurchaseOrderStatus, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseorderstatusesExecute(r)
}

/*
PostProcurementPurchaseorderstatuses Post PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProcurementPurchaseorderstatusesRequest
*/
func (a *PurchaseOrderStatusesAPIService) PostProcurementPurchaseorderstatuses(ctx context.Context) ApiPostProcurementPurchaseorderstatusesRequest {
	return ApiPostProcurementPurchaseorderstatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatus
func (a *PurchaseOrderStatusesAPIService) PostProcurementPurchaseorderstatusesExecute(r ApiPostProcurementPurchaseorderstatusesRequest) (*PurchaseOrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.PostProcurementPurchaseorderstatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderStatus == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseorderstatusesByIdRequest struct {
	ctx                 context.Context
	ApiService          *PurchaseOrderStatusesAPIService
	id                  int32
	clientId            *string
	purchaseOrderStatus *PurchaseOrderStatus
}

func (r ApiPutProcurementPurchaseorderstatusesByIdRequest) ClientId(clientId string) ApiPutProcurementPurchaseorderstatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrderStatus
func (r ApiPutProcurementPurchaseorderstatusesByIdRequest) PurchaseOrderStatus(purchaseOrderStatus PurchaseOrderStatus) ApiPutProcurementPurchaseorderstatusesByIdRequest {
	r.purchaseOrderStatus = &purchaseOrderStatus
	return r
}

func (r ApiPutProcurementPurchaseorderstatusesByIdRequest) Execute() (*PurchaseOrderStatus, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseorderstatusesByIdExecute(r)
}

/*
PutProcurementPurchaseorderstatusesById Put PurchaseOrderStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id purchaseorderstatusId
	@return ApiPutProcurementPurchaseorderstatusesByIdRequest
*/
func (a *PurchaseOrderStatusesAPIService) PutProcurementPurchaseorderstatusesById(ctx context.Context, id int32) ApiPutProcurementPurchaseorderstatusesByIdRequest {
	return ApiPutProcurementPurchaseorderstatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderStatus
func (a *PurchaseOrderStatusesAPIService) PutProcurementPurchaseorderstatusesByIdExecute(r ApiPutProcurementPurchaseorderstatusesByIdRequest) (*PurchaseOrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusesAPIService.PutProcurementPurchaseorderstatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderStatus == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
