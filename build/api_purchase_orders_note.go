/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PurchaseOrdersNoteAPIService PurchaseOrdersNoteAPI service
type PurchaseOrdersNoteAPIService service

type ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest struct {
	ctx        context.Context
	ApiService *PurchaseOrdersNoteAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseordersByParentIdNotesByIdExecute(r)
}

/*
DeleteProcurementPurchaseordersByParentIdNotesById Delete PurchaseOrderNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteId
	@param parentId PurchaseHeaderRecID
	@return ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest
*/
func (a *PurchaseOrdersNoteAPIService) DeleteProcurementPurchaseordersByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest {
	return ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *PurchaseOrdersNoteAPIService) DeleteProcurementPurchaseordersByParentIdNotesByIdExecute(r ApiDeleteProcurementPurchaseordersByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersNoteAPIService.DeleteProcurementPurchaseordersByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrdersNoteAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) Fields(fields string) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) Page(page int32) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) Execute() (*PurchaseOrderNote, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByParentIdNotesByIdExecute(r)
}

/*
GetProcurementPurchaseordersByParentIdNotesById Get PurchaseOrderNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteId
	@param parentId PurchaseHeaderRecID
	@return ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest
*/
func (a *PurchaseOrdersNoteAPIService) GetProcurementPurchaseordersByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest {
	return ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderNote
func (a *PurchaseOrdersNoteAPIService) GetProcurementPurchaseordersByParentIdNotesByIdExecute(r ApiGetProcurementPurchaseordersByParentIdNotesByIdRequest) (*PurchaseOrderNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersNoteAPIService.GetProcurementPurchaseordersByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByParentIdNotesCountRequest struct {
	ctx                   context.Context
	ApiService            *PurchaseOrdersNoteAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) Fields(fields string) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) Page(page int32) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByParentIdNotesCountExecute(r)
}

/*
GetProcurementPurchaseordersByParentIdNotesCount Get Count of PurchaseOrdersNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId PurchaseHeaderRecID
	@return ApiGetProcurementPurchaseordersByParentIdNotesCountRequest
*/
func (a *PurchaseOrdersNoteAPIService) GetProcurementPurchaseordersByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetProcurementPurchaseordersByParentIdNotesCountRequest {
	return ApiGetProcurementPurchaseordersByParentIdNotesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PurchaseOrdersNoteAPIService) GetProcurementPurchaseordersByParentIdNotesCountExecute(r ApiGetProcurementPurchaseordersByParentIdNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersNoteAPIService.GetProcurementPurchaseordersByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest struct {
	ctx            context.Context
	ApiService     *PurchaseOrdersNoteAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest) Execute() (*PurchaseOrderNote, *http.Response, error) {
	return r.ApiService.PatchProcurementPurchaseordersByParentIdNotesByIdExecute(r)
}

/*
PatchProcurementPurchaseordersByParentIdNotesById Patch PurchaseOrderNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteId
	@param parentId PurchaseHeaderRecID
	@return ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest
*/
func (a *PurchaseOrdersNoteAPIService) PatchProcurementPurchaseordersByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest {
	return ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderNote
func (a *PurchaseOrdersNoteAPIService) PatchProcurementPurchaseordersByParentIdNotesByIdExecute(r ApiPatchProcurementPurchaseordersByParentIdNotesByIdRequest) (*PurchaseOrderNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersNoteAPIService.PatchProcurementPurchaseordersByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersByParentIdNotesRequest struct {
	ctx               context.Context
	ApiService        *PurchaseOrdersNoteAPIService
	parentId          int32
	clientId          *string
	purchaseOrderNote *PurchaseOrderNote
}

func (r ApiPostProcurementPurchaseordersByParentIdNotesRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

// PurchaseOrderNote
func (r ApiPostProcurementPurchaseordersByParentIdNotesRequest) PurchaseOrderNote(purchaseOrderNote PurchaseOrderNote) ApiPostProcurementPurchaseordersByParentIdNotesRequest {
	r.purchaseOrderNote = &purchaseOrderNote
	return r
}

func (r ApiPostProcurementPurchaseordersByParentIdNotesRequest) Execute() (*PurchaseOrderNote, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersByParentIdNotesExecute(r)
}

/*
PostProcurementPurchaseordersByParentIdNotes Post PurchaseOrderNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId PurchaseHeaderRecID
	@return ApiPostProcurementPurchaseordersByParentIdNotesRequest
*/
func (a *PurchaseOrdersNoteAPIService) PostProcurementPurchaseordersByParentIdNotes(ctx context.Context, parentId int32) ApiPostProcurementPurchaseordersByParentIdNotesRequest {
	return ApiPostProcurementPurchaseordersByParentIdNotesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderNote
func (a *PurchaseOrdersNoteAPIService) PostProcurementPurchaseordersByParentIdNotesExecute(r ApiPostProcurementPurchaseordersByParentIdNotesRequest) (*PurchaseOrderNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersNoteAPIService.PostProcurementPurchaseordersByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderNote == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest struct {
	ctx               context.Context
	ApiService        *PurchaseOrdersNoteAPIService
	id                int32
	parentId          int32
	clientId          *string
	purchaseOrderNote *PurchaseOrderNote
}

func (r ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// PurchaseOrderNote
func (r ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest) PurchaseOrderNote(purchaseOrderNote PurchaseOrderNote) ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest {
	r.purchaseOrderNote = &purchaseOrderNote
	return r
}

func (r ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest) Execute() (*PurchaseOrderNote, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseordersByParentIdNotesByIdExecute(r)
}

/*
PutProcurementPurchaseordersByParentIdNotesById Put PurchaseOrderNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteId
	@param parentId PurchaseHeaderRecID
	@return ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest
*/
func (a *PurchaseOrdersNoteAPIService) PutProcurementPurchaseordersByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest {
	return ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PurchaseOrderNote
func (a *PurchaseOrdersNoteAPIService) PutProcurementPurchaseordersByParentIdNotesByIdExecute(r ApiPutProcurementPurchaseordersByParentIdNotesByIdRequest) (*PurchaseOrderNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PurchaseOrderNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersNoteAPIService.PutProcurementPurchaseordersByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrderNote == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrderNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
