/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ReportingServicesAPIService ReportingServicesAPI service
type ReportingServicesAPIService service

type ApiGetSystemMycompanyReportingServicesRequest struct {
	ctx                   context.Context
	ApiService            *ReportingServicesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMycompanyReportingServicesRequest) ClientId(clientId string) ApiGetSystemMycompanyReportingServicesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) Conditions(conditions string) ApiGetSystemMycompanyReportingServicesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) ChildConditions(childConditions string) ApiGetSystemMycompanyReportingServicesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMycompanyReportingServicesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) OrderBy(orderBy string) ApiGetSystemMycompanyReportingServicesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) Fields(fields string) ApiGetSystemMycompanyReportingServicesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) Page(page int32) ApiGetSystemMycompanyReportingServicesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) PageSize(pageSize int32) ApiGetSystemMycompanyReportingServicesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) PageId(pageId int32) ApiGetSystemMycompanyReportingServicesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMycompanyReportingServicesRequest) Execute() ([]ReportingService, *http.Response, error) {
	return r.ApiService.GetSystemMycompanyReportingServicesExecute(r)
}

/*
GetSystemMycompanyReportingServices Get List of ReportingService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMycompanyReportingServicesRequest
*/
func (a *ReportingServicesAPIService) GetSystemMycompanyReportingServices(ctx context.Context) ApiGetSystemMycompanyReportingServicesRequest {
	return ApiGetSystemMycompanyReportingServicesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ReportingService
func (a *ReportingServicesAPIService) GetSystemMycompanyReportingServicesExecute(r ApiGetSystemMycompanyReportingServicesRequest) ([]ReportingService, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ReportingService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingServicesAPIService.GetSystemMycompanyReportingServices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/mycompany/reportingServices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMycompanyReportingServicesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ReportingServicesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) ClientId(clientId string) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) Conditions(conditions string) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) ChildConditions(childConditions string) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) OrderBy(orderBy string) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) Fields(fields string) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) Page(page int32) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) PageSize(pageSize int32) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) PageId(pageId int32) ApiGetSystemMycompanyReportingServicesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMycompanyReportingServicesByIdRequest) Execute() (*ReportingService, *http.Response, error) {
	return r.ApiService.GetSystemMycompanyReportingServicesByIdExecute(r)
}

/*
GetSystemMycompanyReportingServicesById Get ReportingService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id reportingServiceId
	@return ApiGetSystemMycompanyReportingServicesByIdRequest
*/
func (a *ReportingServicesAPIService) GetSystemMycompanyReportingServicesById(ctx context.Context, id int32) ApiGetSystemMycompanyReportingServicesByIdRequest {
	return ApiGetSystemMycompanyReportingServicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ReportingService
func (a *ReportingServicesAPIService) GetSystemMycompanyReportingServicesByIdExecute(r ApiGetSystemMycompanyReportingServicesByIdRequest) (*ReportingService, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReportingService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingServicesAPIService.GetSystemMycompanyReportingServicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/mycompany/reportingServices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMycompanyReportingServicesByIdRequest struct {
	ctx            context.Context
	ApiService     *ReportingServicesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMycompanyReportingServicesByIdRequest) ClientId(clientId string) ApiPatchSystemMycompanyReportingServicesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMycompanyReportingServicesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMycompanyReportingServicesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMycompanyReportingServicesByIdRequest) Execute() (*ReportingService, *http.Response, error) {
	return r.ApiService.PatchSystemMycompanyReportingServicesByIdExecute(r)
}

/*
PatchSystemMycompanyReportingServicesById Patch ReportingService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id reportingServiceId
	@return ApiPatchSystemMycompanyReportingServicesByIdRequest
*/
func (a *ReportingServicesAPIService) PatchSystemMycompanyReportingServicesById(ctx context.Context, id int32) ApiPatchSystemMycompanyReportingServicesByIdRequest {
	return ApiPatchSystemMycompanyReportingServicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ReportingService
func (a *ReportingServicesAPIService) PatchSystemMycompanyReportingServicesByIdExecute(r ApiPatchSystemMycompanyReportingServicesByIdRequest) (*ReportingService, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReportingService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingServicesAPIService.PatchSystemMycompanyReportingServicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/mycompany/reportingServices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest struct {
	ctx        context.Context
	ApiService *ReportingServicesAPIService
	id         int32
	clientId   *string
}

func (r ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest) ClientId(clientId string) ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemMycompanyReportingServicesByIdTestConnectionExecute(r)
}

/*
PostSystemMycompanyReportingServicesByIdTestConnection Post SuccessResponse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id reportingServiceId
	@return ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest
*/
func (a *ReportingServicesAPIService) PostSystemMycompanyReportingServicesByIdTestConnection(ctx context.Context, id int32) ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest {
	return ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *ReportingServicesAPIService) PostSystemMycompanyReportingServicesByIdTestConnectionExecute(r ApiPostSystemMycompanyReportingServicesByIdTestConnectionRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingServicesAPIService.PostSystemMycompanyReportingServicesByIdTestConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/mycompany/reportingServices/{id}/testConnection"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMycompanyReportingServicesByIdRequest struct {
	ctx              context.Context
	ApiService       *ReportingServicesAPIService
	id               int32
	clientId         *string
	reportingService *ReportingService
}

func (r ApiPutSystemMycompanyReportingServicesByIdRequest) ClientId(clientId string) ApiPutSystemMycompanyReportingServicesByIdRequest {
	r.clientId = &clientId
	return r
}

// service
func (r ApiPutSystemMycompanyReportingServicesByIdRequest) ReportingService(reportingService ReportingService) ApiPutSystemMycompanyReportingServicesByIdRequest {
	r.reportingService = &reportingService
	return r
}

func (r ApiPutSystemMycompanyReportingServicesByIdRequest) Execute() (*ReportingService, *http.Response, error) {
	return r.ApiService.PutSystemMycompanyReportingServicesByIdExecute(r)
}

/*
PutSystemMycompanyReportingServicesById Put ReportingService

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id reportingServiceId
	@return ApiPutSystemMycompanyReportingServicesByIdRequest
*/
func (a *ReportingServicesAPIService) PutSystemMycompanyReportingServicesById(ctx context.Context, id int32) ApiPutSystemMycompanyReportingServicesByIdRequest {
	return ApiPutSystemMycompanyReportingServicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ReportingService
func (a *ReportingServicesAPIService) PutSystemMycompanyReportingServicesByIdExecute(r ApiPutSystemMycompanyReportingServicesByIdRequest) (*ReportingService, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReportingService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingServicesAPIService.PutSystemMycompanyReportingServicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/mycompany/reportingServices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.reportingService == nil {
		return localVarReturnValue, nil, reportError("reportingService is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.reportingService
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
