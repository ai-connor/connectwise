/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SalesOrdersLineItemsAPIService SalesOrdersLineItemsAPI service
type SalesOrdersLineItemsAPIService service

type ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest struct {
	ctx        context.Context
	ApiService *SalesOrdersLineItemsAPIService
	parentId   int32
	id         int32
	clientId   *string
}

func (r ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOrdersByParentIdLineitemsByIdExecute(r)
}

/*
DeleteSalesOrdersByParentIdLineitemsById Delete SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@param id salesOrdersLineItemId
	@return ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest
*/
func (a *SalesOrdersLineItemsAPIService) DeleteSalesOrdersByParentIdLineitemsById(ctx context.Context, parentId int32, id int32) ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest {
	return ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
		id:         id,
	}
}

// Execute executes the request
func (a *SalesOrdersLineItemsAPIService) DeleteSalesOrdersByParentIdLineitemsByIdExecute(r ApiDeleteSalesOrdersByParentIdLineitemsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.DeleteSalesOrdersByParentIdLineitemsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOrdersByParentIdLineitemsRequest struct {
	ctx                   context.Context
	ApiService            *SalesOrdersLineItemsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) ClientId(clientId string) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) Conditions(conditions string) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) ChildConditions(childConditions string) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) OrderBy(orderBy string) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) Fields(fields string) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) Page(page int32) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) PageSize(pageSize int32) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) PageId(pageId int32) ApiGetSalesOrdersByParentIdLineitemsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsRequest) Execute() ([]SalesOrdersLineItem, *http.Response, error) {
	return r.ApiService.GetSalesOrdersByParentIdLineitemsExecute(r)
}

/*
GetSalesOrdersByParentIdLineitems Get List of SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@return ApiGetSalesOrdersByParentIdLineitemsRequest
*/
func (a *SalesOrdersLineItemsAPIService) GetSalesOrdersByParentIdLineitems(ctx context.Context, parentId int32) ApiGetSalesOrdersByParentIdLineitemsRequest {
	return ApiGetSalesOrdersByParentIdLineitemsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []SalesOrdersLineItem
func (a *SalesOrdersLineItemsAPIService) GetSalesOrdersByParentIdLineitemsExecute(r ApiGetSalesOrdersByParentIdLineitemsRequest) ([]SalesOrdersLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SalesOrdersLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.GetSalesOrdersByParentIdLineitems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersByParentIdLineitemsByIdRequest struct {
	ctx                   context.Context
	ApiService            *SalesOrdersLineItemsAPIService
	parentId              int32
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) Conditions(conditions string) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) ChildConditions(childConditions string) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) OrderBy(orderBy string) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) Fields(fields string) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) Page(page int32) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) PageSize(pageSize int32) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) PageId(pageId int32) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) Execute() (*SalesOrdersLineItem, *http.Response, error) {
	return r.ApiService.GetSalesOrdersByParentIdLineitemsByIdExecute(r)
}

/*
GetSalesOrdersByParentIdLineitemsById Get SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@param id salesOrdersLineItemId
	@return ApiGetSalesOrdersByParentIdLineitemsByIdRequest
*/
func (a *SalesOrdersLineItemsAPIService) GetSalesOrdersByParentIdLineitemsById(ctx context.Context, parentId int32, id int32) ApiGetSalesOrdersByParentIdLineitemsByIdRequest {
	return ApiGetSalesOrdersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SalesOrdersLineItem
func (a *SalesOrdersLineItemsAPIService) GetSalesOrdersByParentIdLineitemsByIdExecute(r ApiGetSalesOrdersByParentIdLineitemsByIdRequest) (*SalesOrdersLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesOrdersLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.GetSalesOrdersByParentIdLineitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersByParentIdLineitemsCountRequest struct {
	ctx                   context.Context
	ApiService            *SalesOrdersLineItemsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) ClientId(clientId string) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) Conditions(conditions string) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) ChildConditions(childConditions string) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) OrderBy(orderBy string) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) Fields(fields string) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) Page(page int32) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) PageSize(pageSize int32) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) PageId(pageId int32) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersByParentIdLineitemsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOrdersByParentIdLineitemsCountExecute(r)
}

/*
GetSalesOrdersByParentIdLineitemsCount Get Count of SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@return ApiGetSalesOrdersByParentIdLineitemsCountRequest
*/
func (a *SalesOrdersLineItemsAPIService) GetSalesOrdersByParentIdLineitemsCount(ctx context.Context, parentId int32) ApiGetSalesOrdersByParentIdLineitemsCountRequest {
	return ApiGetSalesOrdersByParentIdLineitemsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *SalesOrdersLineItemsAPIService) GetSalesOrdersByParentIdLineitemsCountExecute(r ApiGetSalesOrdersByParentIdLineitemsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.GetSalesOrdersByParentIdLineitemsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOrdersByParentIdLineitemsByIdRequest struct {
	ctx            context.Context
	ApiService     *SalesOrdersLineItemsAPIService
	parentId       int32
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesOrdersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiPatchSalesOrdersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOrdersByParentIdLineitemsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOrdersByParentIdLineitemsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOrdersByParentIdLineitemsByIdRequest) Execute() (*SalesOrdersLineItem, *http.Response, error) {
	return r.ApiService.PatchSalesOrdersByParentIdLineitemsByIdExecute(r)
}

/*
PatchSalesOrdersByParentIdLineitemsById Patch SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@param id salesOrdersLineItemId
	@return ApiPatchSalesOrdersByParentIdLineitemsByIdRequest
*/
func (a *SalesOrdersLineItemsAPIService) PatchSalesOrdersByParentIdLineitemsById(ctx context.Context, parentId int32, id int32) ApiPatchSalesOrdersByParentIdLineitemsByIdRequest {
	return ApiPatchSalesOrdersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SalesOrdersLineItem
func (a *SalesOrdersLineItemsAPIService) PatchSalesOrdersByParentIdLineitemsByIdExecute(r ApiPatchSalesOrdersByParentIdLineitemsByIdRequest) (*SalesOrdersLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesOrdersLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.PatchSalesOrdersByParentIdLineitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOrdersByParentIdLineitemsRequest struct {
	ctx                 context.Context
	ApiService          *SalesOrdersLineItemsAPIService
	parentId            int32
	clientId            *string
	salesOrdersLineItem *SalesOrdersLineItem
}

func (r ApiPostSalesOrdersByParentIdLineitemsRequest) ClientId(clientId string) ApiPostSalesOrdersByParentIdLineitemsRequest {
	r.clientId = &clientId
	return r
}

// salesOrdersLineItem
func (r ApiPostSalesOrdersByParentIdLineitemsRequest) SalesOrdersLineItem(salesOrdersLineItem SalesOrdersLineItem) ApiPostSalesOrdersByParentIdLineitemsRequest {
	r.salesOrdersLineItem = &salesOrdersLineItem
	return r
}

func (r ApiPostSalesOrdersByParentIdLineitemsRequest) Execute() (*SalesOrdersLineItem, *http.Response, error) {
	return r.ApiService.PostSalesOrdersByParentIdLineitemsExecute(r)
}

/*
PostSalesOrdersByParentIdLineitems Post SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@return ApiPostSalesOrdersByParentIdLineitemsRequest
*/
func (a *SalesOrdersLineItemsAPIService) PostSalesOrdersByParentIdLineitems(ctx context.Context, parentId int32) ApiPostSalesOrdersByParentIdLineitemsRequest {
	return ApiPostSalesOrdersByParentIdLineitemsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return SalesOrdersLineItem
func (a *SalesOrdersLineItemsAPIService) PostSalesOrdersByParentIdLineitemsExecute(r ApiPostSalesOrdersByParentIdLineitemsRequest) (*SalesOrdersLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesOrdersLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.PostSalesOrdersByParentIdLineitems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.salesOrdersLineItem == nil {
		return localVarReturnValue, nil, reportError("salesOrdersLineItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.salesOrdersLineItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOrdersByParentIdLineitemsByIdRequest struct {
	ctx                 context.Context
	ApiService          *SalesOrdersLineItemsAPIService
	parentId            int32
	id                  int32
	clientId            *string
	salesOrdersLineItem *SalesOrdersLineItem
}

func (r ApiPutSalesOrdersByParentIdLineitemsByIdRequest) ClientId(clientId string) ApiPutSalesOrdersByParentIdLineitemsByIdRequest {
	r.clientId = &clientId
	return r
}

// salesOrdersLineItem
func (r ApiPutSalesOrdersByParentIdLineitemsByIdRequest) SalesOrdersLineItem(salesOrdersLineItem SalesOrdersLineItem) ApiPutSalesOrdersByParentIdLineitemsByIdRequest {
	r.salesOrdersLineItem = &salesOrdersLineItem
	return r
}

func (r ApiPutSalesOrdersByParentIdLineitemsByIdRequest) Execute() (*SalesOrdersLineItem, *http.Response, error) {
	return r.ApiService.PutSalesOrdersByParentIdLineitemsByIdExecute(r)
}

/*
PutSalesOrdersByParentIdLineitemsById Put SalesOrdersLineItems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesOrderId
	@param id salesOrdersLineItemId
	@return ApiPutSalesOrdersByParentIdLineitemsByIdRequest
*/
func (a *SalesOrdersLineItemsAPIService) PutSalesOrdersByParentIdLineitemsById(ctx context.Context, parentId int32, id int32) ApiPutSalesOrdersByParentIdLineitemsByIdRequest {
	return ApiPutSalesOrdersByParentIdLineitemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SalesOrdersLineItem
func (a *SalesOrdersLineItemsAPIService) PutSalesOrdersByParentIdLineitemsByIdExecute(r ApiPutSalesOrdersByParentIdLineitemsByIdRequest) (*SalesOrdersLineItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesOrdersLineItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesOrdersLineItemsAPIService.PutSalesOrdersByParentIdLineitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/{parentId}/lineitems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.salesOrdersLineItem == nil {
		return localVarReturnValue, nil, reportError("salesOrdersLineItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.salesOrdersLineItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
