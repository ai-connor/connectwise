/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SalesTeamMembersAPIService SalesTeamMembersAPI service
type SalesTeamMembersAPIService service

type ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest struct {
	ctx        context.Context
	ApiService *SalesTeamMembersAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesSalesTeamsByParentIdMembersByIdExecute(r)
}

/*
DeleteSalesSalesTeamsByParentIdMembersById Delete SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@param parentId salesTeamId
	@return ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest
*/
func (a *SalesTeamMembersAPIService) DeleteSalesSalesTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest {
	return ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *SalesTeamMembersAPIService) DeleteSalesSalesTeamsByParentIdMembersByIdExecute(r ApiDeleteSalesSalesTeamsByParentIdMembersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.DeleteSalesSalesTeamsByParentIdMembersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesSalesTeamsByParentIdMembersRequest struct {
	ctx                   context.Context
	ApiService            *SalesTeamMembersAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) ClientId(clientId string) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) Conditions(conditions string) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) ChildConditions(childConditions string) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) OrderBy(orderBy string) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) Fields(fields string) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) Page(page int32) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) PageSize(pageSize int32) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) PageId(pageId int32) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersRequest) Execute() ([]SalesTeamMember, *http.Response, error) {
	return r.ApiService.GetSalesSalesTeamsByParentIdMembersExecute(r)
}

/*
GetSalesSalesTeamsByParentIdMembers Get List of SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesTeamId
	@return ApiGetSalesSalesTeamsByParentIdMembersRequest
*/
func (a *SalesTeamMembersAPIService) GetSalesSalesTeamsByParentIdMembers(ctx context.Context, parentId int32) ApiGetSalesSalesTeamsByParentIdMembersRequest {
	return ApiGetSalesSalesTeamsByParentIdMembersRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []SalesTeamMember
func (a *SalesTeamMembersAPIService) GetSalesSalesTeamsByParentIdMembersExecute(r ApiGetSalesSalesTeamsByParentIdMembersRequest) ([]SalesTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SalesTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.GetSalesSalesTeamsByParentIdMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesSalesTeamsByParentIdMembersByIdRequest struct {
	ctx                   context.Context
	ApiService            *SalesTeamMembersAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) Conditions(conditions string) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) ChildConditions(childConditions string) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) OrderBy(orderBy string) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) Fields(fields string) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) Page(page int32) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) PageSize(pageSize int32) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) PageId(pageId int32) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) Execute() (*SalesTeamMember, *http.Response, error) {
	return r.ApiService.GetSalesSalesTeamsByParentIdMembersByIdExecute(r)
}

/*
GetSalesSalesTeamsByParentIdMembersById Get SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@param parentId salesTeamId
	@return ApiGetSalesSalesTeamsByParentIdMembersByIdRequest
*/
func (a *SalesTeamMembersAPIService) GetSalesSalesTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32) ApiGetSalesSalesTeamsByParentIdMembersByIdRequest {
	return ApiGetSalesSalesTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return SalesTeamMember
func (a *SalesTeamMembersAPIService) GetSalesSalesTeamsByParentIdMembersByIdExecute(r ApiGetSalesSalesTeamsByParentIdMembersByIdRequest) (*SalesTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.GetSalesSalesTeamsByParentIdMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesSalesTeamsByParentIdMembersCountRequest struct {
	ctx                   context.Context
	ApiService            *SalesTeamMembersAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) ClientId(clientId string) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) Conditions(conditions string) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) ChildConditions(childConditions string) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) OrderBy(orderBy string) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) Fields(fields string) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) Page(page int32) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) PageSize(pageSize int32) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) PageId(pageId int32) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesSalesTeamsByParentIdMembersCountExecute(r)
}

/*
GetSalesSalesTeamsByParentIdMembersCount Get Count of SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesTeamId
	@return ApiGetSalesSalesTeamsByParentIdMembersCountRequest
*/
func (a *SalesTeamMembersAPIService) GetSalesSalesTeamsByParentIdMembersCount(ctx context.Context, parentId int32) ApiGetSalesSalesTeamsByParentIdMembersCountRequest {
	return ApiGetSalesSalesTeamsByParentIdMembersCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *SalesTeamMembersAPIService) GetSalesSalesTeamsByParentIdMembersCountExecute(r ApiGetSalesSalesTeamsByParentIdMembersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.GetSalesSalesTeamsByParentIdMembersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest struct {
	ctx            context.Context
	ApiService     *SalesTeamMembersAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest) Execute() (*SalesTeamMember, *http.Response, error) {
	return r.ApiService.PatchSalesSalesTeamsByParentIdMembersByIdExecute(r)
}

/*
PatchSalesSalesTeamsByParentIdMembersById Patch SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@param parentId salesTeamId
	@return ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest
*/
func (a *SalesTeamMembersAPIService) PatchSalesSalesTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32) ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest {
	return ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return SalesTeamMember
func (a *SalesTeamMembersAPIService) PatchSalesSalesTeamsByParentIdMembersByIdExecute(r ApiPatchSalesSalesTeamsByParentIdMembersByIdRequest) (*SalesTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.PatchSalesSalesTeamsByParentIdMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesSalesTeamsByParentIdMembersRequest struct {
	ctx             context.Context
	ApiService      *SalesTeamMembersAPIService
	parentId        int32
	clientId        *string
	salesTeamMember *SalesTeamMember
}

func (r ApiPostSalesSalesTeamsByParentIdMembersRequest) ClientId(clientId string) ApiPostSalesSalesTeamsByParentIdMembersRequest {
	r.clientId = &clientId
	return r
}

// salesTeamMember
func (r ApiPostSalesSalesTeamsByParentIdMembersRequest) SalesTeamMember(salesTeamMember SalesTeamMember) ApiPostSalesSalesTeamsByParentIdMembersRequest {
	r.salesTeamMember = &salesTeamMember
	return r
}

func (r ApiPostSalesSalesTeamsByParentIdMembersRequest) Execute() (*SalesTeamMember, *http.Response, error) {
	return r.ApiService.PostSalesSalesTeamsByParentIdMembersExecute(r)
}

/*
PostSalesSalesTeamsByParentIdMembers Post SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId salesTeamId
	@return ApiPostSalesSalesTeamsByParentIdMembersRequest
*/
func (a *SalesTeamMembersAPIService) PostSalesSalesTeamsByParentIdMembers(ctx context.Context, parentId int32) ApiPostSalesSalesTeamsByParentIdMembersRequest {
	return ApiPostSalesSalesTeamsByParentIdMembersRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return SalesTeamMember
func (a *SalesTeamMembersAPIService) PostSalesSalesTeamsByParentIdMembersExecute(r ApiPostSalesSalesTeamsByParentIdMembersRequest) (*SalesTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.PostSalesSalesTeamsByParentIdMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.salesTeamMember == nil {
		return localVarReturnValue, nil, reportError("salesTeamMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.salesTeamMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesSalesTeamsByParentIdMembersByIdRequest struct {
	ctx             context.Context
	ApiService      *SalesTeamMembersAPIService
	id              int32
	parentId        int32
	clientId        *string
	salesTeamMember *SalesTeamMember
}

func (r ApiPutSalesSalesTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiPutSalesSalesTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// salesTeamMember
func (r ApiPutSalesSalesTeamsByParentIdMembersByIdRequest) SalesTeamMember(salesTeamMember SalesTeamMember) ApiPutSalesSalesTeamsByParentIdMembersByIdRequest {
	r.salesTeamMember = &salesTeamMember
	return r
}

func (r ApiPutSalesSalesTeamsByParentIdMembersByIdRequest) Execute() (*SalesTeamMember, *http.Response, error) {
	return r.ApiService.PutSalesSalesTeamsByParentIdMembersByIdExecute(r)
}

/*
PutSalesSalesTeamsByParentIdMembersById Put SalesTeamMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@param parentId salesTeamId
	@return ApiPutSalesSalesTeamsByParentIdMembersByIdRequest
*/
func (a *SalesTeamMembersAPIService) PutSalesSalesTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32) ApiPutSalesSalesTeamsByParentIdMembersByIdRequest {
	return ApiPutSalesSalesTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return SalesTeamMember
func (a *SalesTeamMembersAPIService) PutSalesSalesTeamsByParentIdMembersByIdExecute(r ApiPutSalesSalesTeamsByParentIdMembersByIdRequest) (*SalesTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamMembersAPIService.PutSalesSalesTeamsByParentIdMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.salesTeamMember == nil {
		return localVarReturnValue, nil, reportError("salesTeamMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.salesTeamMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
