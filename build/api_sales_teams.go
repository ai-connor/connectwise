/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SalesTeamsAPIService SalesTeamsAPI service
type SalesTeamsAPIService service

type ApiDeleteSalesSalesTeamsByIdRequest struct {
	ctx        context.Context
	ApiService *SalesTeamsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSalesSalesTeamsByIdRequest) ClientId(clientId string) ApiDeleteSalesSalesTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesSalesTeamsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesSalesTeamsByIdExecute(r)
}

/*
DeleteSalesSalesTeamsById Delete SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id salesTeamId
	@return ApiDeleteSalesSalesTeamsByIdRequest
*/
func (a *SalesTeamsAPIService) DeleteSalesSalesTeamsById(ctx context.Context, id int32) ApiDeleteSalesSalesTeamsByIdRequest {
	return ApiDeleteSalesSalesTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *SalesTeamsAPIService) DeleteSalesSalesTeamsByIdExecute(r ApiDeleteSalesSalesTeamsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.DeleteSalesSalesTeamsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesSalesTeamsRequest struct {
	ctx                   context.Context
	ApiService            *SalesTeamsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesSalesTeamsRequest) ClientId(clientId string) ApiGetSalesSalesTeamsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesSalesTeamsRequest) Conditions(conditions string) ApiGetSalesSalesTeamsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesSalesTeamsRequest) ChildConditions(childConditions string) ApiGetSalesSalesTeamsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesSalesTeamsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesSalesTeamsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesSalesTeamsRequest) OrderBy(orderBy string) ApiGetSalesSalesTeamsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesSalesTeamsRequest) Fields(fields string) ApiGetSalesSalesTeamsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesSalesTeamsRequest) Page(page int32) ApiGetSalesSalesTeamsRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesSalesTeamsRequest) PageSize(pageSize int32) ApiGetSalesSalesTeamsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesSalesTeamsRequest) PageId(pageId int32) ApiGetSalesSalesTeamsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesSalesTeamsRequest) Execute() ([]SalesTeam, *http.Response, error) {
	return r.ApiService.GetSalesSalesTeamsExecute(r)
}

/*
GetSalesSalesTeams Get List of SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesSalesTeamsRequest
*/
func (a *SalesTeamsAPIService) GetSalesSalesTeams(ctx context.Context) ApiGetSalesSalesTeamsRequest {
	return ApiGetSalesSalesTeamsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SalesTeam
func (a *SalesTeamsAPIService) GetSalesSalesTeamsExecute(r ApiGetSalesSalesTeamsRequest) ([]SalesTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SalesTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.GetSalesSalesTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesSalesTeamsByIdRequest struct {
	ctx                   context.Context
	ApiService            *SalesTeamsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesSalesTeamsByIdRequest) ClientId(clientId string) ApiGetSalesSalesTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) Conditions(conditions string) ApiGetSalesSalesTeamsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) ChildConditions(childConditions string) ApiGetSalesSalesTeamsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesSalesTeamsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) OrderBy(orderBy string) ApiGetSalesSalesTeamsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) Fields(fields string) ApiGetSalesSalesTeamsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) Page(page int32) ApiGetSalesSalesTeamsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) PageSize(pageSize int32) ApiGetSalesSalesTeamsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) PageId(pageId int32) ApiGetSalesSalesTeamsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesSalesTeamsByIdRequest) Execute() (*SalesTeam, *http.Response, error) {
	return r.ApiService.GetSalesSalesTeamsByIdExecute(r)
}

/*
GetSalesSalesTeamsById Get SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id salesTeamId
	@return ApiGetSalesSalesTeamsByIdRequest
*/
func (a *SalesTeamsAPIService) GetSalesSalesTeamsById(ctx context.Context, id int32) ApiGetSalesSalesTeamsByIdRequest {
	return ApiGetSalesSalesTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SalesTeam
func (a *SalesTeamsAPIService) GetSalesSalesTeamsByIdExecute(r ApiGetSalesSalesTeamsByIdRequest) (*SalesTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.GetSalesSalesTeamsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesSalesTeamsCountRequest struct {
	ctx                   context.Context
	ApiService            *SalesTeamsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesSalesTeamsCountRequest) ClientId(clientId string) ApiGetSalesSalesTeamsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) Conditions(conditions string) ApiGetSalesSalesTeamsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) ChildConditions(childConditions string) ApiGetSalesSalesTeamsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesSalesTeamsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) OrderBy(orderBy string) ApiGetSalesSalesTeamsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) Fields(fields string) ApiGetSalesSalesTeamsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) Page(page int32) ApiGetSalesSalesTeamsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) PageSize(pageSize int32) ApiGetSalesSalesTeamsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) PageId(pageId int32) ApiGetSalesSalesTeamsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesSalesTeamsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesSalesTeamsCountExecute(r)
}

/*
GetSalesSalesTeamsCount Get Count of SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesSalesTeamsCountRequest
*/
func (a *SalesTeamsAPIService) GetSalesSalesTeamsCount(ctx context.Context) ApiGetSalesSalesTeamsCountRequest {
	return ApiGetSalesSalesTeamsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *SalesTeamsAPIService) GetSalesSalesTeamsCountExecute(r ApiGetSalesSalesTeamsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.GetSalesSalesTeamsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesSalesTeamsByIdRequest struct {
	ctx            context.Context
	ApiService     *SalesTeamsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesSalesTeamsByIdRequest) ClientId(clientId string) ApiPatchSalesSalesTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesSalesTeamsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesSalesTeamsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesSalesTeamsByIdRequest) Execute() (*SalesTeam, *http.Response, error) {
	return r.ApiService.PatchSalesSalesTeamsByIdExecute(r)
}

/*
PatchSalesSalesTeamsById Patch SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id salesTeamId
	@return ApiPatchSalesSalesTeamsByIdRequest
*/
func (a *SalesTeamsAPIService) PatchSalesSalesTeamsById(ctx context.Context, id int32) ApiPatchSalesSalesTeamsByIdRequest {
	return ApiPatchSalesSalesTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SalesTeam
func (a *SalesTeamsAPIService) PatchSalesSalesTeamsByIdExecute(r ApiPatchSalesSalesTeamsByIdRequest) (*SalesTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.PatchSalesSalesTeamsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesSalesTeamsRequest struct {
	ctx        context.Context
	ApiService *SalesTeamsAPIService
	clientId   *string
	salesTeam  *SalesTeam
}

func (r ApiPostSalesSalesTeamsRequest) ClientId(clientId string) ApiPostSalesSalesTeamsRequest {
	r.clientId = &clientId
	return r
}

// salesTeam
func (r ApiPostSalesSalesTeamsRequest) SalesTeam(salesTeam SalesTeam) ApiPostSalesSalesTeamsRequest {
	r.salesTeam = &salesTeam
	return r
}

func (r ApiPostSalesSalesTeamsRequest) Execute() (*SalesTeam, *http.Response, error) {
	return r.ApiService.PostSalesSalesTeamsExecute(r)
}

/*
PostSalesSalesTeams Post SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSalesSalesTeamsRequest
*/
func (a *SalesTeamsAPIService) PostSalesSalesTeams(ctx context.Context) ApiPostSalesSalesTeamsRequest {
	return ApiPostSalesSalesTeamsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SalesTeam
func (a *SalesTeamsAPIService) PostSalesSalesTeamsExecute(r ApiPostSalesSalesTeamsRequest) (*SalesTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.PostSalesSalesTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.salesTeam == nil {
		return localVarReturnValue, nil, reportError("salesTeam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.salesTeam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesSalesTeamsByIdRequest struct {
	ctx        context.Context
	ApiService *SalesTeamsAPIService
	id         int32
	clientId   *string
	salesTeam  *SalesTeam
}

func (r ApiPutSalesSalesTeamsByIdRequest) ClientId(clientId string) ApiPutSalesSalesTeamsByIdRequest {
	r.clientId = &clientId
	return r
}

// salesTeam
func (r ApiPutSalesSalesTeamsByIdRequest) SalesTeam(salesTeam SalesTeam) ApiPutSalesSalesTeamsByIdRequest {
	r.salesTeam = &salesTeam
	return r
}

func (r ApiPutSalesSalesTeamsByIdRequest) Execute() (*SalesTeam, *http.Response, error) {
	return r.ApiService.PutSalesSalesTeamsByIdExecute(r)
}

/*
PutSalesSalesTeamsById Put SalesTeam

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id salesTeamId
	@return ApiPutSalesSalesTeamsByIdRequest
*/
func (a *SalesTeamsAPIService) PutSalesSalesTeamsById(ctx context.Context, id int32) ApiPutSalesSalesTeamsByIdRequest {
	return ApiPutSalesSalesTeamsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SalesTeam
func (a *SalesTeamsAPIService) PutSalesSalesTeamsByIdExecute(r ApiPutSalesSalesTeamsByIdRequest) (*SalesTeam, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SalesTeam
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesTeamsAPIService.PutSalesSalesTeamsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/salesTeams/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.salesTeam == nil {
		return localVarReturnValue, nil, reportError("salesTeam is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.salesTeam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
