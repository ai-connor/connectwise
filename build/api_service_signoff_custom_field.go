/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ServiceSignoffCustomFieldAPIService ServiceSignoffCustomFieldAPI service
type ServiceSignoffCustomFieldAPIService service

type ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest struct {
	ctx        context.Context
	ApiService *ServiceSignoffCustomFieldAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) ClientId(clientId string) ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r)
}

/*
DeleteServiceServiceSignoffByParentIdSignoffcustomfieldsById Delete ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceSignoffCustomFieldId
	@param parentId serviceSignoffId
	@return ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) DeleteServiceServiceSignoffByParentIdSignoffcustomfieldsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	return ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ServiceSignoffCustomFieldAPIService) DeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r ApiDeleteServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.DeleteServiceServiceSignoffByParentIdSignoffcustomfieldsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffCustomFieldAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) ClientId(clientId string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) Conditions(conditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) Fields(fields string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) Page(page int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) PageId(pageId int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) Execute() ([]ServiceSignoffCustomField, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffByParentIdSignoffcustomfieldsExecute(r)
}

/*
GetServiceServiceSignoffByParentIdSignoffcustomfields Get List of ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId serviceSignoffId
	@return ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) GetServiceServiceSignoffByParentIdSignoffcustomfields(ctx context.Context, parentId int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	return ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ServiceSignoffCustomField
func (a *ServiceSignoffCustomFieldAPIService) GetServiceServiceSignoffByParentIdSignoffcustomfieldsExecute(r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) ([]ServiceSignoffCustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceSignoffCustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.GetServiceServiceSignoffByParentIdSignoffcustomfields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffCustomFieldAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) ClientId(clientId string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Conditions(conditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Fields(fields string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Page(page int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) PageId(pageId int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Execute() (*ServiceSignoffCustomField, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r)
}

/*
GetServiceServiceSignoffByParentIdSignoffcustomfieldsById Get ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceSignoffCustomFieldId
	@param parentId serviceSignoffId
	@return ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) GetServiceServiceSignoffByParentIdSignoffcustomfieldsById(ctx context.Context, id int32, parentId int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	return ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceSignoffCustomField
func (a *ServiceSignoffCustomFieldAPIService) GetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) (*ServiceSignoffCustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoffCustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.GetServiceServiceSignoffByParentIdSignoffcustomfieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffCustomFieldAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) ClientId(clientId string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) Conditions(conditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) Fields(fields string) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) Page(page int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) PageId(pageId int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffByParentIdSignoffcustomfieldsCountExecute(r)
}

/*
GetServiceServiceSignoffByParentIdSignoffcustomfieldsCount Get Count of ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId serviceSignoffId
	@return ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) GetServiceServiceSignoffByParentIdSignoffcustomfieldsCount(ctx context.Context, parentId int32) ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest {
	return ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ServiceSignoffCustomFieldAPIService) GetServiceServiceSignoffByParentIdSignoffcustomfieldsCountExecute(r ApiGetServiceServiceSignoffByParentIdSignoffcustomfieldsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.GetServiceServiceSignoffByParentIdSignoffcustomfieldsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest struct {
	ctx            context.Context
	ApiService     *ServiceSignoffCustomFieldAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) ClientId(clientId string) ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Execute() (*ServiceSignoffCustomField, *http.Response, error) {
	return r.ApiService.PatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r)
}

/*
PatchServiceServiceSignoffByParentIdSignoffcustomfieldsById Patch ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceSignoffCustomFieldId
	@param parentId serviceSignoffId
	@return ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) PatchServiceServiceSignoffByParentIdSignoffcustomfieldsById(ctx context.Context, id int32, parentId int32) ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	return ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceSignoffCustomField
func (a *ServiceSignoffCustomFieldAPIService) PatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r ApiPatchServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) (*ServiceSignoffCustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoffCustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.PatchServiceServiceSignoffByParentIdSignoffcustomfieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest struct {
	ctx                       context.Context
	ApiService                *ServiceSignoffCustomFieldAPIService
	parentId                  int32
	clientId                  *string
	serviceSignoffCustomField *ServiceSignoffCustomField
}

func (r ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) ClientId(clientId string) ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.clientId = &clientId
	return r
}

// serviceSignoff
func (r ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) ServiceSignoffCustomField(serviceSignoffCustomField ServiceSignoffCustomField) ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	r.serviceSignoffCustomField = &serviceSignoffCustomField
	return r
}

func (r ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) Execute() (*ServiceSignoffCustomField, *http.Response, error) {
	return r.ApiService.PostServiceServiceSignoffByParentIdSignoffcustomfieldsExecute(r)
}

/*
PostServiceServiceSignoffByParentIdSignoffcustomfields Post ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId serviceSignoffId
	@return ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) PostServiceServiceSignoffByParentIdSignoffcustomfields(ctx context.Context, parentId int32) ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest {
	return ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceSignoffCustomField
func (a *ServiceSignoffCustomFieldAPIService) PostServiceServiceSignoffByParentIdSignoffcustomfieldsExecute(r ApiPostServiceServiceSignoffByParentIdSignoffcustomfieldsRequest) (*ServiceSignoffCustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoffCustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.PostServiceServiceSignoffByParentIdSignoffcustomfields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceSignoffCustomField == nil {
		return localVarReturnValue, nil, reportError("serviceSignoffCustomField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceSignoffCustomField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest struct {
	ctx                       context.Context
	ApiService                *ServiceSignoffCustomFieldAPIService
	id                        int32
	parentId                  int32
	clientId                  *string
	serviceSignoffCustomField *ServiceSignoffCustomField
}

func (r ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) ClientId(clientId string) ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// ServiceSignoffCustomField
func (r ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) ServiceSignoffCustomField(serviceSignoffCustomField ServiceSignoffCustomField) ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	r.serviceSignoffCustomField = &serviceSignoffCustomField
	return r
}

func (r ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) Execute() (*ServiceSignoffCustomField, *http.Response, error) {
	return r.ApiService.PutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r)
}

/*
PutServiceServiceSignoffByParentIdSignoffcustomfieldsById Put ServiceSignoffCustomField

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ServiceSignoffCustomFieldId
	@param parentId serviceSignoffId
	@return ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest
*/
func (a *ServiceSignoffCustomFieldAPIService) PutServiceServiceSignoffByParentIdSignoffcustomfieldsById(ctx context.Context, id int32, parentId int32) ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest {
	return ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceSignoffCustomField
func (a *ServiceSignoffCustomFieldAPIService) PutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdExecute(r ApiPutServiceServiceSignoffByParentIdSignoffcustomfieldsByIdRequest) (*ServiceSignoffCustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoffCustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffCustomFieldAPIService.PutServiceServiceSignoffByParentIdSignoffcustomfieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{parentId}/signoffcustomfields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceSignoffCustomField == nil {
		return localVarReturnValue, nil, reportError("serviceSignoffCustomField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceSignoffCustomField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
