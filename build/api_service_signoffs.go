/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ServiceSignoffsAPIService ServiceSignoffsAPI service
type ServiceSignoffsAPIService service

type ApiDeleteServiceServiceSignoffByIdRequest struct {
	ctx        context.Context
	ApiService *ServiceSignoffsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteServiceServiceSignoffByIdRequest) ClientId(clientId string) ApiDeleteServiceServiceSignoffByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceServiceSignoffByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceServiceSignoffByIdExecute(r)
}

/*
DeleteServiceServiceSignoffById Delete ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id serviceSignoffId
	@return ApiDeleteServiceServiceSignoffByIdRequest
*/
func (a *ServiceSignoffsAPIService) DeleteServiceServiceSignoffById(ctx context.Context, id int32) ApiDeleteServiceServiceSignoffByIdRequest {
	return ApiDeleteServiceServiceSignoffByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ServiceSignoffsAPIService) DeleteServiceServiceSignoffByIdExecute(r ApiDeleteServiceServiceSignoffByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.DeleteServiceServiceSignoffById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffRequest) ClientId(clientId string) ApiGetServiceServiceSignoffRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffRequest) Conditions(conditions string) ApiGetServiceServiceSignoffRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffRequest) Fields(fields string) ApiGetServiceServiceSignoffRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffRequest) Page(page int32) ApiGetServiceServiceSignoffRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffRequest) PageId(pageId int32) ApiGetServiceServiceSignoffRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffRequest) Execute() ([]ServiceSignoff, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffExecute(r)
}

/*
GetServiceServiceSignoff Get List of ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceServiceSignoffRequest
*/
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoff(ctx context.Context) ApiGetServiceServiceSignoffRequest {
	return ApiGetServiceServiceSignoffRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ServiceSignoff
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffExecute(r ApiGetServiceServiceSignoffRequest) ([]ServiceSignoff, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceSignoff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.GetServiceServiceSignoff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffByIdRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffByIdRequest) ClientId(clientId string) ApiGetServiceServiceSignoffByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) Conditions(conditions string) ApiGetServiceServiceSignoffByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) Fields(fields string) ApiGetServiceServiceSignoffByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) Page(page int32) ApiGetServiceServiceSignoffByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) PageId(pageId int32) ApiGetServiceServiceSignoffByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffByIdRequest) Execute() (*ServiceSignoff, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffByIdExecute(r)
}

/*
GetServiceServiceSignoffById Get ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id serviceSignoffId
	@return ApiGetServiceServiceSignoffByIdRequest
*/
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffById(ctx context.Context, id int32) ApiGetServiceServiceSignoffByIdRequest {
	return ApiGetServiceServiceSignoffByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceSignoff
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffByIdExecute(r ApiGetServiceServiceSignoffByIdRequest) (*ServiceSignoff, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.GetServiceServiceSignoffById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) ClientId(clientId string) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) Conditions(conditions string) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) Fields(fields string) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) Page(page int32) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) PageId(pageId int32) ApiGetServiceServiceSignoffByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffByIdUsagesExecute(r)
}

/*
GetServiceServiceSignoffByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id serviceSignoffId
	@return ApiGetServiceServiceSignoffByIdUsagesRequest
*/
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffByIdUsages(ctx context.Context, id int32) ApiGetServiceServiceSignoffByIdUsagesRequest {
	return ApiGetServiceServiceSignoffByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffByIdUsagesExecute(r ApiGetServiceServiceSignoffByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.GetServiceServiceSignoffByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) Fields(fields string) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) Page(page int32) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffByIdUsagesListExecute(r)
}

/*
GetServiceServiceSignoffByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id serviceSignoffId
	@return ApiGetServiceServiceSignoffByIdUsagesListRequest
*/
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffByIdUsagesList(ctx context.Context, id int32) ApiGetServiceServiceSignoffByIdUsagesListRequest {
	return ApiGetServiceServiceSignoffByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffByIdUsagesListExecute(r ApiGetServiceServiceSignoffByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.GetServiceServiceSignoffByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceServiceSignoffCountRequest struct {
	ctx                   context.Context
	ApiService            *ServiceSignoffsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceServiceSignoffCountRequest) ClientId(clientId string) ApiGetServiceServiceSignoffCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) Conditions(conditions string) ApiGetServiceServiceSignoffCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) ChildConditions(childConditions string) ApiGetServiceServiceSignoffCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceServiceSignoffCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) OrderBy(orderBy string) ApiGetServiceServiceSignoffCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) Fields(fields string) ApiGetServiceServiceSignoffCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) Page(page int32) ApiGetServiceServiceSignoffCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) PageSize(pageSize int32) ApiGetServiceServiceSignoffCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) PageId(pageId int32) ApiGetServiceServiceSignoffCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceServiceSignoffCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceServiceSignoffCountExecute(r)
}

/*
GetServiceServiceSignoffCount Get Count of ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceServiceSignoffCountRequest
*/
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffCount(ctx context.Context) ApiGetServiceServiceSignoffCountRequest {
	return ApiGetServiceServiceSignoffCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ServiceSignoffsAPIService) GetServiceServiceSignoffCountExecute(r ApiGetServiceServiceSignoffCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.GetServiceServiceSignoffCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceServiceSignoffByIdRequest struct {
	ctx            context.Context
	ApiService     *ServiceSignoffsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceServiceSignoffByIdRequest) ClientId(clientId string) ApiPatchServiceServiceSignoffByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceServiceSignoffByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceServiceSignoffByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceServiceSignoffByIdRequest) Execute() (*ServiceSignoff, *http.Response, error) {
	return r.ApiService.PatchServiceServiceSignoffByIdExecute(r)
}

/*
PatchServiceServiceSignoffById Patch ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id serviceSignoffId
	@return ApiPatchServiceServiceSignoffByIdRequest
*/
func (a *ServiceSignoffsAPIService) PatchServiceServiceSignoffById(ctx context.Context, id int32) ApiPatchServiceServiceSignoffByIdRequest {
	return ApiPatchServiceServiceSignoffByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceSignoff
func (a *ServiceSignoffsAPIService) PatchServiceServiceSignoffByIdExecute(r ApiPatchServiceServiceSignoffByIdRequest) (*ServiceSignoff, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.PatchServiceServiceSignoffById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceServiceSignoffRequest struct {
	ctx            context.Context
	ApiService     *ServiceSignoffsAPIService
	clientId       *string
	serviceSignoff *ServiceSignoff
}

func (r ApiPostServiceServiceSignoffRequest) ClientId(clientId string) ApiPostServiceServiceSignoffRequest {
	r.clientId = &clientId
	return r
}

// serviceSignoff
func (r ApiPostServiceServiceSignoffRequest) ServiceSignoff(serviceSignoff ServiceSignoff) ApiPostServiceServiceSignoffRequest {
	r.serviceSignoff = &serviceSignoff
	return r
}

func (r ApiPostServiceServiceSignoffRequest) Execute() (*ServiceSignoff, *http.Response, error) {
	return r.ApiService.PostServiceServiceSignoffExecute(r)
}

/*
PostServiceServiceSignoff Post ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostServiceServiceSignoffRequest
*/
func (a *ServiceSignoffsAPIService) PostServiceServiceSignoff(ctx context.Context) ApiPostServiceServiceSignoffRequest {
	return ApiPostServiceServiceSignoffRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceSignoff
func (a *ServiceSignoffsAPIService) PostServiceServiceSignoffExecute(r ApiPostServiceServiceSignoffRequest) (*ServiceSignoff, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.PostServiceServiceSignoff")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceSignoff == nil {
		return localVarReturnValue, nil, reportError("serviceSignoff is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceSignoff
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceServiceSignoffByIdRequest struct {
	ctx            context.Context
	ApiService     *ServiceSignoffsAPIService
	id             int32
	clientId       *string
	serviceSignoff *ServiceSignoff
}

func (r ApiPutServiceServiceSignoffByIdRequest) ClientId(clientId string) ApiPutServiceServiceSignoffByIdRequest {
	r.clientId = &clientId
	return r
}

// serviceSignoff
func (r ApiPutServiceServiceSignoffByIdRequest) ServiceSignoff(serviceSignoff ServiceSignoff) ApiPutServiceServiceSignoffByIdRequest {
	r.serviceSignoff = &serviceSignoff
	return r
}

func (r ApiPutServiceServiceSignoffByIdRequest) Execute() (*ServiceSignoff, *http.Response, error) {
	return r.ApiService.PutServiceServiceSignoffByIdExecute(r)
}

/*
PutServiceServiceSignoffById Put ServiceSignoff

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id serviceSignoffId
	@return ApiPutServiceServiceSignoffByIdRequest
*/
func (a *ServiceSignoffsAPIService) PutServiceServiceSignoffById(ctx context.Context, id int32) ApiPutServiceServiceSignoffByIdRequest {
	return ApiPutServiceServiceSignoffByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceSignoff
func (a *ServiceSignoffsAPIService) PutServiceServiceSignoffByIdExecute(r ApiPutServiceServiceSignoffByIdRequest) (*ServiceSignoff, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceSignoff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSignoffsAPIService.PutServiceServiceSignoffById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/serviceSignoff/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceSignoff == nil {
		return localVarReturnValue, nil, reportError("serviceSignoff is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceSignoff
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
