/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ServiceTemplatesAPIService ServiceTemplatesAPI service
type ServiceTemplatesAPIService service

type ApiGetServiceTemplatesRequest struct {
	ctx                   context.Context
	ApiService            *ServiceTemplatesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceTemplatesRequest) ClientId(clientId string) ApiGetServiceTemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTemplatesRequest) Conditions(conditions string) ApiGetServiceTemplatesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceTemplatesRequest) ChildConditions(childConditions string) ApiGetServiceTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceTemplatesRequest) OrderBy(orderBy string) ApiGetServiceTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceTemplatesRequest) Fields(fields string) ApiGetServiceTemplatesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceTemplatesRequest) Page(page int32) ApiGetServiceTemplatesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceTemplatesRequest) PageSize(pageSize int32) ApiGetServiceTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceTemplatesRequest) PageId(pageId int32) ApiGetServiceTemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTemplatesRequest) Execute() ([]ServiceTemplate, *http.Response, error) {
	return r.ApiService.GetServiceTemplatesExecute(r)
}

/*
GetServiceTemplates Get List of ServiceTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceTemplatesRequest
*/
func (a *ServiceTemplatesAPIService) GetServiceTemplates(ctx context.Context) ApiGetServiceTemplatesRequest {
	return ApiGetServiceTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ServiceTemplate
func (a *ServiceTemplatesAPIService) GetServiceTemplatesExecute(r ApiGetServiceTemplatesRequest) ([]ServiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTemplatesAPIService.GetServiceTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTemplatesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ServiceTemplatesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceTemplatesByIdRequest) ClientId(clientId string) ApiGetServiceTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) Conditions(conditions string) ApiGetServiceTemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) ChildConditions(childConditions string) ApiGetServiceTemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) OrderBy(orderBy string) ApiGetServiceTemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) Fields(fields string) ApiGetServiceTemplatesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) Page(page int32) ApiGetServiceTemplatesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) PageSize(pageSize int32) ApiGetServiceTemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) PageId(pageId int32) ApiGetServiceTemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTemplatesByIdRequest) Execute() (*ServiceTemplate, *http.Response, error) {
	return r.ApiService.GetServiceTemplatesByIdExecute(r)
}

/*
GetServiceTemplatesById Get ServiceTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id templateId
	@return ApiGetServiceTemplatesByIdRequest
*/
func (a *ServiceTemplatesAPIService) GetServiceTemplatesById(ctx context.Context, id int32) ApiGetServiceTemplatesByIdRequest {
	return ApiGetServiceTemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ServiceTemplate
func (a *ServiceTemplatesAPIService) GetServiceTemplatesByIdExecute(r ApiGetServiceTemplatesByIdRequest) (*ServiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTemplatesAPIService.GetServiceTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/templates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTemplatesCountRequest struct {
	ctx                   context.Context
	ApiService            *ServiceTemplatesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceTemplatesCountRequest) ClientId(clientId string) ApiGetServiceTemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTemplatesCountRequest) Conditions(conditions string) ApiGetServiceTemplatesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceTemplatesCountRequest) ChildConditions(childConditions string) ApiGetServiceTemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceTemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceTemplatesCountRequest) OrderBy(orderBy string) ApiGetServiceTemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceTemplatesCountRequest) Fields(fields string) ApiGetServiceTemplatesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceTemplatesCountRequest) Page(page int32) ApiGetServiceTemplatesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceTemplatesCountRequest) PageSize(pageSize int32) ApiGetServiceTemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceTemplatesCountRequest) PageId(pageId int32) ApiGetServiceTemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTemplatesCountExecute(r)
}

/*
GetServiceTemplatesCount Get Count of ServiceTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceTemplatesCountRequest
*/
func (a *ServiceTemplatesAPIService) GetServiceTemplatesCount(ctx context.Context) ApiGetServiceTemplatesCountRequest {
	return ApiGetServiceTemplatesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ServiceTemplatesAPIService) GetServiceTemplatesCountExecute(r ApiGetServiceTemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTemplatesAPIService.GetServiceTemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/templates/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTemplatesByIdGenerateRequest struct {
	ctx        context.Context
	ApiService *ServiceTemplatesAPIService
	id         int32
	clientId   *string
}

func (r ApiPostServiceTemplatesByIdGenerateRequest) ClientId(clientId string) ApiPostServiceTemplatesByIdGenerateRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceTemplatesByIdGenerateRequest) Execute() (*TemplateGeneratedCountsModel, *http.Response, error) {
	return r.ApiService.PostServiceTemplatesByIdGenerateExecute(r)
}

/*
PostServiceTemplatesByIdGenerate Post Count of ServiceTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id templateId
	@return ApiPostServiceTemplatesByIdGenerateRequest
*/
func (a *ServiceTemplatesAPIService) PostServiceTemplatesByIdGenerate(ctx context.Context, id int32) ApiPostServiceTemplatesByIdGenerateRequest {
	return ApiPostServiceTemplatesByIdGenerateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TemplateGeneratedCountsModel
func (a *ServiceTemplatesAPIService) PostServiceTemplatesByIdGenerateExecute(r ApiPostServiceTemplatesByIdGenerateRequest) (*TemplateGeneratedCountsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TemplateGeneratedCountsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTemplatesAPIService.PostServiceTemplatesByIdGenerate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/templates/{id}/generate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
