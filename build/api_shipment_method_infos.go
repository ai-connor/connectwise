/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ShipmentMethodInfosAPIService ShipmentMethodInfosAPI service
type ShipmentMethodInfosAPIService service

type ApiGetProcurementShipmentmethodsByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodInfosAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) Fields(fields string) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) Page(page int32) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdInfoRequest) Execute() (*ShipmentMethodInfo, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsByIdInfoExecute(r)
}

/*
GetProcurementShipmentmethodsByIdInfo Get ShipmentMethodInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ShipmentMethodInfoId
	@return ApiGetProcurementShipmentmethodsByIdInfoRequest
*/
func (a *ShipmentMethodInfosAPIService) GetProcurementShipmentmethodsByIdInfo(ctx context.Context, id int32) ApiGetProcurementShipmentmethodsByIdInfoRequest {
	return ApiGetProcurementShipmentmethodsByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ShipmentMethodInfo
func (a *ShipmentMethodInfosAPIService) GetProcurementShipmentmethodsByIdInfoExecute(r ApiGetProcurementShipmentmethodsByIdInfoRequest) (*ShipmentMethodInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShipmentMethodInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodInfosAPIService.GetProcurementShipmentmethodsByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsInfoRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) Fields(fields string) ApiGetProcurementShipmentmethodsInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) Page(page int32) ApiGetProcurementShipmentmethodsInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoRequest) Execute() ([]ShipmentMethodInfo, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsInfoExecute(r)
}

/*
GetProcurementShipmentmethodsInfo Get List of ShipmentMethodInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementShipmentmethodsInfoRequest
*/
func (a *ShipmentMethodInfosAPIService) GetProcurementShipmentmethodsInfo(ctx context.Context) ApiGetProcurementShipmentmethodsInfoRequest {
	return ApiGetProcurementShipmentmethodsInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ShipmentMethodInfo
func (a *ShipmentMethodInfosAPIService) GetProcurementShipmentmethodsInfoExecute(r ApiGetProcurementShipmentmethodsInfoRequest) ([]ShipmentMethodInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ShipmentMethodInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodInfosAPIService.GetProcurementShipmentmethodsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) Fields(fields string) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) Page(page int32) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsInfoCountExecute(r)
}

/*
GetProcurementShipmentmethodsInfoCount Get Count of ShipmentMethodInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementShipmentmethodsInfoCountRequest
*/
func (a *ShipmentMethodInfosAPIService) GetProcurementShipmentmethodsInfoCount(ctx context.Context) ApiGetProcurementShipmentmethodsInfoCountRequest {
	return ApiGetProcurementShipmentmethodsInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ShipmentMethodInfosAPIService) GetProcurementShipmentmethodsInfoCountExecute(r ApiGetProcurementShipmentmethodsInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodInfosAPIService.GetProcurementShipmentmethodsInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
