/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ShipmentMethodsAPIService ShipmentMethodsAPI service
type ShipmentMethodsAPIService service

type ApiDeleteProcurementShipmentmethodsByIdRequest struct {
	ctx        context.Context
	ApiService *ShipmentMethodsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProcurementShipmentmethodsByIdRequest) ClientId(clientId string) ApiDeleteProcurementShipmentmethodsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementShipmentmethodsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementShipmentmethodsByIdExecute(r)
}

/*
DeleteProcurementShipmentmethodsById Delete ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id shipmentmethodId
	@return ApiDeleteProcurementShipmentmethodsByIdRequest
*/
func (a *ShipmentMethodsAPIService) DeleteProcurementShipmentmethodsById(ctx context.Context, id int32) ApiDeleteProcurementShipmentmethodsByIdRequest {
	return ApiDeleteProcurementShipmentmethodsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ShipmentMethodsAPIService) DeleteProcurementShipmentmethodsByIdExecute(r ApiDeleteProcurementShipmentmethodsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.DeleteProcurementShipmentmethodsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) Fields(fields string) ApiGetProcurementShipmentmethodsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) Page(page int32) ApiGetProcurementShipmentmethodsRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsRequest) Execute() ([]ShipmentMethod, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsExecute(r)
}

/*
GetProcurementShipmentmethods Get List of ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementShipmentmethodsRequest
*/
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethods(ctx context.Context) ApiGetProcurementShipmentmethodsRequest {
	return ApiGetProcurementShipmentmethodsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ShipmentMethod
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsExecute(r ApiGetProcurementShipmentmethodsRequest) ([]ShipmentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ShipmentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.GetProcurementShipmentmethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) Fields(fields string) ApiGetProcurementShipmentmethodsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) Page(page int32) ApiGetProcurementShipmentmethodsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdRequest) Execute() (*ShipmentMethod, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsByIdExecute(r)
}

/*
GetProcurementShipmentmethodsById Get ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id shipmentmethodId
	@return ApiGetProcurementShipmentmethodsByIdRequest
*/
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsById(ctx context.Context, id int32) ApiGetProcurementShipmentmethodsByIdRequest {
	return ApiGetProcurementShipmentmethodsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ShipmentMethod
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsByIdExecute(r ApiGetProcurementShipmentmethodsByIdRequest) (*ShipmentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShipmentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.GetProcurementShipmentmethodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) Fields(fields string) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) Page(page int32) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsByIdUsagesExecute(r)
}

/*
GetProcurementShipmentmethodsByIdUsages Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subcategoryId
	@return ApiGetProcurementShipmentmethodsByIdUsagesRequest
*/
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsByIdUsages(ctx context.Context, id int32) ApiGetProcurementShipmentmethodsByIdUsagesRequest {
	return ApiGetProcurementShipmentmethodsByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsByIdUsagesExecute(r ApiGetProcurementShipmentmethodsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.GetProcurementShipmentmethodsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) Fields(fields string) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) Page(page int32) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsByIdUsagesListExecute(r)
}

/*
GetProcurementShipmentmethodsByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id shipmentId
	@return ApiGetProcurementShipmentmethodsByIdUsagesListRequest
*/
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementShipmentmethodsByIdUsagesListRequest {
	return ApiGetProcurementShipmentmethodsByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsByIdUsagesListExecute(r ApiGetProcurementShipmentmethodsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.GetProcurementShipmentmethodsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementShipmentmethodsCountRequest struct {
	ctx                   context.Context
	ApiService            *ShipmentMethodsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementShipmentmethodsCountRequest) ClientId(clientId string) ApiGetProcurementShipmentmethodsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) Conditions(conditions string) ApiGetProcurementShipmentmethodsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) ChildConditions(childConditions string) ApiGetProcurementShipmentmethodsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementShipmentmethodsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) OrderBy(orderBy string) ApiGetProcurementShipmentmethodsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) Fields(fields string) ApiGetProcurementShipmentmethodsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) Page(page int32) ApiGetProcurementShipmentmethodsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) PageSize(pageSize int32) ApiGetProcurementShipmentmethodsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) PageId(pageId int32) ApiGetProcurementShipmentmethodsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementShipmentmethodsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementShipmentmethodsCountExecute(r)
}

/*
GetProcurementShipmentmethodsCount Get Count of ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementShipmentmethodsCountRequest
*/
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsCount(ctx context.Context) ApiGetProcurementShipmentmethodsCountRequest {
	return ApiGetProcurementShipmentmethodsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ShipmentMethodsAPIService) GetProcurementShipmentmethodsCountExecute(r ApiGetProcurementShipmentmethodsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.GetProcurementShipmentmethodsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementShipmentmethodsByIdRequest struct {
	ctx            context.Context
	ApiService     *ShipmentMethodsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementShipmentmethodsByIdRequest) ClientId(clientId string) ApiPatchProcurementShipmentmethodsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementShipmentmethodsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementShipmentmethodsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementShipmentmethodsByIdRequest) Execute() (*ShipmentMethod, *http.Response, error) {
	return r.ApiService.PatchProcurementShipmentmethodsByIdExecute(r)
}

/*
PatchProcurementShipmentmethodsById Patch ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id shipmentmethodId
	@return ApiPatchProcurementShipmentmethodsByIdRequest
*/
func (a *ShipmentMethodsAPIService) PatchProcurementShipmentmethodsById(ctx context.Context, id int32) ApiPatchProcurementShipmentmethodsByIdRequest {
	return ApiPatchProcurementShipmentmethodsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ShipmentMethod
func (a *ShipmentMethodsAPIService) PatchProcurementShipmentmethodsByIdExecute(r ApiPatchProcurementShipmentmethodsByIdRequest) (*ShipmentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShipmentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.PatchProcurementShipmentmethodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementShipmentmethodsRequest struct {
	ctx            context.Context
	ApiService     *ShipmentMethodsAPIService
	clientId       *string
	shipmentMethod *ShipmentMethod
}

func (r ApiPostProcurementShipmentmethodsRequest) ClientId(clientId string) ApiPostProcurementShipmentmethodsRequest {
	r.clientId = &clientId
	return r
}

// shipmentMethod
func (r ApiPostProcurementShipmentmethodsRequest) ShipmentMethod(shipmentMethod ShipmentMethod) ApiPostProcurementShipmentmethodsRequest {
	r.shipmentMethod = &shipmentMethod
	return r
}

func (r ApiPostProcurementShipmentmethodsRequest) Execute() (*ShipmentMethod, *http.Response, error) {
	return r.ApiService.PostProcurementShipmentmethodsExecute(r)
}

/*
PostProcurementShipmentmethods Post ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProcurementShipmentmethodsRequest
*/
func (a *ShipmentMethodsAPIService) PostProcurementShipmentmethods(ctx context.Context) ApiPostProcurementShipmentmethodsRequest {
	return ApiPostProcurementShipmentmethodsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ShipmentMethod
func (a *ShipmentMethodsAPIService) PostProcurementShipmentmethodsExecute(r ApiPostProcurementShipmentmethodsRequest) (*ShipmentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShipmentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.PostProcurementShipmentmethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.shipmentMethod == nil {
		return localVarReturnValue, nil, reportError("shipmentMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.shipmentMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementShipmentmethodsByIdRequest struct {
	ctx            context.Context
	ApiService     *ShipmentMethodsAPIService
	id             int32
	clientId       *string
	shipmentMethod *ShipmentMethod
}

func (r ApiPutProcurementShipmentmethodsByIdRequest) ClientId(clientId string) ApiPutProcurementShipmentmethodsByIdRequest {
	r.clientId = &clientId
	return r
}

// shipmentMethod
func (r ApiPutProcurementShipmentmethodsByIdRequest) ShipmentMethod(shipmentMethod ShipmentMethod) ApiPutProcurementShipmentmethodsByIdRequest {
	r.shipmentMethod = &shipmentMethod
	return r
}

func (r ApiPutProcurementShipmentmethodsByIdRequest) Execute() (*ShipmentMethod, *http.Response, error) {
	return r.ApiService.PutProcurementShipmentmethodsByIdExecute(r)
}

/*
PutProcurementShipmentmethodsById Put ShipmentMethod

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id shipmentmethodId
	@return ApiPutProcurementShipmentmethodsByIdRequest
*/
func (a *ShipmentMethodsAPIService) PutProcurementShipmentmethodsById(ctx context.Context, id int32) ApiPutProcurementShipmentmethodsByIdRequest {
	return ApiPutProcurementShipmentmethodsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ShipmentMethod
func (a *ShipmentMethodsAPIService) PutProcurementShipmentmethodsByIdExecute(r ApiPutProcurementShipmentmethodsByIdRequest) (*ShipmentMethod, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShipmentMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentMethodsAPIService.PutProcurementShipmentmethodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/shipmentmethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.shipmentMethod == nil {
		return localVarReturnValue, nil, reportError("shipmentMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.shipmentMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
