/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SkillCategoriesAPIService SkillCategoriesAPI service
type SkillCategoriesAPIService service

type ApiDeleteSystemSkillCategoriesByIdRequest struct {
	ctx        context.Context
	ApiService *SkillCategoriesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemSkillCategoriesByIdRequest) ClientId(clientId string) ApiDeleteSystemSkillCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemSkillCategoriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemSkillCategoriesByIdExecute(r)
}

/*
DeleteSystemSkillCategoriesById Delete SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id skillCategoryId
	@return ApiDeleteSystemSkillCategoriesByIdRequest
*/
func (a *SkillCategoriesAPIService) DeleteSystemSkillCategoriesById(ctx context.Context, id int32) ApiDeleteSystemSkillCategoriesByIdRequest {
	return ApiDeleteSystemSkillCategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *SkillCategoriesAPIService) DeleteSystemSkillCategoriesByIdExecute(r ApiDeleteSystemSkillCategoriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.DeleteSystemSkillCategoriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemSkillCategoriesRequest struct {
	ctx                   context.Context
	ApiService            *SkillCategoriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemSkillCategoriesRequest) ClientId(clientId string) ApiGetSystemSkillCategoriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) Conditions(conditions string) ApiGetSystemSkillCategoriesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) ChildConditions(childConditions string) ApiGetSystemSkillCategoriesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSkillCategoriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) OrderBy(orderBy string) ApiGetSystemSkillCategoriesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) Fields(fields string) ApiGetSystemSkillCategoriesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) Page(page int32) ApiGetSystemSkillCategoriesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) PageSize(pageSize int32) ApiGetSystemSkillCategoriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) PageId(pageId int32) ApiGetSystemSkillCategoriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSkillCategoriesRequest) Execute() ([]SkillCategory, *http.Response, error) {
	return r.ApiService.GetSystemSkillCategoriesExecute(r)
}

/*
GetSystemSkillCategories Get List of SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemSkillCategoriesRequest
*/
func (a *SkillCategoriesAPIService) GetSystemSkillCategories(ctx context.Context) ApiGetSystemSkillCategoriesRequest {
	return ApiGetSystemSkillCategoriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SkillCategory
func (a *SkillCategoriesAPIService) GetSystemSkillCategoriesExecute(r ApiGetSystemSkillCategoriesRequest) ([]SkillCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SkillCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.GetSystemSkillCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSkillCategoriesByIdRequest struct {
	ctx                   context.Context
	ApiService            *SkillCategoriesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemSkillCategoriesByIdRequest) ClientId(clientId string) ApiGetSystemSkillCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) Conditions(conditions string) ApiGetSystemSkillCategoriesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) ChildConditions(childConditions string) ApiGetSystemSkillCategoriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSkillCategoriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) OrderBy(orderBy string) ApiGetSystemSkillCategoriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) Fields(fields string) ApiGetSystemSkillCategoriesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) Page(page int32) ApiGetSystemSkillCategoriesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) PageSize(pageSize int32) ApiGetSystemSkillCategoriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) PageId(pageId int32) ApiGetSystemSkillCategoriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSkillCategoriesByIdRequest) Execute() (*SkillCategory, *http.Response, error) {
	return r.ApiService.GetSystemSkillCategoriesByIdExecute(r)
}

/*
GetSystemSkillCategoriesById Get SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id skillCategoryId
	@return ApiGetSystemSkillCategoriesByIdRequest
*/
func (a *SkillCategoriesAPIService) GetSystemSkillCategoriesById(ctx context.Context, id int32) ApiGetSystemSkillCategoriesByIdRequest {
	return ApiGetSystemSkillCategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SkillCategory
func (a *SkillCategoriesAPIService) GetSystemSkillCategoriesByIdExecute(r ApiGetSystemSkillCategoriesByIdRequest) (*SkillCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SkillCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.GetSystemSkillCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSkillCategoriesCountRequest struct {
	ctx                   context.Context
	ApiService            *SkillCategoriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemSkillCategoriesCountRequest) ClientId(clientId string) ApiGetSystemSkillCategoriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) Conditions(conditions string) ApiGetSystemSkillCategoriesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) ChildConditions(childConditions string) ApiGetSystemSkillCategoriesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSkillCategoriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) OrderBy(orderBy string) ApiGetSystemSkillCategoriesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) Fields(fields string) ApiGetSystemSkillCategoriesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) Page(page int32) ApiGetSystemSkillCategoriesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) PageSize(pageSize int32) ApiGetSystemSkillCategoriesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) PageId(pageId int32) ApiGetSystemSkillCategoriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSkillCategoriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemSkillCategoriesCountExecute(r)
}

/*
GetSystemSkillCategoriesCount Get Count of SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemSkillCategoriesCountRequest
*/
func (a *SkillCategoriesAPIService) GetSystemSkillCategoriesCount(ctx context.Context) ApiGetSystemSkillCategoriesCountRequest {
	return ApiGetSystemSkillCategoriesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *SkillCategoriesAPIService) GetSystemSkillCategoriesCountExecute(r ApiGetSystemSkillCategoriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.GetSystemSkillCategoriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemSkillCategoriesByIdRequest struct {
	ctx            context.Context
	ApiService     *SkillCategoriesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemSkillCategoriesByIdRequest) ClientId(clientId string) ApiPatchSystemSkillCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemSkillCategoriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemSkillCategoriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemSkillCategoriesByIdRequest) Execute() (*SkillCategory, *http.Response, error) {
	return r.ApiService.PatchSystemSkillCategoriesByIdExecute(r)
}

/*
PatchSystemSkillCategoriesById Patch SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id skillCategoryId
	@return ApiPatchSystemSkillCategoriesByIdRequest
*/
func (a *SkillCategoriesAPIService) PatchSystemSkillCategoriesById(ctx context.Context, id int32) ApiPatchSystemSkillCategoriesByIdRequest {
	return ApiPatchSystemSkillCategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SkillCategory
func (a *SkillCategoriesAPIService) PatchSystemSkillCategoriesByIdExecute(r ApiPatchSystemSkillCategoriesByIdRequest) (*SkillCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SkillCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.PatchSystemSkillCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemSkillCategoriesRequest struct {
	ctx           context.Context
	ApiService    *SkillCategoriesAPIService
	clientId      *string
	skillCategory *SkillCategory
}

func (r ApiPostSystemSkillCategoriesRequest) ClientId(clientId string) ApiPostSystemSkillCategoriesRequest {
	r.clientId = &clientId
	return r
}

// skillCategory
func (r ApiPostSystemSkillCategoriesRequest) SkillCategory(skillCategory SkillCategory) ApiPostSystemSkillCategoriesRequest {
	r.skillCategory = &skillCategory
	return r
}

func (r ApiPostSystemSkillCategoriesRequest) Execute() (*SkillCategory, *http.Response, error) {
	return r.ApiService.PostSystemSkillCategoriesExecute(r)
}

/*
PostSystemSkillCategories Post SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemSkillCategoriesRequest
*/
func (a *SkillCategoriesAPIService) PostSystemSkillCategories(ctx context.Context) ApiPostSystemSkillCategoriesRequest {
	return ApiPostSystemSkillCategoriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SkillCategory
func (a *SkillCategoriesAPIService) PostSystemSkillCategoriesExecute(r ApiPostSystemSkillCategoriesRequest) (*SkillCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SkillCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.PostSystemSkillCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.skillCategory == nil {
		return localVarReturnValue, nil, reportError("skillCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.skillCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemSkillCategoriesByIdRequest struct {
	ctx           context.Context
	ApiService    *SkillCategoriesAPIService
	id            int32
	clientId      *string
	skillCategory *SkillCategory
}

func (r ApiPutSystemSkillCategoriesByIdRequest) ClientId(clientId string) ApiPutSystemSkillCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// skillCategory
func (r ApiPutSystemSkillCategoriesByIdRequest) SkillCategory(skillCategory SkillCategory) ApiPutSystemSkillCategoriesByIdRequest {
	r.skillCategory = &skillCategory
	return r
}

func (r ApiPutSystemSkillCategoriesByIdRequest) Execute() (*SkillCategory, *http.Response, error) {
	return r.ApiService.PutSystemSkillCategoriesByIdExecute(r)
}

/*
PutSystemSkillCategoriesById Put SkillCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id skillCategoryId
	@return ApiPutSystemSkillCategoriesByIdRequest
*/
func (a *SkillCategoriesAPIService) PutSystemSkillCategoriesById(ctx context.Context, id int32) ApiPutSystemSkillCategoriesByIdRequest {
	return ApiPutSystemSkillCategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SkillCategory
func (a *SkillCategoriesAPIService) PutSystemSkillCategoriesByIdExecute(r ApiPutSystemSkillCategoriesByIdRequest) (*SkillCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SkillCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SkillCategoriesAPIService.PutSystemSkillCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/skillCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.skillCategory == nil {
		return localVarReturnValue, nil, reportError("skillCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.skillCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
