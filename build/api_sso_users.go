/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SsoUsersAPIService SsoUsersAPI service
type SsoUsersAPIService service

type ApiGetSystemSsoUsersRequest struct {
	ctx                   context.Context
	ApiService            *SsoUsersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemSsoUsersRequest) ClientId(clientId string) ApiGetSystemSsoUsersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSsoUsersRequest) Conditions(conditions string) ApiGetSystemSsoUsersRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemSsoUsersRequest) ChildConditions(childConditions string) ApiGetSystemSsoUsersRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemSsoUsersRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSsoUsersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemSsoUsersRequest) OrderBy(orderBy string) ApiGetSystemSsoUsersRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemSsoUsersRequest) Fields(fields string) ApiGetSystemSsoUsersRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemSsoUsersRequest) Page(page int32) ApiGetSystemSsoUsersRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemSsoUsersRequest) PageSize(pageSize int32) ApiGetSystemSsoUsersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemSsoUsersRequest) PageId(pageId int32) ApiGetSystemSsoUsersRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSsoUsersRequest) Execute() ([]SsoUser, *http.Response, error) {
	return r.ApiService.GetSystemSsoUsersExecute(r)
}

/*
GetSystemSsoUsers Get List of SsoUser

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemSsoUsersRequest
*/
func (a *SsoUsersAPIService) GetSystemSsoUsers(ctx context.Context) ApiGetSystemSsoUsersRequest {
	return ApiGetSystemSsoUsersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SsoUser
func (a *SsoUsersAPIService) GetSystemSsoUsersExecute(r ApiGetSystemSsoUsersRequest) ([]SsoUser, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SsoUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoUsersAPIService.GetSystemSsoUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoUsers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSsoUsersByExternalIdRequest struct {
	ctx                   context.Context
	ApiService            *SsoUsersAPIService
	externalId            int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) ClientId(clientId string) ApiGetSystemSsoUsersByExternalIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) Conditions(conditions string) ApiGetSystemSsoUsersByExternalIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) ChildConditions(childConditions string) ApiGetSystemSsoUsersByExternalIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSsoUsersByExternalIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) OrderBy(orderBy string) ApiGetSystemSsoUsersByExternalIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) Fields(fields string) ApiGetSystemSsoUsersByExternalIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) Page(page int32) ApiGetSystemSsoUsersByExternalIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) PageSize(pageSize int32) ApiGetSystemSsoUsersByExternalIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) PageId(pageId int32) ApiGetSystemSsoUsersByExternalIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSsoUsersByExternalIdRequest) Execute() (*SsoUser, *http.Response, error) {
	return r.ApiService.GetSystemSsoUsersByExternalIdExecute(r)
}

/*
GetSystemSsoUsersByExternalId Get SsoUser

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param externalId externalId
	@return ApiGetSystemSsoUsersByExternalIdRequest
*/
func (a *SsoUsersAPIService) GetSystemSsoUsersByExternalId(ctx context.Context, externalId int32) ApiGetSystemSsoUsersByExternalIdRequest {
	return ApiGetSystemSsoUsersByExternalIdRequest{
		ApiService: a,
		ctx:        ctx,
		externalId: externalId,
	}
}

// Execute executes the request
//
//	@return SsoUser
func (a *SsoUsersAPIService) GetSystemSsoUsersByExternalIdExecute(r ApiGetSystemSsoUsersByExternalIdRequest) (*SsoUser, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SsoUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoUsersAPIService.GetSystemSsoUsersByExternalId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoUsers/{externalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalId"+"}", url.PathEscape(parameterValueToString(r.externalId, "externalId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSsoUsersCountRequest struct {
	ctx                   context.Context
	ApiService            *SsoUsersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemSsoUsersCountRequest) ClientId(clientId string) ApiGetSystemSsoUsersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) Conditions(conditions string) ApiGetSystemSsoUsersCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) ChildConditions(childConditions string) ApiGetSystemSsoUsersCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSsoUsersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) OrderBy(orderBy string) ApiGetSystemSsoUsersCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) Fields(fields string) ApiGetSystemSsoUsersCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) Page(page int32) ApiGetSystemSsoUsersCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) PageSize(pageSize int32) ApiGetSystemSsoUsersCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) PageId(pageId int32) ApiGetSystemSsoUsersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSsoUsersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemSsoUsersCountExecute(r)
}

/*
GetSystemSsoUsersCount Get Count of SsoUser

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemSsoUsersCountRequest
*/
func (a *SsoUsersAPIService) GetSystemSsoUsersCount(ctx context.Context) ApiGetSystemSsoUsersCountRequest {
	return ApiGetSystemSsoUsersCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *SsoUsersAPIService) GetSystemSsoUsersCountExecute(r ApiGetSystemSsoUsersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoUsersAPIService.GetSystemSsoUsersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoUsers/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
