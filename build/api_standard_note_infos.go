/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// StandardNoteInfosAPIService StandardNoteInfosAPI service
type StandardNoteInfosAPIService service

type ApiGetSystemInfoStandardNotesRequest struct {
	ctx                   context.Context
	ApiService            *StandardNoteInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemInfoStandardNotesRequest) ClientId(clientId string) ApiGetSystemInfoStandardNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) Conditions(conditions string) ApiGetSystemInfoStandardNotesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) ChildConditions(childConditions string) ApiGetSystemInfoStandardNotesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemInfoStandardNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) OrderBy(orderBy string) ApiGetSystemInfoStandardNotesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) Fields(fields string) ApiGetSystemInfoStandardNotesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) Page(page int32) ApiGetSystemInfoStandardNotesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) PageSize(pageSize int32) ApiGetSystemInfoStandardNotesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) PageId(pageId int32) ApiGetSystemInfoStandardNotesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemInfoStandardNotesRequest) Execute() ([]StandardNoteInfo, *http.Response, error) {
	return r.ApiService.GetSystemInfoStandardNotesExecute(r)
}

/*
GetSystemInfoStandardNotes Get List of StandardNoteInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemInfoStandardNotesRequest
*/
func (a *StandardNoteInfosAPIService) GetSystemInfoStandardNotes(ctx context.Context) ApiGetSystemInfoStandardNotesRequest {
	return ApiGetSystemInfoStandardNotesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []StandardNoteInfo
func (a *StandardNoteInfosAPIService) GetSystemInfoStandardNotesExecute(r ApiGetSystemInfoStandardNotesRequest) ([]StandardNoteInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []StandardNoteInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNoteInfosAPIService.GetSystemInfoStandardNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/standardNotes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemInfoStandardNotesByIdRequest struct {
	ctx                   context.Context
	ApiService            *StandardNoteInfosAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) ClientId(clientId string) ApiGetSystemInfoStandardNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) Conditions(conditions string) ApiGetSystemInfoStandardNotesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) ChildConditions(childConditions string) ApiGetSystemInfoStandardNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemInfoStandardNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) OrderBy(orderBy string) ApiGetSystemInfoStandardNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) Fields(fields string) ApiGetSystemInfoStandardNotesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) Page(page int32) ApiGetSystemInfoStandardNotesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) PageSize(pageSize int32) ApiGetSystemInfoStandardNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) PageId(pageId int32) ApiGetSystemInfoStandardNotesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemInfoStandardNotesByIdRequest) Execute() (*StandardNoteInfo, *http.Response, error) {
	return r.ApiService.GetSystemInfoStandardNotesByIdExecute(r)
}

/*
GetSystemInfoStandardNotesById Get StandardNoteInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id standardNoteId
	@return ApiGetSystemInfoStandardNotesByIdRequest
*/
func (a *StandardNoteInfosAPIService) GetSystemInfoStandardNotesById(ctx context.Context, id int32) ApiGetSystemInfoStandardNotesByIdRequest {
	return ApiGetSystemInfoStandardNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return StandardNoteInfo
func (a *StandardNoteInfosAPIService) GetSystemInfoStandardNotesByIdExecute(r ApiGetSystemInfoStandardNotesByIdRequest) (*StandardNoteInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StandardNoteInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNoteInfosAPIService.GetSystemInfoStandardNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/standardNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemInfoStandardNotesCountRequest struct {
	ctx                   context.Context
	ApiService            *StandardNoteInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemInfoStandardNotesCountRequest) ClientId(clientId string) ApiGetSystemInfoStandardNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) Conditions(conditions string) ApiGetSystemInfoStandardNotesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) ChildConditions(childConditions string) ApiGetSystemInfoStandardNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemInfoStandardNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) OrderBy(orderBy string) ApiGetSystemInfoStandardNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) Fields(fields string) ApiGetSystemInfoStandardNotesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) Page(page int32) ApiGetSystemInfoStandardNotesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) PageSize(pageSize int32) ApiGetSystemInfoStandardNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) PageId(pageId int32) ApiGetSystemInfoStandardNotesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemInfoStandardNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemInfoStandardNotesCountExecute(r)
}

/*
GetSystemInfoStandardNotesCount Get Count of StandardNoteInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemInfoStandardNotesCountRequest
*/
func (a *StandardNoteInfosAPIService) GetSystemInfoStandardNotesCount(ctx context.Context) ApiGetSystemInfoStandardNotesCountRequest {
	return ApiGetSystemInfoStandardNotesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *StandardNoteInfosAPIService) GetSystemInfoStandardNotesCountExecute(r ApiGetSystemInfoStandardNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNoteInfosAPIService.GetSystemInfoStandardNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/standardNotes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
