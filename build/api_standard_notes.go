/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// StandardNotesAPIService StandardNotesAPI service
type StandardNotesAPIService service

type ApiDeleteSystemStandardNotesByIdRequest struct {
	ctx        context.Context
	ApiService *StandardNotesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemStandardNotesByIdRequest) ClientId(clientId string) ApiDeleteSystemStandardNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemStandardNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemStandardNotesByIdExecute(r)
}

/*
DeleteSystemStandardNotesById Delete StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id standardNoteId
	@return ApiDeleteSystemStandardNotesByIdRequest
*/
func (a *StandardNotesAPIService) DeleteSystemStandardNotesById(ctx context.Context, id int32) ApiDeleteSystemStandardNotesByIdRequest {
	return ApiDeleteSystemStandardNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *StandardNotesAPIService) DeleteSystemStandardNotesByIdExecute(r ApiDeleteSystemStandardNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.DeleteSystemStandardNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemStandardNotesRequest struct {
	ctx                   context.Context
	ApiService            *StandardNotesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemStandardNotesRequest) ClientId(clientId string) ApiGetSystemStandardNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemStandardNotesRequest) Conditions(conditions string) ApiGetSystemStandardNotesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemStandardNotesRequest) ChildConditions(childConditions string) ApiGetSystemStandardNotesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemStandardNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemStandardNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemStandardNotesRequest) OrderBy(orderBy string) ApiGetSystemStandardNotesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemStandardNotesRequest) Fields(fields string) ApiGetSystemStandardNotesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemStandardNotesRequest) Page(page int32) ApiGetSystemStandardNotesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemStandardNotesRequest) PageSize(pageSize int32) ApiGetSystemStandardNotesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemStandardNotesRequest) PageId(pageId int32) ApiGetSystemStandardNotesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemStandardNotesRequest) Execute() ([]StandardNote, *http.Response, error) {
	return r.ApiService.GetSystemStandardNotesExecute(r)
}

/*
GetSystemStandardNotes Get List of StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemStandardNotesRequest
*/
func (a *StandardNotesAPIService) GetSystemStandardNotes(ctx context.Context) ApiGetSystemStandardNotesRequest {
	return ApiGetSystemStandardNotesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []StandardNote
func (a *StandardNotesAPIService) GetSystemStandardNotesExecute(r ApiGetSystemStandardNotesRequest) ([]StandardNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []StandardNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.GetSystemStandardNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemStandardNotesByIdRequest struct {
	ctx                   context.Context
	ApiService            *StandardNotesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemStandardNotesByIdRequest) ClientId(clientId string) ApiGetSystemStandardNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) Conditions(conditions string) ApiGetSystemStandardNotesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) ChildConditions(childConditions string) ApiGetSystemStandardNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemStandardNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) OrderBy(orderBy string) ApiGetSystemStandardNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) Fields(fields string) ApiGetSystemStandardNotesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) Page(page int32) ApiGetSystemStandardNotesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) PageSize(pageSize int32) ApiGetSystemStandardNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) PageId(pageId int32) ApiGetSystemStandardNotesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemStandardNotesByIdRequest) Execute() (*StandardNote, *http.Response, error) {
	return r.ApiService.GetSystemStandardNotesByIdExecute(r)
}

/*
GetSystemStandardNotesById Get StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id standardNoteId
	@return ApiGetSystemStandardNotesByIdRequest
*/
func (a *StandardNotesAPIService) GetSystemStandardNotesById(ctx context.Context, id int32) ApiGetSystemStandardNotesByIdRequest {
	return ApiGetSystemStandardNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return StandardNote
func (a *StandardNotesAPIService) GetSystemStandardNotesByIdExecute(r ApiGetSystemStandardNotesByIdRequest) (*StandardNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StandardNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.GetSystemStandardNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemStandardNotesCountRequest struct {
	ctx                   context.Context
	ApiService            *StandardNotesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemStandardNotesCountRequest) ClientId(clientId string) ApiGetSystemStandardNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) Conditions(conditions string) ApiGetSystemStandardNotesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) ChildConditions(childConditions string) ApiGetSystemStandardNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemStandardNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) OrderBy(orderBy string) ApiGetSystemStandardNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) Fields(fields string) ApiGetSystemStandardNotesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) Page(page int32) ApiGetSystemStandardNotesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) PageSize(pageSize int32) ApiGetSystemStandardNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) PageId(pageId int32) ApiGetSystemStandardNotesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemStandardNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemStandardNotesCountExecute(r)
}

/*
GetSystemStandardNotesCount Get Count of StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemStandardNotesCountRequest
*/
func (a *StandardNotesAPIService) GetSystemStandardNotesCount(ctx context.Context) ApiGetSystemStandardNotesCountRequest {
	return ApiGetSystemStandardNotesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *StandardNotesAPIService) GetSystemStandardNotesCountExecute(r ApiGetSystemStandardNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.GetSystemStandardNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemStandardNotesByIdRequest struct {
	ctx            context.Context
	ApiService     *StandardNotesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemStandardNotesByIdRequest) ClientId(clientId string) ApiPatchSystemStandardNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemStandardNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemStandardNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemStandardNotesByIdRequest) Execute() (*StandardNote, *http.Response, error) {
	return r.ApiService.PatchSystemStandardNotesByIdExecute(r)
}

/*
PatchSystemStandardNotesById Patch StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id standardNoteId
	@return ApiPatchSystemStandardNotesByIdRequest
*/
func (a *StandardNotesAPIService) PatchSystemStandardNotesById(ctx context.Context, id int32) ApiPatchSystemStandardNotesByIdRequest {
	return ApiPatchSystemStandardNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return StandardNote
func (a *StandardNotesAPIService) PatchSystemStandardNotesByIdExecute(r ApiPatchSystemStandardNotesByIdRequest) (*StandardNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StandardNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.PatchSystemStandardNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemStandardNotesRequest struct {
	ctx          context.Context
	ApiService   *StandardNotesAPIService
	clientId     *string
	standardNote *StandardNote
}

func (r ApiPostSystemStandardNotesRequest) ClientId(clientId string) ApiPostSystemStandardNotesRequest {
	r.clientId = &clientId
	return r
}

// standardNote
func (r ApiPostSystemStandardNotesRequest) StandardNote(standardNote StandardNote) ApiPostSystemStandardNotesRequest {
	r.standardNote = &standardNote
	return r
}

func (r ApiPostSystemStandardNotesRequest) Execute() (*StandardNote, *http.Response, error) {
	return r.ApiService.PostSystemStandardNotesExecute(r)
}

/*
PostSystemStandardNotes Post StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemStandardNotesRequest
*/
func (a *StandardNotesAPIService) PostSystemStandardNotes(ctx context.Context) ApiPostSystemStandardNotesRequest {
	return ApiPostSystemStandardNotesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StandardNote
func (a *StandardNotesAPIService) PostSystemStandardNotesExecute(r ApiPostSystemStandardNotesRequest) (*StandardNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StandardNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.PostSystemStandardNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.standardNote == nil {
		return localVarReturnValue, nil, reportError("standardNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.standardNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemStandardNotesByIdRequest struct {
	ctx          context.Context
	ApiService   *StandardNotesAPIService
	id           int32
	clientId     *string
	standardNote *StandardNote
}

func (r ApiPutSystemStandardNotesByIdRequest) ClientId(clientId string) ApiPutSystemStandardNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// standardNote
func (r ApiPutSystemStandardNotesByIdRequest) StandardNote(standardNote StandardNote) ApiPutSystemStandardNotesByIdRequest {
	r.standardNote = &standardNote
	return r
}

func (r ApiPutSystemStandardNotesByIdRequest) Execute() (*StandardNote, *http.Response, error) {
	return r.ApiService.PutSystemStandardNotesByIdExecute(r)
}

/*
PutSystemStandardNotesById Put StandardNote

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id standardNoteId
	@return ApiPutSystemStandardNotesByIdRequest
*/
func (a *StandardNotesAPIService) PutSystemStandardNotesById(ctx context.Context, id int32) ApiPutSystemStandardNotesByIdRequest {
	return ApiPutSystemStandardNotesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return StandardNote
func (a *StandardNotesAPIService) PutSystemStandardNotesByIdExecute(r ApiPutSystemStandardNotesByIdRequest) (*StandardNote, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StandardNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StandardNotesAPIService.PutSystemStandardNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/standardNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.standardNote == nil {
		return localVarReturnValue, nil, reportError("standardNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.standardNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
