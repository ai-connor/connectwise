/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// StatusIndicatorsAPIService StatusIndicatorsAPI service
type StatusIndicatorsAPIService service

type ApiGetProjectStatusIndicatorsRequest struct {
	ctx                   context.Context
	ApiService            *StatusIndicatorsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectStatusIndicatorsRequest) ClientId(clientId string) ApiGetProjectStatusIndicatorsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) Conditions(conditions string) ApiGetProjectStatusIndicatorsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) ChildConditions(childConditions string) ApiGetProjectStatusIndicatorsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectStatusIndicatorsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) OrderBy(orderBy string) ApiGetProjectStatusIndicatorsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) Fields(fields string) ApiGetProjectStatusIndicatorsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) Page(page int32) ApiGetProjectStatusIndicatorsRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) PageSize(pageSize int32) ApiGetProjectStatusIndicatorsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) PageId(pageId int32) ApiGetProjectStatusIndicatorsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectStatusIndicatorsRequest) Execute() ([]StatusIndicator, *http.Response, error) {
	return r.ApiService.GetProjectStatusIndicatorsExecute(r)
}

/*
GetProjectStatusIndicators Get List of StatusIndicator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectStatusIndicatorsRequest
*/
func (a *StatusIndicatorsAPIService) GetProjectStatusIndicators(ctx context.Context) ApiGetProjectStatusIndicatorsRequest {
	return ApiGetProjectStatusIndicatorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []StatusIndicator
func (a *StatusIndicatorsAPIService) GetProjectStatusIndicatorsExecute(r ApiGetProjectStatusIndicatorsRequest) ([]StatusIndicator, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []StatusIndicator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatusIndicatorsAPIService.GetProjectStatusIndicators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statusIndicators"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectStatusIndicatorsByIdRequest struct {
	ctx                   context.Context
	ApiService            *StatusIndicatorsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) ClientId(clientId string) ApiGetProjectStatusIndicatorsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) Conditions(conditions string) ApiGetProjectStatusIndicatorsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) ChildConditions(childConditions string) ApiGetProjectStatusIndicatorsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectStatusIndicatorsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) OrderBy(orderBy string) ApiGetProjectStatusIndicatorsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) Fields(fields string) ApiGetProjectStatusIndicatorsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) Page(page int32) ApiGetProjectStatusIndicatorsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) PageSize(pageSize int32) ApiGetProjectStatusIndicatorsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) PageId(pageId int32) ApiGetProjectStatusIndicatorsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectStatusIndicatorsByIdRequest) Execute() (*StatusIndicator, *http.Response, error) {
	return r.ApiService.GetProjectStatusIndicatorsByIdExecute(r)
}

/*
GetProjectStatusIndicatorsById Get StatusIndicator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusIndicatorId
	@return ApiGetProjectStatusIndicatorsByIdRequest
*/
func (a *StatusIndicatorsAPIService) GetProjectStatusIndicatorsById(ctx context.Context, id int32) ApiGetProjectStatusIndicatorsByIdRequest {
	return ApiGetProjectStatusIndicatorsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return StatusIndicator
func (a *StatusIndicatorsAPIService) GetProjectStatusIndicatorsByIdExecute(r ApiGetProjectStatusIndicatorsByIdRequest) (*StatusIndicator, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StatusIndicator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatusIndicatorsAPIService.GetProjectStatusIndicatorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statusIndicators/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectStatusIndicatorsCountRequest struct {
	ctx                   context.Context
	ApiService            *StatusIndicatorsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectStatusIndicatorsCountRequest) ClientId(clientId string) ApiGetProjectStatusIndicatorsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) Conditions(conditions string) ApiGetProjectStatusIndicatorsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) ChildConditions(childConditions string) ApiGetProjectStatusIndicatorsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectStatusIndicatorsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) OrderBy(orderBy string) ApiGetProjectStatusIndicatorsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) Fields(fields string) ApiGetProjectStatusIndicatorsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) Page(page int32) ApiGetProjectStatusIndicatorsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) PageSize(pageSize int32) ApiGetProjectStatusIndicatorsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) PageId(pageId int32) ApiGetProjectStatusIndicatorsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectStatusIndicatorsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectStatusIndicatorsCountExecute(r)
}

/*
GetProjectStatusIndicatorsCount Get Count of StatusIndicator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProjectStatusIndicatorsCountRequest
*/
func (a *StatusIndicatorsAPIService) GetProjectStatusIndicatorsCount(ctx context.Context) ApiGetProjectStatusIndicatorsCountRequest {
	return ApiGetProjectStatusIndicatorsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *StatusIndicatorsAPIService) GetProjectStatusIndicatorsCountExecute(r ApiGetProjectStatusIndicatorsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatusIndicatorsAPIService.GetProjectStatusIndicatorsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/statusIndicators/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
