/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TaxCodeLevelsAPIService TaxCodeLevelsAPI service
type TaxCodeLevelsAPIService service

type ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest struct {
	ctx        context.Context
	ApiService *TaxCodeLevelsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) ClientId(clientId string) ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r)
}

/*
DeleteFinanceTaxCodesByParentIdTaxCodeLevelsById Delete TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxCodeLevelId
	@param parentId taxCodeId
	@return ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest
*/
func (a *TaxCodeLevelsAPIService) DeleteFinanceTaxCodesByParentIdTaxCodeLevelsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	return ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *TaxCodeLevelsAPIService) DeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r ApiDeleteFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.DeleteFinanceTaxCodesByParentIdTaxCodeLevelsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeLevelsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) Execute() ([]TaxCodeLevel, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdTaxCodeLevelsExecute(r)
}

/*
GetFinanceTaxCodesByParentIdTaxCodeLevels Get List of TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest
*/
func (a *TaxCodeLevelsAPIService) GetFinanceTaxCodesByParentIdTaxCodeLevels(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	return ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []TaxCodeLevel
func (a *TaxCodeLevelsAPIService) GetFinanceTaxCodesByParentIdTaxCodeLevelsExecute(r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsRequest) ([]TaxCodeLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TaxCodeLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.GetFinanceTaxCodesByParentIdTaxCodeLevels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeLevelsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Execute() (*TaxCodeLevel, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r)
}

/*
GetFinanceTaxCodesByParentIdTaxCodeLevelsById Get TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxCodeLevelId
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest
*/
func (a *TaxCodeLevelsAPIService) GetFinanceTaxCodesByParentIdTaxCodeLevelsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	return ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TaxCodeLevel
func (a *TaxCodeLevelsAPIService) GetFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) (*TaxCodeLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxCodeLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.GetFinanceTaxCodesByParentIdTaxCodeLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeLevelsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdTaxCodeLevelsCountExecute(r)
}

/*
GetFinanceTaxCodesByParentIdTaxCodeLevelsCount Get Count of TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest
*/
func (a *TaxCodeLevelsAPIService) GetFinanceTaxCodesByParentIdTaxCodeLevelsCount(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest {
	return ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TaxCodeLevelsAPIService) GetFinanceTaxCodesByParentIdTaxCodeLevelsCountExecute(r ApiGetFinanceTaxCodesByParentIdTaxCodeLevelsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.GetFinanceTaxCodesByParentIdTaxCodeLevelsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest struct {
	ctx            context.Context
	ApiService     *TaxCodeLevelsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Execute() (*TaxCodeLevel, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r)
}

/*
PatchFinanceTaxCodesByParentIdTaxCodeLevelsById Patch TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxCodeLevelId
	@param parentId taxCodeId
	@return ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest
*/
func (a *TaxCodeLevelsAPIService) PatchFinanceTaxCodesByParentIdTaxCodeLevelsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	return ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TaxCodeLevel
func (a *TaxCodeLevelsAPIService) PatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r ApiPatchFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) (*TaxCodeLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxCodeLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.PatchFinanceTaxCodesByParentIdTaxCodeLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest struct {
	ctx          context.Context
	ApiService   *TaxCodeLevelsAPIService
	parentId     int32
	clientId     *string
	taxCodeLevel *TaxCodeLevel
}

func (r ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest) ClientId(clientId string) ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.clientId = &clientId
	return r
}

// taxCodeLevel
func (r ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest) TaxCodeLevel(taxCodeLevel TaxCodeLevel) ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	r.taxCodeLevel = &taxCodeLevel
	return r
}

func (r ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest) Execute() (*TaxCodeLevel, *http.Response, error) {
	return r.ApiService.PostFinanceTaxCodesByParentIdTaxCodeLevelsExecute(r)
}

/*
PostFinanceTaxCodesByParentIdTaxCodeLevels Post TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest
*/
func (a *TaxCodeLevelsAPIService) PostFinanceTaxCodesByParentIdTaxCodeLevels(ctx context.Context, parentId int32) ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest {
	return ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TaxCodeLevel
func (a *TaxCodeLevelsAPIService) PostFinanceTaxCodesByParentIdTaxCodeLevelsExecute(r ApiPostFinanceTaxCodesByParentIdTaxCodeLevelsRequest) (*TaxCodeLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxCodeLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.PostFinanceTaxCodesByParentIdTaxCodeLevels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.taxCodeLevel == nil {
		return localVarReturnValue, nil, reportError("taxCodeLevel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.taxCodeLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest struct {
	ctx          context.Context
	ApiService   *TaxCodeLevelsAPIService
	id           int32
	parentId     int32
	clientId     *string
	taxCodeLevel *TaxCodeLevel
}

func (r ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

// taxCodeLevel
func (r ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) TaxCodeLevel(taxCodeLevel TaxCodeLevel) ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	r.taxCodeLevel = &taxCodeLevel
	return r
}

func (r ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) Execute() (*TaxCodeLevel, *http.Response, error) {
	return r.ApiService.PutFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r)
}

/*
PutFinanceTaxCodesByParentIdTaxCodeLevelsById Put TaxCodeLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxCodeLevelId
	@param parentId taxCodeId
	@return ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest
*/
func (a *TaxCodeLevelsAPIService) PutFinanceTaxCodesByParentIdTaxCodeLevelsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest {
	return ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TaxCodeLevel
func (a *TaxCodeLevelsAPIService) PutFinanceTaxCodesByParentIdTaxCodeLevelsByIdExecute(r ApiPutFinanceTaxCodesByParentIdTaxCodeLevelsByIdRequest) (*TaxCodeLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxCodeLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeLevelsAPIService.PutFinanceTaxCodesByParentIdTaxCodeLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.taxCodeLevel == nil {
		return localVarReturnValue, nil, reportError("taxCodeLevel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.taxCodeLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
