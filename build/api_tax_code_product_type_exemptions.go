/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TaxCodeProductTypeExemptionsAPIService TaxCodeProductTypeExemptionsAPI service
type TaxCodeProductTypeExemptionsAPIService service

type ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest struct {
	ctx        context.Context
	ApiService *TaxCodeProductTypeExemptionsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) ClientId(clientId string) ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r)
}

/*
DeleteFinanceTaxCodesByParentIdProductTypeExemptionsById Delete ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id productTypeExemptionId
	@param parentId taxCodeId
	@return ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) DeleteFinanceTaxCodesByParentIdProductTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	return ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *TaxCodeProductTypeExemptionsAPIService) DeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r ApiDeleteFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.DeleteFinanceTaxCodesByParentIdProductTypeExemptionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeProductTypeExemptionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) Execute() ([]ProductTypeExemption, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdProductTypeExemptionsExecute(r)
}

/*
GetFinanceTaxCodesByParentIdProductTypeExemptions Get List of ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdProductTypeExemptions(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	return ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ProductTypeExemption
func (a *TaxCodeProductTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdProductTypeExemptionsExecute(r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsRequest) ([]ProductTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ProductTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.GetFinanceTaxCodesByParentIdProductTypeExemptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeProductTypeExemptionsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Execute() (*ProductTypeExemption, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r)
}

/*
GetFinanceTaxCodesByParentIdProductTypeExemptionsById Get ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id productTypeExemptionId
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdProductTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	return ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProductTypeExemption
func (a *TaxCodeProductTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) (*ProductTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProductTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.GetFinanceTaxCodesByParentIdProductTypeExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeProductTypeExemptionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdProductTypeExemptionsCountExecute(r)
}

/*
GetFinanceTaxCodesByParentIdProductTypeExemptionsCount Get Count of ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdProductTypeExemptionsCount(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest {
	return ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TaxCodeProductTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdProductTypeExemptionsCountExecute(r ApiGetFinanceTaxCodesByParentIdProductTypeExemptionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.GetFinanceTaxCodesByParentIdProductTypeExemptionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest struct {
	ctx            context.Context
	ApiService     *TaxCodeProductTypeExemptionsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Execute() (*ProductTypeExemption, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r)
}

/*
PatchFinanceTaxCodesByParentIdProductTypeExemptionsById Patch ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id productTypeExemptionId
	@param parentId taxCodeId
	@return ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) PatchFinanceTaxCodesByParentIdProductTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	return ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProductTypeExemption
func (a *TaxCodeProductTypeExemptionsAPIService) PatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r ApiPatchFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) (*ProductTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProductTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.PatchFinanceTaxCodesByParentIdProductTypeExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest struct {
	ctx                  context.Context
	ApiService           *TaxCodeProductTypeExemptionsAPIService
	parentId             int32
	clientId             *string
	productTypeExemption *ProductTypeExemption
}

func (r ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest) ClientId(clientId string) ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.clientId = &clientId
	return r
}

// productTypeExemption
func (r ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest) ProductTypeExemption(productTypeExemption ProductTypeExemption) ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	r.productTypeExemption = &productTypeExemption
	return r
}

func (r ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest) Execute() (*ProductTypeExemption, *http.Response, error) {
	return r.ApiService.PostFinanceTaxCodesByParentIdProductTypeExemptionsExecute(r)
}

/*
PostFinanceTaxCodesByParentIdProductTypeExemptions Post ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) PostFinanceTaxCodesByParentIdProductTypeExemptions(ctx context.Context, parentId int32) ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest {
	return ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProductTypeExemption
func (a *TaxCodeProductTypeExemptionsAPIService) PostFinanceTaxCodesByParentIdProductTypeExemptionsExecute(r ApiPostFinanceTaxCodesByParentIdProductTypeExemptionsRequest) (*ProductTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProductTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.PostFinanceTaxCodesByParentIdProductTypeExemptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.productTypeExemption == nil {
		return localVarReturnValue, nil, reportError("productTypeExemption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.productTypeExemption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest struct {
	ctx                  context.Context
	ApiService           *TaxCodeProductTypeExemptionsAPIService
	id                   int32
	parentId             int32
	clientId             *string
	productTypeExemption *ProductTypeExemption
}

func (r ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

// productTypeExemption
func (r ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) ProductTypeExemption(productTypeExemption ProductTypeExemption) ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	r.productTypeExemption = &productTypeExemption
	return r
}

func (r ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) Execute() (*ProductTypeExemption, *http.Response, error) {
	return r.ApiService.PutFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r)
}

/*
PutFinanceTaxCodesByParentIdProductTypeExemptionsById Put ProductTypeExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id productTypeExemptionId
	@param parentId taxCodeId
	@return ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest
*/
func (a *TaxCodeProductTypeExemptionsAPIService) PutFinanceTaxCodesByParentIdProductTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest {
	return ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ProductTypeExemption
func (a *TaxCodeProductTypeExemptionsAPIService) PutFinanceTaxCodesByParentIdProductTypeExemptionsByIdExecute(r ApiPutFinanceTaxCodesByParentIdProductTypeExemptionsByIdRequest) (*ProductTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProductTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeProductTypeExemptionsAPIService.PutFinanceTaxCodesByParentIdProductTypeExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/productTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.productTypeExemption == nil {
		return localVarReturnValue, nil, reportError("productTypeExemption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.productTypeExemption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
