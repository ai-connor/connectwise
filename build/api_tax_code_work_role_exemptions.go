/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TaxCodeWorkRoleExemptionsAPIService TaxCodeWorkRoleExemptionsAPI service
type TaxCodeWorkRoleExemptionsAPIService service

type ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest struct {
	ctx        context.Context
	ApiService *TaxCodeWorkRoleExemptionsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) ClientId(clientId string) ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r)
}

/*
DeleteFinanceTaxCodesByParentIdWorkRoleExemptionsById Delete WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workRoleExemptionId
	@param parentId taxCodeId
	@return ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) DeleteFinanceTaxCodesByParentIdWorkRoleExemptionsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	return ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *TaxCodeWorkRoleExemptionsAPIService) DeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r ApiDeleteFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.DeleteFinanceTaxCodesByParentIdWorkRoleExemptionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeWorkRoleExemptionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) Execute() ([]WorkRoleExemption, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdWorkRoleExemptionsExecute(r)
}

/*
GetFinanceTaxCodesByParentIdWorkRoleExemptions Get List of WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) GetFinanceTaxCodesByParentIdWorkRoleExemptions(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	return ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []WorkRoleExemption
func (a *TaxCodeWorkRoleExemptionsAPIService) GetFinanceTaxCodesByParentIdWorkRoleExemptionsExecute(r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) ([]WorkRoleExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WorkRoleExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.GetFinanceTaxCodesByParentIdWorkRoleExemptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeWorkRoleExemptionsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Execute() (*WorkRoleExemption, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r)
}

/*
GetFinanceTaxCodesByParentIdWorkRoleExemptionsById Get WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workRoleExemptionId
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) GetFinanceTaxCodesByParentIdWorkRoleExemptionsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	return ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return WorkRoleExemption
func (a *TaxCodeWorkRoleExemptionsAPIService) GetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) (*WorkRoleExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkRoleExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.GetFinanceTaxCodesByParentIdWorkRoleExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest struct {
	ctx                   context.Context
	ApiService            *TaxCodeWorkRoleExemptionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdWorkRoleExemptionsCountExecute(r)
}

/*
GetFinanceTaxCodesByParentIdWorkRoleExemptionsCount Get Count of WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) GetFinanceTaxCodesByParentIdWorkRoleExemptionsCount(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest {
	return ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TaxCodeWorkRoleExemptionsAPIService) GetFinanceTaxCodesByParentIdWorkRoleExemptionsCountExecute(r ApiGetFinanceTaxCodesByParentIdWorkRoleExemptionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.GetFinanceTaxCodesByParentIdWorkRoleExemptionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest struct {
	ctx            context.Context
	ApiService     *TaxCodeWorkRoleExemptionsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Execute() (*WorkRoleExemption, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r)
}

/*
PatchFinanceTaxCodesByParentIdWorkRoleExemptionsById Patch WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workRoleExemptionId
	@param parentId taxCodeId
	@return ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) PatchFinanceTaxCodesByParentIdWorkRoleExemptionsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	return ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return WorkRoleExemption
func (a *TaxCodeWorkRoleExemptionsAPIService) PatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r ApiPatchFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) (*WorkRoleExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkRoleExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.PatchFinanceTaxCodesByParentIdWorkRoleExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest struct {
	ctx               context.Context
	ApiService        *TaxCodeWorkRoleExemptionsAPIService
	parentId          int32
	clientId          *string
	workRoleExemption *WorkRoleExemption
}

func (r ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) ClientId(clientId string) ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.clientId = &clientId
	return r
}

// workRoleExemption
func (r ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) WorkRoleExemption(workRoleExemption WorkRoleExemption) ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	r.workRoleExemption = &workRoleExemption
	return r
}

func (r ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) Execute() (*WorkRoleExemption, *http.Response, error) {
	return r.ApiService.PostFinanceTaxCodesByParentIdWorkRoleExemptionsExecute(r)
}

/*
PostFinanceTaxCodesByParentIdWorkRoleExemptions Post WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeId
	@return ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) PostFinanceTaxCodesByParentIdWorkRoleExemptions(ctx context.Context, parentId int32) ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest {
	return ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return WorkRoleExemption
func (a *TaxCodeWorkRoleExemptionsAPIService) PostFinanceTaxCodesByParentIdWorkRoleExemptionsExecute(r ApiPostFinanceTaxCodesByParentIdWorkRoleExemptionsRequest) (*WorkRoleExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkRoleExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.PostFinanceTaxCodesByParentIdWorkRoleExemptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workRoleExemption == nil {
		return localVarReturnValue, nil, reportError("workRoleExemption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workRoleExemption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest struct {
	ctx               context.Context
	ApiService        *TaxCodeWorkRoleExemptionsAPIService
	id                int32
	parentId          int32
	clientId          *string
	workRoleExemption *WorkRoleExemption
}

func (r ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

// workRoleExemption
func (r ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) WorkRoleExemption(workRoleExemption WorkRoleExemption) ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	r.workRoleExemption = &workRoleExemption
	return r
}

func (r ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) Execute() (*WorkRoleExemption, *http.Response, error) {
	return r.ApiService.PutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r)
}

/*
PutFinanceTaxCodesByParentIdWorkRoleExemptionsById Put WorkRoleExemption

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workRoleExemptionId
	@param parentId taxCodeId
	@return ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest
*/
func (a *TaxCodeWorkRoleExemptionsAPIService) PutFinanceTaxCodesByParentIdWorkRoleExemptionsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest {
	return ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return WorkRoleExemption
func (a *TaxCodeWorkRoleExemptionsAPIService) PutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdExecute(r ApiPutFinanceTaxCodesByParentIdWorkRoleExemptionsByIdRequest) (*WorkRoleExemption, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkRoleExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeWorkRoleExemptionsAPIService.PutFinanceTaxCodesByParentIdWorkRoleExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/workRoleExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workRoleExemption == nil {
		return localVarReturnValue, nil, reportError("workRoleExemption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workRoleExemption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
