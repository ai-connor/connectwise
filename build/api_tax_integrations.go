/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TaxIntegrationsAPIService TaxIntegrationsAPI service
type TaxIntegrationsAPIService service

type ApiGetFinanceTaxIntegrationsRequest struct {
	ctx                   context.Context
	ApiService            *TaxIntegrationsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxIntegrationsRequest) ClientId(clientId string) ApiGetFinanceTaxIntegrationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) Conditions(conditions string) ApiGetFinanceTaxIntegrationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxIntegrationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxIntegrationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) OrderBy(orderBy string) ApiGetFinanceTaxIntegrationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) Fields(fields string) ApiGetFinanceTaxIntegrationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) Page(page int32) ApiGetFinanceTaxIntegrationsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) PageSize(pageSize int32) ApiGetFinanceTaxIntegrationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) PageId(pageId int32) ApiGetFinanceTaxIntegrationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxIntegrationsRequest) Execute() ([]TaxIntegration, *http.Response, error) {
	return r.ApiService.GetFinanceTaxIntegrationsExecute(r)
}

/*
GetFinanceTaxIntegrations Get List of TaxIntegration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceTaxIntegrationsRequest
*/
func (a *TaxIntegrationsAPIService) GetFinanceTaxIntegrations(ctx context.Context) ApiGetFinanceTaxIntegrationsRequest {
	return ApiGetFinanceTaxIntegrationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []TaxIntegration
func (a *TaxIntegrationsAPIService) GetFinanceTaxIntegrationsExecute(r ApiGetFinanceTaxIntegrationsRequest) ([]TaxIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TaxIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxIntegrationsAPIService.GetFinanceTaxIntegrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxIntegrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxIntegrationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *TaxIntegrationsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) Fields(fields string) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) Page(page int32) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxIntegrationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxIntegrationsByIdRequest) Execute() (*TaxIntegration, *http.Response, error) {
	return r.ApiService.GetFinanceTaxIntegrationsByIdExecute(r)
}

/*
GetFinanceTaxIntegrationsById Get TaxIntegration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxIntegrationId
	@return ApiGetFinanceTaxIntegrationsByIdRequest
*/
func (a *TaxIntegrationsAPIService) GetFinanceTaxIntegrationsById(ctx context.Context, id int32) ApiGetFinanceTaxIntegrationsByIdRequest {
	return ApiGetFinanceTaxIntegrationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TaxIntegration
func (a *TaxIntegrationsAPIService) GetFinanceTaxIntegrationsByIdExecute(r ApiGetFinanceTaxIntegrationsByIdRequest) (*TaxIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxIntegrationsAPIService.GetFinanceTaxIntegrationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxIntegrationsCountRequest struct {
	ctx                   context.Context
	ApiService            *TaxIntegrationsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) ClientId(clientId string) ApiGetFinanceTaxIntegrationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) Conditions(conditions string) ApiGetFinanceTaxIntegrationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxIntegrationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxIntegrationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxIntegrationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) Fields(fields string) ApiGetFinanceTaxIntegrationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) Page(page int32) ApiGetFinanceTaxIntegrationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxIntegrationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) PageId(pageId int32) ApiGetFinanceTaxIntegrationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxIntegrationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxIntegrationsCountExecute(r)
}

/*
GetFinanceTaxIntegrationsCount Get Count of TaxIntegration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceTaxIntegrationsCountRequest
*/
func (a *TaxIntegrationsAPIService) GetFinanceTaxIntegrationsCount(ctx context.Context) ApiGetFinanceTaxIntegrationsCountRequest {
	return ApiGetFinanceTaxIntegrationsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TaxIntegrationsAPIService) GetFinanceTaxIntegrationsCountExecute(r ApiGetFinanceTaxIntegrationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxIntegrationsAPIService.GetFinanceTaxIntegrationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxIntegrations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxIntegrationsByIdRequest struct {
	ctx            context.Context
	ApiService     *TaxIntegrationsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceTaxIntegrationsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceTaxIntegrationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxIntegrationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceTaxIntegrationsByIdRequest) Execute() (*TaxIntegration, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxIntegrationsByIdExecute(r)
}

/*
PatchFinanceTaxIntegrationsById Patch TaxIntegration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxIntegrationId
	@return ApiPatchFinanceTaxIntegrationsByIdRequest
*/
func (a *TaxIntegrationsAPIService) PatchFinanceTaxIntegrationsById(ctx context.Context, id int32) ApiPatchFinanceTaxIntegrationsByIdRequest {
	return ApiPatchFinanceTaxIntegrationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TaxIntegration
func (a *TaxIntegrationsAPIService) PatchFinanceTaxIntegrationsByIdExecute(r ApiPatchFinanceTaxIntegrationsByIdRequest) (*TaxIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxIntegrationsAPIService.PatchFinanceTaxIntegrationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxIntegrationsByIdRequest struct {
	ctx            context.Context
	ApiService     *TaxIntegrationsAPIService
	id             int32
	clientId       *string
	taxIntegration *TaxIntegration
}

func (r ApiPutFinanceTaxIntegrationsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

// taxIntegration
func (r ApiPutFinanceTaxIntegrationsByIdRequest) TaxIntegration(taxIntegration TaxIntegration) ApiPutFinanceTaxIntegrationsByIdRequest {
	r.taxIntegration = &taxIntegration
	return r
}

func (r ApiPutFinanceTaxIntegrationsByIdRequest) Execute() (*TaxIntegration, *http.Response, error) {
	return r.ApiService.PutFinanceTaxIntegrationsByIdExecute(r)
}

/*
PutFinanceTaxIntegrationsById Put TaxIntegration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxIntegrationId
	@return ApiPutFinanceTaxIntegrationsByIdRequest
*/
func (a *TaxIntegrationsAPIService) PutFinanceTaxIntegrationsById(ctx context.Context, id int32) ApiPutFinanceTaxIntegrationsByIdRequest {
	return ApiPutFinanceTaxIntegrationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TaxIntegration
func (a *TaxIntegrationsAPIService) PutFinanceTaxIntegrationsByIdExecute(r ApiPutFinanceTaxIntegrationsByIdRequest) (*TaxIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxIntegrationsAPIService.PutFinanceTaxIntegrationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.taxIntegration == nil {
		return localVarReturnValue, nil, reportError("taxIntegration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.taxIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
