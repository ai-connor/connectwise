/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TaxableXRefLevelsAPIService TaxableXRefLevelsAPI service
type TaxableXRefLevelsAPIService service

type ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest struct {
	ctx           context.Context
	ApiService    *TaxableXRefLevelsAPIService
	id            int32
	parentId      int32
	grandparentId int32
	clientId      *string
}

func (r ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) ClientId(clientId string) ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r)
}

/*
DeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById Delete TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxableXRefLevelId
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest
*/
func (a *TaxableXRefLevelsAPIService) DeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	return ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *TaxableXRefLevelsAPIService) DeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r ApiDeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.DeleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest struct {
	ctx                   context.Context
	ApiService            *TaxableXRefLevelsAPIService
	parentId              int32
	grandparentId         int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) Fields(fields string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) Page(page int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) Execute() ([]TaxableXRefLevel, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsExecute(r)
}

/*
GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels Get List of TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest
*/
func (a *TaxableXRefLevelsAPIService) GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels(ctx context.Context, parentId int32, grandparentId int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	return ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest{
		ApiService:    a,
		ctx:           ctx,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//
//	@return []TaxableXRefLevel
func (a *TaxableXRefLevelsAPIService) GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsExecute(r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) ([]TaxableXRefLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TaxableXRefLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest struct {
	ctx                   context.Context
	ApiService            *TaxableXRefLevelsAPIService
	id                    int32
	parentId              int32
	grandparentId         int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Fields(fields string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Page(page int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Execute() (*TaxableXRefLevel, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r)
}

/*
GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById Get TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxableXRefLevelId
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest
*/
func (a *TaxableXRefLevelsAPIService) GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	return ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//
//	@return TaxableXRefLevel
func (a *TaxableXRefLevelsAPIService) GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) (*TaxableXRefLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxableXRefLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest struct {
	ctx                   context.Context
	ApiService            *TaxableXRefLevelsAPIService
	parentId              int32
	grandparentId         int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) Fields(fields string) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) Page(page int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountExecute(r)
}

/*
GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCount Get Count of TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest
*/
func (a *TaxableXRefLevelsAPIService) GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest {
	return ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest{
		ApiService:    a,
		ctx:           ctx,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TaxableXRefLevelsAPIService) GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountExecute(r ApiGetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.GetFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest struct {
	ctx            context.Context
	ApiService     *TaxableXRefLevelsAPIService
	id             int32
	parentId       int32
	grandparentId  int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Execute() (*TaxableXRefLevel, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r)
}

/*
PatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById Patch TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxableXRefLevelId
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest
*/
func (a *TaxableXRefLevelsAPIService) PatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	return ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//
//	@return TaxableXRefLevel
func (a *TaxableXRefLevelsAPIService) PatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r ApiPatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) (*TaxableXRefLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxableXRefLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.PatchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest struct {
	ctx              context.Context
	ApiService       *TaxableXRefLevelsAPIService
	parentId         int32
	grandparentId    int32
	clientId         *string
	taxableXRefLevel *TaxableXRefLevel
}

func (r ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) ClientId(clientId string) ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.clientId = &clientId
	return r
}

// taxableXRefLevel
func (r ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) TaxableXRefLevel(taxableXRefLevel TaxableXRefLevel) ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	r.taxableXRefLevel = &taxableXRefLevel
	return r
}

func (r ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) Execute() (*TaxableXRefLevel, *http.Response, error) {
	return r.ApiService.PostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsExecute(r)
}

/*
PostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels Post TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest
*/
func (a *TaxableXRefLevelsAPIService) PostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels(ctx context.Context, parentId int32, grandparentId int32) ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest {
	return ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest{
		ApiService:    a,
		ctx:           ctx,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//
//	@return TaxableXRefLevel
func (a *TaxableXRefLevelsAPIService) PostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsExecute(r ApiPostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsRequest) (*TaxableXRefLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxableXRefLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.PostFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.taxableXRefLevel == nil {
		return localVarReturnValue, nil, reportError("taxableXRefLevel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.taxableXRefLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest struct {
	ctx              context.Context
	ApiService       *TaxableXRefLevelsAPIService
	id               int32
	parentId         int32
	grandparentId    int32
	clientId         *string
	taxableXRefLevel *TaxableXRefLevel
}

func (r ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

// taxableXRefLevel
func (r ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) TaxableXRefLevel(taxableXRefLevel TaxableXRefLevel) ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	r.taxableXRefLevel = &taxableXRefLevel
	return r
}

func (r ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) Execute() (*TaxableXRefLevel, *http.Response, error) {
	return r.ApiService.PutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r)
}

/*
PutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById Put TaxableXRefLevel

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taxableXRefLevelId
	@param parentId taxCodeXRefId
	@param grandparentId taxCodeId
	@return ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest
*/
func (a *TaxableXRefLevelsAPIService) PutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest {
	return ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		parentId:      parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//
//	@return TaxableXRefLevel
func (a *TaxableXRefLevelsAPIService) PutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdExecute(r ApiPutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsByIdRequest) (*TaxableXRefLevel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TaxableXRefLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxableXRefLevelsAPIService.PutFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{grandparentId}/taxCodeXRefs/{parentId}/taxableXRefLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.taxableXRefLevel == nil {
		return localVarReturnValue, nil, reportError("taxableXRefLevel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.taxableXRefLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
