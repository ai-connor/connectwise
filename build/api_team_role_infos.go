/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TeamRoleInfosAPIService TeamRoleInfosAPI service
type TeamRoleInfosAPIService service

type ApiGetCompanyTeamRolesByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *TeamRoleInfosAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) ClientId(clientId string) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) Conditions(conditions string) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) Fields(fields string) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) Page(page int32) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) PageId(pageId int32) ApiGetCompanyTeamRolesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesByIdInfoRequest) Execute() (*TeamRoleInfo, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesByIdInfoExecute(r)
}

/*
GetCompanyTeamRolesByIdInfo Get TeamRoleInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id TeamRoleInfoId
	@return ApiGetCompanyTeamRolesByIdInfoRequest
*/
func (a *TeamRoleInfosAPIService) GetCompanyTeamRolesByIdInfo(ctx context.Context, id int32) ApiGetCompanyTeamRolesByIdInfoRequest {
	return ApiGetCompanyTeamRolesByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamRoleInfo
func (a *TeamRoleInfosAPIService) GetCompanyTeamRolesByIdInfoExecute(r ApiGetCompanyTeamRolesByIdInfoRequest) (*TeamRoleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamRoleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamRoleInfosAPIService.GetCompanyTeamRolesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesInfoRequest struct {
	ctx                   context.Context
	ApiService            *TeamRoleInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesInfoRequest) ClientId(clientId string) ApiGetCompanyTeamRolesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) Conditions(conditions string) ApiGetCompanyTeamRolesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) Fields(fields string) ApiGetCompanyTeamRolesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) Page(page int32) ApiGetCompanyTeamRolesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) PageId(pageId int32) ApiGetCompanyTeamRolesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesInfoRequest) Execute() ([]TeamRoleInfo, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesInfoExecute(r)
}

/*
GetCompanyTeamRolesInfo Get List of TeamRoleInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyTeamRolesInfoRequest
*/
func (a *TeamRoleInfosAPIService) GetCompanyTeamRolesInfo(ctx context.Context) ApiGetCompanyTeamRolesInfoRequest {
	return ApiGetCompanyTeamRolesInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []TeamRoleInfo
func (a *TeamRoleInfosAPIService) GetCompanyTeamRolesInfoExecute(r ApiGetCompanyTeamRolesInfoRequest) ([]TeamRoleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TeamRoleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamRoleInfosAPIService.GetCompanyTeamRolesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *TeamRoleInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) ClientId(clientId string) ApiGetCompanyTeamRolesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) Conditions(conditions string) ApiGetCompanyTeamRolesInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) Fields(fields string) ApiGetCompanyTeamRolesInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) Page(page int32) ApiGetCompanyTeamRolesInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) PageId(pageId int32) ApiGetCompanyTeamRolesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesInfoCountExecute(r)
}

/*
GetCompanyTeamRolesInfoCount Get Count of TeamRoleInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyTeamRolesInfoCountRequest
*/
func (a *TeamRoleInfosAPIService) GetCompanyTeamRolesInfoCount(ctx context.Context) ApiGetCompanyTeamRolesInfoCountRequest {
	return ApiGetCompanyTeamRolesInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TeamRoleInfosAPIService) GetCompanyTeamRolesInfoCountExecute(r ApiGetCompanyTeamRolesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamRoleInfosAPIService.GetCompanyTeamRolesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
