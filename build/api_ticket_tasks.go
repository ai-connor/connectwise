/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TicketTasksAPIService TicketTasksAPI service
type TicketTasksAPIService service

type ApiDeleteProjectTicketsByParentIdTasksByIdRequest struct {
	ctx        context.Context
	ApiService *TicketTasksAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProjectTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiDeleteProjectTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectTicketsByParentIdTasksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectTicketsByParentIdTasksByIdExecute(r)
}

/*
DeleteProjectTicketsByParentIdTasksById Delete TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiDeleteProjectTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) DeleteProjectTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectTicketsByParentIdTasksByIdRequest {
	return ApiDeleteProjectTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *TicketTasksAPIService) DeleteProjectTicketsByParentIdTasksByIdExecute(r ApiDeleteProjectTicketsByParentIdTasksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.DeleteProjectTicketsByParentIdTasksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteServiceTicketsByParentIdTasksByIdRequest struct {
	ctx        context.Context
	ApiService *TicketTasksAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteServiceTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiDeleteServiceTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceTicketsByParentIdTasksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceTicketsByParentIdTasksByIdExecute(r)
}

/*
DeleteServiceTicketsByParentIdTasksById Delete Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiDeleteServiceTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) DeleteServiceTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceTicketsByParentIdTasksByIdRequest {
	return ApiDeleteServiceTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *TicketTasksAPIService) DeleteServiceTicketsByParentIdTasksByIdExecute(r ApiDeleteServiceTicketsByParentIdTasksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.DeleteServiceTicketsByParentIdTasksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdTasksRequest struct {
	ctx                   context.Context
	ApiService            *TicketTasksAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdTasksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdTasksRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdTasksRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdTasksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdTasksRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) Fields(fields string) ApiGetProjectTicketsByParentIdTasksRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) Page(page int32) ApiGetProjectTicketsByParentIdTasksRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdTasksRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdTasksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksRequest) Execute() ([]TicketTask, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdTasksExecute(r)
}

/*
GetProjectTicketsByParentIdTasks Get List of TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdTasksRequest
*/
func (a *TicketTasksAPIService) GetProjectTicketsByParentIdTasks(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdTasksRequest {
	return ApiGetProjectTicketsByParentIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []TicketTask
func (a *TicketTasksAPIService) GetProjectTicketsByParentIdTasksExecute(r ApiGetProjectTicketsByParentIdTasksRequest) ([]TicketTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TicketTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.GetProjectTicketsByParentIdTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdTasksByIdRequest struct {
	ctx                   context.Context
	ApiService            *TicketTasksAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) Fields(fields string) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) Page(page int32) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksByIdRequest) Execute() (*TicketTask, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdTasksByIdExecute(r)
}

/*
GetProjectTicketsByParentIdTasksById Get TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) GetProjectTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiGetProjectTicketsByParentIdTasksByIdRequest {
	return ApiGetProjectTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TicketTask
func (a *TicketTasksAPIService) GetProjectTicketsByParentIdTasksByIdExecute(r ApiGetProjectTicketsByParentIdTasksByIdRequest) (*TicketTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TicketTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.GetProjectTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdTasksCountRequest struct {
	ctx                   context.Context
	ApiService            *TicketTasksAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdTasksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectTicketsByParentIdTasksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdTasksCountExecute(r)
}

/*
GetProjectTicketsByParentIdTasksCount Get Count of TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetProjectTicketsByParentIdTasksCountRequest
*/
func (a *TicketTasksAPIService) GetProjectTicketsByParentIdTasksCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdTasksCountRequest {
	return ApiGetProjectTicketsByParentIdTasksCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TicketTasksAPIService) GetProjectTicketsByParentIdTasksCountExecute(r ApiGetProjectTicketsByParentIdTasksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.GetProjectTicketsByParentIdTasksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdTasksRequest struct {
	ctx                   context.Context
	ApiService            *TicketTasksAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdTasksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdTasksRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdTasksRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdTasksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdTasksRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) Fields(fields string) ApiGetServiceTicketsByParentIdTasksRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) Page(page int32) ApiGetServiceTicketsByParentIdTasksRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdTasksRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdTasksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksRequest) Execute() ([]ServiceTask, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdTasksExecute(r)
}

/*
GetServiceTicketsByParentIdTasks Get List of Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetServiceTicketsByParentIdTasksRequest
*/
func (a *TicketTasksAPIService) GetServiceTicketsByParentIdTasks(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdTasksRequest {
	return ApiGetServiceTicketsByParentIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ServiceTask
func (a *TicketTasksAPIService) GetServiceTicketsByParentIdTasksExecute(r ApiGetServiceTicketsByParentIdTasksRequest) ([]ServiceTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ServiceTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.GetServiceTicketsByParentIdTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdTasksByIdRequest struct {
	ctx                   context.Context
	ApiService            *TicketTasksAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) Fields(fields string) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) Page(page int32) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksByIdRequest) Execute() (*ServiceTask, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdTasksByIdExecute(r)
}

/*
GetServiceTicketsByParentIdTasksById Get Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiGetServiceTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) GetServiceTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiGetServiceTicketsByParentIdTasksByIdRequest {
	return ApiGetServiceTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceTask
func (a *TicketTasksAPIService) GetServiceTicketsByParentIdTasksByIdExecute(r ApiGetServiceTicketsByParentIdTasksByIdRequest) (*ServiceTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.GetServiceTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdTasksCountRequest struct {
	ctx                   context.Context
	ApiService            *TicketTasksAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdTasksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdTasksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdTasksCountExecute(r)
}

/*
GetServiceTicketsByParentIdTasksCount Get Count of Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiGetServiceTicketsByParentIdTasksCountRequest
*/
func (a *TicketTasksAPIService) GetServiceTicketsByParentIdTasksCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdTasksCountRequest {
	return ApiGetServiceTicketsByParentIdTasksCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *TicketTasksAPIService) GetServiceTicketsByParentIdTasksCountExecute(r ApiGetServiceTicketsByParentIdTasksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.GetServiceTicketsByParentIdTasksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectTicketsByParentIdTasksByIdRequest struct {
	ctx            context.Context
	ApiService     *TicketTasksAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProjectTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiPatchProjectTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectTicketsByParentIdTasksByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectTicketsByParentIdTasksByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectTicketsByParentIdTasksByIdRequest) Execute() (*TicketTask, *http.Response, error) {
	return r.ApiService.PatchProjectTicketsByParentIdTasksByIdExecute(r)
}

/*
PatchProjectTicketsByParentIdTasksById Patch TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiPatchProjectTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) PatchProjectTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiPatchProjectTicketsByParentIdTasksByIdRequest {
	return ApiPatchProjectTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TicketTask
func (a *TicketTasksAPIService) PatchProjectTicketsByParentIdTasksByIdExecute(r ApiPatchProjectTicketsByParentIdTasksByIdRequest) (*TicketTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TicketTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.PatchProjectTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceTicketsByParentIdTasksByIdRequest struct {
	ctx            context.Context
	ApiService     *TicketTasksAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiPatchServiceTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceTicketsByParentIdTasksByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceTicketsByParentIdTasksByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceTicketsByParentIdTasksByIdRequest) Execute() (*ServiceTask, *http.Response, error) {
	return r.ApiService.PatchServiceTicketsByParentIdTasksByIdExecute(r)
}

/*
PatchServiceTicketsByParentIdTasksById Patch Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiPatchServiceTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) PatchServiceTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiPatchServiceTicketsByParentIdTasksByIdRequest {
	return ApiPatchServiceTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceTask
func (a *TicketTasksAPIService) PatchServiceTicketsByParentIdTasksByIdExecute(r ApiPatchServiceTicketsByParentIdTasksByIdRequest) (*ServiceTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.PatchServiceTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectTicketsByParentIdTasksRequest struct {
	ctx        context.Context
	ApiService *TicketTasksAPIService
	parentId   int32
	clientId   *string
	ticketTask *TicketTask
}

func (r ApiPostProjectTicketsByParentIdTasksRequest) ClientId(clientId string) ApiPostProjectTicketsByParentIdTasksRequest {
	r.clientId = &clientId
	return r
}

// ticketTask
func (r ApiPostProjectTicketsByParentIdTasksRequest) TicketTask(ticketTask TicketTask) ApiPostProjectTicketsByParentIdTasksRequest {
	r.ticketTask = &ticketTask
	return r
}

func (r ApiPostProjectTicketsByParentIdTasksRequest) Execute() (*TicketTask, *http.Response, error) {
	return r.ApiService.PostProjectTicketsByParentIdTasksExecute(r)
}

/*
PostProjectTicketsByParentIdTasks Post TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiPostProjectTicketsByParentIdTasksRequest
*/
func (a *TicketTasksAPIService) PostProjectTicketsByParentIdTasks(ctx context.Context, parentId int32) ApiPostProjectTicketsByParentIdTasksRequest {
	return ApiPostProjectTicketsByParentIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TicketTask
func (a *TicketTasksAPIService) PostProjectTicketsByParentIdTasksExecute(r ApiPostProjectTicketsByParentIdTasksRequest) (*TicketTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TicketTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.PostProjectTicketsByParentIdTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticketTask == nil {
		return localVarReturnValue, nil, reportError("ticketTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticketTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByParentIdTasksRequest struct {
	ctx         context.Context
	ApiService  *TicketTasksAPIService
	parentId    int32
	clientId    *string
	serviceTask *ServiceTask
}

func (r ApiPostServiceTicketsByParentIdTasksRequest) ClientId(clientId string) ApiPostServiceTicketsByParentIdTasksRequest {
	r.clientId = &clientId
	return r
}

// task
func (r ApiPostServiceTicketsByParentIdTasksRequest) ServiceTask(serviceTask ServiceTask) ApiPostServiceTicketsByParentIdTasksRequest {
	r.serviceTask = &serviceTask
	return r
}

func (r ApiPostServiceTicketsByParentIdTasksRequest) Execute() (*ServiceTask, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByParentIdTasksExecute(r)
}

/*
PostServiceTicketsByParentIdTasks Post Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId ticketId
	@return ApiPostServiceTicketsByParentIdTasksRequest
*/
func (a *TicketTasksAPIService) PostServiceTicketsByParentIdTasks(ctx context.Context, parentId int32) ApiPostServiceTicketsByParentIdTasksRequest {
	return ApiPostServiceTicketsByParentIdTasksRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceTask
func (a *TicketTasksAPIService) PostServiceTicketsByParentIdTasksExecute(r ApiPostServiceTicketsByParentIdTasksRequest) (*ServiceTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.PostServiceTicketsByParentIdTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceTask == nil {
		return localVarReturnValue, nil, reportError("serviceTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectTicketsByParentIdTasksByIdRequest struct {
	ctx        context.Context
	ApiService *TicketTasksAPIService
	id         int32
	parentId   int32
	clientId   *string
	ticketTask *TicketTask
}

func (r ApiPutProjectTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiPutProjectTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

// ticketTask
func (r ApiPutProjectTicketsByParentIdTasksByIdRequest) TicketTask(ticketTask TicketTask) ApiPutProjectTicketsByParentIdTasksByIdRequest {
	r.ticketTask = &ticketTask
	return r
}

func (r ApiPutProjectTicketsByParentIdTasksByIdRequest) Execute() (*TicketTask, *http.Response, error) {
	return r.ApiService.PutProjectTicketsByParentIdTasksByIdExecute(r)
}

/*
PutProjectTicketsByParentIdTasksById Put TicketTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiPutProjectTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) PutProjectTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiPutProjectTicketsByParentIdTasksByIdRequest {
	return ApiPutProjectTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return TicketTask
func (a *TicketTasksAPIService) PutProjectTicketsByParentIdTasksByIdExecute(r ApiPutProjectTicketsByParentIdTasksByIdRequest) (*TicketTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TicketTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.PutProjectTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticketTask == nil {
		return localVarReturnValue, nil, reportError("ticketTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticketTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceTicketsByParentIdTasksByIdRequest struct {
	ctx         context.Context
	ApiService  *TicketTasksAPIService
	id          int32
	parentId    int32
	clientId    *string
	serviceTask *ServiceTask
}

func (r ApiPutServiceTicketsByParentIdTasksByIdRequest) ClientId(clientId string) ApiPutServiceTicketsByParentIdTasksByIdRequest {
	r.clientId = &clientId
	return r
}

// task
func (r ApiPutServiceTicketsByParentIdTasksByIdRequest) ServiceTask(serviceTask ServiceTask) ApiPutServiceTicketsByParentIdTasksByIdRequest {
	r.serviceTask = &serviceTask
	return r
}

func (r ApiPutServiceTicketsByParentIdTasksByIdRequest) Execute() (*ServiceTask, *http.Response, error) {
	return r.ApiService.PutServiceTicketsByParentIdTasksByIdExecute(r)
}

/*
PutServiceTicketsByParentIdTasksById Put Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id taskId
	@param parentId ticketId
	@return ApiPutServiceTicketsByParentIdTasksByIdRequest
*/
func (a *TicketTasksAPIService) PutServiceTicketsByParentIdTasksById(ctx context.Context, id int32, parentId int32) ApiPutServiceTicketsByParentIdTasksByIdRequest {
	return ApiPutServiceTicketsByParentIdTasksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ServiceTask
func (a *TicketTasksAPIService) PutServiceTicketsByParentIdTasksByIdExecute(r ApiPutServiceTicketsByParentIdTasksByIdRequest) (*ServiceTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketTasksAPIService.PutServiceTicketsByParentIdTasksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/tasks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceTask == nil {
		return localVarReturnValue, nil, reportError("serviceTask is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceTask
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
