/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// UnitOfMeasureConversionsAPIService UnitOfMeasureConversionsAPI service
type UnitOfMeasureConversionsAPIService service

type ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest struct {
	ctx        context.Context
	ApiService *UnitOfMeasureConversionsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) ClientId(clientId string) ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r)
}

/*
DeleteProcurementUnitOfMeasuresByParentIdConversionsById Delete Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id conversionId
	@param parentId unitOfMeasureId
	@return ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest
*/
func (a *UnitOfMeasureConversionsAPIService) DeleteProcurementUnitOfMeasuresByParentIdConversionsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	return ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *UnitOfMeasureConversionsAPIService) DeleteProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r ApiDeleteProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.DeleteProcurementUnitOfMeasuresByParentIdConversionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest struct {
	ctx                   context.Context
	ApiService            *UnitOfMeasureConversionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) ClientId(clientId string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) Conditions(conditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) ChildConditions(childConditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) OrderBy(orderBy string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) Fields(fields string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) Page(page int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) PageSize(pageSize int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) PageId(pageId int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) Execute() ([]Conversion, *http.Response, error) {
	return r.ApiService.GetProcurementUnitOfMeasuresByParentIdConversionsExecute(r)
}

/*
GetProcurementUnitOfMeasuresByParentIdConversions Get List of Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId unitOfMeasureId
	@return ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest
*/
func (a *UnitOfMeasureConversionsAPIService) GetProcurementUnitOfMeasuresByParentIdConversions(ctx context.Context, parentId int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest {
	return ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []Conversion
func (a *UnitOfMeasureConversionsAPIService) GetProcurementUnitOfMeasuresByParentIdConversionsExecute(r ApiGetProcurementUnitOfMeasuresByParentIdConversionsRequest) ([]Conversion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Conversion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.GetProcurementUnitOfMeasuresByParentIdConversions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *UnitOfMeasureConversionsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) ClientId(clientId string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Conditions(conditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) OrderBy(orderBy string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Fields(fields string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Page(page int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) PageSize(pageSize int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) PageId(pageId int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Execute() (*Conversion, *http.Response, error) {
	return r.ApiService.GetProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r)
}

/*
GetProcurementUnitOfMeasuresByParentIdConversionsById Get Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id conversionId
	@param parentId unitOfMeasureId
	@return ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest
*/
func (a *UnitOfMeasureConversionsAPIService) GetProcurementUnitOfMeasuresByParentIdConversionsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	return ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Conversion
func (a *UnitOfMeasureConversionsAPIService) GetProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r ApiGetProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) (*Conversion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Conversion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.GetProcurementUnitOfMeasuresByParentIdConversionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest struct {
	ctx                   context.Context
	ApiService            *UnitOfMeasureConversionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) ClientId(clientId string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) Conditions(conditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) ChildConditions(childConditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) OrderBy(orderBy string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) Fields(fields string) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) Page(page int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) PageSize(pageSize int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) PageId(pageId int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementUnitOfMeasuresByParentIdConversionsCountExecute(r)
}

/*
GetProcurementUnitOfMeasuresByParentIdConversionsCount Get Count of Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId unitOfMeasureId
	@return ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest
*/
func (a *UnitOfMeasureConversionsAPIService) GetProcurementUnitOfMeasuresByParentIdConversionsCount(ctx context.Context, parentId int32) ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest {
	return ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *UnitOfMeasureConversionsAPIService) GetProcurementUnitOfMeasuresByParentIdConversionsCountExecute(r ApiGetProcurementUnitOfMeasuresByParentIdConversionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.GetProcurementUnitOfMeasuresByParentIdConversionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest struct {
	ctx            context.Context
	ApiService     *UnitOfMeasureConversionsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) ClientId(clientId string) ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Execute() (*Conversion, *http.Response, error) {
	return r.ApiService.PatchProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r)
}

/*
PatchProcurementUnitOfMeasuresByParentIdConversionsById Patch Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id conversionId
	@param parentId unitOfMeasureId
	@return ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest
*/
func (a *UnitOfMeasureConversionsAPIService) PatchProcurementUnitOfMeasuresByParentIdConversionsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	return ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Conversion
func (a *UnitOfMeasureConversionsAPIService) PatchProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r ApiPatchProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) (*Conversion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Conversion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.PatchProcurementUnitOfMeasuresByParentIdConversionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest struct {
	ctx        context.Context
	ApiService *UnitOfMeasureConversionsAPIService
	parentId   int32
	clientId   *string
	conversion *Conversion
}

func (r ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest) ClientId(clientId string) ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest) Conversion(conversion Conversion) ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest {
	r.conversion = &conversion
	return r
}

func (r ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest) Execute() (*Conversion, *http.Response, error) {
	return r.ApiService.PostProcurementUnitOfMeasuresByParentIdConversionsExecute(r)
}

/*
PostProcurementUnitOfMeasuresByParentIdConversions Post Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId unitOfMeasureId
	@return ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest
*/
func (a *UnitOfMeasureConversionsAPIService) PostProcurementUnitOfMeasuresByParentIdConversions(ctx context.Context, parentId int32) ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest {
	return ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Conversion
func (a *UnitOfMeasureConversionsAPIService) PostProcurementUnitOfMeasuresByParentIdConversionsExecute(r ApiPostProcurementUnitOfMeasuresByParentIdConversionsRequest) (*Conversion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Conversion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.PostProcurementUnitOfMeasuresByParentIdConversions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.conversion == nil {
		return localVarReturnValue, nil, reportError("conversion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.conversion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest struct {
	ctx        context.Context
	ApiService *UnitOfMeasureConversionsAPIService
	id         int32
	parentId   int32
	clientId   *string
	conversion *Conversion
}

func (r ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) ClientId(clientId string) ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Conversion(conversion Conversion) ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	r.conversion = &conversion
	return r
}

func (r ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) Execute() (*Conversion, *http.Response, error) {
	return r.ApiService.PutProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r)
}

/*
PutProcurementUnitOfMeasuresByParentIdConversionsById Put Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id conversionId
	@param parentId unitOfMeasureId
	@return ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest
*/
func (a *UnitOfMeasureConversionsAPIService) PutProcurementUnitOfMeasuresByParentIdConversionsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest {
	return ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Conversion
func (a *UnitOfMeasureConversionsAPIService) PutProcurementUnitOfMeasuresByParentIdConversionsByIdExecute(r ApiPutProcurementUnitOfMeasuresByParentIdConversionsByIdRequest) (*Conversion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Conversion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasureConversionsAPIService.PutProcurementUnitOfMeasuresByParentIdConversionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{parentId}/conversions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.conversion == nil {
		return localVarReturnValue, nil, reportError("conversion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.conversion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
