/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// WarehousesAPIService WarehousesAPI service
type WarehousesAPIService service

type ApiDeleteProcurementWarehousesByIdRequest struct {
	ctx        context.Context
	ApiService *WarehousesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteProcurementWarehousesByIdRequest) ClientId(clientId string) ApiDeleteProcurementWarehousesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementWarehousesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementWarehousesByIdExecute(r)
}

/*
DeleteProcurementWarehousesById Delete Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id warehousId
	@return ApiDeleteProcurementWarehousesByIdRequest
*/
func (a *WarehousesAPIService) DeleteProcurementWarehousesById(ctx context.Context, id int32) ApiDeleteProcurementWarehousesByIdRequest {
	return ApiDeleteProcurementWarehousesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *WarehousesAPIService) DeleteProcurementWarehousesByIdExecute(r ApiDeleteProcurementWarehousesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.DeleteProcurementWarehousesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementWarehousesRequest struct {
	ctx                   context.Context
	ApiService            *WarehousesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementWarehousesRequest) ClientId(clientId string) ApiGetProcurementWarehousesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementWarehousesRequest) Conditions(conditions string) ApiGetProcurementWarehousesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementWarehousesRequest) ChildConditions(childConditions string) ApiGetProcurementWarehousesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementWarehousesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementWarehousesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementWarehousesRequest) OrderBy(orderBy string) ApiGetProcurementWarehousesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementWarehousesRequest) Fields(fields string) ApiGetProcurementWarehousesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementWarehousesRequest) Page(page int32) ApiGetProcurementWarehousesRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementWarehousesRequest) PageSize(pageSize int32) ApiGetProcurementWarehousesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementWarehousesRequest) PageId(pageId int32) ApiGetProcurementWarehousesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementWarehousesRequest) Execute() ([]Warehouse, *http.Response, error) {
	return r.ApiService.GetProcurementWarehousesExecute(r)
}

/*
GetProcurementWarehouses Get List of Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementWarehousesRequest
*/
func (a *WarehousesAPIService) GetProcurementWarehouses(ctx context.Context) ApiGetProcurementWarehousesRequest {
	return ApiGetProcurementWarehousesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Warehouse
func (a *WarehousesAPIService) GetProcurementWarehousesExecute(r ApiGetProcurementWarehousesRequest) ([]Warehouse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Warehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.GetProcurementWarehouses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementWarehousesByIdRequest struct {
	ctx                   context.Context
	ApiService            *WarehousesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementWarehousesByIdRequest) ClientId(clientId string) ApiGetProcurementWarehousesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) Conditions(conditions string) ApiGetProcurementWarehousesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementWarehousesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementWarehousesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) OrderBy(orderBy string) ApiGetProcurementWarehousesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) Fields(fields string) ApiGetProcurementWarehousesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) Page(page int32) ApiGetProcurementWarehousesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) PageSize(pageSize int32) ApiGetProcurementWarehousesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) PageId(pageId int32) ApiGetProcurementWarehousesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementWarehousesByIdRequest) Execute() (*Warehouse, *http.Response, error) {
	return r.ApiService.GetProcurementWarehousesByIdExecute(r)
}

/*
GetProcurementWarehousesById Get Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id warehousId
	@return ApiGetProcurementWarehousesByIdRequest
*/
func (a *WarehousesAPIService) GetProcurementWarehousesById(ctx context.Context, id int32) ApiGetProcurementWarehousesByIdRequest {
	return ApiGetProcurementWarehousesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Warehouse
func (a *WarehousesAPIService) GetProcurementWarehousesByIdExecute(r ApiGetProcurementWarehousesByIdRequest) (*Warehouse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Warehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.GetProcurementWarehousesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementWarehousesCountRequest struct {
	ctx                   context.Context
	ApiService            *WarehousesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementWarehousesCountRequest) ClientId(clientId string) ApiGetProcurementWarehousesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) Conditions(conditions string) ApiGetProcurementWarehousesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) ChildConditions(childConditions string) ApiGetProcurementWarehousesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementWarehousesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) OrderBy(orderBy string) ApiGetProcurementWarehousesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) Fields(fields string) ApiGetProcurementWarehousesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) Page(page int32) ApiGetProcurementWarehousesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) PageSize(pageSize int32) ApiGetProcurementWarehousesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) PageId(pageId int32) ApiGetProcurementWarehousesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementWarehousesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementWarehousesCountExecute(r)
}

/*
GetProcurementWarehousesCount Get Count of Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProcurementWarehousesCountRequest
*/
func (a *WarehousesAPIService) GetProcurementWarehousesCount(ctx context.Context) ApiGetProcurementWarehousesCountRequest {
	return ApiGetProcurementWarehousesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *WarehousesAPIService) GetProcurementWarehousesCountExecute(r ApiGetProcurementWarehousesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.GetProcurementWarehousesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementWarehousesByIdRequest struct {
	ctx            context.Context
	ApiService     *WarehousesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementWarehousesByIdRequest) ClientId(clientId string) ApiPatchProcurementWarehousesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementWarehousesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementWarehousesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementWarehousesByIdRequest) Execute() (*Warehouse, *http.Response, error) {
	return r.ApiService.PatchProcurementWarehousesByIdExecute(r)
}

/*
PatchProcurementWarehousesById Patch Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id warehousId
	@return ApiPatchProcurementWarehousesByIdRequest
*/
func (a *WarehousesAPIService) PatchProcurementWarehousesById(ctx context.Context, id int32) ApiPatchProcurementWarehousesByIdRequest {
	return ApiPatchProcurementWarehousesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Warehouse
func (a *WarehousesAPIService) PatchProcurementWarehousesByIdExecute(r ApiPatchProcurementWarehousesByIdRequest) (*Warehouse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Warehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.PatchProcurementWarehousesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementWarehousesRequest struct {
	ctx        context.Context
	ApiService *WarehousesAPIService
	clientId   *string
	warehouse  *Warehouse
}

func (r ApiPostProcurementWarehousesRequest) ClientId(clientId string) ApiPostProcurementWarehousesRequest {
	r.clientId = &clientId
	return r
}

// warehouse
func (r ApiPostProcurementWarehousesRequest) Warehouse(warehouse Warehouse) ApiPostProcurementWarehousesRequest {
	r.warehouse = &warehouse
	return r
}

func (r ApiPostProcurementWarehousesRequest) Execute() (*Warehouse, *http.Response, error) {
	return r.ApiService.PostProcurementWarehousesExecute(r)
}

/*
PostProcurementWarehouses Post Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostProcurementWarehousesRequest
*/
func (a *WarehousesAPIService) PostProcurementWarehouses(ctx context.Context) ApiPostProcurementWarehousesRequest {
	return ApiPostProcurementWarehousesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Warehouse
func (a *WarehousesAPIService) PostProcurementWarehousesExecute(r ApiPostProcurementWarehousesRequest) (*Warehouse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Warehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.PostProcurementWarehouses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.warehouse == nil {
		return localVarReturnValue, nil, reportError("warehouse is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.warehouse
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementWarehousesByIdRequest struct {
	ctx        context.Context
	ApiService *WarehousesAPIService
	id         int32
	clientId   *string
	warehouse  *Warehouse
}

func (r ApiPutProcurementWarehousesByIdRequest) ClientId(clientId string) ApiPutProcurementWarehousesByIdRequest {
	r.clientId = &clientId
	return r
}

// warehouse
func (r ApiPutProcurementWarehousesByIdRequest) Warehouse(warehouse Warehouse) ApiPutProcurementWarehousesByIdRequest {
	r.warehouse = &warehouse
	return r
}

func (r ApiPutProcurementWarehousesByIdRequest) Execute() (*Warehouse, *http.Response, error) {
	return r.ApiService.PutProcurementWarehousesByIdExecute(r)
}

/*
PutProcurementWarehousesById Put Warehouse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id warehousId
	@return ApiPutProcurementWarehousesByIdRequest
*/
func (a *WarehousesAPIService) PutProcurementWarehousesById(ctx context.Context, id int32) ApiPutProcurementWarehousesByIdRequest {
	return ApiPutProcurementWarehousesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Warehouse
func (a *WarehousesAPIService) PutProcurementWarehousesByIdExecute(r ApiPutProcurementWarehousesByIdRequest) (*Warehouse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Warehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WarehousesAPIService.PutProcurementWarehousesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.warehouse == nil {
		return localVarReturnValue, nil, reportError("warehouse is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.warehouse
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
