/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// WorkTypeInfosAPIService WorkTypeInfosAPI service
type WorkTypeInfosAPIService service

type ApiGetTimeWorkTypesByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *WorkTypeInfosAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) ClientId(clientId string) ApiGetTimeWorkTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) Conditions(conditions string) ApiGetTimeWorkTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) Fields(fields string) ApiGetTimeWorkTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) Page(page int32) ApiGetTimeWorkTypesByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) PageId(pageId int32) ApiGetTimeWorkTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesByIdInfoRequest) Execute() (*WorkTypeInfo, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesByIdInfoExecute(r)
}

/*
GetTimeWorkTypesByIdInfo Get WorkTypeInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id WorkTypeInfoId
	@return ApiGetTimeWorkTypesByIdInfoRequest
*/
func (a *WorkTypeInfosAPIService) GetTimeWorkTypesByIdInfo(ctx context.Context, id int32) ApiGetTimeWorkTypesByIdInfoRequest {
	return ApiGetTimeWorkTypesByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return WorkTypeInfo
func (a *WorkTypeInfosAPIService) GetTimeWorkTypesByIdInfoExecute(r ApiGetTimeWorkTypesByIdInfoRequest) (*WorkTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypeInfosAPIService.GetTimeWorkTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesInfoRequest struct {
	ctx                   context.Context
	ApiService            *WorkTypeInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetTimeWorkTypesInfoRequest) ClientId(clientId string) ApiGetTimeWorkTypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) Conditions(conditions string) ApiGetTimeWorkTypesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) Fields(fields string) ApiGetTimeWorkTypesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) Page(page int32) ApiGetTimeWorkTypesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) PageId(pageId int32) ApiGetTimeWorkTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesInfoRequest) Execute() ([]WorkTypeInfo, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesInfoExecute(r)
}

/*
GetTimeWorkTypesInfo Get List of WorkTypeInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTimeWorkTypesInfoRequest
*/
func (a *WorkTypeInfosAPIService) GetTimeWorkTypesInfo(ctx context.Context) ApiGetTimeWorkTypesInfoRequest {
	return ApiGetTimeWorkTypesInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []WorkTypeInfo
func (a *WorkTypeInfosAPIService) GetTimeWorkTypesInfoExecute(r ApiGetTimeWorkTypesInfoRequest) ([]WorkTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WorkTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypeInfosAPIService.GetTimeWorkTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *WorkTypeInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetTimeWorkTypesInfoCountRequest) ClientId(clientId string) ApiGetTimeWorkTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) Conditions(conditions string) ApiGetTimeWorkTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) Fields(fields string) ApiGetTimeWorkTypesInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) Page(page int32) ApiGetTimeWorkTypesInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) PageId(pageId int32) ApiGetTimeWorkTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesInfoCountExecute(r)
}

/*
GetTimeWorkTypesInfoCount Get Count of WorkTypeInfos

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTimeWorkTypesInfoCountRequest
*/
func (a *WorkTypeInfosAPIService) GetTimeWorkTypesInfoCount(ctx context.Context) ApiGetTimeWorkTypesInfoCountRequest {
	return ApiGetTimeWorkTypesInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *WorkTypeInfosAPIService) GetTimeWorkTypesInfoCountExecute(r ApiGetTimeWorkTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypeInfosAPIService.GetTimeWorkTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
