/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// WorkflowNotifyTypesAPIService WorkflowNotifyTypesAPI service
type WorkflowNotifyTypesAPIService service

type ApiGetSystemWorkflowsByParentIdNotifyTypesRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) Execute() ([]WorkflowNotifyType, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdNotifyTypesExecute(r)
}

/*
GetSystemWorkflowsByParentIdNotifyTypes Get List of WorkflowNotifyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId workflowId
	@return ApiGetSystemWorkflowsByParentIdNotifyTypesRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypes(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesRequest {
	return ApiGetSystemWorkflowsByParentIdNotifyTypesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []WorkflowNotifyType
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesExecute(r ApiGetSystemWorkflowsByParentIdNotifyTypesRequest) ([]WorkflowNotifyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WorkflowNotifyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsByParentIdNotifyTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/notifyTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) Execute() (*WorkflowNotifyType, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdNotifyTypesByIdExecute(r)
}

/*
GetSystemWorkflowsByParentIdNotifyTypesById Get WorkflowNotifyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notifyTypeId
	@param parentId workflowId
	@return ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesById(ctx context.Context, id int32, parentId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest {
	return ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return WorkflowNotifyType
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesByIdExecute(r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdRequest) (*WorkflowNotifyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowNotifyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsByParentIdNotifyTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/notifyTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) Execute() (*WorkflowNotifyTypeInfo, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdNotifyTypesByIdInfoExecute(r)
}

/*
GetSystemWorkflowsByParentIdNotifyTypesByIdInfo Get WorkflowNotifyTypeInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notifyTypeId
	@param parentId workflowId
	@return ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesByIdInfo(ctx context.Context, id int32, parentId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest {
	return ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return WorkflowNotifyTypeInfo
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesByIdInfoExecute(r ApiGetSystemWorkflowsByParentIdNotifyTypesByIdInfoRequest) (*WorkflowNotifyTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowNotifyTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsByParentIdNotifyTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/notifyTypes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdNotifyTypesCountExecute(r)
}

/*
GetSystemWorkflowsByParentIdNotifyTypesCount Get Count of WorkflowNotifyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId workflowId
	@return ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesCount(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest {
	return ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesCountExecute(r ApiGetSystemWorkflowsByParentIdNotifyTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsByParentIdNotifyTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/notifyTypes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) Execute() ([]WorkflowNotifyTypeInfo, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdNotifyTypesInfoExecute(r)
}

/*
GetSystemWorkflowsByParentIdNotifyTypesInfo Get List of WorkflowNotifyTypeInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId workflowId
	@return ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesInfo(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest {
	return ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []WorkflowNotifyTypeInfo
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesInfoExecute(r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoRequest) ([]WorkflowNotifyTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WorkflowNotifyTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsByParentIdNotifyTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/notifyTypes/info"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdNotifyTypesInfoCountExecute(r)
}

/*
GetSystemWorkflowsByParentIdNotifyTypesInfoCount Get Count of WorkflowNotifyTypeInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId workflowId
	@return ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesInfoCount(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest {
	return ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsByParentIdNotifyTypesInfoCountExecute(r ApiGetSystemWorkflowsByParentIdNotifyTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsByParentIdNotifyTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/notifyTypes/info/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsNotifyTypesRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) ClientId(clientId string) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) Conditions(conditions string) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) Fields(fields string) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) Page(page int32) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) PageId(pageId int32) ApiGetSystemWorkflowsNotifyTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesRequest) Execute() ([]WorkflowNotifyType, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsNotifyTypesExecute(r)
}

/*
GetSystemWorkflowsNotifyTypes Get List of WorkflowNotifyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemWorkflowsNotifyTypesRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsNotifyTypes(ctx context.Context) ApiGetSystemWorkflowsNotifyTypesRequest {
	return ApiGetSystemWorkflowsNotifyTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []WorkflowNotifyType
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsNotifyTypesExecute(r ApiGetSystemWorkflowsNotifyTypesRequest) ([]WorkflowNotifyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WorkflowNotifyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsNotifyTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/notifyTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsNotifyTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowNotifyTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) Fields(fields string) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) Page(page int32) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsNotifyTypesByIdRequest) Execute() ([]WorkflowNotifyType, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsNotifyTypesByIdExecute(r)
}

/*
GetSystemWorkflowsNotifyTypesById Get WorkflowNotifyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notifyTypeId
	@return ApiGetSystemWorkflowsNotifyTypesByIdRequest
*/
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsNotifyTypesById(ctx context.Context, id int32) ApiGetSystemWorkflowsNotifyTypesByIdRequest {
	return ApiGetSystemWorkflowsNotifyTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []WorkflowNotifyType
func (a *WorkflowNotifyTypesAPIService) GetSystemWorkflowsNotifyTypesByIdExecute(r ApiGetSystemWorkflowsNotifyTypesByIdRequest) ([]WorkflowNotifyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WorkflowNotifyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowNotifyTypesAPIService.GetSystemWorkflowsNotifyTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/notifyTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
