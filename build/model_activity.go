/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Activity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Activity{}

// Activity struct for Activity
type Activity struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Name    string                 `json:"name"`
	Type    *ActivityTypeReference `json:"type,omitempty"`
	Company *CompanyReference      `json:"company,omitempty"`
	Contact *ContactReference      `json:"contact,omitempty"`
	//  Max length: 30;
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	//  Max length: 250;
	Email          *string                   `json:"email,omitempty"`
	Status         *ActivityStatusReference  `json:"status,omitempty"`
	Opportunity    *OpportunityReference     `json:"opportunity,omitempty"`
	Ticket         *TicketReference          `json:"ticket,omitempty"`
	Agreement      *AgreementReference       `json:"agreement,omitempty"`
	Campaign       *CampaignReference        `json:"campaign,omitempty"`
	Notes          *string                   `json:"notes,omitempty"`
	DateStart      *time.Time                `json:"dateStart,omitempty"`
	DateEnd        *time.Time                `json:"dateEnd,omitempty"`
	AssignedBy     *MemberReference          `json:"assignedBy,omitempty"`
	AssignTo       MemberReference           `json:"assignTo"`
	ScheduleStatus *ScheduleStatusReference  `json:"scheduleStatus,omitempty"`
	Reminder       *ReminderReference        `json:"reminder,omitempty"`
	Where          *ServiceLocationReference `json:"where,omitempty"`
	NotifyFlag     NullableBool              `json:"notifyFlag,omitempty"`
	MobileGuid     NullableString            `json:"mobileGuid,omitempty"`
	Currency       *CurrencyReference        `json:"currency,omitempty"`
	Info           *map[string]string        `json:"_info,omitempty"`
	CustomFields   []CustomFieldValue        `json:"customFields,omitempty"`
}

type _Activity Activity

// NewActivity instantiates a new Activity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivity(name string, assignTo MemberReference) *Activity {
	this := Activity{}
	this.Name = name
	this.AssignTo = assignTo
	return &this
}

// NewActivityWithDefaults instantiates a new Activity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityWithDefaults() *Activity {
	this := Activity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Activity) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Activity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Activity) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Activity) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Activity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Activity) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Activity) GetType() ActivityTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ActivityTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetTypeOk() (*ActivityTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Activity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ActivityTypeReference and assigns it to the Type field.
func (o *Activity) SetType(v ActivityTypeReference) {
	o.Type = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *Activity) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *Activity) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *Activity) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Activity) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Activity) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *Activity) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *Activity) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *Activity) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *Activity) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Activity) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Activity) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Activity) SetEmail(v string) {
	o.Email = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Activity) GetStatus() ActivityStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ActivityStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetStatusOk() (*ActivityStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Activity) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ActivityStatusReference and assigns it to the Status field.
func (o *Activity) SetStatus(v ActivityStatusReference) {
	o.Status = &v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *Activity) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *Activity) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *Activity) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *Activity) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *Activity) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *Activity) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *Activity) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *Activity) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *Activity) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *Activity) GetCampaign() CampaignReference {
	if o == nil || IsNil(o.Campaign) {
		var ret CampaignReference
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetCampaignOk() (*CampaignReference, bool) {
	if o == nil || IsNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *Activity) HasCampaign() bool {
	if o != nil && !IsNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given CampaignReference and assigns it to the Campaign field.
func (o *Activity) SetCampaign(v CampaignReference) {
	o.Campaign = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Activity) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Activity) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Activity) SetNotes(v string) {
	o.Notes = &v
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *Activity) GetDateStart() time.Time {
	if o == nil || IsNil(o.DateStart) {
		var ret time.Time
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetDateStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *Activity) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given time.Time and assigns it to the DateStart field.
func (o *Activity) SetDateStart(v time.Time) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *Activity) GetDateEnd() time.Time {
	if o == nil || IsNil(o.DateEnd) {
		var ret time.Time
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetDateEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *Activity) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given time.Time and assigns it to the DateEnd field.
func (o *Activity) SetDateEnd(v time.Time) {
	o.DateEnd = &v
}

// GetAssignedBy returns the AssignedBy field value if set, zero value otherwise.
func (o *Activity) GetAssignedBy() MemberReference {
	if o == nil || IsNil(o.AssignedBy) {
		var ret MemberReference
		return ret
	}
	return *o.AssignedBy
}

// GetAssignedByOk returns a tuple with the AssignedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetAssignedByOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.AssignedBy) {
		return nil, false
	}
	return o.AssignedBy, true
}

// HasAssignedBy returns a boolean if a field has been set.
func (o *Activity) HasAssignedBy() bool {
	if o != nil && !IsNil(o.AssignedBy) {
		return true
	}

	return false
}

// SetAssignedBy gets a reference to the given MemberReference and assigns it to the AssignedBy field.
func (o *Activity) SetAssignedBy(v MemberReference) {
	o.AssignedBy = &v
}

// GetAssignTo returns the AssignTo field value
func (o *Activity) GetAssignTo() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.AssignTo
}

// GetAssignToOk returns a tuple with the AssignTo field value
// and a boolean to check if the value has been set.
func (o *Activity) GetAssignToOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignTo, true
}

// SetAssignTo sets field value
func (o *Activity) SetAssignTo(v MemberReference) {
	o.AssignTo = v
}

// GetScheduleStatus returns the ScheduleStatus field value if set, zero value otherwise.
func (o *Activity) GetScheduleStatus() ScheduleStatusReference {
	if o == nil || IsNil(o.ScheduleStatus) {
		var ret ScheduleStatusReference
		return ret
	}
	return *o.ScheduleStatus
}

// GetScheduleStatusOk returns a tuple with the ScheduleStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetScheduleStatusOk() (*ScheduleStatusReference, bool) {
	if o == nil || IsNil(o.ScheduleStatus) {
		return nil, false
	}
	return o.ScheduleStatus, true
}

// HasScheduleStatus returns a boolean if a field has been set.
func (o *Activity) HasScheduleStatus() bool {
	if o != nil && !IsNil(o.ScheduleStatus) {
		return true
	}

	return false
}

// SetScheduleStatus gets a reference to the given ScheduleStatusReference and assigns it to the ScheduleStatus field.
func (o *Activity) SetScheduleStatus(v ScheduleStatusReference) {
	o.ScheduleStatus = &v
}

// GetReminder returns the Reminder field value if set, zero value otherwise.
func (o *Activity) GetReminder() ReminderReference {
	if o == nil || IsNil(o.Reminder) {
		var ret ReminderReference
		return ret
	}
	return *o.Reminder
}

// GetReminderOk returns a tuple with the Reminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetReminderOk() (*ReminderReference, bool) {
	if o == nil || IsNil(o.Reminder) {
		return nil, false
	}
	return o.Reminder, true
}

// HasReminder returns a boolean if a field has been set.
func (o *Activity) HasReminder() bool {
	if o != nil && !IsNil(o.Reminder) {
		return true
	}

	return false
}

// SetReminder gets a reference to the given ReminderReference and assigns it to the Reminder field.
func (o *Activity) SetReminder(v ReminderReference) {
	o.Reminder = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *Activity) GetWhere() ServiceLocationReference {
	if o == nil || IsNil(o.Where) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetWhereOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.Where) {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *Activity) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given ServiceLocationReference and assigns it to the Where field.
func (o *Activity) SetWhere(v ServiceLocationReference) {
	o.Where = &v
}

// GetNotifyFlag returns the NotifyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Activity) GetNotifyFlag() bool {
	if o == nil || IsNil(o.NotifyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NotifyFlag.Get()
}

// GetNotifyFlagOk returns a tuple with the NotifyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Activity) GetNotifyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotifyFlag.Get(), o.NotifyFlag.IsSet()
}

// HasNotifyFlag returns a boolean if a field has been set.
func (o *Activity) HasNotifyFlag() bool {
	if o != nil && o.NotifyFlag.IsSet() {
		return true
	}

	return false
}

// SetNotifyFlag gets a reference to the given NullableBool and assigns it to the NotifyFlag field.
func (o *Activity) SetNotifyFlag(v bool) {
	o.NotifyFlag.Set(&v)
}

// SetNotifyFlagNil sets the value for NotifyFlag to be an explicit nil
func (o *Activity) SetNotifyFlagNil() {
	o.NotifyFlag.Set(nil)
}

// UnsetNotifyFlag ensures that no value is present for NotifyFlag, not even an explicit nil
func (o *Activity) UnsetNotifyFlag() {
	o.NotifyFlag.Unset()
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Activity) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Activity) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *Activity) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *Activity) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}

// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *Activity) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *Activity) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Activity) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Activity) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Activity) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Activity) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Activity) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Activity) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Activity) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Activity) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Activity) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Activity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Activity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.DateStart) {
		toSerialize["dateStart"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["dateEnd"] = o.DateEnd
	}
	if !IsNil(o.AssignedBy) {
		toSerialize["assignedBy"] = o.AssignedBy
	}
	toSerialize["assignTo"] = o.AssignTo
	if !IsNil(o.ScheduleStatus) {
		toSerialize["scheduleStatus"] = o.ScheduleStatus
	}
	if !IsNil(o.Reminder) {
		toSerialize["reminder"] = o.Reminder
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}
	if o.NotifyFlag.IsSet() {
		toSerialize["notifyFlag"] = o.NotifyFlag.Get()
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Activity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"assignTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivity := _Activity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivity)

	if err != nil {
		return err
	}

	*o = Activity(varActivity)

	return err
}

type NullableActivity struct {
	value *Activity
	isSet bool
}

func (v NullableActivity) Get() *Activity {
	return v.value
}

func (v *NullableActivity) Set(val *Activity) {
	v.value = val
	v.isSet = true
}

func (v NullableActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivity(val *Activity) *NullableActivity {
	return &NullableActivity{value: val, isSet: true}
}

func (v NullableActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
