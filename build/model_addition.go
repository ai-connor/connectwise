/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Addition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Addition{}

// Addition struct for Addition
type Addition struct {
	Id            *int32          `json:"id,omitempty"`
	Product       IvItemReference `json:"product"`
	Quantity      NullableFloat64 `json:"quantity,omitempty"`
	LessIncluded  NullableFloat64 `json:"lessIncluded,omitempty"`
	UnitPrice     NullableFloat64 `json:"unitPrice,omitempty"`
	UnitCost      NullableFloat64 `json:"unitCost,omitempty"`
	BillCustomer  NullableString  `json:"billCustomer"`
	EffectiveDate *time.Time      `json:"effectiveDate,omitempty"`
	CancelledDate *time.Time      `json:"cancelledDate,omitempty"`
	TaxableFlag   NullableBool    `json:"taxableFlag,omitempty"`
	//  Max length: 50;
	SerialNumber *string `json:"serialNumber,omitempty"`
	//  Max length: 6000;
	InvoiceDescription       *string                   `json:"invoiceDescription,omitempty"`
	PurchaseItemFlag         NullableBool              `json:"purchaseItemFlag,omitempty"`
	SpecialOrderFlag         NullableBool              `json:"specialOrderFlag,omitempty"`
	AgreementId              NullableInt32             `json:"agreementId,omitempty"`
	Description              *string                   `json:"description,omitempty"`
	BilledQuantity           NullableFloat64           `json:"billedQuantity,omitempty"`
	Uom                      *string                   `json:"uom,omitempty"`
	ExtPrice                 NullableFloat64           `json:"extPrice,omitempty"`
	ExtCost                  NullableFloat64           `json:"extCost,omitempty"`
	SequenceNumber           NullableFloat64           `json:"sequenceNumber,omitempty"`
	Margin                   NullableFloat64           `json:"margin,omitempty"`
	ProrateCost              NullableFloat64           `json:"prorateCost,omitempty"`
	ProratePrice             NullableFloat64           `json:"proratePrice,omitempty"`
	ExtendedProrateCost      NullableFloat64           `json:"extendedProrateCost,omitempty"`
	ExtendedProratePrice     NullableFloat64           `json:"extendedProratePrice,omitempty"`
	ProrateCurrentPeriodFlag NullableBool              `json:"prorateCurrentPeriodFlag,omitempty"`
	Opportunity              *OpportunityReference     `json:"opportunity,omitempty"`
	AgreementStatus          NullableString            `json:"agreementStatus,omitempty"`
	InvoiceGrouping          *InvoiceGroupingReference `json:"invoiceGrouping,omitempty"`
	Info                     *map[string]string        `json:"_info,omitempty"`
	CustomFields             []CustomFieldValue        `json:"customFields,omitempty"`
}

type _Addition Addition

// NewAddition instantiates a new Addition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddition(product IvItemReference, billCustomer NullableString) *Addition {
	this := Addition{}
	this.Product = product
	this.BillCustomer = billCustomer
	return &this
}

// NewAdditionWithDefaults instantiates a new Addition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionWithDefaults() *Addition {
	this := Addition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Addition) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Addition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Addition) SetId(v int32) {
	o.Id = &v
}

// GetProduct returns the Product field value
func (o *Addition) GetProduct() IvItemReference {
	if o == nil {
		var ret IvItemReference
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *Addition) GetProductOk() (*IvItemReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *Addition) SetProduct(v IvItemReference) {
	o.Product = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float64
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *Addition) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat64 and assigns it to the Quantity field.
func (o *Addition) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}

// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *Addition) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *Addition) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetLessIncluded returns the LessIncluded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetLessIncluded() float64 {
	if o == nil || IsNil(o.LessIncluded.Get()) {
		var ret float64
		return ret
	}
	return *o.LessIncluded.Get()
}

// GetLessIncludedOk returns a tuple with the LessIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetLessIncludedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LessIncluded.Get(), o.LessIncluded.IsSet()
}

// HasLessIncluded returns a boolean if a field has been set.
func (o *Addition) HasLessIncluded() bool {
	if o != nil && o.LessIncluded.IsSet() {
		return true
	}

	return false
}

// SetLessIncluded gets a reference to the given NullableFloat64 and assigns it to the LessIncluded field.
func (o *Addition) SetLessIncluded(v float64) {
	o.LessIncluded.Set(&v)
}

// SetLessIncludedNil sets the value for LessIncluded to be an explicit nil
func (o *Addition) SetLessIncludedNil() {
	o.LessIncluded.Set(nil)
}

// UnsetLessIncluded ensures that no value is present for LessIncluded, not even an explicit nil
func (o *Addition) UnsetLessIncluded() {
	o.LessIncluded.Unset()
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetUnitPrice() float64 {
	if o == nil || IsNil(o.UnitPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.UnitPrice.Get()
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetUnitPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitPrice.Get(), o.UnitPrice.IsSet()
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *Addition) HasUnitPrice() bool {
	if o != nil && o.UnitPrice.IsSet() {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given NullableFloat64 and assigns it to the UnitPrice field.
func (o *Addition) SetUnitPrice(v float64) {
	o.UnitPrice.Set(&v)
}

// SetUnitPriceNil sets the value for UnitPrice to be an explicit nil
func (o *Addition) SetUnitPriceNil() {
	o.UnitPrice.Set(nil)
}

// UnsetUnitPrice ensures that no value is present for UnitPrice, not even an explicit nil
func (o *Addition) UnsetUnitPrice() {
	o.UnitPrice.Unset()
}

// GetUnitCost returns the UnitCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetUnitCost() float64 {
	if o == nil || IsNil(o.UnitCost.Get()) {
		var ret float64
		return ret
	}
	return *o.UnitCost.Get()
}

// GetUnitCostOk returns a tuple with the UnitCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetUnitCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitCost.Get(), o.UnitCost.IsSet()
}

// HasUnitCost returns a boolean if a field has been set.
func (o *Addition) HasUnitCost() bool {
	if o != nil && o.UnitCost.IsSet() {
		return true
	}

	return false
}

// SetUnitCost gets a reference to the given NullableFloat64 and assigns it to the UnitCost field.
func (o *Addition) SetUnitCost(v float64) {
	o.UnitCost.Set(&v)
}

// SetUnitCostNil sets the value for UnitCost to be an explicit nil
func (o *Addition) SetUnitCostNil() {
	o.UnitCost.Set(nil)
}

// UnsetUnitCost ensures that no value is present for UnitCost, not even an explicit nil
func (o *Addition) UnsetUnitCost() {
	o.UnitCost.Unset()
}

// GetBillCustomer returns the BillCustomer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Addition) GetBillCustomer() string {
	if o == nil || o.BillCustomer.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillCustomer.Get()
}

// GetBillCustomerOk returns a tuple with the BillCustomer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetBillCustomerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillCustomer.Get(), o.BillCustomer.IsSet()
}

// SetBillCustomer sets field value
func (o *Addition) SetBillCustomer(v string) {
	o.BillCustomer.Set(&v)
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *Addition) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *Addition) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *Addition) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetCancelledDate returns the CancelledDate field value if set, zero value otherwise.
func (o *Addition) GetCancelledDate() time.Time {
	if o == nil || IsNil(o.CancelledDate) {
		var ret time.Time
		return ret
	}
	return *o.CancelledDate
}

// GetCancelledDateOk returns a tuple with the CancelledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetCancelledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelledDate) {
		return nil, false
	}
	return o.CancelledDate, true
}

// HasCancelledDate returns a boolean if a field has been set.
func (o *Addition) HasCancelledDate() bool {
	if o != nil && !IsNil(o.CancelledDate) {
		return true
	}

	return false
}

// SetCancelledDate gets a reference to the given time.Time and assigns it to the CancelledDate field.
func (o *Addition) SetCancelledDate(v time.Time) {
	o.CancelledDate = &v
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *Addition) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *Addition) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}

// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *Addition) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *Addition) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *Addition) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Addition) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *Addition) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetInvoiceDescription returns the InvoiceDescription field value if set, zero value otherwise.
func (o *Addition) GetInvoiceDescription() string {
	if o == nil || IsNil(o.InvoiceDescription) {
		var ret string
		return ret
	}
	return *o.InvoiceDescription
}

// GetInvoiceDescriptionOk returns a tuple with the InvoiceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetInvoiceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDescription) {
		return nil, false
	}
	return o.InvoiceDescription, true
}

// HasInvoiceDescription returns a boolean if a field has been set.
func (o *Addition) HasInvoiceDescription() bool {
	if o != nil && !IsNil(o.InvoiceDescription) {
		return true
	}

	return false
}

// SetInvoiceDescription gets a reference to the given string and assigns it to the InvoiceDescription field.
func (o *Addition) SetInvoiceDescription(v string) {
	o.InvoiceDescription = &v
}

// GetPurchaseItemFlag returns the PurchaseItemFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetPurchaseItemFlag() bool {
	if o == nil || IsNil(o.PurchaseItemFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PurchaseItemFlag.Get()
}

// GetPurchaseItemFlagOk returns a tuple with the PurchaseItemFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetPurchaseItemFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseItemFlag.Get(), o.PurchaseItemFlag.IsSet()
}

// HasPurchaseItemFlag returns a boolean if a field has been set.
func (o *Addition) HasPurchaseItemFlag() bool {
	if o != nil && o.PurchaseItemFlag.IsSet() {
		return true
	}

	return false
}

// SetPurchaseItemFlag gets a reference to the given NullableBool and assigns it to the PurchaseItemFlag field.
func (o *Addition) SetPurchaseItemFlag(v bool) {
	o.PurchaseItemFlag.Set(&v)
}

// SetPurchaseItemFlagNil sets the value for PurchaseItemFlag to be an explicit nil
func (o *Addition) SetPurchaseItemFlagNil() {
	o.PurchaseItemFlag.Set(nil)
}

// UnsetPurchaseItemFlag ensures that no value is present for PurchaseItemFlag, not even an explicit nil
func (o *Addition) UnsetPurchaseItemFlag() {
	o.PurchaseItemFlag.Unset()
}

// GetSpecialOrderFlag returns the SpecialOrderFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetSpecialOrderFlag() bool {
	if o == nil || IsNil(o.SpecialOrderFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SpecialOrderFlag.Get()
}

// GetSpecialOrderFlagOk returns a tuple with the SpecialOrderFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetSpecialOrderFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecialOrderFlag.Get(), o.SpecialOrderFlag.IsSet()
}

// HasSpecialOrderFlag returns a boolean if a field has been set.
func (o *Addition) HasSpecialOrderFlag() bool {
	if o != nil && o.SpecialOrderFlag.IsSet() {
		return true
	}

	return false
}

// SetSpecialOrderFlag gets a reference to the given NullableBool and assigns it to the SpecialOrderFlag field.
func (o *Addition) SetSpecialOrderFlag(v bool) {
	o.SpecialOrderFlag.Set(&v)
}

// SetSpecialOrderFlagNil sets the value for SpecialOrderFlag to be an explicit nil
func (o *Addition) SetSpecialOrderFlagNil() {
	o.SpecialOrderFlag.Set(nil)
}

// UnsetSpecialOrderFlag ensures that no value is present for SpecialOrderFlag, not even an explicit nil
func (o *Addition) UnsetSpecialOrderFlag() {
	o.SpecialOrderFlag.Unset()
}

// GetAgreementId returns the AgreementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetAgreementId() int32 {
	if o == nil || IsNil(o.AgreementId.Get()) {
		var ret int32
		return ret
	}
	return *o.AgreementId.Get()
}

// GetAgreementIdOk returns a tuple with the AgreementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetAgreementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementId.Get(), o.AgreementId.IsSet()
}

// HasAgreementId returns a boolean if a field has been set.
func (o *Addition) HasAgreementId() bool {
	if o != nil && o.AgreementId.IsSet() {
		return true
	}

	return false
}

// SetAgreementId gets a reference to the given NullableInt32 and assigns it to the AgreementId field.
func (o *Addition) SetAgreementId(v int32) {
	o.AgreementId.Set(&v)
}

// SetAgreementIdNil sets the value for AgreementId to be an explicit nil
func (o *Addition) SetAgreementIdNil() {
	o.AgreementId.Set(nil)
}

// UnsetAgreementId ensures that no value is present for AgreementId, not even an explicit nil
func (o *Addition) UnsetAgreementId() {
	o.AgreementId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Addition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Addition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Addition) SetDescription(v string) {
	o.Description = &v
}

// GetBilledQuantity returns the BilledQuantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetBilledQuantity() float64 {
	if o == nil || IsNil(o.BilledQuantity.Get()) {
		var ret float64
		return ret
	}
	return *o.BilledQuantity.Get()
}

// GetBilledQuantityOk returns a tuple with the BilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetBilledQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BilledQuantity.Get(), o.BilledQuantity.IsSet()
}

// HasBilledQuantity returns a boolean if a field has been set.
func (o *Addition) HasBilledQuantity() bool {
	if o != nil && o.BilledQuantity.IsSet() {
		return true
	}

	return false
}

// SetBilledQuantity gets a reference to the given NullableFloat64 and assigns it to the BilledQuantity field.
func (o *Addition) SetBilledQuantity(v float64) {
	o.BilledQuantity.Set(&v)
}

// SetBilledQuantityNil sets the value for BilledQuantity to be an explicit nil
func (o *Addition) SetBilledQuantityNil() {
	o.BilledQuantity.Set(nil)
}

// UnsetBilledQuantity ensures that no value is present for BilledQuantity, not even an explicit nil
func (o *Addition) UnsetBilledQuantity() {
	o.BilledQuantity.Unset()
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *Addition) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *Addition) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *Addition) SetUom(v string) {
	o.Uom = &v
}

// GetExtPrice returns the ExtPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetExtPrice() float64 {
	if o == nil || IsNil(o.ExtPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtPrice.Get()
}

// GetExtPriceOk returns a tuple with the ExtPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetExtPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtPrice.Get(), o.ExtPrice.IsSet()
}

// HasExtPrice returns a boolean if a field has been set.
func (o *Addition) HasExtPrice() bool {
	if o != nil && o.ExtPrice.IsSet() {
		return true
	}

	return false
}

// SetExtPrice gets a reference to the given NullableFloat64 and assigns it to the ExtPrice field.
func (o *Addition) SetExtPrice(v float64) {
	o.ExtPrice.Set(&v)
}

// SetExtPriceNil sets the value for ExtPrice to be an explicit nil
func (o *Addition) SetExtPriceNil() {
	o.ExtPrice.Set(nil)
}

// UnsetExtPrice ensures that no value is present for ExtPrice, not even an explicit nil
func (o *Addition) UnsetExtPrice() {
	o.ExtPrice.Unset()
}

// GetExtCost returns the ExtCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetExtCost() float64 {
	if o == nil || IsNil(o.ExtCost.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtCost.Get()
}

// GetExtCostOk returns a tuple with the ExtCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetExtCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtCost.Get(), o.ExtCost.IsSet()
}

// HasExtCost returns a boolean if a field has been set.
func (o *Addition) HasExtCost() bool {
	if o != nil && o.ExtCost.IsSet() {
		return true
	}

	return false
}

// SetExtCost gets a reference to the given NullableFloat64 and assigns it to the ExtCost field.
func (o *Addition) SetExtCost(v float64) {
	o.ExtCost.Set(&v)
}

// SetExtCostNil sets the value for ExtCost to be an explicit nil
func (o *Addition) SetExtCostNil() {
	o.ExtCost.Set(nil)
}

// UnsetExtCost ensures that no value is present for ExtCost, not even an explicit nil
func (o *Addition) UnsetExtCost() {
	o.ExtCost.Unset()
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetSequenceNumber() float64 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret float64
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetSequenceNumberOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *Addition) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableFloat64 and assigns it to the SequenceNumber field.
func (o *Addition) SetSequenceNumber(v float64) {
	o.SequenceNumber.Set(&v)
}

// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *Addition) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *Addition) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetMargin returns the Margin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetMargin() float64 {
	if o == nil || IsNil(o.Margin.Get()) {
		var ret float64
		return ret
	}
	return *o.Margin.Get()
}

// GetMarginOk returns a tuple with the Margin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetMarginOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Margin.Get(), o.Margin.IsSet()
}

// HasMargin returns a boolean if a field has been set.
func (o *Addition) HasMargin() bool {
	if o != nil && o.Margin.IsSet() {
		return true
	}

	return false
}

// SetMargin gets a reference to the given NullableFloat64 and assigns it to the Margin field.
func (o *Addition) SetMargin(v float64) {
	o.Margin.Set(&v)
}

// SetMarginNil sets the value for Margin to be an explicit nil
func (o *Addition) SetMarginNil() {
	o.Margin.Set(nil)
}

// UnsetMargin ensures that no value is present for Margin, not even an explicit nil
func (o *Addition) UnsetMargin() {
	o.Margin.Unset()
}

// GetProrateCost returns the ProrateCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetProrateCost() float64 {
	if o == nil || IsNil(o.ProrateCost.Get()) {
		var ret float64
		return ret
	}
	return *o.ProrateCost.Get()
}

// GetProrateCostOk returns a tuple with the ProrateCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetProrateCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProrateCost.Get(), o.ProrateCost.IsSet()
}

// HasProrateCost returns a boolean if a field has been set.
func (o *Addition) HasProrateCost() bool {
	if o != nil && o.ProrateCost.IsSet() {
		return true
	}

	return false
}

// SetProrateCost gets a reference to the given NullableFloat64 and assigns it to the ProrateCost field.
func (o *Addition) SetProrateCost(v float64) {
	o.ProrateCost.Set(&v)
}

// SetProrateCostNil sets the value for ProrateCost to be an explicit nil
func (o *Addition) SetProrateCostNil() {
	o.ProrateCost.Set(nil)
}

// UnsetProrateCost ensures that no value is present for ProrateCost, not even an explicit nil
func (o *Addition) UnsetProrateCost() {
	o.ProrateCost.Unset()
}

// GetProratePrice returns the ProratePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetProratePrice() float64 {
	if o == nil || IsNil(o.ProratePrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ProratePrice.Get()
}

// GetProratePriceOk returns a tuple with the ProratePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetProratePriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProratePrice.Get(), o.ProratePrice.IsSet()
}

// HasProratePrice returns a boolean if a field has been set.
func (o *Addition) HasProratePrice() bool {
	if o != nil && o.ProratePrice.IsSet() {
		return true
	}

	return false
}

// SetProratePrice gets a reference to the given NullableFloat64 and assigns it to the ProratePrice field.
func (o *Addition) SetProratePrice(v float64) {
	o.ProratePrice.Set(&v)
}

// SetProratePriceNil sets the value for ProratePrice to be an explicit nil
func (o *Addition) SetProratePriceNil() {
	o.ProratePrice.Set(nil)
}

// UnsetProratePrice ensures that no value is present for ProratePrice, not even an explicit nil
func (o *Addition) UnsetProratePrice() {
	o.ProratePrice.Unset()
}

// GetExtendedProrateCost returns the ExtendedProrateCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetExtendedProrateCost() float64 {
	if o == nil || IsNil(o.ExtendedProrateCost.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtendedProrateCost.Get()
}

// GetExtendedProrateCostOk returns a tuple with the ExtendedProrateCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetExtendedProrateCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtendedProrateCost.Get(), o.ExtendedProrateCost.IsSet()
}

// HasExtendedProrateCost returns a boolean if a field has been set.
func (o *Addition) HasExtendedProrateCost() bool {
	if o != nil && o.ExtendedProrateCost.IsSet() {
		return true
	}

	return false
}

// SetExtendedProrateCost gets a reference to the given NullableFloat64 and assigns it to the ExtendedProrateCost field.
func (o *Addition) SetExtendedProrateCost(v float64) {
	o.ExtendedProrateCost.Set(&v)
}

// SetExtendedProrateCostNil sets the value for ExtendedProrateCost to be an explicit nil
func (o *Addition) SetExtendedProrateCostNil() {
	o.ExtendedProrateCost.Set(nil)
}

// UnsetExtendedProrateCost ensures that no value is present for ExtendedProrateCost, not even an explicit nil
func (o *Addition) UnsetExtendedProrateCost() {
	o.ExtendedProrateCost.Unset()
}

// GetExtendedProratePrice returns the ExtendedProratePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetExtendedProratePrice() float64 {
	if o == nil || IsNil(o.ExtendedProratePrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtendedProratePrice.Get()
}

// GetExtendedProratePriceOk returns a tuple with the ExtendedProratePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetExtendedProratePriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtendedProratePrice.Get(), o.ExtendedProratePrice.IsSet()
}

// HasExtendedProratePrice returns a boolean if a field has been set.
func (o *Addition) HasExtendedProratePrice() bool {
	if o != nil && o.ExtendedProratePrice.IsSet() {
		return true
	}

	return false
}

// SetExtendedProratePrice gets a reference to the given NullableFloat64 and assigns it to the ExtendedProratePrice field.
func (o *Addition) SetExtendedProratePrice(v float64) {
	o.ExtendedProratePrice.Set(&v)
}

// SetExtendedProratePriceNil sets the value for ExtendedProratePrice to be an explicit nil
func (o *Addition) SetExtendedProratePriceNil() {
	o.ExtendedProratePrice.Set(nil)
}

// UnsetExtendedProratePrice ensures that no value is present for ExtendedProratePrice, not even an explicit nil
func (o *Addition) UnsetExtendedProratePrice() {
	o.ExtendedProratePrice.Unset()
}

// GetProrateCurrentPeriodFlag returns the ProrateCurrentPeriodFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetProrateCurrentPeriodFlag() bool {
	if o == nil || IsNil(o.ProrateCurrentPeriodFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProrateCurrentPeriodFlag.Get()
}

// GetProrateCurrentPeriodFlagOk returns a tuple with the ProrateCurrentPeriodFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetProrateCurrentPeriodFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProrateCurrentPeriodFlag.Get(), o.ProrateCurrentPeriodFlag.IsSet()
}

// HasProrateCurrentPeriodFlag returns a boolean if a field has been set.
func (o *Addition) HasProrateCurrentPeriodFlag() bool {
	if o != nil && o.ProrateCurrentPeriodFlag.IsSet() {
		return true
	}

	return false
}

// SetProrateCurrentPeriodFlag gets a reference to the given NullableBool and assigns it to the ProrateCurrentPeriodFlag field.
func (o *Addition) SetProrateCurrentPeriodFlag(v bool) {
	o.ProrateCurrentPeriodFlag.Set(&v)
}

// SetProrateCurrentPeriodFlagNil sets the value for ProrateCurrentPeriodFlag to be an explicit nil
func (o *Addition) SetProrateCurrentPeriodFlagNil() {
	o.ProrateCurrentPeriodFlag.Set(nil)
}

// UnsetProrateCurrentPeriodFlag ensures that no value is present for ProrateCurrentPeriodFlag, not even an explicit nil
func (o *Addition) UnsetProrateCurrentPeriodFlag() {
	o.ProrateCurrentPeriodFlag.Unset()
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *Addition) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *Addition) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *Addition) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetAgreementStatus returns the AgreementStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Addition) GetAgreementStatus() string {
	if o == nil || IsNil(o.AgreementStatus.Get()) {
		var ret string
		return ret
	}
	return *o.AgreementStatus.Get()
}

// GetAgreementStatusOk returns a tuple with the AgreementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Addition) GetAgreementStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementStatus.Get(), o.AgreementStatus.IsSet()
}

// HasAgreementStatus returns a boolean if a field has been set.
func (o *Addition) HasAgreementStatus() bool {
	if o != nil && o.AgreementStatus.IsSet() {
		return true
	}

	return false
}

// SetAgreementStatus gets a reference to the given NullableString and assigns it to the AgreementStatus field.
func (o *Addition) SetAgreementStatus(v string) {
	o.AgreementStatus.Set(&v)
}

// SetAgreementStatusNil sets the value for AgreementStatus to be an explicit nil
func (o *Addition) SetAgreementStatusNil() {
	o.AgreementStatus.Set(nil)
}

// UnsetAgreementStatus ensures that no value is present for AgreementStatus, not even an explicit nil
func (o *Addition) UnsetAgreementStatus() {
	o.AgreementStatus.Unset()
}

// GetInvoiceGrouping returns the InvoiceGrouping field value if set, zero value otherwise.
func (o *Addition) GetInvoiceGrouping() InvoiceGroupingReference {
	if o == nil || IsNil(o.InvoiceGrouping) {
		var ret InvoiceGroupingReference
		return ret
	}
	return *o.InvoiceGrouping
}

// GetInvoiceGroupingOk returns a tuple with the InvoiceGrouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetInvoiceGroupingOk() (*InvoiceGroupingReference, bool) {
	if o == nil || IsNil(o.InvoiceGrouping) {
		return nil, false
	}
	return o.InvoiceGrouping, true
}

// HasInvoiceGrouping returns a boolean if a field has been set.
func (o *Addition) HasInvoiceGrouping() bool {
	if o != nil && !IsNil(o.InvoiceGrouping) {
		return true
	}

	return false
}

// SetInvoiceGrouping gets a reference to the given InvoiceGroupingReference and assigns it to the InvoiceGrouping field.
func (o *Addition) SetInvoiceGrouping(v InvoiceGroupingReference) {
	o.InvoiceGrouping = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Addition) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Addition) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Addition) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Addition) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Addition) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Addition) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Addition) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Addition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Addition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["product"] = o.Product
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.LessIncluded.IsSet() {
		toSerialize["lessIncluded"] = o.LessIncluded.Get()
	}
	if o.UnitPrice.IsSet() {
		toSerialize["unitPrice"] = o.UnitPrice.Get()
	}
	if o.UnitCost.IsSet() {
		toSerialize["unitCost"] = o.UnitCost.Get()
	}
	toSerialize["billCustomer"] = o.BillCustomer.Get()
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.CancelledDate) {
		toSerialize["cancelledDate"] = o.CancelledDate
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.InvoiceDescription) {
		toSerialize["invoiceDescription"] = o.InvoiceDescription
	}
	if o.PurchaseItemFlag.IsSet() {
		toSerialize["purchaseItemFlag"] = o.PurchaseItemFlag.Get()
	}
	if o.SpecialOrderFlag.IsSet() {
		toSerialize["specialOrderFlag"] = o.SpecialOrderFlag.Get()
	}
	if o.AgreementId.IsSet() {
		toSerialize["agreementId"] = o.AgreementId.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.BilledQuantity.IsSet() {
		toSerialize["billedQuantity"] = o.BilledQuantity.Get()
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	if o.ExtPrice.IsSet() {
		toSerialize["extPrice"] = o.ExtPrice.Get()
	}
	if o.ExtCost.IsSet() {
		toSerialize["extCost"] = o.ExtCost.Get()
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	if o.Margin.IsSet() {
		toSerialize["margin"] = o.Margin.Get()
	}
	if o.ProrateCost.IsSet() {
		toSerialize["prorateCost"] = o.ProrateCost.Get()
	}
	if o.ProratePrice.IsSet() {
		toSerialize["proratePrice"] = o.ProratePrice.Get()
	}
	if o.ExtendedProrateCost.IsSet() {
		toSerialize["extendedProrateCost"] = o.ExtendedProrateCost.Get()
	}
	if o.ExtendedProratePrice.IsSet() {
		toSerialize["extendedProratePrice"] = o.ExtendedProratePrice.Get()
	}
	if o.ProrateCurrentPeriodFlag.IsSet() {
		toSerialize["prorateCurrentPeriodFlag"] = o.ProrateCurrentPeriodFlag.Get()
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if o.AgreementStatus.IsSet() {
		toSerialize["agreementStatus"] = o.AgreementStatus.Get()
	}
	if !IsNil(o.InvoiceGrouping) {
		toSerialize["invoiceGrouping"] = o.InvoiceGrouping
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Addition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
		"billCustomer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddition := _Addition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddition)

	if err != nil {
		return err
	}

	*o = Addition(varAddition)

	return err
}

type NullableAddition struct {
	value *Addition
	isSet bool
}

func (v NullableAddition) Get() *Addition {
	return v.value
}

func (v *NullableAddition) Set(val *Addition) {
	v.value = val
	v.isSet = true
}

func (v NullableAddition) IsSet() bool {
	return v.isSet
}

func (v *NullableAddition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddition(val *Addition) *NullableAddition {
	return &NullableAddition{value: val, isSet: true}
}

func (v NullableAddition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
