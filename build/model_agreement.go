/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Agreement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Agreement{}

// Agreement struct for Agreement
type Agreement struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Name               string                 `json:"name"`
	Type               AgreementTypeReference `json:"type"`
	Company            CompanyReference       `json:"company"`
	Contact            ContactReference       `json:"contact"`
	Site               *SiteReference         `json:"site,omitempty"`
	SubContractCompany *CompanyReference      `json:"subContractCompany,omitempty"`
	SubContractContact *ContactReference      `json:"subContractContact,omitempty"`
	ParentAgreement    *AgreementReference    `json:"parentAgreement,omitempty"`
	//  Max length: 50;
	CustomerPO             *string                    `json:"customerPO,omitempty"`
	Location               *SystemLocationReference   `json:"location,omitempty"`
	Department             *SystemDepartmentReference `json:"department,omitempty"`
	RestrictLocationFlag   NullableBool               `json:"restrictLocationFlag,omitempty"`
	RestrictDepartmentFlag NullableBool               `json:"restrictDepartmentFlag,omitempty"`
	StartDate              *time.Time                 `json:"startDate,omitempty"`
	EndDate                *time.Time                 `json:"endDate,omitempty"`
	NoEndingDateFlag       NullableBool               `json:"noEndingDateFlag,omitempty"`
	Opportunity            *OpportunityReference      `json:"opportunity,omitempty"`
	CancelledFlag          NullableBool               `json:"cancelledFlag,omitempty"`
	DateCancelled          *time.Time                 `json:"dateCancelled,omitempty"`
	//  Max length: 100;
	ReasonCancelled *string       `json:"reasonCancelled,omitempty"`
	Sla             *SLAReference `json:"sla,omitempty"`
	//  Max length: 20;
	WorkOrder                *string         `json:"workOrder,omitempty"`
	InternalNotes            *string         `json:"internalNotes,omitempty"`
	ApplicationUnits         NullableString  `json:"applicationUnits,omitempty"`
	ApplicationLimit         NullableFloat64 `json:"applicationLimit,omitempty"`
	ApplicationCycle         NullableString  `json:"applicationCycle,omitempty"`
	ApplicationUnlimitedFlag NullableBool    `json:"applicationUnlimitedFlag,omitempty"`
	OneTimeFlag              NullableBool    `json:"oneTimeFlag,omitempty"`
	CoverAgreementTime       NullableBool    `json:"coverAgreementTime,omitempty"`
	CoverAgreementProduct    NullableBool    `json:"coverAgreementProduct,omitempty"`
	CoverAgreementExpense    NullableBool    `json:"coverAgreementExpense,omitempty"`
	CoverSalesTax            NullableBool    `json:"coverSalesTax,omitempty"`
	CarryOverUnused          NullableBool    `json:"carryOverUnused,omitempty"`
	AllowOverruns            NullableBool    `json:"allowOverruns,omitempty"`
	ExpiredDays              NullableInt32   `json:"expiredDays,omitempty"`
	Limit                    NullableInt32   `json:"limit,omitempty"`
	ExpireWhenZero           NullableBool    `json:"expireWhenZero,omitempty"`
	ChargeToFirm             NullableBool    `json:"chargeToFirm,omitempty"`
	//  Required On Updates;
	EmployeeCompRate      NullableString         `json:"employeeCompRate,omitempty"`
	EmployeeCompNotExceed NullableString         `json:"employeeCompNotExceed,omitempty"`
	CompHourlyRate        NullableFloat64        `json:"compHourlyRate,omitempty"`
	CompLimitAmount       NullableFloat64        `json:"compLimitAmount,omitempty"`
	BillingCycle          *BillingCycleReference `json:"billingCycle,omitempty"`
	BillOneTimeFlag       NullableBool           `json:"billOneTimeFlag,omitempty"`
	BillingTerms          *BillingTermsReference `json:"billingTerms,omitempty"`
	//  Required On Updates;
	InvoicingCycle               NullableString            `json:"invoicingCycle,omitempty"`
	BillToCompany                *CompanyReference         `json:"billToCompany,omitempty"`
	BillToContact                *ContactReference         `json:"billToContact,omitempty"`
	BillToSite                   *SiteReference            `json:"billToSite,omitempty"`
	BillAmount                   NullableFloat64           `json:"billAmount,omitempty"`
	Taxable                      NullableBool              `json:"taxable,omitempty"`
	ProrateFirstBill             NullableFloat64           `json:"prorateFirstBill,omitempty"`
	BillStartDate                *time.Time                `json:"billStartDate,omitempty"`
	TaxCode                      *TaxCodeReference         `json:"taxCode,omitempty"`
	RestrictDownPayment          NullableBool              `json:"restrictDownPayment,omitempty"`
	ProrateFlag                  NullableBool              `json:"prorateFlag,omitempty"`
	InvoiceProratedAdditionsFlag NullableBool              `json:"invoiceProratedAdditionsFlag,omitempty"`
	InvoiceDescription           *string                   `json:"invoiceDescription,omitempty"`
	TopComment                   NullableBool              `json:"topComment,omitempty"`
	BottomComment                NullableBool              `json:"bottomComment,omitempty"`
	WorkRole                     *WorkRoleReference        `json:"workRole,omitempty"`
	WorkType                     *WorkTypeReference        `json:"workType,omitempty"`
	ProjectType                  *ProjectTypeReference     `json:"projectType,omitempty"`
	InvoiceTemplate              *InvoiceTemplateReference `json:"invoiceTemplate,omitempty"`
	//  Required On Updates;
	BillTime NullableString `json:"billTime,omitempty"`
	//  Required On Updates;
	BillExpenses NullableString `json:"billExpenses,omitempty"`
	//  Required On Updates;
	BillProducts           NullableString           `json:"billProducts,omitempty"`
	BillableTimeInvoice    NullableBool             `json:"billableTimeInvoice,omitempty"`
	BillableExpenseInvoice NullableBool             `json:"billableExpenseInvoice,omitempty"`
	BillableProductInvoice NullableBool             `json:"billableProductInvoice,omitempty"`
	Currency               *CurrencyReference       `json:"currency,omitempty"`
	PeriodType             NullableString           `json:"periodType,omitempty"`
	AutoInvoiceFlag        NullableBool             `json:"autoInvoiceFlag,omitempty"`
	NextInvoiceDate        *string                  `json:"nextInvoiceDate,omitempty"`
	CompanyLocation        *SystemLocationReference `json:"companyLocation,omitempty"`
	ShipToCompany          *CompanyReference        `json:"shipToCompany,omitempty"`
	ShipToContact          *ContactReference        `json:"shipToContact,omitempty"`
	ShipToSite             *SiteReference           `json:"shipToSite,omitempty"`
	AgreementStatus        NullableString           `json:"agreementStatus,omitempty"`
	Info                   *map[string]string       `json:"_info,omitempty"`
	CustomFields           []CustomFieldValue       `json:"customFields,omitempty"`
}

type _Agreement Agreement

// NewAgreement instantiates a new Agreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreement(name string, type_ AgreementTypeReference, company CompanyReference, contact ContactReference) *Agreement {
	this := Agreement{}
	this.Name = name
	this.Type = type_
	this.Company = company
	this.Contact = contact
	return &this
}

// NewAgreementWithDefaults instantiates a new Agreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementWithDefaults() *Agreement {
	this := Agreement{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Agreement) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Agreement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Agreement) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Agreement) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Agreement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Agreement) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Agreement) GetType() AgreementTypeReference {
	if o == nil {
		var ret AgreementTypeReference
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Agreement) GetTypeOk() (*AgreementTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Agreement) SetType(v AgreementTypeReference) {
	o.Type = v
}

// GetCompany returns the Company field value
func (o *Agreement) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Agreement) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Agreement) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetContact returns the Contact field value
func (o *Agreement) GetContact() ContactReference {
	if o == nil {
		var ret ContactReference
		return ret
	}

	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value
// and a boolean to check if the value has been set.
func (o *Agreement) GetContactOk() (*ContactReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contact, true
}

// SetContact sets field value
func (o *Agreement) SetContact(v ContactReference) {
	o.Contact = v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Agreement) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Agreement) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *Agreement) SetSite(v SiteReference) {
	o.Site = &v
}

// GetSubContractCompany returns the SubContractCompany field value if set, zero value otherwise.
func (o *Agreement) GetSubContractCompany() CompanyReference {
	if o == nil || IsNil(o.SubContractCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.SubContractCompany
}

// GetSubContractCompanyOk returns a tuple with the SubContractCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetSubContractCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.SubContractCompany) {
		return nil, false
	}
	return o.SubContractCompany, true
}

// HasSubContractCompany returns a boolean if a field has been set.
func (o *Agreement) HasSubContractCompany() bool {
	if o != nil && !IsNil(o.SubContractCompany) {
		return true
	}

	return false
}

// SetSubContractCompany gets a reference to the given CompanyReference and assigns it to the SubContractCompany field.
func (o *Agreement) SetSubContractCompany(v CompanyReference) {
	o.SubContractCompany = &v
}

// GetSubContractContact returns the SubContractContact field value if set, zero value otherwise.
func (o *Agreement) GetSubContractContact() ContactReference {
	if o == nil || IsNil(o.SubContractContact) {
		var ret ContactReference
		return ret
	}
	return *o.SubContractContact
}

// GetSubContractContactOk returns a tuple with the SubContractContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetSubContractContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.SubContractContact) {
		return nil, false
	}
	return o.SubContractContact, true
}

// HasSubContractContact returns a boolean if a field has been set.
func (o *Agreement) HasSubContractContact() bool {
	if o != nil && !IsNil(o.SubContractContact) {
		return true
	}

	return false
}

// SetSubContractContact gets a reference to the given ContactReference and assigns it to the SubContractContact field.
func (o *Agreement) SetSubContractContact(v ContactReference) {
	o.SubContractContact = &v
}

// GetParentAgreement returns the ParentAgreement field value if set, zero value otherwise.
func (o *Agreement) GetParentAgreement() AgreementReference {
	if o == nil || IsNil(o.ParentAgreement) {
		var ret AgreementReference
		return ret
	}
	return *o.ParentAgreement
}

// GetParentAgreementOk returns a tuple with the ParentAgreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetParentAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.ParentAgreement) {
		return nil, false
	}
	return o.ParentAgreement, true
}

// HasParentAgreement returns a boolean if a field has been set.
func (o *Agreement) HasParentAgreement() bool {
	if o != nil && !IsNil(o.ParentAgreement) {
		return true
	}

	return false
}

// SetParentAgreement gets a reference to the given AgreementReference and assigns it to the ParentAgreement field.
func (o *Agreement) SetParentAgreement(v AgreementReference) {
	o.ParentAgreement = &v
}

// GetCustomerPO returns the CustomerPO field value if set, zero value otherwise.
func (o *Agreement) GetCustomerPO() string {
	if o == nil || IsNil(o.CustomerPO) {
		var ret string
		return ret
	}
	return *o.CustomerPO
}

// GetCustomerPOOk returns a tuple with the CustomerPO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetCustomerPOOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPO) {
		return nil, false
	}
	return o.CustomerPO, true
}

// HasCustomerPO returns a boolean if a field has been set.
func (o *Agreement) HasCustomerPO() bool {
	if o != nil && !IsNil(o.CustomerPO) {
		return true
	}

	return false
}

// SetCustomerPO gets a reference to the given string and assigns it to the CustomerPO field.
func (o *Agreement) SetCustomerPO(v string) {
	o.CustomerPO = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Agreement) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Agreement) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Agreement) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Agreement) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Agreement) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *Agreement) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetRestrictLocationFlag returns the RestrictLocationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetRestrictLocationFlag() bool {
	if o == nil || IsNil(o.RestrictLocationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictLocationFlag.Get()
}

// GetRestrictLocationFlagOk returns a tuple with the RestrictLocationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetRestrictLocationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictLocationFlag.Get(), o.RestrictLocationFlag.IsSet()
}

// HasRestrictLocationFlag returns a boolean if a field has been set.
func (o *Agreement) HasRestrictLocationFlag() bool {
	if o != nil && o.RestrictLocationFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictLocationFlag gets a reference to the given NullableBool and assigns it to the RestrictLocationFlag field.
func (o *Agreement) SetRestrictLocationFlag(v bool) {
	o.RestrictLocationFlag.Set(&v)
}

// SetRestrictLocationFlagNil sets the value for RestrictLocationFlag to be an explicit nil
func (o *Agreement) SetRestrictLocationFlagNil() {
	o.RestrictLocationFlag.Set(nil)
}

// UnsetRestrictLocationFlag ensures that no value is present for RestrictLocationFlag, not even an explicit nil
func (o *Agreement) UnsetRestrictLocationFlag() {
	o.RestrictLocationFlag.Unset()
}

// GetRestrictDepartmentFlag returns the RestrictDepartmentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetRestrictDepartmentFlag() bool {
	if o == nil || IsNil(o.RestrictDepartmentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDepartmentFlag.Get()
}

// GetRestrictDepartmentFlagOk returns a tuple with the RestrictDepartmentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetRestrictDepartmentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDepartmentFlag.Get(), o.RestrictDepartmentFlag.IsSet()
}

// HasRestrictDepartmentFlag returns a boolean if a field has been set.
func (o *Agreement) HasRestrictDepartmentFlag() bool {
	if o != nil && o.RestrictDepartmentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDepartmentFlag gets a reference to the given NullableBool and assigns it to the RestrictDepartmentFlag field.
func (o *Agreement) SetRestrictDepartmentFlag(v bool) {
	o.RestrictDepartmentFlag.Set(&v)
}

// SetRestrictDepartmentFlagNil sets the value for RestrictDepartmentFlag to be an explicit nil
func (o *Agreement) SetRestrictDepartmentFlagNil() {
	o.RestrictDepartmentFlag.Set(nil)
}

// UnsetRestrictDepartmentFlag ensures that no value is present for RestrictDepartmentFlag, not even an explicit nil
func (o *Agreement) UnsetRestrictDepartmentFlag() {
	o.RestrictDepartmentFlag.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Agreement) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Agreement) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Agreement) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Agreement) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Agreement) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Agreement) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetNoEndingDateFlag returns the NoEndingDateFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetNoEndingDateFlag() bool {
	if o == nil || IsNil(o.NoEndingDateFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NoEndingDateFlag.Get()
}

// GetNoEndingDateFlagOk returns a tuple with the NoEndingDateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetNoEndingDateFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoEndingDateFlag.Get(), o.NoEndingDateFlag.IsSet()
}

// HasNoEndingDateFlag returns a boolean if a field has been set.
func (o *Agreement) HasNoEndingDateFlag() bool {
	if o != nil && o.NoEndingDateFlag.IsSet() {
		return true
	}

	return false
}

// SetNoEndingDateFlag gets a reference to the given NullableBool and assigns it to the NoEndingDateFlag field.
func (o *Agreement) SetNoEndingDateFlag(v bool) {
	o.NoEndingDateFlag.Set(&v)
}

// SetNoEndingDateFlagNil sets the value for NoEndingDateFlag to be an explicit nil
func (o *Agreement) SetNoEndingDateFlagNil() {
	o.NoEndingDateFlag.Set(nil)
}

// UnsetNoEndingDateFlag ensures that no value is present for NoEndingDateFlag, not even an explicit nil
func (o *Agreement) UnsetNoEndingDateFlag() {
	o.NoEndingDateFlag.Unset()
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *Agreement) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *Agreement) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *Agreement) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetCancelledFlag returns the CancelledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCancelledFlag() bool {
	if o == nil || IsNil(o.CancelledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CancelledFlag.Get()
}

// GetCancelledFlagOk returns a tuple with the CancelledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCancelledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelledFlag.Get(), o.CancelledFlag.IsSet()
}

// HasCancelledFlag returns a boolean if a field has been set.
func (o *Agreement) HasCancelledFlag() bool {
	if o != nil && o.CancelledFlag.IsSet() {
		return true
	}

	return false
}

// SetCancelledFlag gets a reference to the given NullableBool and assigns it to the CancelledFlag field.
func (o *Agreement) SetCancelledFlag(v bool) {
	o.CancelledFlag.Set(&v)
}

// SetCancelledFlagNil sets the value for CancelledFlag to be an explicit nil
func (o *Agreement) SetCancelledFlagNil() {
	o.CancelledFlag.Set(nil)
}

// UnsetCancelledFlag ensures that no value is present for CancelledFlag, not even an explicit nil
func (o *Agreement) UnsetCancelledFlag() {
	o.CancelledFlag.Unset()
}

// GetDateCancelled returns the DateCancelled field value if set, zero value otherwise.
func (o *Agreement) GetDateCancelled() time.Time {
	if o == nil || IsNil(o.DateCancelled) {
		var ret time.Time
		return ret
	}
	return *o.DateCancelled
}

// GetDateCancelledOk returns a tuple with the DateCancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetDateCancelledOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCancelled) {
		return nil, false
	}
	return o.DateCancelled, true
}

// HasDateCancelled returns a boolean if a field has been set.
func (o *Agreement) HasDateCancelled() bool {
	if o != nil && !IsNil(o.DateCancelled) {
		return true
	}

	return false
}

// SetDateCancelled gets a reference to the given time.Time and assigns it to the DateCancelled field.
func (o *Agreement) SetDateCancelled(v time.Time) {
	o.DateCancelled = &v
}

// GetReasonCancelled returns the ReasonCancelled field value if set, zero value otherwise.
func (o *Agreement) GetReasonCancelled() string {
	if o == nil || IsNil(o.ReasonCancelled) {
		var ret string
		return ret
	}
	return *o.ReasonCancelled
}

// GetReasonCancelledOk returns a tuple with the ReasonCancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetReasonCancelledOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCancelled) {
		return nil, false
	}
	return o.ReasonCancelled, true
}

// HasReasonCancelled returns a boolean if a field has been set.
func (o *Agreement) HasReasonCancelled() bool {
	if o != nil && !IsNil(o.ReasonCancelled) {
		return true
	}

	return false
}

// SetReasonCancelled gets a reference to the given string and assigns it to the ReasonCancelled field.
func (o *Agreement) SetReasonCancelled(v string) {
	o.ReasonCancelled = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *Agreement) GetSla() SLAReference {
	if o == nil || IsNil(o.Sla) {
		var ret SLAReference
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetSlaOk() (*SLAReference, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *Agreement) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLAReference and assigns it to the Sla field.
func (o *Agreement) SetSla(v SLAReference) {
	o.Sla = &v
}

// GetWorkOrder returns the WorkOrder field value if set, zero value otherwise.
func (o *Agreement) GetWorkOrder() string {
	if o == nil || IsNil(o.WorkOrder) {
		var ret string
		return ret
	}
	return *o.WorkOrder
}

// GetWorkOrderOk returns a tuple with the WorkOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetWorkOrderOk() (*string, bool) {
	if o == nil || IsNil(o.WorkOrder) {
		return nil, false
	}
	return o.WorkOrder, true
}

// HasWorkOrder returns a boolean if a field has been set.
func (o *Agreement) HasWorkOrder() bool {
	if o != nil && !IsNil(o.WorkOrder) {
		return true
	}

	return false
}

// SetWorkOrder gets a reference to the given string and assigns it to the WorkOrder field.
func (o *Agreement) SetWorkOrder(v string) {
	o.WorkOrder = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *Agreement) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *Agreement) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *Agreement) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetApplicationUnits returns the ApplicationUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetApplicationUnits() string {
	if o == nil || IsNil(o.ApplicationUnits.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationUnits.Get()
}

// GetApplicationUnitsOk returns a tuple with the ApplicationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetApplicationUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationUnits.Get(), o.ApplicationUnits.IsSet()
}

// HasApplicationUnits returns a boolean if a field has been set.
func (o *Agreement) HasApplicationUnits() bool {
	if o != nil && o.ApplicationUnits.IsSet() {
		return true
	}

	return false
}

// SetApplicationUnits gets a reference to the given NullableString and assigns it to the ApplicationUnits field.
func (o *Agreement) SetApplicationUnits(v string) {
	o.ApplicationUnits.Set(&v)
}

// SetApplicationUnitsNil sets the value for ApplicationUnits to be an explicit nil
func (o *Agreement) SetApplicationUnitsNil() {
	o.ApplicationUnits.Set(nil)
}

// UnsetApplicationUnits ensures that no value is present for ApplicationUnits, not even an explicit nil
func (o *Agreement) UnsetApplicationUnits() {
	o.ApplicationUnits.Unset()
}

// GetApplicationLimit returns the ApplicationLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetApplicationLimit() float64 {
	if o == nil || IsNil(o.ApplicationLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.ApplicationLimit.Get()
}

// GetApplicationLimitOk returns a tuple with the ApplicationLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetApplicationLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationLimit.Get(), o.ApplicationLimit.IsSet()
}

// HasApplicationLimit returns a boolean if a field has been set.
func (o *Agreement) HasApplicationLimit() bool {
	if o != nil && o.ApplicationLimit.IsSet() {
		return true
	}

	return false
}

// SetApplicationLimit gets a reference to the given NullableFloat64 and assigns it to the ApplicationLimit field.
func (o *Agreement) SetApplicationLimit(v float64) {
	o.ApplicationLimit.Set(&v)
}

// SetApplicationLimitNil sets the value for ApplicationLimit to be an explicit nil
func (o *Agreement) SetApplicationLimitNil() {
	o.ApplicationLimit.Set(nil)
}

// UnsetApplicationLimit ensures that no value is present for ApplicationLimit, not even an explicit nil
func (o *Agreement) UnsetApplicationLimit() {
	o.ApplicationLimit.Unset()
}

// GetApplicationCycle returns the ApplicationCycle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetApplicationCycle() string {
	if o == nil || IsNil(o.ApplicationCycle.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationCycle.Get()
}

// GetApplicationCycleOk returns a tuple with the ApplicationCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetApplicationCycleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationCycle.Get(), o.ApplicationCycle.IsSet()
}

// HasApplicationCycle returns a boolean if a field has been set.
func (o *Agreement) HasApplicationCycle() bool {
	if o != nil && o.ApplicationCycle.IsSet() {
		return true
	}

	return false
}

// SetApplicationCycle gets a reference to the given NullableString and assigns it to the ApplicationCycle field.
func (o *Agreement) SetApplicationCycle(v string) {
	o.ApplicationCycle.Set(&v)
}

// SetApplicationCycleNil sets the value for ApplicationCycle to be an explicit nil
func (o *Agreement) SetApplicationCycleNil() {
	o.ApplicationCycle.Set(nil)
}

// UnsetApplicationCycle ensures that no value is present for ApplicationCycle, not even an explicit nil
func (o *Agreement) UnsetApplicationCycle() {
	o.ApplicationCycle.Unset()
}

// GetApplicationUnlimitedFlag returns the ApplicationUnlimitedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetApplicationUnlimitedFlag() bool {
	if o == nil || IsNil(o.ApplicationUnlimitedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ApplicationUnlimitedFlag.Get()
}

// GetApplicationUnlimitedFlagOk returns a tuple with the ApplicationUnlimitedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetApplicationUnlimitedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationUnlimitedFlag.Get(), o.ApplicationUnlimitedFlag.IsSet()
}

// HasApplicationUnlimitedFlag returns a boolean if a field has been set.
func (o *Agreement) HasApplicationUnlimitedFlag() bool {
	if o != nil && o.ApplicationUnlimitedFlag.IsSet() {
		return true
	}

	return false
}

// SetApplicationUnlimitedFlag gets a reference to the given NullableBool and assigns it to the ApplicationUnlimitedFlag field.
func (o *Agreement) SetApplicationUnlimitedFlag(v bool) {
	o.ApplicationUnlimitedFlag.Set(&v)
}

// SetApplicationUnlimitedFlagNil sets the value for ApplicationUnlimitedFlag to be an explicit nil
func (o *Agreement) SetApplicationUnlimitedFlagNil() {
	o.ApplicationUnlimitedFlag.Set(nil)
}

// UnsetApplicationUnlimitedFlag ensures that no value is present for ApplicationUnlimitedFlag, not even an explicit nil
func (o *Agreement) UnsetApplicationUnlimitedFlag() {
	o.ApplicationUnlimitedFlag.Unset()
}

// GetOneTimeFlag returns the OneTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetOneTimeFlag() bool {
	if o == nil || IsNil(o.OneTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OneTimeFlag.Get()
}

// GetOneTimeFlagOk returns a tuple with the OneTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetOneTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OneTimeFlag.Get(), o.OneTimeFlag.IsSet()
}

// HasOneTimeFlag returns a boolean if a field has been set.
func (o *Agreement) HasOneTimeFlag() bool {
	if o != nil && o.OneTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetOneTimeFlag gets a reference to the given NullableBool and assigns it to the OneTimeFlag field.
func (o *Agreement) SetOneTimeFlag(v bool) {
	o.OneTimeFlag.Set(&v)
}

// SetOneTimeFlagNil sets the value for OneTimeFlag to be an explicit nil
func (o *Agreement) SetOneTimeFlagNil() {
	o.OneTimeFlag.Set(nil)
}

// UnsetOneTimeFlag ensures that no value is present for OneTimeFlag, not even an explicit nil
func (o *Agreement) UnsetOneTimeFlag() {
	o.OneTimeFlag.Unset()
}

// GetCoverAgreementTime returns the CoverAgreementTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCoverAgreementTime() bool {
	if o == nil || IsNil(o.CoverAgreementTime.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverAgreementTime.Get()
}

// GetCoverAgreementTimeOk returns a tuple with the CoverAgreementTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCoverAgreementTimeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverAgreementTime.Get(), o.CoverAgreementTime.IsSet()
}

// HasCoverAgreementTime returns a boolean if a field has been set.
func (o *Agreement) HasCoverAgreementTime() bool {
	if o != nil && o.CoverAgreementTime.IsSet() {
		return true
	}

	return false
}

// SetCoverAgreementTime gets a reference to the given NullableBool and assigns it to the CoverAgreementTime field.
func (o *Agreement) SetCoverAgreementTime(v bool) {
	o.CoverAgreementTime.Set(&v)
}

// SetCoverAgreementTimeNil sets the value for CoverAgreementTime to be an explicit nil
func (o *Agreement) SetCoverAgreementTimeNil() {
	o.CoverAgreementTime.Set(nil)
}

// UnsetCoverAgreementTime ensures that no value is present for CoverAgreementTime, not even an explicit nil
func (o *Agreement) UnsetCoverAgreementTime() {
	o.CoverAgreementTime.Unset()
}

// GetCoverAgreementProduct returns the CoverAgreementProduct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCoverAgreementProduct() bool {
	if o == nil || IsNil(o.CoverAgreementProduct.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverAgreementProduct.Get()
}

// GetCoverAgreementProductOk returns a tuple with the CoverAgreementProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCoverAgreementProductOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverAgreementProduct.Get(), o.CoverAgreementProduct.IsSet()
}

// HasCoverAgreementProduct returns a boolean if a field has been set.
func (o *Agreement) HasCoverAgreementProduct() bool {
	if o != nil && o.CoverAgreementProduct.IsSet() {
		return true
	}

	return false
}

// SetCoverAgreementProduct gets a reference to the given NullableBool and assigns it to the CoverAgreementProduct field.
func (o *Agreement) SetCoverAgreementProduct(v bool) {
	o.CoverAgreementProduct.Set(&v)
}

// SetCoverAgreementProductNil sets the value for CoverAgreementProduct to be an explicit nil
func (o *Agreement) SetCoverAgreementProductNil() {
	o.CoverAgreementProduct.Set(nil)
}

// UnsetCoverAgreementProduct ensures that no value is present for CoverAgreementProduct, not even an explicit nil
func (o *Agreement) UnsetCoverAgreementProduct() {
	o.CoverAgreementProduct.Unset()
}

// GetCoverAgreementExpense returns the CoverAgreementExpense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCoverAgreementExpense() bool {
	if o == nil || IsNil(o.CoverAgreementExpense.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverAgreementExpense.Get()
}

// GetCoverAgreementExpenseOk returns a tuple with the CoverAgreementExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCoverAgreementExpenseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverAgreementExpense.Get(), o.CoverAgreementExpense.IsSet()
}

// HasCoverAgreementExpense returns a boolean if a field has been set.
func (o *Agreement) HasCoverAgreementExpense() bool {
	if o != nil && o.CoverAgreementExpense.IsSet() {
		return true
	}

	return false
}

// SetCoverAgreementExpense gets a reference to the given NullableBool and assigns it to the CoverAgreementExpense field.
func (o *Agreement) SetCoverAgreementExpense(v bool) {
	o.CoverAgreementExpense.Set(&v)
}

// SetCoverAgreementExpenseNil sets the value for CoverAgreementExpense to be an explicit nil
func (o *Agreement) SetCoverAgreementExpenseNil() {
	o.CoverAgreementExpense.Set(nil)
}

// UnsetCoverAgreementExpense ensures that no value is present for CoverAgreementExpense, not even an explicit nil
func (o *Agreement) UnsetCoverAgreementExpense() {
	o.CoverAgreementExpense.Unset()
}

// GetCoverSalesTax returns the CoverSalesTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCoverSalesTax() bool {
	if o == nil || IsNil(o.CoverSalesTax.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverSalesTax.Get()
}

// GetCoverSalesTaxOk returns a tuple with the CoverSalesTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCoverSalesTaxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverSalesTax.Get(), o.CoverSalesTax.IsSet()
}

// HasCoverSalesTax returns a boolean if a field has been set.
func (o *Agreement) HasCoverSalesTax() bool {
	if o != nil && o.CoverSalesTax.IsSet() {
		return true
	}

	return false
}

// SetCoverSalesTax gets a reference to the given NullableBool and assigns it to the CoverSalesTax field.
func (o *Agreement) SetCoverSalesTax(v bool) {
	o.CoverSalesTax.Set(&v)
}

// SetCoverSalesTaxNil sets the value for CoverSalesTax to be an explicit nil
func (o *Agreement) SetCoverSalesTaxNil() {
	o.CoverSalesTax.Set(nil)
}

// UnsetCoverSalesTax ensures that no value is present for CoverSalesTax, not even an explicit nil
func (o *Agreement) UnsetCoverSalesTax() {
	o.CoverSalesTax.Unset()
}

// GetCarryOverUnused returns the CarryOverUnused field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCarryOverUnused() bool {
	if o == nil || IsNil(o.CarryOverUnused.Get()) {
		var ret bool
		return ret
	}
	return *o.CarryOverUnused.Get()
}

// GetCarryOverUnusedOk returns a tuple with the CarryOverUnused field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCarryOverUnusedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CarryOverUnused.Get(), o.CarryOverUnused.IsSet()
}

// HasCarryOverUnused returns a boolean if a field has been set.
func (o *Agreement) HasCarryOverUnused() bool {
	if o != nil && o.CarryOverUnused.IsSet() {
		return true
	}

	return false
}

// SetCarryOverUnused gets a reference to the given NullableBool and assigns it to the CarryOverUnused field.
func (o *Agreement) SetCarryOverUnused(v bool) {
	o.CarryOverUnused.Set(&v)
}

// SetCarryOverUnusedNil sets the value for CarryOverUnused to be an explicit nil
func (o *Agreement) SetCarryOverUnusedNil() {
	o.CarryOverUnused.Set(nil)
}

// UnsetCarryOverUnused ensures that no value is present for CarryOverUnused, not even an explicit nil
func (o *Agreement) UnsetCarryOverUnused() {
	o.CarryOverUnused.Unset()
}

// GetAllowOverruns returns the AllowOverruns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetAllowOverruns() bool {
	if o == nil || IsNil(o.AllowOverruns.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowOverruns.Get()
}

// GetAllowOverrunsOk returns a tuple with the AllowOverruns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetAllowOverrunsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowOverruns.Get(), o.AllowOverruns.IsSet()
}

// HasAllowOverruns returns a boolean if a field has been set.
func (o *Agreement) HasAllowOverruns() bool {
	if o != nil && o.AllowOverruns.IsSet() {
		return true
	}

	return false
}

// SetAllowOverruns gets a reference to the given NullableBool and assigns it to the AllowOverruns field.
func (o *Agreement) SetAllowOverruns(v bool) {
	o.AllowOverruns.Set(&v)
}

// SetAllowOverrunsNil sets the value for AllowOverruns to be an explicit nil
func (o *Agreement) SetAllowOverrunsNil() {
	o.AllowOverruns.Set(nil)
}

// UnsetAllowOverruns ensures that no value is present for AllowOverruns, not even an explicit nil
func (o *Agreement) UnsetAllowOverruns() {
	o.AllowOverruns.Unset()
}

// GetExpiredDays returns the ExpiredDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetExpiredDays() int32 {
	if o == nil || IsNil(o.ExpiredDays.Get()) {
		var ret int32
		return ret
	}
	return *o.ExpiredDays.Get()
}

// GetExpiredDaysOk returns a tuple with the ExpiredDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetExpiredDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredDays.Get(), o.ExpiredDays.IsSet()
}

// HasExpiredDays returns a boolean if a field has been set.
func (o *Agreement) HasExpiredDays() bool {
	if o != nil && o.ExpiredDays.IsSet() {
		return true
	}

	return false
}

// SetExpiredDays gets a reference to the given NullableInt32 and assigns it to the ExpiredDays field.
func (o *Agreement) SetExpiredDays(v int32) {
	o.ExpiredDays.Set(&v)
}

// SetExpiredDaysNil sets the value for ExpiredDays to be an explicit nil
func (o *Agreement) SetExpiredDaysNil() {
	o.ExpiredDays.Set(nil)
}

// UnsetExpiredDays ensures that no value is present for ExpiredDays, not even an explicit nil
func (o *Agreement) UnsetExpiredDays() {
	o.ExpiredDays.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetLimit() int32 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int32
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *Agreement) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt32 and assigns it to the Limit field.
func (o *Agreement) SetLimit(v int32) {
	o.Limit.Set(&v)
}

// SetLimitNil sets the value for Limit to be an explicit nil
func (o *Agreement) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *Agreement) UnsetLimit() {
	o.Limit.Unset()
}

// GetExpireWhenZero returns the ExpireWhenZero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetExpireWhenZero() bool {
	if o == nil || IsNil(o.ExpireWhenZero.Get()) {
		var ret bool
		return ret
	}
	return *o.ExpireWhenZero.Get()
}

// GetExpireWhenZeroOk returns a tuple with the ExpireWhenZero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetExpireWhenZeroOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireWhenZero.Get(), o.ExpireWhenZero.IsSet()
}

// HasExpireWhenZero returns a boolean if a field has been set.
func (o *Agreement) HasExpireWhenZero() bool {
	if o != nil && o.ExpireWhenZero.IsSet() {
		return true
	}

	return false
}

// SetExpireWhenZero gets a reference to the given NullableBool and assigns it to the ExpireWhenZero field.
func (o *Agreement) SetExpireWhenZero(v bool) {
	o.ExpireWhenZero.Set(&v)
}

// SetExpireWhenZeroNil sets the value for ExpireWhenZero to be an explicit nil
func (o *Agreement) SetExpireWhenZeroNil() {
	o.ExpireWhenZero.Set(nil)
}

// UnsetExpireWhenZero ensures that no value is present for ExpireWhenZero, not even an explicit nil
func (o *Agreement) UnsetExpireWhenZero() {
	o.ExpireWhenZero.Unset()
}

// GetChargeToFirm returns the ChargeToFirm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetChargeToFirm() bool {
	if o == nil || IsNil(o.ChargeToFirm.Get()) {
		var ret bool
		return ret
	}
	return *o.ChargeToFirm.Get()
}

// GetChargeToFirmOk returns a tuple with the ChargeToFirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetChargeToFirmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeToFirm.Get(), o.ChargeToFirm.IsSet()
}

// HasChargeToFirm returns a boolean if a field has been set.
func (o *Agreement) HasChargeToFirm() bool {
	if o != nil && o.ChargeToFirm.IsSet() {
		return true
	}

	return false
}

// SetChargeToFirm gets a reference to the given NullableBool and assigns it to the ChargeToFirm field.
func (o *Agreement) SetChargeToFirm(v bool) {
	o.ChargeToFirm.Set(&v)
}

// SetChargeToFirmNil sets the value for ChargeToFirm to be an explicit nil
func (o *Agreement) SetChargeToFirmNil() {
	o.ChargeToFirm.Set(nil)
}

// UnsetChargeToFirm ensures that no value is present for ChargeToFirm, not even an explicit nil
func (o *Agreement) UnsetChargeToFirm() {
	o.ChargeToFirm.Unset()
}

// GetEmployeeCompRate returns the EmployeeCompRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetEmployeeCompRate() string {
	if o == nil || IsNil(o.EmployeeCompRate.Get()) {
		var ret string
		return ret
	}
	return *o.EmployeeCompRate.Get()
}

// GetEmployeeCompRateOk returns a tuple with the EmployeeCompRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetEmployeeCompRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeCompRate.Get(), o.EmployeeCompRate.IsSet()
}

// HasEmployeeCompRate returns a boolean if a field has been set.
func (o *Agreement) HasEmployeeCompRate() bool {
	if o != nil && o.EmployeeCompRate.IsSet() {
		return true
	}

	return false
}

// SetEmployeeCompRate gets a reference to the given NullableString and assigns it to the EmployeeCompRate field.
func (o *Agreement) SetEmployeeCompRate(v string) {
	o.EmployeeCompRate.Set(&v)
}

// SetEmployeeCompRateNil sets the value for EmployeeCompRate to be an explicit nil
func (o *Agreement) SetEmployeeCompRateNil() {
	o.EmployeeCompRate.Set(nil)
}

// UnsetEmployeeCompRate ensures that no value is present for EmployeeCompRate, not even an explicit nil
func (o *Agreement) UnsetEmployeeCompRate() {
	o.EmployeeCompRate.Unset()
}

// GetEmployeeCompNotExceed returns the EmployeeCompNotExceed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetEmployeeCompNotExceed() string {
	if o == nil || IsNil(o.EmployeeCompNotExceed.Get()) {
		var ret string
		return ret
	}
	return *o.EmployeeCompNotExceed.Get()
}

// GetEmployeeCompNotExceedOk returns a tuple with the EmployeeCompNotExceed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetEmployeeCompNotExceedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeCompNotExceed.Get(), o.EmployeeCompNotExceed.IsSet()
}

// HasEmployeeCompNotExceed returns a boolean if a field has been set.
func (o *Agreement) HasEmployeeCompNotExceed() bool {
	if o != nil && o.EmployeeCompNotExceed.IsSet() {
		return true
	}

	return false
}

// SetEmployeeCompNotExceed gets a reference to the given NullableString and assigns it to the EmployeeCompNotExceed field.
func (o *Agreement) SetEmployeeCompNotExceed(v string) {
	o.EmployeeCompNotExceed.Set(&v)
}

// SetEmployeeCompNotExceedNil sets the value for EmployeeCompNotExceed to be an explicit nil
func (o *Agreement) SetEmployeeCompNotExceedNil() {
	o.EmployeeCompNotExceed.Set(nil)
}

// UnsetEmployeeCompNotExceed ensures that no value is present for EmployeeCompNotExceed, not even an explicit nil
func (o *Agreement) UnsetEmployeeCompNotExceed() {
	o.EmployeeCompNotExceed.Unset()
}

// GetCompHourlyRate returns the CompHourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCompHourlyRate() float64 {
	if o == nil || IsNil(o.CompHourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.CompHourlyRate.Get()
}

// GetCompHourlyRateOk returns a tuple with the CompHourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCompHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompHourlyRate.Get(), o.CompHourlyRate.IsSet()
}

// HasCompHourlyRate returns a boolean if a field has been set.
func (o *Agreement) HasCompHourlyRate() bool {
	if o != nil && o.CompHourlyRate.IsSet() {
		return true
	}

	return false
}

// SetCompHourlyRate gets a reference to the given NullableFloat64 and assigns it to the CompHourlyRate field.
func (o *Agreement) SetCompHourlyRate(v float64) {
	o.CompHourlyRate.Set(&v)
}

// SetCompHourlyRateNil sets the value for CompHourlyRate to be an explicit nil
func (o *Agreement) SetCompHourlyRateNil() {
	o.CompHourlyRate.Set(nil)
}

// UnsetCompHourlyRate ensures that no value is present for CompHourlyRate, not even an explicit nil
func (o *Agreement) UnsetCompHourlyRate() {
	o.CompHourlyRate.Unset()
}

// GetCompLimitAmount returns the CompLimitAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetCompLimitAmount() float64 {
	if o == nil || IsNil(o.CompLimitAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CompLimitAmount.Get()
}

// GetCompLimitAmountOk returns a tuple with the CompLimitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetCompLimitAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompLimitAmount.Get(), o.CompLimitAmount.IsSet()
}

// HasCompLimitAmount returns a boolean if a field has been set.
func (o *Agreement) HasCompLimitAmount() bool {
	if o != nil && o.CompLimitAmount.IsSet() {
		return true
	}

	return false
}

// SetCompLimitAmount gets a reference to the given NullableFloat64 and assigns it to the CompLimitAmount field.
func (o *Agreement) SetCompLimitAmount(v float64) {
	o.CompLimitAmount.Set(&v)
}

// SetCompLimitAmountNil sets the value for CompLimitAmount to be an explicit nil
func (o *Agreement) SetCompLimitAmountNil() {
	o.CompLimitAmount.Set(nil)
}

// UnsetCompLimitAmount ensures that no value is present for CompLimitAmount, not even an explicit nil
func (o *Agreement) UnsetCompLimitAmount() {
	o.CompLimitAmount.Unset()
}

// GetBillingCycle returns the BillingCycle field value if set, zero value otherwise.
func (o *Agreement) GetBillingCycle() BillingCycleReference {
	if o == nil || IsNil(o.BillingCycle) {
		var ret BillingCycleReference
		return ret
	}
	return *o.BillingCycle
}

// GetBillingCycleOk returns a tuple with the BillingCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetBillingCycleOk() (*BillingCycleReference, bool) {
	if o == nil || IsNil(o.BillingCycle) {
		return nil, false
	}
	return o.BillingCycle, true
}

// HasBillingCycle returns a boolean if a field has been set.
func (o *Agreement) HasBillingCycle() bool {
	if o != nil && !IsNil(o.BillingCycle) {
		return true
	}

	return false
}

// SetBillingCycle gets a reference to the given BillingCycleReference and assigns it to the BillingCycle field.
func (o *Agreement) SetBillingCycle(v BillingCycleReference) {
	o.BillingCycle = &v
}

// GetBillOneTimeFlag returns the BillOneTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillOneTimeFlag() bool {
	if o == nil || IsNil(o.BillOneTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillOneTimeFlag.Get()
}

// GetBillOneTimeFlagOk returns a tuple with the BillOneTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillOneTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillOneTimeFlag.Get(), o.BillOneTimeFlag.IsSet()
}

// HasBillOneTimeFlag returns a boolean if a field has been set.
func (o *Agreement) HasBillOneTimeFlag() bool {
	if o != nil && o.BillOneTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetBillOneTimeFlag gets a reference to the given NullableBool and assigns it to the BillOneTimeFlag field.
func (o *Agreement) SetBillOneTimeFlag(v bool) {
	o.BillOneTimeFlag.Set(&v)
}

// SetBillOneTimeFlagNil sets the value for BillOneTimeFlag to be an explicit nil
func (o *Agreement) SetBillOneTimeFlagNil() {
	o.BillOneTimeFlag.Set(nil)
}

// UnsetBillOneTimeFlag ensures that no value is present for BillOneTimeFlag, not even an explicit nil
func (o *Agreement) UnsetBillOneTimeFlag() {
	o.BillOneTimeFlag.Unset()
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *Agreement) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *Agreement) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *Agreement) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetInvoicingCycle returns the InvoicingCycle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetInvoicingCycle() string {
	if o == nil || IsNil(o.InvoicingCycle.Get()) {
		var ret string
		return ret
	}
	return *o.InvoicingCycle.Get()
}

// GetInvoicingCycleOk returns a tuple with the InvoicingCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetInvoicingCycleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoicingCycle.Get(), o.InvoicingCycle.IsSet()
}

// HasInvoicingCycle returns a boolean if a field has been set.
func (o *Agreement) HasInvoicingCycle() bool {
	if o != nil && o.InvoicingCycle.IsSet() {
		return true
	}

	return false
}

// SetInvoicingCycle gets a reference to the given NullableString and assigns it to the InvoicingCycle field.
func (o *Agreement) SetInvoicingCycle(v string) {
	o.InvoicingCycle.Set(&v)
}

// SetInvoicingCycleNil sets the value for InvoicingCycle to be an explicit nil
func (o *Agreement) SetInvoicingCycleNil() {
	o.InvoicingCycle.Set(nil)
}

// UnsetInvoicingCycle ensures that no value is present for InvoicingCycle, not even an explicit nil
func (o *Agreement) UnsetInvoicingCycle() {
	o.InvoicingCycle.Unset()
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *Agreement) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *Agreement) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *Agreement) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetBillToContact returns the BillToContact field value if set, zero value otherwise.
func (o *Agreement) GetBillToContact() ContactReference {
	if o == nil || IsNil(o.BillToContact) {
		var ret ContactReference
		return ret
	}
	return *o.BillToContact
}

// GetBillToContactOk returns a tuple with the BillToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetBillToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BillToContact) {
		return nil, false
	}
	return o.BillToContact, true
}

// HasBillToContact returns a boolean if a field has been set.
func (o *Agreement) HasBillToContact() bool {
	if o != nil && !IsNil(o.BillToContact) {
		return true
	}

	return false
}

// SetBillToContact gets a reference to the given ContactReference and assigns it to the BillToContact field.
func (o *Agreement) SetBillToContact(v ContactReference) {
	o.BillToContact = &v
}

// GetBillToSite returns the BillToSite field value if set, zero value otherwise.
func (o *Agreement) GetBillToSite() SiteReference {
	if o == nil || IsNil(o.BillToSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillToSite
}

// GetBillToSiteOk returns a tuple with the BillToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetBillToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillToSite) {
		return nil, false
	}
	return o.BillToSite, true
}

// HasBillToSite returns a boolean if a field has been set.
func (o *Agreement) HasBillToSite() bool {
	if o != nil && !IsNil(o.BillToSite) {
		return true
	}

	return false
}

// SetBillToSite gets a reference to the given SiteReference and assigns it to the BillToSite field.
func (o *Agreement) SetBillToSite(v SiteReference) {
	o.BillToSite = &v
}

// GetBillAmount returns the BillAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillAmount() float64 {
	if o == nil || IsNil(o.BillAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillAmount.Get()
}

// GetBillAmountOk returns a tuple with the BillAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillAmount.Get(), o.BillAmount.IsSet()
}

// HasBillAmount returns a boolean if a field has been set.
func (o *Agreement) HasBillAmount() bool {
	if o != nil && o.BillAmount.IsSet() {
		return true
	}

	return false
}

// SetBillAmount gets a reference to the given NullableFloat64 and assigns it to the BillAmount field.
func (o *Agreement) SetBillAmount(v float64) {
	o.BillAmount.Set(&v)
}

// SetBillAmountNil sets the value for BillAmount to be an explicit nil
func (o *Agreement) SetBillAmountNil() {
	o.BillAmount.Set(nil)
}

// UnsetBillAmount ensures that no value is present for BillAmount, not even an explicit nil
func (o *Agreement) UnsetBillAmount() {
	o.BillAmount.Unset()
}

// GetTaxable returns the Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable.Get()
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetTaxableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable.Get(), o.Taxable.IsSet()
}

// HasTaxable returns a boolean if a field has been set.
func (o *Agreement) HasTaxable() bool {
	if o != nil && o.Taxable.IsSet() {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given NullableBool and assigns it to the Taxable field.
func (o *Agreement) SetTaxable(v bool) {
	o.Taxable.Set(&v)
}

// SetTaxableNil sets the value for Taxable to be an explicit nil
func (o *Agreement) SetTaxableNil() {
	o.Taxable.Set(nil)
}

// UnsetTaxable ensures that no value is present for Taxable, not even an explicit nil
func (o *Agreement) UnsetTaxable() {
	o.Taxable.Unset()
}

// GetProrateFirstBill returns the ProrateFirstBill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetProrateFirstBill() float64 {
	if o == nil || IsNil(o.ProrateFirstBill.Get()) {
		var ret float64
		return ret
	}
	return *o.ProrateFirstBill.Get()
}

// GetProrateFirstBillOk returns a tuple with the ProrateFirstBill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetProrateFirstBillOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProrateFirstBill.Get(), o.ProrateFirstBill.IsSet()
}

// HasProrateFirstBill returns a boolean if a field has been set.
func (o *Agreement) HasProrateFirstBill() bool {
	if o != nil && o.ProrateFirstBill.IsSet() {
		return true
	}

	return false
}

// SetProrateFirstBill gets a reference to the given NullableFloat64 and assigns it to the ProrateFirstBill field.
func (o *Agreement) SetProrateFirstBill(v float64) {
	o.ProrateFirstBill.Set(&v)
}

// SetProrateFirstBillNil sets the value for ProrateFirstBill to be an explicit nil
func (o *Agreement) SetProrateFirstBillNil() {
	o.ProrateFirstBill.Set(nil)
}

// UnsetProrateFirstBill ensures that no value is present for ProrateFirstBill, not even an explicit nil
func (o *Agreement) UnsetProrateFirstBill() {
	o.ProrateFirstBill.Unset()
}

// GetBillStartDate returns the BillStartDate field value if set, zero value otherwise.
func (o *Agreement) GetBillStartDate() time.Time {
	if o == nil || IsNil(o.BillStartDate) {
		var ret time.Time
		return ret
	}
	return *o.BillStartDate
}

// GetBillStartDateOk returns a tuple with the BillStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetBillStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BillStartDate) {
		return nil, false
	}
	return o.BillStartDate, true
}

// HasBillStartDate returns a boolean if a field has been set.
func (o *Agreement) HasBillStartDate() bool {
	if o != nil && !IsNil(o.BillStartDate) {
		return true
	}

	return false
}

// SetBillStartDate gets a reference to the given time.Time and assigns it to the BillStartDate field.
func (o *Agreement) SetBillStartDate(v time.Time) {
	o.BillStartDate = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *Agreement) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *Agreement) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *Agreement) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetRestrictDownPayment returns the RestrictDownPayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetRestrictDownPayment() bool {
	if o == nil || IsNil(o.RestrictDownPayment.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDownPayment.Get()
}

// GetRestrictDownPaymentOk returns a tuple with the RestrictDownPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetRestrictDownPaymentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDownPayment.Get(), o.RestrictDownPayment.IsSet()
}

// HasRestrictDownPayment returns a boolean if a field has been set.
func (o *Agreement) HasRestrictDownPayment() bool {
	if o != nil && o.RestrictDownPayment.IsSet() {
		return true
	}

	return false
}

// SetRestrictDownPayment gets a reference to the given NullableBool and assigns it to the RestrictDownPayment field.
func (o *Agreement) SetRestrictDownPayment(v bool) {
	o.RestrictDownPayment.Set(&v)
}

// SetRestrictDownPaymentNil sets the value for RestrictDownPayment to be an explicit nil
func (o *Agreement) SetRestrictDownPaymentNil() {
	o.RestrictDownPayment.Set(nil)
}

// UnsetRestrictDownPayment ensures that no value is present for RestrictDownPayment, not even an explicit nil
func (o *Agreement) UnsetRestrictDownPayment() {
	o.RestrictDownPayment.Unset()
}

// GetProrateFlag returns the ProrateFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetProrateFlag() bool {
	if o == nil || IsNil(o.ProrateFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProrateFlag.Get()
}

// GetProrateFlagOk returns a tuple with the ProrateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetProrateFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProrateFlag.Get(), o.ProrateFlag.IsSet()
}

// HasProrateFlag returns a boolean if a field has been set.
func (o *Agreement) HasProrateFlag() bool {
	if o != nil && o.ProrateFlag.IsSet() {
		return true
	}

	return false
}

// SetProrateFlag gets a reference to the given NullableBool and assigns it to the ProrateFlag field.
func (o *Agreement) SetProrateFlag(v bool) {
	o.ProrateFlag.Set(&v)
}

// SetProrateFlagNil sets the value for ProrateFlag to be an explicit nil
func (o *Agreement) SetProrateFlagNil() {
	o.ProrateFlag.Set(nil)
}

// UnsetProrateFlag ensures that no value is present for ProrateFlag, not even an explicit nil
func (o *Agreement) UnsetProrateFlag() {
	o.ProrateFlag.Unset()
}

// GetInvoiceProratedAdditionsFlag returns the InvoiceProratedAdditionsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetInvoiceProratedAdditionsFlag() bool {
	if o == nil || IsNil(o.InvoiceProratedAdditionsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvoiceProratedAdditionsFlag.Get()
}

// GetInvoiceProratedAdditionsFlagOk returns a tuple with the InvoiceProratedAdditionsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetInvoiceProratedAdditionsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceProratedAdditionsFlag.Get(), o.InvoiceProratedAdditionsFlag.IsSet()
}

// HasInvoiceProratedAdditionsFlag returns a boolean if a field has been set.
func (o *Agreement) HasInvoiceProratedAdditionsFlag() bool {
	if o != nil && o.InvoiceProratedAdditionsFlag.IsSet() {
		return true
	}

	return false
}

// SetInvoiceProratedAdditionsFlag gets a reference to the given NullableBool and assigns it to the InvoiceProratedAdditionsFlag field.
func (o *Agreement) SetInvoiceProratedAdditionsFlag(v bool) {
	o.InvoiceProratedAdditionsFlag.Set(&v)
}

// SetInvoiceProratedAdditionsFlagNil sets the value for InvoiceProratedAdditionsFlag to be an explicit nil
func (o *Agreement) SetInvoiceProratedAdditionsFlagNil() {
	o.InvoiceProratedAdditionsFlag.Set(nil)
}

// UnsetInvoiceProratedAdditionsFlag ensures that no value is present for InvoiceProratedAdditionsFlag, not even an explicit nil
func (o *Agreement) UnsetInvoiceProratedAdditionsFlag() {
	o.InvoiceProratedAdditionsFlag.Unset()
}

// GetInvoiceDescription returns the InvoiceDescription field value if set, zero value otherwise.
func (o *Agreement) GetInvoiceDescription() string {
	if o == nil || IsNil(o.InvoiceDescription) {
		var ret string
		return ret
	}
	return *o.InvoiceDescription
}

// GetInvoiceDescriptionOk returns a tuple with the InvoiceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetInvoiceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDescription) {
		return nil, false
	}
	return o.InvoiceDescription, true
}

// HasInvoiceDescription returns a boolean if a field has been set.
func (o *Agreement) HasInvoiceDescription() bool {
	if o != nil && !IsNil(o.InvoiceDescription) {
		return true
	}

	return false
}

// SetInvoiceDescription gets a reference to the given string and assigns it to the InvoiceDescription field.
func (o *Agreement) SetInvoiceDescription(v string) {
	o.InvoiceDescription = &v
}

// GetTopComment returns the TopComment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetTopComment() bool {
	if o == nil || IsNil(o.TopComment.Get()) {
		var ret bool
		return ret
	}
	return *o.TopComment.Get()
}

// GetTopCommentOk returns a tuple with the TopComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetTopCommentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopComment.Get(), o.TopComment.IsSet()
}

// HasTopComment returns a boolean if a field has been set.
func (o *Agreement) HasTopComment() bool {
	if o != nil && o.TopComment.IsSet() {
		return true
	}

	return false
}

// SetTopComment gets a reference to the given NullableBool and assigns it to the TopComment field.
func (o *Agreement) SetTopComment(v bool) {
	o.TopComment.Set(&v)
}

// SetTopCommentNil sets the value for TopComment to be an explicit nil
func (o *Agreement) SetTopCommentNil() {
	o.TopComment.Set(nil)
}

// UnsetTopComment ensures that no value is present for TopComment, not even an explicit nil
func (o *Agreement) UnsetTopComment() {
	o.TopComment.Unset()
}

// GetBottomComment returns the BottomComment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBottomComment() bool {
	if o == nil || IsNil(o.BottomComment.Get()) {
		var ret bool
		return ret
	}
	return *o.BottomComment.Get()
}

// GetBottomCommentOk returns a tuple with the BottomComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBottomCommentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BottomComment.Get(), o.BottomComment.IsSet()
}

// HasBottomComment returns a boolean if a field has been set.
func (o *Agreement) HasBottomComment() bool {
	if o != nil && o.BottomComment.IsSet() {
		return true
	}

	return false
}

// SetBottomComment gets a reference to the given NullableBool and assigns it to the BottomComment field.
func (o *Agreement) SetBottomComment(v bool) {
	o.BottomComment.Set(&v)
}

// SetBottomCommentNil sets the value for BottomComment to be an explicit nil
func (o *Agreement) SetBottomCommentNil() {
	o.BottomComment.Set(nil)
}

// UnsetBottomComment ensures that no value is present for BottomComment, not even an explicit nil
func (o *Agreement) UnsetBottomComment() {
	o.BottomComment.Unset()
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *Agreement) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *Agreement) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *Agreement) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *Agreement) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *Agreement) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *Agreement) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetProjectType returns the ProjectType field value if set, zero value otherwise.
func (o *Agreement) GetProjectType() ProjectTypeReference {
	if o == nil || IsNil(o.ProjectType) {
		var ret ProjectTypeReference
		return ret
	}
	return *o.ProjectType
}

// GetProjectTypeOk returns a tuple with the ProjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetProjectTypeOk() (*ProjectTypeReference, bool) {
	if o == nil || IsNil(o.ProjectType) {
		return nil, false
	}
	return o.ProjectType, true
}

// HasProjectType returns a boolean if a field has been set.
func (o *Agreement) HasProjectType() bool {
	if o != nil && !IsNil(o.ProjectType) {
		return true
	}

	return false
}

// SetProjectType gets a reference to the given ProjectTypeReference and assigns it to the ProjectType field.
func (o *Agreement) SetProjectType(v ProjectTypeReference) {
	o.ProjectType = &v
}

// GetInvoiceTemplate returns the InvoiceTemplate field value if set, zero value otherwise.
func (o *Agreement) GetInvoiceTemplate() InvoiceTemplateReference {
	if o == nil || IsNil(o.InvoiceTemplate) {
		var ret InvoiceTemplateReference
		return ret
	}
	return *o.InvoiceTemplate
}

// GetInvoiceTemplateOk returns a tuple with the InvoiceTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetInvoiceTemplateOk() (*InvoiceTemplateReference, bool) {
	if o == nil || IsNil(o.InvoiceTemplate) {
		return nil, false
	}
	return o.InvoiceTemplate, true
}

// HasInvoiceTemplate returns a boolean if a field has been set.
func (o *Agreement) HasInvoiceTemplate() bool {
	if o != nil && !IsNil(o.InvoiceTemplate) {
		return true
	}

	return false
}

// SetInvoiceTemplate gets a reference to the given InvoiceTemplateReference and assigns it to the InvoiceTemplate field.
func (o *Agreement) SetInvoiceTemplate(v InvoiceTemplateReference) {
	o.InvoiceTemplate = &v
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *Agreement) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *Agreement) SetBillTime(v string) {
	o.BillTime.Set(&v)
}

// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *Agreement) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *Agreement) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillExpenses returns the BillExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillExpenses() string {
	if o == nil || IsNil(o.BillExpenses.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// HasBillExpenses returns a boolean if a field has been set.
func (o *Agreement) HasBillExpenses() bool {
	if o != nil && o.BillExpenses.IsSet() {
		return true
	}

	return false
}

// SetBillExpenses gets a reference to the given NullableString and assigns it to the BillExpenses field.
func (o *Agreement) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}

// SetBillExpensesNil sets the value for BillExpenses to be an explicit nil
func (o *Agreement) SetBillExpensesNil() {
	o.BillExpenses.Set(nil)
}

// UnsetBillExpenses ensures that no value is present for BillExpenses, not even an explicit nil
func (o *Agreement) UnsetBillExpenses() {
	o.BillExpenses.Unset()
}

// GetBillProducts returns the BillProducts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillProducts() string {
	if o == nil || IsNil(o.BillProducts.Get()) {
		var ret string
		return ret
	}
	return *o.BillProducts.Get()
}

// GetBillProductsOk returns a tuple with the BillProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillProductsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProducts.Get(), o.BillProducts.IsSet()
}

// HasBillProducts returns a boolean if a field has been set.
func (o *Agreement) HasBillProducts() bool {
	if o != nil && o.BillProducts.IsSet() {
		return true
	}

	return false
}

// SetBillProducts gets a reference to the given NullableString and assigns it to the BillProducts field.
func (o *Agreement) SetBillProducts(v string) {
	o.BillProducts.Set(&v)
}

// SetBillProductsNil sets the value for BillProducts to be an explicit nil
func (o *Agreement) SetBillProductsNil() {
	o.BillProducts.Set(nil)
}

// UnsetBillProducts ensures that no value is present for BillProducts, not even an explicit nil
func (o *Agreement) UnsetBillProducts() {
	o.BillProducts.Unset()
}

// GetBillableTimeInvoice returns the BillableTimeInvoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillableTimeInvoice() bool {
	if o == nil || IsNil(o.BillableTimeInvoice.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableTimeInvoice.Get()
}

// GetBillableTimeInvoiceOk returns a tuple with the BillableTimeInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillableTimeInvoiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableTimeInvoice.Get(), o.BillableTimeInvoice.IsSet()
}

// HasBillableTimeInvoice returns a boolean if a field has been set.
func (o *Agreement) HasBillableTimeInvoice() bool {
	if o != nil && o.BillableTimeInvoice.IsSet() {
		return true
	}

	return false
}

// SetBillableTimeInvoice gets a reference to the given NullableBool and assigns it to the BillableTimeInvoice field.
func (o *Agreement) SetBillableTimeInvoice(v bool) {
	o.BillableTimeInvoice.Set(&v)
}

// SetBillableTimeInvoiceNil sets the value for BillableTimeInvoice to be an explicit nil
func (o *Agreement) SetBillableTimeInvoiceNil() {
	o.BillableTimeInvoice.Set(nil)
}

// UnsetBillableTimeInvoice ensures that no value is present for BillableTimeInvoice, not even an explicit nil
func (o *Agreement) UnsetBillableTimeInvoice() {
	o.BillableTimeInvoice.Unset()
}

// GetBillableExpenseInvoice returns the BillableExpenseInvoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillableExpenseInvoice() bool {
	if o == nil || IsNil(o.BillableExpenseInvoice.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableExpenseInvoice.Get()
}

// GetBillableExpenseInvoiceOk returns a tuple with the BillableExpenseInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillableExpenseInvoiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableExpenseInvoice.Get(), o.BillableExpenseInvoice.IsSet()
}

// HasBillableExpenseInvoice returns a boolean if a field has been set.
func (o *Agreement) HasBillableExpenseInvoice() bool {
	if o != nil && o.BillableExpenseInvoice.IsSet() {
		return true
	}

	return false
}

// SetBillableExpenseInvoice gets a reference to the given NullableBool and assigns it to the BillableExpenseInvoice field.
func (o *Agreement) SetBillableExpenseInvoice(v bool) {
	o.BillableExpenseInvoice.Set(&v)
}

// SetBillableExpenseInvoiceNil sets the value for BillableExpenseInvoice to be an explicit nil
func (o *Agreement) SetBillableExpenseInvoiceNil() {
	o.BillableExpenseInvoice.Set(nil)
}

// UnsetBillableExpenseInvoice ensures that no value is present for BillableExpenseInvoice, not even an explicit nil
func (o *Agreement) UnsetBillableExpenseInvoice() {
	o.BillableExpenseInvoice.Unset()
}

// GetBillableProductInvoice returns the BillableProductInvoice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetBillableProductInvoice() bool {
	if o == nil || IsNil(o.BillableProductInvoice.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableProductInvoice.Get()
}

// GetBillableProductInvoiceOk returns a tuple with the BillableProductInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetBillableProductInvoiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableProductInvoice.Get(), o.BillableProductInvoice.IsSet()
}

// HasBillableProductInvoice returns a boolean if a field has been set.
func (o *Agreement) HasBillableProductInvoice() bool {
	if o != nil && o.BillableProductInvoice.IsSet() {
		return true
	}

	return false
}

// SetBillableProductInvoice gets a reference to the given NullableBool and assigns it to the BillableProductInvoice field.
func (o *Agreement) SetBillableProductInvoice(v bool) {
	o.BillableProductInvoice.Set(&v)
}

// SetBillableProductInvoiceNil sets the value for BillableProductInvoice to be an explicit nil
func (o *Agreement) SetBillableProductInvoiceNil() {
	o.BillableProductInvoice.Set(nil)
}

// UnsetBillableProductInvoice ensures that no value is present for BillableProductInvoice, not even an explicit nil
func (o *Agreement) UnsetBillableProductInvoice() {
	o.BillableProductInvoice.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Agreement) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Agreement) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Agreement) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType.Get()) {
		var ret string
		return ret
	}
	return *o.PeriodType.Get()
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetPeriodTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PeriodType.Get(), o.PeriodType.IsSet()
}

// HasPeriodType returns a boolean if a field has been set.
func (o *Agreement) HasPeriodType() bool {
	if o != nil && o.PeriodType.IsSet() {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given NullableString and assigns it to the PeriodType field.
func (o *Agreement) SetPeriodType(v string) {
	o.PeriodType.Set(&v)
}

// SetPeriodTypeNil sets the value for PeriodType to be an explicit nil
func (o *Agreement) SetPeriodTypeNil() {
	o.PeriodType.Set(nil)
}

// UnsetPeriodType ensures that no value is present for PeriodType, not even an explicit nil
func (o *Agreement) UnsetPeriodType() {
	o.PeriodType.Unset()
}

// GetAutoInvoiceFlag returns the AutoInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetAutoInvoiceFlag() bool {
	if o == nil || IsNil(o.AutoInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoInvoiceFlag.Get()
}

// GetAutoInvoiceFlagOk returns a tuple with the AutoInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetAutoInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoInvoiceFlag.Get(), o.AutoInvoiceFlag.IsSet()
}

// HasAutoInvoiceFlag returns a boolean if a field has been set.
func (o *Agreement) HasAutoInvoiceFlag() bool {
	if o != nil && o.AutoInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoInvoiceFlag gets a reference to the given NullableBool and assigns it to the AutoInvoiceFlag field.
func (o *Agreement) SetAutoInvoiceFlag(v bool) {
	o.AutoInvoiceFlag.Set(&v)
}

// SetAutoInvoiceFlagNil sets the value for AutoInvoiceFlag to be an explicit nil
func (o *Agreement) SetAutoInvoiceFlagNil() {
	o.AutoInvoiceFlag.Set(nil)
}

// UnsetAutoInvoiceFlag ensures that no value is present for AutoInvoiceFlag, not even an explicit nil
func (o *Agreement) UnsetAutoInvoiceFlag() {
	o.AutoInvoiceFlag.Unset()
}

// GetNextInvoiceDate returns the NextInvoiceDate field value if set, zero value otherwise.
func (o *Agreement) GetNextInvoiceDate() string {
	if o == nil || IsNil(o.NextInvoiceDate) {
		var ret string
		return ret
	}
	return *o.NextInvoiceDate
}

// GetNextInvoiceDateOk returns a tuple with the NextInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetNextInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextInvoiceDate) {
		return nil, false
	}
	return o.NextInvoiceDate, true
}

// HasNextInvoiceDate returns a boolean if a field has been set.
func (o *Agreement) HasNextInvoiceDate() bool {
	if o != nil && !IsNil(o.NextInvoiceDate) {
		return true
	}

	return false
}

// SetNextInvoiceDate gets a reference to the given string and assigns it to the NextInvoiceDate field.
func (o *Agreement) SetNextInvoiceDate(v string) {
	o.NextInvoiceDate = &v
}

// GetCompanyLocation returns the CompanyLocation field value if set, zero value otherwise.
func (o *Agreement) GetCompanyLocation() SystemLocationReference {
	if o == nil || IsNil(o.CompanyLocation) {
		var ret SystemLocationReference
		return ret
	}
	return *o.CompanyLocation
}

// GetCompanyLocationOk returns a tuple with the CompanyLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetCompanyLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.CompanyLocation) {
		return nil, false
	}
	return o.CompanyLocation, true
}

// HasCompanyLocation returns a boolean if a field has been set.
func (o *Agreement) HasCompanyLocation() bool {
	if o != nil && !IsNil(o.CompanyLocation) {
		return true
	}

	return false
}

// SetCompanyLocation gets a reference to the given SystemLocationReference and assigns it to the CompanyLocation field.
func (o *Agreement) SetCompanyLocation(v SystemLocationReference) {
	o.CompanyLocation = &v
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *Agreement) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *Agreement) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *Agreement) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToContact returns the ShipToContact field value if set, zero value otherwise.
func (o *Agreement) GetShipToContact() ContactReference {
	if o == nil || IsNil(o.ShipToContact) {
		var ret ContactReference
		return ret
	}
	return *o.ShipToContact
}

// GetShipToContactOk returns a tuple with the ShipToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetShipToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.ShipToContact) {
		return nil, false
	}
	return o.ShipToContact, true
}

// HasShipToContact returns a boolean if a field has been set.
func (o *Agreement) HasShipToContact() bool {
	if o != nil && !IsNil(o.ShipToContact) {
		return true
	}

	return false
}

// SetShipToContact gets a reference to the given ContactReference and assigns it to the ShipToContact field.
func (o *Agreement) SetShipToContact(v ContactReference) {
	o.ShipToContact = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *Agreement) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *Agreement) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *Agreement) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetAgreementStatus returns the AgreementStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Agreement) GetAgreementStatus() string {
	if o == nil || IsNil(o.AgreementStatus.Get()) {
		var ret string
		return ret
	}
	return *o.AgreementStatus.Get()
}

// GetAgreementStatusOk returns a tuple with the AgreementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Agreement) GetAgreementStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementStatus.Get(), o.AgreementStatus.IsSet()
}

// HasAgreementStatus returns a boolean if a field has been set.
func (o *Agreement) HasAgreementStatus() bool {
	if o != nil && o.AgreementStatus.IsSet() {
		return true
	}

	return false
}

// SetAgreementStatus gets a reference to the given NullableString and assigns it to the AgreementStatus field.
func (o *Agreement) SetAgreementStatus(v string) {
	o.AgreementStatus.Set(&v)
}

// SetAgreementStatusNil sets the value for AgreementStatus to be an explicit nil
func (o *Agreement) SetAgreementStatusNil() {
	o.AgreementStatus.Set(nil)
}

// UnsetAgreementStatus ensures that no value is present for AgreementStatus, not even an explicit nil
func (o *Agreement) UnsetAgreementStatus() {
	o.AgreementStatus.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Agreement) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Agreement) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Agreement) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Agreement) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Agreement) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Agreement) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Agreement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Agreement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["company"] = o.Company
	toSerialize["contact"] = o.Contact
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.SubContractCompany) {
		toSerialize["subContractCompany"] = o.SubContractCompany
	}
	if !IsNil(o.SubContractContact) {
		toSerialize["subContractContact"] = o.SubContractContact
	}
	if !IsNil(o.ParentAgreement) {
		toSerialize["parentAgreement"] = o.ParentAgreement
	}
	if !IsNil(o.CustomerPO) {
		toSerialize["customerPO"] = o.CustomerPO
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.RestrictLocationFlag.IsSet() {
		toSerialize["restrictLocationFlag"] = o.RestrictLocationFlag.Get()
	}
	if o.RestrictDepartmentFlag.IsSet() {
		toSerialize["restrictDepartmentFlag"] = o.RestrictDepartmentFlag.Get()
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if o.NoEndingDateFlag.IsSet() {
		toSerialize["noEndingDateFlag"] = o.NoEndingDateFlag.Get()
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if o.CancelledFlag.IsSet() {
		toSerialize["cancelledFlag"] = o.CancelledFlag.Get()
	}
	if !IsNil(o.DateCancelled) {
		toSerialize["dateCancelled"] = o.DateCancelled
	}
	if !IsNil(o.ReasonCancelled) {
		toSerialize["reasonCancelled"] = o.ReasonCancelled
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.WorkOrder) {
		toSerialize["workOrder"] = o.WorkOrder
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if o.ApplicationUnits.IsSet() {
		toSerialize["applicationUnits"] = o.ApplicationUnits.Get()
	}
	if o.ApplicationLimit.IsSet() {
		toSerialize["applicationLimit"] = o.ApplicationLimit.Get()
	}
	if o.ApplicationCycle.IsSet() {
		toSerialize["applicationCycle"] = o.ApplicationCycle.Get()
	}
	if o.ApplicationUnlimitedFlag.IsSet() {
		toSerialize["applicationUnlimitedFlag"] = o.ApplicationUnlimitedFlag.Get()
	}
	if o.OneTimeFlag.IsSet() {
		toSerialize["oneTimeFlag"] = o.OneTimeFlag.Get()
	}
	if o.CoverAgreementTime.IsSet() {
		toSerialize["coverAgreementTime"] = o.CoverAgreementTime.Get()
	}
	if o.CoverAgreementProduct.IsSet() {
		toSerialize["coverAgreementProduct"] = o.CoverAgreementProduct.Get()
	}
	if o.CoverAgreementExpense.IsSet() {
		toSerialize["coverAgreementExpense"] = o.CoverAgreementExpense.Get()
	}
	if o.CoverSalesTax.IsSet() {
		toSerialize["coverSalesTax"] = o.CoverSalesTax.Get()
	}
	if o.CarryOverUnused.IsSet() {
		toSerialize["carryOverUnused"] = o.CarryOverUnused.Get()
	}
	if o.AllowOverruns.IsSet() {
		toSerialize["allowOverruns"] = o.AllowOverruns.Get()
	}
	if o.ExpiredDays.IsSet() {
		toSerialize["expiredDays"] = o.ExpiredDays.Get()
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if o.ExpireWhenZero.IsSet() {
		toSerialize["expireWhenZero"] = o.ExpireWhenZero.Get()
	}
	if o.ChargeToFirm.IsSet() {
		toSerialize["chargeToFirm"] = o.ChargeToFirm.Get()
	}
	if o.EmployeeCompRate.IsSet() {
		toSerialize["employeeCompRate"] = o.EmployeeCompRate.Get()
	}
	if o.EmployeeCompNotExceed.IsSet() {
		toSerialize["employeeCompNotExceed"] = o.EmployeeCompNotExceed.Get()
	}
	if o.CompHourlyRate.IsSet() {
		toSerialize["compHourlyRate"] = o.CompHourlyRate.Get()
	}
	if o.CompLimitAmount.IsSet() {
		toSerialize["compLimitAmount"] = o.CompLimitAmount.Get()
	}
	if !IsNil(o.BillingCycle) {
		toSerialize["billingCycle"] = o.BillingCycle
	}
	if o.BillOneTimeFlag.IsSet() {
		toSerialize["billOneTimeFlag"] = o.BillOneTimeFlag.Get()
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if o.InvoicingCycle.IsSet() {
		toSerialize["invoicingCycle"] = o.InvoicingCycle.Get()
	}
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.BillToContact) {
		toSerialize["billToContact"] = o.BillToContact
	}
	if !IsNil(o.BillToSite) {
		toSerialize["billToSite"] = o.BillToSite
	}
	if o.BillAmount.IsSet() {
		toSerialize["billAmount"] = o.BillAmount.Get()
	}
	if o.Taxable.IsSet() {
		toSerialize["taxable"] = o.Taxable.Get()
	}
	if o.ProrateFirstBill.IsSet() {
		toSerialize["prorateFirstBill"] = o.ProrateFirstBill.Get()
	}
	if !IsNil(o.BillStartDate) {
		toSerialize["billStartDate"] = o.BillStartDate
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.RestrictDownPayment.IsSet() {
		toSerialize["restrictDownPayment"] = o.RestrictDownPayment.Get()
	}
	if o.ProrateFlag.IsSet() {
		toSerialize["prorateFlag"] = o.ProrateFlag.Get()
	}
	if o.InvoiceProratedAdditionsFlag.IsSet() {
		toSerialize["invoiceProratedAdditionsFlag"] = o.InvoiceProratedAdditionsFlag.Get()
	}
	if !IsNil(o.InvoiceDescription) {
		toSerialize["invoiceDescription"] = o.InvoiceDescription
	}
	if o.TopComment.IsSet() {
		toSerialize["topComment"] = o.TopComment.Get()
	}
	if o.BottomComment.IsSet() {
		toSerialize["bottomComment"] = o.BottomComment.Get()
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.ProjectType) {
		toSerialize["projectType"] = o.ProjectType
	}
	if !IsNil(o.InvoiceTemplate) {
		toSerialize["invoiceTemplate"] = o.InvoiceTemplate
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.BillExpenses.IsSet() {
		toSerialize["billExpenses"] = o.BillExpenses.Get()
	}
	if o.BillProducts.IsSet() {
		toSerialize["billProducts"] = o.BillProducts.Get()
	}
	if o.BillableTimeInvoice.IsSet() {
		toSerialize["billableTimeInvoice"] = o.BillableTimeInvoice.Get()
	}
	if o.BillableExpenseInvoice.IsSet() {
		toSerialize["billableExpenseInvoice"] = o.BillableExpenseInvoice.Get()
	}
	if o.BillableProductInvoice.IsSet() {
		toSerialize["billableProductInvoice"] = o.BillableProductInvoice.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.PeriodType.IsSet() {
		toSerialize["periodType"] = o.PeriodType.Get()
	}
	if o.AutoInvoiceFlag.IsSet() {
		toSerialize["autoInvoiceFlag"] = o.AutoInvoiceFlag.Get()
	}
	if !IsNil(o.NextInvoiceDate) {
		toSerialize["nextInvoiceDate"] = o.NextInvoiceDate
	}
	if !IsNil(o.CompanyLocation) {
		toSerialize["companyLocation"] = o.CompanyLocation
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToContact) {
		toSerialize["shipToContact"] = o.ShipToContact
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if o.AgreementStatus.IsSet() {
		toSerialize["agreementStatus"] = o.AgreementStatus.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Agreement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"company",
		"contact",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreement := _Agreement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreement)

	if err != nil {
		return err
	}

	*o = Agreement(varAgreement)

	return err
}

type NullableAgreement struct {
	value *Agreement
	isSet bool
}

func (v NullableAgreement) Get() *Agreement {
	return v.value
}

func (v *NullableAgreement) Set(val *Agreement) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreement(val *Agreement) *NullableAgreement {
	return &NullableAgreement{value: val, isSet: true}
}

func (v NullableAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
