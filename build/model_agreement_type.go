/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AgreementType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementType{}

// AgreementType struct for AgreementType
type AgreementType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name               string         `json:"name"`
	PrefixSuffixOption NullableString `json:"prefixSuffixOption,omitempty"`
	DefaultFlag        NullableBool   `json:"defaultFlag,omitempty"`
	InactiveFlag       NullableBool   `json:"inactiveFlag,omitempty"`
	PrePaymentFlag     NullableBool   `json:"prePaymentFlag,omitempty"`
	//  Max length: 5;
	InvoicePreSuffix          *string                    `json:"invoicePreSuffix,omitempty"`
	Location                  *SystemLocationReference   `json:"location,omitempty"`
	Department                *SystemDepartmentReference `json:"department,omitempty"`
	RestrictLocationFlag      NullableBool               `json:"restrictLocationFlag,omitempty"`
	RestrictDepartmentFlag    NullableBool               `json:"restrictDepartmentFlag,omitempty"`
	Sla                       *SLAReference              `json:"sla,omitempty"`
	ApplicationUnits          NullableString             `json:"applicationUnits,omitempty"`
	ApplicationLimit          NullableFloat64            `json:"applicationLimit,omitempty"`
	ApplicationCycle          NullableString             `json:"applicationCycle,omitempty"`
	ApplicationUnlimitedFlag  NullableBool               `json:"applicationUnlimitedFlag,omitempty"`
	OneTimeFlag               NullableBool               `json:"oneTimeFlag,omitempty"`
	CoverAgreementTimeFlag    NullableBool               `json:"coverAgreementTimeFlag,omitempty"`
	CoverAgreementProductFlag NullableBool               `json:"coverAgreementProductFlag,omitempty"`
	CoverAgreementExpenseFlag NullableBool               `json:"coverAgreementExpenseFlag,omitempty"`
	CoverSalesTaxFlag         NullableBool               `json:"coverSalesTaxFlag,omitempty"`
	CarryOverUnusedFlag       NullableBool               `json:"carryOverUnusedFlag,omitempty"`
	AllowOverrunsFlag         NullableBool               `json:"allowOverrunsFlag,omitempty"`
	ExpiredDays               NullableInt32              `json:"expiredDays,omitempty"`
	Limit                     NullableInt32              `json:"limit,omitempty"`
	ExpireWhenZero            NullableBool               `json:"expireWhenZero,omitempty"`
	ChargeToFirmFlag          NullableBool               `json:"chargeToFirmFlag,omitempty"`
	EmployeeCompRate          NullableString             `json:"employeeCompRate"`
	EmployeeCompNotExceed     NullableString             `json:"employeeCompNotExceed"`
	CompHourlyRate            NullableFloat64            `json:"compHourlyRate,omitempty"`
	CompLimitAmount           NullableFloat64            `json:"compLimitAmount,omitempty"`
	BillingCycle              *BillingCycleReference     `json:"billingCycle,omitempty"`
	BillOneTimeFlag           NullableBool               `json:"billOneTimeFlag,omitempty"`
	BillingTerms              *BillingTermsReference     `json:"billingTerms,omitempty"`
	InvoicingCycle            NullableString             `json:"invoicingCycle"`
	BillAmount                NullableFloat64            `json:"billAmount,omitempty"`
	TaxableFlag               NullableBool               `json:"taxableFlag,omitempty"`
	RestrictDownPaymentFlag   NullableBool               `json:"restrictDownPaymentFlag,omitempty"`
	//  Max length: 4000;
	InvoiceDescription          *string                   `json:"invoiceDescription,omitempty"`
	TopCommentFlag              NullableBool              `json:"topCommentFlag,omitempty"`
	BottomCommentFlag           NullableBool              `json:"bottomCommentFlag,omitempty"`
	WorkRole                    *WorkRoleReference        `json:"workRole,omitempty"`
	WorkType                    *WorkTypeReference        `json:"workType,omitempty"`
	ProjectType                 *ProjectTypeReference     `json:"projectType,omitempty"`
	InvoiceTemplate             *InvoiceTemplateReference `json:"invoiceTemplate,omitempty"`
	BillTime                    NullableString            `json:"billTime"`
	BillExpenses                NullableString            `json:"billExpenses"`
	BillProducts                NullableString            `json:"billProducts"`
	BillableTimeInvoiceFlag     NullableBool              `json:"billableTimeInvoiceFlag,omitempty"`
	BillableExpenseInvoiceFlag  NullableBool              `json:"billableExpenseInvoiceFlag,omitempty"`
	BillableProductInvoiceFlag  NullableBool              `json:"billableProductInvoiceFlag,omitempty"`
	CopyWorkRolesFlag           NullableBool              `json:"copyWorkRolesFlag,omitempty"`
	CopyWorkTypesFlag           NullableBool              `json:"copyWorkTypesFlag,omitempty"`
	ExclusionWorkRoleIds        []int32                   `json:"exclusionWorkRoleIds,omitempty"`
	AddAllWorkRoleExclusions    NullableBool              `json:"addAllWorkRoleExclusions,omitempty"`
	RemoveAllWorkRoleExclusions NullableBool              `json:"removeAllWorkRoleExclusions,omitempty"`
	ExclusionWorkTypeIds        []int32                   `json:"exclusionWorkTypeIds,omitempty"`
	AddAllWorkTypeExclusions    NullableBool              `json:"addAllWorkTypeExclusions,omitempty"`
	RemoveAllWorkTypeExclusions NullableBool              `json:"removeAllWorkTypeExclusions,omitempty"`
	//  Max length: 50;
	IntegrationXRef              *string                 `json:"integrationXRef,omitempty"`
	ProrateFlag                  NullableBool            `json:"prorateFlag,omitempty"`
	EmailTemplate                *EmailTemplateReference `json:"emailTemplate,omitempty"`
	AutoInvoiceFlag              NullableBool            `json:"autoInvoiceFlag,omitempty"`
	InvoiceProratedAdditionsFlag NullableBool            `json:"invoiceProratedAdditionsFlag,omitempty"`
	Info                         *map[string]string      `json:"_info,omitempty"`
}

type _AgreementType AgreementType

// NewAgreementType instantiates a new AgreementType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementType(name string, employeeCompRate NullableString, employeeCompNotExceed NullableString, invoicingCycle NullableString, billTime NullableString, billExpenses NullableString, billProducts NullableString) *AgreementType {
	this := AgreementType{}
	this.Name = name
	this.EmployeeCompRate = employeeCompRate
	this.EmployeeCompNotExceed = employeeCompNotExceed
	this.InvoicingCycle = invoicingCycle
	this.BillTime = billTime
	this.BillExpenses = billExpenses
	this.BillProducts = billProducts
	return &this
}

// NewAgreementTypeWithDefaults instantiates a new AgreementType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementTypeWithDefaults() *AgreementType {
	this := AgreementType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AgreementType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AgreementType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AgreementType) SetName(v string) {
	o.Name = v
}

// GetPrefixSuffixOption returns the PrefixSuffixOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetPrefixSuffixOption() string {
	if o == nil || IsNil(o.PrefixSuffixOption.Get()) {
		var ret string
		return ret
	}
	return *o.PrefixSuffixOption.Get()
}

// GetPrefixSuffixOptionOk returns a tuple with the PrefixSuffixOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetPrefixSuffixOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrefixSuffixOption.Get(), o.PrefixSuffixOption.IsSet()
}

// HasPrefixSuffixOption returns a boolean if a field has been set.
func (o *AgreementType) HasPrefixSuffixOption() bool {
	if o != nil && o.PrefixSuffixOption.IsSet() {
		return true
	}

	return false
}

// SetPrefixSuffixOption gets a reference to the given NullableString and assigns it to the PrefixSuffixOption field.
func (o *AgreementType) SetPrefixSuffixOption(v string) {
	o.PrefixSuffixOption.Set(&v)
}

// SetPrefixSuffixOptionNil sets the value for PrefixSuffixOption to be an explicit nil
func (o *AgreementType) SetPrefixSuffixOptionNil() {
	o.PrefixSuffixOption.Set(nil)
}

// UnsetPrefixSuffixOption ensures that no value is present for PrefixSuffixOption, not even an explicit nil
func (o *AgreementType) UnsetPrefixSuffixOption() {
	o.PrefixSuffixOption.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *AgreementType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *AgreementType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *AgreementType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *AgreementType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *AgreementType) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *AgreementType) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *AgreementType) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *AgreementType) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetPrePaymentFlag returns the PrePaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetPrePaymentFlag() bool {
	if o == nil || IsNil(o.PrePaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PrePaymentFlag.Get()
}

// GetPrePaymentFlagOk returns a tuple with the PrePaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetPrePaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrePaymentFlag.Get(), o.PrePaymentFlag.IsSet()
}

// HasPrePaymentFlag returns a boolean if a field has been set.
func (o *AgreementType) HasPrePaymentFlag() bool {
	if o != nil && o.PrePaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetPrePaymentFlag gets a reference to the given NullableBool and assigns it to the PrePaymentFlag field.
func (o *AgreementType) SetPrePaymentFlag(v bool) {
	o.PrePaymentFlag.Set(&v)
}

// SetPrePaymentFlagNil sets the value for PrePaymentFlag to be an explicit nil
func (o *AgreementType) SetPrePaymentFlagNil() {
	o.PrePaymentFlag.Set(nil)
}

// UnsetPrePaymentFlag ensures that no value is present for PrePaymentFlag, not even an explicit nil
func (o *AgreementType) UnsetPrePaymentFlag() {
	o.PrePaymentFlag.Unset()
}

// GetInvoicePreSuffix returns the InvoicePreSuffix field value if set, zero value otherwise.
func (o *AgreementType) GetInvoicePreSuffix() string {
	if o == nil || IsNil(o.InvoicePreSuffix) {
		var ret string
		return ret
	}
	return *o.InvoicePreSuffix
}

// GetInvoicePreSuffixOk returns a tuple with the InvoicePreSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetInvoicePreSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.InvoicePreSuffix) {
		return nil, false
	}
	return o.InvoicePreSuffix, true
}

// HasInvoicePreSuffix returns a boolean if a field has been set.
func (o *AgreementType) HasInvoicePreSuffix() bool {
	if o != nil && !IsNil(o.InvoicePreSuffix) {
		return true
	}

	return false
}

// SetInvoicePreSuffix gets a reference to the given string and assigns it to the InvoicePreSuffix field.
func (o *AgreementType) SetInvoicePreSuffix(v string) {
	o.InvoicePreSuffix = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AgreementType) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AgreementType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *AgreementType) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *AgreementType) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *AgreementType) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *AgreementType) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetRestrictLocationFlag returns the RestrictLocationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetRestrictLocationFlag() bool {
	if o == nil || IsNil(o.RestrictLocationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictLocationFlag.Get()
}

// GetRestrictLocationFlagOk returns a tuple with the RestrictLocationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetRestrictLocationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictLocationFlag.Get(), o.RestrictLocationFlag.IsSet()
}

// HasRestrictLocationFlag returns a boolean if a field has been set.
func (o *AgreementType) HasRestrictLocationFlag() bool {
	if o != nil && o.RestrictLocationFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictLocationFlag gets a reference to the given NullableBool and assigns it to the RestrictLocationFlag field.
func (o *AgreementType) SetRestrictLocationFlag(v bool) {
	o.RestrictLocationFlag.Set(&v)
}

// SetRestrictLocationFlagNil sets the value for RestrictLocationFlag to be an explicit nil
func (o *AgreementType) SetRestrictLocationFlagNil() {
	o.RestrictLocationFlag.Set(nil)
}

// UnsetRestrictLocationFlag ensures that no value is present for RestrictLocationFlag, not even an explicit nil
func (o *AgreementType) UnsetRestrictLocationFlag() {
	o.RestrictLocationFlag.Unset()
}

// GetRestrictDepartmentFlag returns the RestrictDepartmentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetRestrictDepartmentFlag() bool {
	if o == nil || IsNil(o.RestrictDepartmentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDepartmentFlag.Get()
}

// GetRestrictDepartmentFlagOk returns a tuple with the RestrictDepartmentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetRestrictDepartmentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDepartmentFlag.Get(), o.RestrictDepartmentFlag.IsSet()
}

// HasRestrictDepartmentFlag returns a boolean if a field has been set.
func (o *AgreementType) HasRestrictDepartmentFlag() bool {
	if o != nil && o.RestrictDepartmentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDepartmentFlag gets a reference to the given NullableBool and assigns it to the RestrictDepartmentFlag field.
func (o *AgreementType) SetRestrictDepartmentFlag(v bool) {
	o.RestrictDepartmentFlag.Set(&v)
}

// SetRestrictDepartmentFlagNil sets the value for RestrictDepartmentFlag to be an explicit nil
func (o *AgreementType) SetRestrictDepartmentFlagNil() {
	o.RestrictDepartmentFlag.Set(nil)
}

// UnsetRestrictDepartmentFlag ensures that no value is present for RestrictDepartmentFlag, not even an explicit nil
func (o *AgreementType) UnsetRestrictDepartmentFlag() {
	o.RestrictDepartmentFlag.Unset()
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *AgreementType) GetSla() SLAReference {
	if o == nil || IsNil(o.Sla) {
		var ret SLAReference
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetSlaOk() (*SLAReference, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *AgreementType) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLAReference and assigns it to the Sla field.
func (o *AgreementType) SetSla(v SLAReference) {
	o.Sla = &v
}

// GetApplicationUnits returns the ApplicationUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetApplicationUnits() string {
	if o == nil || IsNil(o.ApplicationUnits.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationUnits.Get()
}

// GetApplicationUnitsOk returns a tuple with the ApplicationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetApplicationUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationUnits.Get(), o.ApplicationUnits.IsSet()
}

// HasApplicationUnits returns a boolean if a field has been set.
func (o *AgreementType) HasApplicationUnits() bool {
	if o != nil && o.ApplicationUnits.IsSet() {
		return true
	}

	return false
}

// SetApplicationUnits gets a reference to the given NullableString and assigns it to the ApplicationUnits field.
func (o *AgreementType) SetApplicationUnits(v string) {
	o.ApplicationUnits.Set(&v)
}

// SetApplicationUnitsNil sets the value for ApplicationUnits to be an explicit nil
func (o *AgreementType) SetApplicationUnitsNil() {
	o.ApplicationUnits.Set(nil)
}

// UnsetApplicationUnits ensures that no value is present for ApplicationUnits, not even an explicit nil
func (o *AgreementType) UnsetApplicationUnits() {
	o.ApplicationUnits.Unset()
}

// GetApplicationLimit returns the ApplicationLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetApplicationLimit() float64 {
	if o == nil || IsNil(o.ApplicationLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.ApplicationLimit.Get()
}

// GetApplicationLimitOk returns a tuple with the ApplicationLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetApplicationLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationLimit.Get(), o.ApplicationLimit.IsSet()
}

// HasApplicationLimit returns a boolean if a field has been set.
func (o *AgreementType) HasApplicationLimit() bool {
	if o != nil && o.ApplicationLimit.IsSet() {
		return true
	}

	return false
}

// SetApplicationLimit gets a reference to the given NullableFloat64 and assigns it to the ApplicationLimit field.
func (o *AgreementType) SetApplicationLimit(v float64) {
	o.ApplicationLimit.Set(&v)
}

// SetApplicationLimitNil sets the value for ApplicationLimit to be an explicit nil
func (o *AgreementType) SetApplicationLimitNil() {
	o.ApplicationLimit.Set(nil)
}

// UnsetApplicationLimit ensures that no value is present for ApplicationLimit, not even an explicit nil
func (o *AgreementType) UnsetApplicationLimit() {
	o.ApplicationLimit.Unset()
}

// GetApplicationCycle returns the ApplicationCycle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetApplicationCycle() string {
	if o == nil || IsNil(o.ApplicationCycle.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationCycle.Get()
}

// GetApplicationCycleOk returns a tuple with the ApplicationCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetApplicationCycleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationCycle.Get(), o.ApplicationCycle.IsSet()
}

// HasApplicationCycle returns a boolean if a field has been set.
func (o *AgreementType) HasApplicationCycle() bool {
	if o != nil && o.ApplicationCycle.IsSet() {
		return true
	}

	return false
}

// SetApplicationCycle gets a reference to the given NullableString and assigns it to the ApplicationCycle field.
func (o *AgreementType) SetApplicationCycle(v string) {
	o.ApplicationCycle.Set(&v)
}

// SetApplicationCycleNil sets the value for ApplicationCycle to be an explicit nil
func (o *AgreementType) SetApplicationCycleNil() {
	o.ApplicationCycle.Set(nil)
}

// UnsetApplicationCycle ensures that no value is present for ApplicationCycle, not even an explicit nil
func (o *AgreementType) UnsetApplicationCycle() {
	o.ApplicationCycle.Unset()
}

// GetApplicationUnlimitedFlag returns the ApplicationUnlimitedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetApplicationUnlimitedFlag() bool {
	if o == nil || IsNil(o.ApplicationUnlimitedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ApplicationUnlimitedFlag.Get()
}

// GetApplicationUnlimitedFlagOk returns a tuple with the ApplicationUnlimitedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetApplicationUnlimitedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationUnlimitedFlag.Get(), o.ApplicationUnlimitedFlag.IsSet()
}

// HasApplicationUnlimitedFlag returns a boolean if a field has been set.
func (o *AgreementType) HasApplicationUnlimitedFlag() bool {
	if o != nil && o.ApplicationUnlimitedFlag.IsSet() {
		return true
	}

	return false
}

// SetApplicationUnlimitedFlag gets a reference to the given NullableBool and assigns it to the ApplicationUnlimitedFlag field.
func (o *AgreementType) SetApplicationUnlimitedFlag(v bool) {
	o.ApplicationUnlimitedFlag.Set(&v)
}

// SetApplicationUnlimitedFlagNil sets the value for ApplicationUnlimitedFlag to be an explicit nil
func (o *AgreementType) SetApplicationUnlimitedFlagNil() {
	o.ApplicationUnlimitedFlag.Set(nil)
}

// UnsetApplicationUnlimitedFlag ensures that no value is present for ApplicationUnlimitedFlag, not even an explicit nil
func (o *AgreementType) UnsetApplicationUnlimitedFlag() {
	o.ApplicationUnlimitedFlag.Unset()
}

// GetOneTimeFlag returns the OneTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetOneTimeFlag() bool {
	if o == nil || IsNil(o.OneTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OneTimeFlag.Get()
}

// GetOneTimeFlagOk returns a tuple with the OneTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetOneTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OneTimeFlag.Get(), o.OneTimeFlag.IsSet()
}

// HasOneTimeFlag returns a boolean if a field has been set.
func (o *AgreementType) HasOneTimeFlag() bool {
	if o != nil && o.OneTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetOneTimeFlag gets a reference to the given NullableBool and assigns it to the OneTimeFlag field.
func (o *AgreementType) SetOneTimeFlag(v bool) {
	o.OneTimeFlag.Set(&v)
}

// SetOneTimeFlagNil sets the value for OneTimeFlag to be an explicit nil
func (o *AgreementType) SetOneTimeFlagNil() {
	o.OneTimeFlag.Set(nil)
}

// UnsetOneTimeFlag ensures that no value is present for OneTimeFlag, not even an explicit nil
func (o *AgreementType) UnsetOneTimeFlag() {
	o.OneTimeFlag.Unset()
}

// GetCoverAgreementTimeFlag returns the CoverAgreementTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCoverAgreementTimeFlag() bool {
	if o == nil || IsNil(o.CoverAgreementTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverAgreementTimeFlag.Get()
}

// GetCoverAgreementTimeFlagOk returns a tuple with the CoverAgreementTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCoverAgreementTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverAgreementTimeFlag.Get(), o.CoverAgreementTimeFlag.IsSet()
}

// HasCoverAgreementTimeFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCoverAgreementTimeFlag() bool {
	if o != nil && o.CoverAgreementTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetCoverAgreementTimeFlag gets a reference to the given NullableBool and assigns it to the CoverAgreementTimeFlag field.
func (o *AgreementType) SetCoverAgreementTimeFlag(v bool) {
	o.CoverAgreementTimeFlag.Set(&v)
}

// SetCoverAgreementTimeFlagNil sets the value for CoverAgreementTimeFlag to be an explicit nil
func (o *AgreementType) SetCoverAgreementTimeFlagNil() {
	o.CoverAgreementTimeFlag.Set(nil)
}

// UnsetCoverAgreementTimeFlag ensures that no value is present for CoverAgreementTimeFlag, not even an explicit nil
func (o *AgreementType) UnsetCoverAgreementTimeFlag() {
	o.CoverAgreementTimeFlag.Unset()
}

// GetCoverAgreementProductFlag returns the CoverAgreementProductFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCoverAgreementProductFlag() bool {
	if o == nil || IsNil(o.CoverAgreementProductFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverAgreementProductFlag.Get()
}

// GetCoverAgreementProductFlagOk returns a tuple with the CoverAgreementProductFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCoverAgreementProductFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverAgreementProductFlag.Get(), o.CoverAgreementProductFlag.IsSet()
}

// HasCoverAgreementProductFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCoverAgreementProductFlag() bool {
	if o != nil && o.CoverAgreementProductFlag.IsSet() {
		return true
	}

	return false
}

// SetCoverAgreementProductFlag gets a reference to the given NullableBool and assigns it to the CoverAgreementProductFlag field.
func (o *AgreementType) SetCoverAgreementProductFlag(v bool) {
	o.CoverAgreementProductFlag.Set(&v)
}

// SetCoverAgreementProductFlagNil sets the value for CoverAgreementProductFlag to be an explicit nil
func (o *AgreementType) SetCoverAgreementProductFlagNil() {
	o.CoverAgreementProductFlag.Set(nil)
}

// UnsetCoverAgreementProductFlag ensures that no value is present for CoverAgreementProductFlag, not even an explicit nil
func (o *AgreementType) UnsetCoverAgreementProductFlag() {
	o.CoverAgreementProductFlag.Unset()
}

// GetCoverAgreementExpenseFlag returns the CoverAgreementExpenseFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCoverAgreementExpenseFlag() bool {
	if o == nil || IsNil(o.CoverAgreementExpenseFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverAgreementExpenseFlag.Get()
}

// GetCoverAgreementExpenseFlagOk returns a tuple with the CoverAgreementExpenseFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCoverAgreementExpenseFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverAgreementExpenseFlag.Get(), o.CoverAgreementExpenseFlag.IsSet()
}

// HasCoverAgreementExpenseFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCoverAgreementExpenseFlag() bool {
	if o != nil && o.CoverAgreementExpenseFlag.IsSet() {
		return true
	}

	return false
}

// SetCoverAgreementExpenseFlag gets a reference to the given NullableBool and assigns it to the CoverAgreementExpenseFlag field.
func (o *AgreementType) SetCoverAgreementExpenseFlag(v bool) {
	o.CoverAgreementExpenseFlag.Set(&v)
}

// SetCoverAgreementExpenseFlagNil sets the value for CoverAgreementExpenseFlag to be an explicit nil
func (o *AgreementType) SetCoverAgreementExpenseFlagNil() {
	o.CoverAgreementExpenseFlag.Set(nil)
}

// UnsetCoverAgreementExpenseFlag ensures that no value is present for CoverAgreementExpenseFlag, not even an explicit nil
func (o *AgreementType) UnsetCoverAgreementExpenseFlag() {
	o.CoverAgreementExpenseFlag.Unset()
}

// GetCoverSalesTaxFlag returns the CoverSalesTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCoverSalesTaxFlag() bool {
	if o == nil || IsNil(o.CoverSalesTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CoverSalesTaxFlag.Get()
}

// GetCoverSalesTaxFlagOk returns a tuple with the CoverSalesTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCoverSalesTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverSalesTaxFlag.Get(), o.CoverSalesTaxFlag.IsSet()
}

// HasCoverSalesTaxFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCoverSalesTaxFlag() bool {
	if o != nil && o.CoverSalesTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCoverSalesTaxFlag gets a reference to the given NullableBool and assigns it to the CoverSalesTaxFlag field.
func (o *AgreementType) SetCoverSalesTaxFlag(v bool) {
	o.CoverSalesTaxFlag.Set(&v)
}

// SetCoverSalesTaxFlagNil sets the value for CoverSalesTaxFlag to be an explicit nil
func (o *AgreementType) SetCoverSalesTaxFlagNil() {
	o.CoverSalesTaxFlag.Set(nil)
}

// UnsetCoverSalesTaxFlag ensures that no value is present for CoverSalesTaxFlag, not even an explicit nil
func (o *AgreementType) UnsetCoverSalesTaxFlag() {
	o.CoverSalesTaxFlag.Unset()
}

// GetCarryOverUnusedFlag returns the CarryOverUnusedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCarryOverUnusedFlag() bool {
	if o == nil || IsNil(o.CarryOverUnusedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CarryOverUnusedFlag.Get()
}

// GetCarryOverUnusedFlagOk returns a tuple with the CarryOverUnusedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCarryOverUnusedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CarryOverUnusedFlag.Get(), o.CarryOverUnusedFlag.IsSet()
}

// HasCarryOverUnusedFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCarryOverUnusedFlag() bool {
	if o != nil && o.CarryOverUnusedFlag.IsSet() {
		return true
	}

	return false
}

// SetCarryOverUnusedFlag gets a reference to the given NullableBool and assigns it to the CarryOverUnusedFlag field.
func (o *AgreementType) SetCarryOverUnusedFlag(v bool) {
	o.CarryOverUnusedFlag.Set(&v)
}

// SetCarryOverUnusedFlagNil sets the value for CarryOverUnusedFlag to be an explicit nil
func (o *AgreementType) SetCarryOverUnusedFlagNil() {
	o.CarryOverUnusedFlag.Set(nil)
}

// UnsetCarryOverUnusedFlag ensures that no value is present for CarryOverUnusedFlag, not even an explicit nil
func (o *AgreementType) UnsetCarryOverUnusedFlag() {
	o.CarryOverUnusedFlag.Unset()
}

// GetAllowOverrunsFlag returns the AllowOverrunsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetAllowOverrunsFlag() bool {
	if o == nil || IsNil(o.AllowOverrunsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowOverrunsFlag.Get()
}

// GetAllowOverrunsFlagOk returns a tuple with the AllowOverrunsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetAllowOverrunsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowOverrunsFlag.Get(), o.AllowOverrunsFlag.IsSet()
}

// HasAllowOverrunsFlag returns a boolean if a field has been set.
func (o *AgreementType) HasAllowOverrunsFlag() bool {
	if o != nil && o.AllowOverrunsFlag.IsSet() {
		return true
	}

	return false
}

// SetAllowOverrunsFlag gets a reference to the given NullableBool and assigns it to the AllowOverrunsFlag field.
func (o *AgreementType) SetAllowOverrunsFlag(v bool) {
	o.AllowOverrunsFlag.Set(&v)
}

// SetAllowOverrunsFlagNil sets the value for AllowOverrunsFlag to be an explicit nil
func (o *AgreementType) SetAllowOverrunsFlagNil() {
	o.AllowOverrunsFlag.Set(nil)
}

// UnsetAllowOverrunsFlag ensures that no value is present for AllowOverrunsFlag, not even an explicit nil
func (o *AgreementType) UnsetAllowOverrunsFlag() {
	o.AllowOverrunsFlag.Unset()
}

// GetExpiredDays returns the ExpiredDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetExpiredDays() int32 {
	if o == nil || IsNil(o.ExpiredDays.Get()) {
		var ret int32
		return ret
	}
	return *o.ExpiredDays.Get()
}

// GetExpiredDaysOk returns a tuple with the ExpiredDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetExpiredDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredDays.Get(), o.ExpiredDays.IsSet()
}

// HasExpiredDays returns a boolean if a field has been set.
func (o *AgreementType) HasExpiredDays() bool {
	if o != nil && o.ExpiredDays.IsSet() {
		return true
	}

	return false
}

// SetExpiredDays gets a reference to the given NullableInt32 and assigns it to the ExpiredDays field.
func (o *AgreementType) SetExpiredDays(v int32) {
	o.ExpiredDays.Set(&v)
}

// SetExpiredDaysNil sets the value for ExpiredDays to be an explicit nil
func (o *AgreementType) SetExpiredDaysNil() {
	o.ExpiredDays.Set(nil)
}

// UnsetExpiredDays ensures that no value is present for ExpiredDays, not even an explicit nil
func (o *AgreementType) UnsetExpiredDays() {
	o.ExpiredDays.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetLimit() int32 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int32
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *AgreementType) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt32 and assigns it to the Limit field.
func (o *AgreementType) SetLimit(v int32) {
	o.Limit.Set(&v)
}

// SetLimitNil sets the value for Limit to be an explicit nil
func (o *AgreementType) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *AgreementType) UnsetLimit() {
	o.Limit.Unset()
}

// GetExpireWhenZero returns the ExpireWhenZero field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetExpireWhenZero() bool {
	if o == nil || IsNil(o.ExpireWhenZero.Get()) {
		var ret bool
		return ret
	}
	return *o.ExpireWhenZero.Get()
}

// GetExpireWhenZeroOk returns a tuple with the ExpireWhenZero field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetExpireWhenZeroOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireWhenZero.Get(), o.ExpireWhenZero.IsSet()
}

// HasExpireWhenZero returns a boolean if a field has been set.
func (o *AgreementType) HasExpireWhenZero() bool {
	if o != nil && o.ExpireWhenZero.IsSet() {
		return true
	}

	return false
}

// SetExpireWhenZero gets a reference to the given NullableBool and assigns it to the ExpireWhenZero field.
func (o *AgreementType) SetExpireWhenZero(v bool) {
	o.ExpireWhenZero.Set(&v)
}

// SetExpireWhenZeroNil sets the value for ExpireWhenZero to be an explicit nil
func (o *AgreementType) SetExpireWhenZeroNil() {
	o.ExpireWhenZero.Set(nil)
}

// UnsetExpireWhenZero ensures that no value is present for ExpireWhenZero, not even an explicit nil
func (o *AgreementType) UnsetExpireWhenZero() {
	o.ExpireWhenZero.Unset()
}

// GetChargeToFirmFlag returns the ChargeToFirmFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetChargeToFirmFlag() bool {
	if o == nil || IsNil(o.ChargeToFirmFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ChargeToFirmFlag.Get()
}

// GetChargeToFirmFlagOk returns a tuple with the ChargeToFirmFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetChargeToFirmFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeToFirmFlag.Get(), o.ChargeToFirmFlag.IsSet()
}

// HasChargeToFirmFlag returns a boolean if a field has been set.
func (o *AgreementType) HasChargeToFirmFlag() bool {
	if o != nil && o.ChargeToFirmFlag.IsSet() {
		return true
	}

	return false
}

// SetChargeToFirmFlag gets a reference to the given NullableBool and assigns it to the ChargeToFirmFlag field.
func (o *AgreementType) SetChargeToFirmFlag(v bool) {
	o.ChargeToFirmFlag.Set(&v)
}

// SetChargeToFirmFlagNil sets the value for ChargeToFirmFlag to be an explicit nil
func (o *AgreementType) SetChargeToFirmFlagNil() {
	o.ChargeToFirmFlag.Set(nil)
}

// UnsetChargeToFirmFlag ensures that no value is present for ChargeToFirmFlag, not even an explicit nil
func (o *AgreementType) UnsetChargeToFirmFlag() {
	o.ChargeToFirmFlag.Unset()
}

// GetEmployeeCompRate returns the EmployeeCompRate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementType) GetEmployeeCompRate() string {
	if o == nil || o.EmployeeCompRate.Get() == nil {
		var ret string
		return ret
	}

	return *o.EmployeeCompRate.Get()
}

// GetEmployeeCompRateOk returns a tuple with the EmployeeCompRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetEmployeeCompRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeCompRate.Get(), o.EmployeeCompRate.IsSet()
}

// SetEmployeeCompRate sets field value
func (o *AgreementType) SetEmployeeCompRate(v string) {
	o.EmployeeCompRate.Set(&v)
}

// GetEmployeeCompNotExceed returns the EmployeeCompNotExceed field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementType) GetEmployeeCompNotExceed() string {
	if o == nil || o.EmployeeCompNotExceed.Get() == nil {
		var ret string
		return ret
	}

	return *o.EmployeeCompNotExceed.Get()
}

// GetEmployeeCompNotExceedOk returns a tuple with the EmployeeCompNotExceed field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetEmployeeCompNotExceedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeCompNotExceed.Get(), o.EmployeeCompNotExceed.IsSet()
}

// SetEmployeeCompNotExceed sets field value
func (o *AgreementType) SetEmployeeCompNotExceed(v string) {
	o.EmployeeCompNotExceed.Set(&v)
}

// GetCompHourlyRate returns the CompHourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCompHourlyRate() float64 {
	if o == nil || IsNil(o.CompHourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.CompHourlyRate.Get()
}

// GetCompHourlyRateOk returns a tuple with the CompHourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCompHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompHourlyRate.Get(), o.CompHourlyRate.IsSet()
}

// HasCompHourlyRate returns a boolean if a field has been set.
func (o *AgreementType) HasCompHourlyRate() bool {
	if o != nil && o.CompHourlyRate.IsSet() {
		return true
	}

	return false
}

// SetCompHourlyRate gets a reference to the given NullableFloat64 and assigns it to the CompHourlyRate field.
func (o *AgreementType) SetCompHourlyRate(v float64) {
	o.CompHourlyRate.Set(&v)
}

// SetCompHourlyRateNil sets the value for CompHourlyRate to be an explicit nil
func (o *AgreementType) SetCompHourlyRateNil() {
	o.CompHourlyRate.Set(nil)
}

// UnsetCompHourlyRate ensures that no value is present for CompHourlyRate, not even an explicit nil
func (o *AgreementType) UnsetCompHourlyRate() {
	o.CompHourlyRate.Unset()
}

// GetCompLimitAmount returns the CompLimitAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCompLimitAmount() float64 {
	if o == nil || IsNil(o.CompLimitAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CompLimitAmount.Get()
}

// GetCompLimitAmountOk returns a tuple with the CompLimitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCompLimitAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompLimitAmount.Get(), o.CompLimitAmount.IsSet()
}

// HasCompLimitAmount returns a boolean if a field has been set.
func (o *AgreementType) HasCompLimitAmount() bool {
	if o != nil && o.CompLimitAmount.IsSet() {
		return true
	}

	return false
}

// SetCompLimitAmount gets a reference to the given NullableFloat64 and assigns it to the CompLimitAmount field.
func (o *AgreementType) SetCompLimitAmount(v float64) {
	o.CompLimitAmount.Set(&v)
}

// SetCompLimitAmountNil sets the value for CompLimitAmount to be an explicit nil
func (o *AgreementType) SetCompLimitAmountNil() {
	o.CompLimitAmount.Set(nil)
}

// UnsetCompLimitAmount ensures that no value is present for CompLimitAmount, not even an explicit nil
func (o *AgreementType) UnsetCompLimitAmount() {
	o.CompLimitAmount.Unset()
}

// GetBillingCycle returns the BillingCycle field value if set, zero value otherwise.
func (o *AgreementType) GetBillingCycle() BillingCycleReference {
	if o == nil || IsNil(o.BillingCycle) {
		var ret BillingCycleReference
		return ret
	}
	return *o.BillingCycle
}

// GetBillingCycleOk returns a tuple with the BillingCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetBillingCycleOk() (*BillingCycleReference, bool) {
	if o == nil || IsNil(o.BillingCycle) {
		return nil, false
	}
	return o.BillingCycle, true
}

// HasBillingCycle returns a boolean if a field has been set.
func (o *AgreementType) HasBillingCycle() bool {
	if o != nil && !IsNil(o.BillingCycle) {
		return true
	}

	return false
}

// SetBillingCycle gets a reference to the given BillingCycleReference and assigns it to the BillingCycle field.
func (o *AgreementType) SetBillingCycle(v BillingCycleReference) {
	o.BillingCycle = &v
}

// GetBillOneTimeFlag returns the BillOneTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetBillOneTimeFlag() bool {
	if o == nil || IsNil(o.BillOneTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillOneTimeFlag.Get()
}

// GetBillOneTimeFlagOk returns a tuple with the BillOneTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillOneTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillOneTimeFlag.Get(), o.BillOneTimeFlag.IsSet()
}

// HasBillOneTimeFlag returns a boolean if a field has been set.
func (o *AgreementType) HasBillOneTimeFlag() bool {
	if o != nil && o.BillOneTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetBillOneTimeFlag gets a reference to the given NullableBool and assigns it to the BillOneTimeFlag field.
func (o *AgreementType) SetBillOneTimeFlag(v bool) {
	o.BillOneTimeFlag.Set(&v)
}

// SetBillOneTimeFlagNil sets the value for BillOneTimeFlag to be an explicit nil
func (o *AgreementType) SetBillOneTimeFlagNil() {
	o.BillOneTimeFlag.Set(nil)
}

// UnsetBillOneTimeFlag ensures that no value is present for BillOneTimeFlag, not even an explicit nil
func (o *AgreementType) UnsetBillOneTimeFlag() {
	o.BillOneTimeFlag.Unset()
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *AgreementType) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *AgreementType) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *AgreementType) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetInvoicingCycle returns the InvoicingCycle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementType) GetInvoicingCycle() string {
	if o == nil || o.InvoicingCycle.Get() == nil {
		var ret string
		return ret
	}

	return *o.InvoicingCycle.Get()
}

// GetInvoicingCycleOk returns a tuple with the InvoicingCycle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetInvoicingCycleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoicingCycle.Get(), o.InvoicingCycle.IsSet()
}

// SetInvoicingCycle sets field value
func (o *AgreementType) SetInvoicingCycle(v string) {
	o.InvoicingCycle.Set(&v)
}

// GetBillAmount returns the BillAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetBillAmount() float64 {
	if o == nil || IsNil(o.BillAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillAmount.Get()
}

// GetBillAmountOk returns a tuple with the BillAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillAmount.Get(), o.BillAmount.IsSet()
}

// HasBillAmount returns a boolean if a field has been set.
func (o *AgreementType) HasBillAmount() bool {
	if o != nil && o.BillAmount.IsSet() {
		return true
	}

	return false
}

// SetBillAmount gets a reference to the given NullableFloat64 and assigns it to the BillAmount field.
func (o *AgreementType) SetBillAmount(v float64) {
	o.BillAmount.Set(&v)
}

// SetBillAmountNil sets the value for BillAmount to be an explicit nil
func (o *AgreementType) SetBillAmountNil() {
	o.BillAmount.Set(nil)
}

// UnsetBillAmount ensures that no value is present for BillAmount, not even an explicit nil
func (o *AgreementType) UnsetBillAmount() {
	o.BillAmount.Unset()
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *AgreementType) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *AgreementType) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}

// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *AgreementType) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *AgreementType) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetRestrictDownPaymentFlag returns the RestrictDownPaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetRestrictDownPaymentFlag() bool {
	if o == nil || IsNil(o.RestrictDownPaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDownPaymentFlag.Get()
}

// GetRestrictDownPaymentFlagOk returns a tuple with the RestrictDownPaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetRestrictDownPaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDownPaymentFlag.Get(), o.RestrictDownPaymentFlag.IsSet()
}

// HasRestrictDownPaymentFlag returns a boolean if a field has been set.
func (o *AgreementType) HasRestrictDownPaymentFlag() bool {
	if o != nil && o.RestrictDownPaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDownPaymentFlag gets a reference to the given NullableBool and assigns it to the RestrictDownPaymentFlag field.
func (o *AgreementType) SetRestrictDownPaymentFlag(v bool) {
	o.RestrictDownPaymentFlag.Set(&v)
}

// SetRestrictDownPaymentFlagNil sets the value for RestrictDownPaymentFlag to be an explicit nil
func (o *AgreementType) SetRestrictDownPaymentFlagNil() {
	o.RestrictDownPaymentFlag.Set(nil)
}

// UnsetRestrictDownPaymentFlag ensures that no value is present for RestrictDownPaymentFlag, not even an explicit nil
func (o *AgreementType) UnsetRestrictDownPaymentFlag() {
	o.RestrictDownPaymentFlag.Unset()
}

// GetInvoiceDescription returns the InvoiceDescription field value if set, zero value otherwise.
func (o *AgreementType) GetInvoiceDescription() string {
	if o == nil || IsNil(o.InvoiceDescription) {
		var ret string
		return ret
	}
	return *o.InvoiceDescription
}

// GetInvoiceDescriptionOk returns a tuple with the InvoiceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetInvoiceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDescription) {
		return nil, false
	}
	return o.InvoiceDescription, true
}

// HasInvoiceDescription returns a boolean if a field has been set.
func (o *AgreementType) HasInvoiceDescription() bool {
	if o != nil && !IsNil(o.InvoiceDescription) {
		return true
	}

	return false
}

// SetInvoiceDescription gets a reference to the given string and assigns it to the InvoiceDescription field.
func (o *AgreementType) SetInvoiceDescription(v string) {
	o.InvoiceDescription = &v
}

// GetTopCommentFlag returns the TopCommentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetTopCommentFlag() bool {
	if o == nil || IsNil(o.TopCommentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TopCommentFlag.Get()
}

// GetTopCommentFlagOk returns a tuple with the TopCommentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetTopCommentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopCommentFlag.Get(), o.TopCommentFlag.IsSet()
}

// HasTopCommentFlag returns a boolean if a field has been set.
func (o *AgreementType) HasTopCommentFlag() bool {
	if o != nil && o.TopCommentFlag.IsSet() {
		return true
	}

	return false
}

// SetTopCommentFlag gets a reference to the given NullableBool and assigns it to the TopCommentFlag field.
func (o *AgreementType) SetTopCommentFlag(v bool) {
	o.TopCommentFlag.Set(&v)
}

// SetTopCommentFlagNil sets the value for TopCommentFlag to be an explicit nil
func (o *AgreementType) SetTopCommentFlagNil() {
	o.TopCommentFlag.Set(nil)
}

// UnsetTopCommentFlag ensures that no value is present for TopCommentFlag, not even an explicit nil
func (o *AgreementType) UnsetTopCommentFlag() {
	o.TopCommentFlag.Unset()
}

// GetBottomCommentFlag returns the BottomCommentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetBottomCommentFlag() bool {
	if o == nil || IsNil(o.BottomCommentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BottomCommentFlag.Get()
}

// GetBottomCommentFlagOk returns a tuple with the BottomCommentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBottomCommentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BottomCommentFlag.Get(), o.BottomCommentFlag.IsSet()
}

// HasBottomCommentFlag returns a boolean if a field has been set.
func (o *AgreementType) HasBottomCommentFlag() bool {
	if o != nil && o.BottomCommentFlag.IsSet() {
		return true
	}

	return false
}

// SetBottomCommentFlag gets a reference to the given NullableBool and assigns it to the BottomCommentFlag field.
func (o *AgreementType) SetBottomCommentFlag(v bool) {
	o.BottomCommentFlag.Set(&v)
}

// SetBottomCommentFlagNil sets the value for BottomCommentFlag to be an explicit nil
func (o *AgreementType) SetBottomCommentFlagNil() {
	o.BottomCommentFlag.Set(nil)
}

// UnsetBottomCommentFlag ensures that no value is present for BottomCommentFlag, not even an explicit nil
func (o *AgreementType) UnsetBottomCommentFlag() {
	o.BottomCommentFlag.Unset()
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *AgreementType) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *AgreementType) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *AgreementType) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *AgreementType) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *AgreementType) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *AgreementType) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetProjectType returns the ProjectType field value if set, zero value otherwise.
func (o *AgreementType) GetProjectType() ProjectTypeReference {
	if o == nil || IsNil(o.ProjectType) {
		var ret ProjectTypeReference
		return ret
	}
	return *o.ProjectType
}

// GetProjectTypeOk returns a tuple with the ProjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetProjectTypeOk() (*ProjectTypeReference, bool) {
	if o == nil || IsNil(o.ProjectType) {
		return nil, false
	}
	return o.ProjectType, true
}

// HasProjectType returns a boolean if a field has been set.
func (o *AgreementType) HasProjectType() bool {
	if o != nil && !IsNil(o.ProjectType) {
		return true
	}

	return false
}

// SetProjectType gets a reference to the given ProjectTypeReference and assigns it to the ProjectType field.
func (o *AgreementType) SetProjectType(v ProjectTypeReference) {
	o.ProjectType = &v
}

// GetInvoiceTemplate returns the InvoiceTemplate field value if set, zero value otherwise.
func (o *AgreementType) GetInvoiceTemplate() InvoiceTemplateReference {
	if o == nil || IsNil(o.InvoiceTemplate) {
		var ret InvoiceTemplateReference
		return ret
	}
	return *o.InvoiceTemplate
}

// GetInvoiceTemplateOk returns a tuple with the InvoiceTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetInvoiceTemplateOk() (*InvoiceTemplateReference, bool) {
	if o == nil || IsNil(o.InvoiceTemplate) {
		return nil, false
	}
	return o.InvoiceTemplate, true
}

// HasInvoiceTemplate returns a boolean if a field has been set.
func (o *AgreementType) HasInvoiceTemplate() bool {
	if o != nil && !IsNil(o.InvoiceTemplate) {
		return true
	}

	return false
}

// SetInvoiceTemplate gets a reference to the given InvoiceTemplateReference and assigns it to the InvoiceTemplate field.
func (o *AgreementType) SetInvoiceTemplate(v InvoiceTemplateReference) {
	o.InvoiceTemplate = &v
}

// GetBillTime returns the BillTime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementType) GetBillTime() string {
	if o == nil || o.BillTime.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// SetBillTime sets field value
func (o *AgreementType) SetBillTime(v string) {
	o.BillTime.Set(&v)
}

// GetBillExpenses returns the BillExpenses field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementType) GetBillExpenses() string {
	if o == nil || o.BillExpenses.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// SetBillExpenses sets field value
func (o *AgreementType) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}

// GetBillProducts returns the BillProducts field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementType) GetBillProducts() string {
	if o == nil || o.BillProducts.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillProducts.Get()
}

// GetBillProductsOk returns a tuple with the BillProducts field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillProductsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProducts.Get(), o.BillProducts.IsSet()
}

// SetBillProducts sets field value
func (o *AgreementType) SetBillProducts(v string) {
	o.BillProducts.Set(&v)
}

// GetBillableTimeInvoiceFlag returns the BillableTimeInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetBillableTimeInvoiceFlag() bool {
	if o == nil || IsNil(o.BillableTimeInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableTimeInvoiceFlag.Get()
}

// GetBillableTimeInvoiceFlagOk returns a tuple with the BillableTimeInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillableTimeInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableTimeInvoiceFlag.Get(), o.BillableTimeInvoiceFlag.IsSet()
}

// HasBillableTimeInvoiceFlag returns a boolean if a field has been set.
func (o *AgreementType) HasBillableTimeInvoiceFlag() bool {
	if o != nil && o.BillableTimeInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetBillableTimeInvoiceFlag gets a reference to the given NullableBool and assigns it to the BillableTimeInvoiceFlag field.
func (o *AgreementType) SetBillableTimeInvoiceFlag(v bool) {
	o.BillableTimeInvoiceFlag.Set(&v)
}

// SetBillableTimeInvoiceFlagNil sets the value for BillableTimeInvoiceFlag to be an explicit nil
func (o *AgreementType) SetBillableTimeInvoiceFlagNil() {
	o.BillableTimeInvoiceFlag.Set(nil)
}

// UnsetBillableTimeInvoiceFlag ensures that no value is present for BillableTimeInvoiceFlag, not even an explicit nil
func (o *AgreementType) UnsetBillableTimeInvoiceFlag() {
	o.BillableTimeInvoiceFlag.Unset()
}

// GetBillableExpenseInvoiceFlag returns the BillableExpenseInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetBillableExpenseInvoiceFlag() bool {
	if o == nil || IsNil(o.BillableExpenseInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableExpenseInvoiceFlag.Get()
}

// GetBillableExpenseInvoiceFlagOk returns a tuple with the BillableExpenseInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillableExpenseInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableExpenseInvoiceFlag.Get(), o.BillableExpenseInvoiceFlag.IsSet()
}

// HasBillableExpenseInvoiceFlag returns a boolean if a field has been set.
func (o *AgreementType) HasBillableExpenseInvoiceFlag() bool {
	if o != nil && o.BillableExpenseInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetBillableExpenseInvoiceFlag gets a reference to the given NullableBool and assigns it to the BillableExpenseInvoiceFlag field.
func (o *AgreementType) SetBillableExpenseInvoiceFlag(v bool) {
	o.BillableExpenseInvoiceFlag.Set(&v)
}

// SetBillableExpenseInvoiceFlagNil sets the value for BillableExpenseInvoiceFlag to be an explicit nil
func (o *AgreementType) SetBillableExpenseInvoiceFlagNil() {
	o.BillableExpenseInvoiceFlag.Set(nil)
}

// UnsetBillableExpenseInvoiceFlag ensures that no value is present for BillableExpenseInvoiceFlag, not even an explicit nil
func (o *AgreementType) UnsetBillableExpenseInvoiceFlag() {
	o.BillableExpenseInvoiceFlag.Unset()
}

// GetBillableProductInvoiceFlag returns the BillableProductInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetBillableProductInvoiceFlag() bool {
	if o == nil || IsNil(o.BillableProductInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableProductInvoiceFlag.Get()
}

// GetBillableProductInvoiceFlagOk returns a tuple with the BillableProductInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetBillableProductInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableProductInvoiceFlag.Get(), o.BillableProductInvoiceFlag.IsSet()
}

// HasBillableProductInvoiceFlag returns a boolean if a field has been set.
func (o *AgreementType) HasBillableProductInvoiceFlag() bool {
	if o != nil && o.BillableProductInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetBillableProductInvoiceFlag gets a reference to the given NullableBool and assigns it to the BillableProductInvoiceFlag field.
func (o *AgreementType) SetBillableProductInvoiceFlag(v bool) {
	o.BillableProductInvoiceFlag.Set(&v)
}

// SetBillableProductInvoiceFlagNil sets the value for BillableProductInvoiceFlag to be an explicit nil
func (o *AgreementType) SetBillableProductInvoiceFlagNil() {
	o.BillableProductInvoiceFlag.Set(nil)
}

// UnsetBillableProductInvoiceFlag ensures that no value is present for BillableProductInvoiceFlag, not even an explicit nil
func (o *AgreementType) UnsetBillableProductInvoiceFlag() {
	o.BillableProductInvoiceFlag.Unset()
}

// GetCopyWorkRolesFlag returns the CopyWorkRolesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCopyWorkRolesFlag() bool {
	if o == nil || IsNil(o.CopyWorkRolesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CopyWorkRolesFlag.Get()
}

// GetCopyWorkRolesFlagOk returns a tuple with the CopyWorkRolesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCopyWorkRolesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CopyWorkRolesFlag.Get(), o.CopyWorkRolesFlag.IsSet()
}

// HasCopyWorkRolesFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCopyWorkRolesFlag() bool {
	if o != nil && o.CopyWorkRolesFlag.IsSet() {
		return true
	}

	return false
}

// SetCopyWorkRolesFlag gets a reference to the given NullableBool and assigns it to the CopyWorkRolesFlag field.
func (o *AgreementType) SetCopyWorkRolesFlag(v bool) {
	o.CopyWorkRolesFlag.Set(&v)
}

// SetCopyWorkRolesFlagNil sets the value for CopyWorkRolesFlag to be an explicit nil
func (o *AgreementType) SetCopyWorkRolesFlagNil() {
	o.CopyWorkRolesFlag.Set(nil)
}

// UnsetCopyWorkRolesFlag ensures that no value is present for CopyWorkRolesFlag, not even an explicit nil
func (o *AgreementType) UnsetCopyWorkRolesFlag() {
	o.CopyWorkRolesFlag.Unset()
}

// GetCopyWorkTypesFlag returns the CopyWorkTypesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetCopyWorkTypesFlag() bool {
	if o == nil || IsNil(o.CopyWorkTypesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CopyWorkTypesFlag.Get()
}

// GetCopyWorkTypesFlagOk returns a tuple with the CopyWorkTypesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetCopyWorkTypesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CopyWorkTypesFlag.Get(), o.CopyWorkTypesFlag.IsSet()
}

// HasCopyWorkTypesFlag returns a boolean if a field has been set.
func (o *AgreementType) HasCopyWorkTypesFlag() bool {
	if o != nil && o.CopyWorkTypesFlag.IsSet() {
		return true
	}

	return false
}

// SetCopyWorkTypesFlag gets a reference to the given NullableBool and assigns it to the CopyWorkTypesFlag field.
func (o *AgreementType) SetCopyWorkTypesFlag(v bool) {
	o.CopyWorkTypesFlag.Set(&v)
}

// SetCopyWorkTypesFlagNil sets the value for CopyWorkTypesFlag to be an explicit nil
func (o *AgreementType) SetCopyWorkTypesFlagNil() {
	o.CopyWorkTypesFlag.Set(nil)
}

// UnsetCopyWorkTypesFlag ensures that no value is present for CopyWorkTypesFlag, not even an explicit nil
func (o *AgreementType) UnsetCopyWorkTypesFlag() {
	o.CopyWorkTypesFlag.Unset()
}

// GetExclusionWorkRoleIds returns the ExclusionWorkRoleIds field value if set, zero value otherwise.
func (o *AgreementType) GetExclusionWorkRoleIds() []int32 {
	if o == nil || IsNil(o.ExclusionWorkRoleIds) {
		var ret []int32
		return ret
	}
	return o.ExclusionWorkRoleIds
}

// GetExclusionWorkRoleIdsOk returns a tuple with the ExclusionWorkRoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetExclusionWorkRoleIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExclusionWorkRoleIds) {
		return nil, false
	}
	return o.ExclusionWorkRoleIds, true
}

// HasExclusionWorkRoleIds returns a boolean if a field has been set.
func (o *AgreementType) HasExclusionWorkRoleIds() bool {
	if o != nil && !IsNil(o.ExclusionWorkRoleIds) {
		return true
	}

	return false
}

// SetExclusionWorkRoleIds gets a reference to the given []int32 and assigns it to the ExclusionWorkRoleIds field.
func (o *AgreementType) SetExclusionWorkRoleIds(v []int32) {
	o.ExclusionWorkRoleIds = v
}

// GetAddAllWorkRoleExclusions returns the AddAllWorkRoleExclusions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetAddAllWorkRoleExclusions() bool {
	if o == nil || IsNil(o.AddAllWorkRoleExclusions.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllWorkRoleExclusions.Get()
}

// GetAddAllWorkRoleExclusionsOk returns a tuple with the AddAllWorkRoleExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetAddAllWorkRoleExclusionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllWorkRoleExclusions.Get(), o.AddAllWorkRoleExclusions.IsSet()
}

// HasAddAllWorkRoleExclusions returns a boolean if a field has been set.
func (o *AgreementType) HasAddAllWorkRoleExclusions() bool {
	if o != nil && o.AddAllWorkRoleExclusions.IsSet() {
		return true
	}

	return false
}

// SetAddAllWorkRoleExclusions gets a reference to the given NullableBool and assigns it to the AddAllWorkRoleExclusions field.
func (o *AgreementType) SetAddAllWorkRoleExclusions(v bool) {
	o.AddAllWorkRoleExclusions.Set(&v)
}

// SetAddAllWorkRoleExclusionsNil sets the value for AddAllWorkRoleExclusions to be an explicit nil
func (o *AgreementType) SetAddAllWorkRoleExclusionsNil() {
	o.AddAllWorkRoleExclusions.Set(nil)
}

// UnsetAddAllWorkRoleExclusions ensures that no value is present for AddAllWorkRoleExclusions, not even an explicit nil
func (o *AgreementType) UnsetAddAllWorkRoleExclusions() {
	o.AddAllWorkRoleExclusions.Unset()
}

// GetRemoveAllWorkRoleExclusions returns the RemoveAllWorkRoleExclusions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetRemoveAllWorkRoleExclusions() bool {
	if o == nil || IsNil(o.RemoveAllWorkRoleExclusions.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllWorkRoleExclusions.Get()
}

// GetRemoveAllWorkRoleExclusionsOk returns a tuple with the RemoveAllWorkRoleExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetRemoveAllWorkRoleExclusionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllWorkRoleExclusions.Get(), o.RemoveAllWorkRoleExclusions.IsSet()
}

// HasRemoveAllWorkRoleExclusions returns a boolean if a field has been set.
func (o *AgreementType) HasRemoveAllWorkRoleExclusions() bool {
	if o != nil && o.RemoveAllWorkRoleExclusions.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllWorkRoleExclusions gets a reference to the given NullableBool and assigns it to the RemoveAllWorkRoleExclusions field.
func (o *AgreementType) SetRemoveAllWorkRoleExclusions(v bool) {
	o.RemoveAllWorkRoleExclusions.Set(&v)
}

// SetRemoveAllWorkRoleExclusionsNil sets the value for RemoveAllWorkRoleExclusions to be an explicit nil
func (o *AgreementType) SetRemoveAllWorkRoleExclusionsNil() {
	o.RemoveAllWorkRoleExclusions.Set(nil)
}

// UnsetRemoveAllWorkRoleExclusions ensures that no value is present for RemoveAllWorkRoleExclusions, not even an explicit nil
func (o *AgreementType) UnsetRemoveAllWorkRoleExclusions() {
	o.RemoveAllWorkRoleExclusions.Unset()
}

// GetExclusionWorkTypeIds returns the ExclusionWorkTypeIds field value if set, zero value otherwise.
func (o *AgreementType) GetExclusionWorkTypeIds() []int32 {
	if o == nil || IsNil(o.ExclusionWorkTypeIds) {
		var ret []int32
		return ret
	}
	return o.ExclusionWorkTypeIds
}

// GetExclusionWorkTypeIdsOk returns a tuple with the ExclusionWorkTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetExclusionWorkTypeIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExclusionWorkTypeIds) {
		return nil, false
	}
	return o.ExclusionWorkTypeIds, true
}

// HasExclusionWorkTypeIds returns a boolean if a field has been set.
func (o *AgreementType) HasExclusionWorkTypeIds() bool {
	if o != nil && !IsNil(o.ExclusionWorkTypeIds) {
		return true
	}

	return false
}

// SetExclusionWorkTypeIds gets a reference to the given []int32 and assigns it to the ExclusionWorkTypeIds field.
func (o *AgreementType) SetExclusionWorkTypeIds(v []int32) {
	o.ExclusionWorkTypeIds = v
}

// GetAddAllWorkTypeExclusions returns the AddAllWorkTypeExclusions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetAddAllWorkTypeExclusions() bool {
	if o == nil || IsNil(o.AddAllWorkTypeExclusions.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllWorkTypeExclusions.Get()
}

// GetAddAllWorkTypeExclusionsOk returns a tuple with the AddAllWorkTypeExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetAddAllWorkTypeExclusionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllWorkTypeExclusions.Get(), o.AddAllWorkTypeExclusions.IsSet()
}

// HasAddAllWorkTypeExclusions returns a boolean if a field has been set.
func (o *AgreementType) HasAddAllWorkTypeExclusions() bool {
	if o != nil && o.AddAllWorkTypeExclusions.IsSet() {
		return true
	}

	return false
}

// SetAddAllWorkTypeExclusions gets a reference to the given NullableBool and assigns it to the AddAllWorkTypeExclusions field.
func (o *AgreementType) SetAddAllWorkTypeExclusions(v bool) {
	o.AddAllWorkTypeExclusions.Set(&v)
}

// SetAddAllWorkTypeExclusionsNil sets the value for AddAllWorkTypeExclusions to be an explicit nil
func (o *AgreementType) SetAddAllWorkTypeExclusionsNil() {
	o.AddAllWorkTypeExclusions.Set(nil)
}

// UnsetAddAllWorkTypeExclusions ensures that no value is present for AddAllWorkTypeExclusions, not even an explicit nil
func (o *AgreementType) UnsetAddAllWorkTypeExclusions() {
	o.AddAllWorkTypeExclusions.Unset()
}

// GetRemoveAllWorkTypeExclusions returns the RemoveAllWorkTypeExclusions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetRemoveAllWorkTypeExclusions() bool {
	if o == nil || IsNil(o.RemoveAllWorkTypeExclusions.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllWorkTypeExclusions.Get()
}

// GetRemoveAllWorkTypeExclusionsOk returns a tuple with the RemoveAllWorkTypeExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetRemoveAllWorkTypeExclusionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllWorkTypeExclusions.Get(), o.RemoveAllWorkTypeExclusions.IsSet()
}

// HasRemoveAllWorkTypeExclusions returns a boolean if a field has been set.
func (o *AgreementType) HasRemoveAllWorkTypeExclusions() bool {
	if o != nil && o.RemoveAllWorkTypeExclusions.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllWorkTypeExclusions gets a reference to the given NullableBool and assigns it to the RemoveAllWorkTypeExclusions field.
func (o *AgreementType) SetRemoveAllWorkTypeExclusions(v bool) {
	o.RemoveAllWorkTypeExclusions.Set(&v)
}

// SetRemoveAllWorkTypeExclusionsNil sets the value for RemoveAllWorkTypeExclusions to be an explicit nil
func (o *AgreementType) SetRemoveAllWorkTypeExclusionsNil() {
	o.RemoveAllWorkTypeExclusions.Set(nil)
}

// UnsetRemoveAllWorkTypeExclusions ensures that no value is present for RemoveAllWorkTypeExclusions, not even an explicit nil
func (o *AgreementType) UnsetRemoveAllWorkTypeExclusions() {
	o.RemoveAllWorkTypeExclusions.Unset()
}

// GetIntegrationXRef returns the IntegrationXRef field value if set, zero value otherwise.
func (o *AgreementType) GetIntegrationXRef() string {
	if o == nil || IsNil(o.IntegrationXRef) {
		var ret string
		return ret
	}
	return *o.IntegrationXRef
}

// GetIntegrationXRefOk returns a tuple with the IntegrationXRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetIntegrationXRefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXRef) {
		return nil, false
	}
	return o.IntegrationXRef, true
}

// HasIntegrationXRef returns a boolean if a field has been set.
func (o *AgreementType) HasIntegrationXRef() bool {
	if o != nil && !IsNil(o.IntegrationXRef) {
		return true
	}

	return false
}

// SetIntegrationXRef gets a reference to the given string and assigns it to the IntegrationXRef field.
func (o *AgreementType) SetIntegrationXRef(v string) {
	o.IntegrationXRef = &v
}

// GetProrateFlag returns the ProrateFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetProrateFlag() bool {
	if o == nil || IsNil(o.ProrateFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProrateFlag.Get()
}

// GetProrateFlagOk returns a tuple with the ProrateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetProrateFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProrateFlag.Get(), o.ProrateFlag.IsSet()
}

// HasProrateFlag returns a boolean if a field has been set.
func (o *AgreementType) HasProrateFlag() bool {
	if o != nil && o.ProrateFlag.IsSet() {
		return true
	}

	return false
}

// SetProrateFlag gets a reference to the given NullableBool and assigns it to the ProrateFlag field.
func (o *AgreementType) SetProrateFlag(v bool) {
	o.ProrateFlag.Set(&v)
}

// SetProrateFlagNil sets the value for ProrateFlag to be an explicit nil
func (o *AgreementType) SetProrateFlagNil() {
	o.ProrateFlag.Set(nil)
}

// UnsetProrateFlag ensures that no value is present for ProrateFlag, not even an explicit nil
func (o *AgreementType) UnsetProrateFlag() {
	o.ProrateFlag.Unset()
}

// GetEmailTemplate returns the EmailTemplate field value if set, zero value otherwise.
func (o *AgreementType) GetEmailTemplate() EmailTemplateReference {
	if o == nil || IsNil(o.EmailTemplate) {
		var ret EmailTemplateReference
		return ret
	}
	return *o.EmailTemplate
}

// GetEmailTemplateOk returns a tuple with the EmailTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetEmailTemplateOk() (*EmailTemplateReference, bool) {
	if o == nil || IsNil(o.EmailTemplate) {
		return nil, false
	}
	return o.EmailTemplate, true
}

// HasEmailTemplate returns a boolean if a field has been set.
func (o *AgreementType) HasEmailTemplate() bool {
	if o != nil && !IsNil(o.EmailTemplate) {
		return true
	}

	return false
}

// SetEmailTemplate gets a reference to the given EmailTemplateReference and assigns it to the EmailTemplate field.
func (o *AgreementType) SetEmailTemplate(v EmailTemplateReference) {
	o.EmailTemplate = &v
}

// GetAutoInvoiceFlag returns the AutoInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetAutoInvoiceFlag() bool {
	if o == nil || IsNil(o.AutoInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoInvoiceFlag.Get()
}

// GetAutoInvoiceFlagOk returns a tuple with the AutoInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetAutoInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoInvoiceFlag.Get(), o.AutoInvoiceFlag.IsSet()
}

// HasAutoInvoiceFlag returns a boolean if a field has been set.
func (o *AgreementType) HasAutoInvoiceFlag() bool {
	if o != nil && o.AutoInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoInvoiceFlag gets a reference to the given NullableBool and assigns it to the AutoInvoiceFlag field.
func (o *AgreementType) SetAutoInvoiceFlag(v bool) {
	o.AutoInvoiceFlag.Set(&v)
}

// SetAutoInvoiceFlagNil sets the value for AutoInvoiceFlag to be an explicit nil
func (o *AgreementType) SetAutoInvoiceFlagNil() {
	o.AutoInvoiceFlag.Set(nil)
}

// UnsetAutoInvoiceFlag ensures that no value is present for AutoInvoiceFlag, not even an explicit nil
func (o *AgreementType) UnsetAutoInvoiceFlag() {
	o.AutoInvoiceFlag.Unset()
}

// GetInvoiceProratedAdditionsFlag returns the InvoiceProratedAdditionsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementType) GetInvoiceProratedAdditionsFlag() bool {
	if o == nil || IsNil(o.InvoiceProratedAdditionsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvoiceProratedAdditionsFlag.Get()
}

// GetInvoiceProratedAdditionsFlagOk returns a tuple with the InvoiceProratedAdditionsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementType) GetInvoiceProratedAdditionsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceProratedAdditionsFlag.Get(), o.InvoiceProratedAdditionsFlag.IsSet()
}

// HasInvoiceProratedAdditionsFlag returns a boolean if a field has been set.
func (o *AgreementType) HasInvoiceProratedAdditionsFlag() bool {
	if o != nil && o.InvoiceProratedAdditionsFlag.IsSet() {
		return true
	}

	return false
}

// SetInvoiceProratedAdditionsFlag gets a reference to the given NullableBool and assigns it to the InvoiceProratedAdditionsFlag field.
func (o *AgreementType) SetInvoiceProratedAdditionsFlag(v bool) {
	o.InvoiceProratedAdditionsFlag.Set(&v)
}

// SetInvoiceProratedAdditionsFlagNil sets the value for InvoiceProratedAdditionsFlag to be an explicit nil
func (o *AgreementType) SetInvoiceProratedAdditionsFlagNil() {
	o.InvoiceProratedAdditionsFlag.Set(nil)
}

// UnsetInvoiceProratedAdditionsFlag ensures that no value is present for InvoiceProratedAdditionsFlag, not even an explicit nil
func (o *AgreementType) UnsetInvoiceProratedAdditionsFlag() {
	o.InvoiceProratedAdditionsFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.PrefixSuffixOption.IsSet() {
		toSerialize["prefixSuffixOption"] = o.PrefixSuffixOption.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.PrePaymentFlag.IsSet() {
		toSerialize["prePaymentFlag"] = o.PrePaymentFlag.Get()
	}
	if !IsNil(o.InvoicePreSuffix) {
		toSerialize["invoicePreSuffix"] = o.InvoicePreSuffix
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.RestrictLocationFlag.IsSet() {
		toSerialize["restrictLocationFlag"] = o.RestrictLocationFlag.Get()
	}
	if o.RestrictDepartmentFlag.IsSet() {
		toSerialize["restrictDepartmentFlag"] = o.RestrictDepartmentFlag.Get()
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if o.ApplicationUnits.IsSet() {
		toSerialize["applicationUnits"] = o.ApplicationUnits.Get()
	}
	if o.ApplicationLimit.IsSet() {
		toSerialize["applicationLimit"] = o.ApplicationLimit.Get()
	}
	if o.ApplicationCycle.IsSet() {
		toSerialize["applicationCycle"] = o.ApplicationCycle.Get()
	}
	if o.ApplicationUnlimitedFlag.IsSet() {
		toSerialize["applicationUnlimitedFlag"] = o.ApplicationUnlimitedFlag.Get()
	}
	if o.OneTimeFlag.IsSet() {
		toSerialize["oneTimeFlag"] = o.OneTimeFlag.Get()
	}
	if o.CoverAgreementTimeFlag.IsSet() {
		toSerialize["coverAgreementTimeFlag"] = o.CoverAgreementTimeFlag.Get()
	}
	if o.CoverAgreementProductFlag.IsSet() {
		toSerialize["coverAgreementProductFlag"] = o.CoverAgreementProductFlag.Get()
	}
	if o.CoverAgreementExpenseFlag.IsSet() {
		toSerialize["coverAgreementExpenseFlag"] = o.CoverAgreementExpenseFlag.Get()
	}
	if o.CoverSalesTaxFlag.IsSet() {
		toSerialize["coverSalesTaxFlag"] = o.CoverSalesTaxFlag.Get()
	}
	if o.CarryOverUnusedFlag.IsSet() {
		toSerialize["carryOverUnusedFlag"] = o.CarryOverUnusedFlag.Get()
	}
	if o.AllowOverrunsFlag.IsSet() {
		toSerialize["allowOverrunsFlag"] = o.AllowOverrunsFlag.Get()
	}
	if o.ExpiredDays.IsSet() {
		toSerialize["expiredDays"] = o.ExpiredDays.Get()
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if o.ExpireWhenZero.IsSet() {
		toSerialize["expireWhenZero"] = o.ExpireWhenZero.Get()
	}
	if o.ChargeToFirmFlag.IsSet() {
		toSerialize["chargeToFirmFlag"] = o.ChargeToFirmFlag.Get()
	}
	toSerialize["employeeCompRate"] = o.EmployeeCompRate.Get()
	toSerialize["employeeCompNotExceed"] = o.EmployeeCompNotExceed.Get()
	if o.CompHourlyRate.IsSet() {
		toSerialize["compHourlyRate"] = o.CompHourlyRate.Get()
	}
	if o.CompLimitAmount.IsSet() {
		toSerialize["compLimitAmount"] = o.CompLimitAmount.Get()
	}
	if !IsNil(o.BillingCycle) {
		toSerialize["billingCycle"] = o.BillingCycle
	}
	if o.BillOneTimeFlag.IsSet() {
		toSerialize["billOneTimeFlag"] = o.BillOneTimeFlag.Get()
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	toSerialize["invoicingCycle"] = o.InvoicingCycle.Get()
	if o.BillAmount.IsSet() {
		toSerialize["billAmount"] = o.BillAmount.Get()
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if o.RestrictDownPaymentFlag.IsSet() {
		toSerialize["restrictDownPaymentFlag"] = o.RestrictDownPaymentFlag.Get()
	}
	if !IsNil(o.InvoiceDescription) {
		toSerialize["invoiceDescription"] = o.InvoiceDescription
	}
	if o.TopCommentFlag.IsSet() {
		toSerialize["topCommentFlag"] = o.TopCommentFlag.Get()
	}
	if o.BottomCommentFlag.IsSet() {
		toSerialize["bottomCommentFlag"] = o.BottomCommentFlag.Get()
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.ProjectType) {
		toSerialize["projectType"] = o.ProjectType
	}
	if !IsNil(o.InvoiceTemplate) {
		toSerialize["invoiceTemplate"] = o.InvoiceTemplate
	}
	toSerialize["billTime"] = o.BillTime.Get()
	toSerialize["billExpenses"] = o.BillExpenses.Get()
	toSerialize["billProducts"] = o.BillProducts.Get()
	if o.BillableTimeInvoiceFlag.IsSet() {
		toSerialize["billableTimeInvoiceFlag"] = o.BillableTimeInvoiceFlag.Get()
	}
	if o.BillableExpenseInvoiceFlag.IsSet() {
		toSerialize["billableExpenseInvoiceFlag"] = o.BillableExpenseInvoiceFlag.Get()
	}
	if o.BillableProductInvoiceFlag.IsSet() {
		toSerialize["billableProductInvoiceFlag"] = o.BillableProductInvoiceFlag.Get()
	}
	if o.CopyWorkRolesFlag.IsSet() {
		toSerialize["copyWorkRolesFlag"] = o.CopyWorkRolesFlag.Get()
	}
	if o.CopyWorkTypesFlag.IsSet() {
		toSerialize["copyWorkTypesFlag"] = o.CopyWorkTypesFlag.Get()
	}
	if !IsNil(o.ExclusionWorkRoleIds) {
		toSerialize["exclusionWorkRoleIds"] = o.ExclusionWorkRoleIds
	}
	if o.AddAllWorkRoleExclusions.IsSet() {
		toSerialize["addAllWorkRoleExclusions"] = o.AddAllWorkRoleExclusions.Get()
	}
	if o.RemoveAllWorkRoleExclusions.IsSet() {
		toSerialize["removeAllWorkRoleExclusions"] = o.RemoveAllWorkRoleExclusions.Get()
	}
	if !IsNil(o.ExclusionWorkTypeIds) {
		toSerialize["exclusionWorkTypeIds"] = o.ExclusionWorkTypeIds
	}
	if o.AddAllWorkTypeExclusions.IsSet() {
		toSerialize["addAllWorkTypeExclusions"] = o.AddAllWorkTypeExclusions.Get()
	}
	if o.RemoveAllWorkTypeExclusions.IsSet() {
		toSerialize["removeAllWorkTypeExclusions"] = o.RemoveAllWorkTypeExclusions.Get()
	}
	if !IsNil(o.IntegrationXRef) {
		toSerialize["integrationXRef"] = o.IntegrationXRef
	}
	if o.ProrateFlag.IsSet() {
		toSerialize["prorateFlag"] = o.ProrateFlag.Get()
	}
	if !IsNil(o.EmailTemplate) {
		toSerialize["emailTemplate"] = o.EmailTemplate
	}
	if o.AutoInvoiceFlag.IsSet() {
		toSerialize["autoInvoiceFlag"] = o.AutoInvoiceFlag.Get()
	}
	if o.InvoiceProratedAdditionsFlag.IsSet() {
		toSerialize["invoiceProratedAdditionsFlag"] = o.InvoiceProratedAdditionsFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"employeeCompRate",
		"employeeCompNotExceed",
		"invoicingCycle",
		"billTime",
		"billExpenses",
		"billProducts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementType := _AgreementType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementType)

	if err != nil {
		return err
	}

	*o = AgreementType(varAgreementType)

	return err
}

type NullableAgreementType struct {
	value *AgreementType
	isSet bool
}

func (v NullableAgreementType) Get() *AgreementType {
	return v.value
}

func (v *NullableAgreementType) Set(val *AgreementType) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementType) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementType(val *AgreementType) *NullableAgreementType {
	return &NullableAgreementType{value: val, isSet: true}
}

func (v NullableAgreementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
