/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the AgreementTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementTypeInfo{}

// AgreementTypeInfo struct for AgreementTypeInfo
type AgreementTypeInfo struct {
	Id               *int32                 `json:"id,omitempty"`
	Name             *string                `json:"name,omitempty"`
	InactiveFlag     NullableBool           `json:"inactiveFlag,omitempty"`
	ApplicationUnits NullableString         `json:"applicationUnits,omitempty"`
	BillingTerms     *BillingTermsReference `json:"billingTerms,omitempty"`
	Info             *map[string]string     `json:"_info,omitempty"`
}

// NewAgreementTypeInfo instantiates a new AgreementTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementTypeInfo() *AgreementTypeInfo {
	this := AgreementTypeInfo{}
	return &this
}

// NewAgreementTypeInfoWithDefaults instantiates a new AgreementTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementTypeInfoWithDefaults() *AgreementTypeInfo {
	this := AgreementTypeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementTypeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementTypeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementTypeInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AgreementTypeInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AgreementTypeInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AgreementTypeInfo) SetName(v string) {
	o.Name = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *AgreementTypeInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *AgreementTypeInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *AgreementTypeInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *AgreementTypeInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetApplicationUnits returns the ApplicationUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeInfo) GetApplicationUnits() string {
	if o == nil || IsNil(o.ApplicationUnits.Get()) {
		var ret string
		return ret
	}
	return *o.ApplicationUnits.Get()
}

// GetApplicationUnitsOk returns a tuple with the ApplicationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeInfo) GetApplicationUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationUnits.Get(), o.ApplicationUnits.IsSet()
}

// HasApplicationUnits returns a boolean if a field has been set.
func (o *AgreementTypeInfo) HasApplicationUnits() bool {
	if o != nil && o.ApplicationUnits.IsSet() {
		return true
	}

	return false
}

// SetApplicationUnits gets a reference to the given NullableString and assigns it to the ApplicationUnits field.
func (o *AgreementTypeInfo) SetApplicationUnits(v string) {
	o.ApplicationUnits.Set(&v)
}

// SetApplicationUnitsNil sets the value for ApplicationUnits to be an explicit nil
func (o *AgreementTypeInfo) SetApplicationUnitsNil() {
	o.ApplicationUnits.Set(nil)
}

// UnsetApplicationUnits ensures that no value is present for ApplicationUnits, not even an explicit nil
func (o *AgreementTypeInfo) UnsetApplicationUnits() {
	o.ApplicationUnits.Unset()
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *AgreementTypeInfo) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeInfo) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *AgreementTypeInfo) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *AgreementTypeInfo) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementTypeInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementTypeInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementTypeInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.ApplicationUnits.IsSet() {
		toSerialize["applicationUnits"] = o.ApplicationUnits.Get()
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableAgreementTypeInfo struct {
	value *AgreementTypeInfo
	isSet bool
}

func (v NullableAgreementTypeInfo) Get() *AgreementTypeInfo {
	return v.value
}

func (v *NullableAgreementTypeInfo) Set(val *AgreementTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementTypeInfo(val *AgreementTypeInfo) *NullableAgreementTypeInfo {
	return &NullableAgreementTypeInfo{value: val, isSet: true}
}

func (v NullableAgreementTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
