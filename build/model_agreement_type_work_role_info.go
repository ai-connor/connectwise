/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the AgreementTypeWorkRoleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementTypeWorkRoleInfo{}

// AgreementTypeWorkRoleInfo struct for AgreementTypeWorkRoleInfo
type AgreementTypeWorkRoleInfo struct {
	Id       *int32                  `json:"id,omitempty"`
	Type     *AgreementTypeReference `json:"type,omitempty"`
	WorkRole *WorkRoleReference      `json:"workRole,omitempty"`
	Info     *map[string]string      `json:"_info,omitempty"`
}

// NewAgreementTypeWorkRoleInfo instantiates a new AgreementTypeWorkRoleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementTypeWorkRoleInfo() *AgreementTypeWorkRoleInfo {
	this := AgreementTypeWorkRoleInfo{}
	return &this
}

// NewAgreementTypeWorkRoleInfoWithDefaults instantiates a new AgreementTypeWorkRoleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementTypeWorkRoleInfoWithDefaults() *AgreementTypeWorkRoleInfo {
	this := AgreementTypeWorkRoleInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementTypeWorkRoleInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRoleInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementTypeWorkRoleInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementTypeWorkRoleInfo) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AgreementTypeWorkRoleInfo) GetType() AgreementTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRoleInfo) GetTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AgreementTypeWorkRoleInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AgreementTypeReference and assigns it to the Type field.
func (o *AgreementTypeWorkRoleInfo) SetType(v AgreementTypeReference) {
	o.Type = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *AgreementTypeWorkRoleInfo) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRoleInfo) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *AgreementTypeWorkRoleInfo) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *AgreementTypeWorkRoleInfo) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementTypeWorkRoleInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRoleInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementTypeWorkRoleInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementTypeWorkRoleInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementTypeWorkRoleInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementTypeWorkRoleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableAgreementTypeWorkRoleInfo struct {
	value *AgreementTypeWorkRoleInfo
	isSet bool
}

func (v NullableAgreementTypeWorkRoleInfo) Get() *AgreementTypeWorkRoleInfo {
	return v.value
}

func (v *NullableAgreementTypeWorkRoleInfo) Set(val *AgreementTypeWorkRoleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementTypeWorkRoleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementTypeWorkRoleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementTypeWorkRoleInfo(val *AgreementTypeWorkRoleInfo) *NullableAgreementTypeWorkRoleInfo {
	return &NullableAgreementTypeWorkRoleInfo{value: val, isSet: true}
}

func (v NullableAgreementTypeWorkRoleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementTypeWorkRoleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
