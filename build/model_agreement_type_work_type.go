/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AgreementTypeWorkType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementTypeWorkType{}

// AgreementTypeWorkType struct for AgreementTypeWorkType
type AgreementTypeWorkType struct {
	Id              *int32                  `json:"id,omitempty"`
	Type            *AgreementTypeReference `json:"type,omitempty"`
	WorkType        *WorkTypeReference      `json:"workType,omitempty"`
	EffectiveDate   *time.Time              `json:"effectiveDate,omitempty"`
	EndingDate      *time.Time              `json:"endingDate,omitempty"`
	Rate            NullableFloat64         `json:"rate,omitempty"`
	RateType        NullableString          `json:"rateType"`
	BillTime        NullableString          `json:"billTime"`
	HoursMin        NullableFloat64         `json:"hoursMin,omitempty"`
	HoursMax        NullableFloat64         `json:"hoursMax,omitempty"`
	RoundBillHours  NullableFloat64         `json:"roundBillHours,omitempty"`
	OverageRate     NullableFloat64         `json:"overageRate,omitempty"`
	OverageRateType NullableString          `json:"overageRateType"`
	LimitTo         NullableFloat64         `json:"limitTo,omitempty"`
	Info            *map[string]string      `json:"_info,omitempty"`
}

type _AgreementTypeWorkType AgreementTypeWorkType

// NewAgreementTypeWorkType instantiates a new AgreementTypeWorkType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementTypeWorkType(rateType NullableString, billTime NullableString, overageRateType NullableString) *AgreementTypeWorkType {
	this := AgreementTypeWorkType{}
	this.RateType = rateType
	this.BillTime = billTime
	this.OverageRateType = overageRateType
	return &this
}

// NewAgreementTypeWorkTypeWithDefaults instantiates a new AgreementTypeWorkType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementTypeWorkTypeWithDefaults() *AgreementTypeWorkType {
	this := AgreementTypeWorkType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementTypeWorkType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementTypeWorkType) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AgreementTypeWorkType) GetType() AgreementTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkType) GetTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AgreementTypeReference and assigns it to the Type field.
func (o *AgreementTypeWorkType) SetType(v AgreementTypeReference) {
	o.Type = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *AgreementTypeWorkType) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkType) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *AgreementTypeWorkType) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *AgreementTypeWorkType) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkType) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *AgreementTypeWorkType) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetEndingDate returns the EndingDate field value if set, zero value otherwise.
func (o *AgreementTypeWorkType) GetEndingDate() time.Time {
	if o == nil || IsNil(o.EndingDate) {
		var ret time.Time
		return ret
	}
	return *o.EndingDate
}

// GetEndingDateOk returns a tuple with the EndingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkType) GetEndingDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndingDate) {
		return nil, false
	}
	return o.EndingDate, true
}

// HasEndingDate returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasEndingDate() bool {
	if o != nil && !IsNil(o.EndingDate) {
		return true
	}

	return false
}

// SetEndingDate gets a reference to the given time.Time and assigns it to the EndingDate field.
func (o *AgreementTypeWorkType) SetEndingDate(v time.Time) {
	o.EndingDate = &v
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkType) GetRate() float64 {
	if o == nil || IsNil(o.Rate.Get()) {
		var ret float64
		return ret
	}
	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// HasRate returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasRate() bool {
	if o != nil && o.Rate.IsSet() {
		return true
	}

	return false
}

// SetRate gets a reference to the given NullableFloat64 and assigns it to the Rate field.
func (o *AgreementTypeWorkType) SetRate(v float64) {
	o.Rate.Set(&v)
}

// SetRateNil sets the value for Rate to be an explicit nil
func (o *AgreementTypeWorkType) SetRateNil() {
	o.Rate.Set(nil)
}

// UnsetRate ensures that no value is present for Rate, not even an explicit nil
func (o *AgreementTypeWorkType) UnsetRate() {
	o.Rate.Unset()
}

// GetRateType returns the RateType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementTypeWorkType) GetRateType() string {
	if o == nil || o.RateType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RateType.Get()
}

// GetRateTypeOk returns a tuple with the RateType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateType.Get(), o.RateType.IsSet()
}

// SetRateType sets field value
func (o *AgreementTypeWorkType) SetRateType(v string) {
	o.RateType.Set(&v)
}

// GetBillTime returns the BillTime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementTypeWorkType) GetBillTime() string {
	if o == nil || o.BillTime.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// SetBillTime sets field value
func (o *AgreementTypeWorkType) SetBillTime(v string) {
	o.BillTime.Set(&v)
}

// GetHoursMin returns the HoursMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkType) GetHoursMin() float64 {
	if o == nil || IsNil(o.HoursMin.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursMin.Get()
}

// GetHoursMinOk returns a tuple with the HoursMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetHoursMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursMin.Get(), o.HoursMin.IsSet()
}

// HasHoursMin returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasHoursMin() bool {
	if o != nil && o.HoursMin.IsSet() {
		return true
	}

	return false
}

// SetHoursMin gets a reference to the given NullableFloat64 and assigns it to the HoursMin field.
func (o *AgreementTypeWorkType) SetHoursMin(v float64) {
	o.HoursMin.Set(&v)
}

// SetHoursMinNil sets the value for HoursMin to be an explicit nil
func (o *AgreementTypeWorkType) SetHoursMinNil() {
	o.HoursMin.Set(nil)
}

// UnsetHoursMin ensures that no value is present for HoursMin, not even an explicit nil
func (o *AgreementTypeWorkType) UnsetHoursMin() {
	o.HoursMin.Unset()
}

// GetHoursMax returns the HoursMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkType) GetHoursMax() float64 {
	if o == nil || IsNil(o.HoursMax.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursMax.Get()
}

// GetHoursMaxOk returns a tuple with the HoursMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetHoursMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursMax.Get(), o.HoursMax.IsSet()
}

// HasHoursMax returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasHoursMax() bool {
	if o != nil && o.HoursMax.IsSet() {
		return true
	}

	return false
}

// SetHoursMax gets a reference to the given NullableFloat64 and assigns it to the HoursMax field.
func (o *AgreementTypeWorkType) SetHoursMax(v float64) {
	o.HoursMax.Set(&v)
}

// SetHoursMaxNil sets the value for HoursMax to be an explicit nil
func (o *AgreementTypeWorkType) SetHoursMaxNil() {
	o.HoursMax.Set(nil)
}

// UnsetHoursMax ensures that no value is present for HoursMax, not even an explicit nil
func (o *AgreementTypeWorkType) UnsetHoursMax() {
	o.HoursMax.Unset()
}

// GetRoundBillHours returns the RoundBillHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkType) GetRoundBillHours() float64 {
	if o == nil || IsNil(o.RoundBillHours.Get()) {
		var ret float64
		return ret
	}
	return *o.RoundBillHours.Get()
}

// GetRoundBillHoursOk returns a tuple with the RoundBillHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetRoundBillHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundBillHours.Get(), o.RoundBillHours.IsSet()
}

// HasRoundBillHours returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasRoundBillHours() bool {
	if o != nil && o.RoundBillHours.IsSet() {
		return true
	}

	return false
}

// SetRoundBillHours gets a reference to the given NullableFloat64 and assigns it to the RoundBillHours field.
func (o *AgreementTypeWorkType) SetRoundBillHours(v float64) {
	o.RoundBillHours.Set(&v)
}

// SetRoundBillHoursNil sets the value for RoundBillHours to be an explicit nil
func (o *AgreementTypeWorkType) SetRoundBillHoursNil() {
	o.RoundBillHours.Set(nil)
}

// UnsetRoundBillHours ensures that no value is present for RoundBillHours, not even an explicit nil
func (o *AgreementTypeWorkType) UnsetRoundBillHours() {
	o.RoundBillHours.Unset()
}

// GetOverageRate returns the OverageRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkType) GetOverageRate() float64 {
	if o == nil || IsNil(o.OverageRate.Get()) {
		var ret float64
		return ret
	}
	return *o.OverageRate.Get()
}

// GetOverageRateOk returns a tuple with the OverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetOverageRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverageRate.Get(), o.OverageRate.IsSet()
}

// HasOverageRate returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasOverageRate() bool {
	if o != nil && o.OverageRate.IsSet() {
		return true
	}

	return false
}

// SetOverageRate gets a reference to the given NullableFloat64 and assigns it to the OverageRate field.
func (o *AgreementTypeWorkType) SetOverageRate(v float64) {
	o.OverageRate.Set(&v)
}

// SetOverageRateNil sets the value for OverageRate to be an explicit nil
func (o *AgreementTypeWorkType) SetOverageRateNil() {
	o.OverageRate.Set(nil)
}

// UnsetOverageRate ensures that no value is present for OverageRate, not even an explicit nil
func (o *AgreementTypeWorkType) UnsetOverageRate() {
	o.OverageRate.Unset()
}

// GetOverageRateType returns the OverageRateType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementTypeWorkType) GetOverageRateType() string {
	if o == nil || o.OverageRateType.Get() == nil {
		var ret string
		return ret
	}

	return *o.OverageRateType.Get()
}

// GetOverageRateTypeOk returns a tuple with the OverageRateType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetOverageRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverageRateType.Get(), o.OverageRateType.IsSet()
}

// SetOverageRateType sets field value
func (o *AgreementTypeWorkType) SetOverageRateType(v string) {
	o.OverageRateType.Set(&v)
}

// GetLimitTo returns the LimitTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkType) GetLimitTo() float64 {
	if o == nil || IsNil(o.LimitTo.Get()) {
		var ret float64
		return ret
	}
	return *o.LimitTo.Get()
}

// GetLimitToOk returns a tuple with the LimitTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkType) GetLimitToOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LimitTo.Get(), o.LimitTo.IsSet()
}

// HasLimitTo returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasLimitTo() bool {
	if o != nil && o.LimitTo.IsSet() {
		return true
	}

	return false
}

// SetLimitTo gets a reference to the given NullableFloat64 and assigns it to the LimitTo field.
func (o *AgreementTypeWorkType) SetLimitTo(v float64) {
	o.LimitTo.Set(&v)
}

// SetLimitToNil sets the value for LimitTo to be an explicit nil
func (o *AgreementTypeWorkType) SetLimitToNil() {
	o.LimitTo.Set(nil)
}

// UnsetLimitTo ensures that no value is present for LimitTo, not even an explicit nil
func (o *AgreementTypeWorkType) UnsetLimitTo() {
	o.LimitTo.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementTypeWorkType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementTypeWorkType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementTypeWorkType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementTypeWorkType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementTypeWorkType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.EndingDate) {
		toSerialize["endingDate"] = o.EndingDate
	}
	if o.Rate.IsSet() {
		toSerialize["rate"] = o.Rate.Get()
	}
	toSerialize["rateType"] = o.RateType.Get()
	toSerialize["billTime"] = o.BillTime.Get()
	if o.HoursMin.IsSet() {
		toSerialize["hoursMin"] = o.HoursMin.Get()
	}
	if o.HoursMax.IsSet() {
		toSerialize["hoursMax"] = o.HoursMax.Get()
	}
	if o.RoundBillHours.IsSet() {
		toSerialize["roundBillHours"] = o.RoundBillHours.Get()
	}
	if o.OverageRate.IsSet() {
		toSerialize["overageRate"] = o.OverageRate.Get()
	}
	toSerialize["overageRateType"] = o.OverageRateType.Get()
	if o.LimitTo.IsSet() {
		toSerialize["limitTo"] = o.LimitTo.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementTypeWorkType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rateType",
		"billTime",
		"overageRateType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementTypeWorkType := _AgreementTypeWorkType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementTypeWorkType)

	if err != nil {
		return err
	}

	*o = AgreementTypeWorkType(varAgreementTypeWorkType)

	return err
}

type NullableAgreementTypeWorkType struct {
	value *AgreementTypeWorkType
	isSet bool
}

func (v NullableAgreementTypeWorkType) Get() *AgreementTypeWorkType {
	return v.value
}

func (v *NullableAgreementTypeWorkType) Set(val *AgreementTypeWorkType) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementTypeWorkType) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementTypeWorkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementTypeWorkType(val *AgreementTypeWorkType) *NullableAgreementTypeWorkType {
	return &NullableAgreementTypeWorkType{value: val, isSet: true}
}

func (v NullableAgreementTypeWorkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementTypeWorkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
