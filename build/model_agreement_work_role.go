/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AgreementWorkRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementWorkRole{}

// AgreementWorkRole struct for AgreementWorkRole
type AgreementWorkRole struct {
	Id            *int32               `json:"id,omitempty"`
	WorkRole      *WorkRoleReference   `json:"workRole,omitempty"`
	LocationId    NullableInt32        `json:"locationId,omitempty"`
	Location      *OwnerLevelReference `json:"location,omitempty"`
	RateType      NullableString       `json:"rateType"`
	Rate          NullableFloat64      `json:"rate,omitempty"`
	LimitTo       NullableFloat64      `json:"limitTo,omitempty"`
	EffectiveDate *time.Time           `json:"effectiveDate,omitempty"`
	EndingDate    *time.Time           `json:"endingDate,omitempty"`
	AgreementId   NullableInt32        `json:"agreementId,omitempty"`
	Agreement     *AgreementReference  `json:"agreement,omitempty"`
	Info          *map[string]string   `json:"_info,omitempty"`
}

type _AgreementWorkRole AgreementWorkRole

// NewAgreementWorkRole instantiates a new AgreementWorkRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementWorkRole(rateType NullableString) *AgreementWorkRole {
	this := AgreementWorkRole{}
	this.RateType = rateType
	return &this
}

// NewAgreementWorkRoleWithDefaults instantiates a new AgreementWorkRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementWorkRoleWithDefaults() *AgreementWorkRole {
	this := AgreementWorkRole{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementWorkRole) SetId(v int32) {
	o.Id = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *AgreementWorkRole) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementWorkRole) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementWorkRole) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *AgreementWorkRole) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}

// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *AgreementWorkRole) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *AgreementWorkRole) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetLocation() OwnerLevelReference {
	if o == nil || IsNil(o.Location) {
		var ret OwnerLevelReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetLocationOk() (*OwnerLevelReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given OwnerLevelReference and assigns it to the Location field.
func (o *AgreementWorkRole) SetLocation(v OwnerLevelReference) {
	o.Location = &v
}

// GetRateType returns the RateType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementWorkRole) GetRateType() string {
	if o == nil || o.RateType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RateType.Get()
}

// GetRateTypeOk returns a tuple with the RateType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementWorkRole) GetRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateType.Get(), o.RateType.IsSet()
}

// SetRateType sets field value
func (o *AgreementWorkRole) SetRateType(v string) {
	o.RateType.Set(&v)
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementWorkRole) GetRate() float64 {
	if o == nil || IsNil(o.Rate.Get()) {
		var ret float64
		return ret
	}
	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementWorkRole) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// HasRate returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasRate() bool {
	if o != nil && o.Rate.IsSet() {
		return true
	}

	return false
}

// SetRate gets a reference to the given NullableFloat64 and assigns it to the Rate field.
func (o *AgreementWorkRole) SetRate(v float64) {
	o.Rate.Set(&v)
}

// SetRateNil sets the value for Rate to be an explicit nil
func (o *AgreementWorkRole) SetRateNil() {
	o.Rate.Set(nil)
}

// UnsetRate ensures that no value is present for Rate, not even an explicit nil
func (o *AgreementWorkRole) UnsetRate() {
	o.Rate.Unset()
}

// GetLimitTo returns the LimitTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementWorkRole) GetLimitTo() float64 {
	if o == nil || IsNil(o.LimitTo.Get()) {
		var ret float64
		return ret
	}
	return *o.LimitTo.Get()
}

// GetLimitToOk returns a tuple with the LimitTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementWorkRole) GetLimitToOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LimitTo.Get(), o.LimitTo.IsSet()
}

// HasLimitTo returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasLimitTo() bool {
	if o != nil && o.LimitTo.IsSet() {
		return true
	}

	return false
}

// SetLimitTo gets a reference to the given NullableFloat64 and assigns it to the LimitTo field.
func (o *AgreementWorkRole) SetLimitTo(v float64) {
	o.LimitTo.Set(&v)
}

// SetLimitToNil sets the value for LimitTo to be an explicit nil
func (o *AgreementWorkRole) SetLimitToNil() {
	o.LimitTo.Set(nil)
}

// UnsetLimitTo ensures that no value is present for LimitTo, not even an explicit nil
func (o *AgreementWorkRole) UnsetLimitTo() {
	o.LimitTo.Unset()
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *AgreementWorkRole) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetEndingDate returns the EndingDate field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetEndingDate() time.Time {
	if o == nil || IsNil(o.EndingDate) {
		var ret time.Time
		return ret
	}
	return *o.EndingDate
}

// GetEndingDateOk returns a tuple with the EndingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetEndingDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndingDate) {
		return nil, false
	}
	return o.EndingDate, true
}

// HasEndingDate returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasEndingDate() bool {
	if o != nil && !IsNil(o.EndingDate) {
		return true
	}

	return false
}

// SetEndingDate gets a reference to the given time.Time and assigns it to the EndingDate field.
func (o *AgreementWorkRole) SetEndingDate(v time.Time) {
	o.EndingDate = &v
}

// GetAgreementId returns the AgreementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementWorkRole) GetAgreementId() int32 {
	if o == nil || IsNil(o.AgreementId.Get()) {
		var ret int32
		return ret
	}
	return *o.AgreementId.Get()
}

// GetAgreementIdOk returns a tuple with the AgreementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementWorkRole) GetAgreementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementId.Get(), o.AgreementId.IsSet()
}

// HasAgreementId returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasAgreementId() bool {
	if o != nil && o.AgreementId.IsSet() {
		return true
	}

	return false
}

// SetAgreementId gets a reference to the given NullableInt32 and assigns it to the AgreementId field.
func (o *AgreementWorkRole) SetAgreementId(v int32) {
	o.AgreementId.Set(&v)
}

// SetAgreementIdNil sets the value for AgreementId to be an explicit nil
func (o *AgreementWorkRole) SetAgreementIdNil() {
	o.AgreementId.Set(nil)
}

// UnsetAgreementId ensures that no value is present for AgreementId, not even an explicit nil
func (o *AgreementWorkRole) UnsetAgreementId() {
	o.AgreementId.Unset()
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *AgreementWorkRole) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementWorkRole) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkRole) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementWorkRole) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementWorkRole) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementWorkRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementWorkRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	toSerialize["rateType"] = o.RateType.Get()
	if o.Rate.IsSet() {
		toSerialize["rate"] = o.Rate.Get()
	}
	if o.LimitTo.IsSet() {
		toSerialize["limitTo"] = o.LimitTo.Get()
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.EndingDate) {
		toSerialize["endingDate"] = o.EndingDate
	}
	if o.AgreementId.IsSet() {
		toSerialize["agreementId"] = o.AgreementId.Get()
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementWorkRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rateType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementWorkRole := _AgreementWorkRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementWorkRole)

	if err != nil {
		return err
	}

	*o = AgreementWorkRole(varAgreementWorkRole)

	return err
}

type NullableAgreementWorkRole struct {
	value *AgreementWorkRole
	isSet bool
}

func (v NullableAgreementWorkRole) Get() *AgreementWorkRole {
	return v.value
}

func (v *NullableAgreementWorkRole) Set(val *AgreementWorkRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementWorkRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementWorkRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementWorkRole(val *AgreementWorkRole) *NullableAgreementWorkRole {
	return &NullableAgreementWorkRole{value: val, isSet: true}
}

func (v NullableAgreementWorkRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementWorkRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
