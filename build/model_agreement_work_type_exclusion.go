/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AgreementWorkTypeExclusion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementWorkTypeExclusion{}

// AgreementWorkTypeExclusion struct for AgreementWorkTypeExclusion
type AgreementWorkTypeExclusion struct {
	Id          *int32             `json:"id,omitempty"`
	WorkType    WorkTypeReference  `json:"workType"`
	AgreementId NullableInt32      `json:"agreementId,omitempty"`
	Info        *map[string]string `json:"_info,omitempty"`
}

type _AgreementWorkTypeExclusion AgreementWorkTypeExclusion

// NewAgreementWorkTypeExclusion instantiates a new AgreementWorkTypeExclusion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementWorkTypeExclusion(workType WorkTypeReference) *AgreementWorkTypeExclusion {
	this := AgreementWorkTypeExclusion{}
	this.WorkType = workType
	return &this
}

// NewAgreementWorkTypeExclusionWithDefaults instantiates a new AgreementWorkTypeExclusion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementWorkTypeExclusionWithDefaults() *AgreementWorkTypeExclusion {
	this := AgreementWorkTypeExclusion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementWorkTypeExclusion) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkTypeExclusion) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementWorkTypeExclusion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementWorkTypeExclusion) SetId(v int32) {
	o.Id = &v
}

// GetWorkType returns the WorkType field value
func (o *AgreementWorkTypeExclusion) GetWorkType() WorkTypeReference {
	if o == nil {
		var ret WorkTypeReference
		return ret
	}

	return o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value
// and a boolean to check if the value has been set.
func (o *AgreementWorkTypeExclusion) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkType, true
}

// SetWorkType sets field value
func (o *AgreementWorkTypeExclusion) SetWorkType(v WorkTypeReference) {
	o.WorkType = v
}

// GetAgreementId returns the AgreementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementWorkTypeExclusion) GetAgreementId() int32 {
	if o == nil || IsNil(o.AgreementId.Get()) {
		var ret int32
		return ret
	}
	return *o.AgreementId.Get()
}

// GetAgreementIdOk returns a tuple with the AgreementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementWorkTypeExclusion) GetAgreementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementId.Get(), o.AgreementId.IsSet()
}

// HasAgreementId returns a boolean if a field has been set.
func (o *AgreementWorkTypeExclusion) HasAgreementId() bool {
	if o != nil && o.AgreementId.IsSet() {
		return true
	}

	return false
}

// SetAgreementId gets a reference to the given NullableInt32 and assigns it to the AgreementId field.
func (o *AgreementWorkTypeExclusion) SetAgreementId(v int32) {
	o.AgreementId.Set(&v)
}

// SetAgreementIdNil sets the value for AgreementId to be an explicit nil
func (o *AgreementWorkTypeExclusion) SetAgreementIdNil() {
	o.AgreementId.Set(nil)
}

// UnsetAgreementId ensures that no value is present for AgreementId, not even an explicit nil
func (o *AgreementWorkTypeExclusion) UnsetAgreementId() {
	o.AgreementId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementWorkTypeExclusion) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementWorkTypeExclusion) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementWorkTypeExclusion) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementWorkTypeExclusion) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementWorkTypeExclusion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementWorkTypeExclusion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["workType"] = o.WorkType
	if o.AgreementId.IsSet() {
		toSerialize["agreementId"] = o.AgreementId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementWorkTypeExclusion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementWorkTypeExclusion := _AgreementWorkTypeExclusion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementWorkTypeExclusion)

	if err != nil {
		return err
	}

	*o = AgreementWorkTypeExclusion(varAgreementWorkTypeExclusion)

	return err
}

type NullableAgreementWorkTypeExclusion struct {
	value *AgreementWorkTypeExclusion
	isSet bool
}

func (v NullableAgreementWorkTypeExclusion) Get() *AgreementWorkTypeExclusion {
	return v.value
}

func (v *NullableAgreementWorkTypeExclusion) Set(val *AgreementWorkTypeExclusion) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementWorkTypeExclusion) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementWorkTypeExclusion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementWorkTypeExclusion(val *AgreementWorkTypeExclusion) *NullableAgreementWorkTypeExclusion {
	return &NullableAgreementWorkTypeExclusion{value: val, isSet: true}
}

func (v NullableAgreementWorkTypeExclusion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementWorkTypeExclusion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
