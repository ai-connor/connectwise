/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ApiRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiRequest{}

// ApiRequest struct for ApiRequest
type ApiRequest struct {
	Id                      *int32                            `json:"id,omitempty"`
	ExternalId              *string                           `json:"externalId,omitempty"`
	ParentId                NullableInt32                     `json:"parentId,omitempty"`
	GrandParentId           NullableInt32                     `json:"grandParentId,omitempty"`
	Entity                  *IRestIdentifiedItem              `json:"entity,omitempty"`
	Filters                 *FilterValues                     `json:"filters,omitempty"`
	Page                    *PageValues                       `json:"page,omitempty"`
	Fields                  *string                           `json:"fields,omitempty"`
	MiscProperties          map[string]map[string]interface{} `json:"miscProperties,omitempty"`
	MemberContext           *string                           `json:"memberContext,omitempty"`
	UpdateOnlyCesProperties *bool                             `json:"updateOnlyCesProperties,omitempty"`
}

// NewApiRequest instantiates a new ApiRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRequest() *ApiRequest {
	this := ApiRequest{}
	return &this
}

// NewApiRequestWithDefaults instantiates a new ApiRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRequestWithDefaults() *ApiRequest {
	this := ApiRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ApiRequest) SetId(v int32) {
	o.Id = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ApiRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ApiRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ApiRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiRequest) GetParentId() int32 {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiRequest) GetParentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *ApiRequest) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt32 and assigns it to the ParentId field.
func (o *ApiRequest) SetParentId(v int32) {
	o.ParentId.Set(&v)
}

// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *ApiRequest) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *ApiRequest) UnsetParentId() {
	o.ParentId.Unset()
}

// GetGrandParentId returns the GrandParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiRequest) GetGrandParentId() int32 {
	if o == nil || IsNil(o.GrandParentId.Get()) {
		var ret int32
		return ret
	}
	return *o.GrandParentId.Get()
}

// GetGrandParentIdOk returns a tuple with the GrandParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiRequest) GetGrandParentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrandParentId.Get(), o.GrandParentId.IsSet()
}

// HasGrandParentId returns a boolean if a field has been set.
func (o *ApiRequest) HasGrandParentId() bool {
	if o != nil && o.GrandParentId.IsSet() {
		return true
	}

	return false
}

// SetGrandParentId gets a reference to the given NullableInt32 and assigns it to the GrandParentId field.
func (o *ApiRequest) SetGrandParentId(v int32) {
	o.GrandParentId.Set(&v)
}

// SetGrandParentIdNil sets the value for GrandParentId to be an explicit nil
func (o *ApiRequest) SetGrandParentIdNil() {
	o.GrandParentId.Set(nil)
}

// UnsetGrandParentId ensures that no value is present for GrandParentId, not even an explicit nil
func (o *ApiRequest) UnsetGrandParentId() {
	o.GrandParentId.Unset()
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *ApiRequest) GetEntity() IRestIdentifiedItem {
	if o == nil || IsNil(o.Entity) {
		var ret IRestIdentifiedItem
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetEntityOk() (*IRestIdentifiedItem, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *ApiRequest) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given IRestIdentifiedItem and assigns it to the Entity field.
func (o *ApiRequest) SetEntity(v IRestIdentifiedItem) {
	o.Entity = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ApiRequest) GetFilters() FilterValues {
	if o == nil || IsNil(o.Filters) {
		var ret FilterValues
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetFiltersOk() (*FilterValues, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ApiRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given FilterValues and assigns it to the Filters field.
func (o *ApiRequest) SetFilters(v FilterValues) {
	o.Filters = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ApiRequest) GetPage() PageValues {
	if o == nil || IsNil(o.Page) {
		var ret PageValues
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetPageOk() (*PageValues, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ApiRequest) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given PageValues and assigns it to the Page field.
func (o *ApiRequest) SetPage(v PageValues) {
	o.Page = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ApiRequest) GetFields() string {
	if o == nil || IsNil(o.Fields) {
		var ret string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ApiRequest) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given string and assigns it to the Fields field.
func (o *ApiRequest) SetFields(v string) {
	o.Fields = &v
}

// GetMiscProperties returns the MiscProperties field value if set, zero value otherwise.
func (o *ApiRequest) GetMiscProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.MiscProperties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.MiscProperties
}

// GetMiscPropertiesOk returns a tuple with the MiscProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetMiscPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.MiscProperties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.MiscProperties, true
}

// HasMiscProperties returns a boolean if a field has been set.
func (o *ApiRequest) HasMiscProperties() bool {
	if o != nil && !IsNil(o.MiscProperties) {
		return true
	}

	return false
}

// SetMiscProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the MiscProperties field.
func (o *ApiRequest) SetMiscProperties(v map[string]map[string]interface{}) {
	o.MiscProperties = v
}

// GetMemberContext returns the MemberContext field value if set, zero value otherwise.
func (o *ApiRequest) GetMemberContext() string {
	if o == nil || IsNil(o.MemberContext) {
		var ret string
		return ret
	}
	return *o.MemberContext
}

// GetMemberContextOk returns a tuple with the MemberContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetMemberContextOk() (*string, bool) {
	if o == nil || IsNil(o.MemberContext) {
		return nil, false
	}
	return o.MemberContext, true
}

// HasMemberContext returns a boolean if a field has been set.
func (o *ApiRequest) HasMemberContext() bool {
	if o != nil && !IsNil(o.MemberContext) {
		return true
	}

	return false
}

// SetMemberContext gets a reference to the given string and assigns it to the MemberContext field.
func (o *ApiRequest) SetMemberContext(v string) {
	o.MemberContext = &v
}

// GetUpdateOnlyCesProperties returns the UpdateOnlyCesProperties field value if set, zero value otherwise.
func (o *ApiRequest) GetUpdateOnlyCesProperties() bool {
	if o == nil || IsNil(o.UpdateOnlyCesProperties) {
		var ret bool
		return ret
	}
	return *o.UpdateOnlyCesProperties
}

// GetUpdateOnlyCesPropertiesOk returns a tuple with the UpdateOnlyCesProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequest) GetUpdateOnlyCesPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateOnlyCesProperties) {
		return nil, false
	}
	return o.UpdateOnlyCesProperties, true
}

// HasUpdateOnlyCesProperties returns a boolean if a field has been set.
func (o *ApiRequest) HasUpdateOnlyCesProperties() bool {
	if o != nil && !IsNil(o.UpdateOnlyCesProperties) {
		return true
	}

	return false
}

// SetUpdateOnlyCesProperties gets a reference to the given bool and assigns it to the UpdateOnlyCesProperties field.
func (o *ApiRequest) SetUpdateOnlyCesProperties(v bool) {
	o.UpdateOnlyCesProperties = &v
}

func (o ApiRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	if o.GrandParentId.IsSet() {
		toSerialize["grandParentId"] = o.GrandParentId.Get()
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.MiscProperties) {
		toSerialize["miscProperties"] = o.MiscProperties
	}
	if !IsNil(o.MemberContext) {
		toSerialize["memberContext"] = o.MemberContext
	}
	if !IsNil(o.UpdateOnlyCesProperties) {
		toSerialize["updateOnlyCesProperties"] = o.UpdateOnlyCesProperties
	}
	return toSerialize, nil
}

type NullableApiRequest struct {
	value *ApiRequest
	isSet bool
}

func (v NullableApiRequest) Get() *ApiRequest {
	return v.value
}

func (v *NullableApiRequest) Set(val *ApiRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRequest(val *ApiRequest) *NullableApiRequest {
	return &NullableApiRequest{value: val, isSet: true}
}

func (v NullableApiRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
