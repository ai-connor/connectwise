/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the AuditTrailEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditTrailEntry{}

// AuditTrailEntry struct for AuditTrailEntry
type AuditTrailEntry struct {
	Text         *string `json:"text,omitempty"`
	EnteredDate  *string `json:"enteredDate,omitempty"`
	EnteredBy    *string `json:"enteredBy,omitempty"`
	AuditType    *string `json:"auditType,omitempty"`
	AuditSubType *string `json:"auditSubType,omitempty"`
	AuditSource  *string `json:"auditSource,omitempty"`
}

// NewAuditTrailEntry instantiates a new AuditTrailEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditTrailEntry() *AuditTrailEntry {
	this := AuditTrailEntry{}
	return &this
}

// NewAuditTrailEntryWithDefaults instantiates a new AuditTrailEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditTrailEntryWithDefaults() *AuditTrailEntry {
	this := AuditTrailEntry{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *AuditTrailEntry) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrailEntry) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *AuditTrailEntry) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *AuditTrailEntry) SetText(v string) {
	o.Text = &v
}

// GetEnteredDate returns the EnteredDate field value if set, zero value otherwise.
func (o *AuditTrailEntry) GetEnteredDate() string {
	if o == nil || IsNil(o.EnteredDate) {
		var ret string
		return ret
	}
	return *o.EnteredDate
}

// GetEnteredDateOk returns a tuple with the EnteredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrailEntry) GetEnteredDateOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredDate) {
		return nil, false
	}
	return o.EnteredDate, true
}

// HasEnteredDate returns a boolean if a field has been set.
func (o *AuditTrailEntry) HasEnteredDate() bool {
	if o != nil && !IsNil(o.EnteredDate) {
		return true
	}

	return false
}

// SetEnteredDate gets a reference to the given string and assigns it to the EnteredDate field.
func (o *AuditTrailEntry) SetEnteredDate(v string) {
	o.EnteredDate = &v
}

// GetEnteredBy returns the EnteredBy field value if set, zero value otherwise.
func (o *AuditTrailEntry) GetEnteredBy() string {
	if o == nil || IsNil(o.EnteredBy) {
		var ret string
		return ret
	}
	return *o.EnteredBy
}

// GetEnteredByOk returns a tuple with the EnteredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrailEntry) GetEnteredByOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredBy) {
		return nil, false
	}
	return o.EnteredBy, true
}

// HasEnteredBy returns a boolean if a field has been set.
func (o *AuditTrailEntry) HasEnteredBy() bool {
	if o != nil && !IsNil(o.EnteredBy) {
		return true
	}

	return false
}

// SetEnteredBy gets a reference to the given string and assigns it to the EnteredBy field.
func (o *AuditTrailEntry) SetEnteredBy(v string) {
	o.EnteredBy = &v
}

// GetAuditType returns the AuditType field value if set, zero value otherwise.
func (o *AuditTrailEntry) GetAuditType() string {
	if o == nil || IsNil(o.AuditType) {
		var ret string
		return ret
	}
	return *o.AuditType
}

// GetAuditTypeOk returns a tuple with the AuditType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrailEntry) GetAuditTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuditType) {
		return nil, false
	}
	return o.AuditType, true
}

// HasAuditType returns a boolean if a field has been set.
func (o *AuditTrailEntry) HasAuditType() bool {
	if o != nil && !IsNil(o.AuditType) {
		return true
	}

	return false
}

// SetAuditType gets a reference to the given string and assigns it to the AuditType field.
func (o *AuditTrailEntry) SetAuditType(v string) {
	o.AuditType = &v
}

// GetAuditSubType returns the AuditSubType field value if set, zero value otherwise.
func (o *AuditTrailEntry) GetAuditSubType() string {
	if o == nil || IsNil(o.AuditSubType) {
		var ret string
		return ret
	}
	return *o.AuditSubType
}

// GetAuditSubTypeOk returns a tuple with the AuditSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrailEntry) GetAuditSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuditSubType) {
		return nil, false
	}
	return o.AuditSubType, true
}

// HasAuditSubType returns a boolean if a field has been set.
func (o *AuditTrailEntry) HasAuditSubType() bool {
	if o != nil && !IsNil(o.AuditSubType) {
		return true
	}

	return false
}

// SetAuditSubType gets a reference to the given string and assigns it to the AuditSubType field.
func (o *AuditTrailEntry) SetAuditSubType(v string) {
	o.AuditSubType = &v
}

// GetAuditSource returns the AuditSource field value if set, zero value otherwise.
func (o *AuditTrailEntry) GetAuditSource() string {
	if o == nil || IsNil(o.AuditSource) {
		var ret string
		return ret
	}
	return *o.AuditSource
}

// GetAuditSourceOk returns a tuple with the AuditSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditTrailEntry) GetAuditSourceOk() (*string, bool) {
	if o == nil || IsNil(o.AuditSource) {
		return nil, false
	}
	return o.AuditSource, true
}

// HasAuditSource returns a boolean if a field has been set.
func (o *AuditTrailEntry) HasAuditSource() bool {
	if o != nil && !IsNil(o.AuditSource) {
		return true
	}

	return false
}

// SetAuditSource gets a reference to the given string and assigns it to the AuditSource field.
func (o *AuditTrailEntry) SetAuditSource(v string) {
	o.AuditSource = &v
}

func (o AuditTrailEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditTrailEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.EnteredDate) {
		toSerialize["enteredDate"] = o.EnteredDate
	}
	if !IsNil(o.EnteredBy) {
		toSerialize["enteredBy"] = o.EnteredBy
	}
	if !IsNil(o.AuditType) {
		toSerialize["auditType"] = o.AuditType
	}
	if !IsNil(o.AuditSubType) {
		toSerialize["auditSubType"] = o.AuditSubType
	}
	if !IsNil(o.AuditSource) {
		toSerialize["auditSource"] = o.AuditSource
	}
	return toSerialize, nil
}

type NullableAuditTrailEntry struct {
	value *AuditTrailEntry
	isSet bool
}

func (v NullableAuditTrailEntry) Get() *AuditTrailEntry {
	return v.value
}

func (v *NullableAuditTrailEntry) Set(val *AuditTrailEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditTrailEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditTrailEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditTrailEntry(val *AuditTrailEntry) *NullableAuditTrailEntry {
	return &NullableAuditTrailEntry{value: val, isSet: true}
}

func (v NullableAuditTrailEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditTrailEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
