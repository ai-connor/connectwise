/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the BoardExcludedMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardExcludedMember{}

// BoardExcludedMember struct for BoardExcludedMember
type BoardExcludedMember struct {
	Id       *int32             `json:"id,omitempty"`
	MemberId *int32             `json:"memberId,omitempty"`
	BoardId  NullableInt32      `json:"boardId,omitempty"`
	Info     *map[string]string `json:"_info,omitempty"`
}

// NewBoardExcludedMember instantiates a new BoardExcludedMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardExcludedMember() *BoardExcludedMember {
	this := BoardExcludedMember{}
	return &this
}

// NewBoardExcludedMemberWithDefaults instantiates a new BoardExcludedMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardExcludedMemberWithDefaults() *BoardExcludedMember {
	this := BoardExcludedMember{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardExcludedMember) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardExcludedMember) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardExcludedMember) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardExcludedMember) SetId(v int32) {
	o.Id = &v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *BoardExcludedMember) GetMemberId() int32 {
	if o == nil || IsNil(o.MemberId) {
		var ret int32
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardExcludedMember) GetMemberIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MemberId) {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *BoardExcludedMember) HasMemberId() bool {
	if o != nil && !IsNil(o.MemberId) {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given int32 and assigns it to the MemberId field.
func (o *BoardExcludedMember) SetMemberId(v int32) {
	o.MemberId = &v
}

// GetBoardId returns the BoardId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardExcludedMember) GetBoardId() int32 {
	if o == nil || IsNil(o.BoardId.Get()) {
		var ret int32
		return ret
	}
	return *o.BoardId.Get()
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardExcludedMember) GetBoardIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoardId.Get(), o.BoardId.IsSet()
}

// HasBoardId returns a boolean if a field has been set.
func (o *BoardExcludedMember) HasBoardId() bool {
	if o != nil && o.BoardId.IsSet() {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given NullableInt32 and assigns it to the BoardId field.
func (o *BoardExcludedMember) SetBoardId(v int32) {
	o.BoardId.Set(&v)
}

// SetBoardIdNil sets the value for BoardId to be an explicit nil
func (o *BoardExcludedMember) SetBoardIdNil() {
	o.BoardId.Set(nil)
}

// UnsetBoardId ensures that no value is present for BoardId, not even an explicit nil
func (o *BoardExcludedMember) UnsetBoardId() {
	o.BoardId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardExcludedMember) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardExcludedMember) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardExcludedMember) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardExcludedMember) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardExcludedMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardExcludedMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MemberId) {
		toSerialize["memberId"] = o.MemberId
	}
	if o.BoardId.IsSet() {
		toSerialize["boardId"] = o.BoardId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableBoardExcludedMember struct {
	value *BoardExcludedMember
	isSet bool
}

func (v NullableBoardExcludedMember) Get() *BoardExcludedMember {
	return v.value
}

func (v *NullableBoardExcludedMember) Set(val *BoardExcludedMember) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardExcludedMember) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardExcludedMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardExcludedMember(val *BoardExcludedMember) *NullableBoardExcludedMember {
	return &NullableBoardExcludedMember{value: val, isSet: true}
}

func (v NullableBoardExcludedMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardExcludedMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
