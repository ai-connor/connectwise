/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the BoardInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardInfo{}

// BoardInfo struct for BoardInfo
type BoardInfo struct {
	Id                             *int32                     `json:"id,omitempty"`
	Name                           *string                    `json:"name,omitempty"`
	Location                       *SystemLocationReference   `json:"location,omitempty"`
	Department                     *SystemDepartmentReference `json:"department,omitempty"`
	ProjectFlag                    NullableBool               `json:"projectFlag,omitempty"`
	InactiveFlag                   NullableBool               `json:"inactiveFlag,omitempty"`
	ClosedLoopDiscussionsFlag      NullableBool               `json:"closedLoopDiscussionsFlag,omitempty"`
	ClosedLoopInternalAnalysisFlag NullableBool               `json:"closedLoopInternalAnalysisFlag,omitempty"`
	ClosedLoopResolutionFlag       NullableBool               `json:"closedLoopResolutionFlag,omitempty"`
	ClosedLoopAllFlag              NullableBool               `json:"closedLoopAllFlag,omitempty"`
	OverrideBillingSetupFlag       NullableBool               `json:"overrideBillingSetupFlag,omitempty"`
	BillTicketsAfterClosedFlag     NullableBool               `json:"billTicketsAfterClosedFlag,omitempty"`
	BillUnapprovedTimeExpenseFlag  NullableBool               `json:"billUnapprovedTimeExpenseFlag,omitempty"`
	BillTime                       NullableString             `json:"billTime,omitempty"`
	BillExpense                    NullableString             `json:"billExpense,omitempty"`
	BillProduct                    NullableString             `json:"billProduct,omitempty"`
	ProblemSort                    NullableString             `json:"problemSort,omitempty"`
	InternalAnalysisSort           NullableString             `json:"internalAnalysisSort,omitempty"`
	ResolutionSort                 NullableString             `json:"resolutionSort,omitempty"`
	AllSort                        NullableString             `json:"allSort,omitempty"`
	Info                           *map[string]string         `json:"_info,omitempty"`
}

// NewBoardInfo instantiates a new BoardInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardInfo() *BoardInfo {
	this := BoardInfo{}
	return &this
}

// NewBoardInfoWithDefaults instantiates a new BoardInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardInfoWithDefaults() *BoardInfo {
	this := BoardInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BoardInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BoardInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BoardInfo) SetName(v string) {
	o.Name = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *BoardInfo) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardInfo) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *BoardInfo) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *BoardInfo) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *BoardInfo) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardInfo) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *BoardInfo) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *BoardInfo) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetProjectFlag returns the ProjectFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetProjectFlag() bool {
	if o == nil || IsNil(o.ProjectFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProjectFlag.Get()
}

// GetProjectFlagOk returns a tuple with the ProjectFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetProjectFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectFlag.Get(), o.ProjectFlag.IsSet()
}

// HasProjectFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasProjectFlag() bool {
	if o != nil && o.ProjectFlag.IsSet() {
		return true
	}

	return false
}

// SetProjectFlag gets a reference to the given NullableBool and assigns it to the ProjectFlag field.
func (o *BoardInfo) SetProjectFlag(v bool) {
	o.ProjectFlag.Set(&v)
}

// SetProjectFlagNil sets the value for ProjectFlag to be an explicit nil
func (o *BoardInfo) SetProjectFlagNil() {
	o.ProjectFlag.Set(nil)
}

// UnsetProjectFlag ensures that no value is present for ProjectFlag, not even an explicit nil
func (o *BoardInfo) UnsetProjectFlag() {
	o.ProjectFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *BoardInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *BoardInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *BoardInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetClosedLoopDiscussionsFlag returns the ClosedLoopDiscussionsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetClosedLoopDiscussionsFlag() bool {
	if o == nil || IsNil(o.ClosedLoopDiscussionsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopDiscussionsFlag.Get()
}

// GetClosedLoopDiscussionsFlagOk returns a tuple with the ClosedLoopDiscussionsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetClosedLoopDiscussionsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopDiscussionsFlag.Get(), o.ClosedLoopDiscussionsFlag.IsSet()
}

// HasClosedLoopDiscussionsFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasClosedLoopDiscussionsFlag() bool {
	if o != nil && o.ClosedLoopDiscussionsFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopDiscussionsFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopDiscussionsFlag field.
func (o *BoardInfo) SetClosedLoopDiscussionsFlag(v bool) {
	o.ClosedLoopDiscussionsFlag.Set(&v)
}

// SetClosedLoopDiscussionsFlagNil sets the value for ClosedLoopDiscussionsFlag to be an explicit nil
func (o *BoardInfo) SetClosedLoopDiscussionsFlagNil() {
	o.ClosedLoopDiscussionsFlag.Set(nil)
}

// UnsetClosedLoopDiscussionsFlag ensures that no value is present for ClosedLoopDiscussionsFlag, not even an explicit nil
func (o *BoardInfo) UnsetClosedLoopDiscussionsFlag() {
	o.ClosedLoopDiscussionsFlag.Unset()
}

// GetClosedLoopInternalAnalysisFlag returns the ClosedLoopInternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetClosedLoopInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.ClosedLoopInternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopInternalAnalysisFlag.Get()
}

// GetClosedLoopInternalAnalysisFlagOk returns a tuple with the ClosedLoopInternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetClosedLoopInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopInternalAnalysisFlag.Get(), o.ClosedLoopInternalAnalysisFlag.IsSet()
}

// HasClosedLoopInternalAnalysisFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasClosedLoopInternalAnalysisFlag() bool {
	if o != nil && o.ClosedLoopInternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopInternalAnalysisFlag field.
func (o *BoardInfo) SetClosedLoopInternalAnalysisFlag(v bool) {
	o.ClosedLoopInternalAnalysisFlag.Set(&v)
}

// SetClosedLoopInternalAnalysisFlagNil sets the value for ClosedLoopInternalAnalysisFlag to be an explicit nil
func (o *BoardInfo) SetClosedLoopInternalAnalysisFlagNil() {
	o.ClosedLoopInternalAnalysisFlag.Set(nil)
}

// UnsetClosedLoopInternalAnalysisFlag ensures that no value is present for ClosedLoopInternalAnalysisFlag, not even an explicit nil
func (o *BoardInfo) UnsetClosedLoopInternalAnalysisFlag() {
	o.ClosedLoopInternalAnalysisFlag.Unset()
}

// GetClosedLoopResolutionFlag returns the ClosedLoopResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetClosedLoopResolutionFlag() bool {
	if o == nil || IsNil(o.ClosedLoopResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopResolutionFlag.Get()
}

// GetClosedLoopResolutionFlagOk returns a tuple with the ClosedLoopResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetClosedLoopResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopResolutionFlag.Get(), o.ClosedLoopResolutionFlag.IsSet()
}

// HasClosedLoopResolutionFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasClosedLoopResolutionFlag() bool {
	if o != nil && o.ClosedLoopResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopResolutionFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopResolutionFlag field.
func (o *BoardInfo) SetClosedLoopResolutionFlag(v bool) {
	o.ClosedLoopResolutionFlag.Set(&v)
}

// SetClosedLoopResolutionFlagNil sets the value for ClosedLoopResolutionFlag to be an explicit nil
func (o *BoardInfo) SetClosedLoopResolutionFlagNil() {
	o.ClosedLoopResolutionFlag.Set(nil)
}

// UnsetClosedLoopResolutionFlag ensures that no value is present for ClosedLoopResolutionFlag, not even an explicit nil
func (o *BoardInfo) UnsetClosedLoopResolutionFlag() {
	o.ClosedLoopResolutionFlag.Unset()
}

// GetClosedLoopAllFlag returns the ClosedLoopAllFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetClosedLoopAllFlag() bool {
	if o == nil || IsNil(o.ClosedLoopAllFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopAllFlag.Get()
}

// GetClosedLoopAllFlagOk returns a tuple with the ClosedLoopAllFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetClosedLoopAllFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopAllFlag.Get(), o.ClosedLoopAllFlag.IsSet()
}

// HasClosedLoopAllFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasClosedLoopAllFlag() bool {
	if o != nil && o.ClosedLoopAllFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopAllFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopAllFlag field.
func (o *BoardInfo) SetClosedLoopAllFlag(v bool) {
	o.ClosedLoopAllFlag.Set(&v)
}

// SetClosedLoopAllFlagNil sets the value for ClosedLoopAllFlag to be an explicit nil
func (o *BoardInfo) SetClosedLoopAllFlagNil() {
	o.ClosedLoopAllFlag.Set(nil)
}

// UnsetClosedLoopAllFlag ensures that no value is present for ClosedLoopAllFlag, not even an explicit nil
func (o *BoardInfo) UnsetClosedLoopAllFlag() {
	o.ClosedLoopAllFlag.Unset()
}

// GetOverrideBillingSetupFlag returns the OverrideBillingSetupFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetOverrideBillingSetupFlag() bool {
	if o == nil || IsNil(o.OverrideBillingSetupFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideBillingSetupFlag.Get()
}

// GetOverrideBillingSetupFlagOk returns a tuple with the OverrideBillingSetupFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetOverrideBillingSetupFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideBillingSetupFlag.Get(), o.OverrideBillingSetupFlag.IsSet()
}

// HasOverrideBillingSetupFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasOverrideBillingSetupFlag() bool {
	if o != nil && o.OverrideBillingSetupFlag.IsSet() {
		return true
	}

	return false
}

// SetOverrideBillingSetupFlag gets a reference to the given NullableBool and assigns it to the OverrideBillingSetupFlag field.
func (o *BoardInfo) SetOverrideBillingSetupFlag(v bool) {
	o.OverrideBillingSetupFlag.Set(&v)
}

// SetOverrideBillingSetupFlagNil sets the value for OverrideBillingSetupFlag to be an explicit nil
func (o *BoardInfo) SetOverrideBillingSetupFlagNil() {
	o.OverrideBillingSetupFlag.Set(nil)
}

// UnsetOverrideBillingSetupFlag ensures that no value is present for OverrideBillingSetupFlag, not even an explicit nil
func (o *BoardInfo) UnsetOverrideBillingSetupFlag() {
	o.OverrideBillingSetupFlag.Unset()
}

// GetBillTicketsAfterClosedFlag returns the BillTicketsAfterClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetBillTicketsAfterClosedFlag() bool {
	if o == nil || IsNil(o.BillTicketsAfterClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillTicketsAfterClosedFlag.Get()
}

// GetBillTicketsAfterClosedFlagOk returns a tuple with the BillTicketsAfterClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetBillTicketsAfterClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTicketsAfterClosedFlag.Get(), o.BillTicketsAfterClosedFlag.IsSet()
}

// HasBillTicketsAfterClosedFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasBillTicketsAfterClosedFlag() bool {
	if o != nil && o.BillTicketsAfterClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillTicketsAfterClosedFlag gets a reference to the given NullableBool and assigns it to the BillTicketsAfterClosedFlag field.
func (o *BoardInfo) SetBillTicketsAfterClosedFlag(v bool) {
	o.BillTicketsAfterClosedFlag.Set(&v)
}

// SetBillTicketsAfterClosedFlagNil sets the value for BillTicketsAfterClosedFlag to be an explicit nil
func (o *BoardInfo) SetBillTicketsAfterClosedFlagNil() {
	o.BillTicketsAfterClosedFlag.Set(nil)
}

// UnsetBillTicketsAfterClosedFlag ensures that no value is present for BillTicketsAfterClosedFlag, not even an explicit nil
func (o *BoardInfo) UnsetBillTicketsAfterClosedFlag() {
	o.BillTicketsAfterClosedFlag.Unset()
}

// GetBillUnapprovedTimeExpenseFlag returns the BillUnapprovedTimeExpenseFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetBillUnapprovedTimeExpenseFlag() bool {
	if o == nil || IsNil(o.BillUnapprovedTimeExpenseFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillUnapprovedTimeExpenseFlag.Get()
}

// GetBillUnapprovedTimeExpenseFlagOk returns a tuple with the BillUnapprovedTimeExpenseFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetBillUnapprovedTimeExpenseFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillUnapprovedTimeExpenseFlag.Get(), o.BillUnapprovedTimeExpenseFlag.IsSet()
}

// HasBillUnapprovedTimeExpenseFlag returns a boolean if a field has been set.
func (o *BoardInfo) HasBillUnapprovedTimeExpenseFlag() bool {
	if o != nil && o.BillUnapprovedTimeExpenseFlag.IsSet() {
		return true
	}

	return false
}

// SetBillUnapprovedTimeExpenseFlag gets a reference to the given NullableBool and assigns it to the BillUnapprovedTimeExpenseFlag field.
func (o *BoardInfo) SetBillUnapprovedTimeExpenseFlag(v bool) {
	o.BillUnapprovedTimeExpenseFlag.Set(&v)
}

// SetBillUnapprovedTimeExpenseFlagNil sets the value for BillUnapprovedTimeExpenseFlag to be an explicit nil
func (o *BoardInfo) SetBillUnapprovedTimeExpenseFlagNil() {
	o.BillUnapprovedTimeExpenseFlag.Set(nil)
}

// UnsetBillUnapprovedTimeExpenseFlag ensures that no value is present for BillUnapprovedTimeExpenseFlag, not even an explicit nil
func (o *BoardInfo) UnsetBillUnapprovedTimeExpenseFlag() {
	o.BillUnapprovedTimeExpenseFlag.Unset()
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *BoardInfo) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *BoardInfo) SetBillTime(v string) {
	o.BillTime.Set(&v)
}

// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *BoardInfo) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *BoardInfo) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillExpense returns the BillExpense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetBillExpense() string {
	if o == nil || IsNil(o.BillExpense.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpense.Get()
}

// GetBillExpenseOk returns a tuple with the BillExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetBillExpenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpense.Get(), o.BillExpense.IsSet()
}

// HasBillExpense returns a boolean if a field has been set.
func (o *BoardInfo) HasBillExpense() bool {
	if o != nil && o.BillExpense.IsSet() {
		return true
	}

	return false
}

// SetBillExpense gets a reference to the given NullableString and assigns it to the BillExpense field.
func (o *BoardInfo) SetBillExpense(v string) {
	o.BillExpense.Set(&v)
}

// SetBillExpenseNil sets the value for BillExpense to be an explicit nil
func (o *BoardInfo) SetBillExpenseNil() {
	o.BillExpense.Set(nil)
}

// UnsetBillExpense ensures that no value is present for BillExpense, not even an explicit nil
func (o *BoardInfo) UnsetBillExpense() {
	o.BillExpense.Unset()
}

// GetBillProduct returns the BillProduct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetBillProduct() string {
	if o == nil || IsNil(o.BillProduct.Get()) {
		var ret string
		return ret
	}
	return *o.BillProduct.Get()
}

// GetBillProductOk returns a tuple with the BillProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetBillProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProduct.Get(), o.BillProduct.IsSet()
}

// HasBillProduct returns a boolean if a field has been set.
func (o *BoardInfo) HasBillProduct() bool {
	if o != nil && o.BillProduct.IsSet() {
		return true
	}

	return false
}

// SetBillProduct gets a reference to the given NullableString and assigns it to the BillProduct field.
func (o *BoardInfo) SetBillProduct(v string) {
	o.BillProduct.Set(&v)
}

// SetBillProductNil sets the value for BillProduct to be an explicit nil
func (o *BoardInfo) SetBillProductNil() {
	o.BillProduct.Set(nil)
}

// UnsetBillProduct ensures that no value is present for BillProduct, not even an explicit nil
func (o *BoardInfo) UnsetBillProduct() {
	o.BillProduct.Unset()
}

// GetProblemSort returns the ProblemSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetProblemSort() string {
	if o == nil || IsNil(o.ProblemSort.Get()) {
		var ret string
		return ret
	}
	return *o.ProblemSort.Get()
}

// GetProblemSortOk returns a tuple with the ProblemSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetProblemSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProblemSort.Get(), o.ProblemSort.IsSet()
}

// HasProblemSort returns a boolean if a field has been set.
func (o *BoardInfo) HasProblemSort() bool {
	if o != nil && o.ProblemSort.IsSet() {
		return true
	}

	return false
}

// SetProblemSort gets a reference to the given NullableString and assigns it to the ProblemSort field.
func (o *BoardInfo) SetProblemSort(v string) {
	o.ProblemSort.Set(&v)
}

// SetProblemSortNil sets the value for ProblemSort to be an explicit nil
func (o *BoardInfo) SetProblemSortNil() {
	o.ProblemSort.Set(nil)
}

// UnsetProblemSort ensures that no value is present for ProblemSort, not even an explicit nil
func (o *BoardInfo) UnsetProblemSort() {
	o.ProblemSort.Unset()
}

// GetInternalAnalysisSort returns the InternalAnalysisSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetInternalAnalysisSort() string {
	if o == nil || IsNil(o.InternalAnalysisSort.Get()) {
		var ret string
		return ret
	}
	return *o.InternalAnalysisSort.Get()
}

// GetInternalAnalysisSortOk returns a tuple with the InternalAnalysisSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetInternalAnalysisSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalAnalysisSort.Get(), o.InternalAnalysisSort.IsSet()
}

// HasInternalAnalysisSort returns a boolean if a field has been set.
func (o *BoardInfo) HasInternalAnalysisSort() bool {
	if o != nil && o.InternalAnalysisSort.IsSet() {
		return true
	}

	return false
}

// SetInternalAnalysisSort gets a reference to the given NullableString and assigns it to the InternalAnalysisSort field.
func (o *BoardInfo) SetInternalAnalysisSort(v string) {
	o.InternalAnalysisSort.Set(&v)
}

// SetInternalAnalysisSortNil sets the value for InternalAnalysisSort to be an explicit nil
func (o *BoardInfo) SetInternalAnalysisSortNil() {
	o.InternalAnalysisSort.Set(nil)
}

// UnsetInternalAnalysisSort ensures that no value is present for InternalAnalysisSort, not even an explicit nil
func (o *BoardInfo) UnsetInternalAnalysisSort() {
	o.InternalAnalysisSort.Unset()
}

// GetResolutionSort returns the ResolutionSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetResolutionSort() string {
	if o == nil || IsNil(o.ResolutionSort.Get()) {
		var ret string
		return ret
	}
	return *o.ResolutionSort.Get()
}

// GetResolutionSortOk returns a tuple with the ResolutionSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetResolutionSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionSort.Get(), o.ResolutionSort.IsSet()
}

// HasResolutionSort returns a boolean if a field has been set.
func (o *BoardInfo) HasResolutionSort() bool {
	if o != nil && o.ResolutionSort.IsSet() {
		return true
	}

	return false
}

// SetResolutionSort gets a reference to the given NullableString and assigns it to the ResolutionSort field.
func (o *BoardInfo) SetResolutionSort(v string) {
	o.ResolutionSort.Set(&v)
}

// SetResolutionSortNil sets the value for ResolutionSort to be an explicit nil
func (o *BoardInfo) SetResolutionSortNil() {
	o.ResolutionSort.Set(nil)
}

// UnsetResolutionSort ensures that no value is present for ResolutionSort, not even an explicit nil
func (o *BoardInfo) UnsetResolutionSort() {
	o.ResolutionSort.Unset()
}

// GetAllSort returns the AllSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardInfo) GetAllSort() string {
	if o == nil || IsNil(o.AllSort.Get()) {
		var ret string
		return ret
	}
	return *o.AllSort.Get()
}

// GetAllSortOk returns a tuple with the AllSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardInfo) GetAllSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllSort.Get(), o.AllSort.IsSet()
}

// HasAllSort returns a boolean if a field has been set.
func (o *BoardInfo) HasAllSort() bool {
	if o != nil && o.AllSort.IsSet() {
		return true
	}

	return false
}

// SetAllSort gets a reference to the given NullableString and assigns it to the AllSort field.
func (o *BoardInfo) SetAllSort(v string) {
	o.AllSort.Set(&v)
}

// SetAllSortNil sets the value for AllSort to be an explicit nil
func (o *BoardInfo) SetAllSortNil() {
	o.AllSort.Set(nil)
}

// UnsetAllSort ensures that no value is present for AllSort, not even an explicit nil
func (o *BoardInfo) UnsetAllSort() {
	o.AllSort.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.ProjectFlag.IsSet() {
		toSerialize["projectFlag"] = o.ProjectFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.ClosedLoopDiscussionsFlag.IsSet() {
		toSerialize["closedLoopDiscussionsFlag"] = o.ClosedLoopDiscussionsFlag.Get()
	}
	if o.ClosedLoopInternalAnalysisFlag.IsSet() {
		toSerialize["closedLoopInternalAnalysisFlag"] = o.ClosedLoopInternalAnalysisFlag.Get()
	}
	if o.ClosedLoopResolutionFlag.IsSet() {
		toSerialize["closedLoopResolutionFlag"] = o.ClosedLoopResolutionFlag.Get()
	}
	if o.ClosedLoopAllFlag.IsSet() {
		toSerialize["closedLoopAllFlag"] = o.ClosedLoopAllFlag.Get()
	}
	if o.OverrideBillingSetupFlag.IsSet() {
		toSerialize["overrideBillingSetupFlag"] = o.OverrideBillingSetupFlag.Get()
	}
	if o.BillTicketsAfterClosedFlag.IsSet() {
		toSerialize["billTicketsAfterClosedFlag"] = o.BillTicketsAfterClosedFlag.Get()
	}
	if o.BillUnapprovedTimeExpenseFlag.IsSet() {
		toSerialize["billUnapprovedTimeExpenseFlag"] = o.BillUnapprovedTimeExpenseFlag.Get()
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.BillExpense.IsSet() {
		toSerialize["billExpense"] = o.BillExpense.Get()
	}
	if o.BillProduct.IsSet() {
		toSerialize["billProduct"] = o.BillProduct.Get()
	}
	if o.ProblemSort.IsSet() {
		toSerialize["problemSort"] = o.ProblemSort.Get()
	}
	if o.InternalAnalysisSort.IsSet() {
		toSerialize["internalAnalysisSort"] = o.InternalAnalysisSort.Get()
	}
	if o.ResolutionSort.IsSet() {
		toSerialize["resolutionSort"] = o.ResolutionSort.Get()
	}
	if o.AllSort.IsSet() {
		toSerialize["allSort"] = o.AllSort.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableBoardInfo struct {
	value *BoardInfo
	isSet bool
}

func (v NullableBoardInfo) Get() *BoardInfo {
	return v.value
}

func (v *NullableBoardInfo) Set(val *BoardInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardInfo(val *BoardInfo) *NullableBoardInfo {
	return &NullableBoardInfo{value: val, isSet: true}
}

func (v NullableBoardInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
