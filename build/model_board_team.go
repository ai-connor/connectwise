/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BoardTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardTeam{}

// BoardTeam struct for BoardTeam
type BoardTeam struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name                  string             `json:"name"`
	TeamLeader            MemberReference    `json:"teamLeader"`
	Members               []int32            `json:"members,omitempty"`
	DefaultFlag           NullableBool       `json:"defaultFlag,omitempty"`
	NotifyOnTicketDelete  NullableBool       `json:"notifyOnTicketDelete,omitempty"`
	DefaultRoundRobinFlag NullableBool       `json:"defaultRoundRobinFlag,omitempty"`
	RoundRobinFlag        NullableBool       `json:"roundRobinFlag,omitempty"`
	BoardId               NullableInt32      `json:"boardId,omitempty"`
	LocationId            NullableInt32      `json:"locationId,omitempty"`
	BusinessUnitId        NullableInt32      `json:"businessUnitId,omitempty"`
	Info                  *map[string]string `json:"_info,omitempty"`
}

type _BoardTeam BoardTeam

// NewBoardTeam instantiates a new BoardTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardTeam(name string, teamLeader MemberReference) *BoardTeam {
	this := BoardTeam{}
	this.Name = name
	this.TeamLeader = teamLeader
	return &this
}

// NewBoardTeamWithDefaults instantiates a new BoardTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardTeamWithDefaults() *BoardTeam {
	this := BoardTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardTeam) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTeam) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardTeam) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardTeam) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *BoardTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BoardTeam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BoardTeam) SetName(v string) {
	o.Name = v
}

// GetTeamLeader returns the TeamLeader field value
func (o *BoardTeam) GetTeamLeader() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.TeamLeader
}

// GetTeamLeaderOk returns a tuple with the TeamLeader field value
// and a boolean to check if the value has been set.
func (o *BoardTeam) GetTeamLeaderOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamLeader, true
}

// SetTeamLeader sets field value
func (o *BoardTeam) SetTeamLeader(v MemberReference) {
	o.TeamLeader = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *BoardTeam) GetMembers() []int32 {
	if o == nil || IsNil(o.Members) {
		var ret []int32
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTeam) GetMembersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *BoardTeam) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []int32 and assigns it to the Members field.
func (o *BoardTeam) SetMembers(v []int32) {
	o.Members = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *BoardTeam) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *BoardTeam) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *BoardTeam) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *BoardTeam) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetNotifyOnTicketDelete returns the NotifyOnTicketDelete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetNotifyOnTicketDelete() bool {
	if o == nil || IsNil(o.NotifyOnTicketDelete.Get()) {
		var ret bool
		return ret
	}
	return *o.NotifyOnTicketDelete.Get()
}

// GetNotifyOnTicketDeleteOk returns a tuple with the NotifyOnTicketDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetNotifyOnTicketDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotifyOnTicketDelete.Get(), o.NotifyOnTicketDelete.IsSet()
}

// HasNotifyOnTicketDelete returns a boolean if a field has been set.
func (o *BoardTeam) HasNotifyOnTicketDelete() bool {
	if o != nil && o.NotifyOnTicketDelete.IsSet() {
		return true
	}

	return false
}

// SetNotifyOnTicketDelete gets a reference to the given NullableBool and assigns it to the NotifyOnTicketDelete field.
func (o *BoardTeam) SetNotifyOnTicketDelete(v bool) {
	o.NotifyOnTicketDelete.Set(&v)
}

// SetNotifyOnTicketDeleteNil sets the value for NotifyOnTicketDelete to be an explicit nil
func (o *BoardTeam) SetNotifyOnTicketDeleteNil() {
	o.NotifyOnTicketDelete.Set(nil)
}

// UnsetNotifyOnTicketDelete ensures that no value is present for NotifyOnTicketDelete, not even an explicit nil
func (o *BoardTeam) UnsetNotifyOnTicketDelete() {
	o.NotifyOnTicketDelete.Unset()
}

// GetDefaultRoundRobinFlag returns the DefaultRoundRobinFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetDefaultRoundRobinFlag() bool {
	if o == nil || IsNil(o.DefaultRoundRobinFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultRoundRobinFlag.Get()
}

// GetDefaultRoundRobinFlagOk returns a tuple with the DefaultRoundRobinFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetDefaultRoundRobinFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRoundRobinFlag.Get(), o.DefaultRoundRobinFlag.IsSet()
}

// HasDefaultRoundRobinFlag returns a boolean if a field has been set.
func (o *BoardTeam) HasDefaultRoundRobinFlag() bool {
	if o != nil && o.DefaultRoundRobinFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultRoundRobinFlag gets a reference to the given NullableBool and assigns it to the DefaultRoundRobinFlag field.
func (o *BoardTeam) SetDefaultRoundRobinFlag(v bool) {
	o.DefaultRoundRobinFlag.Set(&v)
}

// SetDefaultRoundRobinFlagNil sets the value for DefaultRoundRobinFlag to be an explicit nil
func (o *BoardTeam) SetDefaultRoundRobinFlagNil() {
	o.DefaultRoundRobinFlag.Set(nil)
}

// UnsetDefaultRoundRobinFlag ensures that no value is present for DefaultRoundRobinFlag, not even an explicit nil
func (o *BoardTeam) UnsetDefaultRoundRobinFlag() {
	o.DefaultRoundRobinFlag.Unset()
}

// GetRoundRobinFlag returns the RoundRobinFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetRoundRobinFlag() bool {
	if o == nil || IsNil(o.RoundRobinFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RoundRobinFlag.Get()
}

// GetRoundRobinFlagOk returns a tuple with the RoundRobinFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetRoundRobinFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundRobinFlag.Get(), o.RoundRobinFlag.IsSet()
}

// HasRoundRobinFlag returns a boolean if a field has been set.
func (o *BoardTeam) HasRoundRobinFlag() bool {
	if o != nil && o.RoundRobinFlag.IsSet() {
		return true
	}

	return false
}

// SetRoundRobinFlag gets a reference to the given NullableBool and assigns it to the RoundRobinFlag field.
func (o *BoardTeam) SetRoundRobinFlag(v bool) {
	o.RoundRobinFlag.Set(&v)
}

// SetRoundRobinFlagNil sets the value for RoundRobinFlag to be an explicit nil
func (o *BoardTeam) SetRoundRobinFlagNil() {
	o.RoundRobinFlag.Set(nil)
}

// UnsetRoundRobinFlag ensures that no value is present for RoundRobinFlag, not even an explicit nil
func (o *BoardTeam) UnsetRoundRobinFlag() {
	o.RoundRobinFlag.Unset()
}

// GetBoardId returns the BoardId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetBoardId() int32 {
	if o == nil || IsNil(o.BoardId.Get()) {
		var ret int32
		return ret
	}
	return *o.BoardId.Get()
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetBoardIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoardId.Get(), o.BoardId.IsSet()
}

// HasBoardId returns a boolean if a field has been set.
func (o *BoardTeam) HasBoardId() bool {
	if o != nil && o.BoardId.IsSet() {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given NullableInt32 and assigns it to the BoardId field.
func (o *BoardTeam) SetBoardId(v int32) {
	o.BoardId.Set(&v)
}

// SetBoardIdNil sets the value for BoardId to be an explicit nil
func (o *BoardTeam) SetBoardIdNil() {
	o.BoardId.Set(nil)
}

// UnsetBoardId ensures that no value is present for BoardId, not even an explicit nil
func (o *BoardTeam) UnsetBoardId() {
	o.BoardId.Unset()
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *BoardTeam) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *BoardTeam) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}

// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *BoardTeam) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *BoardTeam) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardTeam) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardTeam) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *BoardTeam) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *BoardTeam) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}

// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *BoardTeam) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *BoardTeam) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardTeam) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTeam) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardTeam) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardTeam) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardTeam) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["teamLeader"] = o.TeamLeader
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.NotifyOnTicketDelete.IsSet() {
		toSerialize["notifyOnTicketDelete"] = o.NotifyOnTicketDelete.Get()
	}
	if o.DefaultRoundRobinFlag.IsSet() {
		toSerialize["defaultRoundRobinFlag"] = o.DefaultRoundRobinFlag.Get()
	}
	if o.RoundRobinFlag.IsSet() {
		toSerialize["roundRobinFlag"] = o.RoundRobinFlag.Get()
	}
	if o.BoardId.IsSet() {
		toSerialize["boardId"] = o.BoardId.Get()
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *BoardTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"teamLeader",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardTeam := _BoardTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoardTeam)

	if err != nil {
		return err
	}

	*o = BoardTeam(varBoardTeam)

	return err
}

type NullableBoardTeam struct {
	value *BoardTeam
	isSet bool
}

func (v NullableBoardTeam) Get() *BoardTeam {
	return v.value
}

func (v *NullableBoardTeam) Set(val *BoardTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardTeam(val *BoardTeam) *NullableBoardTeam {
	return &NullableBoardTeam{value: val, isSet: true}
}

func (v NullableBoardTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
