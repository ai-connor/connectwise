/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the BoardTypeSubTypeItemAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardTypeSubTypeItemAssociation{}

// BoardTypeSubTypeItemAssociation struct for BoardTypeSubTypeItemAssociation
type BoardTypeSubTypeItemAssociation struct {
	Id      *int32                   `json:"id,omitempty"`
	Type    *ServiceTypeReference    `json:"type,omitempty"`
	SubType *ServiceSubTypeReference `json:"subType,omitempty"`
	Item    *ServiceItemReference    `json:"item,omitempty"`
	Board   *BoardReference          `json:"board,omitempty"`
	Info    *map[string]string       `json:"_info,omitempty"`
}

// NewBoardTypeSubTypeItemAssociation instantiates a new BoardTypeSubTypeItemAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardTypeSubTypeItemAssociation() *BoardTypeSubTypeItemAssociation {
	this := BoardTypeSubTypeItemAssociation{}
	return &this
}

// NewBoardTypeSubTypeItemAssociationWithDefaults instantiates a new BoardTypeSubTypeItemAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardTypeSubTypeItemAssociationWithDefaults() *BoardTypeSubTypeItemAssociation {
	this := BoardTypeSubTypeItemAssociation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardTypeSubTypeItemAssociation) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTypeSubTypeItemAssociation) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardTypeSubTypeItemAssociation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardTypeSubTypeItemAssociation) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BoardTypeSubTypeItemAssociation) GetType() ServiceTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTypeSubTypeItemAssociation) GetTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BoardTypeSubTypeItemAssociation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceTypeReference and assigns it to the Type field.
func (o *BoardTypeSubTypeItemAssociation) SetType(v ServiceTypeReference) {
	o.Type = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *BoardTypeSubTypeItemAssociation) GetSubType() ServiceSubTypeReference {
	if o == nil || IsNil(o.SubType) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTypeSubTypeItemAssociation) GetSubTypeOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *BoardTypeSubTypeItemAssociation) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given ServiceSubTypeReference and assigns it to the SubType field.
func (o *BoardTypeSubTypeItemAssociation) SetSubType(v ServiceSubTypeReference) {
	o.SubType = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *BoardTypeSubTypeItemAssociation) GetItem() ServiceItemReference {
	if o == nil || IsNil(o.Item) {
		var ret ServiceItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTypeSubTypeItemAssociation) GetItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *BoardTypeSubTypeItemAssociation) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given ServiceItemReference and assigns it to the Item field.
func (o *BoardTypeSubTypeItemAssociation) SetItem(v ServiceItemReference) {
	o.Item = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *BoardTypeSubTypeItemAssociation) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTypeSubTypeItemAssociation) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *BoardTypeSubTypeItemAssociation) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *BoardTypeSubTypeItemAssociation) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardTypeSubTypeItemAssociation) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardTypeSubTypeItemAssociation) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardTypeSubTypeItemAssociation) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardTypeSubTypeItemAssociation) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardTypeSubTypeItemAssociation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardTypeSubTypeItemAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableBoardTypeSubTypeItemAssociation struct {
	value *BoardTypeSubTypeItemAssociation
	isSet bool
}

func (v NullableBoardTypeSubTypeItemAssociation) Get() *BoardTypeSubTypeItemAssociation {
	return v.value
}

func (v *NullableBoardTypeSubTypeItemAssociation) Set(val *BoardTypeSubTypeItemAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardTypeSubTypeItemAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardTypeSubTypeItemAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardTypeSubTypeItemAssociation(val *BoardTypeSubTypeItemAssociation) *NullableBoardTypeSubTypeItemAssociation {
	return &NullableBoardTypeSubTypeItemAssociation{value: val, isSet: true}
}

func (v NullableBoardTypeSubTypeItemAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardTypeSubTypeItemAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
