/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CatalogItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogItem{}

// CatalogItem struct for CatalogItem
type CatalogItem struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 75;
	Identifier string `json:"identifier"`
	//  Max length: 60;
	Description  string                      `json:"description"`
	InactiveFlag NullableBool                `json:"inactiveFlag,omitempty"`
	Subcategory  ProductSubCategoryReference `json:"subcategory"`
	Type         ProductTypeReference        `json:"type"`
	// Defaults to Non-Inventory.
	ProductClass       NullableString          `json:"productClass,omitempty"`
	SerializedFlag     NullableBool            `json:"serializedFlag,omitempty"`
	SerializedCostFlag NullableBool            `json:"serializedCostFlag,omitempty"`
	PhaseProductFlag   NullableBool            `json:"phaseProductFlag,omitempty"`
	UnitOfMeasure      *UnitOfMeasureReference `json:"unitOfMeasure,omitempty"`
	MinStockLevel      NullableInt32           `json:"minStockLevel,omitempty"`
	Price              NullableFloat64         `json:"price,omitempty"`
	Cost               NullableFloat64         `json:"cost,omitempty"`
	PriceAttribute     NullableString          `json:"priceAttribute,omitempty"`
	TaxableFlag        NullableBool            `json:"taxableFlag,omitempty"`
	DropShipFlag       NullableBool            `json:"dropShipFlag,omitempty"`
	SpecialOrderFlag   NullableBool            `json:"specialOrderFlag,omitempty"`
	//  Max length: 6000;
	CustomerDescription string                 `json:"customerDescription"`
	Manufacturer        *ManufacturerReference `json:"manufacturer,omitempty"`
	//  Max length: 50;
	ManufacturerPartNumber *string           `json:"manufacturerPartNumber,omitempty"`
	Vendor                 *CompanyReference `json:"vendor,omitempty"`
	//  Max length: 50;
	VendorSku *string `json:"vendorSku,omitempty"`
	Notes     *string `json:"notes,omitempty"`
	//  Max length: 50;
	IntegrationXRef         *string                   `json:"integrationXRef,omitempty"`
	Sla                     *SLAReference             `json:"sla,omitempty"`
	EntityType              *EntityTypeReference      `json:"entityType,omitempty"`
	RecurringFlag           NullableBool              `json:"recurringFlag,omitempty"`
	RecurringRevenue        NullableFloat64           `json:"recurringRevenue,omitempty"`
	RecurringCost           NullableFloat64           `json:"recurringCost,omitempty"`
	RecurringOneTimeFlag    NullableBool              `json:"recurringOneTimeFlag,omitempty"`
	RecurringBillCycle      *BillingCycleReference    `json:"recurringBillCycle,omitempty"`
	RecurringCycleType      NullableString            `json:"recurringCycleType,omitempty"`
	CalculatedPriceFlag     NullableBool              `json:"calculatedPriceFlag,omitempty"`
	CalculatedCostFlag      NullableBool              `json:"calculatedCostFlag,omitempty"`
	Category                *ProductCategoryReference `json:"category,omitempty"`
	CalculatedPrice         NullableFloat64           `json:"calculatedPrice,omitempty"`
	CalculatedCost          NullableFloat64           `json:"calculatedCost,omitempty"`
	BillableOption          NullableString            `json:"billableOption,omitempty"`
	ConnectWiseID           *string                   `json:"connectWiseID,omitempty"`
	AgreementType           *AgreementTypeReference   `json:"agreementType,omitempty"`
	MarkupPercentage        NullableFloat64           `json:"markupPercentage,omitempty"`
	MarkupFlag              NullableBool              `json:"markupFlag,omitempty"`
	AutoUpdateUnitCostFlag  NullableBool              `json:"autoUpdateUnitCostFlag,omitempty"`
	AutoUpdateUnitPriceFlag NullableBool              `json:"autoUpdateUnitPriceFlag,omitempty"`
	Info                    *map[string]string        `json:"_info,omitempty"`
	CustomFields            []CustomFieldValue        `json:"customFields,omitempty"`
}

type _CatalogItem CatalogItem

// NewCatalogItem instantiates a new CatalogItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItem(identifier string, description string, subcategory ProductSubCategoryReference, type_ ProductTypeReference, customerDescription string) *CatalogItem {
	this := CatalogItem{}
	this.Identifier = identifier
	this.Description = description
	this.Subcategory = subcategory
	this.Type = type_
	this.CustomerDescription = customerDescription
	return &this
}

// NewCatalogItemWithDefaults instantiates a new CatalogItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItemWithDefaults() *CatalogItem {
	this := CatalogItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogItem) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogItem) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value
func (o *CatalogItem) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *CatalogItem) SetIdentifier(v string) {
	o.Identifier = v
}

// GetDescription returns the Description field value
func (o *CatalogItem) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CatalogItem) SetDescription(v string) {
	o.Description = v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *CatalogItem) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *CatalogItem) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *CatalogItem) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetSubcategory returns the Subcategory field value
func (o *CatalogItem) GetSubcategory() ProductSubCategoryReference {
	if o == nil {
		var ret ProductSubCategoryReference
		return ret
	}

	return o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetSubcategoryOk() (*ProductSubCategoryReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subcategory, true
}

// SetSubcategory sets field value
func (o *CatalogItem) SetSubcategory(v ProductSubCategoryReference) {
	o.Subcategory = v
}

// GetType returns the Type field value
func (o *CatalogItem) GetType() ProductTypeReference {
	if o == nil {
		var ret ProductTypeReference
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetTypeOk() (*ProductTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogItem) SetType(v ProductTypeReference) {
	o.Type = v
}

// GetProductClass returns the ProductClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetProductClass() string {
	if o == nil || IsNil(o.ProductClass.Get()) {
		var ret string
		return ret
	}
	return *o.ProductClass.Get()
}

// GetProductClassOk returns a tuple with the ProductClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetProductClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductClass.Get(), o.ProductClass.IsSet()
}

// HasProductClass returns a boolean if a field has been set.
func (o *CatalogItem) HasProductClass() bool {
	if o != nil && o.ProductClass.IsSet() {
		return true
	}

	return false
}

// SetProductClass gets a reference to the given NullableString and assigns it to the ProductClass field.
func (o *CatalogItem) SetProductClass(v string) {
	o.ProductClass.Set(&v)
}

// SetProductClassNil sets the value for ProductClass to be an explicit nil
func (o *CatalogItem) SetProductClassNil() {
	o.ProductClass.Set(nil)
}

// UnsetProductClass ensures that no value is present for ProductClass, not even an explicit nil
func (o *CatalogItem) UnsetProductClass() {
	o.ProductClass.Unset()
}

// GetSerializedFlag returns the SerializedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetSerializedFlag() bool {
	if o == nil || IsNil(o.SerializedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SerializedFlag.Get()
}

// GetSerializedFlagOk returns a tuple with the SerializedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetSerializedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerializedFlag.Get(), o.SerializedFlag.IsSet()
}

// HasSerializedFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasSerializedFlag() bool {
	if o != nil && o.SerializedFlag.IsSet() {
		return true
	}

	return false
}

// SetSerializedFlag gets a reference to the given NullableBool and assigns it to the SerializedFlag field.
func (o *CatalogItem) SetSerializedFlag(v bool) {
	o.SerializedFlag.Set(&v)
}

// SetSerializedFlagNil sets the value for SerializedFlag to be an explicit nil
func (o *CatalogItem) SetSerializedFlagNil() {
	o.SerializedFlag.Set(nil)
}

// UnsetSerializedFlag ensures that no value is present for SerializedFlag, not even an explicit nil
func (o *CatalogItem) UnsetSerializedFlag() {
	o.SerializedFlag.Unset()
}

// GetSerializedCostFlag returns the SerializedCostFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetSerializedCostFlag() bool {
	if o == nil || IsNil(o.SerializedCostFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SerializedCostFlag.Get()
}

// GetSerializedCostFlagOk returns a tuple with the SerializedCostFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetSerializedCostFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerializedCostFlag.Get(), o.SerializedCostFlag.IsSet()
}

// HasSerializedCostFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasSerializedCostFlag() bool {
	if o != nil && o.SerializedCostFlag.IsSet() {
		return true
	}

	return false
}

// SetSerializedCostFlag gets a reference to the given NullableBool and assigns it to the SerializedCostFlag field.
func (o *CatalogItem) SetSerializedCostFlag(v bool) {
	o.SerializedCostFlag.Set(&v)
}

// SetSerializedCostFlagNil sets the value for SerializedCostFlag to be an explicit nil
func (o *CatalogItem) SetSerializedCostFlagNil() {
	o.SerializedCostFlag.Set(nil)
}

// UnsetSerializedCostFlag ensures that no value is present for SerializedCostFlag, not even an explicit nil
func (o *CatalogItem) UnsetSerializedCostFlag() {
	o.SerializedCostFlag.Unset()
}

// GetPhaseProductFlag returns the PhaseProductFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetPhaseProductFlag() bool {
	if o == nil || IsNil(o.PhaseProductFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PhaseProductFlag.Get()
}

// GetPhaseProductFlagOk returns a tuple with the PhaseProductFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetPhaseProductFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhaseProductFlag.Get(), o.PhaseProductFlag.IsSet()
}

// HasPhaseProductFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasPhaseProductFlag() bool {
	if o != nil && o.PhaseProductFlag.IsSet() {
		return true
	}

	return false
}

// SetPhaseProductFlag gets a reference to the given NullableBool and assigns it to the PhaseProductFlag field.
func (o *CatalogItem) SetPhaseProductFlag(v bool) {
	o.PhaseProductFlag.Set(&v)
}

// SetPhaseProductFlagNil sets the value for PhaseProductFlag to be an explicit nil
func (o *CatalogItem) SetPhaseProductFlagNil() {
	o.PhaseProductFlag.Set(nil)
}

// UnsetPhaseProductFlag ensures that no value is present for PhaseProductFlag, not even an explicit nil
func (o *CatalogItem) UnsetPhaseProductFlag() {
	o.PhaseProductFlag.Unset()
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *CatalogItem) GetUnitOfMeasure() UnitOfMeasureReference {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret UnitOfMeasureReference
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetUnitOfMeasureOk() (*UnitOfMeasureReference, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *CatalogItem) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given UnitOfMeasureReference and assigns it to the UnitOfMeasure field.
func (o *CatalogItem) SetUnitOfMeasure(v UnitOfMeasureReference) {
	o.UnitOfMeasure = &v
}

// GetMinStockLevel returns the MinStockLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetMinStockLevel() int32 {
	if o == nil || IsNil(o.MinStockLevel.Get()) {
		var ret int32
		return ret
	}
	return *o.MinStockLevel.Get()
}

// GetMinStockLevelOk returns a tuple with the MinStockLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetMinStockLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinStockLevel.Get(), o.MinStockLevel.IsSet()
}

// HasMinStockLevel returns a boolean if a field has been set.
func (o *CatalogItem) HasMinStockLevel() bool {
	if o != nil && o.MinStockLevel.IsSet() {
		return true
	}

	return false
}

// SetMinStockLevel gets a reference to the given NullableInt32 and assigns it to the MinStockLevel field.
func (o *CatalogItem) SetMinStockLevel(v int32) {
	o.MinStockLevel.Set(&v)
}

// SetMinStockLevelNil sets the value for MinStockLevel to be an explicit nil
func (o *CatalogItem) SetMinStockLevelNil() {
	o.MinStockLevel.Set(nil)
}

// UnsetMinStockLevel ensures that no value is present for MinStockLevel, not even an explicit nil
func (o *CatalogItem) UnsetMinStockLevel() {
	o.MinStockLevel.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *CatalogItem) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *CatalogItem) SetPrice(v float64) {
	o.Price.Set(&v)
}

// SetPriceNil sets the value for Price to be an explicit nil
func (o *CatalogItem) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *CatalogItem) UnsetPrice() {
	o.Price.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *CatalogItem) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *CatalogItem) SetCost(v float64) {
	o.Cost.Set(&v)
}

// SetCostNil sets the value for Cost to be an explicit nil
func (o *CatalogItem) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *CatalogItem) UnsetCost() {
	o.Cost.Unset()
}

// GetPriceAttribute returns the PriceAttribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetPriceAttribute() string {
	if o == nil || IsNil(o.PriceAttribute.Get()) {
		var ret string
		return ret
	}
	return *o.PriceAttribute.Get()
}

// GetPriceAttributeOk returns a tuple with the PriceAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetPriceAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceAttribute.Get(), o.PriceAttribute.IsSet()
}

// HasPriceAttribute returns a boolean if a field has been set.
func (o *CatalogItem) HasPriceAttribute() bool {
	if o != nil && o.PriceAttribute.IsSet() {
		return true
	}

	return false
}

// SetPriceAttribute gets a reference to the given NullableString and assigns it to the PriceAttribute field.
func (o *CatalogItem) SetPriceAttribute(v string) {
	o.PriceAttribute.Set(&v)
}

// SetPriceAttributeNil sets the value for PriceAttribute to be an explicit nil
func (o *CatalogItem) SetPriceAttributeNil() {
	o.PriceAttribute.Set(nil)
}

// UnsetPriceAttribute ensures that no value is present for PriceAttribute, not even an explicit nil
func (o *CatalogItem) UnsetPriceAttribute() {
	o.PriceAttribute.Unset()
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *CatalogItem) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}

// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *CatalogItem) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *CatalogItem) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetDropShipFlag returns the DropShipFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetDropShipFlag() bool {
	if o == nil || IsNil(o.DropShipFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropShipFlag.Get()
}

// GetDropShipFlagOk returns a tuple with the DropShipFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetDropShipFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropShipFlag.Get(), o.DropShipFlag.IsSet()
}

// HasDropShipFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasDropShipFlag() bool {
	if o != nil && o.DropShipFlag.IsSet() {
		return true
	}

	return false
}

// SetDropShipFlag gets a reference to the given NullableBool and assigns it to the DropShipFlag field.
func (o *CatalogItem) SetDropShipFlag(v bool) {
	o.DropShipFlag.Set(&v)
}

// SetDropShipFlagNil sets the value for DropShipFlag to be an explicit nil
func (o *CatalogItem) SetDropShipFlagNil() {
	o.DropShipFlag.Set(nil)
}

// UnsetDropShipFlag ensures that no value is present for DropShipFlag, not even an explicit nil
func (o *CatalogItem) UnsetDropShipFlag() {
	o.DropShipFlag.Unset()
}

// GetSpecialOrderFlag returns the SpecialOrderFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetSpecialOrderFlag() bool {
	if o == nil || IsNil(o.SpecialOrderFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SpecialOrderFlag.Get()
}

// GetSpecialOrderFlagOk returns a tuple with the SpecialOrderFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetSpecialOrderFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecialOrderFlag.Get(), o.SpecialOrderFlag.IsSet()
}

// HasSpecialOrderFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasSpecialOrderFlag() bool {
	if o != nil && o.SpecialOrderFlag.IsSet() {
		return true
	}

	return false
}

// SetSpecialOrderFlag gets a reference to the given NullableBool and assigns it to the SpecialOrderFlag field.
func (o *CatalogItem) SetSpecialOrderFlag(v bool) {
	o.SpecialOrderFlag.Set(&v)
}

// SetSpecialOrderFlagNil sets the value for SpecialOrderFlag to be an explicit nil
func (o *CatalogItem) SetSpecialOrderFlagNil() {
	o.SpecialOrderFlag.Set(nil)
}

// UnsetSpecialOrderFlag ensures that no value is present for SpecialOrderFlag, not even an explicit nil
func (o *CatalogItem) UnsetSpecialOrderFlag() {
	o.SpecialOrderFlag.Unset()
}

// GetCustomerDescription returns the CustomerDescription field value
func (o *CatalogItem) GetCustomerDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerDescription
}

// GetCustomerDescriptionOk returns a tuple with the CustomerDescription field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetCustomerDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerDescription, true
}

// SetCustomerDescription sets field value
func (o *CatalogItem) SetCustomerDescription(v string) {
	o.CustomerDescription = v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *CatalogItem) GetManufacturer() ManufacturerReference {
	if o == nil || IsNil(o.Manufacturer) {
		var ret ManufacturerReference
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetManufacturerOk() (*ManufacturerReference, bool) {
	if o == nil || IsNil(o.Manufacturer) {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *CatalogItem) HasManufacturer() bool {
	if o != nil && !IsNil(o.Manufacturer) {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given ManufacturerReference and assigns it to the Manufacturer field.
func (o *CatalogItem) SetManufacturer(v ManufacturerReference) {
	o.Manufacturer = &v
}

// GetManufacturerPartNumber returns the ManufacturerPartNumber field value if set, zero value otherwise.
func (o *CatalogItem) GetManufacturerPartNumber() string {
	if o == nil || IsNil(o.ManufacturerPartNumber) {
		var ret string
		return ret
	}
	return *o.ManufacturerPartNumber
}

// GetManufacturerPartNumberOk returns a tuple with the ManufacturerPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetManufacturerPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerPartNumber) {
		return nil, false
	}
	return o.ManufacturerPartNumber, true
}

// HasManufacturerPartNumber returns a boolean if a field has been set.
func (o *CatalogItem) HasManufacturerPartNumber() bool {
	if o != nil && !IsNil(o.ManufacturerPartNumber) {
		return true
	}

	return false
}

// SetManufacturerPartNumber gets a reference to the given string and assigns it to the ManufacturerPartNumber field.
func (o *CatalogItem) SetManufacturerPartNumber(v string) {
	o.ManufacturerPartNumber = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *CatalogItem) GetVendor() CompanyReference {
	if o == nil || IsNil(o.Vendor) {
		var ret CompanyReference
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetVendorOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *CatalogItem) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given CompanyReference and assigns it to the Vendor field.
func (o *CatalogItem) SetVendor(v CompanyReference) {
	o.Vendor = &v
}

// GetVendorSku returns the VendorSku field value if set, zero value otherwise.
func (o *CatalogItem) GetVendorSku() string {
	if o == nil || IsNil(o.VendorSku) {
		var ret string
		return ret
	}
	return *o.VendorSku
}

// GetVendorSkuOk returns a tuple with the VendorSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetVendorSkuOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSku) {
		return nil, false
	}
	return o.VendorSku, true
}

// HasVendorSku returns a boolean if a field has been set.
func (o *CatalogItem) HasVendorSku() bool {
	if o != nil && !IsNil(o.VendorSku) {
		return true
	}

	return false
}

// SetVendorSku gets a reference to the given string and assigns it to the VendorSku field.
func (o *CatalogItem) SetVendorSku(v string) {
	o.VendorSku = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CatalogItem) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CatalogItem) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *CatalogItem) SetNotes(v string) {
	o.Notes = &v
}

// GetIntegrationXRef returns the IntegrationXRef field value if set, zero value otherwise.
func (o *CatalogItem) GetIntegrationXRef() string {
	if o == nil || IsNil(o.IntegrationXRef) {
		var ret string
		return ret
	}
	return *o.IntegrationXRef
}

// GetIntegrationXRefOk returns a tuple with the IntegrationXRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetIntegrationXRefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXRef) {
		return nil, false
	}
	return o.IntegrationXRef, true
}

// HasIntegrationXRef returns a boolean if a field has been set.
func (o *CatalogItem) HasIntegrationXRef() bool {
	if o != nil && !IsNil(o.IntegrationXRef) {
		return true
	}

	return false
}

// SetIntegrationXRef gets a reference to the given string and assigns it to the IntegrationXRef field.
func (o *CatalogItem) SetIntegrationXRef(v string) {
	o.IntegrationXRef = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *CatalogItem) GetSla() SLAReference {
	if o == nil || IsNil(o.Sla) {
		var ret SLAReference
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetSlaOk() (*SLAReference, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *CatalogItem) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLAReference and assigns it to the Sla field.
func (o *CatalogItem) SetSla(v SLAReference) {
	o.Sla = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *CatalogItem) GetEntityType() EntityTypeReference {
	if o == nil || IsNil(o.EntityType) {
		var ret EntityTypeReference
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetEntityTypeOk() (*EntityTypeReference, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *CatalogItem) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityTypeReference and assigns it to the EntityType field.
func (o *CatalogItem) SetEntityType(v EntityTypeReference) {
	o.EntityType = &v
}

// GetRecurringFlag returns the RecurringFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetRecurringFlag() bool {
	if o == nil || IsNil(o.RecurringFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RecurringFlag.Get()
}

// GetRecurringFlagOk returns a tuple with the RecurringFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetRecurringFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringFlag.Get(), o.RecurringFlag.IsSet()
}

// HasRecurringFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasRecurringFlag() bool {
	if o != nil && o.RecurringFlag.IsSet() {
		return true
	}

	return false
}

// SetRecurringFlag gets a reference to the given NullableBool and assigns it to the RecurringFlag field.
func (o *CatalogItem) SetRecurringFlag(v bool) {
	o.RecurringFlag.Set(&v)
}

// SetRecurringFlagNil sets the value for RecurringFlag to be an explicit nil
func (o *CatalogItem) SetRecurringFlagNil() {
	o.RecurringFlag.Set(nil)
}

// UnsetRecurringFlag ensures that no value is present for RecurringFlag, not even an explicit nil
func (o *CatalogItem) UnsetRecurringFlag() {
	o.RecurringFlag.Unset()
}

// GetRecurringRevenue returns the RecurringRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetRecurringRevenue() float64 {
	if o == nil || IsNil(o.RecurringRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.RecurringRevenue.Get()
}

// GetRecurringRevenueOk returns a tuple with the RecurringRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetRecurringRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringRevenue.Get(), o.RecurringRevenue.IsSet()
}

// HasRecurringRevenue returns a boolean if a field has been set.
func (o *CatalogItem) HasRecurringRevenue() bool {
	if o != nil && o.RecurringRevenue.IsSet() {
		return true
	}

	return false
}

// SetRecurringRevenue gets a reference to the given NullableFloat64 and assigns it to the RecurringRevenue field.
func (o *CatalogItem) SetRecurringRevenue(v float64) {
	o.RecurringRevenue.Set(&v)
}

// SetRecurringRevenueNil sets the value for RecurringRevenue to be an explicit nil
func (o *CatalogItem) SetRecurringRevenueNil() {
	o.RecurringRevenue.Set(nil)
}

// UnsetRecurringRevenue ensures that no value is present for RecurringRevenue, not even an explicit nil
func (o *CatalogItem) UnsetRecurringRevenue() {
	o.RecurringRevenue.Unset()
}

// GetRecurringCost returns the RecurringCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetRecurringCost() float64 {
	if o == nil || IsNil(o.RecurringCost.Get()) {
		var ret float64
		return ret
	}
	return *o.RecurringCost.Get()
}

// GetRecurringCostOk returns a tuple with the RecurringCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetRecurringCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringCost.Get(), o.RecurringCost.IsSet()
}

// HasRecurringCost returns a boolean if a field has been set.
func (o *CatalogItem) HasRecurringCost() bool {
	if o != nil && o.RecurringCost.IsSet() {
		return true
	}

	return false
}

// SetRecurringCost gets a reference to the given NullableFloat64 and assigns it to the RecurringCost field.
func (o *CatalogItem) SetRecurringCost(v float64) {
	o.RecurringCost.Set(&v)
}

// SetRecurringCostNil sets the value for RecurringCost to be an explicit nil
func (o *CatalogItem) SetRecurringCostNil() {
	o.RecurringCost.Set(nil)
}

// UnsetRecurringCost ensures that no value is present for RecurringCost, not even an explicit nil
func (o *CatalogItem) UnsetRecurringCost() {
	o.RecurringCost.Unset()
}

// GetRecurringOneTimeFlag returns the RecurringOneTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetRecurringOneTimeFlag() bool {
	if o == nil || IsNil(o.RecurringOneTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RecurringOneTimeFlag.Get()
}

// GetRecurringOneTimeFlagOk returns a tuple with the RecurringOneTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetRecurringOneTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringOneTimeFlag.Get(), o.RecurringOneTimeFlag.IsSet()
}

// HasRecurringOneTimeFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasRecurringOneTimeFlag() bool {
	if o != nil && o.RecurringOneTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetRecurringOneTimeFlag gets a reference to the given NullableBool and assigns it to the RecurringOneTimeFlag field.
func (o *CatalogItem) SetRecurringOneTimeFlag(v bool) {
	o.RecurringOneTimeFlag.Set(&v)
}

// SetRecurringOneTimeFlagNil sets the value for RecurringOneTimeFlag to be an explicit nil
func (o *CatalogItem) SetRecurringOneTimeFlagNil() {
	o.RecurringOneTimeFlag.Set(nil)
}

// UnsetRecurringOneTimeFlag ensures that no value is present for RecurringOneTimeFlag, not even an explicit nil
func (o *CatalogItem) UnsetRecurringOneTimeFlag() {
	o.RecurringOneTimeFlag.Unset()
}

// GetRecurringBillCycle returns the RecurringBillCycle field value if set, zero value otherwise.
func (o *CatalogItem) GetRecurringBillCycle() BillingCycleReference {
	if o == nil || IsNil(o.RecurringBillCycle) {
		var ret BillingCycleReference
		return ret
	}
	return *o.RecurringBillCycle
}

// GetRecurringBillCycleOk returns a tuple with the RecurringBillCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetRecurringBillCycleOk() (*BillingCycleReference, bool) {
	if o == nil || IsNil(o.RecurringBillCycle) {
		return nil, false
	}
	return o.RecurringBillCycle, true
}

// HasRecurringBillCycle returns a boolean if a field has been set.
func (o *CatalogItem) HasRecurringBillCycle() bool {
	if o != nil && !IsNil(o.RecurringBillCycle) {
		return true
	}

	return false
}

// SetRecurringBillCycle gets a reference to the given BillingCycleReference and assigns it to the RecurringBillCycle field.
func (o *CatalogItem) SetRecurringBillCycle(v BillingCycleReference) {
	o.RecurringBillCycle = &v
}

// GetRecurringCycleType returns the RecurringCycleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetRecurringCycleType() string {
	if o == nil || IsNil(o.RecurringCycleType.Get()) {
		var ret string
		return ret
	}
	return *o.RecurringCycleType.Get()
}

// GetRecurringCycleTypeOk returns a tuple with the RecurringCycleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetRecurringCycleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringCycleType.Get(), o.RecurringCycleType.IsSet()
}

// HasRecurringCycleType returns a boolean if a field has been set.
func (o *CatalogItem) HasRecurringCycleType() bool {
	if o != nil && o.RecurringCycleType.IsSet() {
		return true
	}

	return false
}

// SetRecurringCycleType gets a reference to the given NullableString and assigns it to the RecurringCycleType field.
func (o *CatalogItem) SetRecurringCycleType(v string) {
	o.RecurringCycleType.Set(&v)
}

// SetRecurringCycleTypeNil sets the value for RecurringCycleType to be an explicit nil
func (o *CatalogItem) SetRecurringCycleTypeNil() {
	o.RecurringCycleType.Set(nil)
}

// UnsetRecurringCycleType ensures that no value is present for RecurringCycleType, not even an explicit nil
func (o *CatalogItem) UnsetRecurringCycleType() {
	o.RecurringCycleType.Unset()
}

// GetCalculatedPriceFlag returns the CalculatedPriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetCalculatedPriceFlag() bool {
	if o == nil || IsNil(o.CalculatedPriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CalculatedPriceFlag.Get()
}

// GetCalculatedPriceFlagOk returns a tuple with the CalculatedPriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetCalculatedPriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedPriceFlag.Get(), o.CalculatedPriceFlag.IsSet()
}

// HasCalculatedPriceFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasCalculatedPriceFlag() bool {
	if o != nil && o.CalculatedPriceFlag.IsSet() {
		return true
	}

	return false
}

// SetCalculatedPriceFlag gets a reference to the given NullableBool and assigns it to the CalculatedPriceFlag field.
func (o *CatalogItem) SetCalculatedPriceFlag(v bool) {
	o.CalculatedPriceFlag.Set(&v)
}

// SetCalculatedPriceFlagNil sets the value for CalculatedPriceFlag to be an explicit nil
func (o *CatalogItem) SetCalculatedPriceFlagNil() {
	o.CalculatedPriceFlag.Set(nil)
}

// UnsetCalculatedPriceFlag ensures that no value is present for CalculatedPriceFlag, not even an explicit nil
func (o *CatalogItem) UnsetCalculatedPriceFlag() {
	o.CalculatedPriceFlag.Unset()
}

// GetCalculatedCostFlag returns the CalculatedCostFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetCalculatedCostFlag() bool {
	if o == nil || IsNil(o.CalculatedCostFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CalculatedCostFlag.Get()
}

// GetCalculatedCostFlagOk returns a tuple with the CalculatedCostFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetCalculatedCostFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedCostFlag.Get(), o.CalculatedCostFlag.IsSet()
}

// HasCalculatedCostFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasCalculatedCostFlag() bool {
	if o != nil && o.CalculatedCostFlag.IsSet() {
		return true
	}

	return false
}

// SetCalculatedCostFlag gets a reference to the given NullableBool and assigns it to the CalculatedCostFlag field.
func (o *CatalogItem) SetCalculatedCostFlag(v bool) {
	o.CalculatedCostFlag.Set(&v)
}

// SetCalculatedCostFlagNil sets the value for CalculatedCostFlag to be an explicit nil
func (o *CatalogItem) SetCalculatedCostFlagNil() {
	o.CalculatedCostFlag.Set(nil)
}

// UnsetCalculatedCostFlag ensures that no value is present for CalculatedCostFlag, not even an explicit nil
func (o *CatalogItem) UnsetCalculatedCostFlag() {
	o.CalculatedCostFlag.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CatalogItem) GetCategory() ProductCategoryReference {
	if o == nil || IsNil(o.Category) {
		var ret ProductCategoryReference
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetCategoryOk() (*ProductCategoryReference, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CatalogItem) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given ProductCategoryReference and assigns it to the Category field.
func (o *CatalogItem) SetCategory(v ProductCategoryReference) {
	o.Category = &v
}

// GetCalculatedPrice returns the CalculatedPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetCalculatedPrice() float64 {
	if o == nil || IsNil(o.CalculatedPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.CalculatedPrice.Get()
}

// GetCalculatedPriceOk returns a tuple with the CalculatedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetCalculatedPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedPrice.Get(), o.CalculatedPrice.IsSet()
}

// HasCalculatedPrice returns a boolean if a field has been set.
func (o *CatalogItem) HasCalculatedPrice() bool {
	if o != nil && o.CalculatedPrice.IsSet() {
		return true
	}

	return false
}

// SetCalculatedPrice gets a reference to the given NullableFloat64 and assigns it to the CalculatedPrice field.
func (o *CatalogItem) SetCalculatedPrice(v float64) {
	o.CalculatedPrice.Set(&v)
}

// SetCalculatedPriceNil sets the value for CalculatedPrice to be an explicit nil
func (o *CatalogItem) SetCalculatedPriceNil() {
	o.CalculatedPrice.Set(nil)
}

// UnsetCalculatedPrice ensures that no value is present for CalculatedPrice, not even an explicit nil
func (o *CatalogItem) UnsetCalculatedPrice() {
	o.CalculatedPrice.Unset()
}

// GetCalculatedCost returns the CalculatedCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetCalculatedCost() float64 {
	if o == nil || IsNil(o.CalculatedCost.Get()) {
		var ret float64
		return ret
	}
	return *o.CalculatedCost.Get()
}

// GetCalculatedCostOk returns a tuple with the CalculatedCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetCalculatedCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedCost.Get(), o.CalculatedCost.IsSet()
}

// HasCalculatedCost returns a boolean if a field has been set.
func (o *CatalogItem) HasCalculatedCost() bool {
	if o != nil && o.CalculatedCost.IsSet() {
		return true
	}

	return false
}

// SetCalculatedCost gets a reference to the given NullableFloat64 and assigns it to the CalculatedCost field.
func (o *CatalogItem) SetCalculatedCost(v float64) {
	o.CalculatedCost.Set(&v)
}

// SetCalculatedCostNil sets the value for CalculatedCost to be an explicit nil
func (o *CatalogItem) SetCalculatedCostNil() {
	o.CalculatedCost.Set(nil)
}

// UnsetCalculatedCost ensures that no value is present for CalculatedCost, not even an explicit nil
func (o *CatalogItem) UnsetCalculatedCost() {
	o.CalculatedCost.Unset()
}

// GetBillableOption returns the BillableOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetBillableOption() string {
	if o == nil || IsNil(o.BillableOption.Get()) {
		var ret string
		return ret
	}
	return *o.BillableOption.Get()
}

// GetBillableOptionOk returns a tuple with the BillableOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetBillableOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableOption.Get(), o.BillableOption.IsSet()
}

// HasBillableOption returns a boolean if a field has been set.
func (o *CatalogItem) HasBillableOption() bool {
	if o != nil && o.BillableOption.IsSet() {
		return true
	}

	return false
}

// SetBillableOption gets a reference to the given NullableString and assigns it to the BillableOption field.
func (o *CatalogItem) SetBillableOption(v string) {
	o.BillableOption.Set(&v)
}

// SetBillableOptionNil sets the value for BillableOption to be an explicit nil
func (o *CatalogItem) SetBillableOptionNil() {
	o.BillableOption.Set(nil)
}

// UnsetBillableOption ensures that no value is present for BillableOption, not even an explicit nil
func (o *CatalogItem) UnsetBillableOption() {
	o.BillableOption.Unset()
}

// GetConnectWiseID returns the ConnectWiseID field value if set, zero value otherwise.
func (o *CatalogItem) GetConnectWiseID() string {
	if o == nil || IsNil(o.ConnectWiseID) {
		var ret string
		return ret
	}
	return *o.ConnectWiseID
}

// GetConnectWiseIDOk returns a tuple with the ConnectWiseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetConnectWiseIDOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectWiseID) {
		return nil, false
	}
	return o.ConnectWiseID, true
}

// HasConnectWiseID returns a boolean if a field has been set.
func (o *CatalogItem) HasConnectWiseID() bool {
	if o != nil && !IsNil(o.ConnectWiseID) {
		return true
	}

	return false
}

// SetConnectWiseID gets a reference to the given string and assigns it to the ConnectWiseID field.
func (o *CatalogItem) SetConnectWiseID(v string) {
	o.ConnectWiseID = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *CatalogItem) GetAgreementType() AgreementTypeReference {
	if o == nil || IsNil(o.AgreementType) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetAgreementTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *CatalogItem) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given AgreementTypeReference and assigns it to the AgreementType field.
func (o *CatalogItem) SetAgreementType(v AgreementTypeReference) {
	o.AgreementType = &v
}

// GetMarkupPercentage returns the MarkupPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetMarkupPercentage() float64 {
	if o == nil || IsNil(o.MarkupPercentage.Get()) {
		var ret float64
		return ret
	}
	return *o.MarkupPercentage.Get()
}

// GetMarkupPercentageOk returns a tuple with the MarkupPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetMarkupPercentageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkupPercentage.Get(), o.MarkupPercentage.IsSet()
}

// HasMarkupPercentage returns a boolean if a field has been set.
func (o *CatalogItem) HasMarkupPercentage() bool {
	if o != nil && o.MarkupPercentage.IsSet() {
		return true
	}

	return false
}

// SetMarkupPercentage gets a reference to the given NullableFloat64 and assigns it to the MarkupPercentage field.
func (o *CatalogItem) SetMarkupPercentage(v float64) {
	o.MarkupPercentage.Set(&v)
}

// SetMarkupPercentageNil sets the value for MarkupPercentage to be an explicit nil
func (o *CatalogItem) SetMarkupPercentageNil() {
	o.MarkupPercentage.Set(nil)
}

// UnsetMarkupPercentage ensures that no value is present for MarkupPercentage, not even an explicit nil
func (o *CatalogItem) UnsetMarkupPercentage() {
	o.MarkupPercentage.Unset()
}

// GetMarkupFlag returns the MarkupFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetMarkupFlag() bool {
	if o == nil || IsNil(o.MarkupFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkupFlag.Get()
}

// GetMarkupFlagOk returns a tuple with the MarkupFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetMarkupFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkupFlag.Get(), o.MarkupFlag.IsSet()
}

// HasMarkupFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasMarkupFlag() bool {
	if o != nil && o.MarkupFlag.IsSet() {
		return true
	}

	return false
}

// SetMarkupFlag gets a reference to the given NullableBool and assigns it to the MarkupFlag field.
func (o *CatalogItem) SetMarkupFlag(v bool) {
	o.MarkupFlag.Set(&v)
}

// SetMarkupFlagNil sets the value for MarkupFlag to be an explicit nil
func (o *CatalogItem) SetMarkupFlagNil() {
	o.MarkupFlag.Set(nil)
}

// UnsetMarkupFlag ensures that no value is present for MarkupFlag, not even an explicit nil
func (o *CatalogItem) UnsetMarkupFlag() {
	o.MarkupFlag.Unset()
}

// GetAutoUpdateUnitCostFlag returns the AutoUpdateUnitCostFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetAutoUpdateUnitCostFlag() bool {
	if o == nil || IsNil(o.AutoUpdateUnitCostFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoUpdateUnitCostFlag.Get()
}

// GetAutoUpdateUnitCostFlagOk returns a tuple with the AutoUpdateUnitCostFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetAutoUpdateUnitCostFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoUpdateUnitCostFlag.Get(), o.AutoUpdateUnitCostFlag.IsSet()
}

// HasAutoUpdateUnitCostFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasAutoUpdateUnitCostFlag() bool {
	if o != nil && o.AutoUpdateUnitCostFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoUpdateUnitCostFlag gets a reference to the given NullableBool and assigns it to the AutoUpdateUnitCostFlag field.
func (o *CatalogItem) SetAutoUpdateUnitCostFlag(v bool) {
	o.AutoUpdateUnitCostFlag.Set(&v)
}

// SetAutoUpdateUnitCostFlagNil sets the value for AutoUpdateUnitCostFlag to be an explicit nil
func (o *CatalogItem) SetAutoUpdateUnitCostFlagNil() {
	o.AutoUpdateUnitCostFlag.Set(nil)
}

// UnsetAutoUpdateUnitCostFlag ensures that no value is present for AutoUpdateUnitCostFlag, not even an explicit nil
func (o *CatalogItem) UnsetAutoUpdateUnitCostFlag() {
	o.AutoUpdateUnitCostFlag.Unset()
}

// GetAutoUpdateUnitPriceFlag returns the AutoUpdateUnitPriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItem) GetAutoUpdateUnitPriceFlag() bool {
	if o == nil || IsNil(o.AutoUpdateUnitPriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoUpdateUnitPriceFlag.Get()
}

// GetAutoUpdateUnitPriceFlagOk returns a tuple with the AutoUpdateUnitPriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItem) GetAutoUpdateUnitPriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoUpdateUnitPriceFlag.Get(), o.AutoUpdateUnitPriceFlag.IsSet()
}

// HasAutoUpdateUnitPriceFlag returns a boolean if a field has been set.
func (o *CatalogItem) HasAutoUpdateUnitPriceFlag() bool {
	if o != nil && o.AutoUpdateUnitPriceFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoUpdateUnitPriceFlag gets a reference to the given NullableBool and assigns it to the AutoUpdateUnitPriceFlag field.
func (o *CatalogItem) SetAutoUpdateUnitPriceFlag(v bool) {
	o.AutoUpdateUnitPriceFlag.Set(&v)
}

// SetAutoUpdateUnitPriceFlagNil sets the value for AutoUpdateUnitPriceFlag to be an explicit nil
func (o *CatalogItem) SetAutoUpdateUnitPriceFlagNil() {
	o.AutoUpdateUnitPriceFlag.Set(nil)
}

// UnsetAutoUpdateUnitPriceFlag ensures that no value is present for AutoUpdateUnitPriceFlag, not even an explicit nil
func (o *CatalogItem) UnsetAutoUpdateUnitPriceFlag() {
	o.AutoUpdateUnitPriceFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CatalogItem) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CatalogItem) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CatalogItem) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CatalogItem) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CatalogItem) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *CatalogItem) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o CatalogItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["identifier"] = o.Identifier
	toSerialize["description"] = o.Description
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	toSerialize["subcategory"] = o.Subcategory
	toSerialize["type"] = o.Type
	if o.ProductClass.IsSet() {
		toSerialize["productClass"] = o.ProductClass.Get()
	}
	if o.SerializedFlag.IsSet() {
		toSerialize["serializedFlag"] = o.SerializedFlag.Get()
	}
	if o.SerializedCostFlag.IsSet() {
		toSerialize["serializedCostFlag"] = o.SerializedCostFlag.Get()
	}
	if o.PhaseProductFlag.IsSet() {
		toSerialize["phaseProductFlag"] = o.PhaseProductFlag.Get()
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if o.MinStockLevel.IsSet() {
		toSerialize["minStockLevel"] = o.MinStockLevel.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.PriceAttribute.IsSet() {
		toSerialize["priceAttribute"] = o.PriceAttribute.Get()
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if o.DropShipFlag.IsSet() {
		toSerialize["dropShipFlag"] = o.DropShipFlag.Get()
	}
	if o.SpecialOrderFlag.IsSet() {
		toSerialize["specialOrderFlag"] = o.SpecialOrderFlag.Get()
	}
	toSerialize["customerDescription"] = o.CustomerDescription
	if !IsNil(o.Manufacturer) {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if !IsNil(o.ManufacturerPartNumber) {
		toSerialize["manufacturerPartNumber"] = o.ManufacturerPartNumber
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorSku) {
		toSerialize["vendorSku"] = o.VendorSku
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.IntegrationXRef) {
		toSerialize["integrationXRef"] = o.IntegrationXRef
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if o.RecurringFlag.IsSet() {
		toSerialize["recurringFlag"] = o.RecurringFlag.Get()
	}
	if o.RecurringRevenue.IsSet() {
		toSerialize["recurringRevenue"] = o.RecurringRevenue.Get()
	}
	if o.RecurringCost.IsSet() {
		toSerialize["recurringCost"] = o.RecurringCost.Get()
	}
	if o.RecurringOneTimeFlag.IsSet() {
		toSerialize["recurringOneTimeFlag"] = o.RecurringOneTimeFlag.Get()
	}
	if !IsNil(o.RecurringBillCycle) {
		toSerialize["recurringBillCycle"] = o.RecurringBillCycle
	}
	if o.RecurringCycleType.IsSet() {
		toSerialize["recurringCycleType"] = o.RecurringCycleType.Get()
	}
	if o.CalculatedPriceFlag.IsSet() {
		toSerialize["calculatedPriceFlag"] = o.CalculatedPriceFlag.Get()
	}
	if o.CalculatedCostFlag.IsSet() {
		toSerialize["calculatedCostFlag"] = o.CalculatedCostFlag.Get()
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if o.CalculatedPrice.IsSet() {
		toSerialize["calculatedPrice"] = o.CalculatedPrice.Get()
	}
	if o.CalculatedCost.IsSet() {
		toSerialize["calculatedCost"] = o.CalculatedCost.Get()
	}
	if o.BillableOption.IsSet() {
		toSerialize["billableOption"] = o.BillableOption.Get()
	}
	if !IsNil(o.ConnectWiseID) {
		toSerialize["connectWiseID"] = o.ConnectWiseID
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if o.MarkupPercentage.IsSet() {
		toSerialize["markupPercentage"] = o.MarkupPercentage.Get()
	}
	if o.MarkupFlag.IsSet() {
		toSerialize["markupFlag"] = o.MarkupFlag.Get()
	}
	if o.AutoUpdateUnitCostFlag.IsSet() {
		toSerialize["autoUpdateUnitCostFlag"] = o.AutoUpdateUnitCostFlag.Get()
	}
	if o.AutoUpdateUnitPriceFlag.IsSet() {
		toSerialize["autoUpdateUnitPriceFlag"] = o.AutoUpdateUnitPriceFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *CatalogItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"description",
		"subcategory",
		"type",
		"customerDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogItem := _CatalogItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogItem)

	if err != nil {
		return err
	}

	*o = CatalogItem(varCatalogItem)

	return err
}

type NullableCatalogItem struct {
	value *CatalogItem
	isSet bool
}

func (v NullableCatalogItem) Get() *CatalogItem {
	return v.value
}

func (v *NullableCatalogItem) Set(val *CatalogItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItem(val *CatalogItem) *NullableCatalogItem {
	return &NullableCatalogItem{value: val, isSet: true}
}

func (v NullableCatalogItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
