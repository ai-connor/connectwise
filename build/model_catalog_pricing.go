/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CatalogPricing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogPricing{}

// CatalogPricing struct for CatalogPricing
type CatalogPricing struct {
	CatalogItem *CatalogItemReference    `json:"catalogItem,omitempty"`
	Company     *CompanyReference        `json:"company,omitempty"`
	Location    *SystemLocationReference `json:"location,omitempty"`
	Quantity    *int32                   `json:"quantity,omitempty"`
	Date        *string                  `json:"date,omitempty"`
	Price       NullableFloat64          `json:"price,omitempty"`
}

// NewCatalogPricing instantiates a new CatalogPricing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogPricing() *CatalogPricing {
	this := CatalogPricing{}
	return &this
}

// NewCatalogPricingWithDefaults instantiates a new CatalogPricing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogPricingWithDefaults() *CatalogPricing {
	this := CatalogPricing{}
	return &this
}

// GetCatalogItem returns the CatalogItem field value if set, zero value otherwise.
func (o *CatalogPricing) GetCatalogItem() CatalogItemReference {
	if o == nil || IsNil(o.CatalogItem) {
		var ret CatalogItemReference
		return ret
	}
	return *o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPricing) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil || IsNil(o.CatalogItem) {
		return nil, false
	}
	return o.CatalogItem, true
}

// HasCatalogItem returns a boolean if a field has been set.
func (o *CatalogPricing) HasCatalogItem() bool {
	if o != nil && !IsNil(o.CatalogItem) {
		return true
	}

	return false
}

// SetCatalogItem gets a reference to the given CatalogItemReference and assigns it to the CatalogItem field.
func (o *CatalogPricing) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *CatalogPricing) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPricing) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *CatalogPricing) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *CatalogPricing) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CatalogPricing) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPricing) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CatalogPricing) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *CatalogPricing) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CatalogPricing) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPricing) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CatalogPricing) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *CatalogPricing) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *CatalogPricing) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogPricing) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *CatalogPricing) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *CatalogPricing) SetDate(v string) {
	o.Date = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogPricing) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogPricing) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *CatalogPricing) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *CatalogPricing) SetPrice(v float64) {
	o.Price.Set(&v)
}

// SetPriceNil sets the value for Price to be an explicit nil
func (o *CatalogPricing) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *CatalogPricing) UnsetPrice() {
	o.Price.Unset()
}

func (o CatalogPricing) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogPricing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CatalogItem) {
		toSerialize["catalogItem"] = o.CatalogItem
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	return toSerialize, nil
}

type NullableCatalogPricing struct {
	value *CatalogPricing
	isSet bool
}

func (v NullableCatalogPricing) Get() *CatalogPricing {
	return v.value
}

func (v *NullableCatalogPricing) Set(val *CatalogPricing) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogPricing) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogPricing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogPricing(val *CatalogPricing) *NullableCatalogPricing {
	return &NullableCatalogPricing{value: val, isSet: true}
}

func (v NullableCatalogPricing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogPricing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
