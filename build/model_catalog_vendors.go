/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CatalogVendors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogVendors{}

// CatalogVendors struct for CatalogVendors
type CatalogVendors struct {
	Id            *int32        `json:"id,omitempty"`
	CatalogItemId *int32        `json:"catalogItemId,omitempty"`
	VendorId      NullableInt32 `json:"vendorId,omitempty"`
	//  Max length: 50;
	VendorSku         *string `json:"vendorSku,omitempty"`
	IsPreferredVendor *bool   `json:"isPreferredVendor,omitempty"`
	VendorName        *string `json:"vendorName,omitempty"`
}

// NewCatalogVendors instantiates a new CatalogVendors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogVendors() *CatalogVendors {
	this := CatalogVendors{}
	return &this
}

// NewCatalogVendorsWithDefaults instantiates a new CatalogVendors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogVendorsWithDefaults() *CatalogVendors {
	this := CatalogVendors{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogVendors) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogVendors) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogVendors) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogVendors) SetId(v int32) {
	o.Id = &v
}

// GetCatalogItemId returns the CatalogItemId field value if set, zero value otherwise.
func (o *CatalogVendors) GetCatalogItemId() int32 {
	if o == nil || IsNil(o.CatalogItemId) {
		var ret int32
		return ret
	}
	return *o.CatalogItemId
}

// GetCatalogItemIdOk returns a tuple with the CatalogItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogVendors) GetCatalogItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogItemId) {
		return nil, false
	}
	return o.CatalogItemId, true
}

// HasCatalogItemId returns a boolean if a field has been set.
func (o *CatalogVendors) HasCatalogItemId() bool {
	if o != nil && !IsNil(o.CatalogItemId) {
		return true
	}

	return false
}

// SetCatalogItemId gets a reference to the given int32 and assigns it to the CatalogItemId field.
func (o *CatalogVendors) SetCatalogItemId(v int32) {
	o.CatalogItemId = &v
}

// GetVendorId returns the VendorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogVendors) GetVendorId() int32 {
	if o == nil || IsNil(o.VendorId.Get()) {
		var ret int32
		return ret
	}
	return *o.VendorId.Get()
}

// GetVendorIdOk returns a tuple with the VendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogVendors) GetVendorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VendorId.Get(), o.VendorId.IsSet()
}

// HasVendorId returns a boolean if a field has been set.
func (o *CatalogVendors) HasVendorId() bool {
	if o != nil && o.VendorId.IsSet() {
		return true
	}

	return false
}

// SetVendorId gets a reference to the given NullableInt32 and assigns it to the VendorId field.
func (o *CatalogVendors) SetVendorId(v int32) {
	o.VendorId.Set(&v)
}

// SetVendorIdNil sets the value for VendorId to be an explicit nil
func (o *CatalogVendors) SetVendorIdNil() {
	o.VendorId.Set(nil)
}

// UnsetVendorId ensures that no value is present for VendorId, not even an explicit nil
func (o *CatalogVendors) UnsetVendorId() {
	o.VendorId.Unset()
}

// GetVendorSku returns the VendorSku field value if set, zero value otherwise.
func (o *CatalogVendors) GetVendorSku() string {
	if o == nil || IsNil(o.VendorSku) {
		var ret string
		return ret
	}
	return *o.VendorSku
}

// GetVendorSkuOk returns a tuple with the VendorSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogVendors) GetVendorSkuOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSku) {
		return nil, false
	}
	return o.VendorSku, true
}

// HasVendorSku returns a boolean if a field has been set.
func (o *CatalogVendors) HasVendorSku() bool {
	if o != nil && !IsNil(o.VendorSku) {
		return true
	}

	return false
}

// SetVendorSku gets a reference to the given string and assigns it to the VendorSku field.
func (o *CatalogVendors) SetVendorSku(v string) {
	o.VendorSku = &v
}

// GetIsPreferredVendor returns the IsPreferredVendor field value if set, zero value otherwise.
func (o *CatalogVendors) GetIsPreferredVendor() bool {
	if o == nil || IsNil(o.IsPreferredVendor) {
		var ret bool
		return ret
	}
	return *o.IsPreferredVendor
}

// GetIsPreferredVendorOk returns a tuple with the IsPreferredVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogVendors) GetIsPreferredVendorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPreferredVendor) {
		return nil, false
	}
	return o.IsPreferredVendor, true
}

// HasIsPreferredVendor returns a boolean if a field has been set.
func (o *CatalogVendors) HasIsPreferredVendor() bool {
	if o != nil && !IsNil(o.IsPreferredVendor) {
		return true
	}

	return false
}

// SetIsPreferredVendor gets a reference to the given bool and assigns it to the IsPreferredVendor field.
func (o *CatalogVendors) SetIsPreferredVendor(v bool) {
	o.IsPreferredVendor = &v
}

// GetVendorName returns the VendorName field value if set, zero value otherwise.
func (o *CatalogVendors) GetVendorName() string {
	if o == nil || IsNil(o.VendorName) {
		var ret string
		return ret
	}
	return *o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogVendors) GetVendorNameOk() (*string, bool) {
	if o == nil || IsNil(o.VendorName) {
		return nil, false
	}
	return o.VendorName, true
}

// HasVendorName returns a boolean if a field has been set.
func (o *CatalogVendors) HasVendorName() bool {
	if o != nil && !IsNil(o.VendorName) {
		return true
	}

	return false
}

// SetVendorName gets a reference to the given string and assigns it to the VendorName field.
func (o *CatalogVendors) SetVendorName(v string) {
	o.VendorName = &v
}

func (o CatalogVendors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogVendors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CatalogItemId) {
		toSerialize["catalogItemId"] = o.CatalogItemId
	}
	if o.VendorId.IsSet() {
		toSerialize["vendorId"] = o.VendorId.Get()
	}
	if !IsNil(o.VendorSku) {
		toSerialize["vendorSku"] = o.VendorSku
	}
	if !IsNil(o.IsPreferredVendor) {
		toSerialize["isPreferredVendor"] = o.IsPreferredVendor
	}
	if !IsNil(o.VendorName) {
		toSerialize["vendorName"] = o.VendorName
	}
	return toSerialize, nil
}

type NullableCatalogVendors struct {
	value *CatalogVendors
	isSet bool
}

func (v NullableCatalogVendors) Get() *CatalogVendors {
	return v.value
}

func (v *NullableCatalogVendors) Set(val *CatalogVendors) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogVendors) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogVendors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogVendors(val *CatalogVendors) *NullableCatalogVendors {
	return &NullableCatalogVendors{value: val, isSet: true}
}

func (v NullableCatalogVendors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogVendors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
