/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the Classification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Classification{}

// Classification struct for Classification
type Classification struct {
	Id           *int32             `json:"id,omitempty"`
	Name         *string            `json:"name,omitempty"`
	Multiplier   NullableFloat64    `json:"multiplier,omitempty"`
	DefaultFlag  NullableBool       `json:"defaultFlag,omitempty"`
	CompanyFlag  NullableBool       `json:"companyFlag,omitempty"`
	EmployeeFlag NullableBool       `json:"employeeFlag,omitempty"`
	Info         *map[string]string `json:"_info,omitempty"`
}

// NewClassification instantiates a new Classification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassification() *Classification {
	this := Classification{}
	return &this
}

// NewClassificationWithDefaults instantiates a new Classification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassificationWithDefaults() *Classification {
	this := Classification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Classification) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Classification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Classification) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Classification) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Classification) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Classification) SetName(v string) {
	o.Name = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Classification) GetMultiplier() float64 {
	if o == nil || IsNil(o.Multiplier.Get()) {
		var ret float64
		return ret
	}
	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Classification) GetMultiplierOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// HasMultiplier returns a boolean if a field has been set.
func (o *Classification) HasMultiplier() bool {
	if o != nil && o.Multiplier.IsSet() {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given NullableFloat64 and assigns it to the Multiplier field.
func (o *Classification) SetMultiplier(v float64) {
	o.Multiplier.Set(&v)
}

// SetMultiplierNil sets the value for Multiplier to be an explicit nil
func (o *Classification) SetMultiplierNil() {
	o.Multiplier.Set(nil)
}

// UnsetMultiplier ensures that no value is present for Multiplier, not even an explicit nil
func (o *Classification) UnsetMultiplier() {
	o.Multiplier.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Classification) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Classification) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *Classification) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *Classification) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *Classification) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *Classification) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetCompanyFlag returns the CompanyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Classification) GetCompanyFlag() bool {
	if o == nil || IsNil(o.CompanyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompanyFlag.Get()
}

// GetCompanyFlagOk returns a tuple with the CompanyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Classification) GetCompanyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyFlag.Get(), o.CompanyFlag.IsSet()
}

// HasCompanyFlag returns a boolean if a field has been set.
func (o *Classification) HasCompanyFlag() bool {
	if o != nil && o.CompanyFlag.IsSet() {
		return true
	}

	return false
}

// SetCompanyFlag gets a reference to the given NullableBool and assigns it to the CompanyFlag field.
func (o *Classification) SetCompanyFlag(v bool) {
	o.CompanyFlag.Set(&v)
}

// SetCompanyFlagNil sets the value for CompanyFlag to be an explicit nil
func (o *Classification) SetCompanyFlagNil() {
	o.CompanyFlag.Set(nil)
}

// UnsetCompanyFlag ensures that no value is present for CompanyFlag, not even an explicit nil
func (o *Classification) UnsetCompanyFlag() {
	o.CompanyFlag.Unset()
}

// GetEmployeeFlag returns the EmployeeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Classification) GetEmployeeFlag() bool {
	if o == nil || IsNil(o.EmployeeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmployeeFlag.Get()
}

// GetEmployeeFlagOk returns a tuple with the EmployeeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Classification) GetEmployeeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeFlag.Get(), o.EmployeeFlag.IsSet()
}

// HasEmployeeFlag returns a boolean if a field has been set.
func (o *Classification) HasEmployeeFlag() bool {
	if o != nil && o.EmployeeFlag.IsSet() {
		return true
	}

	return false
}

// SetEmployeeFlag gets a reference to the given NullableBool and assigns it to the EmployeeFlag field.
func (o *Classification) SetEmployeeFlag(v bool) {
	o.EmployeeFlag.Set(&v)
}

// SetEmployeeFlagNil sets the value for EmployeeFlag to be an explicit nil
func (o *Classification) SetEmployeeFlagNil() {
	o.EmployeeFlag.Set(nil)
}

// UnsetEmployeeFlag ensures that no value is present for EmployeeFlag, not even an explicit nil
func (o *Classification) UnsetEmployeeFlag() {
	o.EmployeeFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Classification) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Classification) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Classification) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Classification) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Classification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Classification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Multiplier.IsSet() {
		toSerialize["multiplier"] = o.Multiplier.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.CompanyFlag.IsSet() {
		toSerialize["companyFlag"] = o.CompanyFlag.Get()
	}
	if o.EmployeeFlag.IsSet() {
		toSerialize["employeeFlag"] = o.EmployeeFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableClassification struct {
	value *Classification
	isSet bool
}

func (v NullableClassification) Get() *Classification {
	return v.value
}

func (v *NullableClassification) Set(val *Classification) {
	v.value = val
	v.isSet = true
}

func (v NullableClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassification(val *Classification) *NullableClassification {
	return &NullableClassification{value: val, isSet: true}
}

func (v NullableClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
