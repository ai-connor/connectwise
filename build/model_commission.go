/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Commission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Commission{}

// Commission struct for Commission
type Commission struct {
	Id                  *int32                       `json:"id,omitempty"`
	Member              MemberReference              `json:"member"`
	CommissionPercent   NullableFloat64              `json:"commissionPercent,omitempty"`
	DateStart           *time.Time                   `json:"dateStart,omitempty"`
	DateEnd             *time.Time                   `json:"dateEnd,omitempty"`
	Location            *SystemLocationReference     `json:"location,omitempty"`
	Department          *SystemDepartmentReference   `json:"department,omitempty"`
	Company             *CompanyReference            `json:"company,omitempty"`
	Site                *SiteReference               `json:"site,omitempty"`
	Agreement           *AgreementReference          `json:"agreement,omitempty"`
	Project             *ProjectReference            `json:"project,omitempty"`
	ServiceBoard        *BoardReference              `json:"serviceBoard,omitempty"`
	Ticket              *TicketReference             `json:"ticket,omitempty"`
	Territory           *SystemLocationReference     `json:"territory,omitempty"`
	BillingMethod       NullableString               `json:"billingMethod,omitempty"`
	ServiceType         *ServiceTypeReference        `json:"serviceType,omitempty"`
	ProjectBoard        *ProjectBoardReference       `json:"projectBoard,omitempty"`
	ProjectType         *ProjectTypeReference        `json:"projectType,omitempty"`
	AgreementType       *AgreementTypeReference      `json:"agreementType,omitempty"`
	NumberOfMonths      NullableInt32                `json:"numberOfMonths,omitempty"`
	ProductCategory     *ProductCategoryReference    `json:"productCategory,omitempty"`
	ProductSubCategory  *ProductSubCategoryReference `json:"productSubCategory,omitempty"`
	Item                *IvItemReference             `json:"item,omitempty"`
	CommissionBasis     NullableString               `json:"commissionBasis,omitempty"`
	InvoiceOption       NullableString               `json:"invoiceOption,omitempty"`
	ServicesFlag        NullableBool                 `json:"servicesFlag,omitempty"`
	AgreementsFlag      NullableBool                 `json:"agreementsFlag,omitempty"`
	ProductsFlag        NullableBool                 `json:"productsFlag,omitempty"`
	MyOpportunitiesFlag NullableBool                 `json:"myOpportunitiesFlag,omitempty"`
	Info                *map[string]string           `json:"_info,omitempty"`
}

type _Commission Commission

// NewCommission instantiates a new Commission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommission(member MemberReference) *Commission {
	this := Commission{}
	this.Member = member
	return &this
}

// NewCommissionWithDefaults instantiates a new Commission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionWithDefaults() *Commission {
	this := Commission{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Commission) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Commission) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Commission) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value
func (o *Commission) GetMember() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.Member
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *Commission) GetMemberOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Member, true
}

// SetMember sets field value
func (o *Commission) SetMember(v MemberReference) {
	o.Member = v
}

// GetCommissionPercent returns the CommissionPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetCommissionPercent() float64 {
	if o == nil || IsNil(o.CommissionPercent.Get()) {
		var ret float64
		return ret
	}
	return *o.CommissionPercent.Get()
}

// GetCommissionPercentOk returns a tuple with the CommissionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetCommissionPercentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommissionPercent.Get(), o.CommissionPercent.IsSet()
}

// HasCommissionPercent returns a boolean if a field has been set.
func (o *Commission) HasCommissionPercent() bool {
	if o != nil && o.CommissionPercent.IsSet() {
		return true
	}

	return false
}

// SetCommissionPercent gets a reference to the given NullableFloat64 and assigns it to the CommissionPercent field.
func (o *Commission) SetCommissionPercent(v float64) {
	o.CommissionPercent.Set(&v)
}

// SetCommissionPercentNil sets the value for CommissionPercent to be an explicit nil
func (o *Commission) SetCommissionPercentNil() {
	o.CommissionPercent.Set(nil)
}

// UnsetCommissionPercent ensures that no value is present for CommissionPercent, not even an explicit nil
func (o *Commission) UnsetCommissionPercent() {
	o.CommissionPercent.Unset()
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *Commission) GetDateStart() time.Time {
	if o == nil || IsNil(o.DateStart) {
		var ret time.Time
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetDateStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *Commission) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given time.Time and assigns it to the DateStart field.
func (o *Commission) SetDateStart(v time.Time) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *Commission) GetDateEnd() time.Time {
	if o == nil || IsNil(o.DateEnd) {
		var ret time.Time
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetDateEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *Commission) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given time.Time and assigns it to the DateEnd field.
func (o *Commission) SetDateEnd(v time.Time) {
	o.DateEnd = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Commission) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Commission) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Commission) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Commission) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Commission) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *Commission) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *Commission) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *Commission) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *Commission) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Commission) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Commission) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *Commission) SetSite(v SiteReference) {
	o.Site = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *Commission) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *Commission) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *Commission) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Commission) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Commission) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *Commission) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetServiceBoard returns the ServiceBoard field value if set, zero value otherwise.
func (o *Commission) GetServiceBoard() BoardReference {
	if o == nil || IsNil(o.ServiceBoard) {
		var ret BoardReference
		return ret
	}
	return *o.ServiceBoard
}

// GetServiceBoardOk returns a tuple with the ServiceBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetServiceBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.ServiceBoard) {
		return nil, false
	}
	return o.ServiceBoard, true
}

// HasServiceBoard returns a boolean if a field has been set.
func (o *Commission) HasServiceBoard() bool {
	if o != nil && !IsNil(o.ServiceBoard) {
		return true
	}

	return false
}

// SetServiceBoard gets a reference to the given BoardReference and assigns it to the ServiceBoard field.
func (o *Commission) SetServiceBoard(v BoardReference) {
	o.ServiceBoard = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *Commission) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *Commission) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *Commission) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetTerritory returns the Territory field value if set, zero value otherwise.
func (o *Commission) GetTerritory() SystemLocationReference {
	if o == nil || IsNil(o.Territory) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Territory
}

// GetTerritoryOk returns a tuple with the Territory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetTerritoryOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Territory) {
		return nil, false
	}
	return o.Territory, true
}

// HasTerritory returns a boolean if a field has been set.
func (o *Commission) HasTerritory() bool {
	if o != nil && !IsNil(o.Territory) {
		return true
	}

	return false
}

// SetTerritory gets a reference to the given SystemLocationReference and assigns it to the Territory field.
func (o *Commission) SetTerritory(v SystemLocationReference) {
	o.Territory = &v
}

// GetBillingMethod returns the BillingMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetBillingMethod() string {
	if o == nil || IsNil(o.BillingMethod.Get()) {
		var ret string
		return ret
	}
	return *o.BillingMethod.Get()
}

// GetBillingMethodOk returns a tuple with the BillingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetBillingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingMethod.Get(), o.BillingMethod.IsSet()
}

// HasBillingMethod returns a boolean if a field has been set.
func (o *Commission) HasBillingMethod() bool {
	if o != nil && o.BillingMethod.IsSet() {
		return true
	}

	return false
}

// SetBillingMethod gets a reference to the given NullableString and assigns it to the BillingMethod field.
func (o *Commission) SetBillingMethod(v string) {
	o.BillingMethod.Set(&v)
}

// SetBillingMethodNil sets the value for BillingMethod to be an explicit nil
func (o *Commission) SetBillingMethodNil() {
	o.BillingMethod.Set(nil)
}

// UnsetBillingMethod ensures that no value is present for BillingMethod, not even an explicit nil
func (o *Commission) UnsetBillingMethod() {
	o.BillingMethod.Unset()
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *Commission) GetServiceType() ServiceTypeReference {
	if o == nil || IsNil(o.ServiceType) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetServiceTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *Commission) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given ServiceTypeReference and assigns it to the ServiceType field.
func (o *Commission) SetServiceType(v ServiceTypeReference) {
	o.ServiceType = &v
}

// GetProjectBoard returns the ProjectBoard field value if set, zero value otherwise.
func (o *Commission) GetProjectBoard() ProjectBoardReference {
	if o == nil || IsNil(o.ProjectBoard) {
		var ret ProjectBoardReference
		return ret
	}
	return *o.ProjectBoard
}

// GetProjectBoardOk returns a tuple with the ProjectBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetProjectBoardOk() (*ProjectBoardReference, bool) {
	if o == nil || IsNil(o.ProjectBoard) {
		return nil, false
	}
	return o.ProjectBoard, true
}

// HasProjectBoard returns a boolean if a field has been set.
func (o *Commission) HasProjectBoard() bool {
	if o != nil && !IsNil(o.ProjectBoard) {
		return true
	}

	return false
}

// SetProjectBoard gets a reference to the given ProjectBoardReference and assigns it to the ProjectBoard field.
func (o *Commission) SetProjectBoard(v ProjectBoardReference) {
	o.ProjectBoard = &v
}

// GetProjectType returns the ProjectType field value if set, zero value otherwise.
func (o *Commission) GetProjectType() ProjectTypeReference {
	if o == nil || IsNil(o.ProjectType) {
		var ret ProjectTypeReference
		return ret
	}
	return *o.ProjectType
}

// GetProjectTypeOk returns a tuple with the ProjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetProjectTypeOk() (*ProjectTypeReference, bool) {
	if o == nil || IsNil(o.ProjectType) {
		return nil, false
	}
	return o.ProjectType, true
}

// HasProjectType returns a boolean if a field has been set.
func (o *Commission) HasProjectType() bool {
	if o != nil && !IsNil(o.ProjectType) {
		return true
	}

	return false
}

// SetProjectType gets a reference to the given ProjectTypeReference and assigns it to the ProjectType field.
func (o *Commission) SetProjectType(v ProjectTypeReference) {
	o.ProjectType = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *Commission) GetAgreementType() AgreementTypeReference {
	if o == nil || IsNil(o.AgreementType) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetAgreementTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *Commission) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given AgreementTypeReference and assigns it to the AgreementType field.
func (o *Commission) SetAgreementType(v AgreementTypeReference) {
	o.AgreementType = &v
}

// GetNumberOfMonths returns the NumberOfMonths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetNumberOfMonths() int32 {
	if o == nil || IsNil(o.NumberOfMonths.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfMonths.Get()
}

// GetNumberOfMonthsOk returns a tuple with the NumberOfMonths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetNumberOfMonthsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfMonths.Get(), o.NumberOfMonths.IsSet()
}

// HasNumberOfMonths returns a boolean if a field has been set.
func (o *Commission) HasNumberOfMonths() bool {
	if o != nil && o.NumberOfMonths.IsSet() {
		return true
	}

	return false
}

// SetNumberOfMonths gets a reference to the given NullableInt32 and assigns it to the NumberOfMonths field.
func (o *Commission) SetNumberOfMonths(v int32) {
	o.NumberOfMonths.Set(&v)
}

// SetNumberOfMonthsNil sets the value for NumberOfMonths to be an explicit nil
func (o *Commission) SetNumberOfMonthsNil() {
	o.NumberOfMonths.Set(nil)
}

// UnsetNumberOfMonths ensures that no value is present for NumberOfMonths, not even an explicit nil
func (o *Commission) UnsetNumberOfMonths() {
	o.NumberOfMonths.Unset()
}

// GetProductCategory returns the ProductCategory field value if set, zero value otherwise.
func (o *Commission) GetProductCategory() ProductCategoryReference {
	if o == nil || IsNil(o.ProductCategory) {
		var ret ProductCategoryReference
		return ret
	}
	return *o.ProductCategory
}

// GetProductCategoryOk returns a tuple with the ProductCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetProductCategoryOk() (*ProductCategoryReference, bool) {
	if o == nil || IsNil(o.ProductCategory) {
		return nil, false
	}
	return o.ProductCategory, true
}

// HasProductCategory returns a boolean if a field has been set.
func (o *Commission) HasProductCategory() bool {
	if o != nil && !IsNil(o.ProductCategory) {
		return true
	}

	return false
}

// SetProductCategory gets a reference to the given ProductCategoryReference and assigns it to the ProductCategory field.
func (o *Commission) SetProductCategory(v ProductCategoryReference) {
	o.ProductCategory = &v
}

// GetProductSubCategory returns the ProductSubCategory field value if set, zero value otherwise.
func (o *Commission) GetProductSubCategory() ProductSubCategoryReference {
	if o == nil || IsNil(o.ProductSubCategory) {
		var ret ProductSubCategoryReference
		return ret
	}
	return *o.ProductSubCategory
}

// GetProductSubCategoryOk returns a tuple with the ProductSubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetProductSubCategoryOk() (*ProductSubCategoryReference, bool) {
	if o == nil || IsNil(o.ProductSubCategory) {
		return nil, false
	}
	return o.ProductSubCategory, true
}

// HasProductSubCategory returns a boolean if a field has been set.
func (o *Commission) HasProductSubCategory() bool {
	if o != nil && !IsNil(o.ProductSubCategory) {
		return true
	}

	return false
}

// SetProductSubCategory gets a reference to the given ProductSubCategoryReference and assigns it to the ProductSubCategory field.
func (o *Commission) SetProductSubCategory(v ProductSubCategoryReference) {
	o.ProductSubCategory = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *Commission) GetItem() IvItemReference {
	if o == nil || IsNil(o.Item) {
		var ret IvItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetItemOk() (*IvItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *Commission) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given IvItemReference and assigns it to the Item field.
func (o *Commission) SetItem(v IvItemReference) {
	o.Item = &v
}

// GetCommissionBasis returns the CommissionBasis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetCommissionBasis() string {
	if o == nil || IsNil(o.CommissionBasis.Get()) {
		var ret string
		return ret
	}
	return *o.CommissionBasis.Get()
}

// GetCommissionBasisOk returns a tuple with the CommissionBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetCommissionBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommissionBasis.Get(), o.CommissionBasis.IsSet()
}

// HasCommissionBasis returns a boolean if a field has been set.
func (o *Commission) HasCommissionBasis() bool {
	if o != nil && o.CommissionBasis.IsSet() {
		return true
	}

	return false
}

// SetCommissionBasis gets a reference to the given NullableString and assigns it to the CommissionBasis field.
func (o *Commission) SetCommissionBasis(v string) {
	o.CommissionBasis.Set(&v)
}

// SetCommissionBasisNil sets the value for CommissionBasis to be an explicit nil
func (o *Commission) SetCommissionBasisNil() {
	o.CommissionBasis.Set(nil)
}

// UnsetCommissionBasis ensures that no value is present for CommissionBasis, not even an explicit nil
func (o *Commission) UnsetCommissionBasis() {
	o.CommissionBasis.Unset()
}

// GetInvoiceOption returns the InvoiceOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetInvoiceOption() string {
	if o == nil || IsNil(o.InvoiceOption.Get()) {
		var ret string
		return ret
	}
	return *o.InvoiceOption.Get()
}

// GetInvoiceOptionOk returns a tuple with the InvoiceOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetInvoiceOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceOption.Get(), o.InvoiceOption.IsSet()
}

// HasInvoiceOption returns a boolean if a field has been set.
func (o *Commission) HasInvoiceOption() bool {
	if o != nil && o.InvoiceOption.IsSet() {
		return true
	}

	return false
}

// SetInvoiceOption gets a reference to the given NullableString and assigns it to the InvoiceOption field.
func (o *Commission) SetInvoiceOption(v string) {
	o.InvoiceOption.Set(&v)
}

// SetInvoiceOptionNil sets the value for InvoiceOption to be an explicit nil
func (o *Commission) SetInvoiceOptionNil() {
	o.InvoiceOption.Set(nil)
}

// UnsetInvoiceOption ensures that no value is present for InvoiceOption, not even an explicit nil
func (o *Commission) UnsetInvoiceOption() {
	o.InvoiceOption.Unset()
}

// GetServicesFlag returns the ServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetServicesFlag() bool {
	if o == nil || IsNil(o.ServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ServicesFlag.Get()
}

// GetServicesFlagOk returns a tuple with the ServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicesFlag.Get(), o.ServicesFlag.IsSet()
}

// HasServicesFlag returns a boolean if a field has been set.
func (o *Commission) HasServicesFlag() bool {
	if o != nil && o.ServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetServicesFlag gets a reference to the given NullableBool and assigns it to the ServicesFlag field.
func (o *Commission) SetServicesFlag(v bool) {
	o.ServicesFlag.Set(&v)
}

// SetServicesFlagNil sets the value for ServicesFlag to be an explicit nil
func (o *Commission) SetServicesFlagNil() {
	o.ServicesFlag.Set(nil)
}

// UnsetServicesFlag ensures that no value is present for ServicesFlag, not even an explicit nil
func (o *Commission) UnsetServicesFlag() {
	o.ServicesFlag.Unset()
}

// GetAgreementsFlag returns the AgreementsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetAgreementsFlag() bool {
	if o == nil || IsNil(o.AgreementsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AgreementsFlag.Get()
}

// GetAgreementsFlagOk returns a tuple with the AgreementsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetAgreementsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementsFlag.Get(), o.AgreementsFlag.IsSet()
}

// HasAgreementsFlag returns a boolean if a field has been set.
func (o *Commission) HasAgreementsFlag() bool {
	if o != nil && o.AgreementsFlag.IsSet() {
		return true
	}

	return false
}

// SetAgreementsFlag gets a reference to the given NullableBool and assigns it to the AgreementsFlag field.
func (o *Commission) SetAgreementsFlag(v bool) {
	o.AgreementsFlag.Set(&v)
}

// SetAgreementsFlagNil sets the value for AgreementsFlag to be an explicit nil
func (o *Commission) SetAgreementsFlagNil() {
	o.AgreementsFlag.Set(nil)
}

// UnsetAgreementsFlag ensures that no value is present for AgreementsFlag, not even an explicit nil
func (o *Commission) UnsetAgreementsFlag() {
	o.AgreementsFlag.Unset()
}

// GetProductsFlag returns the ProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetProductsFlag() bool {
	if o == nil || IsNil(o.ProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProductsFlag.Get()
}

// GetProductsFlagOk returns a tuple with the ProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductsFlag.Get(), o.ProductsFlag.IsSet()
}

// HasProductsFlag returns a boolean if a field has been set.
func (o *Commission) HasProductsFlag() bool {
	if o != nil && o.ProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetProductsFlag gets a reference to the given NullableBool and assigns it to the ProductsFlag field.
func (o *Commission) SetProductsFlag(v bool) {
	o.ProductsFlag.Set(&v)
}

// SetProductsFlagNil sets the value for ProductsFlag to be an explicit nil
func (o *Commission) SetProductsFlagNil() {
	o.ProductsFlag.Set(nil)
}

// UnsetProductsFlag ensures that no value is present for ProductsFlag, not even an explicit nil
func (o *Commission) UnsetProductsFlag() {
	o.ProductsFlag.Unset()
}

// GetMyOpportunitiesFlag returns the MyOpportunitiesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Commission) GetMyOpportunitiesFlag() bool {
	if o == nil || IsNil(o.MyOpportunitiesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MyOpportunitiesFlag.Get()
}

// GetMyOpportunitiesFlagOk returns a tuple with the MyOpportunitiesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commission) GetMyOpportunitiesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MyOpportunitiesFlag.Get(), o.MyOpportunitiesFlag.IsSet()
}

// HasMyOpportunitiesFlag returns a boolean if a field has been set.
func (o *Commission) HasMyOpportunitiesFlag() bool {
	if o != nil && o.MyOpportunitiesFlag.IsSet() {
		return true
	}

	return false
}

// SetMyOpportunitiesFlag gets a reference to the given NullableBool and assigns it to the MyOpportunitiesFlag field.
func (o *Commission) SetMyOpportunitiesFlag(v bool) {
	o.MyOpportunitiesFlag.Set(&v)
}

// SetMyOpportunitiesFlagNil sets the value for MyOpportunitiesFlag to be an explicit nil
func (o *Commission) SetMyOpportunitiesFlagNil() {
	o.MyOpportunitiesFlag.Set(nil)
}

// UnsetMyOpportunitiesFlag ensures that no value is present for MyOpportunitiesFlag, not even an explicit nil
func (o *Commission) UnsetMyOpportunitiesFlag() {
	o.MyOpportunitiesFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Commission) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commission) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Commission) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Commission) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Commission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Commission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["member"] = o.Member
	if o.CommissionPercent.IsSet() {
		toSerialize["commissionPercent"] = o.CommissionPercent.Get()
	}
	if !IsNil(o.DateStart) {
		toSerialize["dateStart"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["dateEnd"] = o.DateEnd
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.ServiceBoard) {
		toSerialize["serviceBoard"] = o.ServiceBoard
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Territory) {
		toSerialize["territory"] = o.Territory
	}
	if o.BillingMethod.IsSet() {
		toSerialize["billingMethod"] = o.BillingMethod.Get()
	}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !IsNil(o.ProjectBoard) {
		toSerialize["projectBoard"] = o.ProjectBoard
	}
	if !IsNil(o.ProjectType) {
		toSerialize["projectType"] = o.ProjectType
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if o.NumberOfMonths.IsSet() {
		toSerialize["numberOfMonths"] = o.NumberOfMonths.Get()
	}
	if !IsNil(o.ProductCategory) {
		toSerialize["productCategory"] = o.ProductCategory
	}
	if !IsNil(o.ProductSubCategory) {
		toSerialize["productSubCategory"] = o.ProductSubCategory
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if o.CommissionBasis.IsSet() {
		toSerialize["commissionBasis"] = o.CommissionBasis.Get()
	}
	if o.InvoiceOption.IsSet() {
		toSerialize["invoiceOption"] = o.InvoiceOption.Get()
	}
	if o.ServicesFlag.IsSet() {
		toSerialize["servicesFlag"] = o.ServicesFlag.Get()
	}
	if o.AgreementsFlag.IsSet() {
		toSerialize["agreementsFlag"] = o.AgreementsFlag.Get()
	}
	if o.ProductsFlag.IsSet() {
		toSerialize["productsFlag"] = o.ProductsFlag.Get()
	}
	if o.MyOpportunitiesFlag.IsSet() {
		toSerialize["myOpportunitiesFlag"] = o.MyOpportunitiesFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Commission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommission := _Commission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommission)

	if err != nil {
		return err
	}

	*o = Commission(varCommission)

	return err
}

type NullableCommission struct {
	value *Commission
	isSet bool
}

func (v NullableCommission) Get() *Commission {
	return v.value
}

func (v *NullableCommission) Set(val *Commission) {
	v.value = val
	v.isSet = true
}

func (v NullableCommission) IsSet() bool {
	return v.isSet
}

func (v *NullableCommission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommission(val *Commission) *NullableCommission {
	return &NullableCommission{value: val, isSet: true}
}

func (v NullableCommission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
