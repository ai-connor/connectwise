/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CommunicationTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommunicationTypeInfo{}

// CommunicationTypeInfo struct for CommunicationTypeInfo
type CommunicationTypeInfo struct {
	Id          *int32             `json:"id,omitempty"`
	Description *string            `json:"description,omitempty"`
	PhoneFlag   NullableBool       `json:"phoneFlag,omitempty"`
	FaxFlag     NullableBool       `json:"faxFlag,omitempty"`
	EmailFlag   NullableBool       `json:"emailFlag,omitempty"`
	DefaultFlag NullableBool       `json:"defaultFlag,omitempty"`
	Info        *map[string]string `json:"_info,omitempty"`
}

// NewCommunicationTypeInfo instantiates a new CommunicationTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunicationTypeInfo() *CommunicationTypeInfo {
	this := CommunicationTypeInfo{}
	return &this
}

// NewCommunicationTypeInfoWithDefaults instantiates a new CommunicationTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunicationTypeInfoWithDefaults() *CommunicationTypeInfo {
	this := CommunicationTypeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommunicationTypeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationTypeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CommunicationTypeInfo) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CommunicationTypeInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationTypeInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CommunicationTypeInfo) SetDescription(v string) {
	o.Description = &v
}

// GetPhoneFlag returns the PhoneFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationTypeInfo) GetPhoneFlag() bool {
	if o == nil || IsNil(o.PhoneFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PhoneFlag.Get()
}

// GetPhoneFlagOk returns a tuple with the PhoneFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationTypeInfo) GetPhoneFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneFlag.Get(), o.PhoneFlag.IsSet()
}

// HasPhoneFlag returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasPhoneFlag() bool {
	if o != nil && o.PhoneFlag.IsSet() {
		return true
	}

	return false
}

// SetPhoneFlag gets a reference to the given NullableBool and assigns it to the PhoneFlag field.
func (o *CommunicationTypeInfo) SetPhoneFlag(v bool) {
	o.PhoneFlag.Set(&v)
}

// SetPhoneFlagNil sets the value for PhoneFlag to be an explicit nil
func (o *CommunicationTypeInfo) SetPhoneFlagNil() {
	o.PhoneFlag.Set(nil)
}

// UnsetPhoneFlag ensures that no value is present for PhoneFlag, not even an explicit nil
func (o *CommunicationTypeInfo) UnsetPhoneFlag() {
	o.PhoneFlag.Unset()
}

// GetFaxFlag returns the FaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationTypeInfo) GetFaxFlag() bool {
	if o == nil || IsNil(o.FaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.FaxFlag.Get()
}

// GetFaxFlagOk returns a tuple with the FaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationTypeInfo) GetFaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FaxFlag.Get(), o.FaxFlag.IsSet()
}

// HasFaxFlag returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasFaxFlag() bool {
	if o != nil && o.FaxFlag.IsSet() {
		return true
	}

	return false
}

// SetFaxFlag gets a reference to the given NullableBool and assigns it to the FaxFlag field.
func (o *CommunicationTypeInfo) SetFaxFlag(v bool) {
	o.FaxFlag.Set(&v)
}

// SetFaxFlagNil sets the value for FaxFlag to be an explicit nil
func (o *CommunicationTypeInfo) SetFaxFlagNil() {
	o.FaxFlag.Set(nil)
}

// UnsetFaxFlag ensures that no value is present for FaxFlag, not even an explicit nil
func (o *CommunicationTypeInfo) UnsetFaxFlag() {
	o.FaxFlag.Unset()
}

// GetEmailFlag returns the EmailFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationTypeInfo) GetEmailFlag() bool {
	if o == nil || IsNil(o.EmailFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailFlag.Get()
}

// GetEmailFlagOk returns a tuple with the EmailFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationTypeInfo) GetEmailFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailFlag.Get(), o.EmailFlag.IsSet()
}

// HasEmailFlag returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasEmailFlag() bool {
	if o != nil && o.EmailFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailFlag gets a reference to the given NullableBool and assigns it to the EmailFlag field.
func (o *CommunicationTypeInfo) SetEmailFlag(v bool) {
	o.EmailFlag.Set(&v)
}

// SetEmailFlagNil sets the value for EmailFlag to be an explicit nil
func (o *CommunicationTypeInfo) SetEmailFlagNil() {
	o.EmailFlag.Set(nil)
}

// UnsetEmailFlag ensures that no value is present for EmailFlag, not even an explicit nil
func (o *CommunicationTypeInfo) UnsetEmailFlag() {
	o.EmailFlag.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationTypeInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationTypeInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *CommunicationTypeInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *CommunicationTypeInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *CommunicationTypeInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CommunicationTypeInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationTypeInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CommunicationTypeInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CommunicationTypeInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CommunicationTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommunicationTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.PhoneFlag.IsSet() {
		toSerialize["phoneFlag"] = o.PhoneFlag.Get()
	}
	if o.FaxFlag.IsSet() {
		toSerialize["faxFlag"] = o.FaxFlag.Get()
	}
	if o.EmailFlag.IsSet() {
		toSerialize["emailFlag"] = o.EmailFlag.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableCommunicationTypeInfo struct {
	value *CommunicationTypeInfo
	isSet bool
}

func (v NullableCommunicationTypeInfo) Get() *CommunicationTypeInfo {
	return v.value
}

func (v *NullableCommunicationTypeInfo) Set(val *CommunicationTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationTypeInfo(val *CommunicationTypeInfo) *NullableCommunicationTypeInfo {
	return &NullableCommunicationTypeInfo{value: val, isSet: true}
}

func (v NullableCommunicationTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
