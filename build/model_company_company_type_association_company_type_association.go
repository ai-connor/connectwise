/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompanyCompanyTypeAssociationCompanyTypeAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyCompanyTypeAssociationCompanyTypeAssociation{}

// CompanyCompanyTypeAssociationCompanyTypeAssociation struct for CompanyCompanyTypeAssociationCompanyTypeAssociation
type CompanyCompanyTypeAssociationCompanyTypeAssociation struct {
	Id      *int32               `json:"id,omitempty"`
	Type    CompanyTypeReference `json:"type"`
	Company CompanyReference     `json:"company"`
	Info    *map[string]string   `json:"_info,omitempty"`
}

type _CompanyCompanyTypeAssociationCompanyTypeAssociation CompanyCompanyTypeAssociationCompanyTypeAssociation

// NewCompanyCompanyTypeAssociationCompanyTypeAssociation instantiates a new CompanyCompanyTypeAssociationCompanyTypeAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyCompanyTypeAssociationCompanyTypeAssociation(type_ CompanyTypeReference, company CompanyReference) *CompanyCompanyTypeAssociationCompanyTypeAssociation {
	this := CompanyCompanyTypeAssociationCompanyTypeAssociation{}
	this.Type = type_
	this.Company = company
	return &this
}

// NewCompanyCompanyTypeAssociationCompanyTypeAssociationWithDefaults instantiates a new CompanyCompanyTypeAssociationCompanyTypeAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyCompanyTypeAssociationCompanyTypeAssociationWithDefaults() *CompanyCompanyTypeAssociationCompanyTypeAssociation {
	this := CompanyCompanyTypeAssociationCompanyTypeAssociation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetType() CompanyTypeReference {
	if o == nil {
		var ret CompanyTypeReference
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetTypeOk() (*CompanyTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) SetType(v CompanyTypeReference) {
	o.Type = v
}

// GetCompany returns the Company field value
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CompanyCompanyTypeAssociationCompanyTypeAssociation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyCompanyTypeAssociationCompanyTypeAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["company"] = o.Company
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CompanyCompanyTypeAssociationCompanyTypeAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"company",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyCompanyTypeAssociationCompanyTypeAssociation := _CompanyCompanyTypeAssociationCompanyTypeAssociation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyCompanyTypeAssociationCompanyTypeAssociation)

	if err != nil {
		return err
	}

	*o = CompanyCompanyTypeAssociationCompanyTypeAssociation(varCompanyCompanyTypeAssociationCompanyTypeAssociation)

	return err
}

type NullableCompanyCompanyTypeAssociationCompanyTypeAssociation struct {
	value *CompanyCompanyTypeAssociationCompanyTypeAssociation
	isSet bool
}

func (v NullableCompanyCompanyTypeAssociationCompanyTypeAssociation) Get() *CompanyCompanyTypeAssociationCompanyTypeAssociation {
	return v.value
}

func (v *NullableCompanyCompanyTypeAssociationCompanyTypeAssociation) Set(val *CompanyCompanyTypeAssociationCompanyTypeAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyCompanyTypeAssociationCompanyTypeAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyCompanyTypeAssociationCompanyTypeAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyCompanyTypeAssociationCompanyTypeAssociation(val *CompanyCompanyTypeAssociationCompanyTypeAssociation) *NullableCompanyCompanyTypeAssociationCompanyTypeAssociation {
	return &NullableCompanyCompanyTypeAssociationCompanyTypeAssociation{value: val, isSet: true}
}

func (v NullableCompanyCompanyTypeAssociationCompanyTypeAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyCompanyTypeAssociationCompanyTypeAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
