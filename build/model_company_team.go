/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompanyTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyTeam{}

// CompanyTeam struct for CompanyTeam
type CompanyTeam struct {
	Id                 *int32                     `json:"id,omitempty"`
	Company            *CompanyReference          `json:"company,omitempty"`
	TeamRole           TeamRoleReference          `json:"teamRole"`
	Location           *SystemLocationReference   `json:"location,omitempty"`
	Department         *SystemDepartmentReference `json:"department,omitempty"`
	Contact            *ContactReference          `json:"contact,omitempty"`
	Member             *MemberReference           `json:"member,omitempty"`
	AccountManagerFlag NullableBool               `json:"accountManagerFlag,omitempty"`
	TechFlag           NullableBool               `json:"techFlag,omitempty"`
	SalesFlag          NullableBool               `json:"salesFlag,omitempty"`
	Info               *map[string]string         `json:"_info,omitempty"`
}

type _CompanyTeam CompanyTeam

// NewCompanyTeam instantiates a new CompanyTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyTeam(teamRole TeamRoleReference) *CompanyTeam {
	this := CompanyTeam{}
	this.TeamRole = teamRole
	return &this
}

// NewCompanyTeamWithDefaults instantiates a new CompanyTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyTeamWithDefaults() *CompanyTeam {
	this := CompanyTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyTeam) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyTeam) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyTeam) SetId(v int32) {
	o.Id = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *CompanyTeam) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *CompanyTeam) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *CompanyTeam) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetTeamRole returns the TeamRole field value
func (o *CompanyTeam) GetTeamRole() TeamRoleReference {
	if o == nil {
		var ret TeamRoleReference
		return ret
	}

	return o.TeamRole
}

// GetTeamRoleOk returns a tuple with the TeamRole field value
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetTeamRoleOk() (*TeamRoleReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamRole, true
}

// SetTeamRole sets field value
func (o *CompanyTeam) SetTeamRole(v TeamRoleReference) {
	o.TeamRole = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CompanyTeam) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CompanyTeam) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *CompanyTeam) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *CompanyTeam) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *CompanyTeam) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *CompanyTeam) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *CompanyTeam) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *CompanyTeam) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *CompanyTeam) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *CompanyTeam) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *CompanyTeam) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *CompanyTeam) SetMember(v MemberReference) {
	o.Member = &v
}

// GetAccountManagerFlag returns the AccountManagerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyTeam) GetAccountManagerFlag() bool {
	if o == nil || IsNil(o.AccountManagerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AccountManagerFlag.Get()
}

// GetAccountManagerFlagOk returns a tuple with the AccountManagerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyTeam) GetAccountManagerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountManagerFlag.Get(), o.AccountManagerFlag.IsSet()
}

// HasAccountManagerFlag returns a boolean if a field has been set.
func (o *CompanyTeam) HasAccountManagerFlag() bool {
	if o != nil && o.AccountManagerFlag.IsSet() {
		return true
	}

	return false
}

// SetAccountManagerFlag gets a reference to the given NullableBool and assigns it to the AccountManagerFlag field.
func (o *CompanyTeam) SetAccountManagerFlag(v bool) {
	o.AccountManagerFlag.Set(&v)
}

// SetAccountManagerFlagNil sets the value for AccountManagerFlag to be an explicit nil
func (o *CompanyTeam) SetAccountManagerFlagNil() {
	o.AccountManagerFlag.Set(nil)
}

// UnsetAccountManagerFlag ensures that no value is present for AccountManagerFlag, not even an explicit nil
func (o *CompanyTeam) UnsetAccountManagerFlag() {
	o.AccountManagerFlag.Unset()
}

// GetTechFlag returns the TechFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyTeam) GetTechFlag() bool {
	if o == nil || IsNil(o.TechFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TechFlag.Get()
}

// GetTechFlagOk returns a tuple with the TechFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyTeam) GetTechFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TechFlag.Get(), o.TechFlag.IsSet()
}

// HasTechFlag returns a boolean if a field has been set.
func (o *CompanyTeam) HasTechFlag() bool {
	if o != nil && o.TechFlag.IsSet() {
		return true
	}

	return false
}

// SetTechFlag gets a reference to the given NullableBool and assigns it to the TechFlag field.
func (o *CompanyTeam) SetTechFlag(v bool) {
	o.TechFlag.Set(&v)
}

// SetTechFlagNil sets the value for TechFlag to be an explicit nil
func (o *CompanyTeam) SetTechFlagNil() {
	o.TechFlag.Set(nil)
}

// UnsetTechFlag ensures that no value is present for TechFlag, not even an explicit nil
func (o *CompanyTeam) UnsetTechFlag() {
	o.TechFlag.Unset()
}

// GetSalesFlag returns the SalesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyTeam) GetSalesFlag() bool {
	if o == nil || IsNil(o.SalesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SalesFlag.Get()
}

// GetSalesFlagOk returns a tuple with the SalesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyTeam) GetSalesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesFlag.Get(), o.SalesFlag.IsSet()
}

// HasSalesFlag returns a boolean if a field has been set.
func (o *CompanyTeam) HasSalesFlag() bool {
	if o != nil && o.SalesFlag.IsSet() {
		return true
	}

	return false
}

// SetSalesFlag gets a reference to the given NullableBool and assigns it to the SalesFlag field.
func (o *CompanyTeam) SetSalesFlag(v bool) {
	o.SalesFlag.Set(&v)
}

// SetSalesFlagNil sets the value for SalesFlag to be an explicit nil
func (o *CompanyTeam) SetSalesFlagNil() {
	o.SalesFlag.Set(nil)
}

// UnsetSalesFlag ensures that no value is present for SalesFlag, not even an explicit nil
func (o *CompanyTeam) UnsetSalesFlag() {
	o.SalesFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CompanyTeam) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyTeam) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CompanyTeam) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CompanyTeam) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CompanyTeam) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	toSerialize["teamRole"] = o.TeamRole
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if o.AccountManagerFlag.IsSet() {
		toSerialize["accountManagerFlag"] = o.AccountManagerFlag.Get()
	}
	if o.TechFlag.IsSet() {
		toSerialize["techFlag"] = o.TechFlag.Get()
	}
	if o.SalesFlag.IsSet() {
		toSerialize["salesFlag"] = o.SalesFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CompanyTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"teamRole",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyTeam := _CompanyTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyTeam)

	if err != nil {
		return err
	}

	*o = CompanyTeam(varCompanyTeam)

	return err
}

type NullableCompanyTeam struct {
	value *CompanyTeam
	isSet bool
}

func (v NullableCompanyTeam) Get() *CompanyTeam {
	return v.value
}

func (v *NullableCompanyTeam) Set(val *CompanyTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyTeam(val *CompanyTeam) *NullableCompanyTeam {
	return &NullableCompanyTeam{value: val, isSet: true}
}

func (v NullableCompanyTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
