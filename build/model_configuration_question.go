/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ConfigurationQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationQuestion{}

// ConfigurationQuestion struct for ConfigurationQuestion
type ConfigurationQuestion struct {
	AnswerId         NullableInt32          `json:"answerId,omitempty"`
	QuestionId       NullableInt32          `json:"questionId,omitempty"`
	Question         *string                `json:"question,omitempty"`
	Answer           map[string]interface{} `json:"answer,omitempty"`
	SequenceNumber   NullableFloat64        `json:"sequenceNumber,omitempty"`
	NumberOfDecimals NullableInt32          `json:"numberOfDecimals,omitempty"`
	FieldType        NullableString         `json:"fieldType,omitempty"`
	RequiredFlag     NullableBool           `json:"requiredFlag,omitempty"`
}

// NewConfigurationQuestion instantiates a new ConfigurationQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationQuestion() *ConfigurationQuestion {
	this := ConfigurationQuestion{}
	return &this
}

// NewConfigurationQuestionWithDefaults instantiates a new ConfigurationQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationQuestionWithDefaults() *ConfigurationQuestion {
	this := ConfigurationQuestion{}
	return &this
}

// GetAnswerId returns the AnswerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationQuestion) GetAnswerId() int32 {
	if o == nil || IsNil(o.AnswerId.Get()) {
		var ret int32
		return ret
	}
	return *o.AnswerId.Get()
}

// GetAnswerIdOk returns a tuple with the AnswerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationQuestion) GetAnswerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnswerId.Get(), o.AnswerId.IsSet()
}

// HasAnswerId returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasAnswerId() bool {
	if o != nil && o.AnswerId.IsSet() {
		return true
	}

	return false
}

// SetAnswerId gets a reference to the given NullableInt32 and assigns it to the AnswerId field.
func (o *ConfigurationQuestion) SetAnswerId(v int32) {
	o.AnswerId.Set(&v)
}

// SetAnswerIdNil sets the value for AnswerId to be an explicit nil
func (o *ConfigurationQuestion) SetAnswerIdNil() {
	o.AnswerId.Set(nil)
}

// UnsetAnswerId ensures that no value is present for AnswerId, not even an explicit nil
func (o *ConfigurationQuestion) UnsetAnswerId() {
	o.AnswerId.Unset()
}

// GetQuestionId returns the QuestionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationQuestion) GetQuestionId() int32 {
	if o == nil || IsNil(o.QuestionId.Get()) {
		var ret int32
		return ret
	}
	return *o.QuestionId.Get()
}

// GetQuestionIdOk returns a tuple with the QuestionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationQuestion) GetQuestionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuestionId.Get(), o.QuestionId.IsSet()
}

// HasQuestionId returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasQuestionId() bool {
	if o != nil && o.QuestionId.IsSet() {
		return true
	}

	return false
}

// SetQuestionId gets a reference to the given NullableInt32 and assigns it to the QuestionId field.
func (o *ConfigurationQuestion) SetQuestionId(v int32) {
	o.QuestionId.Set(&v)
}

// SetQuestionIdNil sets the value for QuestionId to be an explicit nil
func (o *ConfigurationQuestion) SetQuestionIdNil() {
	o.QuestionId.Set(nil)
}

// UnsetQuestionId ensures that no value is present for QuestionId, not even an explicit nil
func (o *ConfigurationQuestion) UnsetQuestionId() {
	o.QuestionId.Unset()
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *ConfigurationQuestion) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationQuestion) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *ConfigurationQuestion) SetQuestion(v string) {
	o.Question = &v
}

// GetAnswer returns the Answer field value if set, zero value otherwise.
func (o *ConfigurationQuestion) GetAnswer() map[string]interface{} {
	if o == nil || IsNil(o.Answer) {
		var ret map[string]interface{}
		return ret
	}
	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationQuestion) GetAnswerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Answer) {
		return map[string]interface{}{}, false
	}
	return o.Answer, true
}

// HasAnswer returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasAnswer() bool {
	if o != nil && !IsNil(o.Answer) {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given map[string]interface{} and assigns it to the Answer field.
func (o *ConfigurationQuestion) SetAnswer(v map[string]interface{}) {
	o.Answer = v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationQuestion) GetSequenceNumber() float64 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret float64
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationQuestion) GetSequenceNumberOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableFloat64 and assigns it to the SequenceNumber field.
func (o *ConfigurationQuestion) SetSequenceNumber(v float64) {
	o.SequenceNumber.Set(&v)
}

// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *ConfigurationQuestion) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *ConfigurationQuestion) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetNumberOfDecimals returns the NumberOfDecimals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationQuestion) GetNumberOfDecimals() int32 {
	if o == nil || IsNil(o.NumberOfDecimals.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfDecimals.Get()
}

// GetNumberOfDecimalsOk returns a tuple with the NumberOfDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationQuestion) GetNumberOfDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfDecimals.Get(), o.NumberOfDecimals.IsSet()
}

// HasNumberOfDecimals returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasNumberOfDecimals() bool {
	if o != nil && o.NumberOfDecimals.IsSet() {
		return true
	}

	return false
}

// SetNumberOfDecimals gets a reference to the given NullableInt32 and assigns it to the NumberOfDecimals field.
func (o *ConfigurationQuestion) SetNumberOfDecimals(v int32) {
	o.NumberOfDecimals.Set(&v)
}

// SetNumberOfDecimalsNil sets the value for NumberOfDecimals to be an explicit nil
func (o *ConfigurationQuestion) SetNumberOfDecimalsNil() {
	o.NumberOfDecimals.Set(nil)
}

// UnsetNumberOfDecimals ensures that no value is present for NumberOfDecimals, not even an explicit nil
func (o *ConfigurationQuestion) UnsetNumberOfDecimals() {
	o.NumberOfDecimals.Unset()
}

// GetFieldType returns the FieldType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationQuestion) GetFieldType() string {
	if o == nil || IsNil(o.FieldType.Get()) {
		var ret string
		return ret
	}
	return *o.FieldType.Get()
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationQuestion) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldType.Get(), o.FieldType.IsSet()
}

// HasFieldType returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasFieldType() bool {
	if o != nil && o.FieldType.IsSet() {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given NullableString and assigns it to the FieldType field.
func (o *ConfigurationQuestion) SetFieldType(v string) {
	o.FieldType.Set(&v)
}

// SetFieldTypeNil sets the value for FieldType to be an explicit nil
func (o *ConfigurationQuestion) SetFieldTypeNil() {
	o.FieldType.Set(nil)
}

// UnsetFieldType ensures that no value is present for FieldType, not even an explicit nil
func (o *ConfigurationQuestion) UnsetFieldType() {
	o.FieldType.Unset()
}

// GetRequiredFlag returns the RequiredFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationQuestion) GetRequiredFlag() bool {
	if o == nil || IsNil(o.RequiredFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiredFlag.Get()
}

// GetRequiredFlagOk returns a tuple with the RequiredFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationQuestion) GetRequiredFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFlag.Get(), o.RequiredFlag.IsSet()
}

// HasRequiredFlag returns a boolean if a field has been set.
func (o *ConfigurationQuestion) HasRequiredFlag() bool {
	if o != nil && o.RequiredFlag.IsSet() {
		return true
	}

	return false
}

// SetRequiredFlag gets a reference to the given NullableBool and assigns it to the RequiredFlag field.
func (o *ConfigurationQuestion) SetRequiredFlag(v bool) {
	o.RequiredFlag.Set(&v)
}

// SetRequiredFlagNil sets the value for RequiredFlag to be an explicit nil
func (o *ConfigurationQuestion) SetRequiredFlagNil() {
	o.RequiredFlag.Set(nil)
}

// UnsetRequiredFlag ensures that no value is present for RequiredFlag, not even an explicit nil
func (o *ConfigurationQuestion) UnsetRequiredFlag() {
	o.RequiredFlag.Unset()
}

func (o ConfigurationQuestion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AnswerId.IsSet() {
		toSerialize["answerId"] = o.AnswerId.Get()
	}
	if o.QuestionId.IsSet() {
		toSerialize["questionId"] = o.QuestionId.Get()
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.Answer) {
		toSerialize["answer"] = o.Answer
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	if o.NumberOfDecimals.IsSet() {
		toSerialize["numberOfDecimals"] = o.NumberOfDecimals.Get()
	}
	if o.FieldType.IsSet() {
		toSerialize["fieldType"] = o.FieldType.Get()
	}
	if o.RequiredFlag.IsSet() {
		toSerialize["requiredFlag"] = o.RequiredFlag.Get()
	}
	return toSerialize, nil
}

type NullableConfigurationQuestion struct {
	value *ConfigurationQuestion
	isSet bool
}

func (v NullableConfigurationQuestion) Get() *ConfigurationQuestion {
	return v.value
}

func (v *NullableConfigurationQuestion) Set(val *ConfigurationQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationQuestion(val *ConfigurationQuestion) *NullableConfigurationQuestion {
	return &NullableConfigurationQuestion{value: val, isSet: true}
}

func (v NullableConfigurationQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
