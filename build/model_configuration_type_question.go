/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConfigurationTypeQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationTypeQuestion{}

// ConfigurationTypeQuestion struct for ConfigurationTypeQuestion
type ConfigurationTypeQuestion struct {
	Id                *int32                      `json:"id,omitempty"`
	ConfigurationType *ConfigurationTypeReference `json:"configurationType,omitempty"`
	FieldType         NullableString              `json:"fieldType"`
	EntryType         NullableString              `json:"entryType"`
	SequenceNumber    NullableFloat64             `json:"sequenceNumber"`
	//  Max length: 1000;
	Question         string             `json:"question"`
	NumberOfDecimals NullableInt32      `json:"numberOfDecimals,omitempty"`
	RequiredFlag     NullableBool       `json:"requiredFlag,omitempty"`
	InactiveFlag     NullableBool       `json:"inactiveFlag,omitempty"`
	Info             *map[string]string `json:"_info,omitempty"`
}

type _ConfigurationTypeQuestion ConfigurationTypeQuestion

// NewConfigurationTypeQuestion instantiates a new ConfigurationTypeQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationTypeQuestion(fieldType NullableString, entryType NullableString, sequenceNumber NullableFloat64, question string) *ConfigurationTypeQuestion {
	this := ConfigurationTypeQuestion{}
	this.FieldType = fieldType
	this.EntryType = entryType
	this.SequenceNumber = sequenceNumber
	this.Question = question
	return &this
}

// NewConfigurationTypeQuestionWithDefaults instantiates a new ConfigurationTypeQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationTypeQuestionWithDefaults() *ConfigurationTypeQuestion {
	this := ConfigurationTypeQuestion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestion) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestion) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ConfigurationTypeQuestion) SetId(v int32) {
	o.Id = &v
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestion) GetConfigurationType() ConfigurationTypeReference {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret ConfigurationTypeReference
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestion) GetConfigurationTypeOk() (*ConfigurationTypeReference, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestion) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given ConfigurationTypeReference and assigns it to the ConfigurationType field.
func (o *ConfigurationTypeQuestion) SetConfigurationType(v ConfigurationTypeReference) {
	o.ConfigurationType = &v
}

// GetFieldType returns the FieldType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfigurationTypeQuestion) GetFieldType() string {
	if o == nil || o.FieldType.Get() == nil {
		var ret string
		return ret
	}

	return *o.FieldType.Get()
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestion) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldType.Get(), o.FieldType.IsSet()
}

// SetFieldType sets field value
func (o *ConfigurationTypeQuestion) SetFieldType(v string) {
	o.FieldType.Set(&v)
}

// GetEntryType returns the EntryType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfigurationTypeQuestion) GetEntryType() string {
	if o == nil || o.EntryType.Get() == nil {
		var ret string
		return ret
	}

	return *o.EntryType.Get()
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestion) GetEntryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntryType.Get(), o.EntryType.IsSet()
}

// SetEntryType sets field value
func (o *ConfigurationTypeQuestion) SetEntryType(v string) {
	o.EntryType.Set(&v)
}

// GetSequenceNumber returns the SequenceNumber field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *ConfigurationTypeQuestion) GetSequenceNumber() float64 {
	if o == nil || o.SequenceNumber.Get() == nil {
		var ret float64
		return ret
	}

	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestion) GetSequenceNumberOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// SetSequenceNumber sets field value
func (o *ConfigurationTypeQuestion) SetSequenceNumber(v float64) {
	o.SequenceNumber.Set(&v)
}

// GetQuestion returns the Question field value
func (o *ConfigurationTypeQuestion) GetQuestion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestion) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *ConfigurationTypeQuestion) SetQuestion(v string) {
	o.Question = v
}

// GetNumberOfDecimals returns the NumberOfDecimals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestion) GetNumberOfDecimals() int32 {
	if o == nil || IsNil(o.NumberOfDecimals.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfDecimals.Get()
}

// GetNumberOfDecimalsOk returns a tuple with the NumberOfDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestion) GetNumberOfDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfDecimals.Get(), o.NumberOfDecimals.IsSet()
}

// HasNumberOfDecimals returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestion) HasNumberOfDecimals() bool {
	if o != nil && o.NumberOfDecimals.IsSet() {
		return true
	}

	return false
}

// SetNumberOfDecimals gets a reference to the given NullableInt32 and assigns it to the NumberOfDecimals field.
func (o *ConfigurationTypeQuestion) SetNumberOfDecimals(v int32) {
	o.NumberOfDecimals.Set(&v)
}

// SetNumberOfDecimalsNil sets the value for NumberOfDecimals to be an explicit nil
func (o *ConfigurationTypeQuestion) SetNumberOfDecimalsNil() {
	o.NumberOfDecimals.Set(nil)
}

// UnsetNumberOfDecimals ensures that no value is present for NumberOfDecimals, not even an explicit nil
func (o *ConfigurationTypeQuestion) UnsetNumberOfDecimals() {
	o.NumberOfDecimals.Unset()
}

// GetRequiredFlag returns the RequiredFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestion) GetRequiredFlag() bool {
	if o == nil || IsNil(o.RequiredFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiredFlag.Get()
}

// GetRequiredFlagOk returns a tuple with the RequiredFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestion) GetRequiredFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFlag.Get(), o.RequiredFlag.IsSet()
}

// HasRequiredFlag returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestion) HasRequiredFlag() bool {
	if o != nil && o.RequiredFlag.IsSet() {
		return true
	}

	return false
}

// SetRequiredFlag gets a reference to the given NullableBool and assigns it to the RequiredFlag field.
func (o *ConfigurationTypeQuestion) SetRequiredFlag(v bool) {
	o.RequiredFlag.Set(&v)
}

// SetRequiredFlagNil sets the value for RequiredFlag to be an explicit nil
func (o *ConfigurationTypeQuestion) SetRequiredFlagNil() {
	o.RequiredFlag.Set(nil)
}

// UnsetRequiredFlag ensures that no value is present for RequiredFlag, not even an explicit nil
func (o *ConfigurationTypeQuestion) UnsetRequiredFlag() {
	o.RequiredFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestion) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestion) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestion) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ConfigurationTypeQuestion) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ConfigurationTypeQuestion) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ConfigurationTypeQuestion) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestion) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestion) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestion) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ConfigurationTypeQuestion) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ConfigurationTypeQuestion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationTypeQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	toSerialize["fieldType"] = o.FieldType.Get()
	toSerialize["entryType"] = o.EntryType.Get()
	toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	toSerialize["question"] = o.Question
	if o.NumberOfDecimals.IsSet() {
		toSerialize["numberOfDecimals"] = o.NumberOfDecimals.Get()
	}
	if o.RequiredFlag.IsSet() {
		toSerialize["requiredFlag"] = o.RequiredFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ConfigurationTypeQuestion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldType",
		"entryType",
		"sequenceNumber",
		"question",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigurationTypeQuestion := _ConfigurationTypeQuestion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigurationTypeQuestion)

	if err != nil {
		return err
	}

	*o = ConfigurationTypeQuestion(varConfigurationTypeQuestion)

	return err
}

type NullableConfigurationTypeQuestion struct {
	value *ConfigurationTypeQuestion
	isSet bool
}

func (v NullableConfigurationTypeQuestion) Get() *ConfigurationTypeQuestion {
	return v.value
}

func (v *NullableConfigurationTypeQuestion) Set(val *ConfigurationTypeQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationTypeQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationTypeQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationTypeQuestion(val *ConfigurationTypeQuestion) *NullableConfigurationTypeQuestion {
	return &NullableConfigurationTypeQuestion{value: val, isSet: true}
}

func (v NullableConfigurationTypeQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationTypeQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
