/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ConfigurationTypeQuestionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationTypeQuestionInfo{}

// ConfigurationTypeQuestionInfo struct for ConfigurationTypeQuestionInfo
type ConfigurationTypeQuestionInfo struct {
	Id                *int32                      `json:"id,omitempty"`
	ConfigurationType *ConfigurationTypeReference `json:"configurationType,omitempty"`
	FieldType         NullableString              `json:"fieldType,omitempty"`
	EntryType         NullableString              `json:"entryType,omitempty"`
	SequenceNumber    NullableFloat64             `json:"sequenceNumber,omitempty"`
	Question          *string                     `json:"question,omitempty"`
	NumberOfDecimals  NullableInt32               `json:"numberOfDecimals,omitempty"`
	RequiredFlag      NullableBool                `json:"requiredFlag,omitempty"`
	InactiveFlag      NullableBool                `json:"inactiveFlag,omitempty"`
	Info              *map[string]string          `json:"_info,omitempty"`
}

// NewConfigurationTypeQuestionInfo instantiates a new ConfigurationTypeQuestionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationTypeQuestionInfo() *ConfigurationTypeQuestionInfo {
	this := ConfigurationTypeQuestionInfo{}
	return &this
}

// NewConfigurationTypeQuestionInfoWithDefaults instantiates a new ConfigurationTypeQuestionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationTypeQuestionInfoWithDefaults() *ConfigurationTypeQuestionInfo {
	this := ConfigurationTypeQuestionInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ConfigurationTypeQuestionInfo) SetId(v int32) {
	o.Id = &v
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionInfo) GetConfigurationType() ConfigurationTypeReference {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret ConfigurationTypeReference
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionInfo) GetConfigurationTypeOk() (*ConfigurationTypeReference, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given ConfigurationTypeReference and assigns it to the ConfigurationType field.
func (o *ConfigurationTypeQuestionInfo) SetConfigurationType(v ConfigurationTypeReference) {
	o.ConfigurationType = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionInfo) GetFieldType() string {
	if o == nil || IsNil(o.FieldType.Get()) {
		var ret string
		return ret
	}
	return *o.FieldType.Get()
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionInfo) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldType.Get(), o.FieldType.IsSet()
}

// HasFieldType returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasFieldType() bool {
	if o != nil && o.FieldType.IsSet() {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given NullableString and assigns it to the FieldType field.
func (o *ConfigurationTypeQuestionInfo) SetFieldType(v string) {
	o.FieldType.Set(&v)
}

// SetFieldTypeNil sets the value for FieldType to be an explicit nil
func (o *ConfigurationTypeQuestionInfo) SetFieldTypeNil() {
	o.FieldType.Set(nil)
}

// UnsetFieldType ensures that no value is present for FieldType, not even an explicit nil
func (o *ConfigurationTypeQuestionInfo) UnsetFieldType() {
	o.FieldType.Unset()
}

// GetEntryType returns the EntryType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionInfo) GetEntryType() string {
	if o == nil || IsNil(o.EntryType.Get()) {
		var ret string
		return ret
	}
	return *o.EntryType.Get()
}

// GetEntryTypeOk returns a tuple with the EntryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionInfo) GetEntryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntryType.Get(), o.EntryType.IsSet()
}

// HasEntryType returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasEntryType() bool {
	if o != nil && o.EntryType.IsSet() {
		return true
	}

	return false
}

// SetEntryType gets a reference to the given NullableString and assigns it to the EntryType field.
func (o *ConfigurationTypeQuestionInfo) SetEntryType(v string) {
	o.EntryType.Set(&v)
}

// SetEntryTypeNil sets the value for EntryType to be an explicit nil
func (o *ConfigurationTypeQuestionInfo) SetEntryTypeNil() {
	o.EntryType.Set(nil)
}

// UnsetEntryType ensures that no value is present for EntryType, not even an explicit nil
func (o *ConfigurationTypeQuestionInfo) UnsetEntryType() {
	o.EntryType.Unset()
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionInfo) GetSequenceNumber() float64 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret float64
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionInfo) GetSequenceNumberOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableFloat64 and assigns it to the SequenceNumber field.
func (o *ConfigurationTypeQuestionInfo) SetSequenceNumber(v float64) {
	o.SequenceNumber.Set(&v)
}

// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *ConfigurationTypeQuestionInfo) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *ConfigurationTypeQuestionInfo) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionInfo) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionInfo) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *ConfigurationTypeQuestionInfo) SetQuestion(v string) {
	o.Question = &v
}

// GetNumberOfDecimals returns the NumberOfDecimals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionInfo) GetNumberOfDecimals() int32 {
	if o == nil || IsNil(o.NumberOfDecimals.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfDecimals.Get()
}

// GetNumberOfDecimalsOk returns a tuple with the NumberOfDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionInfo) GetNumberOfDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfDecimals.Get(), o.NumberOfDecimals.IsSet()
}

// HasNumberOfDecimals returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasNumberOfDecimals() bool {
	if o != nil && o.NumberOfDecimals.IsSet() {
		return true
	}

	return false
}

// SetNumberOfDecimals gets a reference to the given NullableInt32 and assigns it to the NumberOfDecimals field.
func (o *ConfigurationTypeQuestionInfo) SetNumberOfDecimals(v int32) {
	o.NumberOfDecimals.Set(&v)
}

// SetNumberOfDecimalsNil sets the value for NumberOfDecimals to be an explicit nil
func (o *ConfigurationTypeQuestionInfo) SetNumberOfDecimalsNil() {
	o.NumberOfDecimals.Set(nil)
}

// UnsetNumberOfDecimals ensures that no value is present for NumberOfDecimals, not even an explicit nil
func (o *ConfigurationTypeQuestionInfo) UnsetNumberOfDecimals() {
	o.NumberOfDecimals.Unset()
}

// GetRequiredFlag returns the RequiredFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionInfo) GetRequiredFlag() bool {
	if o == nil || IsNil(o.RequiredFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiredFlag.Get()
}

// GetRequiredFlagOk returns a tuple with the RequiredFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionInfo) GetRequiredFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFlag.Get(), o.RequiredFlag.IsSet()
}

// HasRequiredFlag returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasRequiredFlag() bool {
	if o != nil && o.RequiredFlag.IsSet() {
		return true
	}

	return false
}

// SetRequiredFlag gets a reference to the given NullableBool and assigns it to the RequiredFlag field.
func (o *ConfigurationTypeQuestionInfo) SetRequiredFlag(v bool) {
	o.RequiredFlag.Set(&v)
}

// SetRequiredFlagNil sets the value for RequiredFlag to be an explicit nil
func (o *ConfigurationTypeQuestionInfo) SetRequiredFlagNil() {
	o.RequiredFlag.Set(nil)
}

// UnsetRequiredFlag ensures that no value is present for RequiredFlag, not even an explicit nil
func (o *ConfigurationTypeQuestionInfo) UnsetRequiredFlag() {
	o.RequiredFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ConfigurationTypeQuestionInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ConfigurationTypeQuestionInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ConfigurationTypeQuestionInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ConfigurationTypeQuestionInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ConfigurationTypeQuestionInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationTypeQuestionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	if o.FieldType.IsSet() {
		toSerialize["fieldType"] = o.FieldType.Get()
	}
	if o.EntryType.IsSet() {
		toSerialize["entryType"] = o.EntryType.Get()
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if o.NumberOfDecimals.IsSet() {
		toSerialize["numberOfDecimals"] = o.NumberOfDecimals.Get()
	}
	if o.RequiredFlag.IsSet() {
		toSerialize["requiredFlag"] = o.RequiredFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableConfigurationTypeQuestionInfo struct {
	value *ConfigurationTypeQuestionInfo
	isSet bool
}

func (v NullableConfigurationTypeQuestionInfo) Get() *ConfigurationTypeQuestionInfo {
	return v.value
}

func (v *NullableConfigurationTypeQuestionInfo) Set(val *ConfigurationTypeQuestionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationTypeQuestionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationTypeQuestionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationTypeQuestionInfo(val *ConfigurationTypeQuestionInfo) *NullableConfigurationTypeQuestionInfo {
	return &NullableConfigurationTypeQuestionInfo{value: val, isSet: true}
}

func (v NullableConfigurationTypeQuestionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationTypeQuestionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
