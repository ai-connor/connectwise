/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ContactTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactTypeInfo{}

// ContactTypeInfo struct for ContactTypeInfo
type ContactTypeInfo struct {
	Id                  *int32             `json:"id,omitempty"`
	Description         *string            `json:"description,omitempty"`
	DefaultFlag         NullableBool       `json:"defaultFlag,omitempty"`
	ServiceAlertFlag    NullableBool       `json:"serviceAlertFlag,omitempty"`
	ServiceAlertMessage *string            `json:"serviceAlertMessage,omitempty"`
	Info                *map[string]string `json:"_info,omitempty"`
}

// NewContactTypeInfo instantiates a new ContactTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactTypeInfo() *ContactTypeInfo {
	this := ContactTypeInfo{}
	return &this
}

// NewContactTypeInfoWithDefaults instantiates a new ContactTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactTypeInfoWithDefaults() *ContactTypeInfo {
	this := ContactTypeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContactTypeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTypeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContactTypeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ContactTypeInfo) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ContactTypeInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTypeInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ContactTypeInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ContactTypeInfo) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactTypeInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactTypeInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *ContactTypeInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *ContactTypeInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *ContactTypeInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *ContactTypeInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetServiceAlertFlag returns the ServiceAlertFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactTypeInfo) GetServiceAlertFlag() bool {
	if o == nil || IsNil(o.ServiceAlertFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ServiceAlertFlag.Get()
}

// GetServiceAlertFlagOk returns a tuple with the ServiceAlertFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactTypeInfo) GetServiceAlertFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceAlertFlag.Get(), o.ServiceAlertFlag.IsSet()
}

// HasServiceAlertFlag returns a boolean if a field has been set.
func (o *ContactTypeInfo) HasServiceAlertFlag() bool {
	if o != nil && o.ServiceAlertFlag.IsSet() {
		return true
	}

	return false
}

// SetServiceAlertFlag gets a reference to the given NullableBool and assigns it to the ServiceAlertFlag field.
func (o *ContactTypeInfo) SetServiceAlertFlag(v bool) {
	o.ServiceAlertFlag.Set(&v)
}

// SetServiceAlertFlagNil sets the value for ServiceAlertFlag to be an explicit nil
func (o *ContactTypeInfo) SetServiceAlertFlagNil() {
	o.ServiceAlertFlag.Set(nil)
}

// UnsetServiceAlertFlag ensures that no value is present for ServiceAlertFlag, not even an explicit nil
func (o *ContactTypeInfo) UnsetServiceAlertFlag() {
	o.ServiceAlertFlag.Unset()
}

// GetServiceAlertMessage returns the ServiceAlertMessage field value if set, zero value otherwise.
func (o *ContactTypeInfo) GetServiceAlertMessage() string {
	if o == nil || IsNil(o.ServiceAlertMessage) {
		var ret string
		return ret
	}
	return *o.ServiceAlertMessage
}

// GetServiceAlertMessageOk returns a tuple with the ServiceAlertMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTypeInfo) GetServiceAlertMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAlertMessage) {
		return nil, false
	}
	return o.ServiceAlertMessage, true
}

// HasServiceAlertMessage returns a boolean if a field has been set.
func (o *ContactTypeInfo) HasServiceAlertMessage() bool {
	if o != nil && !IsNil(o.ServiceAlertMessage) {
		return true
	}

	return false
}

// SetServiceAlertMessage gets a reference to the given string and assigns it to the ServiceAlertMessage field.
func (o *ContactTypeInfo) SetServiceAlertMessage(v string) {
	o.ServiceAlertMessage = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ContactTypeInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTypeInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ContactTypeInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ContactTypeInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ContactTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.ServiceAlertFlag.IsSet() {
		toSerialize["serviceAlertFlag"] = o.ServiceAlertFlag.Get()
	}
	if !IsNil(o.ServiceAlertMessage) {
		toSerialize["serviceAlertMessage"] = o.ServiceAlertMessage
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableContactTypeInfo struct {
	value *ContactTypeInfo
	isSet bool
}

func (v NullableContactTypeInfo) Get() *ContactTypeInfo {
	return v.value
}

func (v *NullableContactTypeInfo) Set(val *ContactTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContactTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContactTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactTypeInfo(val *ContactTypeInfo) *NullableContactTypeInfo {
	return &NullableContactTypeInfo{value: val, isSet: true}
}

func (v NullableContactTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
