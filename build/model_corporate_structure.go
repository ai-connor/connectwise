/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CorporateStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporateStructure{}

// CorporateStructure struct for CorporateStructure
type CorporateStructure struct {
	Id         *int32         `json:"id,omitempty"`
	LevelCount NullableString `json:"levelCount,omitempty"`
	//  Max length: 20;
	Level1Name *string `json:"level1Name,omitempty"`
	//  Max length: 20;
	Level2Name *string `json:"level2Name,omitempty"`
	//  Max length: 20;
	Level3Name *string `json:"level3Name,omitempty"`
	//  Max length: 20;
	Level4Name *string `json:"level4Name,omitempty"`
	//  Max length: 20;
	Level5Name      *string        `json:"level5Name,omitempty"`
	FiscalYearStart NullableString `json:"fiscalYearStart"`
	//  Max length: 50;
	LocationCaption string `json:"locationCaption"`
	//  Max length: 50;
	GroupCaption          string             `json:"groupCaption"`
	BaseCurrency          CurrencyReference  `json:"baseCurrency"`
	President             *MemberReference   `json:"president,omitempty"`
	ChiefOperatingOfficer *MemberReference   `json:"chiefOperatingOfficer,omitempty"`
	Controller            *MemberReference   `json:"controller,omitempty"`
	Dispatcher            *MemberReference   `json:"dispatcher,omitempty"`
	ServiceManager        *MemberReference   `json:"serviceManager,omitempty"`
	DutyManager           *MemberReference   `json:"dutyManager,omitempty"`
	Info                  *map[string]string `json:"_info,omitempty"`
}

type _CorporateStructure CorporateStructure

// NewCorporateStructure instantiates a new CorporateStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporateStructure(fiscalYearStart NullableString, locationCaption string, groupCaption string, baseCurrency CurrencyReference) *CorporateStructure {
	this := CorporateStructure{}
	this.FiscalYearStart = fiscalYearStart
	this.LocationCaption = locationCaption
	this.GroupCaption = groupCaption
	this.BaseCurrency = baseCurrency
	return &this
}

// NewCorporateStructureWithDefaults instantiates a new CorporateStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporateStructureWithDefaults() *CorporateStructure {
	this := CorporateStructure{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CorporateStructure) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CorporateStructure) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CorporateStructure) SetId(v int32) {
	o.Id = &v
}

// GetLevelCount returns the LevelCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CorporateStructure) GetLevelCount() string {
	if o == nil || IsNil(o.LevelCount.Get()) {
		var ret string
		return ret
	}
	return *o.LevelCount.Get()
}

// GetLevelCountOk returns a tuple with the LevelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateStructure) GetLevelCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelCount.Get(), o.LevelCount.IsSet()
}

// HasLevelCount returns a boolean if a field has been set.
func (o *CorporateStructure) HasLevelCount() bool {
	if o != nil && o.LevelCount.IsSet() {
		return true
	}

	return false
}

// SetLevelCount gets a reference to the given NullableString and assigns it to the LevelCount field.
func (o *CorporateStructure) SetLevelCount(v string) {
	o.LevelCount.Set(&v)
}

// SetLevelCountNil sets the value for LevelCount to be an explicit nil
func (o *CorporateStructure) SetLevelCountNil() {
	o.LevelCount.Set(nil)
}

// UnsetLevelCount ensures that no value is present for LevelCount, not even an explicit nil
func (o *CorporateStructure) UnsetLevelCount() {
	o.LevelCount.Unset()
}

// GetLevel1Name returns the Level1Name field value if set, zero value otherwise.
func (o *CorporateStructure) GetLevel1Name() string {
	if o == nil || IsNil(o.Level1Name) {
		var ret string
		return ret
	}
	return *o.Level1Name
}

// GetLevel1NameOk returns a tuple with the Level1Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetLevel1NameOk() (*string, bool) {
	if o == nil || IsNil(o.Level1Name) {
		return nil, false
	}
	return o.Level1Name, true
}

// HasLevel1Name returns a boolean if a field has been set.
func (o *CorporateStructure) HasLevel1Name() bool {
	if o != nil && !IsNil(o.Level1Name) {
		return true
	}

	return false
}

// SetLevel1Name gets a reference to the given string and assigns it to the Level1Name field.
func (o *CorporateStructure) SetLevel1Name(v string) {
	o.Level1Name = &v
}

// GetLevel2Name returns the Level2Name field value if set, zero value otherwise.
func (o *CorporateStructure) GetLevel2Name() string {
	if o == nil || IsNil(o.Level2Name) {
		var ret string
		return ret
	}
	return *o.Level2Name
}

// GetLevel2NameOk returns a tuple with the Level2Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetLevel2NameOk() (*string, bool) {
	if o == nil || IsNil(o.Level2Name) {
		return nil, false
	}
	return o.Level2Name, true
}

// HasLevel2Name returns a boolean if a field has been set.
func (o *CorporateStructure) HasLevel2Name() bool {
	if o != nil && !IsNil(o.Level2Name) {
		return true
	}

	return false
}

// SetLevel2Name gets a reference to the given string and assigns it to the Level2Name field.
func (o *CorporateStructure) SetLevel2Name(v string) {
	o.Level2Name = &v
}

// GetLevel3Name returns the Level3Name field value if set, zero value otherwise.
func (o *CorporateStructure) GetLevel3Name() string {
	if o == nil || IsNil(o.Level3Name) {
		var ret string
		return ret
	}
	return *o.Level3Name
}

// GetLevel3NameOk returns a tuple with the Level3Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetLevel3NameOk() (*string, bool) {
	if o == nil || IsNil(o.Level3Name) {
		return nil, false
	}
	return o.Level3Name, true
}

// HasLevel3Name returns a boolean if a field has been set.
func (o *CorporateStructure) HasLevel3Name() bool {
	if o != nil && !IsNil(o.Level3Name) {
		return true
	}

	return false
}

// SetLevel3Name gets a reference to the given string and assigns it to the Level3Name field.
func (o *CorporateStructure) SetLevel3Name(v string) {
	o.Level3Name = &v
}

// GetLevel4Name returns the Level4Name field value if set, zero value otherwise.
func (o *CorporateStructure) GetLevel4Name() string {
	if o == nil || IsNil(o.Level4Name) {
		var ret string
		return ret
	}
	return *o.Level4Name
}

// GetLevel4NameOk returns a tuple with the Level4Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetLevel4NameOk() (*string, bool) {
	if o == nil || IsNil(o.Level4Name) {
		return nil, false
	}
	return o.Level4Name, true
}

// HasLevel4Name returns a boolean if a field has been set.
func (o *CorporateStructure) HasLevel4Name() bool {
	if o != nil && !IsNil(o.Level4Name) {
		return true
	}

	return false
}

// SetLevel4Name gets a reference to the given string and assigns it to the Level4Name field.
func (o *CorporateStructure) SetLevel4Name(v string) {
	o.Level4Name = &v
}

// GetLevel5Name returns the Level5Name field value if set, zero value otherwise.
func (o *CorporateStructure) GetLevel5Name() string {
	if o == nil || IsNil(o.Level5Name) {
		var ret string
		return ret
	}
	return *o.Level5Name
}

// GetLevel5NameOk returns a tuple with the Level5Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetLevel5NameOk() (*string, bool) {
	if o == nil || IsNil(o.Level5Name) {
		return nil, false
	}
	return o.Level5Name, true
}

// HasLevel5Name returns a boolean if a field has been set.
func (o *CorporateStructure) HasLevel5Name() bool {
	if o != nil && !IsNil(o.Level5Name) {
		return true
	}

	return false
}

// SetLevel5Name gets a reference to the given string and assigns it to the Level5Name field.
func (o *CorporateStructure) SetLevel5Name(v string) {
	o.Level5Name = &v
}

// GetFiscalYearStart returns the FiscalYearStart field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CorporateStructure) GetFiscalYearStart() string {
	if o == nil || o.FiscalYearStart.Get() == nil {
		var ret string
		return ret
	}

	return *o.FiscalYearStart.Get()
}

// GetFiscalYearStartOk returns a tuple with the FiscalYearStart field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateStructure) GetFiscalYearStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FiscalYearStart.Get(), o.FiscalYearStart.IsSet()
}

// SetFiscalYearStart sets field value
func (o *CorporateStructure) SetFiscalYearStart(v string) {
	o.FiscalYearStart.Set(&v)
}

// GetLocationCaption returns the LocationCaption field value
func (o *CorporateStructure) GetLocationCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationCaption
}

// GetLocationCaptionOk returns a tuple with the LocationCaption field value
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetLocationCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationCaption, true
}

// SetLocationCaption sets field value
func (o *CorporateStructure) SetLocationCaption(v string) {
	o.LocationCaption = v
}

// GetGroupCaption returns the GroupCaption field value
func (o *CorporateStructure) GetGroupCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupCaption
}

// GetGroupCaptionOk returns a tuple with the GroupCaption field value
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetGroupCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupCaption, true
}

// SetGroupCaption sets field value
func (o *CorporateStructure) SetGroupCaption(v string) {
	o.GroupCaption = v
}

// GetBaseCurrency returns the BaseCurrency field value
func (o *CorporateStructure) GetBaseCurrency() CurrencyReference {
	if o == nil {
		var ret CurrencyReference
		return ret
	}

	return o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetBaseCurrencyOk() (*CurrencyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCurrency, true
}

// SetBaseCurrency sets field value
func (o *CorporateStructure) SetBaseCurrency(v CurrencyReference) {
	o.BaseCurrency = v
}

// GetPresident returns the President field value if set, zero value otherwise.
func (o *CorporateStructure) GetPresident() MemberReference {
	if o == nil || IsNil(o.President) {
		var ret MemberReference
		return ret
	}
	return *o.President
}

// GetPresidentOk returns a tuple with the President field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetPresidentOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.President) {
		return nil, false
	}
	return o.President, true
}

// HasPresident returns a boolean if a field has been set.
func (o *CorporateStructure) HasPresident() bool {
	if o != nil && !IsNil(o.President) {
		return true
	}

	return false
}

// SetPresident gets a reference to the given MemberReference and assigns it to the President field.
func (o *CorporateStructure) SetPresident(v MemberReference) {
	o.President = &v
}

// GetChiefOperatingOfficer returns the ChiefOperatingOfficer field value if set, zero value otherwise.
func (o *CorporateStructure) GetChiefOperatingOfficer() MemberReference {
	if o == nil || IsNil(o.ChiefOperatingOfficer) {
		var ret MemberReference
		return ret
	}
	return *o.ChiefOperatingOfficer
}

// GetChiefOperatingOfficerOk returns a tuple with the ChiefOperatingOfficer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetChiefOperatingOfficerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.ChiefOperatingOfficer) {
		return nil, false
	}
	return o.ChiefOperatingOfficer, true
}

// HasChiefOperatingOfficer returns a boolean if a field has been set.
func (o *CorporateStructure) HasChiefOperatingOfficer() bool {
	if o != nil && !IsNil(o.ChiefOperatingOfficer) {
		return true
	}

	return false
}

// SetChiefOperatingOfficer gets a reference to the given MemberReference and assigns it to the ChiefOperatingOfficer field.
func (o *CorporateStructure) SetChiefOperatingOfficer(v MemberReference) {
	o.ChiefOperatingOfficer = &v
}

// GetController returns the Controller field value if set, zero value otherwise.
func (o *CorporateStructure) GetController() MemberReference {
	if o == nil || IsNil(o.Controller) {
		var ret MemberReference
		return ret
	}
	return *o.Controller
}

// GetControllerOk returns a tuple with the Controller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetControllerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Controller) {
		return nil, false
	}
	return o.Controller, true
}

// HasController returns a boolean if a field has been set.
func (o *CorporateStructure) HasController() bool {
	if o != nil && !IsNil(o.Controller) {
		return true
	}

	return false
}

// SetController gets a reference to the given MemberReference and assigns it to the Controller field.
func (o *CorporateStructure) SetController(v MemberReference) {
	o.Controller = &v
}

// GetDispatcher returns the Dispatcher field value if set, zero value otherwise.
func (o *CorporateStructure) GetDispatcher() MemberReference {
	if o == nil || IsNil(o.Dispatcher) {
		var ret MemberReference
		return ret
	}
	return *o.Dispatcher
}

// GetDispatcherOk returns a tuple with the Dispatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetDispatcherOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Dispatcher) {
		return nil, false
	}
	return o.Dispatcher, true
}

// HasDispatcher returns a boolean if a field has been set.
func (o *CorporateStructure) HasDispatcher() bool {
	if o != nil && !IsNil(o.Dispatcher) {
		return true
	}

	return false
}

// SetDispatcher gets a reference to the given MemberReference and assigns it to the Dispatcher field.
func (o *CorporateStructure) SetDispatcher(v MemberReference) {
	o.Dispatcher = &v
}

// GetServiceManager returns the ServiceManager field value if set, zero value otherwise.
func (o *CorporateStructure) GetServiceManager() MemberReference {
	if o == nil || IsNil(o.ServiceManager) {
		var ret MemberReference
		return ret
	}
	return *o.ServiceManager
}

// GetServiceManagerOk returns a tuple with the ServiceManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetServiceManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.ServiceManager) {
		return nil, false
	}
	return o.ServiceManager, true
}

// HasServiceManager returns a boolean if a field has been set.
func (o *CorporateStructure) HasServiceManager() bool {
	if o != nil && !IsNil(o.ServiceManager) {
		return true
	}

	return false
}

// SetServiceManager gets a reference to the given MemberReference and assigns it to the ServiceManager field.
func (o *CorporateStructure) SetServiceManager(v MemberReference) {
	o.ServiceManager = &v
}

// GetDutyManager returns the DutyManager field value if set, zero value otherwise.
func (o *CorporateStructure) GetDutyManager() MemberReference {
	if o == nil || IsNil(o.DutyManager) {
		var ret MemberReference
		return ret
	}
	return *o.DutyManager
}

// GetDutyManagerOk returns a tuple with the DutyManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetDutyManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.DutyManager) {
		return nil, false
	}
	return o.DutyManager, true
}

// HasDutyManager returns a boolean if a field has been set.
func (o *CorporateStructure) HasDutyManager() bool {
	if o != nil && !IsNil(o.DutyManager) {
		return true
	}

	return false
}

// SetDutyManager gets a reference to the given MemberReference and assigns it to the DutyManager field.
func (o *CorporateStructure) SetDutyManager(v MemberReference) {
	o.DutyManager = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CorporateStructure) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateStructure) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CorporateStructure) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CorporateStructure) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CorporateStructure) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporateStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.LevelCount.IsSet() {
		toSerialize["levelCount"] = o.LevelCount.Get()
	}
	if !IsNil(o.Level1Name) {
		toSerialize["level1Name"] = o.Level1Name
	}
	if !IsNil(o.Level2Name) {
		toSerialize["level2Name"] = o.Level2Name
	}
	if !IsNil(o.Level3Name) {
		toSerialize["level3Name"] = o.Level3Name
	}
	if !IsNil(o.Level4Name) {
		toSerialize["level4Name"] = o.Level4Name
	}
	if !IsNil(o.Level5Name) {
		toSerialize["level5Name"] = o.Level5Name
	}
	toSerialize["fiscalYearStart"] = o.FiscalYearStart.Get()
	toSerialize["locationCaption"] = o.LocationCaption
	toSerialize["groupCaption"] = o.GroupCaption
	toSerialize["baseCurrency"] = o.BaseCurrency
	if !IsNil(o.President) {
		toSerialize["president"] = o.President
	}
	if !IsNil(o.ChiefOperatingOfficer) {
		toSerialize["chiefOperatingOfficer"] = o.ChiefOperatingOfficer
	}
	if !IsNil(o.Controller) {
		toSerialize["controller"] = o.Controller
	}
	if !IsNil(o.Dispatcher) {
		toSerialize["dispatcher"] = o.Dispatcher
	}
	if !IsNil(o.ServiceManager) {
		toSerialize["serviceManager"] = o.ServiceManager
	}
	if !IsNil(o.DutyManager) {
		toSerialize["dutyManager"] = o.DutyManager
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CorporateStructure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fiscalYearStart",
		"locationCaption",
		"groupCaption",
		"baseCurrency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorporateStructure := _CorporateStructure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorporateStructure)

	if err != nil {
		return err
	}

	*o = CorporateStructure(varCorporateStructure)

	return err
}

type NullableCorporateStructure struct {
	value *CorporateStructure
	isSet bool
}

func (v NullableCorporateStructure) Get() *CorporateStructure {
	return v.value
}

func (v *NullableCorporateStructure) Set(val *CorporateStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporateStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporateStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporateStructure(val *CorporateStructure) *NullableCorporateStructure {
	return &NullableCorporateStructure{value: val, isSet: true}
}

func (v NullableCorporateStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporateStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
