/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateAccountingBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAccountingBatchRequest{}

// CreateAccountingBatchRequest struct for CreateAccountingBatchRequest
type CreateAccountingBatchRequest struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	BatchIdentifier       *string `json:"batchIdentifier,omitempty"`
	GlInterfaceIdentifier *string `json:"glInterfaceIdentifier,omitempty"`
	// Batch must export Invoices, Expenses or Products.
	ExportInvoicesFlag NullableBool `json:"exportInvoicesFlag,omitempty"`
	// Batch must export Invoices, Expenses or Products.
	ExportExpensesFlag NullableBool `json:"exportExpensesFlag,omitempty"`
	// Batch must export Invoices, Expenses or Products.
	ExportProductsFlag NullableBool `json:"exportProductsFlag,omitempty"`
	// GL Entry RecIDs.
	ProcessedRecordIds []*int32     `json:"processedRecordIds"`
	SummarizeExpenses  NullableBool `json:"summarizeExpenses,omitempty"`
}

type _CreateAccountingBatchRequest CreateAccountingBatchRequest

// NewCreateAccountingBatchRequest instantiates a new CreateAccountingBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAccountingBatchRequest(processedRecordIds []*int32) *CreateAccountingBatchRequest {
	this := CreateAccountingBatchRequest{}
	this.ProcessedRecordIds = processedRecordIds
	return &this
}

// NewCreateAccountingBatchRequestWithDefaults instantiates a new CreateAccountingBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAccountingBatchRequestWithDefaults() *CreateAccountingBatchRequest {
	this := CreateAccountingBatchRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateAccountingBatchRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccountingBatchRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CreateAccountingBatchRequest) SetId(v int32) {
	o.Id = &v
}

// GetBatchIdentifier returns the BatchIdentifier field value if set, zero value otherwise.
func (o *CreateAccountingBatchRequest) GetBatchIdentifier() string {
	if o == nil || IsNil(o.BatchIdentifier) {
		var ret string
		return ret
	}
	return *o.BatchIdentifier
}

// GetBatchIdentifierOk returns a tuple with the BatchIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccountingBatchRequest) GetBatchIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.BatchIdentifier) {
		return nil, false
	}
	return o.BatchIdentifier, true
}

// HasBatchIdentifier returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasBatchIdentifier() bool {
	if o != nil && !IsNil(o.BatchIdentifier) {
		return true
	}

	return false
}

// SetBatchIdentifier gets a reference to the given string and assigns it to the BatchIdentifier field.
func (o *CreateAccountingBatchRequest) SetBatchIdentifier(v string) {
	o.BatchIdentifier = &v
}

// GetGlInterfaceIdentifier returns the GlInterfaceIdentifier field value if set, zero value otherwise.
func (o *CreateAccountingBatchRequest) GetGlInterfaceIdentifier() string {
	if o == nil || IsNil(o.GlInterfaceIdentifier) {
		var ret string
		return ret
	}
	return *o.GlInterfaceIdentifier
}

// GetGlInterfaceIdentifierOk returns a tuple with the GlInterfaceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccountingBatchRequest) GetGlInterfaceIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.GlInterfaceIdentifier) {
		return nil, false
	}
	return o.GlInterfaceIdentifier, true
}

// HasGlInterfaceIdentifier returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasGlInterfaceIdentifier() bool {
	if o != nil && !IsNil(o.GlInterfaceIdentifier) {
		return true
	}

	return false
}

// SetGlInterfaceIdentifier gets a reference to the given string and assigns it to the GlInterfaceIdentifier field.
func (o *CreateAccountingBatchRequest) SetGlInterfaceIdentifier(v string) {
	o.GlInterfaceIdentifier = &v
}

// GetExportInvoicesFlag returns the ExportInvoicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccountingBatchRequest) GetExportInvoicesFlag() bool {
	if o == nil || IsNil(o.ExportInvoicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExportInvoicesFlag.Get()
}

// GetExportInvoicesFlagOk returns a tuple with the ExportInvoicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccountingBatchRequest) GetExportInvoicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportInvoicesFlag.Get(), o.ExportInvoicesFlag.IsSet()
}

// HasExportInvoicesFlag returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasExportInvoicesFlag() bool {
	if o != nil && o.ExportInvoicesFlag.IsSet() {
		return true
	}

	return false
}

// SetExportInvoicesFlag gets a reference to the given NullableBool and assigns it to the ExportInvoicesFlag field.
func (o *CreateAccountingBatchRequest) SetExportInvoicesFlag(v bool) {
	o.ExportInvoicesFlag.Set(&v)
}

// SetExportInvoicesFlagNil sets the value for ExportInvoicesFlag to be an explicit nil
func (o *CreateAccountingBatchRequest) SetExportInvoicesFlagNil() {
	o.ExportInvoicesFlag.Set(nil)
}

// UnsetExportInvoicesFlag ensures that no value is present for ExportInvoicesFlag, not even an explicit nil
func (o *CreateAccountingBatchRequest) UnsetExportInvoicesFlag() {
	o.ExportInvoicesFlag.Unset()
}

// GetExportExpensesFlag returns the ExportExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccountingBatchRequest) GetExportExpensesFlag() bool {
	if o == nil || IsNil(o.ExportExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExportExpensesFlag.Get()
}

// GetExportExpensesFlagOk returns a tuple with the ExportExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccountingBatchRequest) GetExportExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportExpensesFlag.Get(), o.ExportExpensesFlag.IsSet()
}

// HasExportExpensesFlag returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasExportExpensesFlag() bool {
	if o != nil && o.ExportExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetExportExpensesFlag gets a reference to the given NullableBool and assigns it to the ExportExpensesFlag field.
func (o *CreateAccountingBatchRequest) SetExportExpensesFlag(v bool) {
	o.ExportExpensesFlag.Set(&v)
}

// SetExportExpensesFlagNil sets the value for ExportExpensesFlag to be an explicit nil
func (o *CreateAccountingBatchRequest) SetExportExpensesFlagNil() {
	o.ExportExpensesFlag.Set(nil)
}

// UnsetExportExpensesFlag ensures that no value is present for ExportExpensesFlag, not even an explicit nil
func (o *CreateAccountingBatchRequest) UnsetExportExpensesFlag() {
	o.ExportExpensesFlag.Unset()
}

// GetExportProductsFlag returns the ExportProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccountingBatchRequest) GetExportProductsFlag() bool {
	if o == nil || IsNil(o.ExportProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExportProductsFlag.Get()
}

// GetExportProductsFlagOk returns a tuple with the ExportProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccountingBatchRequest) GetExportProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportProductsFlag.Get(), o.ExportProductsFlag.IsSet()
}

// HasExportProductsFlag returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasExportProductsFlag() bool {
	if o != nil && o.ExportProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetExportProductsFlag gets a reference to the given NullableBool and assigns it to the ExportProductsFlag field.
func (o *CreateAccountingBatchRequest) SetExportProductsFlag(v bool) {
	o.ExportProductsFlag.Set(&v)
}

// SetExportProductsFlagNil sets the value for ExportProductsFlag to be an explicit nil
func (o *CreateAccountingBatchRequest) SetExportProductsFlagNil() {
	o.ExportProductsFlag.Set(nil)
}

// UnsetExportProductsFlag ensures that no value is present for ExportProductsFlag, not even an explicit nil
func (o *CreateAccountingBatchRequest) UnsetExportProductsFlag() {
	o.ExportProductsFlag.Unset()
}

// GetProcessedRecordIds returns the ProcessedRecordIds field value
func (o *CreateAccountingBatchRequest) GetProcessedRecordIds() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}

	return o.ProcessedRecordIds
}

// GetProcessedRecordIdsOk returns a tuple with the ProcessedRecordIds field value
// and a boolean to check if the value has been set.
func (o *CreateAccountingBatchRequest) GetProcessedRecordIdsOk() ([]*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessedRecordIds, true
}

// SetProcessedRecordIds sets field value
func (o *CreateAccountingBatchRequest) SetProcessedRecordIds(v []*int32) {
	o.ProcessedRecordIds = v
}

// GetSummarizeExpenses returns the SummarizeExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccountingBatchRequest) GetSummarizeExpenses() bool {
	if o == nil || IsNil(o.SummarizeExpenses.Get()) {
		var ret bool
		return ret
	}
	return *o.SummarizeExpenses.Get()
}

// GetSummarizeExpensesOk returns a tuple with the SummarizeExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccountingBatchRequest) GetSummarizeExpensesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SummarizeExpenses.Get(), o.SummarizeExpenses.IsSet()
}

// HasSummarizeExpenses returns a boolean if a field has been set.
func (o *CreateAccountingBatchRequest) HasSummarizeExpenses() bool {
	if o != nil && o.SummarizeExpenses.IsSet() {
		return true
	}

	return false
}

// SetSummarizeExpenses gets a reference to the given NullableBool and assigns it to the SummarizeExpenses field.
func (o *CreateAccountingBatchRequest) SetSummarizeExpenses(v bool) {
	o.SummarizeExpenses.Set(&v)
}

// SetSummarizeExpensesNil sets the value for SummarizeExpenses to be an explicit nil
func (o *CreateAccountingBatchRequest) SetSummarizeExpensesNil() {
	o.SummarizeExpenses.Set(nil)
}

// UnsetSummarizeExpenses ensures that no value is present for SummarizeExpenses, not even an explicit nil
func (o *CreateAccountingBatchRequest) UnsetSummarizeExpenses() {
	o.SummarizeExpenses.Unset()
}

func (o CreateAccountingBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAccountingBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.BatchIdentifier) {
		toSerialize["batchIdentifier"] = o.BatchIdentifier
	}
	if !IsNil(o.GlInterfaceIdentifier) {
		toSerialize["glInterfaceIdentifier"] = o.GlInterfaceIdentifier
	}
	if o.ExportInvoicesFlag.IsSet() {
		toSerialize["exportInvoicesFlag"] = o.ExportInvoicesFlag.Get()
	}
	if o.ExportExpensesFlag.IsSet() {
		toSerialize["exportExpensesFlag"] = o.ExportExpensesFlag.Get()
	}
	if o.ExportProductsFlag.IsSet() {
		toSerialize["exportProductsFlag"] = o.ExportProductsFlag.Get()
	}
	toSerialize["processedRecordIds"] = o.ProcessedRecordIds
	if o.SummarizeExpenses.IsSet() {
		toSerialize["summarizeExpenses"] = o.SummarizeExpenses.Get()
	}
	return toSerialize, nil
}

func (o *CreateAccountingBatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"processedRecordIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAccountingBatchRequest := _CreateAccountingBatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAccountingBatchRequest)

	if err != nil {
		return err
	}

	*o = CreateAccountingBatchRequest(varCreateAccountingBatchRequest)

	return err
}

type NullableCreateAccountingBatchRequest struct {
	value *CreateAccountingBatchRequest
	isSet bool
}

func (v NullableCreateAccountingBatchRequest) Get() *CreateAccountingBatchRequest {
	return v.value
}

func (v *NullableCreateAccountingBatchRequest) Set(val *CreateAccountingBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccountingBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccountingBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccountingBatchRequest(val *CreateAccountingBatchRequest) *NullableCreateAccountingBatchRequest {
	return &NullableCreateAccountingBatchRequest{value: val, isSet: true}
}

func (v NullableCreateAccountingBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccountingBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
