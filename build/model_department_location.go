/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DepartmentLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepartmentLocation{}

// DepartmentLocation struct for DepartmentLocation
type DepartmentLocation struct {
	Id                 *int32                      `json:"id,omitempty"`
	Location           SystemLocationReference     `json:"location"`
	Department         *SystemDepartmentReference  `json:"department,omitempty"`
	DepartmentManager  *MemberReference            `json:"departmentManager,omitempty"`
	Dispatch           *MemberReference            `json:"dispatch,omitempty"`
	ServiceManager     *MemberReference            `json:"serviceManager,omitempty"`
	DutyManager        *MemberReference            `json:"dutyManager,omitempty"`
	LdapConfig         *LdapConfigurationReference `json:"ldapConfig,omitempty"`
	AddAllLocations    NullableBool                `json:"addAllLocations,omitempty"`
	RemoveAllLocations NullableBool                `json:"removeAllLocations,omitempty"`
	Info               *map[string]string          `json:"_info,omitempty"`
}

type _DepartmentLocation DepartmentLocation

// NewDepartmentLocation instantiates a new DepartmentLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepartmentLocation(location SystemLocationReference) *DepartmentLocation {
	this := DepartmentLocation{}
	this.Location = location
	return &this
}

// NewDepartmentLocationWithDefaults instantiates a new DepartmentLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepartmentLocationWithDefaults() *DepartmentLocation {
	this := DepartmentLocation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DepartmentLocation) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DepartmentLocation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DepartmentLocation) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value
func (o *DepartmentLocation) GetLocation() SystemLocationReference {
	if o == nil {
		var ret SystemLocationReference
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *DepartmentLocation) SetLocation(v SystemLocationReference) {
	o.Location = v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *DepartmentLocation) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *DepartmentLocation) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *DepartmentLocation) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetDepartmentManager returns the DepartmentManager field value if set, zero value otherwise.
func (o *DepartmentLocation) GetDepartmentManager() MemberReference {
	if o == nil || IsNil(o.DepartmentManager) {
		var ret MemberReference
		return ret
	}
	return *o.DepartmentManager
}

// GetDepartmentManagerOk returns a tuple with the DepartmentManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetDepartmentManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.DepartmentManager) {
		return nil, false
	}
	return o.DepartmentManager, true
}

// HasDepartmentManager returns a boolean if a field has been set.
func (o *DepartmentLocation) HasDepartmentManager() bool {
	if o != nil && !IsNil(o.DepartmentManager) {
		return true
	}

	return false
}

// SetDepartmentManager gets a reference to the given MemberReference and assigns it to the DepartmentManager field.
func (o *DepartmentLocation) SetDepartmentManager(v MemberReference) {
	o.DepartmentManager = &v
}

// GetDispatch returns the Dispatch field value if set, zero value otherwise.
func (o *DepartmentLocation) GetDispatch() MemberReference {
	if o == nil || IsNil(o.Dispatch) {
		var ret MemberReference
		return ret
	}
	return *o.Dispatch
}

// GetDispatchOk returns a tuple with the Dispatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetDispatchOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Dispatch) {
		return nil, false
	}
	return o.Dispatch, true
}

// HasDispatch returns a boolean if a field has been set.
func (o *DepartmentLocation) HasDispatch() bool {
	if o != nil && !IsNil(o.Dispatch) {
		return true
	}

	return false
}

// SetDispatch gets a reference to the given MemberReference and assigns it to the Dispatch field.
func (o *DepartmentLocation) SetDispatch(v MemberReference) {
	o.Dispatch = &v
}

// GetServiceManager returns the ServiceManager field value if set, zero value otherwise.
func (o *DepartmentLocation) GetServiceManager() MemberReference {
	if o == nil || IsNil(o.ServiceManager) {
		var ret MemberReference
		return ret
	}
	return *o.ServiceManager
}

// GetServiceManagerOk returns a tuple with the ServiceManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetServiceManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.ServiceManager) {
		return nil, false
	}
	return o.ServiceManager, true
}

// HasServiceManager returns a boolean if a field has been set.
func (o *DepartmentLocation) HasServiceManager() bool {
	if o != nil && !IsNil(o.ServiceManager) {
		return true
	}

	return false
}

// SetServiceManager gets a reference to the given MemberReference and assigns it to the ServiceManager field.
func (o *DepartmentLocation) SetServiceManager(v MemberReference) {
	o.ServiceManager = &v
}

// GetDutyManager returns the DutyManager field value if set, zero value otherwise.
func (o *DepartmentLocation) GetDutyManager() MemberReference {
	if o == nil || IsNil(o.DutyManager) {
		var ret MemberReference
		return ret
	}
	return *o.DutyManager
}

// GetDutyManagerOk returns a tuple with the DutyManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetDutyManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.DutyManager) {
		return nil, false
	}
	return o.DutyManager, true
}

// HasDutyManager returns a boolean if a field has been set.
func (o *DepartmentLocation) HasDutyManager() bool {
	if o != nil && !IsNil(o.DutyManager) {
		return true
	}

	return false
}

// SetDutyManager gets a reference to the given MemberReference and assigns it to the DutyManager field.
func (o *DepartmentLocation) SetDutyManager(v MemberReference) {
	o.DutyManager = &v
}

// GetLdapConfig returns the LdapConfig field value if set, zero value otherwise.
func (o *DepartmentLocation) GetLdapConfig() LdapConfigurationReference {
	if o == nil || IsNil(o.LdapConfig) {
		var ret LdapConfigurationReference
		return ret
	}
	return *o.LdapConfig
}

// GetLdapConfigOk returns a tuple with the LdapConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetLdapConfigOk() (*LdapConfigurationReference, bool) {
	if o == nil || IsNil(o.LdapConfig) {
		return nil, false
	}
	return o.LdapConfig, true
}

// HasLdapConfig returns a boolean if a field has been set.
func (o *DepartmentLocation) HasLdapConfig() bool {
	if o != nil && !IsNil(o.LdapConfig) {
		return true
	}

	return false
}

// SetLdapConfig gets a reference to the given LdapConfigurationReference and assigns it to the LdapConfig field.
func (o *DepartmentLocation) SetLdapConfig(v LdapConfigurationReference) {
	o.LdapConfig = &v
}

// GetAddAllLocations returns the AddAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepartmentLocation) GetAddAllLocations() bool {
	if o == nil || IsNil(o.AddAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllLocations.Get()
}

// GetAddAllLocationsOk returns a tuple with the AddAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepartmentLocation) GetAddAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllLocations.Get(), o.AddAllLocations.IsSet()
}

// HasAddAllLocations returns a boolean if a field has been set.
func (o *DepartmentLocation) HasAddAllLocations() bool {
	if o != nil && o.AddAllLocations.IsSet() {
		return true
	}

	return false
}

// SetAddAllLocations gets a reference to the given NullableBool and assigns it to the AddAllLocations field.
func (o *DepartmentLocation) SetAddAllLocations(v bool) {
	o.AddAllLocations.Set(&v)
}

// SetAddAllLocationsNil sets the value for AddAllLocations to be an explicit nil
func (o *DepartmentLocation) SetAddAllLocationsNil() {
	o.AddAllLocations.Set(nil)
}

// UnsetAddAllLocations ensures that no value is present for AddAllLocations, not even an explicit nil
func (o *DepartmentLocation) UnsetAddAllLocations() {
	o.AddAllLocations.Unset()
}

// GetRemoveAllLocations returns the RemoveAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DepartmentLocation) GetRemoveAllLocations() bool {
	if o == nil || IsNil(o.RemoveAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllLocations.Get()
}

// GetRemoveAllLocationsOk returns a tuple with the RemoveAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DepartmentLocation) GetRemoveAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllLocations.Get(), o.RemoveAllLocations.IsSet()
}

// HasRemoveAllLocations returns a boolean if a field has been set.
func (o *DepartmentLocation) HasRemoveAllLocations() bool {
	if o != nil && o.RemoveAllLocations.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllLocations gets a reference to the given NullableBool and assigns it to the RemoveAllLocations field.
func (o *DepartmentLocation) SetRemoveAllLocations(v bool) {
	o.RemoveAllLocations.Set(&v)
}

// SetRemoveAllLocationsNil sets the value for RemoveAllLocations to be an explicit nil
func (o *DepartmentLocation) SetRemoveAllLocationsNil() {
	o.RemoveAllLocations.Set(nil)
}

// UnsetRemoveAllLocations ensures that no value is present for RemoveAllLocations, not even an explicit nil
func (o *DepartmentLocation) UnsetRemoveAllLocations() {
	o.RemoveAllLocations.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *DepartmentLocation) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartmentLocation) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *DepartmentLocation) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *DepartmentLocation) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o DepartmentLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepartmentLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["location"] = o.Location
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.DepartmentManager) {
		toSerialize["departmentManager"] = o.DepartmentManager
	}
	if !IsNil(o.Dispatch) {
		toSerialize["dispatch"] = o.Dispatch
	}
	if !IsNil(o.ServiceManager) {
		toSerialize["serviceManager"] = o.ServiceManager
	}
	if !IsNil(o.DutyManager) {
		toSerialize["dutyManager"] = o.DutyManager
	}
	if !IsNil(o.LdapConfig) {
		toSerialize["ldapConfig"] = o.LdapConfig
	}
	if o.AddAllLocations.IsSet() {
		toSerialize["addAllLocations"] = o.AddAllLocations.Get()
	}
	if o.RemoveAllLocations.IsSet() {
		toSerialize["removeAllLocations"] = o.RemoveAllLocations.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *DepartmentLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepartmentLocation := _DepartmentLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepartmentLocation)

	if err != nil {
		return err
	}

	*o = DepartmentLocation(varDepartmentLocation)

	return err
}

type NullableDepartmentLocation struct {
	value *DepartmentLocation
	isSet bool
}

func (v NullableDepartmentLocation) Get() *DepartmentLocation {
	return v.value
}

func (v *NullableDepartmentLocation) Set(val *DepartmentLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableDepartmentLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableDepartmentLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepartmentLocation(val *DepartmentLocation) *NullableDepartmentLocation {
	return &NullableDepartmentLocation{value: val, isSet: true}
}

func (v NullableDepartmentLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepartmentLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
