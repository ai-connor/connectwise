/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the DocumentSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSetup{}

// DocumentSetup struct for DocumentSetup
type DocumentSetup struct {
	Id               *int32       `json:"id,omitempty"`
	UploadAsLinkFlag NullableBool `json:"uploadAsLinkFlag,omitempty"`
	IsPublicFlag     NullableBool `json:"isPublicFlag,omitempty"`
	//  Max length: 100;
	DocPath *string `json:"docPath,omitempty"`
	//  Max length: 200;
	TemplatePath *string `json:"templatePath,omitempty"`
	//  Max length: 200;
	TemplateOutputPath *string            `json:"templateOutputPath,omitempty"`
	Info               *map[string]string `json:"_info,omitempty"`
}

// NewDocumentSetup instantiates a new DocumentSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSetup() *DocumentSetup {
	this := DocumentSetup{}
	return &this
}

// NewDocumentSetupWithDefaults instantiates a new DocumentSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSetupWithDefaults() *DocumentSetup {
	this := DocumentSetup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DocumentSetup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSetup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DocumentSetup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DocumentSetup) SetId(v int32) {
	o.Id = &v
}

// GetUploadAsLinkFlag returns the UploadAsLinkFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentSetup) GetUploadAsLinkFlag() bool {
	if o == nil || IsNil(o.UploadAsLinkFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UploadAsLinkFlag.Get()
}

// GetUploadAsLinkFlagOk returns a tuple with the UploadAsLinkFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentSetup) GetUploadAsLinkFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UploadAsLinkFlag.Get(), o.UploadAsLinkFlag.IsSet()
}

// HasUploadAsLinkFlag returns a boolean if a field has been set.
func (o *DocumentSetup) HasUploadAsLinkFlag() bool {
	if o != nil && o.UploadAsLinkFlag.IsSet() {
		return true
	}

	return false
}

// SetUploadAsLinkFlag gets a reference to the given NullableBool and assigns it to the UploadAsLinkFlag field.
func (o *DocumentSetup) SetUploadAsLinkFlag(v bool) {
	o.UploadAsLinkFlag.Set(&v)
}

// SetUploadAsLinkFlagNil sets the value for UploadAsLinkFlag to be an explicit nil
func (o *DocumentSetup) SetUploadAsLinkFlagNil() {
	o.UploadAsLinkFlag.Set(nil)
}

// UnsetUploadAsLinkFlag ensures that no value is present for UploadAsLinkFlag, not even an explicit nil
func (o *DocumentSetup) UnsetUploadAsLinkFlag() {
	o.UploadAsLinkFlag.Unset()
}

// GetIsPublicFlag returns the IsPublicFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentSetup) GetIsPublicFlag() bool {
	if o == nil || IsNil(o.IsPublicFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPublicFlag.Get()
}

// GetIsPublicFlagOk returns a tuple with the IsPublicFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentSetup) GetIsPublicFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPublicFlag.Get(), o.IsPublicFlag.IsSet()
}

// HasIsPublicFlag returns a boolean if a field has been set.
func (o *DocumentSetup) HasIsPublicFlag() bool {
	if o != nil && o.IsPublicFlag.IsSet() {
		return true
	}

	return false
}

// SetIsPublicFlag gets a reference to the given NullableBool and assigns it to the IsPublicFlag field.
func (o *DocumentSetup) SetIsPublicFlag(v bool) {
	o.IsPublicFlag.Set(&v)
}

// SetIsPublicFlagNil sets the value for IsPublicFlag to be an explicit nil
func (o *DocumentSetup) SetIsPublicFlagNil() {
	o.IsPublicFlag.Set(nil)
}

// UnsetIsPublicFlag ensures that no value is present for IsPublicFlag, not even an explicit nil
func (o *DocumentSetup) UnsetIsPublicFlag() {
	o.IsPublicFlag.Unset()
}

// GetDocPath returns the DocPath field value if set, zero value otherwise.
func (o *DocumentSetup) GetDocPath() string {
	if o == nil || IsNil(o.DocPath) {
		var ret string
		return ret
	}
	return *o.DocPath
}

// GetDocPathOk returns a tuple with the DocPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSetup) GetDocPathOk() (*string, bool) {
	if o == nil || IsNil(o.DocPath) {
		return nil, false
	}
	return o.DocPath, true
}

// HasDocPath returns a boolean if a field has been set.
func (o *DocumentSetup) HasDocPath() bool {
	if o != nil && !IsNil(o.DocPath) {
		return true
	}

	return false
}

// SetDocPath gets a reference to the given string and assigns it to the DocPath field.
func (o *DocumentSetup) SetDocPath(v string) {
	o.DocPath = &v
}

// GetTemplatePath returns the TemplatePath field value if set, zero value otherwise.
func (o *DocumentSetup) GetTemplatePath() string {
	if o == nil || IsNil(o.TemplatePath) {
		var ret string
		return ret
	}
	return *o.TemplatePath
}

// GetTemplatePathOk returns a tuple with the TemplatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSetup) GetTemplatePathOk() (*string, bool) {
	if o == nil || IsNil(o.TemplatePath) {
		return nil, false
	}
	return o.TemplatePath, true
}

// HasTemplatePath returns a boolean if a field has been set.
func (o *DocumentSetup) HasTemplatePath() bool {
	if o != nil && !IsNil(o.TemplatePath) {
		return true
	}

	return false
}

// SetTemplatePath gets a reference to the given string and assigns it to the TemplatePath field.
func (o *DocumentSetup) SetTemplatePath(v string) {
	o.TemplatePath = &v
}

// GetTemplateOutputPath returns the TemplateOutputPath field value if set, zero value otherwise.
func (o *DocumentSetup) GetTemplateOutputPath() string {
	if o == nil || IsNil(o.TemplateOutputPath) {
		var ret string
		return ret
	}
	return *o.TemplateOutputPath
}

// GetTemplateOutputPathOk returns a tuple with the TemplateOutputPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSetup) GetTemplateOutputPathOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateOutputPath) {
		return nil, false
	}
	return o.TemplateOutputPath, true
}

// HasTemplateOutputPath returns a boolean if a field has been set.
func (o *DocumentSetup) HasTemplateOutputPath() bool {
	if o != nil && !IsNil(o.TemplateOutputPath) {
		return true
	}

	return false
}

// SetTemplateOutputPath gets a reference to the given string and assigns it to the TemplateOutputPath field.
func (o *DocumentSetup) SetTemplateOutputPath(v string) {
	o.TemplateOutputPath = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *DocumentSetup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSetup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *DocumentSetup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *DocumentSetup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o DocumentSetup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.UploadAsLinkFlag.IsSet() {
		toSerialize["uploadAsLinkFlag"] = o.UploadAsLinkFlag.Get()
	}
	if o.IsPublicFlag.IsSet() {
		toSerialize["isPublicFlag"] = o.IsPublicFlag.Get()
	}
	if !IsNil(o.DocPath) {
		toSerialize["docPath"] = o.DocPath
	}
	if !IsNil(o.TemplatePath) {
		toSerialize["templatePath"] = o.TemplatePath
	}
	if !IsNil(o.TemplateOutputPath) {
		toSerialize["templateOutputPath"] = o.TemplateOutputPath
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableDocumentSetup struct {
	value *DocumentSetup
	isSet bool
}

func (v NullableDocumentSetup) Get() *DocumentSetup {
	return v.value
}

func (v *NullableDocumentSetup) Set(val *DocumentSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSetup(val *DocumentSetup) *NullableDocumentSetup {
	return &NullableDocumentSetup{value: val, isSet: true}
}

func (v NullableDocumentSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
