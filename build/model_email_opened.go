/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EmailOpened type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailOpened{}

// EmailOpened struct for EmailOpened
type EmailOpened struct {
	Id         *int32        `json:"id,omitempty"`
	CampaignId NullableInt32 `json:"campaignId,omitempty"`
	ContactId  NullableInt32 `json:"contactId"`
	DateOpened *time.Time    `json:"dateOpened,omitempty"`
}

type _EmailOpened EmailOpened

// NewEmailOpened instantiates a new EmailOpened object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailOpened(contactId NullableInt32) *EmailOpened {
	this := EmailOpened{}
	this.ContactId = contactId
	return &this
}

// NewEmailOpenedWithDefaults instantiates a new EmailOpened object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailOpenedWithDefaults() *EmailOpened {
	this := EmailOpened{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailOpened) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailOpened) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailOpened) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EmailOpened) SetId(v int32) {
	o.Id = &v
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailOpened) GetCampaignId() int32 {
	if o == nil || IsNil(o.CampaignId.Get()) {
		var ret int32
		return ret
	}
	return *o.CampaignId.Get()
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailOpened) GetCampaignIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CampaignId.Get(), o.CampaignId.IsSet()
}

// HasCampaignId returns a boolean if a field has been set.
func (o *EmailOpened) HasCampaignId() bool {
	if o != nil && o.CampaignId.IsSet() {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given NullableInt32 and assigns it to the CampaignId field.
func (o *EmailOpened) SetCampaignId(v int32) {
	o.CampaignId.Set(&v)
}

// SetCampaignIdNil sets the value for CampaignId to be an explicit nil
func (o *EmailOpened) SetCampaignIdNil() {
	o.CampaignId.Set(nil)
}

// UnsetCampaignId ensures that no value is present for CampaignId, not even an explicit nil
func (o *EmailOpened) UnsetCampaignId() {
	o.CampaignId.Unset()
}

// GetContactId returns the ContactId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmailOpened) GetContactId() int32 {
	if o == nil || o.ContactId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ContactId.Get()
}

// GetContactIdOk returns a tuple with the ContactId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailOpened) GetContactIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactId.Get(), o.ContactId.IsSet()
}

// SetContactId sets field value
func (o *EmailOpened) SetContactId(v int32) {
	o.ContactId.Set(&v)
}

// GetDateOpened returns the DateOpened field value if set, zero value otherwise.
func (o *EmailOpened) GetDateOpened() time.Time {
	if o == nil || IsNil(o.DateOpened) {
		var ret time.Time
		return ret
	}
	return *o.DateOpened
}

// GetDateOpenedOk returns a tuple with the DateOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailOpened) GetDateOpenedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateOpened) {
		return nil, false
	}
	return o.DateOpened, true
}

// HasDateOpened returns a boolean if a field has been set.
func (o *EmailOpened) HasDateOpened() bool {
	if o != nil && !IsNil(o.DateOpened) {
		return true
	}

	return false
}

// SetDateOpened gets a reference to the given time.Time and assigns it to the DateOpened field.
func (o *EmailOpened) SetDateOpened(v time.Time) {
	o.DateOpened = &v
}

func (o EmailOpened) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailOpened) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.CampaignId.IsSet() {
		toSerialize["campaignId"] = o.CampaignId.Get()
	}
	toSerialize["contactId"] = o.ContactId.Get()
	if !IsNil(o.DateOpened) {
		toSerialize["dateOpened"] = o.DateOpened
	}
	return toSerialize, nil
}

func (o *EmailOpened) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contactId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailOpened := _EmailOpened{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailOpened)

	if err != nil {
		return err
	}

	*o = EmailOpened(varEmailOpened)

	return err
}

type NullableEmailOpened struct {
	value *EmailOpened
	isSet bool
}

func (v NullableEmailOpened) Get() *EmailOpened {
	return v.value
}

func (v *NullableEmailOpened) Set(val *EmailOpened) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailOpened) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailOpened) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailOpened(val *EmailOpened) *NullableEmailOpened {
	return &NullableEmailOpened{value: val, isSet: true}
}

func (v NullableEmailOpened) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailOpened) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
