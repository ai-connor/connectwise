/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FileUploadSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileUploadSetting{}

// FileUploadSetting struct for FileUploadSetting
type FileUploadSetting struct {
	Id                    *int32             `json:"id,omitempty"`
	RestrictFileTypesFlag NullableBool       `json:"restrictFileTypesFlag"`
	GlobalFileSizeLimit   NullableInt32      `json:"globalFileSizeLimit,omitempty"`
	Info                  *map[string]string `json:"_info,omitempty"`
}

type _FileUploadSetting FileUploadSetting

// NewFileUploadSetting instantiates a new FileUploadSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUploadSetting(restrictFileTypesFlag NullableBool) *FileUploadSetting {
	this := FileUploadSetting{}
	this.RestrictFileTypesFlag = restrictFileTypesFlag
	return &this
}

// NewFileUploadSettingWithDefaults instantiates a new FileUploadSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUploadSettingWithDefaults() *FileUploadSetting {
	this := FileUploadSetting{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FileUploadSetting) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadSetting) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FileUploadSetting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FileUploadSetting) SetId(v int32) {
	o.Id = &v
}

// GetRestrictFileTypesFlag returns the RestrictFileTypesFlag field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *FileUploadSetting) GetRestrictFileTypesFlag() bool {
	if o == nil || o.RestrictFileTypesFlag.Get() == nil {
		var ret bool
		return ret
	}

	return *o.RestrictFileTypesFlag.Get()
}

// GetRestrictFileTypesFlagOk returns a tuple with the RestrictFileTypesFlag field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUploadSetting) GetRestrictFileTypesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictFileTypesFlag.Get(), o.RestrictFileTypesFlag.IsSet()
}

// SetRestrictFileTypesFlag sets field value
func (o *FileUploadSetting) SetRestrictFileTypesFlag(v bool) {
	o.RestrictFileTypesFlag.Set(&v)
}

// GetGlobalFileSizeLimit returns the GlobalFileSizeLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUploadSetting) GetGlobalFileSizeLimit() int32 {
	if o == nil || IsNil(o.GlobalFileSizeLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.GlobalFileSizeLimit.Get()
}

// GetGlobalFileSizeLimitOk returns a tuple with the GlobalFileSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUploadSetting) GetGlobalFileSizeLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalFileSizeLimit.Get(), o.GlobalFileSizeLimit.IsSet()
}

// HasGlobalFileSizeLimit returns a boolean if a field has been set.
func (o *FileUploadSetting) HasGlobalFileSizeLimit() bool {
	if o != nil && o.GlobalFileSizeLimit.IsSet() {
		return true
	}

	return false
}

// SetGlobalFileSizeLimit gets a reference to the given NullableInt32 and assigns it to the GlobalFileSizeLimit field.
func (o *FileUploadSetting) SetGlobalFileSizeLimit(v int32) {
	o.GlobalFileSizeLimit.Set(&v)
}

// SetGlobalFileSizeLimitNil sets the value for GlobalFileSizeLimit to be an explicit nil
func (o *FileUploadSetting) SetGlobalFileSizeLimitNil() {
	o.GlobalFileSizeLimit.Set(nil)
}

// UnsetGlobalFileSizeLimit ensures that no value is present for GlobalFileSizeLimit, not even an explicit nil
func (o *FileUploadSetting) UnsetGlobalFileSizeLimit() {
	o.GlobalFileSizeLimit.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *FileUploadSetting) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileUploadSetting) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *FileUploadSetting) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *FileUploadSetting) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o FileUploadSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileUploadSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["restrictFileTypesFlag"] = o.RestrictFileTypesFlag.Get()
	if o.GlobalFileSizeLimit.IsSet() {
		toSerialize["globalFileSizeLimit"] = o.GlobalFileSizeLimit.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *FileUploadSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"restrictFileTypesFlag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileUploadSetting := _FileUploadSetting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileUploadSetting)

	if err != nil {
		return err
	}

	*o = FileUploadSetting(varFileUploadSetting)

	return err
}

type NullableFileUploadSetting struct {
	value *FileUploadSetting
	isSet bool
}

func (v NullableFileUploadSetting) Get() *FileUploadSetting {
	return v.value
}

func (v *NullableFileUploadSetting) Set(val *FileUploadSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUploadSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUploadSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUploadSetting(val *FileUploadSetting) *NullableFileUploadSetting {
	return &NullableFileUploadSetting{value: val, isSet: true}
}

func (v NullableFileUploadSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUploadSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
