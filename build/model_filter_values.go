/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the FilterValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterValues{}

// FilterValues struct for FilterValues
type FilterValues struct {
	Conditions            *string `json:"conditions,omitempty"`
	OrderBy               *string `json:"orderBy,omitempty"`
	Childconditions       *string `json:"childconditions,omitempty"`
	Customfieldconditions *string `json:"customfieldconditions,omitempty"`
}

// NewFilterValues instantiates a new FilterValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterValues() *FilterValues {
	this := FilterValues{}
	return &this
}

// NewFilterValuesWithDefaults instantiates a new FilterValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterValuesWithDefaults() *FilterValues {
	this := FilterValues{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *FilterValues) GetConditions() string {
	if o == nil || IsNil(o.Conditions) {
		var ret string
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterValues) GetConditionsOk() (*string, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *FilterValues) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given string and assigns it to the Conditions field.
func (o *FilterValues) SetConditions(v string) {
	o.Conditions = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *FilterValues) GetOrderBy() string {
	if o == nil || IsNil(o.OrderBy) {
		var ret string
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterValues) GetOrderByOk() (*string, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *FilterValues) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given string and assigns it to the OrderBy field.
func (o *FilterValues) SetOrderBy(v string) {
	o.OrderBy = &v
}

// GetChildconditions returns the Childconditions field value if set, zero value otherwise.
func (o *FilterValues) GetChildconditions() string {
	if o == nil || IsNil(o.Childconditions) {
		var ret string
		return ret
	}
	return *o.Childconditions
}

// GetChildconditionsOk returns a tuple with the Childconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterValues) GetChildconditionsOk() (*string, bool) {
	if o == nil || IsNil(o.Childconditions) {
		return nil, false
	}
	return o.Childconditions, true
}

// HasChildconditions returns a boolean if a field has been set.
func (o *FilterValues) HasChildconditions() bool {
	if o != nil && !IsNil(o.Childconditions) {
		return true
	}

	return false
}

// SetChildconditions gets a reference to the given string and assigns it to the Childconditions field.
func (o *FilterValues) SetChildconditions(v string) {
	o.Childconditions = &v
}

// GetCustomfieldconditions returns the Customfieldconditions field value if set, zero value otherwise.
func (o *FilterValues) GetCustomfieldconditions() string {
	if o == nil || IsNil(o.Customfieldconditions) {
		var ret string
		return ret
	}
	return *o.Customfieldconditions
}

// GetCustomfieldconditionsOk returns a tuple with the Customfieldconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterValues) GetCustomfieldconditionsOk() (*string, bool) {
	if o == nil || IsNil(o.Customfieldconditions) {
		return nil, false
	}
	return o.Customfieldconditions, true
}

// HasCustomfieldconditions returns a boolean if a field has been set.
func (o *FilterValues) HasCustomfieldconditions() bool {
	if o != nil && !IsNil(o.Customfieldconditions) {
		return true
	}

	return false
}

// SetCustomfieldconditions gets a reference to the given string and assigns it to the Customfieldconditions field.
func (o *FilterValues) SetCustomfieldconditions(v string) {
	o.Customfieldconditions = &v
}

func (o FilterValues) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.Childconditions) {
		toSerialize["childconditions"] = o.Childconditions
	}
	if !IsNil(o.Customfieldconditions) {
		toSerialize["customfieldconditions"] = o.Customfieldconditions
	}
	return toSerialize, nil
}

type NullableFilterValues struct {
	value *FilterValues
	isSet bool
}

func (v NullableFilterValues) Get() *FilterValues {
	return v.value
}

func (v *NullableFilterValues) Set(val *FilterValues) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterValues) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterValues(val *FilterValues) *NullableFilterValues {
	return &NullableFilterValues{value: val, isSet: true}
}

func (v NullableFilterValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
