/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ForecastItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForecastItem{}

// ForecastItem struct for ForecastItem
type ForecastItem struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	ForecastDescription *string                    `json:"forecastDescription,omitempty"`
	Opportunity         OpportunityReference       `json:"opportunity"`
	Quantity            *float64                   `json:"quantity,omitempty"`
	Status              OpportunityStatusReference `json:"status"`
	CatalogItem         *IvItemReference           `json:"catalogItem,omitempty"`
	ProductDescription  *string                    `json:"productDescription,omitempty"`
	ProductClass        *string                    `json:"productClass,omitempty"`
	Revenue             *float64                   `json:"revenue,omitempty"`
	Cost                NullableFloat64            `json:"cost,omitempty"`
	Margin              *float64                   `json:"margin,omitempty"`
	Percentage          *int32                     `json:"percentage,omitempty"`
	IncludeFlag         *bool                      `json:"includeFlag,omitempty"`
	//  Max length: 20;
	QuoteWerksDocNo *string `json:"quoteWerksDocNo,omitempty"`
	//  Max length: 255;
	QuoteWerksDocName  *string                `json:"quoteWerksDocName,omitempty"`
	QuoteWerksQuantity *int32                 `json:"quoteWerksQuantity,omitempty"`
	ForecastType       NullableString         `json:"forecastType"`
	LinkFlag           *bool                  `json:"linkFlag,omitempty"`
	RecurringRevenue   *float64               `json:"recurringRevenue,omitempty"`
	RecurringCost      NullableFloat64        `json:"recurringCost,omitempty"`
	RecurringDateStart *time.Time             `json:"recurringDateStart,omitempty"`
	RecurringDateEnd   *time.Time             `json:"recurringDateEnd,omitempty"`
	BillCycle          *BillingCycleReference `json:"billCycle,omitempty"`
	CycleBasis         *string                `json:"cycleBasis,omitempty"`
	Cycles             *int32                 `json:"cycles,omitempty"`
	RecurringFlag      *bool                  `json:"recurringFlag,omitempty"`
	SequenceNumber     *float64               `json:"sequenceNumber,omitempty"`
	SubNumber          *int32                 `json:"subNumber,omitempty"`
	TaxableFlag        *bool                  `json:"taxableFlag,omitempty"`
	Info               *map[string]string     `json:"_info,omitempty"`
}

type _ForecastItem ForecastItem

// NewForecastItem instantiates a new ForecastItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForecastItem(opportunity OpportunityReference, status OpportunityStatusReference, forecastType NullableString) *ForecastItem {
	this := ForecastItem{}
	this.Opportunity = opportunity
	this.Status = status
	this.ForecastType = forecastType
	return &this
}

// NewForecastItemWithDefaults instantiates a new ForecastItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForecastItemWithDefaults() *ForecastItem {
	this := ForecastItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ForecastItem) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ForecastItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ForecastItem) SetId(v int32) {
	o.Id = &v
}

// GetForecastDescription returns the ForecastDescription field value if set, zero value otherwise.
func (o *ForecastItem) GetForecastDescription() string {
	if o == nil || IsNil(o.ForecastDescription) {
		var ret string
		return ret
	}
	return *o.ForecastDescription
}

// GetForecastDescriptionOk returns a tuple with the ForecastDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetForecastDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ForecastDescription) {
		return nil, false
	}
	return o.ForecastDescription, true
}

// HasForecastDescription returns a boolean if a field has been set.
func (o *ForecastItem) HasForecastDescription() bool {
	if o != nil && !IsNil(o.ForecastDescription) {
		return true
	}

	return false
}

// SetForecastDescription gets a reference to the given string and assigns it to the ForecastDescription field.
func (o *ForecastItem) SetForecastDescription(v string) {
	o.ForecastDescription = &v
}

// GetOpportunity returns the Opportunity field value
func (o *ForecastItem) GetOpportunity() OpportunityReference {
	if o == nil {
		var ret OpportunityReference
		return ret
	}

	return o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Opportunity, true
}

// SetOpportunity sets field value
func (o *ForecastItem) SetOpportunity(v OpportunityReference) {
	o.Opportunity = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ForecastItem) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity) {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ForecastItem) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *ForecastItem) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetStatus returns the Status field value
func (o *ForecastItem) GetStatus() OpportunityStatusReference {
	if o == nil {
		var ret OpportunityStatusReference
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetStatusOk() (*OpportunityStatusReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ForecastItem) SetStatus(v OpportunityStatusReference) {
	o.Status = v
}

// GetCatalogItem returns the CatalogItem field value if set, zero value otherwise.
func (o *ForecastItem) GetCatalogItem() IvItemReference {
	if o == nil || IsNil(o.CatalogItem) {
		var ret IvItemReference
		return ret
	}
	return *o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetCatalogItemOk() (*IvItemReference, bool) {
	if o == nil || IsNil(o.CatalogItem) {
		return nil, false
	}
	return o.CatalogItem, true
}

// HasCatalogItem returns a boolean if a field has been set.
func (o *ForecastItem) HasCatalogItem() bool {
	if o != nil && !IsNil(o.CatalogItem) {
		return true
	}

	return false
}

// SetCatalogItem gets a reference to the given IvItemReference and assigns it to the CatalogItem field.
func (o *ForecastItem) SetCatalogItem(v IvItemReference) {
	o.CatalogItem = &v
}

// GetProductDescription returns the ProductDescription field value if set, zero value otherwise.
func (o *ForecastItem) GetProductDescription() string {
	if o == nil || IsNil(o.ProductDescription) {
		var ret string
		return ret
	}
	return *o.ProductDescription
}

// GetProductDescriptionOk returns a tuple with the ProductDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetProductDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ProductDescription) {
		return nil, false
	}
	return o.ProductDescription, true
}

// HasProductDescription returns a boolean if a field has been set.
func (o *ForecastItem) HasProductDescription() bool {
	if o != nil && !IsNil(o.ProductDescription) {
		return true
	}

	return false
}

// SetProductDescription gets a reference to the given string and assigns it to the ProductDescription field.
func (o *ForecastItem) SetProductDescription(v string) {
	o.ProductDescription = &v
}

// GetProductClass returns the ProductClass field value if set, zero value otherwise.
func (o *ForecastItem) GetProductClass() string {
	if o == nil || IsNil(o.ProductClass) {
		var ret string
		return ret
	}
	return *o.ProductClass
}

// GetProductClassOk returns a tuple with the ProductClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetProductClassOk() (*string, bool) {
	if o == nil || IsNil(o.ProductClass) {
		return nil, false
	}
	return o.ProductClass, true
}

// HasProductClass returns a boolean if a field has been set.
func (o *ForecastItem) HasProductClass() bool {
	if o != nil && !IsNil(o.ProductClass) {
		return true
	}

	return false
}

// SetProductClass gets a reference to the given string and assigns it to the ProductClass field.
func (o *ForecastItem) SetProductClass(v string) {
	o.ProductClass = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *ForecastItem) GetRevenue() float64 {
	if o == nil || IsNil(o.Revenue) {
		var ret float64
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetRevenueOk() (*float64, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *ForecastItem) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float64 and assigns it to the Revenue field.
func (o *ForecastItem) SetRevenue(v float64) {
	o.Revenue = &v
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ForecastItem) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ForecastItem) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *ForecastItem) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *ForecastItem) SetCost(v float64) {
	o.Cost.Set(&v)
}

// SetCostNil sets the value for Cost to be an explicit nil
func (o *ForecastItem) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *ForecastItem) UnsetCost() {
	o.Cost.Unset()
}

// GetMargin returns the Margin field value if set, zero value otherwise.
func (o *ForecastItem) GetMargin() float64 {
	if o == nil || IsNil(o.Margin) {
		var ret float64
		return ret
	}
	return *o.Margin
}

// GetMarginOk returns a tuple with the Margin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetMarginOk() (*float64, bool) {
	if o == nil || IsNil(o.Margin) {
		return nil, false
	}
	return o.Margin, true
}

// HasMargin returns a boolean if a field has been set.
func (o *ForecastItem) HasMargin() bool {
	if o != nil && !IsNil(o.Margin) {
		return true
	}

	return false
}

// SetMargin gets a reference to the given float64 and assigns it to the Margin field.
func (o *ForecastItem) SetMargin(v float64) {
	o.Margin = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *ForecastItem) GetPercentage() int32 {
	if o == nil || IsNil(o.Percentage) {
		var ret int32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *ForecastItem) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given int32 and assigns it to the Percentage field.
func (o *ForecastItem) SetPercentage(v int32) {
	o.Percentage = &v
}

// GetIncludeFlag returns the IncludeFlag field value if set, zero value otherwise.
func (o *ForecastItem) GetIncludeFlag() bool {
	if o == nil || IsNil(o.IncludeFlag) {
		var ret bool
		return ret
	}
	return *o.IncludeFlag
}

// GetIncludeFlagOk returns a tuple with the IncludeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetIncludeFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeFlag) {
		return nil, false
	}
	return o.IncludeFlag, true
}

// HasIncludeFlag returns a boolean if a field has been set.
func (o *ForecastItem) HasIncludeFlag() bool {
	if o != nil && !IsNil(o.IncludeFlag) {
		return true
	}

	return false
}

// SetIncludeFlag gets a reference to the given bool and assigns it to the IncludeFlag field.
func (o *ForecastItem) SetIncludeFlag(v bool) {
	o.IncludeFlag = &v
}

// GetQuoteWerksDocNo returns the QuoteWerksDocNo field value if set, zero value otherwise.
func (o *ForecastItem) GetQuoteWerksDocNo() string {
	if o == nil || IsNil(o.QuoteWerksDocNo) {
		var ret string
		return ret
	}
	return *o.QuoteWerksDocNo
}

// GetQuoteWerksDocNoOk returns a tuple with the QuoteWerksDocNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetQuoteWerksDocNoOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteWerksDocNo) {
		return nil, false
	}
	return o.QuoteWerksDocNo, true
}

// HasQuoteWerksDocNo returns a boolean if a field has been set.
func (o *ForecastItem) HasQuoteWerksDocNo() bool {
	if o != nil && !IsNil(o.QuoteWerksDocNo) {
		return true
	}

	return false
}

// SetQuoteWerksDocNo gets a reference to the given string and assigns it to the QuoteWerksDocNo field.
func (o *ForecastItem) SetQuoteWerksDocNo(v string) {
	o.QuoteWerksDocNo = &v
}

// GetQuoteWerksDocName returns the QuoteWerksDocName field value if set, zero value otherwise.
func (o *ForecastItem) GetQuoteWerksDocName() string {
	if o == nil || IsNil(o.QuoteWerksDocName) {
		var ret string
		return ret
	}
	return *o.QuoteWerksDocName
}

// GetQuoteWerksDocNameOk returns a tuple with the QuoteWerksDocName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetQuoteWerksDocNameOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteWerksDocName) {
		return nil, false
	}
	return o.QuoteWerksDocName, true
}

// HasQuoteWerksDocName returns a boolean if a field has been set.
func (o *ForecastItem) HasQuoteWerksDocName() bool {
	if o != nil && !IsNil(o.QuoteWerksDocName) {
		return true
	}

	return false
}

// SetQuoteWerksDocName gets a reference to the given string and assigns it to the QuoteWerksDocName field.
func (o *ForecastItem) SetQuoteWerksDocName(v string) {
	o.QuoteWerksDocName = &v
}

// GetQuoteWerksQuantity returns the QuoteWerksQuantity field value if set, zero value otherwise.
func (o *ForecastItem) GetQuoteWerksQuantity() int32 {
	if o == nil || IsNil(o.QuoteWerksQuantity) {
		var ret int32
		return ret
	}
	return *o.QuoteWerksQuantity
}

// GetQuoteWerksQuantityOk returns a tuple with the QuoteWerksQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetQuoteWerksQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.QuoteWerksQuantity) {
		return nil, false
	}
	return o.QuoteWerksQuantity, true
}

// HasQuoteWerksQuantity returns a boolean if a field has been set.
func (o *ForecastItem) HasQuoteWerksQuantity() bool {
	if o != nil && !IsNil(o.QuoteWerksQuantity) {
		return true
	}

	return false
}

// SetQuoteWerksQuantity gets a reference to the given int32 and assigns it to the QuoteWerksQuantity field.
func (o *ForecastItem) SetQuoteWerksQuantity(v int32) {
	o.QuoteWerksQuantity = &v
}

// GetForecastType returns the ForecastType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ForecastItem) GetForecastType() string {
	if o == nil || o.ForecastType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ForecastType.Get()
}

// GetForecastTypeOk returns a tuple with the ForecastType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ForecastItem) GetForecastTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForecastType.Get(), o.ForecastType.IsSet()
}

// SetForecastType sets field value
func (o *ForecastItem) SetForecastType(v string) {
	o.ForecastType.Set(&v)
}

// GetLinkFlag returns the LinkFlag field value if set, zero value otherwise.
func (o *ForecastItem) GetLinkFlag() bool {
	if o == nil || IsNil(o.LinkFlag) {
		var ret bool
		return ret
	}
	return *o.LinkFlag
}

// GetLinkFlagOk returns a tuple with the LinkFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetLinkFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkFlag) {
		return nil, false
	}
	return o.LinkFlag, true
}

// HasLinkFlag returns a boolean if a field has been set.
func (o *ForecastItem) HasLinkFlag() bool {
	if o != nil && !IsNil(o.LinkFlag) {
		return true
	}

	return false
}

// SetLinkFlag gets a reference to the given bool and assigns it to the LinkFlag field.
func (o *ForecastItem) SetLinkFlag(v bool) {
	o.LinkFlag = &v
}

// GetRecurringRevenue returns the RecurringRevenue field value if set, zero value otherwise.
func (o *ForecastItem) GetRecurringRevenue() float64 {
	if o == nil || IsNil(o.RecurringRevenue) {
		var ret float64
		return ret
	}
	return *o.RecurringRevenue
}

// GetRecurringRevenueOk returns a tuple with the RecurringRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetRecurringRevenueOk() (*float64, bool) {
	if o == nil || IsNil(o.RecurringRevenue) {
		return nil, false
	}
	return o.RecurringRevenue, true
}

// HasRecurringRevenue returns a boolean if a field has been set.
func (o *ForecastItem) HasRecurringRevenue() bool {
	if o != nil && !IsNil(o.RecurringRevenue) {
		return true
	}

	return false
}

// SetRecurringRevenue gets a reference to the given float64 and assigns it to the RecurringRevenue field.
func (o *ForecastItem) SetRecurringRevenue(v float64) {
	o.RecurringRevenue = &v
}

// GetRecurringCost returns the RecurringCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ForecastItem) GetRecurringCost() float64 {
	if o == nil || IsNil(o.RecurringCost.Get()) {
		var ret float64
		return ret
	}
	return *o.RecurringCost.Get()
}

// GetRecurringCostOk returns a tuple with the RecurringCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ForecastItem) GetRecurringCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringCost.Get(), o.RecurringCost.IsSet()
}

// HasRecurringCost returns a boolean if a field has been set.
func (o *ForecastItem) HasRecurringCost() bool {
	if o != nil && o.RecurringCost.IsSet() {
		return true
	}

	return false
}

// SetRecurringCost gets a reference to the given NullableFloat64 and assigns it to the RecurringCost field.
func (o *ForecastItem) SetRecurringCost(v float64) {
	o.RecurringCost.Set(&v)
}

// SetRecurringCostNil sets the value for RecurringCost to be an explicit nil
func (o *ForecastItem) SetRecurringCostNil() {
	o.RecurringCost.Set(nil)
}

// UnsetRecurringCost ensures that no value is present for RecurringCost, not even an explicit nil
func (o *ForecastItem) UnsetRecurringCost() {
	o.RecurringCost.Unset()
}

// GetRecurringDateStart returns the RecurringDateStart field value if set, zero value otherwise.
func (o *ForecastItem) GetRecurringDateStart() time.Time {
	if o == nil || IsNil(o.RecurringDateStart) {
		var ret time.Time
		return ret
	}
	return *o.RecurringDateStart
}

// GetRecurringDateStartOk returns a tuple with the RecurringDateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetRecurringDateStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecurringDateStart) {
		return nil, false
	}
	return o.RecurringDateStart, true
}

// HasRecurringDateStart returns a boolean if a field has been set.
func (o *ForecastItem) HasRecurringDateStart() bool {
	if o != nil && !IsNil(o.RecurringDateStart) {
		return true
	}

	return false
}

// SetRecurringDateStart gets a reference to the given time.Time and assigns it to the RecurringDateStart field.
func (o *ForecastItem) SetRecurringDateStart(v time.Time) {
	o.RecurringDateStart = &v
}

// GetRecurringDateEnd returns the RecurringDateEnd field value if set, zero value otherwise.
func (o *ForecastItem) GetRecurringDateEnd() time.Time {
	if o == nil || IsNil(o.RecurringDateEnd) {
		var ret time.Time
		return ret
	}
	return *o.RecurringDateEnd
}

// GetRecurringDateEndOk returns a tuple with the RecurringDateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetRecurringDateEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecurringDateEnd) {
		return nil, false
	}
	return o.RecurringDateEnd, true
}

// HasRecurringDateEnd returns a boolean if a field has been set.
func (o *ForecastItem) HasRecurringDateEnd() bool {
	if o != nil && !IsNil(o.RecurringDateEnd) {
		return true
	}

	return false
}

// SetRecurringDateEnd gets a reference to the given time.Time and assigns it to the RecurringDateEnd field.
func (o *ForecastItem) SetRecurringDateEnd(v time.Time) {
	o.RecurringDateEnd = &v
}

// GetBillCycle returns the BillCycle field value if set, zero value otherwise.
func (o *ForecastItem) GetBillCycle() BillingCycleReference {
	if o == nil || IsNil(o.BillCycle) {
		var ret BillingCycleReference
		return ret
	}
	return *o.BillCycle
}

// GetBillCycleOk returns a tuple with the BillCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetBillCycleOk() (*BillingCycleReference, bool) {
	if o == nil || IsNil(o.BillCycle) {
		return nil, false
	}
	return o.BillCycle, true
}

// HasBillCycle returns a boolean if a field has been set.
func (o *ForecastItem) HasBillCycle() bool {
	if o != nil && !IsNil(o.BillCycle) {
		return true
	}

	return false
}

// SetBillCycle gets a reference to the given BillingCycleReference and assigns it to the BillCycle field.
func (o *ForecastItem) SetBillCycle(v BillingCycleReference) {
	o.BillCycle = &v
}

// GetCycleBasis returns the CycleBasis field value if set, zero value otherwise.
func (o *ForecastItem) GetCycleBasis() string {
	if o == nil || IsNil(o.CycleBasis) {
		var ret string
		return ret
	}
	return *o.CycleBasis
}

// GetCycleBasisOk returns a tuple with the CycleBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetCycleBasisOk() (*string, bool) {
	if o == nil || IsNil(o.CycleBasis) {
		return nil, false
	}
	return o.CycleBasis, true
}

// HasCycleBasis returns a boolean if a field has been set.
func (o *ForecastItem) HasCycleBasis() bool {
	if o != nil && !IsNil(o.CycleBasis) {
		return true
	}

	return false
}

// SetCycleBasis gets a reference to the given string and assigns it to the CycleBasis field.
func (o *ForecastItem) SetCycleBasis(v string) {
	o.CycleBasis = &v
}

// GetCycles returns the Cycles field value if set, zero value otherwise.
func (o *ForecastItem) GetCycles() int32 {
	if o == nil || IsNil(o.Cycles) {
		var ret int32
		return ret
	}
	return *o.Cycles
}

// GetCyclesOk returns a tuple with the Cycles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetCyclesOk() (*int32, bool) {
	if o == nil || IsNil(o.Cycles) {
		return nil, false
	}
	return o.Cycles, true
}

// HasCycles returns a boolean if a field has been set.
func (o *ForecastItem) HasCycles() bool {
	if o != nil && !IsNil(o.Cycles) {
		return true
	}

	return false
}

// SetCycles gets a reference to the given int32 and assigns it to the Cycles field.
func (o *ForecastItem) SetCycles(v int32) {
	o.Cycles = &v
}

// GetRecurringFlag returns the RecurringFlag field value if set, zero value otherwise.
func (o *ForecastItem) GetRecurringFlag() bool {
	if o == nil || IsNil(o.RecurringFlag) {
		var ret bool
		return ret
	}
	return *o.RecurringFlag
}

// GetRecurringFlagOk returns a tuple with the RecurringFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetRecurringFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.RecurringFlag) {
		return nil, false
	}
	return o.RecurringFlag, true
}

// HasRecurringFlag returns a boolean if a field has been set.
func (o *ForecastItem) HasRecurringFlag() bool {
	if o != nil && !IsNil(o.RecurringFlag) {
		return true
	}

	return false
}

// SetRecurringFlag gets a reference to the given bool and assigns it to the RecurringFlag field.
func (o *ForecastItem) SetRecurringFlag(v bool) {
	o.RecurringFlag = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *ForecastItem) GetSequenceNumber() float64 {
	if o == nil || IsNil(o.SequenceNumber) {
		var ret float64
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetSequenceNumberOk() (*float64, bool) {
	if o == nil || IsNil(o.SequenceNumber) {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ForecastItem) HasSequenceNumber() bool {
	if o != nil && !IsNil(o.SequenceNumber) {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given float64 and assigns it to the SequenceNumber field.
func (o *ForecastItem) SetSequenceNumber(v float64) {
	o.SequenceNumber = &v
}

// GetSubNumber returns the SubNumber field value if set, zero value otherwise.
func (o *ForecastItem) GetSubNumber() int32 {
	if o == nil || IsNil(o.SubNumber) {
		var ret int32
		return ret
	}
	return *o.SubNumber
}

// GetSubNumberOk returns a tuple with the SubNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetSubNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.SubNumber) {
		return nil, false
	}
	return o.SubNumber, true
}

// HasSubNumber returns a boolean if a field has been set.
func (o *ForecastItem) HasSubNumber() bool {
	if o != nil && !IsNil(o.SubNumber) {
		return true
	}

	return false
}

// SetSubNumber gets a reference to the given int32 and assigns it to the SubNumber field.
func (o *ForecastItem) SetSubNumber(v int32) {
	o.SubNumber = &v
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise.
func (o *ForecastItem) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetTaxableFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.TaxableFlag) {
		return nil, false
	}
	return o.TaxableFlag, true
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *ForecastItem) HasTaxableFlag() bool {
	if o != nil && !IsNil(o.TaxableFlag) {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given bool and assigns it to the TaxableFlag field.
func (o *ForecastItem) SetTaxableFlag(v bool) {
	o.TaxableFlag = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ForecastItem) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastItem) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ForecastItem) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ForecastItem) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ForecastItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForecastItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ForecastDescription) {
		toSerialize["forecastDescription"] = o.ForecastDescription
	}
	toSerialize["opportunity"] = o.Opportunity
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.CatalogItem) {
		toSerialize["catalogItem"] = o.CatalogItem
	}
	if !IsNil(o.ProductDescription) {
		toSerialize["productDescription"] = o.ProductDescription
	}
	if !IsNil(o.ProductClass) {
		toSerialize["productClass"] = o.ProductClass
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if !IsNil(o.Margin) {
		toSerialize["margin"] = o.Margin
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.IncludeFlag) {
		toSerialize["includeFlag"] = o.IncludeFlag
	}
	if !IsNil(o.QuoteWerksDocNo) {
		toSerialize["quoteWerksDocNo"] = o.QuoteWerksDocNo
	}
	if !IsNil(o.QuoteWerksDocName) {
		toSerialize["quoteWerksDocName"] = o.QuoteWerksDocName
	}
	if !IsNil(o.QuoteWerksQuantity) {
		toSerialize["quoteWerksQuantity"] = o.QuoteWerksQuantity
	}
	toSerialize["forecastType"] = o.ForecastType.Get()
	if !IsNil(o.LinkFlag) {
		toSerialize["linkFlag"] = o.LinkFlag
	}
	if !IsNil(o.RecurringRevenue) {
		toSerialize["recurringRevenue"] = o.RecurringRevenue
	}
	if o.RecurringCost.IsSet() {
		toSerialize["recurringCost"] = o.RecurringCost.Get()
	}
	if !IsNil(o.RecurringDateStart) {
		toSerialize["recurringDateStart"] = o.RecurringDateStart
	}
	if !IsNil(o.RecurringDateEnd) {
		toSerialize["recurringDateEnd"] = o.RecurringDateEnd
	}
	if !IsNil(o.BillCycle) {
		toSerialize["billCycle"] = o.BillCycle
	}
	if !IsNil(o.CycleBasis) {
		toSerialize["cycleBasis"] = o.CycleBasis
	}
	if !IsNil(o.Cycles) {
		toSerialize["cycles"] = o.Cycles
	}
	if !IsNil(o.RecurringFlag) {
		toSerialize["recurringFlag"] = o.RecurringFlag
	}
	if !IsNil(o.SequenceNumber) {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if !IsNil(o.SubNumber) {
		toSerialize["subNumber"] = o.SubNumber
	}
	if !IsNil(o.TaxableFlag) {
		toSerialize["taxableFlag"] = o.TaxableFlag
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ForecastItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"opportunity",
		"status",
		"forecastType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForecastItem := _ForecastItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varForecastItem)

	if err != nil {
		return err
	}

	*o = ForecastItem(varForecastItem)

	return err
}

type NullableForecastItem struct {
	value *ForecastItem
	isSet bool
}

func (v NullableForecastItem) Get() *ForecastItem {
	return v.value
}

func (v *NullableForecastItem) Set(val *ForecastItem) {
	v.value = val
	v.isSet = true
}

func (v NullableForecastItem) IsSet() bool {
	return v.isSet
}

func (v *NullableForecastItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForecastItem(val *ForecastItem) *NullableForecastItem {
	return &NullableForecastItem{value: val, isSet: true}
}

func (v NullableForecastItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForecastItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
