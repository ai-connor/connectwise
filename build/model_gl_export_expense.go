/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportExpense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportExpense{}

// GLExportExpense struct for GLExportExpense
type GLExportExpense struct {
	Id                   *int32                 `json:"id,omitempty"`
	DocumentDate         *string                `json:"documentDate,omitempty"`
	DocumentType         *string                `json:"documentType,omitempty"`
	ApAccountNumber      *string                `json:"apAccountNumber,omitempty"`
	ApClass              *string                `json:"apClass,omitempty"`
	AccountNumber        *string                `json:"accountNumber,omitempty"`
	GlClass              *string                `json:"glClass,omitempty"`
	GlTypeId             *string                `json:"glTypeId,omitempty"`
	Memo                 *string                `json:"memo,omitempty"`
	Description          *string                `json:"description,omitempty"`
	PeriodStartDate      *string                `json:"periodStartDate,omitempty"`
	PeriodEndDate        *string                `json:"periodEndDate,omitempty"`
	Member               *MemberReference       `json:"member,omitempty"`
	VendorNumber         *string                `json:"vendorNumber,omitempty"`
	Company              *CompanyReference      `json:"company,omitempty"`
	CompanyAccountNumber *string                `json:"companyAccountNumber,omitempty"`
	Project              *ProjectReference      `json:"project,omitempty"`
	Currency             *CurrencyReference     `json:"currency,omitempty"`
	Total                NullableFloat64        `json:"total,omitempty"`
	Offset               *GLExportExpenseOffset `json:"offset,omitempty"`
}

// NewGLExportExpense instantiates a new GLExportExpense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportExpense() *GLExportExpense {
	this := GLExportExpense{}
	return &this
}

// NewGLExportExpenseWithDefaults instantiates a new GLExportExpense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportExpenseWithDefaults() *GLExportExpense {
	this := GLExportExpense{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GLExportExpense) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GLExportExpense) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GLExportExpense) SetId(v int32) {
	o.Id = &v
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportExpense) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportExpense) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportExpense) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *GLExportExpense) GetDocumentType() string {
	if o == nil || IsNil(o.DocumentType) {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetDocumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *GLExportExpense) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *GLExportExpense) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetApAccountNumber returns the ApAccountNumber field value if set, zero value otherwise.
func (o *GLExportExpense) GetApAccountNumber() string {
	if o == nil || IsNil(o.ApAccountNumber) {
		var ret string
		return ret
	}
	return *o.ApAccountNumber
}

// GetApAccountNumberOk returns a tuple with the ApAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetApAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ApAccountNumber) {
		return nil, false
	}
	return o.ApAccountNumber, true
}

// HasApAccountNumber returns a boolean if a field has been set.
func (o *GLExportExpense) HasApAccountNumber() bool {
	if o != nil && !IsNil(o.ApAccountNumber) {
		return true
	}

	return false
}

// SetApAccountNumber gets a reference to the given string and assigns it to the ApAccountNumber field.
func (o *GLExportExpense) SetApAccountNumber(v string) {
	o.ApAccountNumber = &v
}

// GetApClass returns the ApClass field value if set, zero value otherwise.
func (o *GLExportExpense) GetApClass() string {
	if o == nil || IsNil(o.ApClass) {
		var ret string
		return ret
	}
	return *o.ApClass
}

// GetApClassOk returns a tuple with the ApClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetApClassOk() (*string, bool) {
	if o == nil || IsNil(o.ApClass) {
		return nil, false
	}
	return o.ApClass, true
}

// HasApClass returns a boolean if a field has been set.
func (o *GLExportExpense) HasApClass() bool {
	if o != nil && !IsNil(o.ApClass) {
		return true
	}

	return false
}

// SetApClass gets a reference to the given string and assigns it to the ApClass field.
func (o *GLExportExpense) SetApClass(v string) {
	o.ApClass = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportExpense) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportExpense) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportExpense) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetGlClass returns the GlClass field value if set, zero value otherwise.
func (o *GLExportExpense) GetGlClass() string {
	if o == nil || IsNil(o.GlClass) {
		var ret string
		return ret
	}
	return *o.GlClass
}

// GetGlClassOk returns a tuple with the GlClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetGlClassOk() (*string, bool) {
	if o == nil || IsNil(o.GlClass) {
		return nil, false
	}
	return o.GlClass, true
}

// HasGlClass returns a boolean if a field has been set.
func (o *GLExportExpense) HasGlClass() bool {
	if o != nil && !IsNil(o.GlClass) {
		return true
	}

	return false
}

// SetGlClass gets a reference to the given string and assigns it to the GlClass field.
func (o *GLExportExpense) SetGlClass(v string) {
	o.GlClass = &v
}

// GetGlTypeId returns the GlTypeId field value if set, zero value otherwise.
func (o *GLExportExpense) GetGlTypeId() string {
	if o == nil || IsNil(o.GlTypeId) {
		var ret string
		return ret
	}
	return *o.GlTypeId
}

// GetGlTypeIdOk returns a tuple with the GlTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetGlTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlTypeId) {
		return nil, false
	}
	return o.GlTypeId, true
}

// HasGlTypeId returns a boolean if a field has been set.
func (o *GLExportExpense) HasGlTypeId() bool {
	if o != nil && !IsNil(o.GlTypeId) {
		return true
	}

	return false
}

// SetGlTypeId gets a reference to the given string and assigns it to the GlTypeId field.
func (o *GLExportExpense) SetGlTypeId(v string) {
	o.GlTypeId = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportExpense) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportExpense) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportExpense) SetMemo(v string) {
	o.Memo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GLExportExpense) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GLExportExpense) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GLExportExpense) SetDescription(v string) {
	o.Description = &v
}

// GetPeriodStartDate returns the PeriodStartDate field value if set, zero value otherwise.
func (o *GLExportExpense) GetPeriodStartDate() string {
	if o == nil || IsNil(o.PeriodStartDate) {
		var ret string
		return ret
	}
	return *o.PeriodStartDate
}

// GetPeriodStartDateOk returns a tuple with the PeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetPeriodStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodStartDate) {
		return nil, false
	}
	return o.PeriodStartDate, true
}

// HasPeriodStartDate returns a boolean if a field has been set.
func (o *GLExportExpense) HasPeriodStartDate() bool {
	if o != nil && !IsNil(o.PeriodStartDate) {
		return true
	}

	return false
}

// SetPeriodStartDate gets a reference to the given string and assigns it to the PeriodStartDate field.
func (o *GLExportExpense) SetPeriodStartDate(v string) {
	o.PeriodStartDate = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *GLExportExpense) GetPeriodEndDate() string {
	if o == nil || IsNil(o.PeriodEndDate) {
		var ret string
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetPeriodEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodEndDate) {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *GLExportExpense) HasPeriodEndDate() bool {
	if o != nil && !IsNil(o.PeriodEndDate) {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given string and assigns it to the PeriodEndDate field.
func (o *GLExportExpense) SetPeriodEndDate(v string) {
	o.PeriodEndDate = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *GLExportExpense) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *GLExportExpense) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *GLExportExpense) SetMember(v MemberReference) {
	o.Member = &v
}

// GetVendorNumber returns the VendorNumber field value if set, zero value otherwise.
func (o *GLExportExpense) GetVendorNumber() string {
	if o == nil || IsNil(o.VendorNumber) {
		var ret string
		return ret
	}
	return *o.VendorNumber
}

// GetVendorNumberOk returns a tuple with the VendorNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetVendorNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorNumber) {
		return nil, false
	}
	return o.VendorNumber, true
}

// HasVendorNumber returns a boolean if a field has been set.
func (o *GLExportExpense) HasVendorNumber() bool {
	if o != nil && !IsNil(o.VendorNumber) {
		return true
	}

	return false
}

// SetVendorNumber gets a reference to the given string and assigns it to the VendorNumber field.
func (o *GLExportExpense) SetVendorNumber(v string) {
	o.VendorNumber = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GLExportExpense) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GLExportExpense) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *GLExportExpense) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetCompanyAccountNumber returns the CompanyAccountNumber field value if set, zero value otherwise.
func (o *GLExportExpense) GetCompanyAccountNumber() string {
	if o == nil || IsNil(o.CompanyAccountNumber) {
		var ret string
		return ret
	}
	return *o.CompanyAccountNumber
}

// GetCompanyAccountNumberOk returns a tuple with the CompanyAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetCompanyAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyAccountNumber) {
		return nil, false
	}
	return o.CompanyAccountNumber, true
}

// HasCompanyAccountNumber returns a boolean if a field has been set.
func (o *GLExportExpense) HasCompanyAccountNumber() bool {
	if o != nil && !IsNil(o.CompanyAccountNumber) {
		return true
	}

	return false
}

// SetCompanyAccountNumber gets a reference to the given string and assigns it to the CompanyAccountNumber field.
func (o *GLExportExpense) SetCompanyAccountNumber(v string) {
	o.CompanyAccountNumber = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *GLExportExpense) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *GLExportExpense) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *GLExportExpense) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportExpense) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportExpense) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportExpense) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportExpense) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportExpense) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportExpense) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportExpense) SetTotal(v float64) {
	o.Total.Set(&v)
}

// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportExpense) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportExpense) UnsetTotal() {
	o.Total.Unset()
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *GLExportExpense) GetOffset() GLExportExpenseOffset {
	if o == nil || IsNil(o.Offset) {
		var ret GLExportExpenseOffset
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpense) GetOffsetOk() (*GLExportExpenseOffset, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *GLExportExpense) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given GLExportExpenseOffset and assigns it to the Offset field.
func (o *GLExportExpense) SetOffset(v GLExportExpenseOffset) {
	o.Offset = &v
}

func (o GLExportExpense) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportExpense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.DocumentType) {
		toSerialize["documentType"] = o.DocumentType
	}
	if !IsNil(o.ApAccountNumber) {
		toSerialize["apAccountNumber"] = o.ApAccountNumber
	}
	if !IsNil(o.ApClass) {
		toSerialize["apClass"] = o.ApClass
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.GlClass) {
		toSerialize["glClass"] = o.GlClass
	}
	if !IsNil(o.GlTypeId) {
		toSerialize["glTypeId"] = o.GlTypeId
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PeriodStartDate) {
		toSerialize["periodStartDate"] = o.PeriodStartDate
	}
	if !IsNil(o.PeriodEndDate) {
		toSerialize["periodEndDate"] = o.PeriodEndDate
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.VendorNumber) {
		toSerialize["vendorNumber"] = o.VendorNumber
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CompanyAccountNumber) {
		toSerialize["companyAccountNumber"] = o.CompanyAccountNumber
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableGLExportExpense struct {
	value *GLExportExpense
	isSet bool
}

func (v NullableGLExportExpense) Get() *GLExportExpense {
	return v.value
}

func (v *NullableGLExportExpense) Set(val *GLExportExpense) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportExpense) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportExpense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportExpense(val *GLExportExpense) *NullableGLExportExpense {
	return &NullableGLExportExpense{value: val, isSet: true}
}

func (v NullableGLExportExpense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportExpense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
