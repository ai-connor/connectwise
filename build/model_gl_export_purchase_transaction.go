/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportPurchaseTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportPurchaseTransaction{}

// GLExportPurchaseTransaction struct for GLExportPurchaseTransaction
type GLExportPurchaseTransaction struct {
	Id                               *string                                `json:"id,omitempty"`
	DocumentDate                     *string                                `json:"documentDate,omitempty"`
	DocumentNumber                   *string                                `json:"documentNumber,omitempty"`
	Description                      *string                                `json:"description,omitempty"`
	Memo                             *string                                `json:"memo,omitempty"`
	ApAccountNumber                  *string                                `json:"apAccountNumber,omitempty"`
	PurchaseDate                     *string                                `json:"purchaseDate,omitempty"`
	Company                          *CompanyReference                      `json:"company,omitempty"`
	CompanyType                      *CompanyTypeReference                  `json:"companyType,omitempty"`
	Contact                          *ContactReference                      `json:"contact,omitempty"`
	Site                             *SiteReference                         `json:"site,omitempty"`
	PurchaseClass                    *string                                `json:"purchaseClass,omitempty"`
	FreightAmount                    NullableFloat64                        `json:"freightAmount,omitempty"`
	FreightPackingSlip               *string                                `json:"freightPackingSlip,omitempty"`
	PackingSlip                      *string                                `json:"packingSlip,omitempty"`
	DropshipFlag                     NullableBool                           `json:"dropshipFlag,omitempty"`
	Currency                         *CurrencyReference                     `json:"currency,omitempty"`
	Total                            NullableFloat64                        `json:"total,omitempty"`
	BillingTerms                     *BillingTermsReference                 `json:"billingTerms,omitempty"`
	BillingTermsXref                 *string                                `json:"billingTermsXref,omitempty"`
	DueDays                          NullableInt32                          `json:"dueDays,omitempty"`
	VendorNumber                     *string                                `json:"vendorNumber,omitempty"`
	VendorAccountNumber              *string                                `json:"vendorAccountNumber,omitempty"`
	VendorInvoiceDate                *string                                `json:"vendorInvoiceDate,omitempty"`
	VendorInvoiceNumber              *string                                `json:"vendorInvoiceNumber,omitempty"`
	TaxAgencyXref                    *string                                `json:"taxAgencyXref,omitempty"`
	StateTaxXref                     *string                                `json:"stateTaxXref,omitempty"`
	CountyTaxXref                    *string                                `json:"countyTaxXref,omitempty"`
	CityTaxXref                      *string                                `json:"cityTaxXref,omitempty"`
	ShipToCompany                    *CompanyReference                      `json:"shipToCompany,omitempty"`
	ShipToCompanyAccountNumber       *string                                `json:"shipToCompanyAccountNumber,omitempty"`
	ShipToCompanyType                *CompanyTypeReference                  `json:"shipToCompanyType,omitempty"`
	ShipToContact                    *ContactReference                      `json:"shipToContact,omitempty"`
	ShipToSite                       *SiteReference                         `json:"shipToSite,omitempty"`
	ShipToTaxGroup                   *string                                `json:"shipToTaxGroup,omitempty"`
	TaxCode                          *TaxCodeReference                      `json:"taxCode,omitempty"`
	TaxGroupRate                     NullableFloat64                        `json:"taxGroupRate,omitempty"`
	UseAvalaraTaxFlag                NullableBool                           `json:"useAvalaraTaxFlag,omitempty"`
	PurchaseHeaderTaxGroup           *string                                `json:"purchaseHeaderTaxGroup,omitempty"`
	PurchaseHeaderTaxableFlag        NullableBool                           `json:"purchaseHeaderTaxableFlag,omitempty"`
	PurchaseHeaderFreightTaxableFlag NullableBool                           `json:"purchaseHeaderFreightTaxableFlag,omitempty"`
	TaxLevels                        []GLExportPurchaseTransactionTaxLevel  `json:"taxLevels,omitempty"`
	PurchaseDetail                   []GLExportPurchaseTransactionDetail    `json:"purchaseDetail,omitempty"`
	PurchaseDetailTax                []GLExportPurchaseTransactionDetailTax `json:"purchaseDetailTax,omitempty"`
}

// NewGLExportPurchaseTransaction instantiates a new GLExportPurchaseTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportPurchaseTransaction() *GLExportPurchaseTransaction {
	this := GLExportPurchaseTransaction{}
	return &this
}

// NewGLExportPurchaseTransactionWithDefaults instantiates a new GLExportPurchaseTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportPurchaseTransactionWithDefaults() *GLExportPurchaseTransaction {
	this := GLExportPurchaseTransaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GLExportPurchaseTransaction) SetId(v string) {
	o.Id = &v
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportPurchaseTransaction) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetDocumentNumber returns the DocumentNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetDocumentNumber() string {
	if o == nil || IsNil(o.DocumentNumber) {
		var ret string
		return ret
	}
	return *o.DocumentNumber
}

// GetDocumentNumberOk returns a tuple with the DocumentNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetDocumentNumberOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentNumber) {
		return nil, false
	}
	return o.DocumentNumber, true
}

// HasDocumentNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasDocumentNumber() bool {
	if o != nil && !IsNil(o.DocumentNumber) {
		return true
	}

	return false
}

// SetDocumentNumber gets a reference to the given string and assigns it to the DocumentNumber field.
func (o *GLExportPurchaseTransaction) SetDocumentNumber(v string) {
	o.DocumentNumber = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GLExportPurchaseTransaction) SetDescription(v string) {
	o.Description = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportPurchaseTransaction) SetMemo(v string) {
	o.Memo = &v
}

// GetApAccountNumber returns the ApAccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetApAccountNumber() string {
	if o == nil || IsNil(o.ApAccountNumber) {
		var ret string
		return ret
	}
	return *o.ApAccountNumber
}

// GetApAccountNumberOk returns a tuple with the ApAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetApAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ApAccountNumber) {
		return nil, false
	}
	return o.ApAccountNumber, true
}

// HasApAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasApAccountNumber() bool {
	if o != nil && !IsNil(o.ApAccountNumber) {
		return true
	}

	return false
}

// SetApAccountNumber gets a reference to the given string and assigns it to the ApAccountNumber field.
func (o *GLExportPurchaseTransaction) SetApAccountNumber(v string) {
	o.ApAccountNumber = &v
}

// GetPurchaseDate returns the PurchaseDate field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetPurchaseDate() string {
	if o == nil || IsNil(o.PurchaseDate) {
		var ret string
		return ret
	}
	return *o.PurchaseDate
}

// GetPurchaseDateOk returns a tuple with the PurchaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetPurchaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseDate) {
		return nil, false
	}
	return o.PurchaseDate, true
}

// HasPurchaseDate returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseDate() bool {
	if o != nil && !IsNil(o.PurchaseDate) {
		return true
	}

	return false
}

// SetPurchaseDate gets a reference to the given string and assigns it to the PurchaseDate field.
func (o *GLExportPurchaseTransaction) SetPurchaseDate(v string) {
	o.PurchaseDate = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *GLExportPurchaseTransaction) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetCompanyType() CompanyTypeReference {
	if o == nil || IsNil(o.CompanyType) {
		var ret CompanyTypeReference
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetCompanyTypeOk() (*CompanyTypeReference, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given CompanyTypeReference and assigns it to the CompanyType field.
func (o *GLExportPurchaseTransaction) SetCompanyType(v CompanyTypeReference) {
	o.CompanyType = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *GLExportPurchaseTransaction) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *GLExportPurchaseTransaction) SetSite(v SiteReference) {
	o.Site = &v
}

// GetPurchaseClass returns the PurchaseClass field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetPurchaseClass() string {
	if o == nil || IsNil(o.PurchaseClass) {
		var ret string
		return ret
	}
	return *o.PurchaseClass
}

// GetPurchaseClassOk returns a tuple with the PurchaseClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetPurchaseClassOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseClass) {
		return nil, false
	}
	return o.PurchaseClass, true
}

// HasPurchaseClass returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseClass() bool {
	if o != nil && !IsNil(o.PurchaseClass) {
		return true
	}

	return false
}

// SetPurchaseClass gets a reference to the given string and assigns it to the PurchaseClass field.
func (o *GLExportPurchaseTransaction) SetPurchaseClass(v string) {
	o.PurchaseClass = &v
}

// GetFreightAmount returns the FreightAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetFreightAmount() float64 {
	if o == nil || IsNil(o.FreightAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.FreightAmount.Get()
}

// GetFreightAmountOk returns a tuple with the FreightAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetFreightAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreightAmount.Get(), o.FreightAmount.IsSet()
}

// HasFreightAmount returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasFreightAmount() bool {
	if o != nil && o.FreightAmount.IsSet() {
		return true
	}

	return false
}

// SetFreightAmount gets a reference to the given NullableFloat64 and assigns it to the FreightAmount field.
func (o *GLExportPurchaseTransaction) SetFreightAmount(v float64) {
	o.FreightAmount.Set(&v)
}

// SetFreightAmountNil sets the value for FreightAmount to be an explicit nil
func (o *GLExportPurchaseTransaction) SetFreightAmountNil() {
	o.FreightAmount.Set(nil)
}

// UnsetFreightAmount ensures that no value is present for FreightAmount, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetFreightAmount() {
	o.FreightAmount.Unset()
}

// GetFreightPackingSlip returns the FreightPackingSlip field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetFreightPackingSlip() string {
	if o == nil || IsNil(o.FreightPackingSlip) {
		var ret string
		return ret
	}
	return *o.FreightPackingSlip
}

// GetFreightPackingSlipOk returns a tuple with the FreightPackingSlip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetFreightPackingSlipOk() (*string, bool) {
	if o == nil || IsNil(o.FreightPackingSlip) {
		return nil, false
	}
	return o.FreightPackingSlip, true
}

// HasFreightPackingSlip returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasFreightPackingSlip() bool {
	if o != nil && !IsNil(o.FreightPackingSlip) {
		return true
	}

	return false
}

// SetFreightPackingSlip gets a reference to the given string and assigns it to the FreightPackingSlip field.
func (o *GLExportPurchaseTransaction) SetFreightPackingSlip(v string) {
	o.FreightPackingSlip = &v
}

// GetPackingSlip returns the PackingSlip field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetPackingSlip() string {
	if o == nil || IsNil(o.PackingSlip) {
		var ret string
		return ret
	}
	return *o.PackingSlip
}

// GetPackingSlipOk returns a tuple with the PackingSlip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetPackingSlipOk() (*string, bool) {
	if o == nil || IsNil(o.PackingSlip) {
		return nil, false
	}
	return o.PackingSlip, true
}

// HasPackingSlip returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPackingSlip() bool {
	if o != nil && !IsNil(o.PackingSlip) {
		return true
	}

	return false
}

// SetPackingSlip gets a reference to the given string and assigns it to the PackingSlip field.
func (o *GLExportPurchaseTransaction) SetPackingSlip(v string) {
	o.PackingSlip = &v
}

// GetDropshipFlag returns the DropshipFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetDropshipFlag() bool {
	if o == nil || IsNil(o.DropshipFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropshipFlag.Get()
}

// GetDropshipFlagOk returns a tuple with the DropshipFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetDropshipFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropshipFlag.Get(), o.DropshipFlag.IsSet()
}

// HasDropshipFlag returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasDropshipFlag() bool {
	if o != nil && o.DropshipFlag.IsSet() {
		return true
	}

	return false
}

// SetDropshipFlag gets a reference to the given NullableBool and assigns it to the DropshipFlag field.
func (o *GLExportPurchaseTransaction) SetDropshipFlag(v bool) {
	o.DropshipFlag.Set(&v)
}

// SetDropshipFlagNil sets the value for DropshipFlag to be an explicit nil
func (o *GLExportPurchaseTransaction) SetDropshipFlagNil() {
	o.DropshipFlag.Set(nil)
}

// UnsetDropshipFlag ensures that no value is present for DropshipFlag, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetDropshipFlag() {
	o.DropshipFlag.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportPurchaseTransaction) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportPurchaseTransaction) SetTotal(v float64) {
	o.Total.Set(&v)
}

// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportPurchaseTransaction) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetTotal() {
	o.Total.Unset()
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *GLExportPurchaseTransaction) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetBillingTermsXref returns the BillingTermsXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetBillingTermsXref() string {
	if o == nil || IsNil(o.BillingTermsXref) {
		var ret string
		return ret
	}
	return *o.BillingTermsXref
}

// GetBillingTermsXrefOk returns a tuple with the BillingTermsXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetBillingTermsXrefOk() (*string, bool) {
	if o == nil || IsNil(o.BillingTermsXref) {
		return nil, false
	}
	return o.BillingTermsXref, true
}

// HasBillingTermsXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasBillingTermsXref() bool {
	if o != nil && !IsNil(o.BillingTermsXref) {
		return true
	}

	return false
}

// SetBillingTermsXref gets a reference to the given string and assigns it to the BillingTermsXref field.
func (o *GLExportPurchaseTransaction) SetBillingTermsXref(v string) {
	o.BillingTermsXref = &v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetDueDays() int32 {
	if o == nil || IsNil(o.DueDays.Get()) {
		var ret int32
		return ret
	}
	return *o.DueDays.Get()
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetDueDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDays.Get(), o.DueDays.IsSet()
}

// HasDueDays returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasDueDays() bool {
	if o != nil && o.DueDays.IsSet() {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given NullableInt32 and assigns it to the DueDays field.
func (o *GLExportPurchaseTransaction) SetDueDays(v int32) {
	o.DueDays.Set(&v)
}

// SetDueDaysNil sets the value for DueDays to be an explicit nil
func (o *GLExportPurchaseTransaction) SetDueDaysNil() {
	o.DueDays.Set(nil)
}

// UnsetDueDays ensures that no value is present for DueDays, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetDueDays() {
	o.DueDays.Unset()
}

// GetVendorNumber returns the VendorNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetVendorNumber() string {
	if o == nil || IsNil(o.VendorNumber) {
		var ret string
		return ret
	}
	return *o.VendorNumber
}

// GetVendorNumberOk returns a tuple with the VendorNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetVendorNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorNumber) {
		return nil, false
	}
	return o.VendorNumber, true
}

// HasVendorNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasVendorNumber() bool {
	if o != nil && !IsNil(o.VendorNumber) {
		return true
	}

	return false
}

// SetVendorNumber gets a reference to the given string and assigns it to the VendorNumber field.
func (o *GLExportPurchaseTransaction) SetVendorNumber(v string) {
	o.VendorNumber = &v
}

// GetVendorAccountNumber returns the VendorAccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetVendorAccountNumber() string {
	if o == nil || IsNil(o.VendorAccountNumber) {
		var ret string
		return ret
	}
	return *o.VendorAccountNumber
}

// GetVendorAccountNumberOk returns a tuple with the VendorAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetVendorAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorAccountNumber) {
		return nil, false
	}
	return o.VendorAccountNumber, true
}

// HasVendorAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasVendorAccountNumber() bool {
	if o != nil && !IsNil(o.VendorAccountNumber) {
		return true
	}

	return false
}

// SetVendorAccountNumber gets a reference to the given string and assigns it to the VendorAccountNumber field.
func (o *GLExportPurchaseTransaction) SetVendorAccountNumber(v string) {
	o.VendorAccountNumber = &v
}

// GetVendorInvoiceDate returns the VendorInvoiceDate field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetVendorInvoiceDate() string {
	if o == nil || IsNil(o.VendorInvoiceDate) {
		var ret string
		return ret
	}
	return *o.VendorInvoiceDate
}

// GetVendorInvoiceDateOk returns a tuple with the VendorInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetVendorInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.VendorInvoiceDate) {
		return nil, false
	}
	return o.VendorInvoiceDate, true
}

// HasVendorInvoiceDate returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasVendorInvoiceDate() bool {
	if o != nil && !IsNil(o.VendorInvoiceDate) {
		return true
	}

	return false
}

// SetVendorInvoiceDate gets a reference to the given string and assigns it to the VendorInvoiceDate field.
func (o *GLExportPurchaseTransaction) SetVendorInvoiceDate(v string) {
	o.VendorInvoiceDate = &v
}

// GetVendorInvoiceNumber returns the VendorInvoiceNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetVendorInvoiceNumber() string {
	if o == nil || IsNil(o.VendorInvoiceNumber) {
		var ret string
		return ret
	}
	return *o.VendorInvoiceNumber
}

// GetVendorInvoiceNumberOk returns a tuple with the VendorInvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetVendorInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorInvoiceNumber) {
		return nil, false
	}
	return o.VendorInvoiceNumber, true
}

// HasVendorInvoiceNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasVendorInvoiceNumber() bool {
	if o != nil && !IsNil(o.VendorInvoiceNumber) {
		return true
	}

	return false
}

// SetVendorInvoiceNumber gets a reference to the given string and assigns it to the VendorInvoiceNumber field.
func (o *GLExportPurchaseTransaction) SetVendorInvoiceNumber(v string) {
	o.VendorInvoiceNumber = &v
}

// GetTaxAgencyXref returns the TaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetTaxAgencyXref() string {
	if o == nil || IsNil(o.TaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.TaxAgencyXref
}

// GetTaxAgencyXrefOk returns a tuple with the TaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAgencyXref) {
		return nil, false
	}
	return o.TaxAgencyXref, true
}

// HasTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasTaxAgencyXref() bool {
	if o != nil && !IsNil(o.TaxAgencyXref) {
		return true
	}

	return false
}

// SetTaxAgencyXref gets a reference to the given string and assigns it to the TaxAgencyXref field.
func (o *GLExportPurchaseTransaction) SetTaxAgencyXref(v string) {
	o.TaxAgencyXref = &v
}

// GetStateTaxXref returns the StateTaxXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetStateTaxXref() string {
	if o == nil || IsNil(o.StateTaxXref) {
		var ret string
		return ret
	}
	return *o.StateTaxXref
}

// GetStateTaxXrefOk returns a tuple with the StateTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetStateTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxXref) {
		return nil, false
	}
	return o.StateTaxXref, true
}

// HasStateTaxXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasStateTaxXref() bool {
	if o != nil && !IsNil(o.StateTaxXref) {
		return true
	}

	return false
}

// SetStateTaxXref gets a reference to the given string and assigns it to the StateTaxXref field.
func (o *GLExportPurchaseTransaction) SetStateTaxXref(v string) {
	o.StateTaxXref = &v
}

// GetCountyTaxXref returns the CountyTaxXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetCountyTaxXref() string {
	if o == nil || IsNil(o.CountyTaxXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxXref
}

// GetCountyTaxXrefOk returns a tuple with the CountyTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetCountyTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxXref) {
		return nil, false
	}
	return o.CountyTaxXref, true
}

// HasCountyTaxXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasCountyTaxXref() bool {
	if o != nil && !IsNil(o.CountyTaxXref) {
		return true
	}

	return false
}

// SetCountyTaxXref gets a reference to the given string and assigns it to the CountyTaxXref field.
func (o *GLExportPurchaseTransaction) SetCountyTaxXref(v string) {
	o.CountyTaxXref = &v
}

// GetCityTaxXref returns the CityTaxXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetCityTaxXref() string {
	if o == nil || IsNil(o.CityTaxXref) {
		var ret string
		return ret
	}
	return *o.CityTaxXref
}

// GetCityTaxXrefOk returns a tuple with the CityTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetCityTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CityTaxXref) {
		return nil, false
	}
	return o.CityTaxXref, true
}

// HasCityTaxXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasCityTaxXref() bool {
	if o != nil && !IsNil(o.CityTaxXref) {
		return true
	}

	return false
}

// SetCityTaxXref gets a reference to the given string and assigns it to the CityTaxXref field.
func (o *GLExportPurchaseTransaction) SetCityTaxXref(v string) {
	o.CityTaxXref = &v
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *GLExportPurchaseTransaction) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToCompanyAccountNumber returns the ShipToCompanyAccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetShipToCompanyAccountNumber() string {
	if o == nil || IsNil(o.ShipToCompanyAccountNumber) {
		var ret string
		return ret
	}
	return *o.ShipToCompanyAccountNumber
}

// GetShipToCompanyAccountNumberOk returns a tuple with the ShipToCompanyAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetShipToCompanyAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToCompanyAccountNumber) {
		return nil, false
	}
	return o.ShipToCompanyAccountNumber, true
}

// HasShipToCompanyAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasShipToCompanyAccountNumber() bool {
	if o != nil && !IsNil(o.ShipToCompanyAccountNumber) {
		return true
	}

	return false
}

// SetShipToCompanyAccountNumber gets a reference to the given string and assigns it to the ShipToCompanyAccountNumber field.
func (o *GLExportPurchaseTransaction) SetShipToCompanyAccountNumber(v string) {
	o.ShipToCompanyAccountNumber = &v
}

// GetShipToCompanyType returns the ShipToCompanyType field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetShipToCompanyType() CompanyTypeReference {
	if o == nil || IsNil(o.ShipToCompanyType) {
		var ret CompanyTypeReference
		return ret
	}
	return *o.ShipToCompanyType
}

// GetShipToCompanyTypeOk returns a tuple with the ShipToCompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetShipToCompanyTypeOk() (*CompanyTypeReference, bool) {
	if o == nil || IsNil(o.ShipToCompanyType) {
		return nil, false
	}
	return o.ShipToCompanyType, true
}

// HasShipToCompanyType returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasShipToCompanyType() bool {
	if o != nil && !IsNil(o.ShipToCompanyType) {
		return true
	}

	return false
}

// SetShipToCompanyType gets a reference to the given CompanyTypeReference and assigns it to the ShipToCompanyType field.
func (o *GLExportPurchaseTransaction) SetShipToCompanyType(v CompanyTypeReference) {
	o.ShipToCompanyType = &v
}

// GetShipToContact returns the ShipToContact field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetShipToContact() ContactReference {
	if o == nil || IsNil(o.ShipToContact) {
		var ret ContactReference
		return ret
	}
	return *o.ShipToContact
}

// GetShipToContactOk returns a tuple with the ShipToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetShipToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.ShipToContact) {
		return nil, false
	}
	return o.ShipToContact, true
}

// HasShipToContact returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasShipToContact() bool {
	if o != nil && !IsNil(o.ShipToContact) {
		return true
	}

	return false
}

// SetShipToContact gets a reference to the given ContactReference and assigns it to the ShipToContact field.
func (o *GLExportPurchaseTransaction) SetShipToContact(v ContactReference) {
	o.ShipToContact = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *GLExportPurchaseTransaction) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetShipToTaxGroup returns the ShipToTaxGroup field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetShipToTaxGroup() string {
	if o == nil || IsNil(o.ShipToTaxGroup) {
		var ret string
		return ret
	}
	return *o.ShipToTaxGroup
}

// GetShipToTaxGroupOk returns a tuple with the ShipToTaxGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetShipToTaxGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToTaxGroup) {
		return nil, false
	}
	return o.ShipToTaxGroup, true
}

// HasShipToTaxGroup returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasShipToTaxGroup() bool {
	if o != nil && !IsNil(o.ShipToTaxGroup) {
		return true
	}

	return false
}

// SetShipToTaxGroup gets a reference to the given string and assigns it to the ShipToTaxGroup field.
func (o *GLExportPurchaseTransaction) SetShipToTaxGroup(v string) {
	o.ShipToTaxGroup = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *GLExportPurchaseTransaction) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetTaxGroupRate returns the TaxGroupRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetTaxGroupRate() float64 {
	if o == nil || IsNil(o.TaxGroupRate.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxGroupRate.Get()
}

// GetTaxGroupRateOk returns a tuple with the TaxGroupRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetTaxGroupRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxGroupRate.Get(), o.TaxGroupRate.IsSet()
}

// HasTaxGroupRate returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasTaxGroupRate() bool {
	if o != nil && o.TaxGroupRate.IsSet() {
		return true
	}

	return false
}

// SetTaxGroupRate gets a reference to the given NullableFloat64 and assigns it to the TaxGroupRate field.
func (o *GLExportPurchaseTransaction) SetTaxGroupRate(v float64) {
	o.TaxGroupRate.Set(&v)
}

// SetTaxGroupRateNil sets the value for TaxGroupRate to be an explicit nil
func (o *GLExportPurchaseTransaction) SetTaxGroupRateNil() {
	o.TaxGroupRate.Set(nil)
}

// UnsetTaxGroupRate ensures that no value is present for TaxGroupRate, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetTaxGroupRate() {
	o.TaxGroupRate.Unset()
}

// GetUseAvalaraTaxFlag returns the UseAvalaraTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetUseAvalaraTaxFlag() bool {
	if o == nil || IsNil(o.UseAvalaraTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseAvalaraTaxFlag.Get()
}

// GetUseAvalaraTaxFlagOk returns a tuple with the UseAvalaraTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetUseAvalaraTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseAvalaraTaxFlag.Get(), o.UseAvalaraTaxFlag.IsSet()
}

// HasUseAvalaraTaxFlag returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasUseAvalaraTaxFlag() bool {
	if o != nil && o.UseAvalaraTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetUseAvalaraTaxFlag gets a reference to the given NullableBool and assigns it to the UseAvalaraTaxFlag field.
func (o *GLExportPurchaseTransaction) SetUseAvalaraTaxFlag(v bool) {
	o.UseAvalaraTaxFlag.Set(&v)
}

// SetUseAvalaraTaxFlagNil sets the value for UseAvalaraTaxFlag to be an explicit nil
func (o *GLExportPurchaseTransaction) SetUseAvalaraTaxFlagNil() {
	o.UseAvalaraTaxFlag.Set(nil)
}

// UnsetUseAvalaraTaxFlag ensures that no value is present for UseAvalaraTaxFlag, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetUseAvalaraTaxFlag() {
	o.UseAvalaraTaxFlag.Unset()
}

// GetPurchaseHeaderTaxGroup returns the PurchaseHeaderTaxGroup field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetPurchaseHeaderTaxGroup() string {
	if o == nil || IsNil(o.PurchaseHeaderTaxGroup) {
		var ret string
		return ret
	}
	return *o.PurchaseHeaderTaxGroup
}

// GetPurchaseHeaderTaxGroupOk returns a tuple with the PurchaseHeaderTaxGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetPurchaseHeaderTaxGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseHeaderTaxGroup) {
		return nil, false
	}
	return o.PurchaseHeaderTaxGroup, true
}

// HasPurchaseHeaderTaxGroup returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseHeaderTaxGroup() bool {
	if o != nil && !IsNil(o.PurchaseHeaderTaxGroup) {
		return true
	}

	return false
}

// SetPurchaseHeaderTaxGroup gets a reference to the given string and assigns it to the PurchaseHeaderTaxGroup field.
func (o *GLExportPurchaseTransaction) SetPurchaseHeaderTaxGroup(v string) {
	o.PurchaseHeaderTaxGroup = &v
}

// GetPurchaseHeaderTaxableFlag returns the PurchaseHeaderTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetPurchaseHeaderTaxableFlag() bool {
	if o == nil || IsNil(o.PurchaseHeaderTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PurchaseHeaderTaxableFlag.Get()
}

// GetPurchaseHeaderTaxableFlagOk returns a tuple with the PurchaseHeaderTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetPurchaseHeaderTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseHeaderTaxableFlag.Get(), o.PurchaseHeaderTaxableFlag.IsSet()
}

// HasPurchaseHeaderTaxableFlag returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseHeaderTaxableFlag() bool {
	if o != nil && o.PurchaseHeaderTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetPurchaseHeaderTaxableFlag gets a reference to the given NullableBool and assigns it to the PurchaseHeaderTaxableFlag field.
func (o *GLExportPurchaseTransaction) SetPurchaseHeaderTaxableFlag(v bool) {
	o.PurchaseHeaderTaxableFlag.Set(&v)
}

// SetPurchaseHeaderTaxableFlagNil sets the value for PurchaseHeaderTaxableFlag to be an explicit nil
func (o *GLExportPurchaseTransaction) SetPurchaseHeaderTaxableFlagNil() {
	o.PurchaseHeaderTaxableFlag.Set(nil)
}

// UnsetPurchaseHeaderTaxableFlag ensures that no value is present for PurchaseHeaderTaxableFlag, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetPurchaseHeaderTaxableFlag() {
	o.PurchaseHeaderTaxableFlag.Unset()
}

// GetPurchaseHeaderFreightTaxableFlag returns the PurchaseHeaderFreightTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransaction) GetPurchaseHeaderFreightTaxableFlag() bool {
	if o == nil || IsNil(o.PurchaseHeaderFreightTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PurchaseHeaderFreightTaxableFlag.Get()
}

// GetPurchaseHeaderFreightTaxableFlagOk returns a tuple with the PurchaseHeaderFreightTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransaction) GetPurchaseHeaderFreightTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseHeaderFreightTaxableFlag.Get(), o.PurchaseHeaderFreightTaxableFlag.IsSet()
}

// HasPurchaseHeaderFreightTaxableFlag returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseHeaderFreightTaxableFlag() bool {
	if o != nil && o.PurchaseHeaderFreightTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetPurchaseHeaderFreightTaxableFlag gets a reference to the given NullableBool and assigns it to the PurchaseHeaderFreightTaxableFlag field.
func (o *GLExportPurchaseTransaction) SetPurchaseHeaderFreightTaxableFlag(v bool) {
	o.PurchaseHeaderFreightTaxableFlag.Set(&v)
}

// SetPurchaseHeaderFreightTaxableFlagNil sets the value for PurchaseHeaderFreightTaxableFlag to be an explicit nil
func (o *GLExportPurchaseTransaction) SetPurchaseHeaderFreightTaxableFlagNil() {
	o.PurchaseHeaderFreightTaxableFlag.Set(nil)
}

// UnsetPurchaseHeaderFreightTaxableFlag ensures that no value is present for PurchaseHeaderFreightTaxableFlag, not even an explicit nil
func (o *GLExportPurchaseTransaction) UnsetPurchaseHeaderFreightTaxableFlag() {
	o.PurchaseHeaderFreightTaxableFlag.Unset()
}

// GetTaxLevels returns the TaxLevels field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetTaxLevels() []GLExportPurchaseTransactionTaxLevel {
	if o == nil || IsNil(o.TaxLevels) {
		var ret []GLExportPurchaseTransactionTaxLevel
		return ret
	}
	return o.TaxLevels
}

// GetTaxLevelsOk returns a tuple with the TaxLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetTaxLevelsOk() ([]GLExportPurchaseTransactionTaxLevel, bool) {
	if o == nil || IsNil(o.TaxLevels) {
		return nil, false
	}
	return o.TaxLevels, true
}

// HasTaxLevels returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasTaxLevels() bool {
	if o != nil && !IsNil(o.TaxLevels) {
		return true
	}

	return false
}

// SetTaxLevels gets a reference to the given []GLExportPurchaseTransactionTaxLevel and assigns it to the TaxLevels field.
func (o *GLExportPurchaseTransaction) SetTaxLevels(v []GLExportPurchaseTransactionTaxLevel) {
	o.TaxLevels = v
}

// GetPurchaseDetail returns the PurchaseDetail field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetPurchaseDetail() []GLExportPurchaseTransactionDetail {
	if o == nil || IsNil(o.PurchaseDetail) {
		var ret []GLExportPurchaseTransactionDetail
		return ret
	}
	return o.PurchaseDetail
}

// GetPurchaseDetailOk returns a tuple with the PurchaseDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetPurchaseDetailOk() ([]GLExportPurchaseTransactionDetail, bool) {
	if o == nil || IsNil(o.PurchaseDetail) {
		return nil, false
	}
	return o.PurchaseDetail, true
}

// HasPurchaseDetail returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseDetail() bool {
	if o != nil && !IsNil(o.PurchaseDetail) {
		return true
	}

	return false
}

// SetPurchaseDetail gets a reference to the given []GLExportPurchaseTransactionDetail and assigns it to the PurchaseDetail field.
func (o *GLExportPurchaseTransaction) SetPurchaseDetail(v []GLExportPurchaseTransactionDetail) {
	o.PurchaseDetail = v
}

// GetPurchaseDetailTax returns the PurchaseDetailTax field value if set, zero value otherwise.
func (o *GLExportPurchaseTransaction) GetPurchaseDetailTax() []GLExportPurchaseTransactionDetailTax {
	if o == nil || IsNil(o.PurchaseDetailTax) {
		var ret []GLExportPurchaseTransactionDetailTax
		return ret
	}
	return o.PurchaseDetailTax
}

// GetPurchaseDetailTaxOk returns a tuple with the PurchaseDetailTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransaction) GetPurchaseDetailTaxOk() ([]GLExportPurchaseTransactionDetailTax, bool) {
	if o == nil || IsNil(o.PurchaseDetailTax) {
		return nil, false
	}
	return o.PurchaseDetailTax, true
}

// HasPurchaseDetailTax returns a boolean if a field has been set.
func (o *GLExportPurchaseTransaction) HasPurchaseDetailTax() bool {
	if o != nil && !IsNil(o.PurchaseDetailTax) {
		return true
	}

	return false
}

// SetPurchaseDetailTax gets a reference to the given []GLExportPurchaseTransactionDetailTax and assigns it to the PurchaseDetailTax field.
func (o *GLExportPurchaseTransaction) SetPurchaseDetailTax(v []GLExportPurchaseTransactionDetailTax) {
	o.PurchaseDetailTax = v
}

func (o GLExportPurchaseTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportPurchaseTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.DocumentNumber) {
		toSerialize["documentNumber"] = o.DocumentNumber
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.ApAccountNumber) {
		toSerialize["apAccountNumber"] = o.ApAccountNumber
	}
	if !IsNil(o.PurchaseDate) {
		toSerialize["purchaseDate"] = o.PurchaseDate
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CompanyType) {
		toSerialize["companyType"] = o.CompanyType
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.PurchaseClass) {
		toSerialize["purchaseClass"] = o.PurchaseClass
	}
	if o.FreightAmount.IsSet() {
		toSerialize["freightAmount"] = o.FreightAmount.Get()
	}
	if !IsNil(o.FreightPackingSlip) {
		toSerialize["freightPackingSlip"] = o.FreightPackingSlip
	}
	if !IsNil(o.PackingSlip) {
		toSerialize["packingSlip"] = o.PackingSlip
	}
	if o.DropshipFlag.IsSet() {
		toSerialize["dropshipFlag"] = o.DropshipFlag.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.BillingTermsXref) {
		toSerialize["billingTermsXref"] = o.BillingTermsXref
	}
	if o.DueDays.IsSet() {
		toSerialize["dueDays"] = o.DueDays.Get()
	}
	if !IsNil(o.VendorNumber) {
		toSerialize["vendorNumber"] = o.VendorNumber
	}
	if !IsNil(o.VendorAccountNumber) {
		toSerialize["vendorAccountNumber"] = o.VendorAccountNumber
	}
	if !IsNil(o.VendorInvoiceDate) {
		toSerialize["vendorInvoiceDate"] = o.VendorInvoiceDate
	}
	if !IsNil(o.VendorInvoiceNumber) {
		toSerialize["vendorInvoiceNumber"] = o.VendorInvoiceNumber
	}
	if !IsNil(o.TaxAgencyXref) {
		toSerialize["taxAgencyXref"] = o.TaxAgencyXref
	}
	if !IsNil(o.StateTaxXref) {
		toSerialize["stateTaxXref"] = o.StateTaxXref
	}
	if !IsNil(o.CountyTaxXref) {
		toSerialize["countyTaxXref"] = o.CountyTaxXref
	}
	if !IsNil(o.CityTaxXref) {
		toSerialize["cityTaxXref"] = o.CityTaxXref
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToCompanyAccountNumber) {
		toSerialize["shipToCompanyAccountNumber"] = o.ShipToCompanyAccountNumber
	}
	if !IsNil(o.ShipToCompanyType) {
		toSerialize["shipToCompanyType"] = o.ShipToCompanyType
	}
	if !IsNil(o.ShipToContact) {
		toSerialize["shipToContact"] = o.ShipToContact
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if !IsNil(o.ShipToTaxGroup) {
		toSerialize["shipToTaxGroup"] = o.ShipToTaxGroup
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.TaxGroupRate.IsSet() {
		toSerialize["taxGroupRate"] = o.TaxGroupRate.Get()
	}
	if o.UseAvalaraTaxFlag.IsSet() {
		toSerialize["useAvalaraTaxFlag"] = o.UseAvalaraTaxFlag.Get()
	}
	if !IsNil(o.PurchaseHeaderTaxGroup) {
		toSerialize["purchaseHeaderTaxGroup"] = o.PurchaseHeaderTaxGroup
	}
	if o.PurchaseHeaderTaxableFlag.IsSet() {
		toSerialize["purchaseHeaderTaxableFlag"] = o.PurchaseHeaderTaxableFlag.Get()
	}
	if o.PurchaseHeaderFreightTaxableFlag.IsSet() {
		toSerialize["purchaseHeaderFreightTaxableFlag"] = o.PurchaseHeaderFreightTaxableFlag.Get()
	}
	if !IsNil(o.TaxLevels) {
		toSerialize["taxLevels"] = o.TaxLevels
	}
	if !IsNil(o.PurchaseDetail) {
		toSerialize["purchaseDetail"] = o.PurchaseDetail
	}
	if !IsNil(o.PurchaseDetailTax) {
		toSerialize["purchaseDetailTax"] = o.PurchaseDetailTax
	}
	return toSerialize, nil
}

type NullableGLExportPurchaseTransaction struct {
	value *GLExportPurchaseTransaction
	isSet bool
}

func (v NullableGLExportPurchaseTransaction) Get() *GLExportPurchaseTransaction {
	return v.value
}

func (v *NullableGLExportPurchaseTransaction) Set(val *GLExportPurchaseTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportPurchaseTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportPurchaseTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportPurchaseTransaction(val *GLExportPurchaseTransaction) *NullableGLExportPurchaseTransaction {
	return &NullableGLExportPurchaseTransaction{value: val, isSet: true}
}

func (v NullableGLExportPurchaseTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportPurchaseTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
