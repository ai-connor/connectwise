/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportPurchaseTransactionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportPurchaseTransactionDetail{}

// GLExportPurchaseTransactionDetail struct for GLExportPurchaseTransactionDetail
type GLExportPurchaseTransactionDetail struct {
	Id                     NullableInt32                `json:"id,omitempty"`
	DocumentDate           *string                      `json:"documentDate,omitempty"`
	GlClass                *string                      `json:"glClass,omitempty"`
	GlTypeId               *string                      `json:"glTypeId,omitempty"`
	GlItemId               *string                      `json:"glItemId,omitempty"`
	SalesCode              *string                      `json:"salesCode,omitempty"`
	Description            *string                      `json:"description,omitempty"`
	Cost                   NullableFloat64              `json:"cost,omitempty"`
	Memo                   *string                      `json:"memo,omitempty"`
	TaxNote                *string                      `json:"taxNote,omitempty"`
	VendorNumber           *string                      `json:"vendorNumber,omitempty"`
	AccountNumber          *string                      `json:"accountNumber,omitempty"`
	CostAccountNumber      *string                      `json:"costAccountNumber,omitempty"`
	InventoryAccountNumber *string                      `json:"inventoryAccountNumber,omitempty"`
	VendorAccountNumber    *string                      `json:"vendorAccountNumber,omitempty"`
	Item                   *IvItemReference             `json:"item,omitempty"`
	ItemDescription        *string                      `json:"itemDescription,omitempty"`
	SalesDescription       *string                      `json:"salesDescription,omitempty"`
	Taxable                NullableBool                 `json:"taxable,omitempty"`
	ItemPrice              NullableFloat64              `json:"itemPrice,omitempty"`
	ItemCost               NullableFloat64              `json:"itemCost,omitempty"`
	UnitOfMeasure          *UnitOfMeasureReference      `json:"unitOfMeasure,omitempty"`
	Quantity               NullableFloat64              `json:"quantity,omitempty"`
	Total                  NullableFloat64              `json:"total,omitempty"`
	Currency               *CurrencyReference           `json:"currency,omitempty"`
	SerializedFlag         NullableBool                 `json:"serializedFlag,omitempty"`
	SerialNumbers          *string                      `json:"serialNumbers,omitempty"`
	DropShippedFlag        NullableBool                 `json:"dropShippedFlag,omitempty"`
	LineNumber             *int32                       `json:"lineNumber,omitempty"`
	WarehouseBin           *WarehouseBinReference       `json:"warehouseBin,omitempty"`
	WarehouseSite          *SiteReference               `json:"warehouseSite,omitempty"`
	SubCategory            *ProductSubCategoryReference `json:"subCategory,omitempty"`
	ShipmentMethod         *ShipmentMethodReference     `json:"shipmentMethod,omitempty"`
	ItemTypeXref           *string                      `json:"itemTypeXref,omitempty"`
	InventoryXref          *string                      `json:"inventoryXref,omitempty"`
	CogsXref               *string                      `json:"cogsXref,omitempty"`
	UomScheduleXref        *string                      `json:"uomScheduleXref,omitempty"`
	PriceLevelXref         *string                      `json:"priceLevelXref,omitempty"`
	LocationXref           *string                      `json:"locationXref,omitempty"`
	TaxCode                *TaxCodeReference            `json:"taxCode,omitempty"`
	PurchaseHeaderTaxGroup *string                      `json:"purchaseHeaderTaxGroup,omitempty"`
	TaxCodeXref            *string                      `json:"taxCodeXref,omitempty"`
	TaxRate                *float64                     `json:"taxRate,omitempty"`
	TaxAgencyXref          *string                      `json:"taxAgencyXref,omitempty"`
}

// NewGLExportPurchaseTransactionDetail instantiates a new GLExportPurchaseTransactionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportPurchaseTransactionDetail() *GLExportPurchaseTransactionDetail {
	this := GLExportPurchaseTransactionDetail{}
	return &this
}

// NewGLExportPurchaseTransactionDetailWithDefaults instantiates a new GLExportPurchaseTransactionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportPurchaseTransactionDetailWithDefaults() *GLExportPurchaseTransactionDetail {
	this := GLExportPurchaseTransactionDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *GLExportPurchaseTransactionDetail) SetId(v int32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetId() {
	o.Id.Unset()
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportPurchaseTransactionDetail) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetGlClass returns the GlClass field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetGlClass() string {
	if o == nil || IsNil(o.GlClass) {
		var ret string
		return ret
	}
	return *o.GlClass
}

// GetGlClassOk returns a tuple with the GlClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetGlClassOk() (*string, bool) {
	if o == nil || IsNil(o.GlClass) {
		return nil, false
	}
	return o.GlClass, true
}

// HasGlClass returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasGlClass() bool {
	if o != nil && !IsNil(o.GlClass) {
		return true
	}

	return false
}

// SetGlClass gets a reference to the given string and assigns it to the GlClass field.
func (o *GLExportPurchaseTransactionDetail) SetGlClass(v string) {
	o.GlClass = &v
}

// GetGlTypeId returns the GlTypeId field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetGlTypeId() string {
	if o == nil || IsNil(o.GlTypeId) {
		var ret string
		return ret
	}
	return *o.GlTypeId
}

// GetGlTypeIdOk returns a tuple with the GlTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetGlTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlTypeId) {
		return nil, false
	}
	return o.GlTypeId, true
}

// HasGlTypeId returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasGlTypeId() bool {
	if o != nil && !IsNil(o.GlTypeId) {
		return true
	}

	return false
}

// SetGlTypeId gets a reference to the given string and assigns it to the GlTypeId field.
func (o *GLExportPurchaseTransactionDetail) SetGlTypeId(v string) {
	o.GlTypeId = &v
}

// GetGlItemId returns the GlItemId field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetGlItemId() string {
	if o == nil || IsNil(o.GlItemId) {
		var ret string
		return ret
	}
	return *o.GlItemId
}

// GetGlItemIdOk returns a tuple with the GlItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetGlItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlItemId) {
		return nil, false
	}
	return o.GlItemId, true
}

// HasGlItemId returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasGlItemId() bool {
	if o != nil && !IsNil(o.GlItemId) {
		return true
	}

	return false
}

// SetGlItemId gets a reference to the given string and assigns it to the GlItemId field.
func (o *GLExportPurchaseTransactionDetail) SetGlItemId(v string) {
	o.GlItemId = &v
}

// GetSalesCode returns the SalesCode field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetSalesCode() string {
	if o == nil || IsNil(o.SalesCode) {
		var ret string
		return ret
	}
	return *o.SalesCode
}

// GetSalesCodeOk returns a tuple with the SalesCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetSalesCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalesCode) {
		return nil, false
	}
	return o.SalesCode, true
}

// HasSalesCode returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasSalesCode() bool {
	if o != nil && !IsNil(o.SalesCode) {
		return true
	}

	return false
}

// SetSalesCode gets a reference to the given string and assigns it to the SalesCode field.
func (o *GLExportPurchaseTransactionDetail) SetSalesCode(v string) {
	o.SalesCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GLExportPurchaseTransactionDetail) SetDescription(v string) {
	o.Description = &v
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *GLExportPurchaseTransactionDetail) SetCost(v float64) {
	o.Cost.Set(&v)
}

// SetCostNil sets the value for Cost to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetCost() {
	o.Cost.Unset()
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportPurchaseTransactionDetail) SetMemo(v string) {
	o.Memo = &v
}

// GetTaxNote returns the TaxNote field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetTaxNote() string {
	if o == nil || IsNil(o.TaxNote) {
		var ret string
		return ret
	}
	return *o.TaxNote
}

// GetTaxNoteOk returns a tuple with the TaxNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetTaxNoteOk() (*string, bool) {
	if o == nil || IsNil(o.TaxNote) {
		return nil, false
	}
	return o.TaxNote, true
}

// HasTaxNote returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTaxNote() bool {
	if o != nil && !IsNil(o.TaxNote) {
		return true
	}

	return false
}

// SetTaxNote gets a reference to the given string and assigns it to the TaxNote field.
func (o *GLExportPurchaseTransactionDetail) SetTaxNote(v string) {
	o.TaxNote = &v
}

// GetVendorNumber returns the VendorNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetVendorNumber() string {
	if o == nil || IsNil(o.VendorNumber) {
		var ret string
		return ret
	}
	return *o.VendorNumber
}

// GetVendorNumberOk returns a tuple with the VendorNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetVendorNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorNumber) {
		return nil, false
	}
	return o.VendorNumber, true
}

// HasVendorNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasVendorNumber() bool {
	if o != nil && !IsNil(o.VendorNumber) {
		return true
	}

	return false
}

// SetVendorNumber gets a reference to the given string and assigns it to the VendorNumber field.
func (o *GLExportPurchaseTransactionDetail) SetVendorNumber(v string) {
	o.VendorNumber = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportPurchaseTransactionDetail) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetCostAccountNumber returns the CostAccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetCostAccountNumber() string {
	if o == nil || IsNil(o.CostAccountNumber) {
		var ret string
		return ret
	}
	return *o.CostAccountNumber
}

// GetCostAccountNumberOk returns a tuple with the CostAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetCostAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CostAccountNumber) {
		return nil, false
	}
	return o.CostAccountNumber, true
}

// HasCostAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasCostAccountNumber() bool {
	if o != nil && !IsNil(o.CostAccountNumber) {
		return true
	}

	return false
}

// SetCostAccountNumber gets a reference to the given string and assigns it to the CostAccountNumber field.
func (o *GLExportPurchaseTransactionDetail) SetCostAccountNumber(v string) {
	o.CostAccountNumber = &v
}

// GetInventoryAccountNumber returns the InventoryAccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetInventoryAccountNumber() string {
	if o == nil || IsNil(o.InventoryAccountNumber) {
		var ret string
		return ret
	}
	return *o.InventoryAccountNumber
}

// GetInventoryAccountNumberOk returns a tuple with the InventoryAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetInventoryAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryAccountNumber) {
		return nil, false
	}
	return o.InventoryAccountNumber, true
}

// HasInventoryAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasInventoryAccountNumber() bool {
	if o != nil && !IsNil(o.InventoryAccountNumber) {
		return true
	}

	return false
}

// SetInventoryAccountNumber gets a reference to the given string and assigns it to the InventoryAccountNumber field.
func (o *GLExportPurchaseTransactionDetail) SetInventoryAccountNumber(v string) {
	o.InventoryAccountNumber = &v
}

// GetVendorAccountNumber returns the VendorAccountNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetVendorAccountNumber() string {
	if o == nil || IsNil(o.VendorAccountNumber) {
		var ret string
		return ret
	}
	return *o.VendorAccountNumber
}

// GetVendorAccountNumberOk returns a tuple with the VendorAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetVendorAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorAccountNumber) {
		return nil, false
	}
	return o.VendorAccountNumber, true
}

// HasVendorAccountNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasVendorAccountNumber() bool {
	if o != nil && !IsNil(o.VendorAccountNumber) {
		return true
	}

	return false
}

// SetVendorAccountNumber gets a reference to the given string and assigns it to the VendorAccountNumber field.
func (o *GLExportPurchaseTransactionDetail) SetVendorAccountNumber(v string) {
	o.VendorAccountNumber = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetItem() IvItemReference {
	if o == nil || IsNil(o.Item) {
		var ret IvItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetItemOk() (*IvItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given IvItemReference and assigns it to the Item field.
func (o *GLExportPurchaseTransactionDetail) SetItem(v IvItemReference) {
	o.Item = &v
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetItemDescription() string {
	if o == nil || IsNil(o.ItemDescription) {
		var ret string
		return ret
	}
	return *o.ItemDescription
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDescription) {
		return nil, false
	}
	return o.ItemDescription, true
}

// HasItemDescription returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasItemDescription() bool {
	if o != nil && !IsNil(o.ItemDescription) {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given string and assigns it to the ItemDescription field.
func (o *GLExportPurchaseTransactionDetail) SetItemDescription(v string) {
	o.ItemDescription = &v
}

// GetSalesDescription returns the SalesDescription field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetSalesDescription() string {
	if o == nil || IsNil(o.SalesDescription) {
		var ret string
		return ret
	}
	return *o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetSalesDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesDescription) {
		return nil, false
	}
	return o.SalesDescription, true
}

// HasSalesDescription returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasSalesDescription() bool {
	if o != nil && !IsNil(o.SalesDescription) {
		return true
	}

	return false
}

// SetSalesDescription gets a reference to the given string and assigns it to the SalesDescription field.
func (o *GLExportPurchaseTransactionDetail) SetSalesDescription(v string) {
	o.SalesDescription = &v
}

// GetTaxable returns the Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable.Get()
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetTaxableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable.Get(), o.Taxable.IsSet()
}

// HasTaxable returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTaxable() bool {
	if o != nil && o.Taxable.IsSet() {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given NullableBool and assigns it to the Taxable field.
func (o *GLExportPurchaseTransactionDetail) SetTaxable(v bool) {
	o.Taxable.Set(&v)
}

// SetTaxableNil sets the value for Taxable to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetTaxableNil() {
	o.Taxable.Set(nil)
}

// UnsetTaxable ensures that no value is present for Taxable, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetTaxable() {
	o.Taxable.Unset()
}

// GetItemPrice returns the ItemPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetItemPrice() float64 {
	if o == nil || IsNil(o.ItemPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ItemPrice.Get()
}

// GetItemPriceOk returns a tuple with the ItemPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetItemPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemPrice.Get(), o.ItemPrice.IsSet()
}

// HasItemPrice returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasItemPrice() bool {
	if o != nil && o.ItemPrice.IsSet() {
		return true
	}

	return false
}

// SetItemPrice gets a reference to the given NullableFloat64 and assigns it to the ItemPrice field.
func (o *GLExportPurchaseTransactionDetail) SetItemPrice(v float64) {
	o.ItemPrice.Set(&v)
}

// SetItemPriceNil sets the value for ItemPrice to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetItemPriceNil() {
	o.ItemPrice.Set(nil)
}

// UnsetItemPrice ensures that no value is present for ItemPrice, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetItemPrice() {
	o.ItemPrice.Unset()
}

// GetItemCost returns the ItemCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetItemCost() float64 {
	if o == nil || IsNil(o.ItemCost.Get()) {
		var ret float64
		return ret
	}
	return *o.ItemCost.Get()
}

// GetItemCostOk returns a tuple with the ItemCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetItemCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemCost.Get(), o.ItemCost.IsSet()
}

// HasItemCost returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasItemCost() bool {
	if o != nil && o.ItemCost.IsSet() {
		return true
	}

	return false
}

// SetItemCost gets a reference to the given NullableFloat64 and assigns it to the ItemCost field.
func (o *GLExportPurchaseTransactionDetail) SetItemCost(v float64) {
	o.ItemCost.Set(&v)
}

// SetItemCostNil sets the value for ItemCost to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetItemCostNil() {
	o.ItemCost.Set(nil)
}

// UnsetItemCost ensures that no value is present for ItemCost, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetItemCost() {
	o.ItemCost.Unset()
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetUnitOfMeasure() UnitOfMeasureReference {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret UnitOfMeasureReference
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetUnitOfMeasureOk() (*UnitOfMeasureReference, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given UnitOfMeasureReference and assigns it to the UnitOfMeasure field.
func (o *GLExportPurchaseTransactionDetail) SetUnitOfMeasure(v UnitOfMeasureReference) {
	o.UnitOfMeasure = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float64
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat64 and assigns it to the Quantity field.
func (o *GLExportPurchaseTransactionDetail) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}

// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportPurchaseTransactionDetail) SetTotal(v float64) {
	o.Total.Set(&v)
}

// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetTotal() {
	o.Total.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportPurchaseTransactionDetail) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetSerializedFlag returns the SerializedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetSerializedFlag() bool {
	if o == nil || IsNil(o.SerializedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SerializedFlag.Get()
}

// GetSerializedFlagOk returns a tuple with the SerializedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetSerializedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerializedFlag.Get(), o.SerializedFlag.IsSet()
}

// HasSerializedFlag returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasSerializedFlag() bool {
	if o != nil && o.SerializedFlag.IsSet() {
		return true
	}

	return false
}

// SetSerializedFlag gets a reference to the given NullableBool and assigns it to the SerializedFlag field.
func (o *GLExportPurchaseTransactionDetail) SetSerializedFlag(v bool) {
	o.SerializedFlag.Set(&v)
}

// SetSerializedFlagNil sets the value for SerializedFlag to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetSerializedFlagNil() {
	o.SerializedFlag.Set(nil)
}

// UnsetSerializedFlag ensures that no value is present for SerializedFlag, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetSerializedFlag() {
	o.SerializedFlag.Unset()
}

// GetSerialNumbers returns the SerialNumbers field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetSerialNumbers() string {
	if o == nil || IsNil(o.SerialNumbers) {
		var ret string
		return ret
	}
	return *o.SerialNumbers
}

// GetSerialNumbersOk returns a tuple with the SerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetSerialNumbersOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumbers) {
		return nil, false
	}
	return o.SerialNumbers, true
}

// HasSerialNumbers returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasSerialNumbers() bool {
	if o != nil && !IsNil(o.SerialNumbers) {
		return true
	}

	return false
}

// SetSerialNumbers gets a reference to the given string and assigns it to the SerialNumbers field.
func (o *GLExportPurchaseTransactionDetail) SetSerialNumbers(v string) {
	o.SerialNumbers = &v
}

// GetDropShippedFlag returns the DropShippedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportPurchaseTransactionDetail) GetDropShippedFlag() bool {
	if o == nil || IsNil(o.DropShippedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropShippedFlag.Get()
}

// GetDropShippedFlagOk returns a tuple with the DropShippedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportPurchaseTransactionDetail) GetDropShippedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropShippedFlag.Get(), o.DropShippedFlag.IsSet()
}

// HasDropShippedFlag returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasDropShippedFlag() bool {
	if o != nil && o.DropShippedFlag.IsSet() {
		return true
	}

	return false
}

// SetDropShippedFlag gets a reference to the given NullableBool and assigns it to the DropShippedFlag field.
func (o *GLExportPurchaseTransactionDetail) SetDropShippedFlag(v bool) {
	o.DropShippedFlag.Set(&v)
}

// SetDropShippedFlagNil sets the value for DropShippedFlag to be an explicit nil
func (o *GLExportPurchaseTransactionDetail) SetDropShippedFlagNil() {
	o.DropShippedFlag.Set(nil)
}

// UnsetDropShippedFlag ensures that no value is present for DropShippedFlag, not even an explicit nil
func (o *GLExportPurchaseTransactionDetail) UnsetDropShippedFlag() {
	o.DropShippedFlag.Unset()
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetLineNumber() int32 {
	if o == nil || IsNil(o.LineNumber) {
		var ret int32
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetLineNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.LineNumber) {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasLineNumber() bool {
	if o != nil && !IsNil(o.LineNumber) {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given int32 and assigns it to the LineNumber field.
func (o *GLExportPurchaseTransactionDetail) SetLineNumber(v int32) {
	o.LineNumber = &v
}

// GetWarehouseBin returns the WarehouseBin field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetWarehouseBin() WarehouseBinReference {
	if o == nil || IsNil(o.WarehouseBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.WarehouseBin
}

// GetWarehouseBinOk returns a tuple with the WarehouseBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetWarehouseBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.WarehouseBin) {
		return nil, false
	}
	return o.WarehouseBin, true
}

// HasWarehouseBin returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasWarehouseBin() bool {
	if o != nil && !IsNil(o.WarehouseBin) {
		return true
	}

	return false
}

// SetWarehouseBin gets a reference to the given WarehouseBinReference and assigns it to the WarehouseBin field.
func (o *GLExportPurchaseTransactionDetail) SetWarehouseBin(v WarehouseBinReference) {
	o.WarehouseBin = &v
}

// GetWarehouseSite returns the WarehouseSite field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetWarehouseSite() SiteReference {
	if o == nil || IsNil(o.WarehouseSite) {
		var ret SiteReference
		return ret
	}
	return *o.WarehouseSite
}

// GetWarehouseSiteOk returns a tuple with the WarehouseSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetWarehouseSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.WarehouseSite) {
		return nil, false
	}
	return o.WarehouseSite, true
}

// HasWarehouseSite returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasWarehouseSite() bool {
	if o != nil && !IsNil(o.WarehouseSite) {
		return true
	}

	return false
}

// SetWarehouseSite gets a reference to the given SiteReference and assigns it to the WarehouseSite field.
func (o *GLExportPurchaseTransactionDetail) SetWarehouseSite(v SiteReference) {
	o.WarehouseSite = &v
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetSubCategory() ProductSubCategoryReference {
	if o == nil || IsNil(o.SubCategory) {
		var ret ProductSubCategoryReference
		return ret
	}
	return *o.SubCategory
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetSubCategoryOk() (*ProductSubCategoryReference, bool) {
	if o == nil || IsNil(o.SubCategory) {
		return nil, false
	}
	return o.SubCategory, true
}

// HasSubCategory returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasSubCategory() bool {
	if o != nil && !IsNil(o.SubCategory) {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given ProductSubCategoryReference and assigns it to the SubCategory field.
func (o *GLExportPurchaseTransactionDetail) SetSubCategory(v ProductSubCategoryReference) {
	o.SubCategory = &v
}

// GetShipmentMethod returns the ShipmentMethod field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetShipmentMethod() ShipmentMethodReference {
	if o == nil || IsNil(o.ShipmentMethod) {
		var ret ShipmentMethodReference
		return ret
	}
	return *o.ShipmentMethod
}

// GetShipmentMethodOk returns a tuple with the ShipmentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetShipmentMethodOk() (*ShipmentMethodReference, bool) {
	if o == nil || IsNil(o.ShipmentMethod) {
		return nil, false
	}
	return o.ShipmentMethod, true
}

// HasShipmentMethod returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasShipmentMethod() bool {
	if o != nil && !IsNil(o.ShipmentMethod) {
		return true
	}

	return false
}

// SetShipmentMethod gets a reference to the given ShipmentMethodReference and assigns it to the ShipmentMethod field.
func (o *GLExportPurchaseTransactionDetail) SetShipmentMethod(v ShipmentMethodReference) {
	o.ShipmentMethod = &v
}

// GetItemTypeXref returns the ItemTypeXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetItemTypeXref() string {
	if o == nil || IsNil(o.ItemTypeXref) {
		var ret string
		return ret
	}
	return *o.ItemTypeXref
}

// GetItemTypeXrefOk returns a tuple with the ItemTypeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetItemTypeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.ItemTypeXref) {
		return nil, false
	}
	return o.ItemTypeXref, true
}

// HasItemTypeXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasItemTypeXref() bool {
	if o != nil && !IsNil(o.ItemTypeXref) {
		return true
	}

	return false
}

// SetItemTypeXref gets a reference to the given string and assigns it to the ItemTypeXref field.
func (o *GLExportPurchaseTransactionDetail) SetItemTypeXref(v string) {
	o.ItemTypeXref = &v
}

// GetInventoryXref returns the InventoryXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetInventoryXref() string {
	if o == nil || IsNil(o.InventoryXref) {
		var ret string
		return ret
	}
	return *o.InventoryXref
}

// GetInventoryXrefOk returns a tuple with the InventoryXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetInventoryXrefOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryXref) {
		return nil, false
	}
	return o.InventoryXref, true
}

// HasInventoryXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasInventoryXref() bool {
	if o != nil && !IsNil(o.InventoryXref) {
		return true
	}

	return false
}

// SetInventoryXref gets a reference to the given string and assigns it to the InventoryXref field.
func (o *GLExportPurchaseTransactionDetail) SetInventoryXref(v string) {
	o.InventoryXref = &v
}

// GetCogsXref returns the CogsXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetCogsXref() string {
	if o == nil || IsNil(o.CogsXref) {
		var ret string
		return ret
	}
	return *o.CogsXref
}

// GetCogsXrefOk returns a tuple with the CogsXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetCogsXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CogsXref) {
		return nil, false
	}
	return o.CogsXref, true
}

// HasCogsXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasCogsXref() bool {
	if o != nil && !IsNil(o.CogsXref) {
		return true
	}

	return false
}

// SetCogsXref gets a reference to the given string and assigns it to the CogsXref field.
func (o *GLExportPurchaseTransactionDetail) SetCogsXref(v string) {
	o.CogsXref = &v
}

// GetUomScheduleXref returns the UomScheduleXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetUomScheduleXref() string {
	if o == nil || IsNil(o.UomScheduleXref) {
		var ret string
		return ret
	}
	return *o.UomScheduleXref
}

// GetUomScheduleXrefOk returns a tuple with the UomScheduleXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetUomScheduleXrefOk() (*string, bool) {
	if o == nil || IsNil(o.UomScheduleXref) {
		return nil, false
	}
	return o.UomScheduleXref, true
}

// HasUomScheduleXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasUomScheduleXref() bool {
	if o != nil && !IsNil(o.UomScheduleXref) {
		return true
	}

	return false
}

// SetUomScheduleXref gets a reference to the given string and assigns it to the UomScheduleXref field.
func (o *GLExportPurchaseTransactionDetail) SetUomScheduleXref(v string) {
	o.UomScheduleXref = &v
}

// GetPriceLevelXref returns the PriceLevelXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetPriceLevelXref() string {
	if o == nil || IsNil(o.PriceLevelXref) {
		var ret string
		return ret
	}
	return *o.PriceLevelXref
}

// GetPriceLevelXrefOk returns a tuple with the PriceLevelXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetPriceLevelXrefOk() (*string, bool) {
	if o == nil || IsNil(o.PriceLevelXref) {
		return nil, false
	}
	return o.PriceLevelXref, true
}

// HasPriceLevelXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasPriceLevelXref() bool {
	if o != nil && !IsNil(o.PriceLevelXref) {
		return true
	}

	return false
}

// SetPriceLevelXref gets a reference to the given string and assigns it to the PriceLevelXref field.
func (o *GLExportPurchaseTransactionDetail) SetPriceLevelXref(v string) {
	o.PriceLevelXref = &v
}

// GetLocationXref returns the LocationXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetLocationXref() string {
	if o == nil || IsNil(o.LocationXref) {
		var ret string
		return ret
	}
	return *o.LocationXref
}

// GetLocationXrefOk returns a tuple with the LocationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetLocationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LocationXref) {
		return nil, false
	}
	return o.LocationXref, true
}

// HasLocationXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasLocationXref() bool {
	if o != nil && !IsNil(o.LocationXref) {
		return true
	}

	return false
}

// SetLocationXref gets a reference to the given string and assigns it to the LocationXref field.
func (o *GLExportPurchaseTransactionDetail) SetLocationXref(v string) {
	o.LocationXref = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *GLExportPurchaseTransactionDetail) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetPurchaseHeaderTaxGroup returns the PurchaseHeaderTaxGroup field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetPurchaseHeaderTaxGroup() string {
	if o == nil || IsNil(o.PurchaseHeaderTaxGroup) {
		var ret string
		return ret
	}
	return *o.PurchaseHeaderTaxGroup
}

// GetPurchaseHeaderTaxGroupOk returns a tuple with the PurchaseHeaderTaxGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetPurchaseHeaderTaxGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseHeaderTaxGroup) {
		return nil, false
	}
	return o.PurchaseHeaderTaxGroup, true
}

// HasPurchaseHeaderTaxGroup returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasPurchaseHeaderTaxGroup() bool {
	if o != nil && !IsNil(o.PurchaseHeaderTaxGroup) {
		return true
	}

	return false
}

// SetPurchaseHeaderTaxGroup gets a reference to the given string and assigns it to the PurchaseHeaderTaxGroup field.
func (o *GLExportPurchaseTransactionDetail) SetPurchaseHeaderTaxGroup(v string) {
	o.PurchaseHeaderTaxGroup = &v
}

// GetTaxCodeXref returns the TaxCodeXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetTaxCodeXref() string {
	if o == nil || IsNil(o.TaxCodeXref) {
		var ret string
		return ret
	}
	return *o.TaxCodeXref
}

// GetTaxCodeXrefOk returns a tuple with the TaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxCodeXref) {
		return nil, false
	}
	return o.TaxCodeXref, true
}

// HasTaxCodeXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTaxCodeXref() bool {
	if o != nil && !IsNil(o.TaxCodeXref) {
		return true
	}

	return false
}

// SetTaxCodeXref gets a reference to the given string and assigns it to the TaxCodeXref field.
func (o *GLExportPurchaseTransactionDetail) SetTaxCodeXref(v string) {
	o.TaxCodeXref = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetTaxRate() float64 {
	if o == nil || IsNil(o.TaxRate) {
		var ret float64
		return ret
	}
	return *o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetTaxRateOk() (*float64, bool) {
	if o == nil || IsNil(o.TaxRate) {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTaxRate() bool {
	if o != nil && !IsNil(o.TaxRate) {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given float64 and assigns it to the TaxRate field.
func (o *GLExportPurchaseTransactionDetail) SetTaxRate(v float64) {
	o.TaxRate = &v
}

// GetTaxAgencyXref returns the TaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportPurchaseTransactionDetail) GetTaxAgencyXref() string {
	if o == nil || IsNil(o.TaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.TaxAgencyXref
}

// GetTaxAgencyXrefOk returns a tuple with the TaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportPurchaseTransactionDetail) GetTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAgencyXref) {
		return nil, false
	}
	return o.TaxAgencyXref, true
}

// HasTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportPurchaseTransactionDetail) HasTaxAgencyXref() bool {
	if o != nil && !IsNil(o.TaxAgencyXref) {
		return true
	}

	return false
}

// SetTaxAgencyXref gets a reference to the given string and assigns it to the TaxAgencyXref field.
func (o *GLExportPurchaseTransactionDetail) SetTaxAgencyXref(v string) {
	o.TaxAgencyXref = &v
}

func (o GLExportPurchaseTransactionDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportPurchaseTransactionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.GlClass) {
		toSerialize["glClass"] = o.GlClass
	}
	if !IsNil(o.GlTypeId) {
		toSerialize["glTypeId"] = o.GlTypeId
	}
	if !IsNil(o.GlItemId) {
		toSerialize["glItemId"] = o.GlItemId
	}
	if !IsNil(o.SalesCode) {
		toSerialize["salesCode"] = o.SalesCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.TaxNote) {
		toSerialize["taxNote"] = o.TaxNote
	}
	if !IsNil(o.VendorNumber) {
		toSerialize["vendorNumber"] = o.VendorNumber
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.CostAccountNumber) {
		toSerialize["costAccountNumber"] = o.CostAccountNumber
	}
	if !IsNil(o.InventoryAccountNumber) {
		toSerialize["inventoryAccountNumber"] = o.InventoryAccountNumber
	}
	if !IsNil(o.VendorAccountNumber) {
		toSerialize["vendorAccountNumber"] = o.VendorAccountNumber
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.ItemDescription) {
		toSerialize["itemDescription"] = o.ItemDescription
	}
	if !IsNil(o.SalesDescription) {
		toSerialize["salesDescription"] = o.SalesDescription
	}
	if o.Taxable.IsSet() {
		toSerialize["taxable"] = o.Taxable.Get()
	}
	if o.ItemPrice.IsSet() {
		toSerialize["itemPrice"] = o.ItemPrice.Get()
	}
	if o.ItemCost.IsSet() {
		toSerialize["itemCost"] = o.ItemCost.Get()
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.SerializedFlag.IsSet() {
		toSerialize["serializedFlag"] = o.SerializedFlag.Get()
	}
	if !IsNil(o.SerialNumbers) {
		toSerialize["serialNumbers"] = o.SerialNumbers
	}
	if o.DropShippedFlag.IsSet() {
		toSerialize["dropShippedFlag"] = o.DropShippedFlag.Get()
	}
	if !IsNil(o.LineNumber) {
		toSerialize["lineNumber"] = o.LineNumber
	}
	if !IsNil(o.WarehouseBin) {
		toSerialize["warehouseBin"] = o.WarehouseBin
	}
	if !IsNil(o.WarehouseSite) {
		toSerialize["warehouseSite"] = o.WarehouseSite
	}
	if !IsNil(o.SubCategory) {
		toSerialize["subCategory"] = o.SubCategory
	}
	if !IsNil(o.ShipmentMethod) {
		toSerialize["shipmentMethod"] = o.ShipmentMethod
	}
	if !IsNil(o.ItemTypeXref) {
		toSerialize["itemTypeXref"] = o.ItemTypeXref
	}
	if !IsNil(o.InventoryXref) {
		toSerialize["inventoryXref"] = o.InventoryXref
	}
	if !IsNil(o.CogsXref) {
		toSerialize["cogsXref"] = o.CogsXref
	}
	if !IsNil(o.UomScheduleXref) {
		toSerialize["uomScheduleXref"] = o.UomScheduleXref
	}
	if !IsNil(o.PriceLevelXref) {
		toSerialize["priceLevelXref"] = o.PriceLevelXref
	}
	if !IsNil(o.LocationXref) {
		toSerialize["locationXref"] = o.LocationXref
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.PurchaseHeaderTaxGroup) {
		toSerialize["purchaseHeaderTaxGroup"] = o.PurchaseHeaderTaxGroup
	}
	if !IsNil(o.TaxCodeXref) {
		toSerialize["taxCodeXref"] = o.TaxCodeXref
	}
	if !IsNil(o.TaxRate) {
		toSerialize["taxRate"] = o.TaxRate
	}
	if !IsNil(o.TaxAgencyXref) {
		toSerialize["taxAgencyXref"] = o.TaxAgencyXref
	}
	return toSerialize, nil
}

type NullableGLExportPurchaseTransactionDetail struct {
	value *GLExportPurchaseTransactionDetail
	isSet bool
}

func (v NullableGLExportPurchaseTransactionDetail) Get() *GLExportPurchaseTransactionDetail {
	return v.value
}

func (v *NullableGLExportPurchaseTransactionDetail) Set(val *GLExportPurchaseTransactionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportPurchaseTransactionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportPurchaseTransactionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportPurchaseTransactionDetail(val *GLExportPurchaseTransactionDetail) *NullableGLExportPurchaseTransactionDetail {
	return &NullableGLExportPurchaseTransactionDetail{value: val, isSet: true}
}

func (v NullableGLExportPurchaseTransactionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportPurchaseTransactionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
