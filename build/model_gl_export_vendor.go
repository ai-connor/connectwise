/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportVendor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportVendor{}

// GLExportVendor struct for GLExportVendor
type GLExportVendor struct {
	Member        *MemberReference       `json:"member,omitempty"`
	Vendor        *CompanyReference      `json:"vendor,omitempty"`
	VendorNumber  *string                `json:"vendorNumber,omitempty"`
	Company       *CompanyReference      `json:"company,omitempty"`
	Contact       *ContactReference      `json:"contact,omitempty"`
	AccountNumber *string                `json:"accountNumber,omitempty"`
	BillingTerms  *BillingTermsReference `json:"billingTerms,omitempty"`
	DueDays       NullableInt32          `json:"dueDays,omitempty"`
	Site          *SiteReference         `json:"site,omitempty"`
	TaxCode       *TaxCodeReference      `json:"taxCode,omitempty"`
}

// NewGLExportVendor instantiates a new GLExportVendor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportVendor() *GLExportVendor {
	this := GLExportVendor{}
	return &this
}

// NewGLExportVendorWithDefaults instantiates a new GLExportVendor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportVendorWithDefaults() *GLExportVendor {
	this := GLExportVendor{}
	return &this
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *GLExportVendor) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *GLExportVendor) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *GLExportVendor) SetMember(v MemberReference) {
	o.Member = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *GLExportVendor) GetVendor() CompanyReference {
	if o == nil || IsNil(o.Vendor) {
		var ret CompanyReference
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetVendorOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *GLExportVendor) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given CompanyReference and assigns it to the Vendor field.
func (o *GLExportVendor) SetVendor(v CompanyReference) {
	o.Vendor = &v
}

// GetVendorNumber returns the VendorNumber field value if set, zero value otherwise.
func (o *GLExportVendor) GetVendorNumber() string {
	if o == nil || IsNil(o.VendorNumber) {
		var ret string
		return ret
	}
	return *o.VendorNumber
}

// GetVendorNumberOk returns a tuple with the VendorNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetVendorNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorNumber) {
		return nil, false
	}
	return o.VendorNumber, true
}

// HasVendorNumber returns a boolean if a field has been set.
func (o *GLExportVendor) HasVendorNumber() bool {
	if o != nil && !IsNil(o.VendorNumber) {
		return true
	}

	return false
}

// SetVendorNumber gets a reference to the given string and assigns it to the VendorNumber field.
func (o *GLExportVendor) SetVendorNumber(v string) {
	o.VendorNumber = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GLExportVendor) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GLExportVendor) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *GLExportVendor) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *GLExportVendor) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *GLExportVendor) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *GLExportVendor) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportVendor) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportVendor) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportVendor) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *GLExportVendor) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *GLExportVendor) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *GLExportVendor) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportVendor) GetDueDays() int32 {
	if o == nil || IsNil(o.DueDays.Get()) {
		var ret int32
		return ret
	}
	return *o.DueDays.Get()
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportVendor) GetDueDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDays.Get(), o.DueDays.IsSet()
}

// HasDueDays returns a boolean if a field has been set.
func (o *GLExportVendor) HasDueDays() bool {
	if o != nil && o.DueDays.IsSet() {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given NullableInt32 and assigns it to the DueDays field.
func (o *GLExportVendor) SetDueDays(v int32) {
	o.DueDays.Set(&v)
}

// SetDueDaysNil sets the value for DueDays to be an explicit nil
func (o *GLExportVendor) SetDueDaysNil() {
	o.DueDays.Set(nil)
}

// UnsetDueDays ensures that no value is present for DueDays, not even an explicit nil
func (o *GLExportVendor) UnsetDueDays() {
	o.DueDays.Unset()
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *GLExportVendor) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *GLExportVendor) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *GLExportVendor) SetSite(v SiteReference) {
	o.Site = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *GLExportVendor) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportVendor) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *GLExportVendor) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *GLExportVendor) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

func (o GLExportVendor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportVendor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorNumber) {
		toSerialize["vendorNumber"] = o.VendorNumber
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if o.DueDays.IsSet() {
		toSerialize["dueDays"] = o.DueDays.Get()
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	return toSerialize, nil
}

type NullableGLExportVendor struct {
	value *GLExportVendor
	isSet bool
}

func (v NullableGLExportVendor) Get() *GLExportVendor {
	return v.value
}

func (v *NullableGLExportVendor) Set(val *GLExportVendor) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportVendor) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportVendor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportVendor(val *GLExportVendor) *NullableGLExportVendor {
	return &NullableGLExportVendor{value: val, isSet: true}
}

func (v NullableGLExportVendor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportVendor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
