/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GoogleEmailSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoogleEmailSetup{}

// GoogleEmailSetup struct for GoogleEmailSetup
type GoogleEmailSetup struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 200;
	Name string `json:"name"`
	//  Max length: 100;
	Username string `json:"username"`
	//  Max length: 40;
	InboxFolder string `json:"inboxFolder"`
	//  Max length: 40;
	ProcessedFolder string `json:"processedFolder"`
	//  Max length: 40;
	FailedFolder string `json:"failedFolder"`
	//  Max length: 200;
	ClientId *string `json:"clientId,omitempty"`
	//  Max length: 4000;
	PrivateKey     *string                  `json:"privateKey,omitempty"`
	InactiveFlag   NullableBool             `json:"inactiveFlag,omitempty"`
	EmailConnector *EmailConnectorReference `json:"emailConnector,omitempty"`
	Info           *map[string]string       `json:"_info,omitempty"`
}

type _GoogleEmailSetup GoogleEmailSetup

// NewGoogleEmailSetup instantiates a new GoogleEmailSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoogleEmailSetup(name string, username string, inboxFolder string, processedFolder string, failedFolder string) *GoogleEmailSetup {
	this := GoogleEmailSetup{}
	this.Name = name
	this.Username = username
	this.InboxFolder = inboxFolder
	this.ProcessedFolder = processedFolder
	this.FailedFolder = failedFolder
	return &this
}

// NewGoogleEmailSetupWithDefaults instantiates a new GoogleEmailSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoogleEmailSetupWithDefaults() *GoogleEmailSetup {
	this := GoogleEmailSetup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GoogleEmailSetup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GoogleEmailSetup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GoogleEmailSetup) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *GoogleEmailSetup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GoogleEmailSetup) SetName(v string) {
	o.Name = v
}

// GetUsername returns the Username field value
func (o *GoogleEmailSetup) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *GoogleEmailSetup) SetUsername(v string) {
	o.Username = v
}

// GetInboxFolder returns the InboxFolder field value
func (o *GoogleEmailSetup) GetInboxFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InboxFolder
}

// GetInboxFolderOk returns a tuple with the InboxFolder field value
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetInboxFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InboxFolder, true
}

// SetInboxFolder sets field value
func (o *GoogleEmailSetup) SetInboxFolder(v string) {
	o.InboxFolder = v
}

// GetProcessedFolder returns the ProcessedFolder field value
func (o *GoogleEmailSetup) GetProcessedFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessedFolder
}

// GetProcessedFolderOk returns a tuple with the ProcessedFolder field value
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetProcessedFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedFolder, true
}

// SetProcessedFolder sets field value
func (o *GoogleEmailSetup) SetProcessedFolder(v string) {
	o.ProcessedFolder = v
}

// GetFailedFolder returns the FailedFolder field value
func (o *GoogleEmailSetup) GetFailedFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailedFolder
}

// GetFailedFolderOk returns a tuple with the FailedFolder field value
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetFailedFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedFolder, true
}

// SetFailedFolder sets field value
func (o *GoogleEmailSetup) SetFailedFolder(v string) {
	o.FailedFolder = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *GoogleEmailSetup) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *GoogleEmailSetup) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *GoogleEmailSetup) SetClientId(v string) {
	o.ClientId = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *GoogleEmailSetup) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *GoogleEmailSetup) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *GoogleEmailSetup) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoogleEmailSetup) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoogleEmailSetup) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *GoogleEmailSetup) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *GoogleEmailSetup) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *GoogleEmailSetup) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *GoogleEmailSetup) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetEmailConnector returns the EmailConnector field value if set, zero value otherwise.
func (o *GoogleEmailSetup) GetEmailConnector() EmailConnectorReference {
	if o == nil || IsNil(o.EmailConnector) {
		var ret EmailConnectorReference
		return ret
	}
	return *o.EmailConnector
}

// GetEmailConnectorOk returns a tuple with the EmailConnector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetEmailConnectorOk() (*EmailConnectorReference, bool) {
	if o == nil || IsNil(o.EmailConnector) {
		return nil, false
	}
	return o.EmailConnector, true
}

// HasEmailConnector returns a boolean if a field has been set.
func (o *GoogleEmailSetup) HasEmailConnector() bool {
	if o != nil && !IsNil(o.EmailConnector) {
		return true
	}

	return false
}

// SetEmailConnector gets a reference to the given EmailConnectorReference and assigns it to the EmailConnector field.
func (o *GoogleEmailSetup) SetEmailConnector(v EmailConnectorReference) {
	o.EmailConnector = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *GoogleEmailSetup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleEmailSetup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *GoogleEmailSetup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *GoogleEmailSetup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o GoogleEmailSetup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoogleEmailSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["username"] = o.Username
	toSerialize["inboxFolder"] = o.InboxFolder
	toSerialize["processedFolder"] = o.ProcessedFolder
	toSerialize["failedFolder"] = o.FailedFolder
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.EmailConnector) {
		toSerialize["emailConnector"] = o.EmailConnector
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *GoogleEmailSetup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"username",
		"inboxFolder",
		"processedFolder",
		"failedFolder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoogleEmailSetup := _GoogleEmailSetup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoogleEmailSetup)

	if err != nil {
		return err
	}

	*o = GoogleEmailSetup(varGoogleEmailSetup)

	return err
}

type NullableGoogleEmailSetup struct {
	value *GoogleEmailSetup
	isSet bool
}

func (v NullableGoogleEmailSetup) Get() *GoogleEmailSetup {
	return v.value
}

func (v *NullableGoogleEmailSetup) Set(val *GoogleEmailSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleEmailSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleEmailSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleEmailSetup(val *GoogleEmailSetup) *NullableGoogleEmailSetup {
	return &NullableGoogleEmailSetup{value: val, isSet: true}
}

func (v NullableGoogleEmailSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleEmailSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
