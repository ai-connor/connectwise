/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the HttpMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpMethod{}

// HttpMethod struct for HttpMethod
type HttpMethod struct {
	Get     *HttpMethod `json:"get,omitempty"`
	Put     *HttpMethod `json:"put,omitempty"`
	Post    *HttpMethod `json:"post,omitempty"`
	Delete  *HttpMethod `json:"delete,omitempty"`
	Head    *HttpMethod `json:"head,omitempty"`
	Options *HttpMethod `json:"options,omitempty"`
	Trace   *HttpMethod `json:"trace,omitempty"`
	Method  *string     `json:"method,omitempty"`
}

// NewHttpMethod instantiates a new HttpMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpMethod() *HttpMethod {
	this := HttpMethod{}
	return &this
}

// NewHttpMethodWithDefaults instantiates a new HttpMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpMethodWithDefaults() *HttpMethod {
	this := HttpMethod{}
	return &this
}

// GetGet returns the Get field value if set, zero value otherwise.
func (o *HttpMethod) GetGet() HttpMethod {
	if o == nil || IsNil(o.Get) {
		var ret HttpMethod
		return ret
	}
	return *o.Get
}

// GetGetOk returns a tuple with the Get field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetGetOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Get) {
		return nil, false
	}
	return o.Get, true
}

// HasGet returns a boolean if a field has been set.
func (o *HttpMethod) HasGet() bool {
	if o != nil && !IsNil(o.Get) {
		return true
	}

	return false
}

// SetGet gets a reference to the given HttpMethod and assigns it to the Get field.
func (o *HttpMethod) SetGet(v HttpMethod) {
	o.Get = &v
}

// GetPut returns the Put field value if set, zero value otherwise.
func (o *HttpMethod) GetPut() HttpMethod {
	if o == nil || IsNil(o.Put) {
		var ret HttpMethod
		return ret
	}
	return *o.Put
}

// GetPutOk returns a tuple with the Put field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetPutOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Put) {
		return nil, false
	}
	return o.Put, true
}

// HasPut returns a boolean if a field has been set.
func (o *HttpMethod) HasPut() bool {
	if o != nil && !IsNil(o.Put) {
		return true
	}

	return false
}

// SetPut gets a reference to the given HttpMethod and assigns it to the Put field.
func (o *HttpMethod) SetPut(v HttpMethod) {
	o.Put = &v
}

// GetPost returns the Post field value if set, zero value otherwise.
func (o *HttpMethod) GetPost() HttpMethod {
	if o == nil || IsNil(o.Post) {
		var ret HttpMethod
		return ret
	}
	return *o.Post
}

// GetPostOk returns a tuple with the Post field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetPostOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Post) {
		return nil, false
	}
	return o.Post, true
}

// HasPost returns a boolean if a field has been set.
func (o *HttpMethod) HasPost() bool {
	if o != nil && !IsNil(o.Post) {
		return true
	}

	return false
}

// SetPost gets a reference to the given HttpMethod and assigns it to the Post field.
func (o *HttpMethod) SetPost(v HttpMethod) {
	o.Post = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *HttpMethod) GetDelete() HttpMethod {
	if o == nil || IsNil(o.Delete) {
		var ret HttpMethod
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetDeleteOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *HttpMethod) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given HttpMethod and assigns it to the Delete field.
func (o *HttpMethod) SetDelete(v HttpMethod) {
	o.Delete = &v
}

// GetHead returns the Head field value if set, zero value otherwise.
func (o *HttpMethod) GetHead() HttpMethod {
	if o == nil || IsNil(o.Head) {
		var ret HttpMethod
		return ret
	}
	return *o.Head
}

// GetHeadOk returns a tuple with the Head field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetHeadOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Head) {
		return nil, false
	}
	return o.Head, true
}

// HasHead returns a boolean if a field has been set.
func (o *HttpMethod) HasHead() bool {
	if o != nil && !IsNil(o.Head) {
		return true
	}

	return false
}

// SetHead gets a reference to the given HttpMethod and assigns it to the Head field.
func (o *HttpMethod) SetHead(v HttpMethod) {
	o.Head = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *HttpMethod) GetOptions() HttpMethod {
	if o == nil || IsNil(o.Options) {
		var ret HttpMethod
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetOptionsOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *HttpMethod) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given HttpMethod and assigns it to the Options field.
func (o *HttpMethod) SetOptions(v HttpMethod) {
	o.Options = &v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *HttpMethod) GetTrace() HttpMethod {
	if o == nil || IsNil(o.Trace) {
		var ret HttpMethod
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetTraceOk() (*HttpMethod, bool) {
	if o == nil || IsNil(o.Trace) {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *HttpMethod) HasTrace() bool {
	if o != nil && !IsNil(o.Trace) {
		return true
	}

	return false
}

// SetTrace gets a reference to the given HttpMethod and assigns it to the Trace field.
func (o *HttpMethod) SetTrace(v HttpMethod) {
	o.Trace = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *HttpMethod) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpMethod) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *HttpMethod) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *HttpMethod) SetMethod(v string) {
	o.Method = &v
}

func (o HttpMethod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Get) {
		toSerialize["get"] = o.Get
	}
	if !IsNil(o.Put) {
		toSerialize["put"] = o.Put
	}
	if !IsNil(o.Post) {
		toSerialize["post"] = o.Post
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.Head) {
		toSerialize["head"] = o.Head
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Trace) {
		toSerialize["trace"] = o.Trace
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	return toSerialize, nil
}

type NullableHttpMethod struct {
	value *HttpMethod
	isSet bool
}

func (v NullableHttpMethod) Get() *HttpMethod {
	return v.value
}

func (v *NullableHttpMethod) Set(val *HttpMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpMethod(val *HttpMethod) *NullableHttpMethod {
	return &NullableHttpMethod{value: val, isSet: true}
}

func (v NullableHttpMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
