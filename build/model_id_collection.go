/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the IdCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdCollection{}

// IdCollection struct for IdCollection
type IdCollection struct {
	Ids []int32 `json:"ids,omitempty"`
}

// NewIdCollection instantiates a new IdCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdCollection() *IdCollection {
	this := IdCollection{}
	return &this
}

// NewIdCollectionWithDefaults instantiates a new IdCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdCollectionWithDefaults() *IdCollection {
	this := IdCollection{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *IdCollection) GetIds() []int32 {
	if o == nil || IsNil(o.Ids) {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdCollection) GetIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *IdCollection) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *IdCollection) SetIds(v []int32) {
	o.Ids = v
}

func (o IdCollection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	return toSerialize, nil
}

type NullableIdCollection struct {
	value *IdCollection
	isSet bool
}

func (v NullableIdCollection) Get() *IdCollection {
	return v.value
}

func (v *NullableIdCollection) Set(val *IdCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableIdCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableIdCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdCollection(val *IdCollection) *NullableIdCollection {
	return &NullableIdCollection{value: val, isSet: true}
}

func (v NullableIdCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
