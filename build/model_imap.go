/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Imap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Imap{}

// Imap struct for Imap
type Imap struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 200;
	Name string `json:"name"`
	//  Max length: 40;
	ImapName string `json:"imapName"`
	//  Max length: 40;
	ProcessedName string `json:"processedName"`
	//  Max length: 40;
	FailedFolder string `json:"failedFolder"`
	//  Max length: 200;
	Server string `json:"server"`
	//  Max length: 80;
	UserName string `json:"userName"`
	//  Max length: 80;
	Password       *string                  `json:"password,omitempty"`
	Port           NullableInt32            `json:"port"`
	SslFlag        NullableBool             `json:"sslFlag,omitempty"`
	EmailConnector *EmailConnectorReference `json:"emailConnector,omitempty"`
	Info           *map[string]string       `json:"_info,omitempty"`
}

type _Imap Imap

// NewImap instantiates a new Imap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImap(name string, imapName string, processedName string, failedFolder string, server string, userName string, port NullableInt32) *Imap {
	this := Imap{}
	this.Name = name
	this.ImapName = imapName
	this.ProcessedName = processedName
	this.FailedFolder = failedFolder
	this.Server = server
	this.UserName = userName
	this.Port = port
	return &this
}

// NewImapWithDefaults instantiates a new Imap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImapWithDefaults() *Imap {
	this := Imap{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Imap) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Imap) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Imap) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Imap) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Imap) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Imap) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Imap) SetName(v string) {
	o.Name = v
}

// GetImapName returns the ImapName field value
func (o *Imap) GetImapName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImapName
}

// GetImapNameOk returns a tuple with the ImapName field value
// and a boolean to check if the value has been set.
func (o *Imap) GetImapNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImapName, true
}

// SetImapName sets field value
func (o *Imap) SetImapName(v string) {
	o.ImapName = v
}

// GetProcessedName returns the ProcessedName field value
func (o *Imap) GetProcessedName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessedName
}

// GetProcessedNameOk returns a tuple with the ProcessedName field value
// and a boolean to check if the value has been set.
func (o *Imap) GetProcessedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedName, true
}

// SetProcessedName sets field value
func (o *Imap) SetProcessedName(v string) {
	o.ProcessedName = v
}

// GetFailedFolder returns the FailedFolder field value
func (o *Imap) GetFailedFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailedFolder
}

// GetFailedFolderOk returns a tuple with the FailedFolder field value
// and a boolean to check if the value has been set.
func (o *Imap) GetFailedFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedFolder, true
}

// SetFailedFolder sets field value
func (o *Imap) SetFailedFolder(v string) {
	o.FailedFolder = v
}

// GetServer returns the Server field value
func (o *Imap) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *Imap) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *Imap) SetServer(v string) {
	o.Server = v
}

// GetUserName returns the UserName field value
func (o *Imap) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *Imap) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *Imap) SetUserName(v string) {
	o.UserName = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Imap) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Imap) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Imap) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Imap) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Imap) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Imap) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// SetPort sets field value
func (o *Imap) SetPort(v int32) {
	o.Port.Set(&v)
}

// GetSslFlag returns the SslFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Imap) GetSslFlag() bool {
	if o == nil || IsNil(o.SslFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SslFlag.Get()
}

// GetSslFlagOk returns a tuple with the SslFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Imap) GetSslFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslFlag.Get(), o.SslFlag.IsSet()
}

// HasSslFlag returns a boolean if a field has been set.
func (o *Imap) HasSslFlag() bool {
	if o != nil && o.SslFlag.IsSet() {
		return true
	}

	return false
}

// SetSslFlag gets a reference to the given NullableBool and assigns it to the SslFlag field.
func (o *Imap) SetSslFlag(v bool) {
	o.SslFlag.Set(&v)
}

// SetSslFlagNil sets the value for SslFlag to be an explicit nil
func (o *Imap) SetSslFlagNil() {
	o.SslFlag.Set(nil)
}

// UnsetSslFlag ensures that no value is present for SslFlag, not even an explicit nil
func (o *Imap) UnsetSslFlag() {
	o.SslFlag.Unset()
}

// GetEmailConnector returns the EmailConnector field value if set, zero value otherwise.
func (o *Imap) GetEmailConnector() EmailConnectorReference {
	if o == nil || IsNil(o.EmailConnector) {
		var ret EmailConnectorReference
		return ret
	}
	return *o.EmailConnector
}

// GetEmailConnectorOk returns a tuple with the EmailConnector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Imap) GetEmailConnectorOk() (*EmailConnectorReference, bool) {
	if o == nil || IsNil(o.EmailConnector) {
		return nil, false
	}
	return o.EmailConnector, true
}

// HasEmailConnector returns a boolean if a field has been set.
func (o *Imap) HasEmailConnector() bool {
	if o != nil && !IsNil(o.EmailConnector) {
		return true
	}

	return false
}

// SetEmailConnector gets a reference to the given EmailConnectorReference and assigns it to the EmailConnector field.
func (o *Imap) SetEmailConnector(v EmailConnectorReference) {
	o.EmailConnector = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Imap) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Imap) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Imap) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Imap) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Imap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Imap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["imapName"] = o.ImapName
	toSerialize["processedName"] = o.ProcessedName
	toSerialize["failedFolder"] = o.FailedFolder
	toSerialize["server"] = o.Server
	toSerialize["userName"] = o.UserName
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["port"] = o.Port.Get()
	if o.SslFlag.IsSet() {
		toSerialize["sslFlag"] = o.SslFlag.Get()
	}
	if !IsNil(o.EmailConnector) {
		toSerialize["emailConnector"] = o.EmailConnector
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Imap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"imapName",
		"processedName",
		"failedFolder",
		"server",
		"userName",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImap := _Imap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImap)

	if err != nil {
		return err
	}

	*o = Imap(varImap)

	return err
}

type NullableImap struct {
	value *Imap
	isSet bool
}

func (v NullableImap) Get() *Imap {
	return v.value
}

func (v *NullableImap) Set(val *Imap) {
	v.value = val
	v.isSet = true
}

func (v NullableImap) IsSet() bool {
	return v.isSet
}

func (v *NullableImap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImap(val *Imap) *NullableImap {
	return &NullableImap{value: val, isSet: true}
}

func (v NullableImap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
