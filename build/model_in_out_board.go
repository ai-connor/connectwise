/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the InOutBoard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InOutBoard{}

// InOutBoard struct for InOutBoard
type InOutBoard struct {
	Id        *int32             `json:"id,omitempty"`
	Member    MemberReference    `json:"member"`
	InOutType InOutTypeReference `json:"inOutType"`
	//  Max length: 100;
	AdditionalInfo *string            `json:"additionalInfo,omitempty"`
	DateBack       time.Time          `json:"dateBack"`
	Info           *map[string]string `json:"_info,omitempty"`
}

type _InOutBoard InOutBoard

// NewInOutBoard instantiates a new InOutBoard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInOutBoard(member MemberReference, inOutType InOutTypeReference, dateBack time.Time) *InOutBoard {
	this := InOutBoard{}
	this.Member = member
	this.InOutType = inOutType
	this.DateBack = dateBack
	return &this
}

// NewInOutBoardWithDefaults instantiates a new InOutBoard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInOutBoardWithDefaults() *InOutBoard {
	this := InOutBoard{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InOutBoard) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InOutBoard) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InOutBoard) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InOutBoard) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value
func (o *InOutBoard) GetMember() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.Member
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *InOutBoard) GetMemberOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Member, true
}

// SetMember sets field value
func (o *InOutBoard) SetMember(v MemberReference) {
	o.Member = v
}

// GetInOutType returns the InOutType field value
func (o *InOutBoard) GetInOutType() InOutTypeReference {
	if o == nil {
		var ret InOutTypeReference
		return ret
	}

	return o.InOutType
}

// GetInOutTypeOk returns a tuple with the InOutType field value
// and a boolean to check if the value has been set.
func (o *InOutBoard) GetInOutTypeOk() (*InOutTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InOutType, true
}

// SetInOutType sets field value
func (o *InOutBoard) SetInOutType(v InOutTypeReference) {
	o.InOutType = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *InOutBoard) GetAdditionalInfo() string {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InOutBoard) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *InOutBoard) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *InOutBoard) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

// GetDateBack returns the DateBack field value
func (o *InOutBoard) GetDateBack() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateBack
}

// GetDateBackOk returns a tuple with the DateBack field value
// and a boolean to check if the value has been set.
func (o *InOutBoard) GetDateBackOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateBack, true
}

// SetDateBack sets field value
func (o *InOutBoard) SetDateBack(v time.Time) {
	o.DateBack = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *InOutBoard) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InOutBoard) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *InOutBoard) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *InOutBoard) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o InOutBoard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InOutBoard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["member"] = o.Member
	toSerialize["inOutType"] = o.InOutType
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	toSerialize["dateBack"] = o.DateBack
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *InOutBoard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member",
		"inOutType",
		"dateBack",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInOutBoard := _InOutBoard{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInOutBoard)

	if err != nil {
		return err
	}

	*o = InOutBoard(varInOutBoard)

	return err
}

type NullableInOutBoard struct {
	value *InOutBoard
	isSet bool
}

func (v NullableInOutBoard) Get() *InOutBoard {
	return v.value
}

func (v *NullableInOutBoard) Set(val *InOutBoard) {
	v.value = val
	v.isSet = true
}

func (v NullableInOutBoard) IsSet() bool {
	return v.isSet
}

func (v *NullableInOutBoard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInOutBoard(val *InOutBoard) *NullableInOutBoard {
	return &NullableInOutBoard{value: val, isSet: true}
}

func (v NullableInOutBoard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInOutBoard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
