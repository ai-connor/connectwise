/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IntegratorLogin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegratorLogin{}

// IntegratorLogin struct for IntegratorLogin
type IntegratorLogin struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Username string `json:"username"`
	// The password will never be returned in response. Max length: 50;
	Password *string `json:"password,omitempty"`
	// This flag controls whether the integrator can access only the db records it created, or all system records.
	CanAccessAllRecordsFlag NullableBool `json:"canAccessAllRecordsFlag,omitempty"`
	// Setting this flag to true will create an integrator that can access all of the available apis in the system.             If this field is set to true, both the member and board fields are required.
	CanAccessAllApisFlag NullableBool     `json:"canAccessAllApisFlag,omitempty"`
	InactiveFlag         NullableBool     `json:"inactiveFlag,omitempty"`
	DateInactivated      *time.Time       `json:"dateInactivated,omitempty"`
	InactivatedBy        *MemberReference `json:"inactivatedBy,omitempty"`
	ServiceTicketApiFlag NullableBool     `json:"serviceTicketApiFlag,omitempty"`
	Board                *BoardReference  `json:"board,omitempty"`
	//  Max length: 1000;
	ServiceBoardCallbackUrl        *string          `json:"serviceBoardCallbackUrl,omitempty"`
	ServiceBoardLegacyCallbackFlag NullableBool     `json:"serviceBoardLegacyCallbackFlag,omitempty"`
	TimeEntryApiFlag               NullableBool     `json:"timeEntryApiFlag,omitempty"`
	Member                         *MemberReference `json:"member,omitempty"`
	//  Max length: 1000;
	TimeEntryCallbackUrl         *string      `json:"timeEntryCallbackUrl,omitempty"`
	TimeEntryLegacyCallbackFlag  NullableBool `json:"timeEntryLegacyCallbackFlag,omitempty"`
	ManagedServicesApiFlag       NullableBool `json:"managedServicesApiFlag,omitempty"`
	ManagedServicesAutoChildFlag NullableBool `json:"managedServicesAutoChildFlag,omitempty"`
	// True if integrator is allowed to child configurations.
	ManagedServicesChildingFlag NullableBool `json:"managedServicesChildingFlag,omitempty"`
	ContactApiFlag              NullableBool `json:"contactApiFlag,omitempty"`
	//  Max length: 1000;
	ContactCallbackUrl        *string      `json:"contactCallbackUrl,omitempty"`
	ContactLegacyCallbackFlag NullableBool `json:"contactLegacyCallbackFlag,omitempty"`
	CompanyApiFlag            NullableBool `json:"companyApiFlag,omitempty"`
	//  Max length: 1000;
	CompanyCallbackUrl        *string      `json:"companyCallbackUrl,omitempty"`
	CompanyLegacyCallbackFlag NullableBool `json:"companyLegacyCallbackFlag,omitempty"`
	ActivityApiFlag           NullableBool `json:"activityApiFlag,omitempty"`
	//  Max length: 1000;
	ActivityCallbackUrl        *string      `json:"activityCallbackUrl,omitempty"`
	ActivityLegacyCallbackFlag NullableBool `json:"activityLegacyCallbackFlag,omitempty"`
	InvoiceApiFlag             NullableBool `json:"invoiceApiFlag,omitempty"`
	ProductApiFlag             NullableBool `json:"productApiFlag,omitempty"`
	//  Max length: 1000;
	ProductCallbackUrl        *string      `json:"productCallbackUrl,omitempty"`
	ProductLegacyCallbackFlag NullableBool `json:"productLegacyCallbackFlag,omitempty"`
	OpportunityApiFlag        NullableBool `json:"opportunityApiFlag,omitempty"`
	//  Max length: 1000;
	OpportunityCallbackUrl        *string      `json:"opportunityCallbackUrl,omitempty"`
	OpportunityLegacyCallbackFlag NullableBool `json:"opportunityLegacyCallbackFlag,omitempty"`
	// True if the member has access to the Opportunity Conversion Api.
	OpportunityConversionApiFlag NullableBool `json:"opportunityConversionApiFlag,omitempty"`
	MemberApiFlag                NullableBool `json:"memberApiFlag,omitempty"`
	MarketingApiFlag             NullableBool `json:"marketingApiFlag,omitempty"`
	PurchasingApiFlag            NullableBool `json:"purchasingApiFlag,omitempty"`
	//  Max length: 1000;
	PurchasingCallbackUrl        *string      `json:"purchasingCallbackUrl,omitempty"`
	PurchasingLegacyCallbackFlag NullableBool `json:"purchasingLegacyCallbackFlag,omitempty"`
	ReportingApiFlag             NullableBool `json:"reportingApiFlag,omitempty"`
	SystemApiFlag                NullableBool `json:"systemApiFlag,omitempty"`
	ProjectApiFlag               NullableBool `json:"projectApiFlag,omitempty"`
	//  Max length: 1000;
	ProjectCallbackUrl         *string      `json:"projectCallbackUrl,omitempty"`
	ProjectLegacyCallbackFlag  NullableBool `json:"projectLegacyCallbackFlag,omitempty"`
	ConfigurationApiFlag       NullableBool `json:"configurationApiFlag,omitempty"`
	ConfigurationAutoChildFlag NullableBool `json:"configurationAutoChildFlag,omitempty"`
	// True if integrator is allowed to child configurations.
	ConfigurationChildlingFlag NullableBool `json:"configurationChildlingFlag,omitempty"`
	//  Max length: 1000;
	ConfigurationCallbackUrl        *string      `json:"configurationCallbackUrl,omitempty"`
	ConfigurationLegacyCallbackFlag NullableBool `json:"configurationLegacyCallbackFlag,omitempty"`
	ScheduleApiFlag                 NullableBool `json:"scheduleApiFlag,omitempty"`
	//  Max length: 1000;
	ScheduleCallbackUrl        *string      `json:"scheduleCallbackUrl,omitempty"`
	ScheduleLegacyCallbackFlag NullableBool `json:"scheduleLegacyCallbackFlag,omitempty"`
	AgreementApiFlag           NullableBool `json:"agreementApiFlag,omitempty"`
	//  Max length: 1000;
	AgreementCallbackUrl        *string            `json:"agreementCallbackUrl,omitempty"`
	AgreementCallbackLegacyFlag NullableBool       `json:"agreementCallbackLegacyFlag,omitempty"`
	DocumentApiFlag             NullableBool       `json:"documentApiFlag,omitempty"`
	Info                        *map[string]string `json:"_info,omitempty"`
}

type _IntegratorLogin IntegratorLogin

// NewIntegratorLogin instantiates a new IntegratorLogin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegratorLogin(username string) *IntegratorLogin {
	this := IntegratorLogin{}
	this.Username = username
	return &this
}

// NewIntegratorLoginWithDefaults instantiates a new IntegratorLogin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegratorLoginWithDefaults() *IntegratorLogin {
	this := IntegratorLogin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegratorLogin) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegratorLogin) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IntegratorLogin) SetId(v int32) {
	o.Id = &v
}

// GetUsername returns the Username field value
func (o *IntegratorLogin) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *IntegratorLogin) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *IntegratorLogin) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *IntegratorLogin) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *IntegratorLogin) SetPassword(v string) {
	o.Password = &v
}

// GetCanAccessAllRecordsFlag returns the CanAccessAllRecordsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetCanAccessAllRecordsFlag() bool {
	if o == nil || IsNil(o.CanAccessAllRecordsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CanAccessAllRecordsFlag.Get()
}

// GetCanAccessAllRecordsFlagOk returns a tuple with the CanAccessAllRecordsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetCanAccessAllRecordsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanAccessAllRecordsFlag.Get(), o.CanAccessAllRecordsFlag.IsSet()
}

// HasCanAccessAllRecordsFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasCanAccessAllRecordsFlag() bool {
	if o != nil && o.CanAccessAllRecordsFlag.IsSet() {
		return true
	}

	return false
}

// SetCanAccessAllRecordsFlag gets a reference to the given NullableBool and assigns it to the CanAccessAllRecordsFlag field.
func (o *IntegratorLogin) SetCanAccessAllRecordsFlag(v bool) {
	o.CanAccessAllRecordsFlag.Set(&v)
}

// SetCanAccessAllRecordsFlagNil sets the value for CanAccessAllRecordsFlag to be an explicit nil
func (o *IntegratorLogin) SetCanAccessAllRecordsFlagNil() {
	o.CanAccessAllRecordsFlag.Set(nil)
}

// UnsetCanAccessAllRecordsFlag ensures that no value is present for CanAccessAllRecordsFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetCanAccessAllRecordsFlag() {
	o.CanAccessAllRecordsFlag.Unset()
}

// GetCanAccessAllApisFlag returns the CanAccessAllApisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetCanAccessAllApisFlag() bool {
	if o == nil || IsNil(o.CanAccessAllApisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CanAccessAllApisFlag.Get()
}

// GetCanAccessAllApisFlagOk returns a tuple with the CanAccessAllApisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetCanAccessAllApisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanAccessAllApisFlag.Get(), o.CanAccessAllApisFlag.IsSet()
}

// HasCanAccessAllApisFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasCanAccessAllApisFlag() bool {
	if o != nil && o.CanAccessAllApisFlag.IsSet() {
		return true
	}

	return false
}

// SetCanAccessAllApisFlag gets a reference to the given NullableBool and assigns it to the CanAccessAllApisFlag field.
func (o *IntegratorLogin) SetCanAccessAllApisFlag(v bool) {
	o.CanAccessAllApisFlag.Set(&v)
}

// SetCanAccessAllApisFlagNil sets the value for CanAccessAllApisFlag to be an explicit nil
func (o *IntegratorLogin) SetCanAccessAllApisFlagNil() {
	o.CanAccessAllApisFlag.Set(nil)
}

// UnsetCanAccessAllApisFlag ensures that no value is present for CanAccessAllApisFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetCanAccessAllApisFlag() {
	o.CanAccessAllApisFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *IntegratorLogin) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *IntegratorLogin) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetDateInactivated returns the DateInactivated field value if set, zero value otherwise.
func (o *IntegratorLogin) GetDateInactivated() time.Time {
	if o == nil || IsNil(o.DateInactivated) {
		var ret time.Time
		return ret
	}
	return *o.DateInactivated
}

// GetDateInactivatedOk returns a tuple with the DateInactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetDateInactivatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateInactivated) {
		return nil, false
	}
	return o.DateInactivated, true
}

// HasDateInactivated returns a boolean if a field has been set.
func (o *IntegratorLogin) HasDateInactivated() bool {
	if o != nil && !IsNil(o.DateInactivated) {
		return true
	}

	return false
}

// SetDateInactivated gets a reference to the given time.Time and assigns it to the DateInactivated field.
func (o *IntegratorLogin) SetDateInactivated(v time.Time) {
	o.DateInactivated = &v
}

// GetInactivatedBy returns the InactivatedBy field value if set, zero value otherwise.
func (o *IntegratorLogin) GetInactivatedBy() MemberReference {
	if o == nil || IsNil(o.InactivatedBy) {
		var ret MemberReference
		return ret
	}
	return *o.InactivatedBy
}

// GetInactivatedByOk returns a tuple with the InactivatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetInactivatedByOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.InactivatedBy) {
		return nil, false
	}
	return o.InactivatedBy, true
}

// HasInactivatedBy returns a boolean if a field has been set.
func (o *IntegratorLogin) HasInactivatedBy() bool {
	if o != nil && !IsNil(o.InactivatedBy) {
		return true
	}

	return false
}

// SetInactivatedBy gets a reference to the given MemberReference and assigns it to the InactivatedBy field.
func (o *IntegratorLogin) SetInactivatedBy(v MemberReference) {
	o.InactivatedBy = &v
}

// GetServiceTicketApiFlag returns the ServiceTicketApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetServiceTicketApiFlag() bool {
	if o == nil || IsNil(o.ServiceTicketApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ServiceTicketApiFlag.Get()
}

// GetServiceTicketApiFlagOk returns a tuple with the ServiceTicketApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetServiceTicketApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceTicketApiFlag.Get(), o.ServiceTicketApiFlag.IsSet()
}

// HasServiceTicketApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasServiceTicketApiFlag() bool {
	if o != nil && o.ServiceTicketApiFlag.IsSet() {
		return true
	}

	return false
}

// SetServiceTicketApiFlag gets a reference to the given NullableBool and assigns it to the ServiceTicketApiFlag field.
func (o *IntegratorLogin) SetServiceTicketApiFlag(v bool) {
	o.ServiceTicketApiFlag.Set(&v)
}

// SetServiceTicketApiFlagNil sets the value for ServiceTicketApiFlag to be an explicit nil
func (o *IntegratorLogin) SetServiceTicketApiFlagNil() {
	o.ServiceTicketApiFlag.Set(nil)
}

// UnsetServiceTicketApiFlag ensures that no value is present for ServiceTicketApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetServiceTicketApiFlag() {
	o.ServiceTicketApiFlag.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *IntegratorLogin) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *IntegratorLogin) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *IntegratorLogin) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetServiceBoardCallbackUrl returns the ServiceBoardCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetServiceBoardCallbackUrl() string {
	if o == nil || IsNil(o.ServiceBoardCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ServiceBoardCallbackUrl
}

// GetServiceBoardCallbackUrlOk returns a tuple with the ServiceBoardCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetServiceBoardCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceBoardCallbackUrl) {
		return nil, false
	}
	return o.ServiceBoardCallbackUrl, true
}

// HasServiceBoardCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasServiceBoardCallbackUrl() bool {
	if o != nil && !IsNil(o.ServiceBoardCallbackUrl) {
		return true
	}

	return false
}

// SetServiceBoardCallbackUrl gets a reference to the given string and assigns it to the ServiceBoardCallbackUrl field.
func (o *IntegratorLogin) SetServiceBoardCallbackUrl(v string) {
	o.ServiceBoardCallbackUrl = &v
}

// GetServiceBoardLegacyCallbackFlag returns the ServiceBoardLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetServiceBoardLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ServiceBoardLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ServiceBoardLegacyCallbackFlag.Get()
}

// GetServiceBoardLegacyCallbackFlagOk returns a tuple with the ServiceBoardLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetServiceBoardLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceBoardLegacyCallbackFlag.Get(), o.ServiceBoardLegacyCallbackFlag.IsSet()
}

// HasServiceBoardLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasServiceBoardLegacyCallbackFlag() bool {
	if o != nil && o.ServiceBoardLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetServiceBoardLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ServiceBoardLegacyCallbackFlag field.
func (o *IntegratorLogin) SetServiceBoardLegacyCallbackFlag(v bool) {
	o.ServiceBoardLegacyCallbackFlag.Set(&v)
}

// SetServiceBoardLegacyCallbackFlagNil sets the value for ServiceBoardLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetServiceBoardLegacyCallbackFlagNil() {
	o.ServiceBoardLegacyCallbackFlag.Set(nil)
}

// UnsetServiceBoardLegacyCallbackFlag ensures that no value is present for ServiceBoardLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetServiceBoardLegacyCallbackFlag() {
	o.ServiceBoardLegacyCallbackFlag.Unset()
}

// GetTimeEntryApiFlag returns the TimeEntryApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetTimeEntryApiFlag() bool {
	if o == nil || IsNil(o.TimeEntryApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryApiFlag.Get()
}

// GetTimeEntryApiFlagOk returns a tuple with the TimeEntryApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetTimeEntryApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryApiFlag.Get(), o.TimeEntryApiFlag.IsSet()
}

// HasTimeEntryApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasTimeEntryApiFlag() bool {
	if o != nil && o.TimeEntryApiFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryApiFlag gets a reference to the given NullableBool and assigns it to the TimeEntryApiFlag field.
func (o *IntegratorLogin) SetTimeEntryApiFlag(v bool) {
	o.TimeEntryApiFlag.Set(&v)
}

// SetTimeEntryApiFlagNil sets the value for TimeEntryApiFlag to be an explicit nil
func (o *IntegratorLogin) SetTimeEntryApiFlagNil() {
	o.TimeEntryApiFlag.Set(nil)
}

// UnsetTimeEntryApiFlag ensures that no value is present for TimeEntryApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetTimeEntryApiFlag() {
	o.TimeEntryApiFlag.Unset()
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *IntegratorLogin) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *IntegratorLogin) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *IntegratorLogin) SetMember(v MemberReference) {
	o.Member = &v
}

// GetTimeEntryCallbackUrl returns the TimeEntryCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetTimeEntryCallbackUrl() string {
	if o == nil || IsNil(o.TimeEntryCallbackUrl) {
		var ret string
		return ret
	}
	return *o.TimeEntryCallbackUrl
}

// GetTimeEntryCallbackUrlOk returns a tuple with the TimeEntryCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetTimeEntryCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TimeEntryCallbackUrl) {
		return nil, false
	}
	return o.TimeEntryCallbackUrl, true
}

// HasTimeEntryCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasTimeEntryCallbackUrl() bool {
	if o != nil && !IsNil(o.TimeEntryCallbackUrl) {
		return true
	}

	return false
}

// SetTimeEntryCallbackUrl gets a reference to the given string and assigns it to the TimeEntryCallbackUrl field.
func (o *IntegratorLogin) SetTimeEntryCallbackUrl(v string) {
	o.TimeEntryCallbackUrl = &v
}

// GetTimeEntryLegacyCallbackFlag returns the TimeEntryLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetTimeEntryLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.TimeEntryLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryLegacyCallbackFlag.Get()
}

// GetTimeEntryLegacyCallbackFlagOk returns a tuple with the TimeEntryLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetTimeEntryLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryLegacyCallbackFlag.Get(), o.TimeEntryLegacyCallbackFlag.IsSet()
}

// HasTimeEntryLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasTimeEntryLegacyCallbackFlag() bool {
	if o != nil && o.TimeEntryLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the TimeEntryLegacyCallbackFlag field.
func (o *IntegratorLogin) SetTimeEntryLegacyCallbackFlag(v bool) {
	o.TimeEntryLegacyCallbackFlag.Set(&v)
}

// SetTimeEntryLegacyCallbackFlagNil sets the value for TimeEntryLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetTimeEntryLegacyCallbackFlagNil() {
	o.TimeEntryLegacyCallbackFlag.Set(nil)
}

// UnsetTimeEntryLegacyCallbackFlag ensures that no value is present for TimeEntryLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetTimeEntryLegacyCallbackFlag() {
	o.TimeEntryLegacyCallbackFlag.Unset()
}

// GetManagedServicesApiFlag returns the ManagedServicesApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetManagedServicesApiFlag() bool {
	if o == nil || IsNil(o.ManagedServicesApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ManagedServicesApiFlag.Get()
}

// GetManagedServicesApiFlagOk returns a tuple with the ManagedServicesApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetManagedServicesApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagedServicesApiFlag.Get(), o.ManagedServicesApiFlag.IsSet()
}

// HasManagedServicesApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasManagedServicesApiFlag() bool {
	if o != nil && o.ManagedServicesApiFlag.IsSet() {
		return true
	}

	return false
}

// SetManagedServicesApiFlag gets a reference to the given NullableBool and assigns it to the ManagedServicesApiFlag field.
func (o *IntegratorLogin) SetManagedServicesApiFlag(v bool) {
	o.ManagedServicesApiFlag.Set(&v)
}

// SetManagedServicesApiFlagNil sets the value for ManagedServicesApiFlag to be an explicit nil
func (o *IntegratorLogin) SetManagedServicesApiFlagNil() {
	o.ManagedServicesApiFlag.Set(nil)
}

// UnsetManagedServicesApiFlag ensures that no value is present for ManagedServicesApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetManagedServicesApiFlag() {
	o.ManagedServicesApiFlag.Unset()
}

// GetManagedServicesAutoChildFlag returns the ManagedServicesAutoChildFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetManagedServicesAutoChildFlag() bool {
	if o == nil || IsNil(o.ManagedServicesAutoChildFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ManagedServicesAutoChildFlag.Get()
}

// GetManagedServicesAutoChildFlagOk returns a tuple with the ManagedServicesAutoChildFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetManagedServicesAutoChildFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagedServicesAutoChildFlag.Get(), o.ManagedServicesAutoChildFlag.IsSet()
}

// HasManagedServicesAutoChildFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasManagedServicesAutoChildFlag() bool {
	if o != nil && o.ManagedServicesAutoChildFlag.IsSet() {
		return true
	}

	return false
}

// SetManagedServicesAutoChildFlag gets a reference to the given NullableBool and assigns it to the ManagedServicesAutoChildFlag field.
func (o *IntegratorLogin) SetManagedServicesAutoChildFlag(v bool) {
	o.ManagedServicesAutoChildFlag.Set(&v)
}

// SetManagedServicesAutoChildFlagNil sets the value for ManagedServicesAutoChildFlag to be an explicit nil
func (o *IntegratorLogin) SetManagedServicesAutoChildFlagNil() {
	o.ManagedServicesAutoChildFlag.Set(nil)
}

// UnsetManagedServicesAutoChildFlag ensures that no value is present for ManagedServicesAutoChildFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetManagedServicesAutoChildFlag() {
	o.ManagedServicesAutoChildFlag.Unset()
}

// GetManagedServicesChildingFlag returns the ManagedServicesChildingFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetManagedServicesChildingFlag() bool {
	if o == nil || IsNil(o.ManagedServicesChildingFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ManagedServicesChildingFlag.Get()
}

// GetManagedServicesChildingFlagOk returns a tuple with the ManagedServicesChildingFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetManagedServicesChildingFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagedServicesChildingFlag.Get(), o.ManagedServicesChildingFlag.IsSet()
}

// HasManagedServicesChildingFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasManagedServicesChildingFlag() bool {
	if o != nil && o.ManagedServicesChildingFlag.IsSet() {
		return true
	}

	return false
}

// SetManagedServicesChildingFlag gets a reference to the given NullableBool and assigns it to the ManagedServicesChildingFlag field.
func (o *IntegratorLogin) SetManagedServicesChildingFlag(v bool) {
	o.ManagedServicesChildingFlag.Set(&v)
}

// SetManagedServicesChildingFlagNil sets the value for ManagedServicesChildingFlag to be an explicit nil
func (o *IntegratorLogin) SetManagedServicesChildingFlagNil() {
	o.ManagedServicesChildingFlag.Set(nil)
}

// UnsetManagedServicesChildingFlag ensures that no value is present for ManagedServicesChildingFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetManagedServicesChildingFlag() {
	o.ManagedServicesChildingFlag.Unset()
}

// GetContactApiFlag returns the ContactApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetContactApiFlag() bool {
	if o == nil || IsNil(o.ContactApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ContactApiFlag.Get()
}

// GetContactApiFlagOk returns a tuple with the ContactApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetContactApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactApiFlag.Get(), o.ContactApiFlag.IsSet()
}

// HasContactApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasContactApiFlag() bool {
	if o != nil && o.ContactApiFlag.IsSet() {
		return true
	}

	return false
}

// SetContactApiFlag gets a reference to the given NullableBool and assigns it to the ContactApiFlag field.
func (o *IntegratorLogin) SetContactApiFlag(v bool) {
	o.ContactApiFlag.Set(&v)
}

// SetContactApiFlagNil sets the value for ContactApiFlag to be an explicit nil
func (o *IntegratorLogin) SetContactApiFlagNil() {
	o.ContactApiFlag.Set(nil)
}

// UnsetContactApiFlag ensures that no value is present for ContactApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetContactApiFlag() {
	o.ContactApiFlag.Unset()
}

// GetContactCallbackUrl returns the ContactCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetContactCallbackUrl() string {
	if o == nil || IsNil(o.ContactCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ContactCallbackUrl
}

// GetContactCallbackUrlOk returns a tuple with the ContactCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetContactCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ContactCallbackUrl) {
		return nil, false
	}
	return o.ContactCallbackUrl, true
}

// HasContactCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasContactCallbackUrl() bool {
	if o != nil && !IsNil(o.ContactCallbackUrl) {
		return true
	}

	return false
}

// SetContactCallbackUrl gets a reference to the given string and assigns it to the ContactCallbackUrl field.
func (o *IntegratorLogin) SetContactCallbackUrl(v string) {
	o.ContactCallbackUrl = &v
}

// GetContactLegacyCallbackFlag returns the ContactLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetContactLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ContactLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ContactLegacyCallbackFlag.Get()
}

// GetContactLegacyCallbackFlagOk returns a tuple with the ContactLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetContactLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactLegacyCallbackFlag.Get(), o.ContactLegacyCallbackFlag.IsSet()
}

// HasContactLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasContactLegacyCallbackFlag() bool {
	if o != nil && o.ContactLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetContactLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ContactLegacyCallbackFlag field.
func (o *IntegratorLogin) SetContactLegacyCallbackFlag(v bool) {
	o.ContactLegacyCallbackFlag.Set(&v)
}

// SetContactLegacyCallbackFlagNil sets the value for ContactLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetContactLegacyCallbackFlagNil() {
	o.ContactLegacyCallbackFlag.Set(nil)
}

// UnsetContactLegacyCallbackFlag ensures that no value is present for ContactLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetContactLegacyCallbackFlag() {
	o.ContactLegacyCallbackFlag.Unset()
}

// GetCompanyApiFlag returns the CompanyApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetCompanyApiFlag() bool {
	if o == nil || IsNil(o.CompanyApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompanyApiFlag.Get()
}

// GetCompanyApiFlagOk returns a tuple with the CompanyApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetCompanyApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyApiFlag.Get(), o.CompanyApiFlag.IsSet()
}

// HasCompanyApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasCompanyApiFlag() bool {
	if o != nil && o.CompanyApiFlag.IsSet() {
		return true
	}

	return false
}

// SetCompanyApiFlag gets a reference to the given NullableBool and assigns it to the CompanyApiFlag field.
func (o *IntegratorLogin) SetCompanyApiFlag(v bool) {
	o.CompanyApiFlag.Set(&v)
}

// SetCompanyApiFlagNil sets the value for CompanyApiFlag to be an explicit nil
func (o *IntegratorLogin) SetCompanyApiFlagNil() {
	o.CompanyApiFlag.Set(nil)
}

// UnsetCompanyApiFlag ensures that no value is present for CompanyApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetCompanyApiFlag() {
	o.CompanyApiFlag.Unset()
}

// GetCompanyCallbackUrl returns the CompanyCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetCompanyCallbackUrl() string {
	if o == nil || IsNil(o.CompanyCallbackUrl) {
		var ret string
		return ret
	}
	return *o.CompanyCallbackUrl
}

// GetCompanyCallbackUrlOk returns a tuple with the CompanyCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetCompanyCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyCallbackUrl) {
		return nil, false
	}
	return o.CompanyCallbackUrl, true
}

// HasCompanyCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasCompanyCallbackUrl() bool {
	if o != nil && !IsNil(o.CompanyCallbackUrl) {
		return true
	}

	return false
}

// SetCompanyCallbackUrl gets a reference to the given string and assigns it to the CompanyCallbackUrl field.
func (o *IntegratorLogin) SetCompanyCallbackUrl(v string) {
	o.CompanyCallbackUrl = &v
}

// GetCompanyLegacyCallbackFlag returns the CompanyLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetCompanyLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.CompanyLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompanyLegacyCallbackFlag.Get()
}

// GetCompanyLegacyCallbackFlagOk returns a tuple with the CompanyLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetCompanyLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyLegacyCallbackFlag.Get(), o.CompanyLegacyCallbackFlag.IsSet()
}

// HasCompanyLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasCompanyLegacyCallbackFlag() bool {
	if o != nil && o.CompanyLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetCompanyLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the CompanyLegacyCallbackFlag field.
func (o *IntegratorLogin) SetCompanyLegacyCallbackFlag(v bool) {
	o.CompanyLegacyCallbackFlag.Set(&v)
}

// SetCompanyLegacyCallbackFlagNil sets the value for CompanyLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetCompanyLegacyCallbackFlagNil() {
	o.CompanyLegacyCallbackFlag.Set(nil)
}

// UnsetCompanyLegacyCallbackFlag ensures that no value is present for CompanyLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetCompanyLegacyCallbackFlag() {
	o.CompanyLegacyCallbackFlag.Unset()
}

// GetActivityApiFlag returns the ActivityApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetActivityApiFlag() bool {
	if o == nil || IsNil(o.ActivityApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ActivityApiFlag.Get()
}

// GetActivityApiFlagOk returns a tuple with the ActivityApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetActivityApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityApiFlag.Get(), o.ActivityApiFlag.IsSet()
}

// HasActivityApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasActivityApiFlag() bool {
	if o != nil && o.ActivityApiFlag.IsSet() {
		return true
	}

	return false
}

// SetActivityApiFlag gets a reference to the given NullableBool and assigns it to the ActivityApiFlag field.
func (o *IntegratorLogin) SetActivityApiFlag(v bool) {
	o.ActivityApiFlag.Set(&v)
}

// SetActivityApiFlagNil sets the value for ActivityApiFlag to be an explicit nil
func (o *IntegratorLogin) SetActivityApiFlagNil() {
	o.ActivityApiFlag.Set(nil)
}

// UnsetActivityApiFlag ensures that no value is present for ActivityApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetActivityApiFlag() {
	o.ActivityApiFlag.Unset()
}

// GetActivityCallbackUrl returns the ActivityCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetActivityCallbackUrl() string {
	if o == nil || IsNil(o.ActivityCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ActivityCallbackUrl
}

// GetActivityCallbackUrlOk returns a tuple with the ActivityCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetActivityCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityCallbackUrl) {
		return nil, false
	}
	return o.ActivityCallbackUrl, true
}

// HasActivityCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasActivityCallbackUrl() bool {
	if o != nil && !IsNil(o.ActivityCallbackUrl) {
		return true
	}

	return false
}

// SetActivityCallbackUrl gets a reference to the given string and assigns it to the ActivityCallbackUrl field.
func (o *IntegratorLogin) SetActivityCallbackUrl(v string) {
	o.ActivityCallbackUrl = &v
}

// GetActivityLegacyCallbackFlag returns the ActivityLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetActivityLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ActivityLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ActivityLegacyCallbackFlag.Get()
}

// GetActivityLegacyCallbackFlagOk returns a tuple with the ActivityLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetActivityLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityLegacyCallbackFlag.Get(), o.ActivityLegacyCallbackFlag.IsSet()
}

// HasActivityLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasActivityLegacyCallbackFlag() bool {
	if o != nil && o.ActivityLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetActivityLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ActivityLegacyCallbackFlag field.
func (o *IntegratorLogin) SetActivityLegacyCallbackFlag(v bool) {
	o.ActivityLegacyCallbackFlag.Set(&v)
}

// SetActivityLegacyCallbackFlagNil sets the value for ActivityLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetActivityLegacyCallbackFlagNil() {
	o.ActivityLegacyCallbackFlag.Set(nil)
}

// UnsetActivityLegacyCallbackFlag ensures that no value is present for ActivityLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetActivityLegacyCallbackFlag() {
	o.ActivityLegacyCallbackFlag.Unset()
}

// GetInvoiceApiFlag returns the InvoiceApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetInvoiceApiFlag() bool {
	if o == nil || IsNil(o.InvoiceApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvoiceApiFlag.Get()
}

// GetInvoiceApiFlagOk returns a tuple with the InvoiceApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetInvoiceApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceApiFlag.Get(), o.InvoiceApiFlag.IsSet()
}

// HasInvoiceApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasInvoiceApiFlag() bool {
	if o != nil && o.InvoiceApiFlag.IsSet() {
		return true
	}

	return false
}

// SetInvoiceApiFlag gets a reference to the given NullableBool and assigns it to the InvoiceApiFlag field.
func (o *IntegratorLogin) SetInvoiceApiFlag(v bool) {
	o.InvoiceApiFlag.Set(&v)
}

// SetInvoiceApiFlagNil sets the value for InvoiceApiFlag to be an explicit nil
func (o *IntegratorLogin) SetInvoiceApiFlagNil() {
	o.InvoiceApiFlag.Set(nil)
}

// UnsetInvoiceApiFlag ensures that no value is present for InvoiceApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetInvoiceApiFlag() {
	o.InvoiceApiFlag.Unset()
}

// GetProductApiFlag returns the ProductApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetProductApiFlag() bool {
	if o == nil || IsNil(o.ProductApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProductApiFlag.Get()
}

// GetProductApiFlagOk returns a tuple with the ProductApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetProductApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductApiFlag.Get(), o.ProductApiFlag.IsSet()
}

// HasProductApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasProductApiFlag() bool {
	if o != nil && o.ProductApiFlag.IsSet() {
		return true
	}

	return false
}

// SetProductApiFlag gets a reference to the given NullableBool and assigns it to the ProductApiFlag field.
func (o *IntegratorLogin) SetProductApiFlag(v bool) {
	o.ProductApiFlag.Set(&v)
}

// SetProductApiFlagNil sets the value for ProductApiFlag to be an explicit nil
func (o *IntegratorLogin) SetProductApiFlagNil() {
	o.ProductApiFlag.Set(nil)
}

// UnsetProductApiFlag ensures that no value is present for ProductApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetProductApiFlag() {
	o.ProductApiFlag.Unset()
}

// GetProductCallbackUrl returns the ProductCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetProductCallbackUrl() string {
	if o == nil || IsNil(o.ProductCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ProductCallbackUrl
}

// GetProductCallbackUrlOk returns a tuple with the ProductCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetProductCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCallbackUrl) {
		return nil, false
	}
	return o.ProductCallbackUrl, true
}

// HasProductCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasProductCallbackUrl() bool {
	if o != nil && !IsNil(o.ProductCallbackUrl) {
		return true
	}

	return false
}

// SetProductCallbackUrl gets a reference to the given string and assigns it to the ProductCallbackUrl field.
func (o *IntegratorLogin) SetProductCallbackUrl(v string) {
	o.ProductCallbackUrl = &v
}

// GetProductLegacyCallbackFlag returns the ProductLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetProductLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ProductLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProductLegacyCallbackFlag.Get()
}

// GetProductLegacyCallbackFlagOk returns a tuple with the ProductLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetProductLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductLegacyCallbackFlag.Get(), o.ProductLegacyCallbackFlag.IsSet()
}

// HasProductLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasProductLegacyCallbackFlag() bool {
	if o != nil && o.ProductLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetProductLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ProductLegacyCallbackFlag field.
func (o *IntegratorLogin) SetProductLegacyCallbackFlag(v bool) {
	o.ProductLegacyCallbackFlag.Set(&v)
}

// SetProductLegacyCallbackFlagNil sets the value for ProductLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetProductLegacyCallbackFlagNil() {
	o.ProductLegacyCallbackFlag.Set(nil)
}

// UnsetProductLegacyCallbackFlag ensures that no value is present for ProductLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetProductLegacyCallbackFlag() {
	o.ProductLegacyCallbackFlag.Unset()
}

// GetOpportunityApiFlag returns the OpportunityApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetOpportunityApiFlag() bool {
	if o == nil || IsNil(o.OpportunityApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OpportunityApiFlag.Get()
}

// GetOpportunityApiFlagOk returns a tuple with the OpportunityApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetOpportunityApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityApiFlag.Get(), o.OpportunityApiFlag.IsSet()
}

// HasOpportunityApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasOpportunityApiFlag() bool {
	if o != nil && o.OpportunityApiFlag.IsSet() {
		return true
	}

	return false
}

// SetOpportunityApiFlag gets a reference to the given NullableBool and assigns it to the OpportunityApiFlag field.
func (o *IntegratorLogin) SetOpportunityApiFlag(v bool) {
	o.OpportunityApiFlag.Set(&v)
}

// SetOpportunityApiFlagNil sets the value for OpportunityApiFlag to be an explicit nil
func (o *IntegratorLogin) SetOpportunityApiFlagNil() {
	o.OpportunityApiFlag.Set(nil)
}

// UnsetOpportunityApiFlag ensures that no value is present for OpportunityApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetOpportunityApiFlag() {
	o.OpportunityApiFlag.Unset()
}

// GetOpportunityCallbackUrl returns the OpportunityCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetOpportunityCallbackUrl() string {
	if o == nil || IsNil(o.OpportunityCallbackUrl) {
		var ret string
		return ret
	}
	return *o.OpportunityCallbackUrl
}

// GetOpportunityCallbackUrlOk returns a tuple with the OpportunityCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetOpportunityCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OpportunityCallbackUrl) {
		return nil, false
	}
	return o.OpportunityCallbackUrl, true
}

// HasOpportunityCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasOpportunityCallbackUrl() bool {
	if o != nil && !IsNil(o.OpportunityCallbackUrl) {
		return true
	}

	return false
}

// SetOpportunityCallbackUrl gets a reference to the given string and assigns it to the OpportunityCallbackUrl field.
func (o *IntegratorLogin) SetOpportunityCallbackUrl(v string) {
	o.OpportunityCallbackUrl = &v
}

// GetOpportunityLegacyCallbackFlag returns the OpportunityLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetOpportunityLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.OpportunityLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OpportunityLegacyCallbackFlag.Get()
}

// GetOpportunityLegacyCallbackFlagOk returns a tuple with the OpportunityLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetOpportunityLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityLegacyCallbackFlag.Get(), o.OpportunityLegacyCallbackFlag.IsSet()
}

// HasOpportunityLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasOpportunityLegacyCallbackFlag() bool {
	if o != nil && o.OpportunityLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetOpportunityLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the OpportunityLegacyCallbackFlag field.
func (o *IntegratorLogin) SetOpportunityLegacyCallbackFlag(v bool) {
	o.OpportunityLegacyCallbackFlag.Set(&v)
}

// SetOpportunityLegacyCallbackFlagNil sets the value for OpportunityLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetOpportunityLegacyCallbackFlagNil() {
	o.OpportunityLegacyCallbackFlag.Set(nil)
}

// UnsetOpportunityLegacyCallbackFlag ensures that no value is present for OpportunityLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetOpportunityLegacyCallbackFlag() {
	o.OpportunityLegacyCallbackFlag.Unset()
}

// GetOpportunityConversionApiFlag returns the OpportunityConversionApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetOpportunityConversionApiFlag() bool {
	if o == nil || IsNil(o.OpportunityConversionApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OpportunityConversionApiFlag.Get()
}

// GetOpportunityConversionApiFlagOk returns a tuple with the OpportunityConversionApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetOpportunityConversionApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityConversionApiFlag.Get(), o.OpportunityConversionApiFlag.IsSet()
}

// HasOpportunityConversionApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasOpportunityConversionApiFlag() bool {
	if o != nil && o.OpportunityConversionApiFlag.IsSet() {
		return true
	}

	return false
}

// SetOpportunityConversionApiFlag gets a reference to the given NullableBool and assigns it to the OpportunityConversionApiFlag field.
func (o *IntegratorLogin) SetOpportunityConversionApiFlag(v bool) {
	o.OpportunityConversionApiFlag.Set(&v)
}

// SetOpportunityConversionApiFlagNil sets the value for OpportunityConversionApiFlag to be an explicit nil
func (o *IntegratorLogin) SetOpportunityConversionApiFlagNil() {
	o.OpportunityConversionApiFlag.Set(nil)
}

// UnsetOpportunityConversionApiFlag ensures that no value is present for OpportunityConversionApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetOpportunityConversionApiFlag() {
	o.OpportunityConversionApiFlag.Unset()
}

// GetMemberApiFlag returns the MemberApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetMemberApiFlag() bool {
	if o == nil || IsNil(o.MemberApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MemberApiFlag.Get()
}

// GetMemberApiFlagOk returns a tuple with the MemberApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetMemberApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberApiFlag.Get(), o.MemberApiFlag.IsSet()
}

// HasMemberApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasMemberApiFlag() bool {
	if o != nil && o.MemberApiFlag.IsSet() {
		return true
	}

	return false
}

// SetMemberApiFlag gets a reference to the given NullableBool and assigns it to the MemberApiFlag field.
func (o *IntegratorLogin) SetMemberApiFlag(v bool) {
	o.MemberApiFlag.Set(&v)
}

// SetMemberApiFlagNil sets the value for MemberApiFlag to be an explicit nil
func (o *IntegratorLogin) SetMemberApiFlagNil() {
	o.MemberApiFlag.Set(nil)
}

// UnsetMemberApiFlag ensures that no value is present for MemberApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetMemberApiFlag() {
	o.MemberApiFlag.Unset()
}

// GetMarketingApiFlag returns the MarketingApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetMarketingApiFlag() bool {
	if o == nil || IsNil(o.MarketingApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MarketingApiFlag.Get()
}

// GetMarketingApiFlagOk returns a tuple with the MarketingApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetMarketingApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarketingApiFlag.Get(), o.MarketingApiFlag.IsSet()
}

// HasMarketingApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasMarketingApiFlag() bool {
	if o != nil && o.MarketingApiFlag.IsSet() {
		return true
	}

	return false
}

// SetMarketingApiFlag gets a reference to the given NullableBool and assigns it to the MarketingApiFlag field.
func (o *IntegratorLogin) SetMarketingApiFlag(v bool) {
	o.MarketingApiFlag.Set(&v)
}

// SetMarketingApiFlagNil sets the value for MarketingApiFlag to be an explicit nil
func (o *IntegratorLogin) SetMarketingApiFlagNil() {
	o.MarketingApiFlag.Set(nil)
}

// UnsetMarketingApiFlag ensures that no value is present for MarketingApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetMarketingApiFlag() {
	o.MarketingApiFlag.Unset()
}

// GetPurchasingApiFlag returns the PurchasingApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetPurchasingApiFlag() bool {
	if o == nil || IsNil(o.PurchasingApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PurchasingApiFlag.Get()
}

// GetPurchasingApiFlagOk returns a tuple with the PurchasingApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetPurchasingApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchasingApiFlag.Get(), o.PurchasingApiFlag.IsSet()
}

// HasPurchasingApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasPurchasingApiFlag() bool {
	if o != nil && o.PurchasingApiFlag.IsSet() {
		return true
	}

	return false
}

// SetPurchasingApiFlag gets a reference to the given NullableBool and assigns it to the PurchasingApiFlag field.
func (o *IntegratorLogin) SetPurchasingApiFlag(v bool) {
	o.PurchasingApiFlag.Set(&v)
}

// SetPurchasingApiFlagNil sets the value for PurchasingApiFlag to be an explicit nil
func (o *IntegratorLogin) SetPurchasingApiFlagNil() {
	o.PurchasingApiFlag.Set(nil)
}

// UnsetPurchasingApiFlag ensures that no value is present for PurchasingApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetPurchasingApiFlag() {
	o.PurchasingApiFlag.Unset()
}

// GetPurchasingCallbackUrl returns the PurchasingCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetPurchasingCallbackUrl() string {
	if o == nil || IsNil(o.PurchasingCallbackUrl) {
		var ret string
		return ret
	}
	return *o.PurchasingCallbackUrl
}

// GetPurchasingCallbackUrlOk returns a tuple with the PurchasingCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetPurchasingCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PurchasingCallbackUrl) {
		return nil, false
	}
	return o.PurchasingCallbackUrl, true
}

// HasPurchasingCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasPurchasingCallbackUrl() bool {
	if o != nil && !IsNil(o.PurchasingCallbackUrl) {
		return true
	}

	return false
}

// SetPurchasingCallbackUrl gets a reference to the given string and assigns it to the PurchasingCallbackUrl field.
func (o *IntegratorLogin) SetPurchasingCallbackUrl(v string) {
	o.PurchasingCallbackUrl = &v
}

// GetPurchasingLegacyCallbackFlag returns the PurchasingLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetPurchasingLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.PurchasingLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PurchasingLegacyCallbackFlag.Get()
}

// GetPurchasingLegacyCallbackFlagOk returns a tuple with the PurchasingLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetPurchasingLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchasingLegacyCallbackFlag.Get(), o.PurchasingLegacyCallbackFlag.IsSet()
}

// HasPurchasingLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasPurchasingLegacyCallbackFlag() bool {
	if o != nil && o.PurchasingLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetPurchasingLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the PurchasingLegacyCallbackFlag field.
func (o *IntegratorLogin) SetPurchasingLegacyCallbackFlag(v bool) {
	o.PurchasingLegacyCallbackFlag.Set(&v)
}

// SetPurchasingLegacyCallbackFlagNil sets the value for PurchasingLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetPurchasingLegacyCallbackFlagNil() {
	o.PurchasingLegacyCallbackFlag.Set(nil)
}

// UnsetPurchasingLegacyCallbackFlag ensures that no value is present for PurchasingLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetPurchasingLegacyCallbackFlag() {
	o.PurchasingLegacyCallbackFlag.Unset()
}

// GetReportingApiFlag returns the ReportingApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetReportingApiFlag() bool {
	if o == nil || IsNil(o.ReportingApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ReportingApiFlag.Get()
}

// GetReportingApiFlagOk returns a tuple with the ReportingApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetReportingApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportingApiFlag.Get(), o.ReportingApiFlag.IsSet()
}

// HasReportingApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasReportingApiFlag() bool {
	if o != nil && o.ReportingApiFlag.IsSet() {
		return true
	}

	return false
}

// SetReportingApiFlag gets a reference to the given NullableBool and assigns it to the ReportingApiFlag field.
func (o *IntegratorLogin) SetReportingApiFlag(v bool) {
	o.ReportingApiFlag.Set(&v)
}

// SetReportingApiFlagNil sets the value for ReportingApiFlag to be an explicit nil
func (o *IntegratorLogin) SetReportingApiFlagNil() {
	o.ReportingApiFlag.Set(nil)
}

// UnsetReportingApiFlag ensures that no value is present for ReportingApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetReportingApiFlag() {
	o.ReportingApiFlag.Unset()
}

// GetSystemApiFlag returns the SystemApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetSystemApiFlag() bool {
	if o == nil || IsNil(o.SystemApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SystemApiFlag.Get()
}

// GetSystemApiFlagOk returns a tuple with the SystemApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetSystemApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemApiFlag.Get(), o.SystemApiFlag.IsSet()
}

// HasSystemApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasSystemApiFlag() bool {
	if o != nil && o.SystemApiFlag.IsSet() {
		return true
	}

	return false
}

// SetSystemApiFlag gets a reference to the given NullableBool and assigns it to the SystemApiFlag field.
func (o *IntegratorLogin) SetSystemApiFlag(v bool) {
	o.SystemApiFlag.Set(&v)
}

// SetSystemApiFlagNil sets the value for SystemApiFlag to be an explicit nil
func (o *IntegratorLogin) SetSystemApiFlagNil() {
	o.SystemApiFlag.Set(nil)
}

// UnsetSystemApiFlag ensures that no value is present for SystemApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetSystemApiFlag() {
	o.SystemApiFlag.Unset()
}

// GetProjectApiFlag returns the ProjectApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetProjectApiFlag() bool {
	if o == nil || IsNil(o.ProjectApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProjectApiFlag.Get()
}

// GetProjectApiFlagOk returns a tuple with the ProjectApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetProjectApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectApiFlag.Get(), o.ProjectApiFlag.IsSet()
}

// HasProjectApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasProjectApiFlag() bool {
	if o != nil && o.ProjectApiFlag.IsSet() {
		return true
	}

	return false
}

// SetProjectApiFlag gets a reference to the given NullableBool and assigns it to the ProjectApiFlag field.
func (o *IntegratorLogin) SetProjectApiFlag(v bool) {
	o.ProjectApiFlag.Set(&v)
}

// SetProjectApiFlagNil sets the value for ProjectApiFlag to be an explicit nil
func (o *IntegratorLogin) SetProjectApiFlagNil() {
	o.ProjectApiFlag.Set(nil)
}

// UnsetProjectApiFlag ensures that no value is present for ProjectApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetProjectApiFlag() {
	o.ProjectApiFlag.Unset()
}

// GetProjectCallbackUrl returns the ProjectCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetProjectCallbackUrl() string {
	if o == nil || IsNil(o.ProjectCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ProjectCallbackUrl
}

// GetProjectCallbackUrlOk returns a tuple with the ProjectCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetProjectCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectCallbackUrl) {
		return nil, false
	}
	return o.ProjectCallbackUrl, true
}

// HasProjectCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasProjectCallbackUrl() bool {
	if o != nil && !IsNil(o.ProjectCallbackUrl) {
		return true
	}

	return false
}

// SetProjectCallbackUrl gets a reference to the given string and assigns it to the ProjectCallbackUrl field.
func (o *IntegratorLogin) SetProjectCallbackUrl(v string) {
	o.ProjectCallbackUrl = &v
}

// GetProjectLegacyCallbackFlag returns the ProjectLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetProjectLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ProjectLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProjectLegacyCallbackFlag.Get()
}

// GetProjectLegacyCallbackFlagOk returns a tuple with the ProjectLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetProjectLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectLegacyCallbackFlag.Get(), o.ProjectLegacyCallbackFlag.IsSet()
}

// HasProjectLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasProjectLegacyCallbackFlag() bool {
	if o != nil && o.ProjectLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetProjectLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ProjectLegacyCallbackFlag field.
func (o *IntegratorLogin) SetProjectLegacyCallbackFlag(v bool) {
	o.ProjectLegacyCallbackFlag.Set(&v)
}

// SetProjectLegacyCallbackFlagNil sets the value for ProjectLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetProjectLegacyCallbackFlagNil() {
	o.ProjectLegacyCallbackFlag.Set(nil)
}

// UnsetProjectLegacyCallbackFlag ensures that no value is present for ProjectLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetProjectLegacyCallbackFlag() {
	o.ProjectLegacyCallbackFlag.Unset()
}

// GetConfigurationApiFlag returns the ConfigurationApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetConfigurationApiFlag() bool {
	if o == nil || IsNil(o.ConfigurationApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ConfigurationApiFlag.Get()
}

// GetConfigurationApiFlagOk returns a tuple with the ConfigurationApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetConfigurationApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationApiFlag.Get(), o.ConfigurationApiFlag.IsSet()
}

// HasConfigurationApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasConfigurationApiFlag() bool {
	if o != nil && o.ConfigurationApiFlag.IsSet() {
		return true
	}

	return false
}

// SetConfigurationApiFlag gets a reference to the given NullableBool and assigns it to the ConfigurationApiFlag field.
func (o *IntegratorLogin) SetConfigurationApiFlag(v bool) {
	o.ConfigurationApiFlag.Set(&v)
}

// SetConfigurationApiFlagNil sets the value for ConfigurationApiFlag to be an explicit nil
func (o *IntegratorLogin) SetConfigurationApiFlagNil() {
	o.ConfigurationApiFlag.Set(nil)
}

// UnsetConfigurationApiFlag ensures that no value is present for ConfigurationApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetConfigurationApiFlag() {
	o.ConfigurationApiFlag.Unset()
}

// GetConfigurationAutoChildFlag returns the ConfigurationAutoChildFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetConfigurationAutoChildFlag() bool {
	if o == nil || IsNil(o.ConfigurationAutoChildFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ConfigurationAutoChildFlag.Get()
}

// GetConfigurationAutoChildFlagOk returns a tuple with the ConfigurationAutoChildFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetConfigurationAutoChildFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationAutoChildFlag.Get(), o.ConfigurationAutoChildFlag.IsSet()
}

// HasConfigurationAutoChildFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasConfigurationAutoChildFlag() bool {
	if o != nil && o.ConfigurationAutoChildFlag.IsSet() {
		return true
	}

	return false
}

// SetConfigurationAutoChildFlag gets a reference to the given NullableBool and assigns it to the ConfigurationAutoChildFlag field.
func (o *IntegratorLogin) SetConfigurationAutoChildFlag(v bool) {
	o.ConfigurationAutoChildFlag.Set(&v)
}

// SetConfigurationAutoChildFlagNil sets the value for ConfigurationAutoChildFlag to be an explicit nil
func (o *IntegratorLogin) SetConfigurationAutoChildFlagNil() {
	o.ConfigurationAutoChildFlag.Set(nil)
}

// UnsetConfigurationAutoChildFlag ensures that no value is present for ConfigurationAutoChildFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetConfigurationAutoChildFlag() {
	o.ConfigurationAutoChildFlag.Unset()
}

// GetConfigurationChildlingFlag returns the ConfigurationChildlingFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetConfigurationChildlingFlag() bool {
	if o == nil || IsNil(o.ConfigurationChildlingFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ConfigurationChildlingFlag.Get()
}

// GetConfigurationChildlingFlagOk returns a tuple with the ConfigurationChildlingFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetConfigurationChildlingFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationChildlingFlag.Get(), o.ConfigurationChildlingFlag.IsSet()
}

// HasConfigurationChildlingFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasConfigurationChildlingFlag() bool {
	if o != nil && o.ConfigurationChildlingFlag.IsSet() {
		return true
	}

	return false
}

// SetConfigurationChildlingFlag gets a reference to the given NullableBool and assigns it to the ConfigurationChildlingFlag field.
func (o *IntegratorLogin) SetConfigurationChildlingFlag(v bool) {
	o.ConfigurationChildlingFlag.Set(&v)
}

// SetConfigurationChildlingFlagNil sets the value for ConfigurationChildlingFlag to be an explicit nil
func (o *IntegratorLogin) SetConfigurationChildlingFlagNil() {
	o.ConfigurationChildlingFlag.Set(nil)
}

// UnsetConfigurationChildlingFlag ensures that no value is present for ConfigurationChildlingFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetConfigurationChildlingFlag() {
	o.ConfigurationChildlingFlag.Unset()
}

// GetConfigurationCallbackUrl returns the ConfigurationCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetConfigurationCallbackUrl() string {
	if o == nil || IsNil(o.ConfigurationCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ConfigurationCallbackUrl
}

// GetConfigurationCallbackUrlOk returns a tuple with the ConfigurationCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetConfigurationCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationCallbackUrl) {
		return nil, false
	}
	return o.ConfigurationCallbackUrl, true
}

// HasConfigurationCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasConfigurationCallbackUrl() bool {
	if o != nil && !IsNil(o.ConfigurationCallbackUrl) {
		return true
	}

	return false
}

// SetConfigurationCallbackUrl gets a reference to the given string and assigns it to the ConfigurationCallbackUrl field.
func (o *IntegratorLogin) SetConfigurationCallbackUrl(v string) {
	o.ConfigurationCallbackUrl = &v
}

// GetConfigurationLegacyCallbackFlag returns the ConfigurationLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetConfigurationLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ConfigurationLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ConfigurationLegacyCallbackFlag.Get()
}

// GetConfigurationLegacyCallbackFlagOk returns a tuple with the ConfigurationLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetConfigurationLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationLegacyCallbackFlag.Get(), o.ConfigurationLegacyCallbackFlag.IsSet()
}

// HasConfigurationLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasConfigurationLegacyCallbackFlag() bool {
	if o != nil && o.ConfigurationLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetConfigurationLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ConfigurationLegacyCallbackFlag field.
func (o *IntegratorLogin) SetConfigurationLegacyCallbackFlag(v bool) {
	o.ConfigurationLegacyCallbackFlag.Set(&v)
}

// SetConfigurationLegacyCallbackFlagNil sets the value for ConfigurationLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetConfigurationLegacyCallbackFlagNil() {
	o.ConfigurationLegacyCallbackFlag.Set(nil)
}

// UnsetConfigurationLegacyCallbackFlag ensures that no value is present for ConfigurationLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetConfigurationLegacyCallbackFlag() {
	o.ConfigurationLegacyCallbackFlag.Unset()
}

// GetScheduleApiFlag returns the ScheduleApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetScheduleApiFlag() bool {
	if o == nil || IsNil(o.ScheduleApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ScheduleApiFlag.Get()
}

// GetScheduleApiFlagOk returns a tuple with the ScheduleApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetScheduleApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleApiFlag.Get(), o.ScheduleApiFlag.IsSet()
}

// HasScheduleApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasScheduleApiFlag() bool {
	if o != nil && o.ScheduleApiFlag.IsSet() {
		return true
	}

	return false
}

// SetScheduleApiFlag gets a reference to the given NullableBool and assigns it to the ScheduleApiFlag field.
func (o *IntegratorLogin) SetScheduleApiFlag(v bool) {
	o.ScheduleApiFlag.Set(&v)
}

// SetScheduleApiFlagNil sets the value for ScheduleApiFlag to be an explicit nil
func (o *IntegratorLogin) SetScheduleApiFlagNil() {
	o.ScheduleApiFlag.Set(nil)
}

// UnsetScheduleApiFlag ensures that no value is present for ScheduleApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetScheduleApiFlag() {
	o.ScheduleApiFlag.Unset()
}

// GetScheduleCallbackUrl returns the ScheduleCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetScheduleCallbackUrl() string {
	if o == nil || IsNil(o.ScheduleCallbackUrl) {
		var ret string
		return ret
	}
	return *o.ScheduleCallbackUrl
}

// GetScheduleCallbackUrlOk returns a tuple with the ScheduleCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetScheduleCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleCallbackUrl) {
		return nil, false
	}
	return o.ScheduleCallbackUrl, true
}

// HasScheduleCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasScheduleCallbackUrl() bool {
	if o != nil && !IsNil(o.ScheduleCallbackUrl) {
		return true
	}

	return false
}

// SetScheduleCallbackUrl gets a reference to the given string and assigns it to the ScheduleCallbackUrl field.
func (o *IntegratorLogin) SetScheduleCallbackUrl(v string) {
	o.ScheduleCallbackUrl = &v
}

// GetScheduleLegacyCallbackFlag returns the ScheduleLegacyCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetScheduleLegacyCallbackFlag() bool {
	if o == nil || IsNil(o.ScheduleLegacyCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ScheduleLegacyCallbackFlag.Get()
}

// GetScheduleLegacyCallbackFlagOk returns a tuple with the ScheduleLegacyCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetScheduleLegacyCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleLegacyCallbackFlag.Get(), o.ScheduleLegacyCallbackFlag.IsSet()
}

// HasScheduleLegacyCallbackFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasScheduleLegacyCallbackFlag() bool {
	if o != nil && o.ScheduleLegacyCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetScheduleLegacyCallbackFlag gets a reference to the given NullableBool and assigns it to the ScheduleLegacyCallbackFlag field.
func (o *IntegratorLogin) SetScheduleLegacyCallbackFlag(v bool) {
	o.ScheduleLegacyCallbackFlag.Set(&v)
}

// SetScheduleLegacyCallbackFlagNil sets the value for ScheduleLegacyCallbackFlag to be an explicit nil
func (o *IntegratorLogin) SetScheduleLegacyCallbackFlagNil() {
	o.ScheduleLegacyCallbackFlag.Set(nil)
}

// UnsetScheduleLegacyCallbackFlag ensures that no value is present for ScheduleLegacyCallbackFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetScheduleLegacyCallbackFlag() {
	o.ScheduleLegacyCallbackFlag.Unset()
}

// GetAgreementApiFlag returns the AgreementApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetAgreementApiFlag() bool {
	if o == nil || IsNil(o.AgreementApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AgreementApiFlag.Get()
}

// GetAgreementApiFlagOk returns a tuple with the AgreementApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetAgreementApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementApiFlag.Get(), o.AgreementApiFlag.IsSet()
}

// HasAgreementApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasAgreementApiFlag() bool {
	if o != nil && o.AgreementApiFlag.IsSet() {
		return true
	}

	return false
}

// SetAgreementApiFlag gets a reference to the given NullableBool and assigns it to the AgreementApiFlag field.
func (o *IntegratorLogin) SetAgreementApiFlag(v bool) {
	o.AgreementApiFlag.Set(&v)
}

// SetAgreementApiFlagNil sets the value for AgreementApiFlag to be an explicit nil
func (o *IntegratorLogin) SetAgreementApiFlagNil() {
	o.AgreementApiFlag.Set(nil)
}

// UnsetAgreementApiFlag ensures that no value is present for AgreementApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetAgreementApiFlag() {
	o.AgreementApiFlag.Unset()
}

// GetAgreementCallbackUrl returns the AgreementCallbackUrl field value if set, zero value otherwise.
func (o *IntegratorLogin) GetAgreementCallbackUrl() string {
	if o == nil || IsNil(o.AgreementCallbackUrl) {
		var ret string
		return ret
	}
	return *o.AgreementCallbackUrl
}

// GetAgreementCallbackUrlOk returns a tuple with the AgreementCallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetAgreementCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementCallbackUrl) {
		return nil, false
	}
	return o.AgreementCallbackUrl, true
}

// HasAgreementCallbackUrl returns a boolean if a field has been set.
func (o *IntegratorLogin) HasAgreementCallbackUrl() bool {
	if o != nil && !IsNil(o.AgreementCallbackUrl) {
		return true
	}

	return false
}

// SetAgreementCallbackUrl gets a reference to the given string and assigns it to the AgreementCallbackUrl field.
func (o *IntegratorLogin) SetAgreementCallbackUrl(v string) {
	o.AgreementCallbackUrl = &v
}

// GetAgreementCallbackLegacyFlag returns the AgreementCallbackLegacyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetAgreementCallbackLegacyFlag() bool {
	if o == nil || IsNil(o.AgreementCallbackLegacyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AgreementCallbackLegacyFlag.Get()
}

// GetAgreementCallbackLegacyFlagOk returns a tuple with the AgreementCallbackLegacyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetAgreementCallbackLegacyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementCallbackLegacyFlag.Get(), o.AgreementCallbackLegacyFlag.IsSet()
}

// HasAgreementCallbackLegacyFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasAgreementCallbackLegacyFlag() bool {
	if o != nil && o.AgreementCallbackLegacyFlag.IsSet() {
		return true
	}

	return false
}

// SetAgreementCallbackLegacyFlag gets a reference to the given NullableBool and assigns it to the AgreementCallbackLegacyFlag field.
func (o *IntegratorLogin) SetAgreementCallbackLegacyFlag(v bool) {
	o.AgreementCallbackLegacyFlag.Set(&v)
}

// SetAgreementCallbackLegacyFlagNil sets the value for AgreementCallbackLegacyFlag to be an explicit nil
func (o *IntegratorLogin) SetAgreementCallbackLegacyFlagNil() {
	o.AgreementCallbackLegacyFlag.Set(nil)
}

// UnsetAgreementCallbackLegacyFlag ensures that no value is present for AgreementCallbackLegacyFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetAgreementCallbackLegacyFlag() {
	o.AgreementCallbackLegacyFlag.Unset()
}

// GetDocumentApiFlag returns the DocumentApiFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegratorLogin) GetDocumentApiFlag() bool {
	if o == nil || IsNil(o.DocumentApiFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DocumentApiFlag.Get()
}

// GetDocumentApiFlagOk returns a tuple with the DocumentApiFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegratorLogin) GetDocumentApiFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentApiFlag.Get(), o.DocumentApiFlag.IsSet()
}

// HasDocumentApiFlag returns a boolean if a field has been set.
func (o *IntegratorLogin) HasDocumentApiFlag() bool {
	if o != nil && o.DocumentApiFlag.IsSet() {
		return true
	}

	return false
}

// SetDocumentApiFlag gets a reference to the given NullableBool and assigns it to the DocumentApiFlag field.
func (o *IntegratorLogin) SetDocumentApiFlag(v bool) {
	o.DocumentApiFlag.Set(&v)
}

// SetDocumentApiFlagNil sets the value for DocumentApiFlag to be an explicit nil
func (o *IntegratorLogin) SetDocumentApiFlagNil() {
	o.DocumentApiFlag.Set(nil)
}

// UnsetDocumentApiFlag ensures that no value is present for DocumentApiFlag, not even an explicit nil
func (o *IntegratorLogin) UnsetDocumentApiFlag() {
	o.DocumentApiFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *IntegratorLogin) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegratorLogin) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *IntegratorLogin) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *IntegratorLogin) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o IntegratorLogin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegratorLogin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["username"] = o.Username
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if o.CanAccessAllRecordsFlag.IsSet() {
		toSerialize["canAccessAllRecordsFlag"] = o.CanAccessAllRecordsFlag.Get()
	}
	if o.CanAccessAllApisFlag.IsSet() {
		toSerialize["canAccessAllApisFlag"] = o.CanAccessAllApisFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.DateInactivated) {
		toSerialize["dateInactivated"] = o.DateInactivated
	}
	if !IsNil(o.InactivatedBy) {
		toSerialize["inactivatedBy"] = o.InactivatedBy
	}
	if o.ServiceTicketApiFlag.IsSet() {
		toSerialize["serviceTicketApiFlag"] = o.ServiceTicketApiFlag.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.ServiceBoardCallbackUrl) {
		toSerialize["serviceBoardCallbackUrl"] = o.ServiceBoardCallbackUrl
	}
	if o.ServiceBoardLegacyCallbackFlag.IsSet() {
		toSerialize["serviceBoardLegacyCallbackFlag"] = o.ServiceBoardLegacyCallbackFlag.Get()
	}
	if o.TimeEntryApiFlag.IsSet() {
		toSerialize["timeEntryApiFlag"] = o.TimeEntryApiFlag.Get()
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.TimeEntryCallbackUrl) {
		toSerialize["timeEntryCallbackUrl"] = o.TimeEntryCallbackUrl
	}
	if o.TimeEntryLegacyCallbackFlag.IsSet() {
		toSerialize["timeEntryLegacyCallbackFlag"] = o.TimeEntryLegacyCallbackFlag.Get()
	}
	if o.ManagedServicesApiFlag.IsSet() {
		toSerialize["managedServicesApiFlag"] = o.ManagedServicesApiFlag.Get()
	}
	if o.ManagedServicesAutoChildFlag.IsSet() {
		toSerialize["managedServicesAutoChildFlag"] = o.ManagedServicesAutoChildFlag.Get()
	}
	if o.ManagedServicesChildingFlag.IsSet() {
		toSerialize["managedServicesChildingFlag"] = o.ManagedServicesChildingFlag.Get()
	}
	if o.ContactApiFlag.IsSet() {
		toSerialize["contactApiFlag"] = o.ContactApiFlag.Get()
	}
	if !IsNil(o.ContactCallbackUrl) {
		toSerialize["contactCallbackUrl"] = o.ContactCallbackUrl
	}
	if o.ContactLegacyCallbackFlag.IsSet() {
		toSerialize["contactLegacyCallbackFlag"] = o.ContactLegacyCallbackFlag.Get()
	}
	if o.CompanyApiFlag.IsSet() {
		toSerialize["companyApiFlag"] = o.CompanyApiFlag.Get()
	}
	if !IsNil(o.CompanyCallbackUrl) {
		toSerialize["companyCallbackUrl"] = o.CompanyCallbackUrl
	}
	if o.CompanyLegacyCallbackFlag.IsSet() {
		toSerialize["companyLegacyCallbackFlag"] = o.CompanyLegacyCallbackFlag.Get()
	}
	if o.ActivityApiFlag.IsSet() {
		toSerialize["activityApiFlag"] = o.ActivityApiFlag.Get()
	}
	if !IsNil(o.ActivityCallbackUrl) {
		toSerialize["activityCallbackUrl"] = o.ActivityCallbackUrl
	}
	if o.ActivityLegacyCallbackFlag.IsSet() {
		toSerialize["activityLegacyCallbackFlag"] = o.ActivityLegacyCallbackFlag.Get()
	}
	if o.InvoiceApiFlag.IsSet() {
		toSerialize["invoiceApiFlag"] = o.InvoiceApiFlag.Get()
	}
	if o.ProductApiFlag.IsSet() {
		toSerialize["productApiFlag"] = o.ProductApiFlag.Get()
	}
	if !IsNil(o.ProductCallbackUrl) {
		toSerialize["productCallbackUrl"] = o.ProductCallbackUrl
	}
	if o.ProductLegacyCallbackFlag.IsSet() {
		toSerialize["productLegacyCallbackFlag"] = o.ProductLegacyCallbackFlag.Get()
	}
	if o.OpportunityApiFlag.IsSet() {
		toSerialize["opportunityApiFlag"] = o.OpportunityApiFlag.Get()
	}
	if !IsNil(o.OpportunityCallbackUrl) {
		toSerialize["opportunityCallbackUrl"] = o.OpportunityCallbackUrl
	}
	if o.OpportunityLegacyCallbackFlag.IsSet() {
		toSerialize["opportunityLegacyCallbackFlag"] = o.OpportunityLegacyCallbackFlag.Get()
	}
	if o.OpportunityConversionApiFlag.IsSet() {
		toSerialize["opportunityConversionApiFlag"] = o.OpportunityConversionApiFlag.Get()
	}
	if o.MemberApiFlag.IsSet() {
		toSerialize["memberApiFlag"] = o.MemberApiFlag.Get()
	}
	if o.MarketingApiFlag.IsSet() {
		toSerialize["marketingApiFlag"] = o.MarketingApiFlag.Get()
	}
	if o.PurchasingApiFlag.IsSet() {
		toSerialize["purchasingApiFlag"] = o.PurchasingApiFlag.Get()
	}
	if !IsNil(o.PurchasingCallbackUrl) {
		toSerialize["purchasingCallbackUrl"] = o.PurchasingCallbackUrl
	}
	if o.PurchasingLegacyCallbackFlag.IsSet() {
		toSerialize["purchasingLegacyCallbackFlag"] = o.PurchasingLegacyCallbackFlag.Get()
	}
	if o.ReportingApiFlag.IsSet() {
		toSerialize["reportingApiFlag"] = o.ReportingApiFlag.Get()
	}
	if o.SystemApiFlag.IsSet() {
		toSerialize["systemApiFlag"] = o.SystemApiFlag.Get()
	}
	if o.ProjectApiFlag.IsSet() {
		toSerialize["projectApiFlag"] = o.ProjectApiFlag.Get()
	}
	if !IsNil(o.ProjectCallbackUrl) {
		toSerialize["projectCallbackUrl"] = o.ProjectCallbackUrl
	}
	if o.ProjectLegacyCallbackFlag.IsSet() {
		toSerialize["projectLegacyCallbackFlag"] = o.ProjectLegacyCallbackFlag.Get()
	}
	if o.ConfigurationApiFlag.IsSet() {
		toSerialize["configurationApiFlag"] = o.ConfigurationApiFlag.Get()
	}
	if o.ConfigurationAutoChildFlag.IsSet() {
		toSerialize["configurationAutoChildFlag"] = o.ConfigurationAutoChildFlag.Get()
	}
	if o.ConfigurationChildlingFlag.IsSet() {
		toSerialize["configurationChildlingFlag"] = o.ConfigurationChildlingFlag.Get()
	}
	if !IsNil(o.ConfigurationCallbackUrl) {
		toSerialize["configurationCallbackUrl"] = o.ConfigurationCallbackUrl
	}
	if o.ConfigurationLegacyCallbackFlag.IsSet() {
		toSerialize["configurationLegacyCallbackFlag"] = o.ConfigurationLegacyCallbackFlag.Get()
	}
	if o.ScheduleApiFlag.IsSet() {
		toSerialize["scheduleApiFlag"] = o.ScheduleApiFlag.Get()
	}
	if !IsNil(o.ScheduleCallbackUrl) {
		toSerialize["scheduleCallbackUrl"] = o.ScheduleCallbackUrl
	}
	if o.ScheduleLegacyCallbackFlag.IsSet() {
		toSerialize["scheduleLegacyCallbackFlag"] = o.ScheduleLegacyCallbackFlag.Get()
	}
	if o.AgreementApiFlag.IsSet() {
		toSerialize["agreementApiFlag"] = o.AgreementApiFlag.Get()
	}
	if !IsNil(o.AgreementCallbackUrl) {
		toSerialize["agreementCallbackUrl"] = o.AgreementCallbackUrl
	}
	if o.AgreementCallbackLegacyFlag.IsSet() {
		toSerialize["agreementCallbackLegacyFlag"] = o.AgreementCallbackLegacyFlag.Get()
	}
	if o.DocumentApiFlag.IsSet() {
		toSerialize["documentApiFlag"] = o.DocumentApiFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *IntegratorLogin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegratorLogin := _IntegratorLogin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntegratorLogin)

	if err != nil {
		return err
	}

	*o = IntegratorLogin(varIntegratorLogin)

	return err
}

type NullableIntegratorLogin struct {
	value *IntegratorLogin
	isSet bool
}

func (v NullableIntegratorLogin) Get() *IntegratorLogin {
	return v.value
}

func (v *NullableIntegratorLogin) Set(val *IntegratorLogin) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegratorLogin) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegratorLogin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegratorLogin(val *IntegratorLogin) *NullableIntegratorLogin {
	return &NullableIntegratorLogin{value: val, isSet: true}
}

func (v NullableIntegratorLogin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegratorLogin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
