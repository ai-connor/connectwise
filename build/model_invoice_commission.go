/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the InvoiceCommission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceCommission{}

// InvoiceCommission struct for InvoiceCommission
type InvoiceCommission struct {
	Id               *int32                `json:"id,omitempty"`
	Member           *MemberReference      `json:"member,omitempty"`
	Percent          NullableFloat64       `json:"percent,omitempty"`
	SplitPercent     NullableFloat64       `json:"splitPercent,omitempty"`
	Adjustment       NullableFloat64       `json:"adjustment,omitempty"`
	NetAmount        NullableFloat64       `json:"netAmount,omitempty"`
	Amount           NullableFloat64       `json:"amount,omitempty"`
	Invoice          *InvoiceReference     `json:"invoice,omitempty"`
	Opportunity      *OpportunityReference `json:"opportunity,omitempty"`
	Agreement        *AgreementReference   `json:"agreement,omitempty"`
	Activity         *ActivityReference    `json:"activity,omitempty"`
	Ticket           *TicketReference      `json:"ticket,omitempty"`
	Project          *ProjectReference     `json:"project,omitempty"`
	SalesOrder       *SalesOrderReference  `json:"salesOrder,omitempty"`
	AdjustedBy       *string               `json:"adjustedBy,omitempty"`
	AdjustedDate     *string               `json:"adjustedDate,omitempty"`
	AdjustmentReason *string               `json:"adjustmentReason,omitempty"`
	Info             *map[string]string    `json:"_info,omitempty"`
}

// NewInvoiceCommission instantiates a new InvoiceCommission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceCommission() *InvoiceCommission {
	this := InvoiceCommission{}
	return &this
}

// NewInvoiceCommissionWithDefaults instantiates a new InvoiceCommission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceCommissionWithDefaults() *InvoiceCommission {
	this := InvoiceCommission{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InvoiceCommission) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InvoiceCommission) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InvoiceCommission) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *InvoiceCommission) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *InvoiceCommission) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *InvoiceCommission) SetMember(v MemberReference) {
	o.Member = &v
}

// GetPercent returns the Percent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceCommission) GetPercent() float64 {
	if o == nil || IsNil(o.Percent.Get()) {
		var ret float64
		return ret
	}
	return *o.Percent.Get()
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceCommission) GetPercentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Percent.Get(), o.Percent.IsSet()
}

// HasPercent returns a boolean if a field has been set.
func (o *InvoiceCommission) HasPercent() bool {
	if o != nil && o.Percent.IsSet() {
		return true
	}

	return false
}

// SetPercent gets a reference to the given NullableFloat64 and assigns it to the Percent field.
func (o *InvoiceCommission) SetPercent(v float64) {
	o.Percent.Set(&v)
}

// SetPercentNil sets the value for Percent to be an explicit nil
func (o *InvoiceCommission) SetPercentNil() {
	o.Percent.Set(nil)
}

// UnsetPercent ensures that no value is present for Percent, not even an explicit nil
func (o *InvoiceCommission) UnsetPercent() {
	o.Percent.Unset()
}

// GetSplitPercent returns the SplitPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceCommission) GetSplitPercent() float64 {
	if o == nil || IsNil(o.SplitPercent.Get()) {
		var ret float64
		return ret
	}
	return *o.SplitPercent.Get()
}

// GetSplitPercentOk returns a tuple with the SplitPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceCommission) GetSplitPercentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SplitPercent.Get(), o.SplitPercent.IsSet()
}

// HasSplitPercent returns a boolean if a field has been set.
func (o *InvoiceCommission) HasSplitPercent() bool {
	if o != nil && o.SplitPercent.IsSet() {
		return true
	}

	return false
}

// SetSplitPercent gets a reference to the given NullableFloat64 and assigns it to the SplitPercent field.
func (o *InvoiceCommission) SetSplitPercent(v float64) {
	o.SplitPercent.Set(&v)
}

// SetSplitPercentNil sets the value for SplitPercent to be an explicit nil
func (o *InvoiceCommission) SetSplitPercentNil() {
	o.SplitPercent.Set(nil)
}

// UnsetSplitPercent ensures that no value is present for SplitPercent, not even an explicit nil
func (o *InvoiceCommission) UnsetSplitPercent() {
	o.SplitPercent.Unset()
}

// GetAdjustment returns the Adjustment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceCommission) GetAdjustment() float64 {
	if o == nil || IsNil(o.Adjustment.Get()) {
		var ret float64
		return ret
	}
	return *o.Adjustment.Get()
}

// GetAdjustmentOk returns a tuple with the Adjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceCommission) GetAdjustmentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjustment.Get(), o.Adjustment.IsSet()
}

// HasAdjustment returns a boolean if a field has been set.
func (o *InvoiceCommission) HasAdjustment() bool {
	if o != nil && o.Adjustment.IsSet() {
		return true
	}

	return false
}

// SetAdjustment gets a reference to the given NullableFloat64 and assigns it to the Adjustment field.
func (o *InvoiceCommission) SetAdjustment(v float64) {
	o.Adjustment.Set(&v)
}

// SetAdjustmentNil sets the value for Adjustment to be an explicit nil
func (o *InvoiceCommission) SetAdjustmentNil() {
	o.Adjustment.Set(nil)
}

// UnsetAdjustment ensures that no value is present for Adjustment, not even an explicit nil
func (o *InvoiceCommission) UnsetAdjustment() {
	o.Adjustment.Unset()
}

// GetNetAmount returns the NetAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceCommission) GetNetAmount() float64 {
	if o == nil || IsNil(o.NetAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.NetAmount.Get()
}

// GetNetAmountOk returns a tuple with the NetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceCommission) GetNetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetAmount.Get(), o.NetAmount.IsSet()
}

// HasNetAmount returns a boolean if a field has been set.
func (o *InvoiceCommission) HasNetAmount() bool {
	if o != nil && o.NetAmount.IsSet() {
		return true
	}

	return false
}

// SetNetAmount gets a reference to the given NullableFloat64 and assigns it to the NetAmount field.
func (o *InvoiceCommission) SetNetAmount(v float64) {
	o.NetAmount.Set(&v)
}

// SetNetAmountNil sets the value for NetAmount to be an explicit nil
func (o *InvoiceCommission) SetNetAmountNil() {
	o.NetAmount.Set(nil)
}

// UnsetNetAmount ensures that no value is present for NetAmount, not even an explicit nil
func (o *InvoiceCommission) UnsetNetAmount() {
	o.NetAmount.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceCommission) GetAmount() float64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret float64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceCommission) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *InvoiceCommission) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat64 and assigns it to the Amount field.
func (o *InvoiceCommission) SetAmount(v float64) {
	o.Amount.Set(&v)
}

// SetAmountNil sets the value for Amount to be an explicit nil
func (o *InvoiceCommission) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *InvoiceCommission) UnsetAmount() {
	o.Amount.Unset()
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *InvoiceCommission) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *InvoiceCommission) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *InvoiceCommission) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *InvoiceCommission) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *InvoiceCommission) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *InvoiceCommission) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *InvoiceCommission) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *InvoiceCommission) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *InvoiceCommission) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *InvoiceCommission) GetActivity() ActivityReference {
	if o == nil || IsNil(o.Activity) {
		var ret ActivityReference
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetActivityOk() (*ActivityReference, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *InvoiceCommission) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given ActivityReference and assigns it to the Activity field.
func (o *InvoiceCommission) SetActivity(v ActivityReference) {
	o.Activity = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *InvoiceCommission) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *InvoiceCommission) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *InvoiceCommission) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *InvoiceCommission) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *InvoiceCommission) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *InvoiceCommission) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetSalesOrder returns the SalesOrder field value if set, zero value otherwise.
func (o *InvoiceCommission) GetSalesOrder() SalesOrderReference {
	if o == nil || IsNil(o.SalesOrder) {
		var ret SalesOrderReference
		return ret
	}
	return *o.SalesOrder
}

// GetSalesOrderOk returns a tuple with the SalesOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetSalesOrderOk() (*SalesOrderReference, bool) {
	if o == nil || IsNil(o.SalesOrder) {
		return nil, false
	}
	return o.SalesOrder, true
}

// HasSalesOrder returns a boolean if a field has been set.
func (o *InvoiceCommission) HasSalesOrder() bool {
	if o != nil && !IsNil(o.SalesOrder) {
		return true
	}

	return false
}

// SetSalesOrder gets a reference to the given SalesOrderReference and assigns it to the SalesOrder field.
func (o *InvoiceCommission) SetSalesOrder(v SalesOrderReference) {
	o.SalesOrder = &v
}

// GetAdjustedBy returns the AdjustedBy field value if set, zero value otherwise.
func (o *InvoiceCommission) GetAdjustedBy() string {
	if o == nil || IsNil(o.AdjustedBy) {
		var ret string
		return ret
	}
	return *o.AdjustedBy
}

// GetAdjustedByOk returns a tuple with the AdjustedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetAdjustedByOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedBy) {
		return nil, false
	}
	return o.AdjustedBy, true
}

// HasAdjustedBy returns a boolean if a field has been set.
func (o *InvoiceCommission) HasAdjustedBy() bool {
	if o != nil && !IsNil(o.AdjustedBy) {
		return true
	}

	return false
}

// SetAdjustedBy gets a reference to the given string and assigns it to the AdjustedBy field.
func (o *InvoiceCommission) SetAdjustedBy(v string) {
	o.AdjustedBy = &v
}

// GetAdjustedDate returns the AdjustedDate field value if set, zero value otherwise.
func (o *InvoiceCommission) GetAdjustedDate() string {
	if o == nil || IsNil(o.AdjustedDate) {
		var ret string
		return ret
	}
	return *o.AdjustedDate
}

// GetAdjustedDateOk returns a tuple with the AdjustedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetAdjustedDateOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedDate) {
		return nil, false
	}
	return o.AdjustedDate, true
}

// HasAdjustedDate returns a boolean if a field has been set.
func (o *InvoiceCommission) HasAdjustedDate() bool {
	if o != nil && !IsNil(o.AdjustedDate) {
		return true
	}

	return false
}

// SetAdjustedDate gets a reference to the given string and assigns it to the AdjustedDate field.
func (o *InvoiceCommission) SetAdjustedDate(v string) {
	o.AdjustedDate = &v
}

// GetAdjustmentReason returns the AdjustmentReason field value if set, zero value otherwise.
func (o *InvoiceCommission) GetAdjustmentReason() string {
	if o == nil || IsNil(o.AdjustmentReason) {
		var ret string
		return ret
	}
	return *o.AdjustmentReason
}

// GetAdjustmentReasonOk returns a tuple with the AdjustmentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetAdjustmentReasonOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustmentReason) {
		return nil, false
	}
	return o.AdjustmentReason, true
}

// HasAdjustmentReason returns a boolean if a field has been set.
func (o *InvoiceCommission) HasAdjustmentReason() bool {
	if o != nil && !IsNil(o.AdjustmentReason) {
		return true
	}

	return false
}

// SetAdjustmentReason gets a reference to the given string and assigns it to the AdjustmentReason field.
func (o *InvoiceCommission) SetAdjustmentReason(v string) {
	o.AdjustmentReason = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *InvoiceCommission) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceCommission) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *InvoiceCommission) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *InvoiceCommission) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o InvoiceCommission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceCommission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if o.Percent.IsSet() {
		toSerialize["percent"] = o.Percent.Get()
	}
	if o.SplitPercent.IsSet() {
		toSerialize["splitPercent"] = o.SplitPercent.Get()
	}
	if o.Adjustment.IsSet() {
		toSerialize["adjustment"] = o.Adjustment.Get()
	}
	if o.NetAmount.IsSet() {
		toSerialize["netAmount"] = o.NetAmount.Get()
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.SalesOrder) {
		toSerialize["salesOrder"] = o.SalesOrder
	}
	if !IsNil(o.AdjustedBy) {
		toSerialize["adjustedBy"] = o.AdjustedBy
	}
	if !IsNil(o.AdjustedDate) {
		toSerialize["adjustedDate"] = o.AdjustedDate
	}
	if !IsNil(o.AdjustmentReason) {
		toSerialize["adjustmentReason"] = o.AdjustmentReason
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableInvoiceCommission struct {
	value *InvoiceCommission
	isSet bool
}

func (v NullableInvoiceCommission) Get() *InvoiceCommission {
	return v.value
}

func (v *NullableInvoiceCommission) Set(val *InvoiceCommission) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceCommission) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceCommission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceCommission(val *InvoiceCommission) *NullableInvoiceCommission {
	return &NullableInvoiceCommission{value: val, isSet: true}
}

func (v NullableInvoiceCommission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceCommission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
