/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KnowledgeBaseCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KnowledgeBaseCategory{}

// KnowledgeBaseCategory struct for KnowledgeBaseCategory
type KnowledgeBaseCategory struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name       string                     `json:"name"`
	Location   *SystemLocationReference   `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Approver   *MemberReference           `json:"approver,omitempty"`
	Info       *map[string]string         `json:"_info,omitempty"`
}

type _KnowledgeBaseCategory KnowledgeBaseCategory

// NewKnowledgeBaseCategory instantiates a new KnowledgeBaseCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnowledgeBaseCategory(name string) *KnowledgeBaseCategory {
	this := KnowledgeBaseCategory{}
	this.Name = name
	return &this
}

// NewKnowledgeBaseCategoryWithDefaults instantiates a new KnowledgeBaseCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnowledgeBaseCategoryWithDefaults() *KnowledgeBaseCategory {
	this := KnowledgeBaseCategory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KnowledgeBaseCategory) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseCategory) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KnowledgeBaseCategory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KnowledgeBaseCategory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *KnowledgeBaseCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KnowledgeBaseCategory) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *KnowledgeBaseCategory) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseCategory) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *KnowledgeBaseCategory) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *KnowledgeBaseCategory) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *KnowledgeBaseCategory) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseCategory) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *KnowledgeBaseCategory) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *KnowledgeBaseCategory) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetApprover returns the Approver field value if set, zero value otherwise.
func (o *KnowledgeBaseCategory) GetApprover() MemberReference {
	if o == nil || IsNil(o.Approver) {
		var ret MemberReference
		return ret
	}
	return *o.Approver
}

// GetApproverOk returns a tuple with the Approver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseCategory) GetApproverOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Approver) {
		return nil, false
	}
	return o.Approver, true
}

// HasApprover returns a boolean if a field has been set.
func (o *KnowledgeBaseCategory) HasApprover() bool {
	if o != nil && !IsNil(o.Approver) {
		return true
	}

	return false
}

// SetApprover gets a reference to the given MemberReference and assigns it to the Approver field.
func (o *KnowledgeBaseCategory) SetApprover(v MemberReference) {
	o.Approver = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *KnowledgeBaseCategory) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseCategory) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *KnowledgeBaseCategory) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *KnowledgeBaseCategory) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o KnowledgeBaseCategory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KnowledgeBaseCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Approver) {
		toSerialize["approver"] = o.Approver
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *KnowledgeBaseCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKnowledgeBaseCategory := _KnowledgeBaseCategory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKnowledgeBaseCategory)

	if err != nil {
		return err
	}

	*o = KnowledgeBaseCategory(varKnowledgeBaseCategory)

	return err
}

type NullableKnowledgeBaseCategory struct {
	value *KnowledgeBaseCategory
	isSet bool
}

func (v NullableKnowledgeBaseCategory) Get() *KnowledgeBaseCategory {
	return v.value
}

func (v *NullableKnowledgeBaseCategory) Set(val *KnowledgeBaseCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableKnowledgeBaseCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableKnowledgeBaseCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnowledgeBaseCategory(val *KnowledgeBaseCategory) *NullableKnowledgeBaseCategory {
	return &NullableKnowledgeBaseCategory{value: val, isSet: true}
}

func (v NullableKnowledgeBaseCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnowledgeBaseCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
