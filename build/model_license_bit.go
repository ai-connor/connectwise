/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the LicenseBit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseBit{}

// LicenseBit struct for LicenseBit
type LicenseBit struct {
	Name       *string `json:"name,omitempty"`
	ActiveFlag *bool   `json:"activeFlag,omitempty"`
}

// NewLicenseBit instantiates a new LicenseBit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseBit() *LicenseBit {
	this := LicenseBit{}
	return &this
}

// NewLicenseBitWithDefaults instantiates a new LicenseBit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseBitWithDefaults() *LicenseBit {
	this := LicenseBit{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseBit) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseBit) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseBit) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseBit) SetName(v string) {
	o.Name = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *LicenseBit) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseBit) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *LicenseBit) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *LicenseBit) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

func (o LicenseBit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseBit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["activeFlag"] = o.ActiveFlag
	}
	return toSerialize, nil
}

type NullableLicenseBit struct {
	value *LicenseBit
	isSet bool
}

func (v NullableLicenseBit) Get() *LicenseBit {
	return v.value
}

func (v *NullableLicenseBit) Set(val *LicenseBit) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseBit) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseBit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseBit(val *LicenseBit) *NullableLicenseBit {
	return &NullableLicenseBit{value: val, isSet: true}
}

func (v NullableLicenseBit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseBit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
