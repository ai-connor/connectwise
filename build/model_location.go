/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location struct for Location
type Location struct {
	Id             *int32                           `json:"id,omitempty"`
	OwnerLevelId   NullableInt32                    `json:"ownerLevelId,omitempty"`
	StructureLevel CorporateStructureLevelReference `json:"structureLevel"`
	//  Max length: 50;
	Name      string                   `json:"name"`
	Manager   *MemberReference         `json:"manager,omitempty"`
	ReportsTo *SystemLocationReference `json:"reportsTo,omitempty"`
	//  Max length: 50;
	SalesRep      *string                 `json:"salesRep,omitempty"`
	TimeZoneSetup *TimeZoneSetupReference `json:"timeZoneSetup,omitempty"`
	Calendar      *CalendarReference      `json:"calendar,omitempty"`
	//  Max length: 50;
	OverrideAddressLine1 *string `json:"overrideAddressLine1,omitempty"`
	//  Max length: 50;
	OverrideAddressLine2 *string `json:"overrideAddressLine2,omitempty"`
	//  Max length: 50;
	OverrideCity *string `json:"overrideCity,omitempty"`
	//  Max length: 50;
	OverrideState *string `json:"overrideState,omitempty"`
	//  Max length: 12;
	OverrideZip     *string           `json:"overrideZip,omitempty"`
	OverrideCountry *CountryReference `json:"overrideCountry,omitempty"`
	//  Max length: 15;
	OverridePhoneNumber *string `json:"overridePhoneNumber,omitempty"`
	//  Max length: 15;
	OverrideFaxNumber *string `json:"overrideFaxNumber,omitempty"`
	//  Max length: 100;
	OwaUrl *string `json:"owaUrl,omitempty"`
	//  Max length: 10;
	PayrollXref   *string            `json:"payrollXref,omitempty"`
	LocationFlag  NullableBool       `json:"locationFlag,omitempty"`
	ClientFlag    NullableBool       `json:"clientFlag,omitempty"`
	WorkRoleIds   []int32            `json:"workRoleIds,omitempty"`
	DepartmentIds []int32            `json:"departmentIds,omitempty"`
	Info          *map[string]string `json:"_info,omitempty"`
}

type _Location Location

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation(structureLevel CorporateStructureLevelReference, name string) *Location {
	this := Location{}
	this.StructureLevel = structureLevel
	this.Name = name
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Location) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Location) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Location) SetId(v int32) {
	o.Id = &v
}

// GetOwnerLevelId returns the OwnerLevelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Location) GetOwnerLevelId() int32 {
	if o == nil || IsNil(o.OwnerLevelId.Get()) {
		var ret int32
		return ret
	}
	return *o.OwnerLevelId.Get()
}

// GetOwnerLevelIdOk returns a tuple with the OwnerLevelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Location) GetOwnerLevelIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerLevelId.Get(), o.OwnerLevelId.IsSet()
}

// HasOwnerLevelId returns a boolean if a field has been set.
func (o *Location) HasOwnerLevelId() bool {
	if o != nil && o.OwnerLevelId.IsSet() {
		return true
	}

	return false
}

// SetOwnerLevelId gets a reference to the given NullableInt32 and assigns it to the OwnerLevelId field.
func (o *Location) SetOwnerLevelId(v int32) {
	o.OwnerLevelId.Set(&v)
}

// SetOwnerLevelIdNil sets the value for OwnerLevelId to be an explicit nil
func (o *Location) SetOwnerLevelIdNil() {
	o.OwnerLevelId.Set(nil)
}

// UnsetOwnerLevelId ensures that no value is present for OwnerLevelId, not even an explicit nil
func (o *Location) UnsetOwnerLevelId() {
	o.OwnerLevelId.Unset()
}

// GetStructureLevel returns the StructureLevel field value
func (o *Location) GetStructureLevel() CorporateStructureLevelReference {
	if o == nil {
		var ret CorporateStructureLevelReference
		return ret
	}

	return o.StructureLevel
}

// GetStructureLevelOk returns a tuple with the StructureLevel field value
// and a boolean to check if the value has been set.
func (o *Location) GetStructureLevelOk() (*CorporateStructureLevelReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StructureLevel, true
}

// SetStructureLevel sets field value
func (o *Location) SetStructureLevel(v CorporateStructureLevelReference) {
	o.StructureLevel = v
}

// GetName returns the Name field value
func (o *Location) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Location) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Location) SetName(v string) {
	o.Name = v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *Location) GetManager() MemberReference {
	if o == nil || IsNil(o.Manager) {
		var ret MemberReference
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *Location) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given MemberReference and assigns it to the Manager field.
func (o *Location) SetManager(v MemberReference) {
	o.Manager = &v
}

// GetReportsTo returns the ReportsTo field value if set, zero value otherwise.
func (o *Location) GetReportsTo() SystemLocationReference {
	if o == nil || IsNil(o.ReportsTo) {
		var ret SystemLocationReference
		return ret
	}
	return *o.ReportsTo
}

// GetReportsToOk returns a tuple with the ReportsTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetReportsToOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.ReportsTo) {
		return nil, false
	}
	return o.ReportsTo, true
}

// HasReportsTo returns a boolean if a field has been set.
func (o *Location) HasReportsTo() bool {
	if o != nil && !IsNil(o.ReportsTo) {
		return true
	}

	return false
}

// SetReportsTo gets a reference to the given SystemLocationReference and assigns it to the ReportsTo field.
func (o *Location) SetReportsTo(v SystemLocationReference) {
	o.ReportsTo = &v
}

// GetSalesRep returns the SalesRep field value if set, zero value otherwise.
func (o *Location) GetSalesRep() string {
	if o == nil || IsNil(o.SalesRep) {
		var ret string
		return ret
	}
	return *o.SalesRep
}

// GetSalesRepOk returns a tuple with the SalesRep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetSalesRepOk() (*string, bool) {
	if o == nil || IsNil(o.SalesRep) {
		return nil, false
	}
	return o.SalesRep, true
}

// HasSalesRep returns a boolean if a field has been set.
func (o *Location) HasSalesRep() bool {
	if o != nil && !IsNil(o.SalesRep) {
		return true
	}

	return false
}

// SetSalesRep gets a reference to the given string and assigns it to the SalesRep field.
func (o *Location) SetSalesRep(v string) {
	o.SalesRep = &v
}

// GetTimeZoneSetup returns the TimeZoneSetup field value if set, zero value otherwise.
func (o *Location) GetTimeZoneSetup() TimeZoneSetupReference {
	if o == nil || IsNil(o.TimeZoneSetup) {
		var ret TimeZoneSetupReference
		return ret
	}
	return *o.TimeZoneSetup
}

// GetTimeZoneSetupOk returns a tuple with the TimeZoneSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetTimeZoneSetupOk() (*TimeZoneSetupReference, bool) {
	if o == nil || IsNil(o.TimeZoneSetup) {
		return nil, false
	}
	return o.TimeZoneSetup, true
}

// HasTimeZoneSetup returns a boolean if a field has been set.
func (o *Location) HasTimeZoneSetup() bool {
	if o != nil && !IsNil(o.TimeZoneSetup) {
		return true
	}

	return false
}

// SetTimeZoneSetup gets a reference to the given TimeZoneSetupReference and assigns it to the TimeZoneSetup field.
func (o *Location) SetTimeZoneSetup(v TimeZoneSetupReference) {
	o.TimeZoneSetup = &v
}

// GetCalendar returns the Calendar field value if set, zero value otherwise.
func (o *Location) GetCalendar() CalendarReference {
	if o == nil || IsNil(o.Calendar) {
		var ret CalendarReference
		return ret
	}
	return *o.Calendar
}

// GetCalendarOk returns a tuple with the Calendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetCalendarOk() (*CalendarReference, bool) {
	if o == nil || IsNil(o.Calendar) {
		return nil, false
	}
	return o.Calendar, true
}

// HasCalendar returns a boolean if a field has been set.
func (o *Location) HasCalendar() bool {
	if o != nil && !IsNil(o.Calendar) {
		return true
	}

	return false
}

// SetCalendar gets a reference to the given CalendarReference and assigns it to the Calendar field.
func (o *Location) SetCalendar(v CalendarReference) {
	o.Calendar = &v
}

// GetOverrideAddressLine1 returns the OverrideAddressLine1 field value if set, zero value otherwise.
func (o *Location) GetOverrideAddressLine1() string {
	if o == nil || IsNil(o.OverrideAddressLine1) {
		var ret string
		return ret
	}
	return *o.OverrideAddressLine1
}

// GetOverrideAddressLine1Ok returns a tuple with the OverrideAddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.OverrideAddressLine1) {
		return nil, false
	}
	return o.OverrideAddressLine1, true
}

// HasOverrideAddressLine1 returns a boolean if a field has been set.
func (o *Location) HasOverrideAddressLine1() bool {
	if o != nil && !IsNil(o.OverrideAddressLine1) {
		return true
	}

	return false
}

// SetOverrideAddressLine1 gets a reference to the given string and assigns it to the OverrideAddressLine1 field.
func (o *Location) SetOverrideAddressLine1(v string) {
	o.OverrideAddressLine1 = &v
}

// GetOverrideAddressLine2 returns the OverrideAddressLine2 field value if set, zero value otherwise.
func (o *Location) GetOverrideAddressLine2() string {
	if o == nil || IsNil(o.OverrideAddressLine2) {
		var ret string
		return ret
	}
	return *o.OverrideAddressLine2
}

// GetOverrideAddressLine2Ok returns a tuple with the OverrideAddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.OverrideAddressLine2) {
		return nil, false
	}
	return o.OverrideAddressLine2, true
}

// HasOverrideAddressLine2 returns a boolean if a field has been set.
func (o *Location) HasOverrideAddressLine2() bool {
	if o != nil && !IsNil(o.OverrideAddressLine2) {
		return true
	}

	return false
}

// SetOverrideAddressLine2 gets a reference to the given string and assigns it to the OverrideAddressLine2 field.
func (o *Location) SetOverrideAddressLine2(v string) {
	o.OverrideAddressLine2 = &v
}

// GetOverrideCity returns the OverrideCity field value if set, zero value otherwise.
func (o *Location) GetOverrideCity() string {
	if o == nil || IsNil(o.OverrideCity) {
		var ret string
		return ret
	}
	return *o.OverrideCity
}

// GetOverrideCityOk returns a tuple with the OverrideCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideCityOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideCity) {
		return nil, false
	}
	return o.OverrideCity, true
}

// HasOverrideCity returns a boolean if a field has been set.
func (o *Location) HasOverrideCity() bool {
	if o != nil && !IsNil(o.OverrideCity) {
		return true
	}

	return false
}

// SetOverrideCity gets a reference to the given string and assigns it to the OverrideCity field.
func (o *Location) SetOverrideCity(v string) {
	o.OverrideCity = &v
}

// GetOverrideState returns the OverrideState field value if set, zero value otherwise.
func (o *Location) GetOverrideState() string {
	if o == nil || IsNil(o.OverrideState) {
		var ret string
		return ret
	}
	return *o.OverrideState
}

// GetOverrideStateOk returns a tuple with the OverrideState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideStateOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideState) {
		return nil, false
	}
	return o.OverrideState, true
}

// HasOverrideState returns a boolean if a field has been set.
func (o *Location) HasOverrideState() bool {
	if o != nil && !IsNil(o.OverrideState) {
		return true
	}

	return false
}

// SetOverrideState gets a reference to the given string and assigns it to the OverrideState field.
func (o *Location) SetOverrideState(v string) {
	o.OverrideState = &v
}

// GetOverrideZip returns the OverrideZip field value if set, zero value otherwise.
func (o *Location) GetOverrideZip() string {
	if o == nil || IsNil(o.OverrideZip) {
		var ret string
		return ret
	}
	return *o.OverrideZip
}

// GetOverrideZipOk returns a tuple with the OverrideZip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideZipOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideZip) {
		return nil, false
	}
	return o.OverrideZip, true
}

// HasOverrideZip returns a boolean if a field has been set.
func (o *Location) HasOverrideZip() bool {
	if o != nil && !IsNil(o.OverrideZip) {
		return true
	}

	return false
}

// SetOverrideZip gets a reference to the given string and assigns it to the OverrideZip field.
func (o *Location) SetOverrideZip(v string) {
	o.OverrideZip = &v
}

// GetOverrideCountry returns the OverrideCountry field value if set, zero value otherwise.
func (o *Location) GetOverrideCountry() CountryReference {
	if o == nil || IsNil(o.OverrideCountry) {
		var ret CountryReference
		return ret
	}
	return *o.OverrideCountry
}

// GetOverrideCountryOk returns a tuple with the OverrideCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.OverrideCountry) {
		return nil, false
	}
	return o.OverrideCountry, true
}

// HasOverrideCountry returns a boolean if a field has been set.
func (o *Location) HasOverrideCountry() bool {
	if o != nil && !IsNil(o.OverrideCountry) {
		return true
	}

	return false
}

// SetOverrideCountry gets a reference to the given CountryReference and assigns it to the OverrideCountry field.
func (o *Location) SetOverrideCountry(v CountryReference) {
	o.OverrideCountry = &v
}

// GetOverridePhoneNumber returns the OverridePhoneNumber field value if set, zero value otherwise.
func (o *Location) GetOverridePhoneNumber() string {
	if o == nil || IsNil(o.OverridePhoneNumber) {
		var ret string
		return ret
	}
	return *o.OverridePhoneNumber
}

// GetOverridePhoneNumberOk returns a tuple with the OverridePhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverridePhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.OverridePhoneNumber) {
		return nil, false
	}
	return o.OverridePhoneNumber, true
}

// HasOverridePhoneNumber returns a boolean if a field has been set.
func (o *Location) HasOverridePhoneNumber() bool {
	if o != nil && !IsNil(o.OverridePhoneNumber) {
		return true
	}

	return false
}

// SetOverridePhoneNumber gets a reference to the given string and assigns it to the OverridePhoneNumber field.
func (o *Location) SetOverridePhoneNumber(v string) {
	o.OverridePhoneNumber = &v
}

// GetOverrideFaxNumber returns the OverrideFaxNumber field value if set, zero value otherwise.
func (o *Location) GetOverrideFaxNumber() string {
	if o == nil || IsNil(o.OverrideFaxNumber) {
		var ret string
		return ret
	}
	return *o.OverrideFaxNumber
}

// GetOverrideFaxNumberOk returns a tuple with the OverrideFaxNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOverrideFaxNumberOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideFaxNumber) {
		return nil, false
	}
	return o.OverrideFaxNumber, true
}

// HasOverrideFaxNumber returns a boolean if a field has been set.
func (o *Location) HasOverrideFaxNumber() bool {
	if o != nil && !IsNil(o.OverrideFaxNumber) {
		return true
	}

	return false
}

// SetOverrideFaxNumber gets a reference to the given string and assigns it to the OverrideFaxNumber field.
func (o *Location) SetOverrideFaxNumber(v string) {
	o.OverrideFaxNumber = &v
}

// GetOwaUrl returns the OwaUrl field value if set, zero value otherwise.
func (o *Location) GetOwaUrl() string {
	if o == nil || IsNil(o.OwaUrl) {
		var ret string
		return ret
	}
	return *o.OwaUrl
}

// GetOwaUrlOk returns a tuple with the OwaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOwaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OwaUrl) {
		return nil, false
	}
	return o.OwaUrl, true
}

// HasOwaUrl returns a boolean if a field has been set.
func (o *Location) HasOwaUrl() bool {
	if o != nil && !IsNil(o.OwaUrl) {
		return true
	}

	return false
}

// SetOwaUrl gets a reference to the given string and assigns it to the OwaUrl field.
func (o *Location) SetOwaUrl(v string) {
	o.OwaUrl = &v
}

// GetPayrollXref returns the PayrollXref field value if set, zero value otherwise.
func (o *Location) GetPayrollXref() string {
	if o == nil || IsNil(o.PayrollXref) {
		var ret string
		return ret
	}
	return *o.PayrollXref
}

// GetPayrollXrefOk returns a tuple with the PayrollXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetPayrollXrefOk() (*string, bool) {
	if o == nil || IsNil(o.PayrollXref) {
		return nil, false
	}
	return o.PayrollXref, true
}

// HasPayrollXref returns a boolean if a field has been set.
func (o *Location) HasPayrollXref() bool {
	if o != nil && !IsNil(o.PayrollXref) {
		return true
	}

	return false
}

// SetPayrollXref gets a reference to the given string and assigns it to the PayrollXref field.
func (o *Location) SetPayrollXref(v string) {
	o.PayrollXref = &v
}

// GetLocationFlag returns the LocationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Location) GetLocationFlag() bool {
	if o == nil || IsNil(o.LocationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LocationFlag.Get()
}

// GetLocationFlagOk returns a tuple with the LocationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Location) GetLocationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationFlag.Get(), o.LocationFlag.IsSet()
}

// HasLocationFlag returns a boolean if a field has been set.
func (o *Location) HasLocationFlag() bool {
	if o != nil && o.LocationFlag.IsSet() {
		return true
	}

	return false
}

// SetLocationFlag gets a reference to the given NullableBool and assigns it to the LocationFlag field.
func (o *Location) SetLocationFlag(v bool) {
	o.LocationFlag.Set(&v)
}

// SetLocationFlagNil sets the value for LocationFlag to be an explicit nil
func (o *Location) SetLocationFlagNil() {
	o.LocationFlag.Set(nil)
}

// UnsetLocationFlag ensures that no value is present for LocationFlag, not even an explicit nil
func (o *Location) UnsetLocationFlag() {
	o.LocationFlag.Unset()
}

// GetClientFlag returns the ClientFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Location) GetClientFlag() bool {
	if o == nil || IsNil(o.ClientFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClientFlag.Get()
}

// GetClientFlagOk returns a tuple with the ClientFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Location) GetClientFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientFlag.Get(), o.ClientFlag.IsSet()
}

// HasClientFlag returns a boolean if a field has been set.
func (o *Location) HasClientFlag() bool {
	if o != nil && o.ClientFlag.IsSet() {
		return true
	}

	return false
}

// SetClientFlag gets a reference to the given NullableBool and assigns it to the ClientFlag field.
func (o *Location) SetClientFlag(v bool) {
	o.ClientFlag.Set(&v)
}

// SetClientFlagNil sets the value for ClientFlag to be an explicit nil
func (o *Location) SetClientFlagNil() {
	o.ClientFlag.Set(nil)
}

// UnsetClientFlag ensures that no value is present for ClientFlag, not even an explicit nil
func (o *Location) UnsetClientFlag() {
	o.ClientFlag.Unset()
}

// GetWorkRoleIds returns the WorkRoleIds field value if set, zero value otherwise.
func (o *Location) GetWorkRoleIds() []int32 {
	if o == nil || IsNil(o.WorkRoleIds) {
		var ret []int32
		return ret
	}
	return o.WorkRoleIds
}

// GetWorkRoleIdsOk returns a tuple with the WorkRoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetWorkRoleIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.WorkRoleIds) {
		return nil, false
	}
	return o.WorkRoleIds, true
}

// HasWorkRoleIds returns a boolean if a field has been set.
func (o *Location) HasWorkRoleIds() bool {
	if o != nil && !IsNil(o.WorkRoleIds) {
		return true
	}

	return false
}

// SetWorkRoleIds gets a reference to the given []int32 and assigns it to the WorkRoleIds field.
func (o *Location) SetWorkRoleIds(v []int32) {
	o.WorkRoleIds = v
}

// GetDepartmentIds returns the DepartmentIds field value if set, zero value otherwise.
func (o *Location) GetDepartmentIds() []int32 {
	if o == nil || IsNil(o.DepartmentIds) {
		var ret []int32
		return ret
	}
	return o.DepartmentIds
}

// GetDepartmentIdsOk returns a tuple with the DepartmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetDepartmentIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DepartmentIds) {
		return nil, false
	}
	return o.DepartmentIds, true
}

// HasDepartmentIds returns a boolean if a field has been set.
func (o *Location) HasDepartmentIds() bool {
	if o != nil && !IsNil(o.DepartmentIds) {
		return true
	}

	return false
}

// SetDepartmentIds gets a reference to the given []int32 and assigns it to the DepartmentIds field.
func (o *Location) SetDepartmentIds(v []int32) {
	o.DepartmentIds = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Location) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Location) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Location) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.OwnerLevelId.IsSet() {
		toSerialize["ownerLevelId"] = o.OwnerLevelId.Get()
	}
	toSerialize["structureLevel"] = o.StructureLevel
	toSerialize["name"] = o.Name
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if !IsNil(o.ReportsTo) {
		toSerialize["reportsTo"] = o.ReportsTo
	}
	if !IsNil(o.SalesRep) {
		toSerialize["salesRep"] = o.SalesRep
	}
	if !IsNil(o.TimeZoneSetup) {
		toSerialize["timeZoneSetup"] = o.TimeZoneSetup
	}
	if !IsNil(o.Calendar) {
		toSerialize["calendar"] = o.Calendar
	}
	if !IsNil(o.OverrideAddressLine1) {
		toSerialize["overrideAddressLine1"] = o.OverrideAddressLine1
	}
	if !IsNil(o.OverrideAddressLine2) {
		toSerialize["overrideAddressLine2"] = o.OverrideAddressLine2
	}
	if !IsNil(o.OverrideCity) {
		toSerialize["overrideCity"] = o.OverrideCity
	}
	if !IsNil(o.OverrideState) {
		toSerialize["overrideState"] = o.OverrideState
	}
	if !IsNil(o.OverrideZip) {
		toSerialize["overrideZip"] = o.OverrideZip
	}
	if !IsNil(o.OverrideCountry) {
		toSerialize["overrideCountry"] = o.OverrideCountry
	}
	if !IsNil(o.OverridePhoneNumber) {
		toSerialize["overridePhoneNumber"] = o.OverridePhoneNumber
	}
	if !IsNil(o.OverrideFaxNumber) {
		toSerialize["overrideFaxNumber"] = o.OverrideFaxNumber
	}
	if !IsNil(o.OwaUrl) {
		toSerialize["owaUrl"] = o.OwaUrl
	}
	if !IsNil(o.PayrollXref) {
		toSerialize["payrollXref"] = o.PayrollXref
	}
	if o.LocationFlag.IsSet() {
		toSerialize["locationFlag"] = o.LocationFlag.Get()
	}
	if o.ClientFlag.IsSet() {
		toSerialize["clientFlag"] = o.ClientFlag.Get()
	}
	if !IsNil(o.WorkRoleIds) {
		toSerialize["workRoleIds"] = o.WorkRoleIds
	}
	if !IsNil(o.DepartmentIds) {
		toSerialize["departmentIds"] = o.DepartmentIds
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Location) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"structureLevel",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocation := _Location{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocation)

	if err != nil {
		return err
	}

	*o = Location(varLocation)

	return err
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
