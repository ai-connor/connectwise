/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ManagedDevicesIntegrationNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedDevicesIntegrationNotification{}

// ManagedDevicesIntegrationNotification struct for ManagedDevicesIntegrationNotification
type ManagedDevicesIntegrationNotification struct {
	Id                        *int32                              `json:"id,omitempty"`
	ManagedDevicesIntegration *ManagedDevicesIntegrationReference `json:"managedDevicesIntegration,omitempty"`
	NotifyWho                 NotificationRecipientReference      `json:"notifyWho"`
	Member                    *MemberReference                    `json:"member,omitempty"`
	LogType                   NullableString                      `json:"logType"`
	Info                      *map[string]string                  `json:"_info,omitempty"`
}

type _ManagedDevicesIntegrationNotification ManagedDevicesIntegrationNotification

// NewManagedDevicesIntegrationNotification instantiates a new ManagedDevicesIntegrationNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedDevicesIntegrationNotification(notifyWho NotificationRecipientReference, logType NullableString) *ManagedDevicesIntegrationNotification {
	this := ManagedDevicesIntegrationNotification{}
	this.NotifyWho = notifyWho
	this.LogType = logType
	return &this
}

// NewManagedDevicesIntegrationNotificationWithDefaults instantiates a new ManagedDevicesIntegrationNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedDevicesIntegrationNotificationWithDefaults() *ManagedDevicesIntegrationNotification {
	this := ManagedDevicesIntegrationNotification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationNotification) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationNotification) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationNotification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ManagedDevicesIntegrationNotification) SetId(v int32) {
	o.Id = &v
}

// GetManagedDevicesIntegration returns the ManagedDevicesIntegration field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationNotification) GetManagedDevicesIntegration() ManagedDevicesIntegrationReference {
	if o == nil || IsNil(o.ManagedDevicesIntegration) {
		var ret ManagedDevicesIntegrationReference
		return ret
	}
	return *o.ManagedDevicesIntegration
}

// GetManagedDevicesIntegrationOk returns a tuple with the ManagedDevicesIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationNotification) GetManagedDevicesIntegrationOk() (*ManagedDevicesIntegrationReference, bool) {
	if o == nil || IsNil(o.ManagedDevicesIntegration) {
		return nil, false
	}
	return o.ManagedDevicesIntegration, true
}

// HasManagedDevicesIntegration returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationNotification) HasManagedDevicesIntegration() bool {
	if o != nil && !IsNil(o.ManagedDevicesIntegration) {
		return true
	}

	return false
}

// SetManagedDevicesIntegration gets a reference to the given ManagedDevicesIntegrationReference and assigns it to the ManagedDevicesIntegration field.
func (o *ManagedDevicesIntegrationNotification) SetManagedDevicesIntegration(v ManagedDevicesIntegrationReference) {
	o.ManagedDevicesIntegration = &v
}

// GetNotifyWho returns the NotifyWho field value
func (o *ManagedDevicesIntegrationNotification) GetNotifyWho() NotificationRecipientReference {
	if o == nil {
		var ret NotificationRecipientReference
		return ret
	}

	return o.NotifyWho
}

// GetNotifyWhoOk returns a tuple with the NotifyWho field value
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationNotification) GetNotifyWhoOk() (*NotificationRecipientReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyWho, true
}

// SetNotifyWho sets field value
func (o *ManagedDevicesIntegrationNotification) SetNotifyWho(v NotificationRecipientReference) {
	o.NotifyWho = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationNotification) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationNotification) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationNotification) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ManagedDevicesIntegrationNotification) SetMember(v MemberReference) {
	o.Member = &v
}

// GetLogType returns the LogType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ManagedDevicesIntegrationNotification) GetLogType() string {
	if o == nil || o.LogType.Get() == nil {
		var ret string
		return ret
	}

	return *o.LogType.Get()
}

// GetLogTypeOk returns a tuple with the LogType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedDevicesIntegrationNotification) GetLogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogType.Get(), o.LogType.IsSet()
}

// SetLogType sets field value
func (o *ManagedDevicesIntegrationNotification) SetLogType(v string) {
	o.LogType.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationNotification) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationNotification) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationNotification) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ManagedDevicesIntegrationNotification) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ManagedDevicesIntegrationNotification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedDevicesIntegrationNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ManagedDevicesIntegration) {
		toSerialize["managedDevicesIntegration"] = o.ManagedDevicesIntegration
	}
	toSerialize["notifyWho"] = o.NotifyWho
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	toSerialize["logType"] = o.LogType.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ManagedDevicesIntegrationNotification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notifyWho",
		"logType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagedDevicesIntegrationNotification := _ManagedDevicesIntegrationNotification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagedDevicesIntegrationNotification)

	if err != nil {
		return err
	}

	*o = ManagedDevicesIntegrationNotification(varManagedDevicesIntegrationNotification)

	return err
}

type NullableManagedDevicesIntegrationNotification struct {
	value *ManagedDevicesIntegrationNotification
	isSet bool
}

func (v NullableManagedDevicesIntegrationNotification) Get() *ManagedDevicesIntegrationNotification {
	return v.value
}

func (v *NullableManagedDevicesIntegrationNotification) Set(val *ManagedDevicesIntegrationNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedDevicesIntegrationNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedDevicesIntegrationNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedDevicesIntegrationNotification(val *ManagedDevicesIntegrationNotification) *NullableManagedDevicesIntegrationNotification {
	return &NullableManagedDevicesIntegrationNotification{value: val, isSet: true}
}

func (v NullableManagedDevicesIntegrationNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedDevicesIntegrationNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
