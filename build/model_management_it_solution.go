/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ManagementItSolution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementItSolution{}

// ManagementItSolution struct for ManagementItSolution
type ManagementItSolution struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name                     string         `json:"name"`
	ManagementItSolutionType NullableString `json:"managementItSolutionType"`
	// Gets or sets             this is only required when managementItSolutionType is Custom. Max length: 30;
	ManagementSolutionName *string `json:"managementSolutionName,omitempty"`
	// Gets or sets             this is only required for Level Platforms. Max length: 200;
	ManagementServerUrl *string `json:"managementServerUrl,omitempty"`
	// Gets or sets             this is only required for Level Platforms when overrideWebServiceLocationFlag is true. Max length: 200;
	WebserviceOverrideUrl *string `json:"webserviceOverrideUrl,omitempty"`
	// Gets or sets             this is only required for Level Platforms when overrideLoginLocationFlag is true. Max length: 200;
	PortalOverrideLoginUrl *string      `json:"portalOverrideLoginUrl,omitempty"`
	GlobalLoginFlag        NullableBool `json:"globalLoginFlag,omitempty"`
	// Gets or sets             this is only required when globalLoginFlag = true. Max length: 50;
	GlobalLoginUsername *string `json:"globalLoginUsername,omitempty"`
	// Gets or sets             this is only required when globalLoginFlag = true. Max length: 50;
	GlobalLoginPassword *string      `json:"globalLoginPassword,omitempty"`
	UsingSslFlag        NullableBool `json:"usingSslFlag,omitempty"`
	// Gets or sets             this is only required for N-Able solution. Max length: 50;
	NAbleUsername *string `json:"nAbleUsername,omitempty"`
	// Gets or sets             this is only required for N-Able solution. Max length: 50;
	NAblePassword                  *string      `json:"nAblePassword,omitempty"`
	OverrideWebServiceLocationFlag NullableBool `json:"overrideWebServiceLocationFlag,omitempty"`
	OverrideLoginLocationFlag      NullableBool `json:"overrideLoginLocationFlag,omitempty"`
	// Gets or sets             this is only required for Continuum solution. Max length: 100;
	ContinuumApiUsername *string `json:"continuumApiUsername,omitempty"`
	// Gets or sets             this is only required for Continuum solution. Max length: 100;
	ContinuumApiPassword *string `json:"continuumApiPassword,omitempty"`
	// Gets or sets             this is only required for Level Platforms solution. Max length: 100;
	LevelApiUsername *string `json:"levelApiUsername,omitempty"`
	// Gets or sets             this is only required for Level Platforms solution. Max length: 100;
	LevelApiPassword *string `json:"levelApiPassword,omitempty"`
	// Gets or sets             this is only required for Level Platforms solution. Max length: 100;
	LevelVarDomain *string            `json:"levelVarDomain,omitempty"`
	NoDisplayFlag  NullableBool       `json:"noDisplayFlag,omitempty"`
	Info           *map[string]string `json:"_info,omitempty"`
}

type _ManagementItSolution ManagementItSolution

// NewManagementItSolution instantiates a new ManagementItSolution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementItSolution(name string, managementItSolutionType NullableString) *ManagementItSolution {
	this := ManagementItSolution{}
	this.Name = name
	this.ManagementItSolutionType = managementItSolutionType
	return &this
}

// NewManagementItSolutionWithDefaults instantiates a new ManagementItSolution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementItSolutionWithDefaults() *ManagementItSolution {
	this := ManagementItSolution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagementItSolution) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagementItSolution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ManagementItSolution) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ManagementItSolution) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ManagementItSolution) SetName(v string) {
	o.Name = v
}

// GetManagementItSolutionType returns the ManagementItSolutionType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ManagementItSolution) GetManagementItSolutionType() string {
	if o == nil || o.ManagementItSolutionType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ManagementItSolutionType.Get()
}

// GetManagementItSolutionTypeOk returns a tuple with the ManagementItSolutionType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementItSolution) GetManagementItSolutionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementItSolutionType.Get(), o.ManagementItSolutionType.IsSet()
}

// SetManagementItSolutionType sets field value
func (o *ManagementItSolution) SetManagementItSolutionType(v string) {
	o.ManagementItSolutionType.Set(&v)
}

// GetManagementSolutionName returns the ManagementSolutionName field value if set, zero value otherwise.
func (o *ManagementItSolution) GetManagementSolutionName() string {
	if o == nil || IsNil(o.ManagementSolutionName) {
		var ret string
		return ret
	}
	return *o.ManagementSolutionName
}

// GetManagementSolutionNameOk returns a tuple with the ManagementSolutionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetManagementSolutionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementSolutionName) {
		return nil, false
	}
	return o.ManagementSolutionName, true
}

// HasManagementSolutionName returns a boolean if a field has been set.
func (o *ManagementItSolution) HasManagementSolutionName() bool {
	if o != nil && !IsNil(o.ManagementSolutionName) {
		return true
	}

	return false
}

// SetManagementSolutionName gets a reference to the given string and assigns it to the ManagementSolutionName field.
func (o *ManagementItSolution) SetManagementSolutionName(v string) {
	o.ManagementSolutionName = &v
}

// GetManagementServerUrl returns the ManagementServerUrl field value if set, zero value otherwise.
func (o *ManagementItSolution) GetManagementServerUrl() string {
	if o == nil || IsNil(o.ManagementServerUrl) {
		var ret string
		return ret
	}
	return *o.ManagementServerUrl
}

// GetManagementServerUrlOk returns a tuple with the ManagementServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetManagementServerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementServerUrl) {
		return nil, false
	}
	return o.ManagementServerUrl, true
}

// HasManagementServerUrl returns a boolean if a field has been set.
func (o *ManagementItSolution) HasManagementServerUrl() bool {
	if o != nil && !IsNil(o.ManagementServerUrl) {
		return true
	}

	return false
}

// SetManagementServerUrl gets a reference to the given string and assigns it to the ManagementServerUrl field.
func (o *ManagementItSolution) SetManagementServerUrl(v string) {
	o.ManagementServerUrl = &v
}

// GetWebserviceOverrideUrl returns the WebserviceOverrideUrl field value if set, zero value otherwise.
func (o *ManagementItSolution) GetWebserviceOverrideUrl() string {
	if o == nil || IsNil(o.WebserviceOverrideUrl) {
		var ret string
		return ret
	}
	return *o.WebserviceOverrideUrl
}

// GetWebserviceOverrideUrlOk returns a tuple with the WebserviceOverrideUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetWebserviceOverrideUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebserviceOverrideUrl) {
		return nil, false
	}
	return o.WebserviceOverrideUrl, true
}

// HasWebserviceOverrideUrl returns a boolean if a field has been set.
func (o *ManagementItSolution) HasWebserviceOverrideUrl() bool {
	if o != nil && !IsNil(o.WebserviceOverrideUrl) {
		return true
	}

	return false
}

// SetWebserviceOverrideUrl gets a reference to the given string and assigns it to the WebserviceOverrideUrl field.
func (o *ManagementItSolution) SetWebserviceOverrideUrl(v string) {
	o.WebserviceOverrideUrl = &v
}

// GetPortalOverrideLoginUrl returns the PortalOverrideLoginUrl field value if set, zero value otherwise.
func (o *ManagementItSolution) GetPortalOverrideLoginUrl() string {
	if o == nil || IsNil(o.PortalOverrideLoginUrl) {
		var ret string
		return ret
	}
	return *o.PortalOverrideLoginUrl
}

// GetPortalOverrideLoginUrlOk returns a tuple with the PortalOverrideLoginUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetPortalOverrideLoginUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PortalOverrideLoginUrl) {
		return nil, false
	}
	return o.PortalOverrideLoginUrl, true
}

// HasPortalOverrideLoginUrl returns a boolean if a field has been set.
func (o *ManagementItSolution) HasPortalOverrideLoginUrl() bool {
	if o != nil && !IsNil(o.PortalOverrideLoginUrl) {
		return true
	}

	return false
}

// SetPortalOverrideLoginUrl gets a reference to the given string and assigns it to the PortalOverrideLoginUrl field.
func (o *ManagementItSolution) SetPortalOverrideLoginUrl(v string) {
	o.PortalOverrideLoginUrl = &v
}

// GetGlobalLoginFlag returns the GlobalLoginFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementItSolution) GetGlobalLoginFlag() bool {
	if o == nil || IsNil(o.GlobalLoginFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.GlobalLoginFlag.Get()
}

// GetGlobalLoginFlagOk returns a tuple with the GlobalLoginFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementItSolution) GetGlobalLoginFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalLoginFlag.Get(), o.GlobalLoginFlag.IsSet()
}

// HasGlobalLoginFlag returns a boolean if a field has been set.
func (o *ManagementItSolution) HasGlobalLoginFlag() bool {
	if o != nil && o.GlobalLoginFlag.IsSet() {
		return true
	}

	return false
}

// SetGlobalLoginFlag gets a reference to the given NullableBool and assigns it to the GlobalLoginFlag field.
func (o *ManagementItSolution) SetGlobalLoginFlag(v bool) {
	o.GlobalLoginFlag.Set(&v)
}

// SetGlobalLoginFlagNil sets the value for GlobalLoginFlag to be an explicit nil
func (o *ManagementItSolution) SetGlobalLoginFlagNil() {
	o.GlobalLoginFlag.Set(nil)
}

// UnsetGlobalLoginFlag ensures that no value is present for GlobalLoginFlag, not even an explicit nil
func (o *ManagementItSolution) UnsetGlobalLoginFlag() {
	o.GlobalLoginFlag.Unset()
}

// GetGlobalLoginUsername returns the GlobalLoginUsername field value if set, zero value otherwise.
func (o *ManagementItSolution) GetGlobalLoginUsername() string {
	if o == nil || IsNil(o.GlobalLoginUsername) {
		var ret string
		return ret
	}
	return *o.GlobalLoginUsername
}

// GetGlobalLoginUsernameOk returns a tuple with the GlobalLoginUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetGlobalLoginUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalLoginUsername) {
		return nil, false
	}
	return o.GlobalLoginUsername, true
}

// HasGlobalLoginUsername returns a boolean if a field has been set.
func (o *ManagementItSolution) HasGlobalLoginUsername() bool {
	if o != nil && !IsNil(o.GlobalLoginUsername) {
		return true
	}

	return false
}

// SetGlobalLoginUsername gets a reference to the given string and assigns it to the GlobalLoginUsername field.
func (o *ManagementItSolution) SetGlobalLoginUsername(v string) {
	o.GlobalLoginUsername = &v
}

// GetGlobalLoginPassword returns the GlobalLoginPassword field value if set, zero value otherwise.
func (o *ManagementItSolution) GetGlobalLoginPassword() string {
	if o == nil || IsNil(o.GlobalLoginPassword) {
		var ret string
		return ret
	}
	return *o.GlobalLoginPassword
}

// GetGlobalLoginPasswordOk returns a tuple with the GlobalLoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetGlobalLoginPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalLoginPassword) {
		return nil, false
	}
	return o.GlobalLoginPassword, true
}

// HasGlobalLoginPassword returns a boolean if a field has been set.
func (o *ManagementItSolution) HasGlobalLoginPassword() bool {
	if o != nil && !IsNil(o.GlobalLoginPassword) {
		return true
	}

	return false
}

// SetGlobalLoginPassword gets a reference to the given string and assigns it to the GlobalLoginPassword field.
func (o *ManagementItSolution) SetGlobalLoginPassword(v string) {
	o.GlobalLoginPassword = &v
}

// GetUsingSslFlag returns the UsingSslFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementItSolution) GetUsingSslFlag() bool {
	if o == nil || IsNil(o.UsingSslFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UsingSslFlag.Get()
}

// GetUsingSslFlagOk returns a tuple with the UsingSslFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementItSolution) GetUsingSslFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsingSslFlag.Get(), o.UsingSslFlag.IsSet()
}

// HasUsingSslFlag returns a boolean if a field has been set.
func (o *ManagementItSolution) HasUsingSslFlag() bool {
	if o != nil && o.UsingSslFlag.IsSet() {
		return true
	}

	return false
}

// SetUsingSslFlag gets a reference to the given NullableBool and assigns it to the UsingSslFlag field.
func (o *ManagementItSolution) SetUsingSslFlag(v bool) {
	o.UsingSslFlag.Set(&v)
}

// SetUsingSslFlagNil sets the value for UsingSslFlag to be an explicit nil
func (o *ManagementItSolution) SetUsingSslFlagNil() {
	o.UsingSslFlag.Set(nil)
}

// UnsetUsingSslFlag ensures that no value is present for UsingSslFlag, not even an explicit nil
func (o *ManagementItSolution) UnsetUsingSslFlag() {
	o.UsingSslFlag.Unset()
}

// GetNAbleUsername returns the NAbleUsername field value if set, zero value otherwise.
func (o *ManagementItSolution) GetNAbleUsername() string {
	if o == nil || IsNil(o.NAbleUsername) {
		var ret string
		return ret
	}
	return *o.NAbleUsername
}

// GetNAbleUsernameOk returns a tuple with the NAbleUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetNAbleUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.NAbleUsername) {
		return nil, false
	}
	return o.NAbleUsername, true
}

// HasNAbleUsername returns a boolean if a field has been set.
func (o *ManagementItSolution) HasNAbleUsername() bool {
	if o != nil && !IsNil(o.NAbleUsername) {
		return true
	}

	return false
}

// SetNAbleUsername gets a reference to the given string and assigns it to the NAbleUsername field.
func (o *ManagementItSolution) SetNAbleUsername(v string) {
	o.NAbleUsername = &v
}

// GetNAblePassword returns the NAblePassword field value if set, zero value otherwise.
func (o *ManagementItSolution) GetNAblePassword() string {
	if o == nil || IsNil(o.NAblePassword) {
		var ret string
		return ret
	}
	return *o.NAblePassword
}

// GetNAblePasswordOk returns a tuple with the NAblePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetNAblePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NAblePassword) {
		return nil, false
	}
	return o.NAblePassword, true
}

// HasNAblePassword returns a boolean if a field has been set.
func (o *ManagementItSolution) HasNAblePassword() bool {
	if o != nil && !IsNil(o.NAblePassword) {
		return true
	}

	return false
}

// SetNAblePassword gets a reference to the given string and assigns it to the NAblePassword field.
func (o *ManagementItSolution) SetNAblePassword(v string) {
	o.NAblePassword = &v
}

// GetOverrideWebServiceLocationFlag returns the OverrideWebServiceLocationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementItSolution) GetOverrideWebServiceLocationFlag() bool {
	if o == nil || IsNil(o.OverrideWebServiceLocationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideWebServiceLocationFlag.Get()
}

// GetOverrideWebServiceLocationFlagOk returns a tuple with the OverrideWebServiceLocationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementItSolution) GetOverrideWebServiceLocationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideWebServiceLocationFlag.Get(), o.OverrideWebServiceLocationFlag.IsSet()
}

// HasOverrideWebServiceLocationFlag returns a boolean if a field has been set.
func (o *ManagementItSolution) HasOverrideWebServiceLocationFlag() bool {
	if o != nil && o.OverrideWebServiceLocationFlag.IsSet() {
		return true
	}

	return false
}

// SetOverrideWebServiceLocationFlag gets a reference to the given NullableBool and assigns it to the OverrideWebServiceLocationFlag field.
func (o *ManagementItSolution) SetOverrideWebServiceLocationFlag(v bool) {
	o.OverrideWebServiceLocationFlag.Set(&v)
}

// SetOverrideWebServiceLocationFlagNil sets the value for OverrideWebServiceLocationFlag to be an explicit nil
func (o *ManagementItSolution) SetOverrideWebServiceLocationFlagNil() {
	o.OverrideWebServiceLocationFlag.Set(nil)
}

// UnsetOverrideWebServiceLocationFlag ensures that no value is present for OverrideWebServiceLocationFlag, not even an explicit nil
func (o *ManagementItSolution) UnsetOverrideWebServiceLocationFlag() {
	o.OverrideWebServiceLocationFlag.Unset()
}

// GetOverrideLoginLocationFlag returns the OverrideLoginLocationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementItSolution) GetOverrideLoginLocationFlag() bool {
	if o == nil || IsNil(o.OverrideLoginLocationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideLoginLocationFlag.Get()
}

// GetOverrideLoginLocationFlagOk returns a tuple with the OverrideLoginLocationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementItSolution) GetOverrideLoginLocationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideLoginLocationFlag.Get(), o.OverrideLoginLocationFlag.IsSet()
}

// HasOverrideLoginLocationFlag returns a boolean if a field has been set.
func (o *ManagementItSolution) HasOverrideLoginLocationFlag() bool {
	if o != nil && o.OverrideLoginLocationFlag.IsSet() {
		return true
	}

	return false
}

// SetOverrideLoginLocationFlag gets a reference to the given NullableBool and assigns it to the OverrideLoginLocationFlag field.
func (o *ManagementItSolution) SetOverrideLoginLocationFlag(v bool) {
	o.OverrideLoginLocationFlag.Set(&v)
}

// SetOverrideLoginLocationFlagNil sets the value for OverrideLoginLocationFlag to be an explicit nil
func (o *ManagementItSolution) SetOverrideLoginLocationFlagNil() {
	o.OverrideLoginLocationFlag.Set(nil)
}

// UnsetOverrideLoginLocationFlag ensures that no value is present for OverrideLoginLocationFlag, not even an explicit nil
func (o *ManagementItSolution) UnsetOverrideLoginLocationFlag() {
	o.OverrideLoginLocationFlag.Unset()
}

// GetContinuumApiUsername returns the ContinuumApiUsername field value if set, zero value otherwise.
func (o *ManagementItSolution) GetContinuumApiUsername() string {
	if o == nil || IsNil(o.ContinuumApiUsername) {
		var ret string
		return ret
	}
	return *o.ContinuumApiUsername
}

// GetContinuumApiUsernameOk returns a tuple with the ContinuumApiUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetContinuumApiUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuumApiUsername) {
		return nil, false
	}
	return o.ContinuumApiUsername, true
}

// HasContinuumApiUsername returns a boolean if a field has been set.
func (o *ManagementItSolution) HasContinuumApiUsername() bool {
	if o != nil && !IsNil(o.ContinuumApiUsername) {
		return true
	}

	return false
}

// SetContinuumApiUsername gets a reference to the given string and assigns it to the ContinuumApiUsername field.
func (o *ManagementItSolution) SetContinuumApiUsername(v string) {
	o.ContinuumApiUsername = &v
}

// GetContinuumApiPassword returns the ContinuumApiPassword field value if set, zero value otherwise.
func (o *ManagementItSolution) GetContinuumApiPassword() string {
	if o == nil || IsNil(o.ContinuumApiPassword) {
		var ret string
		return ret
	}
	return *o.ContinuumApiPassword
}

// GetContinuumApiPasswordOk returns a tuple with the ContinuumApiPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetContinuumApiPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuumApiPassword) {
		return nil, false
	}
	return o.ContinuumApiPassword, true
}

// HasContinuumApiPassword returns a boolean if a field has been set.
func (o *ManagementItSolution) HasContinuumApiPassword() bool {
	if o != nil && !IsNil(o.ContinuumApiPassword) {
		return true
	}

	return false
}

// SetContinuumApiPassword gets a reference to the given string and assigns it to the ContinuumApiPassword field.
func (o *ManagementItSolution) SetContinuumApiPassword(v string) {
	o.ContinuumApiPassword = &v
}

// GetLevelApiUsername returns the LevelApiUsername field value if set, zero value otherwise.
func (o *ManagementItSolution) GetLevelApiUsername() string {
	if o == nil || IsNil(o.LevelApiUsername) {
		var ret string
		return ret
	}
	return *o.LevelApiUsername
}

// GetLevelApiUsernameOk returns a tuple with the LevelApiUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetLevelApiUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.LevelApiUsername) {
		return nil, false
	}
	return o.LevelApiUsername, true
}

// HasLevelApiUsername returns a boolean if a field has been set.
func (o *ManagementItSolution) HasLevelApiUsername() bool {
	if o != nil && !IsNil(o.LevelApiUsername) {
		return true
	}

	return false
}

// SetLevelApiUsername gets a reference to the given string and assigns it to the LevelApiUsername field.
func (o *ManagementItSolution) SetLevelApiUsername(v string) {
	o.LevelApiUsername = &v
}

// GetLevelApiPassword returns the LevelApiPassword field value if set, zero value otherwise.
func (o *ManagementItSolution) GetLevelApiPassword() string {
	if o == nil || IsNil(o.LevelApiPassword) {
		var ret string
		return ret
	}
	return *o.LevelApiPassword
}

// GetLevelApiPasswordOk returns a tuple with the LevelApiPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetLevelApiPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LevelApiPassword) {
		return nil, false
	}
	return o.LevelApiPassword, true
}

// HasLevelApiPassword returns a boolean if a field has been set.
func (o *ManagementItSolution) HasLevelApiPassword() bool {
	if o != nil && !IsNil(o.LevelApiPassword) {
		return true
	}

	return false
}

// SetLevelApiPassword gets a reference to the given string and assigns it to the LevelApiPassword field.
func (o *ManagementItSolution) SetLevelApiPassword(v string) {
	o.LevelApiPassword = &v
}

// GetLevelVarDomain returns the LevelVarDomain field value if set, zero value otherwise.
func (o *ManagementItSolution) GetLevelVarDomain() string {
	if o == nil || IsNil(o.LevelVarDomain) {
		var ret string
		return ret
	}
	return *o.LevelVarDomain
}

// GetLevelVarDomainOk returns a tuple with the LevelVarDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetLevelVarDomainOk() (*string, bool) {
	if o == nil || IsNil(o.LevelVarDomain) {
		return nil, false
	}
	return o.LevelVarDomain, true
}

// HasLevelVarDomain returns a boolean if a field has been set.
func (o *ManagementItSolution) HasLevelVarDomain() bool {
	if o != nil && !IsNil(o.LevelVarDomain) {
		return true
	}

	return false
}

// SetLevelVarDomain gets a reference to the given string and assigns it to the LevelVarDomain field.
func (o *ManagementItSolution) SetLevelVarDomain(v string) {
	o.LevelVarDomain = &v
}

// GetNoDisplayFlag returns the NoDisplayFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementItSolution) GetNoDisplayFlag() bool {
	if o == nil || IsNil(o.NoDisplayFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NoDisplayFlag.Get()
}

// GetNoDisplayFlagOk returns a tuple with the NoDisplayFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementItSolution) GetNoDisplayFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoDisplayFlag.Get(), o.NoDisplayFlag.IsSet()
}

// HasNoDisplayFlag returns a boolean if a field has been set.
func (o *ManagementItSolution) HasNoDisplayFlag() bool {
	if o != nil && o.NoDisplayFlag.IsSet() {
		return true
	}

	return false
}

// SetNoDisplayFlag gets a reference to the given NullableBool and assigns it to the NoDisplayFlag field.
func (o *ManagementItSolution) SetNoDisplayFlag(v bool) {
	o.NoDisplayFlag.Set(&v)
}

// SetNoDisplayFlagNil sets the value for NoDisplayFlag to be an explicit nil
func (o *ManagementItSolution) SetNoDisplayFlagNil() {
	o.NoDisplayFlag.Set(nil)
}

// UnsetNoDisplayFlag ensures that no value is present for NoDisplayFlag, not even an explicit nil
func (o *ManagementItSolution) UnsetNoDisplayFlag() {
	o.NoDisplayFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ManagementItSolution) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementItSolution) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ManagementItSolution) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ManagementItSolution) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ManagementItSolution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementItSolution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["managementItSolutionType"] = o.ManagementItSolutionType.Get()
	if !IsNil(o.ManagementSolutionName) {
		toSerialize["managementSolutionName"] = o.ManagementSolutionName
	}
	if !IsNil(o.ManagementServerUrl) {
		toSerialize["managementServerUrl"] = o.ManagementServerUrl
	}
	if !IsNil(o.WebserviceOverrideUrl) {
		toSerialize["webserviceOverrideUrl"] = o.WebserviceOverrideUrl
	}
	if !IsNil(o.PortalOverrideLoginUrl) {
		toSerialize["portalOverrideLoginUrl"] = o.PortalOverrideLoginUrl
	}
	if o.GlobalLoginFlag.IsSet() {
		toSerialize["globalLoginFlag"] = o.GlobalLoginFlag.Get()
	}
	if !IsNil(o.GlobalLoginUsername) {
		toSerialize["globalLoginUsername"] = o.GlobalLoginUsername
	}
	if !IsNil(o.GlobalLoginPassword) {
		toSerialize["globalLoginPassword"] = o.GlobalLoginPassword
	}
	if o.UsingSslFlag.IsSet() {
		toSerialize["usingSslFlag"] = o.UsingSslFlag.Get()
	}
	if !IsNil(o.NAbleUsername) {
		toSerialize["nAbleUsername"] = o.NAbleUsername
	}
	if !IsNil(o.NAblePassword) {
		toSerialize["nAblePassword"] = o.NAblePassword
	}
	if o.OverrideWebServiceLocationFlag.IsSet() {
		toSerialize["overrideWebServiceLocationFlag"] = o.OverrideWebServiceLocationFlag.Get()
	}
	if o.OverrideLoginLocationFlag.IsSet() {
		toSerialize["overrideLoginLocationFlag"] = o.OverrideLoginLocationFlag.Get()
	}
	if !IsNil(o.ContinuumApiUsername) {
		toSerialize["continuumApiUsername"] = o.ContinuumApiUsername
	}
	if !IsNil(o.ContinuumApiPassword) {
		toSerialize["continuumApiPassword"] = o.ContinuumApiPassword
	}
	if !IsNil(o.LevelApiUsername) {
		toSerialize["levelApiUsername"] = o.LevelApiUsername
	}
	if !IsNil(o.LevelApiPassword) {
		toSerialize["levelApiPassword"] = o.LevelApiPassword
	}
	if !IsNil(o.LevelVarDomain) {
		toSerialize["levelVarDomain"] = o.LevelVarDomain
	}
	if o.NoDisplayFlag.IsSet() {
		toSerialize["noDisplayFlag"] = o.NoDisplayFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ManagementItSolution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"managementItSolutionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementItSolution := _ManagementItSolution{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementItSolution)

	if err != nil {
		return err
	}

	*o = ManagementItSolution(varManagementItSolution)

	return err
}

type NullableManagementItSolution struct {
	value *ManagementItSolution
	isSet bool
}

func (v NullableManagementItSolution) Get() *ManagementItSolution {
	return v.value
}

func (v *NullableManagementItSolution) Set(val *ManagementItSolution) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementItSolution) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementItSolution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementItSolution(val *ManagementItSolution) *NullableManagementItSolution {
	return &NullableManagementItSolution{value: val, isSet: true}
}

func (v NullableManagementItSolution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementItSolution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
