/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ManagementReportNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementReportNotification{}

// ManagementReportNotification struct for ManagementReportNotification
type ManagementReportNotification struct {
	Id        *int32                         `json:"id,omitempty"`
	NotifyWho NotificationRecipientReference `json:"notifyWho"`
	Member    *MemberReference               `json:"member,omitempty"`
	//  Max length: 50;
	Email      *string            `json:"email,omitempty"`
	GlobalFlag NullableBool       `json:"globalFlag,omitempty"`
	Company    *CompanyReference  `json:"company,omitempty"`
	Info       *map[string]string `json:"_info,omitempty"`
}

type _ManagementReportNotification ManagementReportNotification

// NewManagementReportNotification instantiates a new ManagementReportNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementReportNotification(notifyWho NotificationRecipientReference) *ManagementReportNotification {
	this := ManagementReportNotification{}
	this.NotifyWho = notifyWho
	return &this
}

// NewManagementReportNotificationWithDefaults instantiates a new ManagementReportNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementReportNotificationWithDefaults() *ManagementReportNotification {
	this := ManagementReportNotification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagementReportNotification) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementReportNotification) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagementReportNotification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ManagementReportNotification) SetId(v int32) {
	o.Id = &v
}

// GetNotifyWho returns the NotifyWho field value
func (o *ManagementReportNotification) GetNotifyWho() NotificationRecipientReference {
	if o == nil {
		var ret NotificationRecipientReference
		return ret
	}

	return o.NotifyWho
}

// GetNotifyWhoOk returns a tuple with the NotifyWho field value
// and a boolean to check if the value has been set.
func (o *ManagementReportNotification) GetNotifyWhoOk() (*NotificationRecipientReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyWho, true
}

// SetNotifyWho sets field value
func (o *ManagementReportNotification) SetNotifyWho(v NotificationRecipientReference) {
	o.NotifyWho = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ManagementReportNotification) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementReportNotification) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ManagementReportNotification) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ManagementReportNotification) SetMember(v MemberReference) {
	o.Member = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ManagementReportNotification) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementReportNotification) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ManagementReportNotification) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ManagementReportNotification) SetEmail(v string) {
	o.Email = &v
}

// GetGlobalFlag returns the GlobalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagementReportNotification) GetGlobalFlag() bool {
	if o == nil || IsNil(o.GlobalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.GlobalFlag.Get()
}

// GetGlobalFlagOk returns a tuple with the GlobalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementReportNotification) GetGlobalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalFlag.Get(), o.GlobalFlag.IsSet()
}

// HasGlobalFlag returns a boolean if a field has been set.
func (o *ManagementReportNotification) HasGlobalFlag() bool {
	if o != nil && o.GlobalFlag.IsSet() {
		return true
	}

	return false
}

// SetGlobalFlag gets a reference to the given NullableBool and assigns it to the GlobalFlag field.
func (o *ManagementReportNotification) SetGlobalFlag(v bool) {
	o.GlobalFlag.Set(&v)
}

// SetGlobalFlagNil sets the value for GlobalFlag to be an explicit nil
func (o *ManagementReportNotification) SetGlobalFlagNil() {
	o.GlobalFlag.Set(nil)
}

// UnsetGlobalFlag ensures that no value is present for GlobalFlag, not even an explicit nil
func (o *ManagementReportNotification) UnsetGlobalFlag() {
	o.GlobalFlag.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ManagementReportNotification) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementReportNotification) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ManagementReportNotification) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *ManagementReportNotification) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ManagementReportNotification) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementReportNotification) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ManagementReportNotification) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ManagementReportNotification) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ManagementReportNotification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementReportNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["notifyWho"] = o.NotifyWho
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if o.GlobalFlag.IsSet() {
		toSerialize["globalFlag"] = o.GlobalFlag.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ManagementReportNotification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notifyWho",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementReportNotification := _ManagementReportNotification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementReportNotification)

	if err != nil {
		return err
	}

	*o = ManagementReportNotification(varManagementReportNotification)

	return err
}

type NullableManagementReportNotification struct {
	value *ManagementReportNotification
	isSet bool
}

func (v NullableManagementReportNotification) Get() *ManagementReportNotification {
	return v.value
}

func (v *NullableManagementReportNotification) Set(val *ManagementReportNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementReportNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementReportNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementReportNotification(val *ManagementReportNotification) *NullableManagementReportNotification {
	return &NullableManagementReportNotification{value: val, isSet: true}
}

func (v NullableManagementReportNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementReportNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
