/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MemberCertification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberCertification{}

// MemberCertification struct for MemberCertification
type MemberCertification struct {
	Id              *int32                 `json:"id,omitempty"`
	Certification   CertificationReference `json:"certification"`
	PercentComplete NullableInt32          `json:"percentComplete,omitempty"`
	DateReceived    *time.Time             `json:"dateReceived,omitempty"`
	DateExpires     *time.Time             `json:"dateExpires,omitempty"`
	//  Max length: 50;
	CertificationNumber *string            `json:"certificationNumber,omitempty"`
	Notes               *string            `json:"notes,omitempty"`
	Member              *MemberReference   `json:"member,omitempty"`
	Company             *CompanyReference  `json:"company,omitempty"`
	Info                *map[string]string `json:"_info,omitempty"`
}

type _MemberCertification MemberCertification

// NewMemberCertification instantiates a new MemberCertification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberCertification(certification CertificationReference) *MemberCertification {
	this := MemberCertification{}
	this.Certification = certification
	return &this
}

// NewMemberCertificationWithDefaults instantiates a new MemberCertification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberCertificationWithDefaults() *MemberCertification {
	this := MemberCertification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberCertification) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberCertification) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MemberCertification) SetId(v int32) {
	o.Id = &v
}

// GetCertification returns the Certification field value
func (o *MemberCertification) GetCertification() CertificationReference {
	if o == nil {
		var ret CertificationReference
		return ret
	}

	return o.Certification
}

// GetCertificationOk returns a tuple with the Certification field value
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetCertificationOk() (*CertificationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certification, true
}

// SetCertification sets field value
func (o *MemberCertification) SetCertification(v CertificationReference) {
	o.Certification = v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberCertification) GetPercentComplete() int32 {
	if o == nil || IsNil(o.PercentComplete.Get()) {
		var ret int32
		return ret
	}
	return *o.PercentComplete.Get()
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberCertification) GetPercentCompleteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PercentComplete.Get(), o.PercentComplete.IsSet()
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *MemberCertification) HasPercentComplete() bool {
	if o != nil && o.PercentComplete.IsSet() {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given NullableInt32 and assigns it to the PercentComplete field.
func (o *MemberCertification) SetPercentComplete(v int32) {
	o.PercentComplete.Set(&v)
}

// SetPercentCompleteNil sets the value for PercentComplete to be an explicit nil
func (o *MemberCertification) SetPercentCompleteNil() {
	o.PercentComplete.Set(nil)
}

// UnsetPercentComplete ensures that no value is present for PercentComplete, not even an explicit nil
func (o *MemberCertification) UnsetPercentComplete() {
	o.PercentComplete.Unset()
}

// GetDateReceived returns the DateReceived field value if set, zero value otherwise.
func (o *MemberCertification) GetDateReceived() time.Time {
	if o == nil || IsNil(o.DateReceived) {
		var ret time.Time
		return ret
	}
	return *o.DateReceived
}

// GetDateReceivedOk returns a tuple with the DateReceived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetDateReceivedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateReceived) {
		return nil, false
	}
	return o.DateReceived, true
}

// HasDateReceived returns a boolean if a field has been set.
func (o *MemberCertification) HasDateReceived() bool {
	if o != nil && !IsNil(o.DateReceived) {
		return true
	}

	return false
}

// SetDateReceived gets a reference to the given time.Time and assigns it to the DateReceived field.
func (o *MemberCertification) SetDateReceived(v time.Time) {
	o.DateReceived = &v
}

// GetDateExpires returns the DateExpires field value if set, zero value otherwise.
func (o *MemberCertification) GetDateExpires() time.Time {
	if o == nil || IsNil(o.DateExpires) {
		var ret time.Time
		return ret
	}
	return *o.DateExpires
}

// GetDateExpiresOk returns a tuple with the DateExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetDateExpiresOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateExpires) {
		return nil, false
	}
	return o.DateExpires, true
}

// HasDateExpires returns a boolean if a field has been set.
func (o *MemberCertification) HasDateExpires() bool {
	if o != nil && !IsNil(o.DateExpires) {
		return true
	}

	return false
}

// SetDateExpires gets a reference to the given time.Time and assigns it to the DateExpires field.
func (o *MemberCertification) SetDateExpires(v time.Time) {
	o.DateExpires = &v
}

// GetCertificationNumber returns the CertificationNumber field value if set, zero value otherwise.
func (o *MemberCertification) GetCertificationNumber() string {
	if o == nil || IsNil(o.CertificationNumber) {
		var ret string
		return ret
	}
	return *o.CertificationNumber
}

// GetCertificationNumberOk returns a tuple with the CertificationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetCertificationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CertificationNumber) {
		return nil, false
	}
	return o.CertificationNumber, true
}

// HasCertificationNumber returns a boolean if a field has been set.
func (o *MemberCertification) HasCertificationNumber() bool {
	if o != nil && !IsNil(o.CertificationNumber) {
		return true
	}

	return false
}

// SetCertificationNumber gets a reference to the given string and assigns it to the CertificationNumber field.
func (o *MemberCertification) SetCertificationNumber(v string) {
	o.CertificationNumber = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *MemberCertification) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *MemberCertification) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *MemberCertification) SetNotes(v string) {
	o.Notes = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *MemberCertification) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *MemberCertification) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *MemberCertification) SetMember(v MemberReference) {
	o.Member = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *MemberCertification) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *MemberCertification) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *MemberCertification) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MemberCertification) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberCertification) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MemberCertification) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MemberCertification) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MemberCertification) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberCertification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["certification"] = o.Certification
	if o.PercentComplete.IsSet() {
		toSerialize["percentComplete"] = o.PercentComplete.Get()
	}
	if !IsNil(o.DateReceived) {
		toSerialize["dateReceived"] = o.DateReceived
	}
	if !IsNil(o.DateExpires) {
		toSerialize["dateExpires"] = o.DateExpires
	}
	if !IsNil(o.CertificationNumber) {
		toSerialize["certificationNumber"] = o.CertificationNumber
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *MemberCertification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberCertification := _MemberCertification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberCertification)

	if err != nil {
		return err
	}

	*o = MemberCertification(varMemberCertification)

	return err
}

type NullableMemberCertification struct {
	value *MemberCertification
	isSet bool
}

func (v NullableMemberCertification) Get() *MemberCertification {
	return v.value
}

func (v *NullableMemberCertification) Set(val *MemberCertification) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberCertification) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberCertification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberCertification(val *MemberCertification) *NullableMemberCertification {
	return &NullableMemberCertification{value: val, isSet: true}
}

func (v NullableMemberCertification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberCertification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
