/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the MemberDeactivation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDeactivation{}

// MemberDeactivation struct for MemberDeactivation
type MemberDeactivation struct {
	Activity    *MemberDeactivationItem `json:"activity,omitempty"`
	ServiceTeam *MemberDeactivationItem `json:"serviceTeam,omitempty"`
	// A list of customers for which the member holds a team role
	CompanyTeam              []MemberDeactivationCompanyTeam    `json:"companyTeam,omitempty"`
	WorkflowEmail            *MemberDeactivationItem            `json:"workflowEmail,omitempty"`
	ServiceStatusWorkflow    []MemberDeactivationStatusWorkflow `json:"serviceStatusWorkflow,omitempty"`
	TicketTemplate           *MemberDeactivationItem            `json:"ticketTemplate,omitempty"`
	Opportunity              *MemberDeactivationItem            `json:"opportunity,omitempty"`
	SalesTeam                *MemberDeactivationItem            `json:"salesTeam,omitempty"`
	ProjectManager           *MemberDeactivationItem            `json:"projectManager,omitempty"`
	ProjectTimeApprover      *MemberDeactivationItem            `json:"projectTimeApprover,omitempty"`
	ProjectExpenseApprover   *MemberDeactivationItem            `json:"projectExpenseApprover,omitempty"`
	KnowledgeBaseArticle     *MemberDeactivationItem            `json:"knowledgeBaseArticle,omitempty"`
	MyCompanyPresident       *MemberDeactivationItem            `json:"myCompanyPresident,omitempty"`
	MyCompanyCOO             *MemberDeactivationItem            `json:"myCompanyCOO,omitempty"`
	MyCompanyController      *MemberDeactivationItem            `json:"myCompanyController,omitempty"`
	MyCompanyDispatch        *MemberDeactivationItem            `json:"myCompanyDispatch,omitempty"`
	MyCompanyServiceManager  *MemberDeactivationItem            `json:"myCompanyServiceManager,omitempty"`
	MyCompanyDutyManagerRole *MemberDeactivationItem            `json:"myCompanyDutyManagerRole,omitempty"`
	DepartmentManager        *MemberDeactivationItem            `json:"departmentManager,omitempty"`
	DispatchMember           *MemberDeactivationItem            `json:"dispatchMember,omitempty"`
	ServiceManager           *MemberDeactivationItem            `json:"serviceManager,omitempty"`
	DutyManager              *MemberDeactivationItem            `json:"dutyManager,omitempty"`
	SendFromEmailNotify      *MemberDeactivationItem            `json:"sendFromEmailNotify,omitempty"`
	// By default, this is set to false             If there is any open timesheets, system will return error message             that there is open timesheets still attached to this member             If user would like to delete member with open timesheets, they can set this boolean to TRUE             System will delete member and any associated open timesheets
	DeleteOpenTimeSheetsFlag NullableBool `json:"deleteOpenTimeSheetsFlag,omitempty"`
}

// NewMemberDeactivation instantiates a new MemberDeactivation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDeactivation() *MemberDeactivation {
	this := MemberDeactivation{}
	return &this
}

// NewMemberDeactivationWithDefaults instantiates a new MemberDeactivation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDeactivationWithDefaults() *MemberDeactivation {
	this := MemberDeactivation{}
	return &this
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *MemberDeactivation) GetActivity() MemberDeactivationItem {
	if o == nil || IsNil(o.Activity) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetActivityOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *MemberDeactivation) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given MemberDeactivationItem and assigns it to the Activity field.
func (o *MemberDeactivation) SetActivity(v MemberDeactivationItem) {
	o.Activity = &v
}

// GetServiceTeam returns the ServiceTeam field value if set, zero value otherwise.
func (o *MemberDeactivation) GetServiceTeam() MemberDeactivationItem {
	if o == nil || IsNil(o.ServiceTeam) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.ServiceTeam
}

// GetServiceTeamOk returns a tuple with the ServiceTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetServiceTeamOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.ServiceTeam) {
		return nil, false
	}
	return o.ServiceTeam, true
}

// HasServiceTeam returns a boolean if a field has been set.
func (o *MemberDeactivation) HasServiceTeam() bool {
	if o != nil && !IsNil(o.ServiceTeam) {
		return true
	}

	return false
}

// SetServiceTeam gets a reference to the given MemberDeactivationItem and assigns it to the ServiceTeam field.
func (o *MemberDeactivation) SetServiceTeam(v MemberDeactivationItem) {
	o.ServiceTeam = &v
}

// GetCompanyTeam returns the CompanyTeam field value if set, zero value otherwise.
func (o *MemberDeactivation) GetCompanyTeam() []MemberDeactivationCompanyTeam {
	if o == nil || IsNil(o.CompanyTeam) {
		var ret []MemberDeactivationCompanyTeam
		return ret
	}
	return o.CompanyTeam
}

// GetCompanyTeamOk returns a tuple with the CompanyTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetCompanyTeamOk() ([]MemberDeactivationCompanyTeam, bool) {
	if o == nil || IsNil(o.CompanyTeam) {
		return nil, false
	}
	return o.CompanyTeam, true
}

// HasCompanyTeam returns a boolean if a field has been set.
func (o *MemberDeactivation) HasCompanyTeam() bool {
	if o != nil && !IsNil(o.CompanyTeam) {
		return true
	}

	return false
}

// SetCompanyTeam gets a reference to the given []MemberDeactivationCompanyTeam and assigns it to the CompanyTeam field.
func (o *MemberDeactivation) SetCompanyTeam(v []MemberDeactivationCompanyTeam) {
	o.CompanyTeam = v
}

// GetWorkflowEmail returns the WorkflowEmail field value if set, zero value otherwise.
func (o *MemberDeactivation) GetWorkflowEmail() MemberDeactivationItem {
	if o == nil || IsNil(o.WorkflowEmail) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.WorkflowEmail
}

// GetWorkflowEmailOk returns a tuple with the WorkflowEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetWorkflowEmailOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.WorkflowEmail) {
		return nil, false
	}
	return o.WorkflowEmail, true
}

// HasWorkflowEmail returns a boolean if a field has been set.
func (o *MemberDeactivation) HasWorkflowEmail() bool {
	if o != nil && !IsNil(o.WorkflowEmail) {
		return true
	}

	return false
}

// SetWorkflowEmail gets a reference to the given MemberDeactivationItem and assigns it to the WorkflowEmail field.
func (o *MemberDeactivation) SetWorkflowEmail(v MemberDeactivationItem) {
	o.WorkflowEmail = &v
}

// GetServiceStatusWorkflow returns the ServiceStatusWorkflow field value if set, zero value otherwise.
func (o *MemberDeactivation) GetServiceStatusWorkflow() []MemberDeactivationStatusWorkflow {
	if o == nil || IsNil(o.ServiceStatusWorkflow) {
		var ret []MemberDeactivationStatusWorkflow
		return ret
	}
	return o.ServiceStatusWorkflow
}

// GetServiceStatusWorkflowOk returns a tuple with the ServiceStatusWorkflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetServiceStatusWorkflowOk() ([]MemberDeactivationStatusWorkflow, bool) {
	if o == nil || IsNil(o.ServiceStatusWorkflow) {
		return nil, false
	}
	return o.ServiceStatusWorkflow, true
}

// HasServiceStatusWorkflow returns a boolean if a field has been set.
func (o *MemberDeactivation) HasServiceStatusWorkflow() bool {
	if o != nil && !IsNil(o.ServiceStatusWorkflow) {
		return true
	}

	return false
}

// SetServiceStatusWorkflow gets a reference to the given []MemberDeactivationStatusWorkflow and assigns it to the ServiceStatusWorkflow field.
func (o *MemberDeactivation) SetServiceStatusWorkflow(v []MemberDeactivationStatusWorkflow) {
	o.ServiceStatusWorkflow = v
}

// GetTicketTemplate returns the TicketTemplate field value if set, zero value otherwise.
func (o *MemberDeactivation) GetTicketTemplate() MemberDeactivationItem {
	if o == nil || IsNil(o.TicketTemplate) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.TicketTemplate
}

// GetTicketTemplateOk returns a tuple with the TicketTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetTicketTemplateOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.TicketTemplate) {
		return nil, false
	}
	return o.TicketTemplate, true
}

// HasTicketTemplate returns a boolean if a field has been set.
func (o *MemberDeactivation) HasTicketTemplate() bool {
	if o != nil && !IsNil(o.TicketTemplate) {
		return true
	}

	return false
}

// SetTicketTemplate gets a reference to the given MemberDeactivationItem and assigns it to the TicketTemplate field.
func (o *MemberDeactivation) SetTicketTemplate(v MemberDeactivationItem) {
	o.TicketTemplate = &v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *MemberDeactivation) GetOpportunity() MemberDeactivationItem {
	if o == nil || IsNil(o.Opportunity) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetOpportunityOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *MemberDeactivation) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given MemberDeactivationItem and assigns it to the Opportunity field.
func (o *MemberDeactivation) SetOpportunity(v MemberDeactivationItem) {
	o.Opportunity = &v
}

// GetSalesTeam returns the SalesTeam field value if set, zero value otherwise.
func (o *MemberDeactivation) GetSalesTeam() MemberDeactivationItem {
	if o == nil || IsNil(o.SalesTeam) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.SalesTeam
}

// GetSalesTeamOk returns a tuple with the SalesTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetSalesTeamOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.SalesTeam) {
		return nil, false
	}
	return o.SalesTeam, true
}

// HasSalesTeam returns a boolean if a field has been set.
func (o *MemberDeactivation) HasSalesTeam() bool {
	if o != nil && !IsNil(o.SalesTeam) {
		return true
	}

	return false
}

// SetSalesTeam gets a reference to the given MemberDeactivationItem and assigns it to the SalesTeam field.
func (o *MemberDeactivation) SetSalesTeam(v MemberDeactivationItem) {
	o.SalesTeam = &v
}

// GetProjectManager returns the ProjectManager field value if set, zero value otherwise.
func (o *MemberDeactivation) GetProjectManager() MemberDeactivationItem {
	if o == nil || IsNil(o.ProjectManager) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.ProjectManager
}

// GetProjectManagerOk returns a tuple with the ProjectManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetProjectManagerOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.ProjectManager) {
		return nil, false
	}
	return o.ProjectManager, true
}

// HasProjectManager returns a boolean if a field has been set.
func (o *MemberDeactivation) HasProjectManager() bool {
	if o != nil && !IsNil(o.ProjectManager) {
		return true
	}

	return false
}

// SetProjectManager gets a reference to the given MemberDeactivationItem and assigns it to the ProjectManager field.
func (o *MemberDeactivation) SetProjectManager(v MemberDeactivationItem) {
	o.ProjectManager = &v
}

// GetProjectTimeApprover returns the ProjectTimeApprover field value if set, zero value otherwise.
func (o *MemberDeactivation) GetProjectTimeApprover() MemberDeactivationItem {
	if o == nil || IsNil(o.ProjectTimeApprover) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.ProjectTimeApprover
}

// GetProjectTimeApproverOk returns a tuple with the ProjectTimeApprover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetProjectTimeApproverOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.ProjectTimeApprover) {
		return nil, false
	}
	return o.ProjectTimeApprover, true
}

// HasProjectTimeApprover returns a boolean if a field has been set.
func (o *MemberDeactivation) HasProjectTimeApprover() bool {
	if o != nil && !IsNil(o.ProjectTimeApprover) {
		return true
	}

	return false
}

// SetProjectTimeApprover gets a reference to the given MemberDeactivationItem and assigns it to the ProjectTimeApprover field.
func (o *MemberDeactivation) SetProjectTimeApprover(v MemberDeactivationItem) {
	o.ProjectTimeApprover = &v
}

// GetProjectExpenseApprover returns the ProjectExpenseApprover field value if set, zero value otherwise.
func (o *MemberDeactivation) GetProjectExpenseApprover() MemberDeactivationItem {
	if o == nil || IsNil(o.ProjectExpenseApprover) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.ProjectExpenseApprover
}

// GetProjectExpenseApproverOk returns a tuple with the ProjectExpenseApprover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetProjectExpenseApproverOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.ProjectExpenseApprover) {
		return nil, false
	}
	return o.ProjectExpenseApprover, true
}

// HasProjectExpenseApprover returns a boolean if a field has been set.
func (o *MemberDeactivation) HasProjectExpenseApprover() bool {
	if o != nil && !IsNil(o.ProjectExpenseApprover) {
		return true
	}

	return false
}

// SetProjectExpenseApprover gets a reference to the given MemberDeactivationItem and assigns it to the ProjectExpenseApprover field.
func (o *MemberDeactivation) SetProjectExpenseApprover(v MemberDeactivationItem) {
	o.ProjectExpenseApprover = &v
}

// GetKnowledgeBaseArticle returns the KnowledgeBaseArticle field value if set, zero value otherwise.
func (o *MemberDeactivation) GetKnowledgeBaseArticle() MemberDeactivationItem {
	if o == nil || IsNil(o.KnowledgeBaseArticle) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.KnowledgeBaseArticle
}

// GetKnowledgeBaseArticleOk returns a tuple with the KnowledgeBaseArticle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetKnowledgeBaseArticleOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.KnowledgeBaseArticle) {
		return nil, false
	}
	return o.KnowledgeBaseArticle, true
}

// HasKnowledgeBaseArticle returns a boolean if a field has been set.
func (o *MemberDeactivation) HasKnowledgeBaseArticle() bool {
	if o != nil && !IsNil(o.KnowledgeBaseArticle) {
		return true
	}

	return false
}

// SetKnowledgeBaseArticle gets a reference to the given MemberDeactivationItem and assigns it to the KnowledgeBaseArticle field.
func (o *MemberDeactivation) SetKnowledgeBaseArticle(v MemberDeactivationItem) {
	o.KnowledgeBaseArticle = &v
}

// GetMyCompanyPresident returns the MyCompanyPresident field value if set, zero value otherwise.
func (o *MemberDeactivation) GetMyCompanyPresident() MemberDeactivationItem {
	if o == nil || IsNil(o.MyCompanyPresident) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.MyCompanyPresident
}

// GetMyCompanyPresidentOk returns a tuple with the MyCompanyPresident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetMyCompanyPresidentOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.MyCompanyPresident) {
		return nil, false
	}
	return o.MyCompanyPresident, true
}

// HasMyCompanyPresident returns a boolean if a field has been set.
func (o *MemberDeactivation) HasMyCompanyPresident() bool {
	if o != nil && !IsNil(o.MyCompanyPresident) {
		return true
	}

	return false
}

// SetMyCompanyPresident gets a reference to the given MemberDeactivationItem and assigns it to the MyCompanyPresident field.
func (o *MemberDeactivation) SetMyCompanyPresident(v MemberDeactivationItem) {
	o.MyCompanyPresident = &v
}

// GetMyCompanyCOO returns the MyCompanyCOO field value if set, zero value otherwise.
func (o *MemberDeactivation) GetMyCompanyCOO() MemberDeactivationItem {
	if o == nil || IsNil(o.MyCompanyCOO) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.MyCompanyCOO
}

// GetMyCompanyCOOOk returns a tuple with the MyCompanyCOO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetMyCompanyCOOOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.MyCompanyCOO) {
		return nil, false
	}
	return o.MyCompanyCOO, true
}

// HasMyCompanyCOO returns a boolean if a field has been set.
func (o *MemberDeactivation) HasMyCompanyCOO() bool {
	if o != nil && !IsNil(o.MyCompanyCOO) {
		return true
	}

	return false
}

// SetMyCompanyCOO gets a reference to the given MemberDeactivationItem and assigns it to the MyCompanyCOO field.
func (o *MemberDeactivation) SetMyCompanyCOO(v MemberDeactivationItem) {
	o.MyCompanyCOO = &v
}

// GetMyCompanyController returns the MyCompanyController field value if set, zero value otherwise.
func (o *MemberDeactivation) GetMyCompanyController() MemberDeactivationItem {
	if o == nil || IsNil(o.MyCompanyController) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.MyCompanyController
}

// GetMyCompanyControllerOk returns a tuple with the MyCompanyController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetMyCompanyControllerOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.MyCompanyController) {
		return nil, false
	}
	return o.MyCompanyController, true
}

// HasMyCompanyController returns a boolean if a field has been set.
func (o *MemberDeactivation) HasMyCompanyController() bool {
	if o != nil && !IsNil(o.MyCompanyController) {
		return true
	}

	return false
}

// SetMyCompanyController gets a reference to the given MemberDeactivationItem and assigns it to the MyCompanyController field.
func (o *MemberDeactivation) SetMyCompanyController(v MemberDeactivationItem) {
	o.MyCompanyController = &v
}

// GetMyCompanyDispatch returns the MyCompanyDispatch field value if set, zero value otherwise.
func (o *MemberDeactivation) GetMyCompanyDispatch() MemberDeactivationItem {
	if o == nil || IsNil(o.MyCompanyDispatch) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.MyCompanyDispatch
}

// GetMyCompanyDispatchOk returns a tuple with the MyCompanyDispatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetMyCompanyDispatchOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.MyCompanyDispatch) {
		return nil, false
	}
	return o.MyCompanyDispatch, true
}

// HasMyCompanyDispatch returns a boolean if a field has been set.
func (o *MemberDeactivation) HasMyCompanyDispatch() bool {
	if o != nil && !IsNil(o.MyCompanyDispatch) {
		return true
	}

	return false
}

// SetMyCompanyDispatch gets a reference to the given MemberDeactivationItem and assigns it to the MyCompanyDispatch field.
func (o *MemberDeactivation) SetMyCompanyDispatch(v MemberDeactivationItem) {
	o.MyCompanyDispatch = &v
}

// GetMyCompanyServiceManager returns the MyCompanyServiceManager field value if set, zero value otherwise.
func (o *MemberDeactivation) GetMyCompanyServiceManager() MemberDeactivationItem {
	if o == nil || IsNil(o.MyCompanyServiceManager) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.MyCompanyServiceManager
}

// GetMyCompanyServiceManagerOk returns a tuple with the MyCompanyServiceManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetMyCompanyServiceManagerOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.MyCompanyServiceManager) {
		return nil, false
	}
	return o.MyCompanyServiceManager, true
}

// HasMyCompanyServiceManager returns a boolean if a field has been set.
func (o *MemberDeactivation) HasMyCompanyServiceManager() bool {
	if o != nil && !IsNil(o.MyCompanyServiceManager) {
		return true
	}

	return false
}

// SetMyCompanyServiceManager gets a reference to the given MemberDeactivationItem and assigns it to the MyCompanyServiceManager field.
func (o *MemberDeactivation) SetMyCompanyServiceManager(v MemberDeactivationItem) {
	o.MyCompanyServiceManager = &v
}

// GetMyCompanyDutyManagerRole returns the MyCompanyDutyManagerRole field value if set, zero value otherwise.
func (o *MemberDeactivation) GetMyCompanyDutyManagerRole() MemberDeactivationItem {
	if o == nil || IsNil(o.MyCompanyDutyManagerRole) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.MyCompanyDutyManagerRole
}

// GetMyCompanyDutyManagerRoleOk returns a tuple with the MyCompanyDutyManagerRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetMyCompanyDutyManagerRoleOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.MyCompanyDutyManagerRole) {
		return nil, false
	}
	return o.MyCompanyDutyManagerRole, true
}

// HasMyCompanyDutyManagerRole returns a boolean if a field has been set.
func (o *MemberDeactivation) HasMyCompanyDutyManagerRole() bool {
	if o != nil && !IsNil(o.MyCompanyDutyManagerRole) {
		return true
	}

	return false
}

// SetMyCompanyDutyManagerRole gets a reference to the given MemberDeactivationItem and assigns it to the MyCompanyDutyManagerRole field.
func (o *MemberDeactivation) SetMyCompanyDutyManagerRole(v MemberDeactivationItem) {
	o.MyCompanyDutyManagerRole = &v
}

// GetDepartmentManager returns the DepartmentManager field value if set, zero value otherwise.
func (o *MemberDeactivation) GetDepartmentManager() MemberDeactivationItem {
	if o == nil || IsNil(o.DepartmentManager) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.DepartmentManager
}

// GetDepartmentManagerOk returns a tuple with the DepartmentManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetDepartmentManagerOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.DepartmentManager) {
		return nil, false
	}
	return o.DepartmentManager, true
}

// HasDepartmentManager returns a boolean if a field has been set.
func (o *MemberDeactivation) HasDepartmentManager() bool {
	if o != nil && !IsNil(o.DepartmentManager) {
		return true
	}

	return false
}

// SetDepartmentManager gets a reference to the given MemberDeactivationItem and assigns it to the DepartmentManager field.
func (o *MemberDeactivation) SetDepartmentManager(v MemberDeactivationItem) {
	o.DepartmentManager = &v
}

// GetDispatchMember returns the DispatchMember field value if set, zero value otherwise.
func (o *MemberDeactivation) GetDispatchMember() MemberDeactivationItem {
	if o == nil || IsNil(o.DispatchMember) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.DispatchMember
}

// GetDispatchMemberOk returns a tuple with the DispatchMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetDispatchMemberOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.DispatchMember) {
		return nil, false
	}
	return o.DispatchMember, true
}

// HasDispatchMember returns a boolean if a field has been set.
func (o *MemberDeactivation) HasDispatchMember() bool {
	if o != nil && !IsNil(o.DispatchMember) {
		return true
	}

	return false
}

// SetDispatchMember gets a reference to the given MemberDeactivationItem and assigns it to the DispatchMember field.
func (o *MemberDeactivation) SetDispatchMember(v MemberDeactivationItem) {
	o.DispatchMember = &v
}

// GetServiceManager returns the ServiceManager field value if set, zero value otherwise.
func (o *MemberDeactivation) GetServiceManager() MemberDeactivationItem {
	if o == nil || IsNil(o.ServiceManager) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.ServiceManager
}

// GetServiceManagerOk returns a tuple with the ServiceManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetServiceManagerOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.ServiceManager) {
		return nil, false
	}
	return o.ServiceManager, true
}

// HasServiceManager returns a boolean if a field has been set.
func (o *MemberDeactivation) HasServiceManager() bool {
	if o != nil && !IsNil(o.ServiceManager) {
		return true
	}

	return false
}

// SetServiceManager gets a reference to the given MemberDeactivationItem and assigns it to the ServiceManager field.
func (o *MemberDeactivation) SetServiceManager(v MemberDeactivationItem) {
	o.ServiceManager = &v
}

// GetDutyManager returns the DutyManager field value if set, zero value otherwise.
func (o *MemberDeactivation) GetDutyManager() MemberDeactivationItem {
	if o == nil || IsNil(o.DutyManager) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.DutyManager
}

// GetDutyManagerOk returns a tuple with the DutyManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetDutyManagerOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.DutyManager) {
		return nil, false
	}
	return o.DutyManager, true
}

// HasDutyManager returns a boolean if a field has been set.
func (o *MemberDeactivation) HasDutyManager() bool {
	if o != nil && !IsNil(o.DutyManager) {
		return true
	}

	return false
}

// SetDutyManager gets a reference to the given MemberDeactivationItem and assigns it to the DutyManager field.
func (o *MemberDeactivation) SetDutyManager(v MemberDeactivationItem) {
	o.DutyManager = &v
}

// GetSendFromEmailNotify returns the SendFromEmailNotify field value if set, zero value otherwise.
func (o *MemberDeactivation) GetSendFromEmailNotify() MemberDeactivationItem {
	if o == nil || IsNil(o.SendFromEmailNotify) {
		var ret MemberDeactivationItem
		return ret
	}
	return *o.SendFromEmailNotify
}

// GetSendFromEmailNotifyOk returns a tuple with the SendFromEmailNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDeactivation) GetSendFromEmailNotifyOk() (*MemberDeactivationItem, bool) {
	if o == nil || IsNil(o.SendFromEmailNotify) {
		return nil, false
	}
	return o.SendFromEmailNotify, true
}

// HasSendFromEmailNotify returns a boolean if a field has been set.
func (o *MemberDeactivation) HasSendFromEmailNotify() bool {
	if o != nil && !IsNil(o.SendFromEmailNotify) {
		return true
	}

	return false
}

// SetSendFromEmailNotify gets a reference to the given MemberDeactivationItem and assigns it to the SendFromEmailNotify field.
func (o *MemberDeactivation) SetSendFromEmailNotify(v MemberDeactivationItem) {
	o.SendFromEmailNotify = &v
}

// GetDeleteOpenTimeSheetsFlag returns the DeleteOpenTimeSheetsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDeactivation) GetDeleteOpenTimeSheetsFlag() bool {
	if o == nil || IsNil(o.DeleteOpenTimeSheetsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DeleteOpenTimeSheetsFlag.Get()
}

// GetDeleteOpenTimeSheetsFlagOk returns a tuple with the DeleteOpenTimeSheetsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDeactivation) GetDeleteOpenTimeSheetsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteOpenTimeSheetsFlag.Get(), o.DeleteOpenTimeSheetsFlag.IsSet()
}

// HasDeleteOpenTimeSheetsFlag returns a boolean if a field has been set.
func (o *MemberDeactivation) HasDeleteOpenTimeSheetsFlag() bool {
	if o != nil && o.DeleteOpenTimeSheetsFlag.IsSet() {
		return true
	}

	return false
}

// SetDeleteOpenTimeSheetsFlag gets a reference to the given NullableBool and assigns it to the DeleteOpenTimeSheetsFlag field.
func (o *MemberDeactivation) SetDeleteOpenTimeSheetsFlag(v bool) {
	o.DeleteOpenTimeSheetsFlag.Set(&v)
}

// SetDeleteOpenTimeSheetsFlagNil sets the value for DeleteOpenTimeSheetsFlag to be an explicit nil
func (o *MemberDeactivation) SetDeleteOpenTimeSheetsFlagNil() {
	o.DeleteOpenTimeSheetsFlag.Set(nil)
}

// UnsetDeleteOpenTimeSheetsFlag ensures that no value is present for DeleteOpenTimeSheetsFlag, not even an explicit nil
func (o *MemberDeactivation) UnsetDeleteOpenTimeSheetsFlag() {
	o.DeleteOpenTimeSheetsFlag.Unset()
}

func (o MemberDeactivation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDeactivation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.ServiceTeam) {
		toSerialize["serviceTeam"] = o.ServiceTeam
	}
	if !IsNil(o.CompanyTeam) {
		toSerialize["companyTeam"] = o.CompanyTeam
	}
	if !IsNil(o.WorkflowEmail) {
		toSerialize["workflowEmail"] = o.WorkflowEmail
	}
	if !IsNil(o.ServiceStatusWorkflow) {
		toSerialize["serviceStatusWorkflow"] = o.ServiceStatusWorkflow
	}
	if !IsNil(o.TicketTemplate) {
		toSerialize["ticketTemplate"] = o.TicketTemplate
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.SalesTeam) {
		toSerialize["salesTeam"] = o.SalesTeam
	}
	if !IsNil(o.ProjectManager) {
		toSerialize["projectManager"] = o.ProjectManager
	}
	if !IsNil(o.ProjectTimeApprover) {
		toSerialize["projectTimeApprover"] = o.ProjectTimeApprover
	}
	if !IsNil(o.ProjectExpenseApprover) {
		toSerialize["projectExpenseApprover"] = o.ProjectExpenseApprover
	}
	if !IsNil(o.KnowledgeBaseArticle) {
		toSerialize["knowledgeBaseArticle"] = o.KnowledgeBaseArticle
	}
	if !IsNil(o.MyCompanyPresident) {
		toSerialize["myCompanyPresident"] = o.MyCompanyPresident
	}
	if !IsNil(o.MyCompanyCOO) {
		toSerialize["myCompanyCOO"] = o.MyCompanyCOO
	}
	if !IsNil(o.MyCompanyController) {
		toSerialize["myCompanyController"] = o.MyCompanyController
	}
	if !IsNil(o.MyCompanyDispatch) {
		toSerialize["myCompanyDispatch"] = o.MyCompanyDispatch
	}
	if !IsNil(o.MyCompanyServiceManager) {
		toSerialize["myCompanyServiceManager"] = o.MyCompanyServiceManager
	}
	if !IsNil(o.MyCompanyDutyManagerRole) {
		toSerialize["myCompanyDutyManagerRole"] = o.MyCompanyDutyManagerRole
	}
	if !IsNil(o.DepartmentManager) {
		toSerialize["departmentManager"] = o.DepartmentManager
	}
	if !IsNil(o.DispatchMember) {
		toSerialize["dispatchMember"] = o.DispatchMember
	}
	if !IsNil(o.ServiceManager) {
		toSerialize["serviceManager"] = o.ServiceManager
	}
	if !IsNil(o.DutyManager) {
		toSerialize["dutyManager"] = o.DutyManager
	}
	if !IsNil(o.SendFromEmailNotify) {
		toSerialize["sendFromEmailNotify"] = o.SendFromEmailNotify
	}
	if o.DeleteOpenTimeSheetsFlag.IsSet() {
		toSerialize["deleteOpenTimeSheetsFlag"] = o.DeleteOpenTimeSheetsFlag.Get()
	}
	return toSerialize, nil
}

type NullableMemberDeactivation struct {
	value *MemberDeactivation
	isSet bool
}

func (v NullableMemberDeactivation) Get() *MemberDeactivation {
	return v.value
}

func (v *NullableMemberDeactivation) Set(val *MemberDeactivation) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDeactivation) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDeactivation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDeactivation(val *MemberDeactivation) *NullableMemberDeactivation {
	return &NullableMemberDeactivation{value: val, isSet: true}
}

func (v NullableMemberDeactivation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDeactivation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
