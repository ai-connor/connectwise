/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MemberDelegation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDelegation{}

// MemberDelegation struct for MemberDelegation
type MemberDelegation struct {
	Id             *int32             `json:"id,omitempty"`
	DelegationType NullableString     `json:"delegationType"`
	DelegatedTo    MemberReference    `json:"delegatedTo"`
	DateStart      time.Time          `json:"dateStart"`
	DateEnd        time.Time          `json:"dateEnd"`
	Member         *MemberReference   `json:"member,omitempty"`
	Info           *map[string]string `json:"_info,omitempty"`
}

type _MemberDelegation MemberDelegation

// NewMemberDelegation instantiates a new MemberDelegation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDelegation(delegationType NullableString, delegatedTo MemberReference, dateStart time.Time, dateEnd time.Time) *MemberDelegation {
	this := MemberDelegation{}
	this.DelegationType = delegationType
	this.DelegatedTo = delegatedTo
	this.DateStart = dateStart
	this.DateEnd = dateEnd
	return &this
}

// NewMemberDelegationWithDefaults instantiates a new MemberDelegation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDelegationWithDefaults() *MemberDelegation {
	this := MemberDelegation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberDelegation) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDelegation) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberDelegation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MemberDelegation) SetId(v int32) {
	o.Id = &v
}

// GetDelegationType returns the DelegationType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MemberDelegation) GetDelegationType() string {
	if o == nil || o.DelegationType.Get() == nil {
		var ret string
		return ret
	}

	return *o.DelegationType.Get()
}

// GetDelegationTypeOk returns a tuple with the DelegationType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDelegation) GetDelegationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegationType.Get(), o.DelegationType.IsSet()
}

// SetDelegationType sets field value
func (o *MemberDelegation) SetDelegationType(v string) {
	o.DelegationType.Set(&v)
}

// GetDelegatedTo returns the DelegatedTo field value
func (o *MemberDelegation) GetDelegatedTo() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.DelegatedTo
}

// GetDelegatedToOk returns a tuple with the DelegatedTo field value
// and a boolean to check if the value has been set.
func (o *MemberDelegation) GetDelegatedToOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelegatedTo, true
}

// SetDelegatedTo sets field value
func (o *MemberDelegation) SetDelegatedTo(v MemberReference) {
	o.DelegatedTo = v
}

// GetDateStart returns the DateStart field value
func (o *MemberDelegation) GetDateStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value
// and a boolean to check if the value has been set.
func (o *MemberDelegation) GetDateStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateStart, true
}

// SetDateStart sets field value
func (o *MemberDelegation) SetDateStart(v time.Time) {
	o.DateStart = v
}

// GetDateEnd returns the DateEnd field value
func (o *MemberDelegation) GetDateEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value
// and a boolean to check if the value has been set.
func (o *MemberDelegation) GetDateEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateEnd, true
}

// SetDateEnd sets field value
func (o *MemberDelegation) SetDateEnd(v time.Time) {
	o.DateEnd = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *MemberDelegation) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDelegation) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *MemberDelegation) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *MemberDelegation) SetMember(v MemberReference) {
	o.Member = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MemberDelegation) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDelegation) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MemberDelegation) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MemberDelegation) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MemberDelegation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDelegation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["delegationType"] = o.DelegationType.Get()
	toSerialize["delegatedTo"] = o.DelegatedTo
	toSerialize["dateStart"] = o.DateStart
	toSerialize["dateEnd"] = o.DateEnd
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *MemberDelegation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delegationType",
		"delegatedTo",
		"dateStart",
		"dateEnd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberDelegation := _MemberDelegation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberDelegation)

	if err != nil {
		return err
	}

	*o = MemberDelegation(varMemberDelegation)

	return err
}

type NullableMemberDelegation struct {
	value *MemberDelegation
	isSet bool
}

func (v NullableMemberDelegation) Get() *MemberDelegation {
	return v.value
}

func (v *NullableMemberDelegation) Set(val *MemberDelegation) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDelegation) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDelegation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDelegation(val *MemberDelegation) *NullableMemberDelegation {
	return &NullableMemberDelegation{value: val, isSet: true}
}

func (v NullableMemberDelegation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDelegation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
