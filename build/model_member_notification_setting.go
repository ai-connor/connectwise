/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MemberNotificationSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberNotificationSetting{}

// MemberNotificationSetting struct for MemberNotificationSetting
type MemberNotificationSetting struct {
	Id                  *int32             `json:"id,omitempty"`
	NotificationType    NullableString     `json:"notificationType"`
	NotificationTrigger NullableString     `json:"notificationTrigger"`
	Info                *map[string]string `json:"_info,omitempty"`
}

type _MemberNotificationSetting MemberNotificationSetting

// NewMemberNotificationSetting instantiates a new MemberNotificationSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberNotificationSetting(notificationType NullableString, notificationTrigger NullableString) *MemberNotificationSetting {
	this := MemberNotificationSetting{}
	this.NotificationType = notificationType
	this.NotificationTrigger = notificationTrigger
	return &this
}

// NewMemberNotificationSettingWithDefaults instantiates a new MemberNotificationSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberNotificationSettingWithDefaults() *MemberNotificationSetting {
	this := MemberNotificationSetting{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberNotificationSetting) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberNotificationSetting) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberNotificationSetting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MemberNotificationSetting) SetId(v int32) {
	o.Id = &v
}

// GetNotificationType returns the NotificationType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MemberNotificationSetting) GetNotificationType() string {
	if o == nil || o.NotificationType.Get() == nil {
		var ret string
		return ret
	}

	return *o.NotificationType.Get()
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberNotificationSetting) GetNotificationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationType.Get(), o.NotificationType.IsSet()
}

// SetNotificationType sets field value
func (o *MemberNotificationSetting) SetNotificationType(v string) {
	o.NotificationType.Set(&v)
}

// GetNotificationTrigger returns the NotificationTrigger field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MemberNotificationSetting) GetNotificationTrigger() string {
	if o == nil || o.NotificationTrigger.Get() == nil {
		var ret string
		return ret
	}

	return *o.NotificationTrigger.Get()
}

// GetNotificationTriggerOk returns a tuple with the NotificationTrigger field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberNotificationSetting) GetNotificationTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationTrigger.Get(), o.NotificationTrigger.IsSet()
}

// SetNotificationTrigger sets field value
func (o *MemberNotificationSetting) SetNotificationTrigger(v string) {
	o.NotificationTrigger.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MemberNotificationSetting) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberNotificationSetting) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MemberNotificationSetting) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MemberNotificationSetting) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MemberNotificationSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberNotificationSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["notificationType"] = o.NotificationType.Get()
	toSerialize["notificationTrigger"] = o.NotificationTrigger.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *MemberNotificationSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notificationType",
		"notificationTrigger",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberNotificationSetting := _MemberNotificationSetting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberNotificationSetting)

	if err != nil {
		return err
	}

	*o = MemberNotificationSetting(varMemberNotificationSetting)

	return err
}

type NullableMemberNotificationSetting struct {
	value *MemberNotificationSetting
	isSet bool
}

func (v NullableMemberNotificationSetting) Get() *MemberNotificationSetting {
	return v.value
}

func (v *NullableMemberNotificationSetting) Set(val *MemberNotificationSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberNotificationSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberNotificationSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberNotificationSetting(val *MemberNotificationSetting) *NullableMemberNotificationSetting {
	return &NullableMemberNotificationSetting{value: val, isSet: true}
}

func (v NullableMemberNotificationSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberNotificationSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
