/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MemberSkill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberSkill{}

// MemberSkill struct for MemberSkill
type MemberSkill struct {
	Id              *int32             `json:"id,omitempty"`
	Skill           SkillReference     `json:"skill"`
	SkillLevel      NullableString     `json:"skillLevel"`
	CertifiedFlag   NullableBool       `json:"certifiedFlag,omitempty"`
	YearsExperience NullableInt32      `json:"yearsExperience,omitempty"`
	Notes           *string            `json:"notes,omitempty"`
	Member          *MemberReference   `json:"member,omitempty"`
	Info            *map[string]string `json:"_info,omitempty"`
}

type _MemberSkill MemberSkill

// NewMemberSkill instantiates a new MemberSkill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberSkill(skill SkillReference, skillLevel NullableString) *MemberSkill {
	this := MemberSkill{}
	this.Skill = skill
	this.SkillLevel = skillLevel
	return &this
}

// NewMemberSkillWithDefaults instantiates a new MemberSkill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberSkillWithDefaults() *MemberSkill {
	this := MemberSkill{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberSkill) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSkill) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberSkill) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MemberSkill) SetId(v int32) {
	o.Id = &v
}

// GetSkill returns the Skill field value
func (o *MemberSkill) GetSkill() SkillReference {
	if o == nil {
		var ret SkillReference
		return ret
	}

	return o.Skill
}

// GetSkillOk returns a tuple with the Skill field value
// and a boolean to check if the value has been set.
func (o *MemberSkill) GetSkillOk() (*SkillReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skill, true
}

// SetSkill sets field value
func (o *MemberSkill) SetSkill(v SkillReference) {
	o.Skill = v
}

// GetSkillLevel returns the SkillLevel field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MemberSkill) GetSkillLevel() string {
	if o == nil || o.SkillLevel.Get() == nil {
		var ret string
		return ret
	}

	return *o.SkillLevel.Get()
}

// GetSkillLevelOk returns a tuple with the SkillLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberSkill) GetSkillLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkillLevel.Get(), o.SkillLevel.IsSet()
}

// SetSkillLevel sets field value
func (o *MemberSkill) SetSkillLevel(v string) {
	o.SkillLevel.Set(&v)
}

// GetCertifiedFlag returns the CertifiedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberSkill) GetCertifiedFlag() bool {
	if o == nil || IsNil(o.CertifiedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CertifiedFlag.Get()
}

// GetCertifiedFlagOk returns a tuple with the CertifiedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberSkill) GetCertifiedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertifiedFlag.Get(), o.CertifiedFlag.IsSet()
}

// HasCertifiedFlag returns a boolean if a field has been set.
func (o *MemberSkill) HasCertifiedFlag() bool {
	if o != nil && o.CertifiedFlag.IsSet() {
		return true
	}

	return false
}

// SetCertifiedFlag gets a reference to the given NullableBool and assigns it to the CertifiedFlag field.
func (o *MemberSkill) SetCertifiedFlag(v bool) {
	o.CertifiedFlag.Set(&v)
}

// SetCertifiedFlagNil sets the value for CertifiedFlag to be an explicit nil
func (o *MemberSkill) SetCertifiedFlagNil() {
	o.CertifiedFlag.Set(nil)
}

// UnsetCertifiedFlag ensures that no value is present for CertifiedFlag, not even an explicit nil
func (o *MemberSkill) UnsetCertifiedFlag() {
	o.CertifiedFlag.Unset()
}

// GetYearsExperience returns the YearsExperience field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberSkill) GetYearsExperience() int32 {
	if o == nil || IsNil(o.YearsExperience.Get()) {
		var ret int32
		return ret
	}
	return *o.YearsExperience.Get()
}

// GetYearsExperienceOk returns a tuple with the YearsExperience field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberSkill) GetYearsExperienceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.YearsExperience.Get(), o.YearsExperience.IsSet()
}

// HasYearsExperience returns a boolean if a field has been set.
func (o *MemberSkill) HasYearsExperience() bool {
	if o != nil && o.YearsExperience.IsSet() {
		return true
	}

	return false
}

// SetYearsExperience gets a reference to the given NullableInt32 and assigns it to the YearsExperience field.
func (o *MemberSkill) SetYearsExperience(v int32) {
	o.YearsExperience.Set(&v)
}

// SetYearsExperienceNil sets the value for YearsExperience to be an explicit nil
func (o *MemberSkill) SetYearsExperienceNil() {
	o.YearsExperience.Set(nil)
}

// UnsetYearsExperience ensures that no value is present for YearsExperience, not even an explicit nil
func (o *MemberSkill) UnsetYearsExperience() {
	o.YearsExperience.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *MemberSkill) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSkill) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *MemberSkill) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *MemberSkill) SetNotes(v string) {
	o.Notes = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *MemberSkill) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSkill) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *MemberSkill) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *MemberSkill) SetMember(v MemberReference) {
	o.Member = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MemberSkill) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberSkill) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MemberSkill) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MemberSkill) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MemberSkill) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberSkill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["skill"] = o.Skill
	toSerialize["skillLevel"] = o.SkillLevel.Get()
	if o.CertifiedFlag.IsSet() {
		toSerialize["certifiedFlag"] = o.CertifiedFlag.Get()
	}
	if o.YearsExperience.IsSet() {
		toSerialize["yearsExperience"] = o.YearsExperience.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *MemberSkill) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"skill",
		"skillLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberSkill := _MemberSkill{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberSkill)

	if err != nil {
		return err
	}

	*o = MemberSkill(varMemberSkill)

	return err
}

type NullableMemberSkill struct {
	value *MemberSkill
	isSet bool
}

func (v NullableMemberSkill) Get() *MemberSkill {
	return v.value
}

func (v *NullableMemberSkill) Set(val *MemberSkill) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberSkill) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberSkill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberSkill(val *MemberSkill) *NullableMemberSkill {
	return &NullableMemberSkill{value: val, isSet: true}
}

func (v NullableMemberSkill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberSkill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
