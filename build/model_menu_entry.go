/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MenuEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MenuEntry{}

// MenuEntry struct for MenuEntry
type MenuEntry struct {
	Id           *int32                `json:"id,omitempty"`
	MenuLocation MenuLocationReference `json:"menuLocation"`
	//  Max length: 50;
	Caption string `json:"caption"`
	//  Max length: 2000;
	Link          string       `json:"link"`
	NewWindowFlag NullableBool `json:"newWindowFlag"`
	LocationIds   []int32      `json:"locationIds,omitempty"`
	//  Max length: 2000;
	Origin *string `json:"origin,omitempty"`
	// Only required if not already set Max length: 36;
	ClientId           *string            `json:"clientId,omitempty"`
	AddAllLocations    NullableBool       `json:"addAllLocations,omitempty"`
	RemoveAllLocations NullableBool       `json:"removeAllLocations,omitempty"`
	SmallMenuIconId    NullableInt32      `json:"smallMenuIconId,omitempty"`
	LargeMenuIconId    NullableInt32      `json:"largeMenuIconId,omitempty"`
	Info               *map[string]string `json:"_info,omitempty"`
}

type _MenuEntry MenuEntry

// NewMenuEntry instantiates a new MenuEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMenuEntry(menuLocation MenuLocationReference, caption string, link string, newWindowFlag NullableBool) *MenuEntry {
	this := MenuEntry{}
	this.MenuLocation = menuLocation
	this.Caption = caption
	this.Link = link
	this.NewWindowFlag = newWindowFlag
	return &this
}

// NewMenuEntryWithDefaults instantiates a new MenuEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMenuEntryWithDefaults() *MenuEntry {
	this := MenuEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MenuEntry) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MenuEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MenuEntry) SetId(v int32) {
	o.Id = &v
}

// GetMenuLocation returns the MenuLocation field value
func (o *MenuEntry) GetMenuLocation() MenuLocationReference {
	if o == nil {
		var ret MenuLocationReference
		return ret
	}

	return o.MenuLocation
}

// GetMenuLocationOk returns a tuple with the MenuLocation field value
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetMenuLocationOk() (*MenuLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MenuLocation, true
}

// SetMenuLocation sets field value
func (o *MenuEntry) SetMenuLocation(v MenuLocationReference) {
	o.MenuLocation = v
}

// GetCaption returns the Caption field value
func (o *MenuEntry) GetCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Caption, true
}

// SetCaption sets field value
func (o *MenuEntry) SetCaption(v string) {
	o.Caption = v
}

// GetLink returns the Link field value
func (o *MenuEntry) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *MenuEntry) SetLink(v string) {
	o.Link = v
}

// GetNewWindowFlag returns the NewWindowFlag field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *MenuEntry) GetNewWindowFlag() bool {
	if o == nil || o.NewWindowFlag.Get() == nil {
		var ret bool
		return ret
	}

	return *o.NewWindowFlag.Get()
}

// GetNewWindowFlagOk returns a tuple with the NewWindowFlag field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuEntry) GetNewWindowFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewWindowFlag.Get(), o.NewWindowFlag.IsSet()
}

// SetNewWindowFlag sets field value
func (o *MenuEntry) SetNewWindowFlag(v bool) {
	o.NewWindowFlag.Set(&v)
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *MenuEntry) GetLocationIds() []int32 {
	if o == nil || IsNil(o.LocationIds) {
		var ret []int32
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetLocationIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *MenuEntry) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []int32 and assigns it to the LocationIds field.
func (o *MenuEntry) SetLocationIds(v []int32) {
	o.LocationIds = v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *MenuEntry) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *MenuEntry) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *MenuEntry) SetOrigin(v string) {
	o.Origin = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *MenuEntry) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *MenuEntry) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *MenuEntry) SetClientId(v string) {
	o.ClientId = &v
}

// GetAddAllLocations returns the AddAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuEntry) GetAddAllLocations() bool {
	if o == nil || IsNil(o.AddAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllLocations.Get()
}

// GetAddAllLocationsOk returns a tuple with the AddAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuEntry) GetAddAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllLocations.Get(), o.AddAllLocations.IsSet()
}

// HasAddAllLocations returns a boolean if a field has been set.
func (o *MenuEntry) HasAddAllLocations() bool {
	if o != nil && o.AddAllLocations.IsSet() {
		return true
	}

	return false
}

// SetAddAllLocations gets a reference to the given NullableBool and assigns it to the AddAllLocations field.
func (o *MenuEntry) SetAddAllLocations(v bool) {
	o.AddAllLocations.Set(&v)
}

// SetAddAllLocationsNil sets the value for AddAllLocations to be an explicit nil
func (o *MenuEntry) SetAddAllLocationsNil() {
	o.AddAllLocations.Set(nil)
}

// UnsetAddAllLocations ensures that no value is present for AddAllLocations, not even an explicit nil
func (o *MenuEntry) UnsetAddAllLocations() {
	o.AddAllLocations.Unset()
}

// GetRemoveAllLocations returns the RemoveAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuEntry) GetRemoveAllLocations() bool {
	if o == nil || IsNil(o.RemoveAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllLocations.Get()
}

// GetRemoveAllLocationsOk returns a tuple with the RemoveAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuEntry) GetRemoveAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllLocations.Get(), o.RemoveAllLocations.IsSet()
}

// HasRemoveAllLocations returns a boolean if a field has been set.
func (o *MenuEntry) HasRemoveAllLocations() bool {
	if o != nil && o.RemoveAllLocations.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllLocations gets a reference to the given NullableBool and assigns it to the RemoveAllLocations field.
func (o *MenuEntry) SetRemoveAllLocations(v bool) {
	o.RemoveAllLocations.Set(&v)
}

// SetRemoveAllLocationsNil sets the value for RemoveAllLocations to be an explicit nil
func (o *MenuEntry) SetRemoveAllLocationsNil() {
	o.RemoveAllLocations.Set(nil)
}

// UnsetRemoveAllLocations ensures that no value is present for RemoveAllLocations, not even an explicit nil
func (o *MenuEntry) UnsetRemoveAllLocations() {
	o.RemoveAllLocations.Unset()
}

// GetSmallMenuIconId returns the SmallMenuIconId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuEntry) GetSmallMenuIconId() int32 {
	if o == nil || IsNil(o.SmallMenuIconId.Get()) {
		var ret int32
		return ret
	}
	return *o.SmallMenuIconId.Get()
}

// GetSmallMenuIconIdOk returns a tuple with the SmallMenuIconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuEntry) GetSmallMenuIconIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmallMenuIconId.Get(), o.SmallMenuIconId.IsSet()
}

// HasSmallMenuIconId returns a boolean if a field has been set.
func (o *MenuEntry) HasSmallMenuIconId() bool {
	if o != nil && o.SmallMenuIconId.IsSet() {
		return true
	}

	return false
}

// SetSmallMenuIconId gets a reference to the given NullableInt32 and assigns it to the SmallMenuIconId field.
func (o *MenuEntry) SetSmallMenuIconId(v int32) {
	o.SmallMenuIconId.Set(&v)
}

// SetSmallMenuIconIdNil sets the value for SmallMenuIconId to be an explicit nil
func (o *MenuEntry) SetSmallMenuIconIdNil() {
	o.SmallMenuIconId.Set(nil)
}

// UnsetSmallMenuIconId ensures that no value is present for SmallMenuIconId, not even an explicit nil
func (o *MenuEntry) UnsetSmallMenuIconId() {
	o.SmallMenuIconId.Unset()
}

// GetLargeMenuIconId returns the LargeMenuIconId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MenuEntry) GetLargeMenuIconId() int32 {
	if o == nil || IsNil(o.LargeMenuIconId.Get()) {
		var ret int32
		return ret
	}
	return *o.LargeMenuIconId.Get()
}

// GetLargeMenuIconIdOk returns a tuple with the LargeMenuIconId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MenuEntry) GetLargeMenuIconIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LargeMenuIconId.Get(), o.LargeMenuIconId.IsSet()
}

// HasLargeMenuIconId returns a boolean if a field has been set.
func (o *MenuEntry) HasLargeMenuIconId() bool {
	if o != nil && o.LargeMenuIconId.IsSet() {
		return true
	}

	return false
}

// SetLargeMenuIconId gets a reference to the given NullableInt32 and assigns it to the LargeMenuIconId field.
func (o *MenuEntry) SetLargeMenuIconId(v int32) {
	o.LargeMenuIconId.Set(&v)
}

// SetLargeMenuIconIdNil sets the value for LargeMenuIconId to be an explicit nil
func (o *MenuEntry) SetLargeMenuIconIdNil() {
	o.LargeMenuIconId.Set(nil)
}

// UnsetLargeMenuIconId ensures that no value is present for LargeMenuIconId, not even an explicit nil
func (o *MenuEntry) UnsetLargeMenuIconId() {
	o.LargeMenuIconId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MenuEntry) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MenuEntry) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MenuEntry) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MenuEntry) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MenuEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MenuEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["menuLocation"] = o.MenuLocation
	toSerialize["caption"] = o.Caption
	toSerialize["link"] = o.Link
	toSerialize["newWindowFlag"] = o.NewWindowFlag.Get()
	if !IsNil(o.LocationIds) {
		toSerialize["locationIds"] = o.LocationIds
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if o.AddAllLocations.IsSet() {
		toSerialize["addAllLocations"] = o.AddAllLocations.Get()
	}
	if o.RemoveAllLocations.IsSet() {
		toSerialize["removeAllLocations"] = o.RemoveAllLocations.Get()
	}
	if o.SmallMenuIconId.IsSet() {
		toSerialize["smallMenuIconId"] = o.SmallMenuIconId.Get()
	}
	if o.LargeMenuIconId.IsSet() {
		toSerialize["largeMenuIconId"] = o.LargeMenuIconId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *MenuEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"menuLocation",
		"caption",
		"link",
		"newWindowFlag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMenuEntry := _MenuEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMenuEntry)

	if err != nil {
		return err
	}

	*o = MenuEntry(varMenuEntry)

	return err
}

type NullableMenuEntry struct {
	value *MenuEntry
	isSet bool
}

func (v NullableMenuEntry) Get() *MenuEntry {
	return v.value
}

func (v *NullableMenuEntry) Set(val *MenuEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableMenuEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableMenuEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMenuEntry(val *MenuEntry) *NullableMenuEntry {
	return &NullableMenuEntry{value: val, isSet: true}
}

func (v NullableMenuEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMenuEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
