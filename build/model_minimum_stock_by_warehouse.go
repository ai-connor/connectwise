/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MinimumStockByWarehouse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinimumStockByWarehouse{}

// MinimumStockByWarehouse struct for MinimumStockByWarehouse
type MinimumStockByWarehouse struct {
	Id           *int32             `json:"id,omitempty"`
	Warehouse    WarehouseReference `json:"warehouse"`
	MinimumStock NullableInt32      `json:"minimumStock"`
	Info         *map[string]string `json:"_info,omitempty"`
}

type _MinimumStockByWarehouse MinimumStockByWarehouse

// NewMinimumStockByWarehouse instantiates a new MinimumStockByWarehouse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimumStockByWarehouse(warehouse WarehouseReference, minimumStock NullableInt32) *MinimumStockByWarehouse {
	this := MinimumStockByWarehouse{}
	this.Warehouse = warehouse
	this.MinimumStock = minimumStock
	return &this
}

// NewMinimumStockByWarehouseWithDefaults instantiates a new MinimumStockByWarehouse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimumStockByWarehouseWithDefaults() *MinimumStockByWarehouse {
	this := MinimumStockByWarehouse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinimumStockByWarehouse) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimumStockByWarehouse) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinimumStockByWarehouse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MinimumStockByWarehouse) SetId(v int32) {
	o.Id = &v
}

// GetWarehouse returns the Warehouse field value
func (o *MinimumStockByWarehouse) GetWarehouse() WarehouseReference {
	if o == nil {
		var ret WarehouseReference
		return ret
	}

	return o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value
// and a boolean to check if the value has been set.
func (o *MinimumStockByWarehouse) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warehouse, true
}

// SetWarehouse sets field value
func (o *MinimumStockByWarehouse) SetWarehouse(v WarehouseReference) {
	o.Warehouse = v
}

// GetMinimumStock returns the MinimumStock field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *MinimumStockByWarehouse) GetMinimumStock() int32 {
	if o == nil || o.MinimumStock.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MinimumStock.Get()
}

// GetMinimumStockOk returns a tuple with the MinimumStock field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MinimumStockByWarehouse) GetMinimumStockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumStock.Get(), o.MinimumStock.IsSet()
}

// SetMinimumStock sets field value
func (o *MinimumStockByWarehouse) SetMinimumStock(v int32) {
	o.MinimumStock.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MinimumStockByWarehouse) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinimumStockByWarehouse) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MinimumStockByWarehouse) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MinimumStockByWarehouse) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MinimumStockByWarehouse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinimumStockByWarehouse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["warehouse"] = o.Warehouse
	toSerialize["minimumStock"] = o.MinimumStock.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *MinimumStockByWarehouse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"warehouse",
		"minimumStock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMinimumStockByWarehouse := _MinimumStockByWarehouse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMinimumStockByWarehouse)

	if err != nil {
		return err
	}

	*o = MinimumStockByWarehouse(varMinimumStockByWarehouse)

	return err
}

type NullableMinimumStockByWarehouse struct {
	value *MinimumStockByWarehouse
	isSet bool
}

func (v NullableMinimumStockByWarehouse) Get() *MinimumStockByWarehouse {
	return v.value
}

func (v *NullableMinimumStockByWarehouse) Set(val *MinimumStockByWarehouse) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimumStockByWarehouse) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimumStockByWarehouse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimumStockByWarehouse(val *MinimumStockByWarehouse) *NullableMinimumStockByWarehouse {
	return &NullableMinimumStockByWarehouse{value: val, isSet: true}
}

func (v NullableMinimumStockByWarehouse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimumStockByWarehouse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
