/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the MySecurity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MySecurity{}

// MySecurity struct for MySecurity
type MySecurity struct {
	Id                        *int32             `json:"id,omitempty"`
	AddLevel                  NullableString     `json:"addLevel,omitempty"`
	EditLevel                 NullableString     `json:"editLevel,omitempty"`
	DeleteLevel               NullableString     `json:"deleteLevel,omitempty"`
	InquireLevel              NullableString     `json:"inquireLevel,omitempty"`
	ModuleFunctionName        *string            `json:"moduleFunctionName,omitempty"`
	ModuleFunctionDescription *string            `json:"moduleFunctionDescription,omitempty"`
	MyAllFlag                 NullableBool       `json:"myAllFlag,omitempty"`
	ModuleFunctionIdentifier  *string            `json:"moduleFunctionIdentifier,omitempty"`
	ReportFlag                NullableBool       `json:"reportFlag,omitempty"`
	RestrictFlag              NullableBool       `json:"restrictFlag,omitempty"`
	CustomFlag                NullableBool       `json:"customFlag,omitempty"`
	ModuleDescription         *string            `json:"moduleDescription,omitempty"`
	ModuleIdentifier          *string            `json:"moduleIdentifier,omitempty"`
	ModuleName                *string            `json:"moduleName,omitempty"`
	SortOrder                 NullableInt32      `json:"sortOrder,omitempty"`
	Member                    *MemberReference   `json:"member,omitempty"`
	Info                      *map[string]string `json:"_info,omitempty"`
}

// NewMySecurity instantiates a new MySecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMySecurity() *MySecurity {
	this := MySecurity{}
	return &this
}

// NewMySecurityWithDefaults instantiates a new MySecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMySecurityWithDefaults() *MySecurity {
	this := MySecurity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MySecurity) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MySecurity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MySecurity) SetId(v int32) {
	o.Id = &v
}

// GetAddLevel returns the AddLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetAddLevel() string {
	if o == nil || IsNil(o.AddLevel.Get()) {
		var ret string
		return ret
	}
	return *o.AddLevel.Get()
}

// GetAddLevelOk returns a tuple with the AddLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetAddLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddLevel.Get(), o.AddLevel.IsSet()
}

// HasAddLevel returns a boolean if a field has been set.
func (o *MySecurity) HasAddLevel() bool {
	if o != nil && o.AddLevel.IsSet() {
		return true
	}

	return false
}

// SetAddLevel gets a reference to the given NullableString and assigns it to the AddLevel field.
func (o *MySecurity) SetAddLevel(v string) {
	o.AddLevel.Set(&v)
}

// SetAddLevelNil sets the value for AddLevel to be an explicit nil
func (o *MySecurity) SetAddLevelNil() {
	o.AddLevel.Set(nil)
}

// UnsetAddLevel ensures that no value is present for AddLevel, not even an explicit nil
func (o *MySecurity) UnsetAddLevel() {
	o.AddLevel.Unset()
}

// GetEditLevel returns the EditLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetEditLevel() string {
	if o == nil || IsNil(o.EditLevel.Get()) {
		var ret string
		return ret
	}
	return *o.EditLevel.Get()
}

// GetEditLevelOk returns a tuple with the EditLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetEditLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EditLevel.Get(), o.EditLevel.IsSet()
}

// HasEditLevel returns a boolean if a field has been set.
func (o *MySecurity) HasEditLevel() bool {
	if o != nil && o.EditLevel.IsSet() {
		return true
	}

	return false
}

// SetEditLevel gets a reference to the given NullableString and assigns it to the EditLevel field.
func (o *MySecurity) SetEditLevel(v string) {
	o.EditLevel.Set(&v)
}

// SetEditLevelNil sets the value for EditLevel to be an explicit nil
func (o *MySecurity) SetEditLevelNil() {
	o.EditLevel.Set(nil)
}

// UnsetEditLevel ensures that no value is present for EditLevel, not even an explicit nil
func (o *MySecurity) UnsetEditLevel() {
	o.EditLevel.Unset()
}

// GetDeleteLevel returns the DeleteLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetDeleteLevel() string {
	if o == nil || IsNil(o.DeleteLevel.Get()) {
		var ret string
		return ret
	}
	return *o.DeleteLevel.Get()
}

// GetDeleteLevelOk returns a tuple with the DeleteLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetDeleteLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteLevel.Get(), o.DeleteLevel.IsSet()
}

// HasDeleteLevel returns a boolean if a field has been set.
func (o *MySecurity) HasDeleteLevel() bool {
	if o != nil && o.DeleteLevel.IsSet() {
		return true
	}

	return false
}

// SetDeleteLevel gets a reference to the given NullableString and assigns it to the DeleteLevel field.
func (o *MySecurity) SetDeleteLevel(v string) {
	o.DeleteLevel.Set(&v)
}

// SetDeleteLevelNil sets the value for DeleteLevel to be an explicit nil
func (o *MySecurity) SetDeleteLevelNil() {
	o.DeleteLevel.Set(nil)
}

// UnsetDeleteLevel ensures that no value is present for DeleteLevel, not even an explicit nil
func (o *MySecurity) UnsetDeleteLevel() {
	o.DeleteLevel.Unset()
}

// GetInquireLevel returns the InquireLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetInquireLevel() string {
	if o == nil || IsNil(o.InquireLevel.Get()) {
		var ret string
		return ret
	}
	return *o.InquireLevel.Get()
}

// GetInquireLevelOk returns a tuple with the InquireLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetInquireLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InquireLevel.Get(), o.InquireLevel.IsSet()
}

// HasInquireLevel returns a boolean if a field has been set.
func (o *MySecurity) HasInquireLevel() bool {
	if o != nil && o.InquireLevel.IsSet() {
		return true
	}

	return false
}

// SetInquireLevel gets a reference to the given NullableString and assigns it to the InquireLevel field.
func (o *MySecurity) SetInquireLevel(v string) {
	o.InquireLevel.Set(&v)
}

// SetInquireLevelNil sets the value for InquireLevel to be an explicit nil
func (o *MySecurity) SetInquireLevelNil() {
	o.InquireLevel.Set(nil)
}

// UnsetInquireLevel ensures that no value is present for InquireLevel, not even an explicit nil
func (o *MySecurity) UnsetInquireLevel() {
	o.InquireLevel.Unset()
}

// GetModuleFunctionName returns the ModuleFunctionName field value if set, zero value otherwise.
func (o *MySecurity) GetModuleFunctionName() string {
	if o == nil || IsNil(o.ModuleFunctionName) {
		var ret string
		return ret
	}
	return *o.ModuleFunctionName
}

// GetModuleFunctionNameOk returns a tuple with the ModuleFunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetModuleFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleFunctionName) {
		return nil, false
	}
	return o.ModuleFunctionName, true
}

// HasModuleFunctionName returns a boolean if a field has been set.
func (o *MySecurity) HasModuleFunctionName() bool {
	if o != nil && !IsNil(o.ModuleFunctionName) {
		return true
	}

	return false
}

// SetModuleFunctionName gets a reference to the given string and assigns it to the ModuleFunctionName field.
func (o *MySecurity) SetModuleFunctionName(v string) {
	o.ModuleFunctionName = &v
}

// GetModuleFunctionDescription returns the ModuleFunctionDescription field value if set, zero value otherwise.
func (o *MySecurity) GetModuleFunctionDescription() string {
	if o == nil || IsNil(o.ModuleFunctionDescription) {
		var ret string
		return ret
	}
	return *o.ModuleFunctionDescription
}

// GetModuleFunctionDescriptionOk returns a tuple with the ModuleFunctionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetModuleFunctionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleFunctionDescription) {
		return nil, false
	}
	return o.ModuleFunctionDescription, true
}

// HasModuleFunctionDescription returns a boolean if a field has been set.
func (o *MySecurity) HasModuleFunctionDescription() bool {
	if o != nil && !IsNil(o.ModuleFunctionDescription) {
		return true
	}

	return false
}

// SetModuleFunctionDescription gets a reference to the given string and assigns it to the ModuleFunctionDescription field.
func (o *MySecurity) SetModuleFunctionDescription(v string) {
	o.ModuleFunctionDescription = &v
}

// GetMyAllFlag returns the MyAllFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetMyAllFlag() bool {
	if o == nil || IsNil(o.MyAllFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MyAllFlag.Get()
}

// GetMyAllFlagOk returns a tuple with the MyAllFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetMyAllFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MyAllFlag.Get(), o.MyAllFlag.IsSet()
}

// HasMyAllFlag returns a boolean if a field has been set.
func (o *MySecurity) HasMyAllFlag() bool {
	if o != nil && o.MyAllFlag.IsSet() {
		return true
	}

	return false
}

// SetMyAllFlag gets a reference to the given NullableBool and assigns it to the MyAllFlag field.
func (o *MySecurity) SetMyAllFlag(v bool) {
	o.MyAllFlag.Set(&v)
}

// SetMyAllFlagNil sets the value for MyAllFlag to be an explicit nil
func (o *MySecurity) SetMyAllFlagNil() {
	o.MyAllFlag.Set(nil)
}

// UnsetMyAllFlag ensures that no value is present for MyAllFlag, not even an explicit nil
func (o *MySecurity) UnsetMyAllFlag() {
	o.MyAllFlag.Unset()
}

// GetModuleFunctionIdentifier returns the ModuleFunctionIdentifier field value if set, zero value otherwise.
func (o *MySecurity) GetModuleFunctionIdentifier() string {
	if o == nil || IsNil(o.ModuleFunctionIdentifier) {
		var ret string
		return ret
	}
	return *o.ModuleFunctionIdentifier
}

// GetModuleFunctionIdentifierOk returns a tuple with the ModuleFunctionIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetModuleFunctionIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleFunctionIdentifier) {
		return nil, false
	}
	return o.ModuleFunctionIdentifier, true
}

// HasModuleFunctionIdentifier returns a boolean if a field has been set.
func (o *MySecurity) HasModuleFunctionIdentifier() bool {
	if o != nil && !IsNil(o.ModuleFunctionIdentifier) {
		return true
	}

	return false
}

// SetModuleFunctionIdentifier gets a reference to the given string and assigns it to the ModuleFunctionIdentifier field.
func (o *MySecurity) SetModuleFunctionIdentifier(v string) {
	o.ModuleFunctionIdentifier = &v
}

// GetReportFlag returns the ReportFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetReportFlag() bool {
	if o == nil || IsNil(o.ReportFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ReportFlag.Get()
}

// GetReportFlagOk returns a tuple with the ReportFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetReportFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportFlag.Get(), o.ReportFlag.IsSet()
}

// HasReportFlag returns a boolean if a field has been set.
func (o *MySecurity) HasReportFlag() bool {
	if o != nil && o.ReportFlag.IsSet() {
		return true
	}

	return false
}

// SetReportFlag gets a reference to the given NullableBool and assigns it to the ReportFlag field.
func (o *MySecurity) SetReportFlag(v bool) {
	o.ReportFlag.Set(&v)
}

// SetReportFlagNil sets the value for ReportFlag to be an explicit nil
func (o *MySecurity) SetReportFlagNil() {
	o.ReportFlag.Set(nil)
}

// UnsetReportFlag ensures that no value is present for ReportFlag, not even an explicit nil
func (o *MySecurity) UnsetReportFlag() {
	o.ReportFlag.Unset()
}

// GetRestrictFlag returns the RestrictFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetRestrictFlag() bool {
	if o == nil || IsNil(o.RestrictFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictFlag.Get()
}

// GetRestrictFlagOk returns a tuple with the RestrictFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetRestrictFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictFlag.Get(), o.RestrictFlag.IsSet()
}

// HasRestrictFlag returns a boolean if a field has been set.
func (o *MySecurity) HasRestrictFlag() bool {
	if o != nil && o.RestrictFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictFlag gets a reference to the given NullableBool and assigns it to the RestrictFlag field.
func (o *MySecurity) SetRestrictFlag(v bool) {
	o.RestrictFlag.Set(&v)
}

// SetRestrictFlagNil sets the value for RestrictFlag to be an explicit nil
func (o *MySecurity) SetRestrictFlagNil() {
	o.RestrictFlag.Set(nil)
}

// UnsetRestrictFlag ensures that no value is present for RestrictFlag, not even an explicit nil
func (o *MySecurity) UnsetRestrictFlag() {
	o.RestrictFlag.Unset()
}

// GetCustomFlag returns the CustomFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetCustomFlag() bool {
	if o == nil || IsNil(o.CustomFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomFlag.Get()
}

// GetCustomFlagOk returns a tuple with the CustomFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetCustomFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomFlag.Get(), o.CustomFlag.IsSet()
}

// HasCustomFlag returns a boolean if a field has been set.
func (o *MySecurity) HasCustomFlag() bool {
	if o != nil && o.CustomFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomFlag gets a reference to the given NullableBool and assigns it to the CustomFlag field.
func (o *MySecurity) SetCustomFlag(v bool) {
	o.CustomFlag.Set(&v)
}

// SetCustomFlagNil sets the value for CustomFlag to be an explicit nil
func (o *MySecurity) SetCustomFlagNil() {
	o.CustomFlag.Set(nil)
}

// UnsetCustomFlag ensures that no value is present for CustomFlag, not even an explicit nil
func (o *MySecurity) UnsetCustomFlag() {
	o.CustomFlag.Unset()
}

// GetModuleDescription returns the ModuleDescription field value if set, zero value otherwise.
func (o *MySecurity) GetModuleDescription() string {
	if o == nil || IsNil(o.ModuleDescription) {
		var ret string
		return ret
	}
	return *o.ModuleDescription
}

// GetModuleDescriptionOk returns a tuple with the ModuleDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetModuleDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleDescription) {
		return nil, false
	}
	return o.ModuleDescription, true
}

// HasModuleDescription returns a boolean if a field has been set.
func (o *MySecurity) HasModuleDescription() bool {
	if o != nil && !IsNil(o.ModuleDescription) {
		return true
	}

	return false
}

// SetModuleDescription gets a reference to the given string and assigns it to the ModuleDescription field.
func (o *MySecurity) SetModuleDescription(v string) {
	o.ModuleDescription = &v
}

// GetModuleIdentifier returns the ModuleIdentifier field value if set, zero value otherwise.
func (o *MySecurity) GetModuleIdentifier() string {
	if o == nil || IsNil(o.ModuleIdentifier) {
		var ret string
		return ret
	}
	return *o.ModuleIdentifier
}

// GetModuleIdentifierOk returns a tuple with the ModuleIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetModuleIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleIdentifier) {
		return nil, false
	}
	return o.ModuleIdentifier, true
}

// HasModuleIdentifier returns a boolean if a field has been set.
func (o *MySecurity) HasModuleIdentifier() bool {
	if o != nil && !IsNil(o.ModuleIdentifier) {
		return true
	}

	return false
}

// SetModuleIdentifier gets a reference to the given string and assigns it to the ModuleIdentifier field.
func (o *MySecurity) SetModuleIdentifier(v string) {
	o.ModuleIdentifier = &v
}

// GetModuleName returns the ModuleName field value if set, zero value otherwise.
func (o *MySecurity) GetModuleName() string {
	if o == nil || IsNil(o.ModuleName) {
		var ret string
		return ret
	}
	return *o.ModuleName
}

// GetModuleNameOk returns a tuple with the ModuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetModuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModuleName) {
		return nil, false
	}
	return o.ModuleName, true
}

// HasModuleName returns a boolean if a field has been set.
func (o *MySecurity) HasModuleName() bool {
	if o != nil && !IsNil(o.ModuleName) {
		return true
	}

	return false
}

// SetModuleName gets a reference to the given string and assigns it to the ModuleName field.
func (o *MySecurity) SetModuleName(v string) {
	o.ModuleName = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MySecurity) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MySecurity) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *MySecurity) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *MySecurity) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *MySecurity) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *MySecurity) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *MySecurity) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *MySecurity) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *MySecurity) SetMember(v MemberReference) {
	o.Member = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MySecurity) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySecurity) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MySecurity) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MySecurity) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MySecurity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MySecurity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.AddLevel.IsSet() {
		toSerialize["addLevel"] = o.AddLevel.Get()
	}
	if o.EditLevel.IsSet() {
		toSerialize["editLevel"] = o.EditLevel.Get()
	}
	if o.DeleteLevel.IsSet() {
		toSerialize["deleteLevel"] = o.DeleteLevel.Get()
	}
	if o.InquireLevel.IsSet() {
		toSerialize["inquireLevel"] = o.InquireLevel.Get()
	}
	if !IsNil(o.ModuleFunctionName) {
		toSerialize["moduleFunctionName"] = o.ModuleFunctionName
	}
	if !IsNil(o.ModuleFunctionDescription) {
		toSerialize["moduleFunctionDescription"] = o.ModuleFunctionDescription
	}
	if o.MyAllFlag.IsSet() {
		toSerialize["myAllFlag"] = o.MyAllFlag.Get()
	}
	if !IsNil(o.ModuleFunctionIdentifier) {
		toSerialize["moduleFunctionIdentifier"] = o.ModuleFunctionIdentifier
	}
	if o.ReportFlag.IsSet() {
		toSerialize["reportFlag"] = o.ReportFlag.Get()
	}
	if o.RestrictFlag.IsSet() {
		toSerialize["restrictFlag"] = o.RestrictFlag.Get()
	}
	if o.CustomFlag.IsSet() {
		toSerialize["customFlag"] = o.CustomFlag.Get()
	}
	if !IsNil(o.ModuleDescription) {
		toSerialize["moduleDescription"] = o.ModuleDescription
	}
	if !IsNil(o.ModuleIdentifier) {
		toSerialize["moduleIdentifier"] = o.ModuleIdentifier
	}
	if !IsNil(o.ModuleName) {
		toSerialize["moduleName"] = o.ModuleName
	}
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableMySecurity struct {
	value *MySecurity
	isSet bool
}

func (v NullableMySecurity) Get() *MySecurity {
	return v.value
}

func (v *NullableMySecurity) Set(val *MySecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableMySecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableMySecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySecurity(val *MySecurity) *NullableMySecurity {
	return &NullableMySecurity{value: val, isSet: true}
}

func (v NullableMySecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
