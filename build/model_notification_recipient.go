/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the NotificationRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationRecipient{}

// NotificationRecipient struct for NotificationRecipient
type NotificationRecipient struct {
	Id                *int32             `json:"id,omitempty"`
	Identifier        *string            `json:"identifier,omitempty"`
	Name              *string            `json:"name,omitempty"`
	ExternalFlag      NullableBool       `json:"externalFlag,omitempty"`
	ServiceFlag       NullableBool       `json:"serviceFlag,omitempty"`
	SalesFlag         NullableBool       `json:"salesFlag,omitempty"`
	InvoiceFlag       NullableBool       `json:"invoiceFlag,omitempty"`
	AgreementFlag     NullableBool       `json:"agreementFlag,omitempty"`
	MemberFlag        NullableBool       `json:"memberFlag,omitempty"`
	ConfigFlag        NullableBool       `json:"configFlag,omitempty"`
	MspFlag           NullableBool       `json:"mspFlag,omitempty"`
	TrackFlag         NullableBool       `json:"trackFlag,omitempty"`
	ProjectFlag       NullableBool       `json:"projectFlag,omitempty"`
	ProcurementFlag   NullableBool       `json:"procurementFlag,omitempty"`
	KnowledgeBaseFlag NullableBool       `json:"knowledgeBaseFlag,omitempty"`
	Info              *map[string]string `json:"_info,omitempty"`
}

// NewNotificationRecipient instantiates a new NotificationRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRecipient() *NotificationRecipient {
	this := NotificationRecipient{}
	return &this
}

// NewNotificationRecipientWithDefaults instantiates a new NotificationRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRecipientWithDefaults() *NotificationRecipient {
	this := NotificationRecipient{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationRecipient) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationRecipient) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NotificationRecipient) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *NotificationRecipient) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *NotificationRecipient) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *NotificationRecipient) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NotificationRecipient) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NotificationRecipient) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NotificationRecipient) SetName(v string) {
	o.Name = &v
}

// GetExternalFlag returns the ExternalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetExternalFlag() bool {
	if o == nil || IsNil(o.ExternalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExternalFlag.Get()
}

// GetExternalFlagOk returns a tuple with the ExternalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetExternalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalFlag.Get(), o.ExternalFlag.IsSet()
}

// HasExternalFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasExternalFlag() bool {
	if o != nil && o.ExternalFlag.IsSet() {
		return true
	}

	return false
}

// SetExternalFlag gets a reference to the given NullableBool and assigns it to the ExternalFlag field.
func (o *NotificationRecipient) SetExternalFlag(v bool) {
	o.ExternalFlag.Set(&v)
}

// SetExternalFlagNil sets the value for ExternalFlag to be an explicit nil
func (o *NotificationRecipient) SetExternalFlagNil() {
	o.ExternalFlag.Set(nil)
}

// UnsetExternalFlag ensures that no value is present for ExternalFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetExternalFlag() {
	o.ExternalFlag.Unset()
}

// GetServiceFlag returns the ServiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetServiceFlag() bool {
	if o == nil || IsNil(o.ServiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ServiceFlag.Get()
}

// GetServiceFlagOk returns a tuple with the ServiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetServiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceFlag.Get(), o.ServiceFlag.IsSet()
}

// HasServiceFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasServiceFlag() bool {
	if o != nil && o.ServiceFlag.IsSet() {
		return true
	}

	return false
}

// SetServiceFlag gets a reference to the given NullableBool and assigns it to the ServiceFlag field.
func (o *NotificationRecipient) SetServiceFlag(v bool) {
	o.ServiceFlag.Set(&v)
}

// SetServiceFlagNil sets the value for ServiceFlag to be an explicit nil
func (o *NotificationRecipient) SetServiceFlagNil() {
	o.ServiceFlag.Set(nil)
}

// UnsetServiceFlag ensures that no value is present for ServiceFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetServiceFlag() {
	o.ServiceFlag.Unset()
}

// GetSalesFlag returns the SalesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetSalesFlag() bool {
	if o == nil || IsNil(o.SalesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SalesFlag.Get()
}

// GetSalesFlagOk returns a tuple with the SalesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetSalesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesFlag.Get(), o.SalesFlag.IsSet()
}

// HasSalesFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasSalesFlag() bool {
	if o != nil && o.SalesFlag.IsSet() {
		return true
	}

	return false
}

// SetSalesFlag gets a reference to the given NullableBool and assigns it to the SalesFlag field.
func (o *NotificationRecipient) SetSalesFlag(v bool) {
	o.SalesFlag.Set(&v)
}

// SetSalesFlagNil sets the value for SalesFlag to be an explicit nil
func (o *NotificationRecipient) SetSalesFlagNil() {
	o.SalesFlag.Set(nil)
}

// UnsetSalesFlag ensures that no value is present for SalesFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetSalesFlag() {
	o.SalesFlag.Unset()
}

// GetInvoiceFlag returns the InvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetInvoiceFlag() bool {
	if o == nil || IsNil(o.InvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvoiceFlag.Get()
}

// GetInvoiceFlagOk returns a tuple with the InvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceFlag.Get(), o.InvoiceFlag.IsSet()
}

// HasInvoiceFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasInvoiceFlag() bool {
	if o != nil && o.InvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetInvoiceFlag gets a reference to the given NullableBool and assigns it to the InvoiceFlag field.
func (o *NotificationRecipient) SetInvoiceFlag(v bool) {
	o.InvoiceFlag.Set(&v)
}

// SetInvoiceFlagNil sets the value for InvoiceFlag to be an explicit nil
func (o *NotificationRecipient) SetInvoiceFlagNil() {
	o.InvoiceFlag.Set(nil)
}

// UnsetInvoiceFlag ensures that no value is present for InvoiceFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetInvoiceFlag() {
	o.InvoiceFlag.Unset()
}

// GetAgreementFlag returns the AgreementFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetAgreementFlag() bool {
	if o == nil || IsNil(o.AgreementFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AgreementFlag.Get()
}

// GetAgreementFlagOk returns a tuple with the AgreementFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetAgreementFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementFlag.Get(), o.AgreementFlag.IsSet()
}

// HasAgreementFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasAgreementFlag() bool {
	if o != nil && o.AgreementFlag.IsSet() {
		return true
	}

	return false
}

// SetAgreementFlag gets a reference to the given NullableBool and assigns it to the AgreementFlag field.
func (o *NotificationRecipient) SetAgreementFlag(v bool) {
	o.AgreementFlag.Set(&v)
}

// SetAgreementFlagNil sets the value for AgreementFlag to be an explicit nil
func (o *NotificationRecipient) SetAgreementFlagNil() {
	o.AgreementFlag.Set(nil)
}

// UnsetAgreementFlag ensures that no value is present for AgreementFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetAgreementFlag() {
	o.AgreementFlag.Unset()
}

// GetMemberFlag returns the MemberFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetMemberFlag() bool {
	if o == nil || IsNil(o.MemberFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MemberFlag.Get()
}

// GetMemberFlagOk returns a tuple with the MemberFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetMemberFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberFlag.Get(), o.MemberFlag.IsSet()
}

// HasMemberFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasMemberFlag() bool {
	if o != nil && o.MemberFlag.IsSet() {
		return true
	}

	return false
}

// SetMemberFlag gets a reference to the given NullableBool and assigns it to the MemberFlag field.
func (o *NotificationRecipient) SetMemberFlag(v bool) {
	o.MemberFlag.Set(&v)
}

// SetMemberFlagNil sets the value for MemberFlag to be an explicit nil
func (o *NotificationRecipient) SetMemberFlagNil() {
	o.MemberFlag.Set(nil)
}

// UnsetMemberFlag ensures that no value is present for MemberFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetMemberFlag() {
	o.MemberFlag.Unset()
}

// GetConfigFlag returns the ConfigFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetConfigFlag() bool {
	if o == nil || IsNil(o.ConfigFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ConfigFlag.Get()
}

// GetConfigFlagOk returns a tuple with the ConfigFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetConfigFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigFlag.Get(), o.ConfigFlag.IsSet()
}

// HasConfigFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasConfigFlag() bool {
	if o != nil && o.ConfigFlag.IsSet() {
		return true
	}

	return false
}

// SetConfigFlag gets a reference to the given NullableBool and assigns it to the ConfigFlag field.
func (o *NotificationRecipient) SetConfigFlag(v bool) {
	o.ConfigFlag.Set(&v)
}

// SetConfigFlagNil sets the value for ConfigFlag to be an explicit nil
func (o *NotificationRecipient) SetConfigFlagNil() {
	o.ConfigFlag.Set(nil)
}

// UnsetConfigFlag ensures that no value is present for ConfigFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetConfigFlag() {
	o.ConfigFlag.Unset()
}

// GetMspFlag returns the MspFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetMspFlag() bool {
	if o == nil || IsNil(o.MspFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MspFlag.Get()
}

// GetMspFlagOk returns a tuple with the MspFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetMspFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MspFlag.Get(), o.MspFlag.IsSet()
}

// HasMspFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasMspFlag() bool {
	if o != nil && o.MspFlag.IsSet() {
		return true
	}

	return false
}

// SetMspFlag gets a reference to the given NullableBool and assigns it to the MspFlag field.
func (o *NotificationRecipient) SetMspFlag(v bool) {
	o.MspFlag.Set(&v)
}

// SetMspFlagNil sets the value for MspFlag to be an explicit nil
func (o *NotificationRecipient) SetMspFlagNil() {
	o.MspFlag.Set(nil)
}

// UnsetMspFlag ensures that no value is present for MspFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetMspFlag() {
	o.MspFlag.Unset()
}

// GetTrackFlag returns the TrackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetTrackFlag() bool {
	if o == nil || IsNil(o.TrackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TrackFlag.Get()
}

// GetTrackFlagOk returns a tuple with the TrackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetTrackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrackFlag.Get(), o.TrackFlag.IsSet()
}

// HasTrackFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasTrackFlag() bool {
	if o != nil && o.TrackFlag.IsSet() {
		return true
	}

	return false
}

// SetTrackFlag gets a reference to the given NullableBool and assigns it to the TrackFlag field.
func (o *NotificationRecipient) SetTrackFlag(v bool) {
	o.TrackFlag.Set(&v)
}

// SetTrackFlagNil sets the value for TrackFlag to be an explicit nil
func (o *NotificationRecipient) SetTrackFlagNil() {
	o.TrackFlag.Set(nil)
}

// UnsetTrackFlag ensures that no value is present for TrackFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetTrackFlag() {
	o.TrackFlag.Unset()
}

// GetProjectFlag returns the ProjectFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetProjectFlag() bool {
	if o == nil || IsNil(o.ProjectFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProjectFlag.Get()
}

// GetProjectFlagOk returns a tuple with the ProjectFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetProjectFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectFlag.Get(), o.ProjectFlag.IsSet()
}

// HasProjectFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasProjectFlag() bool {
	if o != nil && o.ProjectFlag.IsSet() {
		return true
	}

	return false
}

// SetProjectFlag gets a reference to the given NullableBool and assigns it to the ProjectFlag field.
func (o *NotificationRecipient) SetProjectFlag(v bool) {
	o.ProjectFlag.Set(&v)
}

// SetProjectFlagNil sets the value for ProjectFlag to be an explicit nil
func (o *NotificationRecipient) SetProjectFlagNil() {
	o.ProjectFlag.Set(nil)
}

// UnsetProjectFlag ensures that no value is present for ProjectFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetProjectFlag() {
	o.ProjectFlag.Unset()
}

// GetProcurementFlag returns the ProcurementFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetProcurementFlag() bool {
	if o == nil || IsNil(o.ProcurementFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcurementFlag.Get()
}

// GetProcurementFlagOk returns a tuple with the ProcurementFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetProcurementFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcurementFlag.Get(), o.ProcurementFlag.IsSet()
}

// HasProcurementFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasProcurementFlag() bool {
	if o != nil && o.ProcurementFlag.IsSet() {
		return true
	}

	return false
}

// SetProcurementFlag gets a reference to the given NullableBool and assigns it to the ProcurementFlag field.
func (o *NotificationRecipient) SetProcurementFlag(v bool) {
	o.ProcurementFlag.Set(&v)
}

// SetProcurementFlagNil sets the value for ProcurementFlag to be an explicit nil
func (o *NotificationRecipient) SetProcurementFlagNil() {
	o.ProcurementFlag.Set(nil)
}

// UnsetProcurementFlag ensures that no value is present for ProcurementFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetProcurementFlag() {
	o.ProcurementFlag.Unset()
}

// GetKnowledgeBaseFlag returns the KnowledgeBaseFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRecipient) GetKnowledgeBaseFlag() bool {
	if o == nil || IsNil(o.KnowledgeBaseFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.KnowledgeBaseFlag.Get()
}

// GetKnowledgeBaseFlagOk returns a tuple with the KnowledgeBaseFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRecipient) GetKnowledgeBaseFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseFlag.Get(), o.KnowledgeBaseFlag.IsSet()
}

// HasKnowledgeBaseFlag returns a boolean if a field has been set.
func (o *NotificationRecipient) HasKnowledgeBaseFlag() bool {
	if o != nil && o.KnowledgeBaseFlag.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseFlag gets a reference to the given NullableBool and assigns it to the KnowledgeBaseFlag field.
func (o *NotificationRecipient) SetKnowledgeBaseFlag(v bool) {
	o.KnowledgeBaseFlag.Set(&v)
}

// SetKnowledgeBaseFlagNil sets the value for KnowledgeBaseFlag to be an explicit nil
func (o *NotificationRecipient) SetKnowledgeBaseFlagNil() {
	o.KnowledgeBaseFlag.Set(nil)
}

// UnsetKnowledgeBaseFlag ensures that no value is present for KnowledgeBaseFlag, not even an explicit nil
func (o *NotificationRecipient) UnsetKnowledgeBaseFlag() {
	o.KnowledgeBaseFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *NotificationRecipient) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *NotificationRecipient) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *NotificationRecipient) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o NotificationRecipient) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ExternalFlag.IsSet() {
		toSerialize["externalFlag"] = o.ExternalFlag.Get()
	}
	if o.ServiceFlag.IsSet() {
		toSerialize["serviceFlag"] = o.ServiceFlag.Get()
	}
	if o.SalesFlag.IsSet() {
		toSerialize["salesFlag"] = o.SalesFlag.Get()
	}
	if o.InvoiceFlag.IsSet() {
		toSerialize["invoiceFlag"] = o.InvoiceFlag.Get()
	}
	if o.AgreementFlag.IsSet() {
		toSerialize["agreementFlag"] = o.AgreementFlag.Get()
	}
	if o.MemberFlag.IsSet() {
		toSerialize["memberFlag"] = o.MemberFlag.Get()
	}
	if o.ConfigFlag.IsSet() {
		toSerialize["configFlag"] = o.ConfigFlag.Get()
	}
	if o.MspFlag.IsSet() {
		toSerialize["mspFlag"] = o.MspFlag.Get()
	}
	if o.TrackFlag.IsSet() {
		toSerialize["trackFlag"] = o.TrackFlag.Get()
	}
	if o.ProjectFlag.IsSet() {
		toSerialize["projectFlag"] = o.ProjectFlag.Get()
	}
	if o.ProcurementFlag.IsSet() {
		toSerialize["procurementFlag"] = o.ProcurementFlag.Get()
	}
	if o.KnowledgeBaseFlag.IsSet() {
		toSerialize["knowledgeBaseFlag"] = o.KnowledgeBaseFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableNotificationRecipient struct {
	value *NotificationRecipient
	isSet bool
}

func (v NullableNotificationRecipient) Get() *NotificationRecipient {
	return v.value
}

func (v *NullableNotificationRecipient) Set(val *NotificationRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRecipient(val *NotificationRecipient) *NullableNotificationRecipient {
	return &NullableNotificationRecipient{value: val, isSet: true}
}

func (v NullableNotificationRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
