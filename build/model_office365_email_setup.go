/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Office365EmailSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Office365EmailSetup{}

// Office365EmailSetup struct for Office365EmailSetup
type Office365EmailSetup struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 200;
	Name string `json:"name"`
	//  Max length: 100;
	Username *string `json:"username,omitempty"`
	//  Max length: 40;
	InboxFolder string `json:"inboxFolder"`
	//  Max length: 40;
	ProcessedFolder string `json:"processedFolder"`
	//  Max length: 40;
	FailedFolder string `json:"failedFolder"`
	//  Max length: 36;
	TenantId *string `json:"tenantId,omitempty"`
	//  Max length: 36;
	ClientId *string `json:"clientId,omitempty"`
	//  Max length: 4000;
	ClientSecret          *string                  `json:"clientSecret,omitempty"`
	AuthorizedFlag        NullableBool             `json:"authorizedFlag,omitempty"`
	InactiveFlag          NullableBool             `json:"inactiveFlag,omitempty"`
	Source                *int32                   `json:"source,omitempty"`
	UseExistingTenantFlag NullableBool             `json:"useExistingTenantFlag,omitempty"`
	ExistingTenant        *ExistingTenantReference `json:"existingTenant,omitempty"`
	EmailConnector        *EmailConnectorReference `json:"emailConnector,omitempty"`
	Info                  *map[string]string       `json:"_info,omitempty"`
}

type _Office365EmailSetup Office365EmailSetup

// NewOffice365EmailSetup instantiates a new Office365EmailSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365EmailSetup(name string, inboxFolder string, processedFolder string, failedFolder string) *Office365EmailSetup {
	this := Office365EmailSetup{}
	this.Name = name
	this.InboxFolder = inboxFolder
	this.ProcessedFolder = processedFolder
	this.FailedFolder = failedFolder
	return &this
}

// NewOffice365EmailSetupWithDefaults instantiates a new Office365EmailSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365EmailSetupWithDefaults() *Office365EmailSetup {
	this := Office365EmailSetup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Office365EmailSetup) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Office365EmailSetup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Office365EmailSetup) SetName(v string) {
	o.Name = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Office365EmailSetup) SetUsername(v string) {
	o.Username = &v
}

// GetInboxFolder returns the InboxFolder field value
func (o *Office365EmailSetup) GetInboxFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InboxFolder
}

// GetInboxFolderOk returns a tuple with the InboxFolder field value
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetInboxFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InboxFolder, true
}

// SetInboxFolder sets field value
func (o *Office365EmailSetup) SetInboxFolder(v string) {
	o.InboxFolder = v
}

// GetProcessedFolder returns the ProcessedFolder field value
func (o *Office365EmailSetup) GetProcessedFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessedFolder
}

// GetProcessedFolderOk returns a tuple with the ProcessedFolder field value
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetProcessedFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessedFolder, true
}

// SetProcessedFolder sets field value
func (o *Office365EmailSetup) SetProcessedFolder(v string) {
	o.ProcessedFolder = v
}

// GetFailedFolder returns the FailedFolder field value
func (o *Office365EmailSetup) GetFailedFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailedFolder
}

// GetFailedFolderOk returns a tuple with the FailedFolder field value
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetFailedFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedFolder, true
}

// SetFailedFolder sets field value
func (o *Office365EmailSetup) SetFailedFolder(v string) {
	o.FailedFolder = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Office365EmailSetup) SetTenantId(v string) {
	o.TenantId = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Office365EmailSetup) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *Office365EmailSetup) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetAuthorizedFlag returns the AuthorizedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365EmailSetup) GetAuthorizedFlag() bool {
	if o == nil || IsNil(o.AuthorizedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AuthorizedFlag.Get()
}

// GetAuthorizedFlagOk returns a tuple with the AuthorizedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365EmailSetup) GetAuthorizedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorizedFlag.Get(), o.AuthorizedFlag.IsSet()
}

// HasAuthorizedFlag returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasAuthorizedFlag() bool {
	if o != nil && o.AuthorizedFlag.IsSet() {
		return true
	}

	return false
}

// SetAuthorizedFlag gets a reference to the given NullableBool and assigns it to the AuthorizedFlag field.
func (o *Office365EmailSetup) SetAuthorizedFlag(v bool) {
	o.AuthorizedFlag.Set(&v)
}

// SetAuthorizedFlagNil sets the value for AuthorizedFlag to be an explicit nil
func (o *Office365EmailSetup) SetAuthorizedFlagNil() {
	o.AuthorizedFlag.Set(nil)
}

// UnsetAuthorizedFlag ensures that no value is present for AuthorizedFlag, not even an explicit nil
func (o *Office365EmailSetup) UnsetAuthorizedFlag() {
	o.AuthorizedFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365EmailSetup) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365EmailSetup) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *Office365EmailSetup) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *Office365EmailSetup) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *Office365EmailSetup) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetSource() int32 {
	if o == nil || IsNil(o.Source) {
		var ret int32
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetSourceOk() (*int32, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given int32 and assigns it to the Source field.
func (o *Office365EmailSetup) SetSource(v int32) {
	o.Source = &v
}

// GetUseExistingTenantFlag returns the UseExistingTenantFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365EmailSetup) GetUseExistingTenantFlag() bool {
	if o == nil || IsNil(o.UseExistingTenantFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseExistingTenantFlag.Get()
}

// GetUseExistingTenantFlagOk returns a tuple with the UseExistingTenantFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365EmailSetup) GetUseExistingTenantFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseExistingTenantFlag.Get(), o.UseExistingTenantFlag.IsSet()
}

// HasUseExistingTenantFlag returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasUseExistingTenantFlag() bool {
	if o != nil && o.UseExistingTenantFlag.IsSet() {
		return true
	}

	return false
}

// SetUseExistingTenantFlag gets a reference to the given NullableBool and assigns it to the UseExistingTenantFlag field.
func (o *Office365EmailSetup) SetUseExistingTenantFlag(v bool) {
	o.UseExistingTenantFlag.Set(&v)
}

// SetUseExistingTenantFlagNil sets the value for UseExistingTenantFlag to be an explicit nil
func (o *Office365EmailSetup) SetUseExistingTenantFlagNil() {
	o.UseExistingTenantFlag.Set(nil)
}

// UnsetUseExistingTenantFlag ensures that no value is present for UseExistingTenantFlag, not even an explicit nil
func (o *Office365EmailSetup) UnsetUseExistingTenantFlag() {
	o.UseExistingTenantFlag.Unset()
}

// GetExistingTenant returns the ExistingTenant field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetExistingTenant() ExistingTenantReference {
	if o == nil || IsNil(o.ExistingTenant) {
		var ret ExistingTenantReference
		return ret
	}
	return *o.ExistingTenant
}

// GetExistingTenantOk returns a tuple with the ExistingTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetExistingTenantOk() (*ExistingTenantReference, bool) {
	if o == nil || IsNil(o.ExistingTenant) {
		return nil, false
	}
	return o.ExistingTenant, true
}

// HasExistingTenant returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasExistingTenant() bool {
	if o != nil && !IsNil(o.ExistingTenant) {
		return true
	}

	return false
}

// SetExistingTenant gets a reference to the given ExistingTenantReference and assigns it to the ExistingTenant field.
func (o *Office365EmailSetup) SetExistingTenant(v ExistingTenantReference) {
	o.ExistingTenant = &v
}

// GetEmailConnector returns the EmailConnector field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetEmailConnector() EmailConnectorReference {
	if o == nil || IsNil(o.EmailConnector) {
		var ret EmailConnectorReference
		return ret
	}
	return *o.EmailConnector
}

// GetEmailConnectorOk returns a tuple with the EmailConnector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetEmailConnectorOk() (*EmailConnectorReference, bool) {
	if o == nil || IsNil(o.EmailConnector) {
		return nil, false
	}
	return o.EmailConnector, true
}

// HasEmailConnector returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasEmailConnector() bool {
	if o != nil && !IsNil(o.EmailConnector) {
		return true
	}

	return false
}

// SetEmailConnector gets a reference to the given EmailConnectorReference and assigns it to the EmailConnector field.
func (o *Office365EmailSetup) SetEmailConnector(v EmailConnectorReference) {
	o.EmailConnector = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Office365EmailSetup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365EmailSetup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Office365EmailSetup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Office365EmailSetup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Office365EmailSetup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Office365EmailSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	toSerialize["inboxFolder"] = o.InboxFolder
	toSerialize["processedFolder"] = o.ProcessedFolder
	toSerialize["failedFolder"] = o.FailedFolder
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if o.AuthorizedFlag.IsSet() {
		toSerialize["authorizedFlag"] = o.AuthorizedFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if o.UseExistingTenantFlag.IsSet() {
		toSerialize["useExistingTenantFlag"] = o.UseExistingTenantFlag.Get()
	}
	if !IsNil(o.ExistingTenant) {
		toSerialize["existingTenant"] = o.ExistingTenant
	}
	if !IsNil(o.EmailConnector) {
		toSerialize["emailConnector"] = o.EmailConnector
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Office365EmailSetup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"inboxFolder",
		"processedFolder",
		"failedFolder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOffice365EmailSetup := _Office365EmailSetup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOffice365EmailSetup)

	if err != nil {
		return err
	}

	*o = Office365EmailSetup(varOffice365EmailSetup)

	return err
}

type NullableOffice365EmailSetup struct {
	value *Office365EmailSetup
	isSet bool
}

func (v NullableOffice365EmailSetup) Get() *Office365EmailSetup {
	return v.value
}

func (v *NullableOffice365EmailSetup) Set(val *Office365EmailSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365EmailSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365EmailSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365EmailSetup(val *Office365EmailSetup) *NullableOffice365EmailSetup {
	return &NullableOffice365EmailSetup{value: val, isSet: true}
}

func (v NullableOffice365EmailSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365EmailSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
