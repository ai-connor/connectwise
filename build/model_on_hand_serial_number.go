/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the OnHandSerialNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnHandSerialNumber{}

// OnHandSerialNumber struct for OnHandSerialNumber
type OnHandSerialNumber struct {
	Id           *int32                 `json:"id,omitempty"`
	Serial       *string                `json:"serial,omitempty"`
	CatalogItem  *CatalogItemReference  `json:"catalogItem,omitempty"`
	Warehouse    *WarehouseReference    `json:"warehouse,omitempty"`
	WarehouseBin *WarehouseBinReference `json:"warehouseBin,omitempty"`
	Info         *map[string]string     `json:"_info,omitempty"`
}

// NewOnHandSerialNumber instantiates a new OnHandSerialNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnHandSerialNumber() *OnHandSerialNumber {
	this := OnHandSerialNumber{}
	return &this
}

// NewOnHandSerialNumberWithDefaults instantiates a new OnHandSerialNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnHandSerialNumberWithDefaults() *OnHandSerialNumber {
	this := OnHandSerialNumber{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OnHandSerialNumber) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnHandSerialNumber) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OnHandSerialNumber) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OnHandSerialNumber) SetId(v int32) {
	o.Id = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *OnHandSerialNumber) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnHandSerialNumber) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *OnHandSerialNumber) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *OnHandSerialNumber) SetSerial(v string) {
	o.Serial = &v
}

// GetCatalogItem returns the CatalogItem field value if set, zero value otherwise.
func (o *OnHandSerialNumber) GetCatalogItem() CatalogItemReference {
	if o == nil || IsNil(o.CatalogItem) {
		var ret CatalogItemReference
		return ret
	}
	return *o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnHandSerialNumber) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil || IsNil(o.CatalogItem) {
		return nil, false
	}
	return o.CatalogItem, true
}

// HasCatalogItem returns a boolean if a field has been set.
func (o *OnHandSerialNumber) HasCatalogItem() bool {
	if o != nil && !IsNil(o.CatalogItem) {
		return true
	}

	return false
}

// SetCatalogItem gets a reference to the given CatalogItemReference and assigns it to the CatalogItem field.
func (o *OnHandSerialNumber) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *OnHandSerialNumber) GetWarehouse() WarehouseReference {
	if o == nil || IsNil(o.Warehouse) {
		var ret WarehouseReference
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnHandSerialNumber) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *OnHandSerialNumber) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given WarehouseReference and assigns it to the Warehouse field.
func (o *OnHandSerialNumber) SetWarehouse(v WarehouseReference) {
	o.Warehouse = &v
}

// GetWarehouseBin returns the WarehouseBin field value if set, zero value otherwise.
func (o *OnHandSerialNumber) GetWarehouseBin() WarehouseBinReference {
	if o == nil || IsNil(o.WarehouseBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.WarehouseBin
}

// GetWarehouseBinOk returns a tuple with the WarehouseBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnHandSerialNumber) GetWarehouseBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.WarehouseBin) {
		return nil, false
	}
	return o.WarehouseBin, true
}

// HasWarehouseBin returns a boolean if a field has been set.
func (o *OnHandSerialNumber) HasWarehouseBin() bool {
	if o != nil && !IsNil(o.WarehouseBin) {
		return true
	}

	return false
}

// SetWarehouseBin gets a reference to the given WarehouseBinReference and assigns it to the WarehouseBin field.
func (o *OnHandSerialNumber) SetWarehouseBin(v WarehouseBinReference) {
	o.WarehouseBin = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *OnHandSerialNumber) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnHandSerialNumber) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *OnHandSerialNumber) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *OnHandSerialNumber) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o OnHandSerialNumber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnHandSerialNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.CatalogItem) {
		toSerialize["catalogItem"] = o.CatalogItem
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.WarehouseBin) {
		toSerialize["warehouseBin"] = o.WarehouseBin
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableOnHandSerialNumber struct {
	value *OnHandSerialNumber
	isSet bool
}

func (v NullableOnHandSerialNumber) Get() *OnHandSerialNumber {
	return v.value
}

func (v *NullableOnHandSerialNumber) Set(val *OnHandSerialNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableOnHandSerialNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableOnHandSerialNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnHandSerialNumber(val *OnHandSerialNumber) *NullableOnHandSerialNumber {
	return &NullableOnHandSerialNumber{value: val, isSet: true}
}

func (v NullableOnHandSerialNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnHandSerialNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
