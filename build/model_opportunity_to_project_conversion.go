/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the OpportunityToProjectConversion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityToProjectConversion{}

// OpportunityToProjectConversion struct for OpportunityToProjectConversion
type OpportunityToProjectConversion struct {
	ProjectId               *int32                  `json:"projectId,omitempty"`
	Name                    *string                 `json:"name,omitempty"`
	Status                  *ProjectStatusReference `json:"status,omitempty"`
	LocationId              NullableInt32           `json:"locationId,omitempty"`
	BusinessUnitId          NullableInt32           `json:"businessUnitId,omitempty"`
	Board                   *ProjectBoardReference  `json:"board,omitempty"`
	Manager                 *MemberReference        `json:"manager,omitempty"`
	EstimatedStart          *string                 `json:"estimatedStart,omitempty"`
	EstimatedEnd            *string                 `json:"estimatedEnd,omitempty"`
	IncludeAllNotesFlag     NullableBool            `json:"includeAllNotesFlag,omitempty"`
	IncludeAllDocumentsFlag NullableBool            `json:"includeAllDocumentsFlag,omitempty"`
	IncludeAllProductsFlag  NullableBool            `json:"includeAllProductsFlag,omitempty"`
	IncludeNoteIds          []int32                 `json:"includeNoteIds,omitempty"`
	IncludeDocumentIds      []int32                 `json:"includeDocumentIds,omitempty"`
	IncludeProductIds       []int32                 `json:"includeProductIds,omitempty"`
}

// NewOpportunityToProjectConversion instantiates a new OpportunityToProjectConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityToProjectConversion() *OpportunityToProjectConversion {
	this := OpportunityToProjectConversion{}
	return &this
}

// NewOpportunityToProjectConversionWithDefaults instantiates a new OpportunityToProjectConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityToProjectConversionWithDefaults() *OpportunityToProjectConversion {
	this := OpportunityToProjectConversion{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *OpportunityToProjectConversion) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OpportunityToProjectConversion) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetStatus() ProjectStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ProjectStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetStatusOk() (*ProjectStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProjectStatusReference and assigns it to the Status field.
func (o *OpportunityToProjectConversion) SetStatus(v ProjectStatusReference) {
	o.Status = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToProjectConversion) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToProjectConversion) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *OpportunityToProjectConversion) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}

// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *OpportunityToProjectConversion) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *OpportunityToProjectConversion) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToProjectConversion) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToProjectConversion) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *OpportunityToProjectConversion) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}

// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *OpportunityToProjectConversion) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *OpportunityToProjectConversion) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetBoard() ProjectBoardReference {
	if o == nil || IsNil(o.Board) {
		var ret ProjectBoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetBoardOk() (*ProjectBoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given ProjectBoardReference and assigns it to the Board field.
func (o *OpportunityToProjectConversion) SetBoard(v ProjectBoardReference) {
	o.Board = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetManager() MemberReference {
	if o == nil || IsNil(o.Manager) {
		var ret MemberReference
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given MemberReference and assigns it to the Manager field.
func (o *OpportunityToProjectConversion) SetManager(v MemberReference) {
	o.Manager = &v
}

// GetEstimatedStart returns the EstimatedStart field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetEstimatedStart() string {
	if o == nil || IsNil(o.EstimatedStart) {
		var ret string
		return ret
	}
	return *o.EstimatedStart
}

// GetEstimatedStartOk returns a tuple with the EstimatedStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetEstimatedStartOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedStart) {
		return nil, false
	}
	return o.EstimatedStart, true
}

// HasEstimatedStart returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasEstimatedStart() bool {
	if o != nil && !IsNil(o.EstimatedStart) {
		return true
	}

	return false
}

// SetEstimatedStart gets a reference to the given string and assigns it to the EstimatedStart field.
func (o *OpportunityToProjectConversion) SetEstimatedStart(v string) {
	o.EstimatedStart = &v
}

// GetEstimatedEnd returns the EstimatedEnd field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetEstimatedEnd() string {
	if o == nil || IsNil(o.EstimatedEnd) {
		var ret string
		return ret
	}
	return *o.EstimatedEnd
}

// GetEstimatedEndOk returns a tuple with the EstimatedEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetEstimatedEndOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedEnd) {
		return nil, false
	}
	return o.EstimatedEnd, true
}

// HasEstimatedEnd returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasEstimatedEnd() bool {
	if o != nil && !IsNil(o.EstimatedEnd) {
		return true
	}

	return false
}

// SetEstimatedEnd gets a reference to the given string and assigns it to the EstimatedEnd field.
func (o *OpportunityToProjectConversion) SetEstimatedEnd(v string) {
	o.EstimatedEnd = &v
}

// GetIncludeAllNotesFlag returns the IncludeAllNotesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToProjectConversion) GetIncludeAllNotesFlag() bool {
	if o == nil || IsNil(o.IncludeAllNotesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllNotesFlag.Get()
}

// GetIncludeAllNotesFlagOk returns a tuple with the IncludeAllNotesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToProjectConversion) GetIncludeAllNotesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllNotesFlag.Get(), o.IncludeAllNotesFlag.IsSet()
}

// HasIncludeAllNotesFlag returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasIncludeAllNotesFlag() bool {
	if o != nil && o.IncludeAllNotesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllNotesFlag gets a reference to the given NullableBool and assigns it to the IncludeAllNotesFlag field.
func (o *OpportunityToProjectConversion) SetIncludeAllNotesFlag(v bool) {
	o.IncludeAllNotesFlag.Set(&v)
}

// SetIncludeAllNotesFlagNil sets the value for IncludeAllNotesFlag to be an explicit nil
func (o *OpportunityToProjectConversion) SetIncludeAllNotesFlagNil() {
	o.IncludeAllNotesFlag.Set(nil)
}

// UnsetIncludeAllNotesFlag ensures that no value is present for IncludeAllNotesFlag, not even an explicit nil
func (o *OpportunityToProjectConversion) UnsetIncludeAllNotesFlag() {
	o.IncludeAllNotesFlag.Unset()
}

// GetIncludeAllDocumentsFlag returns the IncludeAllDocumentsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToProjectConversion) GetIncludeAllDocumentsFlag() bool {
	if o == nil || IsNil(o.IncludeAllDocumentsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllDocumentsFlag.Get()
}

// GetIncludeAllDocumentsFlagOk returns a tuple with the IncludeAllDocumentsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToProjectConversion) GetIncludeAllDocumentsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllDocumentsFlag.Get(), o.IncludeAllDocumentsFlag.IsSet()
}

// HasIncludeAllDocumentsFlag returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasIncludeAllDocumentsFlag() bool {
	if o != nil && o.IncludeAllDocumentsFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllDocumentsFlag gets a reference to the given NullableBool and assigns it to the IncludeAllDocumentsFlag field.
func (o *OpportunityToProjectConversion) SetIncludeAllDocumentsFlag(v bool) {
	o.IncludeAllDocumentsFlag.Set(&v)
}

// SetIncludeAllDocumentsFlagNil sets the value for IncludeAllDocumentsFlag to be an explicit nil
func (o *OpportunityToProjectConversion) SetIncludeAllDocumentsFlagNil() {
	o.IncludeAllDocumentsFlag.Set(nil)
}

// UnsetIncludeAllDocumentsFlag ensures that no value is present for IncludeAllDocumentsFlag, not even an explicit nil
func (o *OpportunityToProjectConversion) UnsetIncludeAllDocumentsFlag() {
	o.IncludeAllDocumentsFlag.Unset()
}

// GetIncludeAllProductsFlag returns the IncludeAllProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToProjectConversion) GetIncludeAllProductsFlag() bool {
	if o == nil || IsNil(o.IncludeAllProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllProductsFlag.Get()
}

// GetIncludeAllProductsFlagOk returns a tuple with the IncludeAllProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToProjectConversion) GetIncludeAllProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllProductsFlag.Get(), o.IncludeAllProductsFlag.IsSet()
}

// HasIncludeAllProductsFlag returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasIncludeAllProductsFlag() bool {
	if o != nil && o.IncludeAllProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllProductsFlag gets a reference to the given NullableBool and assigns it to the IncludeAllProductsFlag field.
func (o *OpportunityToProjectConversion) SetIncludeAllProductsFlag(v bool) {
	o.IncludeAllProductsFlag.Set(&v)
}

// SetIncludeAllProductsFlagNil sets the value for IncludeAllProductsFlag to be an explicit nil
func (o *OpportunityToProjectConversion) SetIncludeAllProductsFlagNil() {
	o.IncludeAllProductsFlag.Set(nil)
}

// UnsetIncludeAllProductsFlag ensures that no value is present for IncludeAllProductsFlag, not even an explicit nil
func (o *OpportunityToProjectConversion) UnsetIncludeAllProductsFlag() {
	o.IncludeAllProductsFlag.Unset()
}

// GetIncludeNoteIds returns the IncludeNoteIds field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetIncludeNoteIds() []int32 {
	if o == nil || IsNil(o.IncludeNoteIds) {
		var ret []int32
		return ret
	}
	return o.IncludeNoteIds
}

// GetIncludeNoteIdsOk returns a tuple with the IncludeNoteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetIncludeNoteIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IncludeNoteIds) {
		return nil, false
	}
	return o.IncludeNoteIds, true
}

// HasIncludeNoteIds returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasIncludeNoteIds() bool {
	if o != nil && !IsNil(o.IncludeNoteIds) {
		return true
	}

	return false
}

// SetIncludeNoteIds gets a reference to the given []int32 and assigns it to the IncludeNoteIds field.
func (o *OpportunityToProjectConversion) SetIncludeNoteIds(v []int32) {
	o.IncludeNoteIds = v
}

// GetIncludeDocumentIds returns the IncludeDocumentIds field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetIncludeDocumentIds() []int32 {
	if o == nil || IsNil(o.IncludeDocumentIds) {
		var ret []int32
		return ret
	}
	return o.IncludeDocumentIds
}

// GetIncludeDocumentIdsOk returns a tuple with the IncludeDocumentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetIncludeDocumentIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IncludeDocumentIds) {
		return nil, false
	}
	return o.IncludeDocumentIds, true
}

// HasIncludeDocumentIds returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasIncludeDocumentIds() bool {
	if o != nil && !IsNil(o.IncludeDocumentIds) {
		return true
	}

	return false
}

// SetIncludeDocumentIds gets a reference to the given []int32 and assigns it to the IncludeDocumentIds field.
func (o *OpportunityToProjectConversion) SetIncludeDocumentIds(v []int32) {
	o.IncludeDocumentIds = v
}

// GetIncludeProductIds returns the IncludeProductIds field value if set, zero value otherwise.
func (o *OpportunityToProjectConversion) GetIncludeProductIds() []int32 {
	if o == nil || IsNil(o.IncludeProductIds) {
		var ret []int32
		return ret
	}
	return o.IncludeProductIds
}

// GetIncludeProductIdsOk returns a tuple with the IncludeProductIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToProjectConversion) GetIncludeProductIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IncludeProductIds) {
		return nil, false
	}
	return o.IncludeProductIds, true
}

// HasIncludeProductIds returns a boolean if a field has been set.
func (o *OpportunityToProjectConversion) HasIncludeProductIds() bool {
	if o != nil && !IsNil(o.IncludeProductIds) {
		return true
	}

	return false
}

// SetIncludeProductIds gets a reference to the given []int32 and assigns it to the IncludeProductIds field.
func (o *OpportunityToProjectConversion) SetIncludeProductIds(v []int32) {
	o.IncludeProductIds = v
}

func (o OpportunityToProjectConversion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityToProjectConversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if !IsNil(o.EstimatedStart) {
		toSerialize["estimatedStart"] = o.EstimatedStart
	}
	if !IsNil(o.EstimatedEnd) {
		toSerialize["estimatedEnd"] = o.EstimatedEnd
	}
	if o.IncludeAllNotesFlag.IsSet() {
		toSerialize["includeAllNotesFlag"] = o.IncludeAllNotesFlag.Get()
	}
	if o.IncludeAllDocumentsFlag.IsSet() {
		toSerialize["includeAllDocumentsFlag"] = o.IncludeAllDocumentsFlag.Get()
	}
	if o.IncludeAllProductsFlag.IsSet() {
		toSerialize["includeAllProductsFlag"] = o.IncludeAllProductsFlag.Get()
	}
	if !IsNil(o.IncludeNoteIds) {
		toSerialize["includeNoteIds"] = o.IncludeNoteIds
	}
	if !IsNil(o.IncludeDocumentIds) {
		toSerialize["includeDocumentIds"] = o.IncludeDocumentIds
	}
	if !IsNil(o.IncludeProductIds) {
		toSerialize["includeProductIds"] = o.IncludeProductIds
	}
	return toSerialize, nil
}

type NullableOpportunityToProjectConversion struct {
	value *OpportunityToProjectConversion
	isSet bool
}

func (v NullableOpportunityToProjectConversion) Get() *OpportunityToProjectConversion {
	return v.value
}

func (v *NullableOpportunityToProjectConversion) Set(val *OpportunityToProjectConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityToProjectConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityToProjectConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityToProjectConversion(val *OpportunityToProjectConversion) *NullableOpportunityToProjectConversion {
	return &NullableOpportunityToProjectConversion{value: val, isSet: true}
}

func (v NullableOpportunityToProjectConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityToProjectConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
