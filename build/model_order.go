/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order struct for Order
type Order struct {
	Id           *int32                 `json:"id,omitempty"`
	Company      CompanyReference       `json:"company"`
	Contact      *ContactReference      `json:"contact,omitempty"`
	Phone        *string                `json:"phone,omitempty"`
	PhoneExt     *string                `json:"phoneExt,omitempty"`
	Email        *string                `json:"email,omitempty"`
	Site         *SiteReference         `json:"site,omitempty"`
	Status       OrderStatusReference   `json:"status"`
	Opportunity  *OpportunityReference  `json:"opportunity,omitempty"`
	OrderDate    *time.Time             `json:"orderDate,omitempty"`
	DueDate      *time.Time             `json:"dueDate,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	TaxCode      *TaxCodeReference      `json:"taxCode,omitempty"`
	//  Max length: 50;
	PoNumber                *string                    `json:"poNumber,omitempty"`
	Location                *SystemLocationReference   `json:"location,omitempty"`
	Department              *SystemDepartmentReference `json:"department,omitempty"`
	SalesRep                MemberReference            `json:"salesRep"`
	Notes                   *string                    `json:"notes,omitempty"`
	BillClosedFlag          NullableBool               `json:"billClosedFlag,omitempty"`
	BillShippedFlag         NullableBool               `json:"billShippedFlag,omitempty"`
	RestrictDownpaymentFlag NullableBool               `json:"restrictDownpaymentFlag,omitempty"`
	Description             *string                    `json:"description,omitempty"`
	TopCommentFlag          NullableBool               `json:"topCommentFlag,omitempty"`
	BottomCommentFlag       NullableBool               `json:"bottomCommentFlag,omitempty"`
	ShipToCompany           *CompanyReference          `json:"shipToCompany,omitempty"`
	ShipToContact           *ContactReference          `json:"shipToContact,omitempty"`
	ShipToSite              *SiteReference             `json:"shipToSite,omitempty"`
	BillToCompany           *CompanyReference          `json:"billToCompany,omitempty"`
	BillToContact           *ContactReference          `json:"billToContact,omitempty"`
	BillToSite              *SiteReference             `json:"billToSite,omitempty"`
	ProductIds              []int32                    `json:"productIds,omitempty"`
	DocumentIds             []int32                    `json:"documentIds,omitempty"`
	InvoiceIds              []int32                    `json:"invoiceIds,omitempty"`
	ConfigIds               []int32                    `json:"configIds,omitempty"`
	Total                   NullableFloat64            `json:"total,omitempty"`
	TaxTotal                NullableFloat64            `json:"taxTotal,omitempty"`
	Currency                *CurrencyReference         `json:"currency,omitempty"`
	CompanyLocation         *SystemLocationReference   `json:"companyLocation,omitempty"`
	SubTotal                *float64                   `json:"subTotal,omitempty"`
	Info                    *map[string]string         `json:"_info,omitempty"`
	CustomFields            []CustomFieldValue         `json:"customFields,omitempty"`
}

type _Order Order

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(company CompanyReference, status OrderStatusReference, salesRep MemberReference) *Order {
	this := Order{}
	this.Company = company
	this.Status = status
	this.SalesRep = salesRep
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Order) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Order) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Order) SetId(v int32) {
	o.Id = &v
}

// GetCompany returns the Company field value
func (o *Order) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Order) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Order) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Order) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Order) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *Order) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Order) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Order) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Order) SetPhone(v string) {
	o.Phone = &v
}

// GetPhoneExt returns the PhoneExt field value if set, zero value otherwise.
func (o *Order) GetPhoneExt() string {
	if o == nil || IsNil(o.PhoneExt) {
		var ret string
		return ret
	}
	return *o.PhoneExt
}

// GetPhoneExtOk returns a tuple with the PhoneExt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPhoneExtOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneExt) {
		return nil, false
	}
	return o.PhoneExt, true
}

// HasPhoneExt returns a boolean if a field has been set.
func (o *Order) HasPhoneExt() bool {
	if o != nil && !IsNil(o.PhoneExt) {
		return true
	}

	return false
}

// SetPhoneExt gets a reference to the given string and assigns it to the PhoneExt field.
func (o *Order) SetPhoneExt(v string) {
	o.PhoneExt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Order) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Order) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Order) SetEmail(v string) {
	o.Email = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Order) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Order) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *Order) SetSite(v SiteReference) {
	o.Site = &v
}

// GetStatus returns the Status field value
func (o *Order) GetStatus() OrderStatusReference {
	if o == nil {
		var ret OrderStatusReference
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*OrderStatusReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Order) SetStatus(v OrderStatusReference) {
	o.Status = v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *Order) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *Order) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *Order) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetOrderDate returns the OrderDate field value if set, zero value otherwise.
func (o *Order) GetOrderDate() time.Time {
	if o == nil || IsNil(o.OrderDate) {
		var ret time.Time
		return ret
	}
	return *o.OrderDate
}

// GetOrderDateOk returns a tuple with the OrderDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OrderDate) {
		return nil, false
	}
	return o.OrderDate, true
}

// HasOrderDate returns a boolean if a field has been set.
func (o *Order) HasOrderDate() bool {
	if o != nil && !IsNil(o.OrderDate) {
		return true
	}

	return false
}

// SetOrderDate gets a reference to the given time.Time and assigns it to the OrderDate field.
func (o *Order) SetOrderDate(v time.Time) {
	o.OrderDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Order) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Order) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *Order) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *Order) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *Order) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *Order) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *Order) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *Order) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *Order) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *Order) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *Order) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *Order) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Order) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Order) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Order) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Order) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Order) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *Order) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetSalesRep returns the SalesRep field value
func (o *Order) GetSalesRep() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.SalesRep
}

// GetSalesRepOk returns a tuple with the SalesRep field value
// and a boolean to check if the value has been set.
func (o *Order) GetSalesRepOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesRep, true
}

// SetSalesRep sets field value
func (o *Order) SetSalesRep(v MemberReference) {
	o.SalesRep = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Order) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Order) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Order) SetNotes(v string) {
	o.Notes = &v
}

// GetBillClosedFlag returns the BillClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetBillClosedFlag() bool {
	if o == nil || IsNil(o.BillClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillClosedFlag.Get()
}

// GetBillClosedFlagOk returns a tuple with the BillClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetBillClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillClosedFlag.Get(), o.BillClosedFlag.IsSet()
}

// HasBillClosedFlag returns a boolean if a field has been set.
func (o *Order) HasBillClosedFlag() bool {
	if o != nil && o.BillClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillClosedFlag gets a reference to the given NullableBool and assigns it to the BillClosedFlag field.
func (o *Order) SetBillClosedFlag(v bool) {
	o.BillClosedFlag.Set(&v)
}

// SetBillClosedFlagNil sets the value for BillClosedFlag to be an explicit nil
func (o *Order) SetBillClosedFlagNil() {
	o.BillClosedFlag.Set(nil)
}

// UnsetBillClosedFlag ensures that no value is present for BillClosedFlag, not even an explicit nil
func (o *Order) UnsetBillClosedFlag() {
	o.BillClosedFlag.Unset()
}

// GetBillShippedFlag returns the BillShippedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetBillShippedFlag() bool {
	if o == nil || IsNil(o.BillShippedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillShippedFlag.Get()
}

// GetBillShippedFlagOk returns a tuple with the BillShippedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetBillShippedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillShippedFlag.Get(), o.BillShippedFlag.IsSet()
}

// HasBillShippedFlag returns a boolean if a field has been set.
func (o *Order) HasBillShippedFlag() bool {
	if o != nil && o.BillShippedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillShippedFlag gets a reference to the given NullableBool and assigns it to the BillShippedFlag field.
func (o *Order) SetBillShippedFlag(v bool) {
	o.BillShippedFlag.Set(&v)
}

// SetBillShippedFlagNil sets the value for BillShippedFlag to be an explicit nil
func (o *Order) SetBillShippedFlagNil() {
	o.BillShippedFlag.Set(nil)
}

// UnsetBillShippedFlag ensures that no value is present for BillShippedFlag, not even an explicit nil
func (o *Order) UnsetBillShippedFlag() {
	o.BillShippedFlag.Unset()
}

// GetRestrictDownpaymentFlag returns the RestrictDownpaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetRestrictDownpaymentFlag() bool {
	if o == nil || IsNil(o.RestrictDownpaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDownpaymentFlag.Get()
}

// GetRestrictDownpaymentFlagOk returns a tuple with the RestrictDownpaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetRestrictDownpaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDownpaymentFlag.Get(), o.RestrictDownpaymentFlag.IsSet()
}

// HasRestrictDownpaymentFlag returns a boolean if a field has been set.
func (o *Order) HasRestrictDownpaymentFlag() bool {
	if o != nil && o.RestrictDownpaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDownpaymentFlag gets a reference to the given NullableBool and assigns it to the RestrictDownpaymentFlag field.
func (o *Order) SetRestrictDownpaymentFlag(v bool) {
	o.RestrictDownpaymentFlag.Set(&v)
}

// SetRestrictDownpaymentFlagNil sets the value for RestrictDownpaymentFlag to be an explicit nil
func (o *Order) SetRestrictDownpaymentFlagNil() {
	o.RestrictDownpaymentFlag.Set(nil)
}

// UnsetRestrictDownpaymentFlag ensures that no value is present for RestrictDownpaymentFlag, not even an explicit nil
func (o *Order) UnsetRestrictDownpaymentFlag() {
	o.RestrictDownpaymentFlag.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Order) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Order) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Order) SetDescription(v string) {
	o.Description = &v
}

// GetTopCommentFlag returns the TopCommentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetTopCommentFlag() bool {
	if o == nil || IsNil(o.TopCommentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TopCommentFlag.Get()
}

// GetTopCommentFlagOk returns a tuple with the TopCommentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetTopCommentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopCommentFlag.Get(), o.TopCommentFlag.IsSet()
}

// HasTopCommentFlag returns a boolean if a field has been set.
func (o *Order) HasTopCommentFlag() bool {
	if o != nil && o.TopCommentFlag.IsSet() {
		return true
	}

	return false
}

// SetTopCommentFlag gets a reference to the given NullableBool and assigns it to the TopCommentFlag field.
func (o *Order) SetTopCommentFlag(v bool) {
	o.TopCommentFlag.Set(&v)
}

// SetTopCommentFlagNil sets the value for TopCommentFlag to be an explicit nil
func (o *Order) SetTopCommentFlagNil() {
	o.TopCommentFlag.Set(nil)
}

// UnsetTopCommentFlag ensures that no value is present for TopCommentFlag, not even an explicit nil
func (o *Order) UnsetTopCommentFlag() {
	o.TopCommentFlag.Unset()
}

// GetBottomCommentFlag returns the BottomCommentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetBottomCommentFlag() bool {
	if o == nil || IsNil(o.BottomCommentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BottomCommentFlag.Get()
}

// GetBottomCommentFlagOk returns a tuple with the BottomCommentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetBottomCommentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BottomCommentFlag.Get(), o.BottomCommentFlag.IsSet()
}

// HasBottomCommentFlag returns a boolean if a field has been set.
func (o *Order) HasBottomCommentFlag() bool {
	if o != nil && o.BottomCommentFlag.IsSet() {
		return true
	}

	return false
}

// SetBottomCommentFlag gets a reference to the given NullableBool and assigns it to the BottomCommentFlag field.
func (o *Order) SetBottomCommentFlag(v bool) {
	o.BottomCommentFlag.Set(&v)
}

// SetBottomCommentFlagNil sets the value for BottomCommentFlag to be an explicit nil
func (o *Order) SetBottomCommentFlagNil() {
	o.BottomCommentFlag.Set(nil)
}

// UnsetBottomCommentFlag ensures that no value is present for BottomCommentFlag, not even an explicit nil
func (o *Order) UnsetBottomCommentFlag() {
	o.BottomCommentFlag.Unset()
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *Order) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *Order) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *Order) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToContact returns the ShipToContact field value if set, zero value otherwise.
func (o *Order) GetShipToContact() ContactReference {
	if o == nil || IsNil(o.ShipToContact) {
		var ret ContactReference
		return ret
	}
	return *o.ShipToContact
}

// GetShipToContactOk returns a tuple with the ShipToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetShipToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.ShipToContact) {
		return nil, false
	}
	return o.ShipToContact, true
}

// HasShipToContact returns a boolean if a field has been set.
func (o *Order) HasShipToContact() bool {
	if o != nil && !IsNil(o.ShipToContact) {
		return true
	}

	return false
}

// SetShipToContact gets a reference to the given ContactReference and assigns it to the ShipToContact field.
func (o *Order) SetShipToContact(v ContactReference) {
	o.ShipToContact = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *Order) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *Order) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *Order) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *Order) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *Order) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *Order) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetBillToContact returns the BillToContact field value if set, zero value otherwise.
func (o *Order) GetBillToContact() ContactReference {
	if o == nil || IsNil(o.BillToContact) {
		var ret ContactReference
		return ret
	}
	return *o.BillToContact
}

// GetBillToContactOk returns a tuple with the BillToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBillToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BillToContact) {
		return nil, false
	}
	return o.BillToContact, true
}

// HasBillToContact returns a boolean if a field has been set.
func (o *Order) HasBillToContact() bool {
	if o != nil && !IsNil(o.BillToContact) {
		return true
	}

	return false
}

// SetBillToContact gets a reference to the given ContactReference and assigns it to the BillToContact field.
func (o *Order) SetBillToContact(v ContactReference) {
	o.BillToContact = &v
}

// GetBillToSite returns the BillToSite field value if set, zero value otherwise.
func (o *Order) GetBillToSite() SiteReference {
	if o == nil || IsNil(o.BillToSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillToSite
}

// GetBillToSiteOk returns a tuple with the BillToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBillToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillToSite) {
		return nil, false
	}
	return o.BillToSite, true
}

// HasBillToSite returns a boolean if a field has been set.
func (o *Order) HasBillToSite() bool {
	if o != nil && !IsNil(o.BillToSite) {
		return true
	}

	return false
}

// SetBillToSite gets a reference to the given SiteReference and assigns it to the BillToSite field.
func (o *Order) SetBillToSite(v SiteReference) {
	o.BillToSite = &v
}

// GetProductIds returns the ProductIds field value if set, zero value otherwise.
func (o *Order) GetProductIds() []int32 {
	if o == nil || IsNil(o.ProductIds) {
		var ret []int32
		return ret
	}
	return o.ProductIds
}

// GetProductIdsOk returns a tuple with the ProductIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetProductIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ProductIds) {
		return nil, false
	}
	return o.ProductIds, true
}

// HasProductIds returns a boolean if a field has been set.
func (o *Order) HasProductIds() bool {
	if o != nil && !IsNil(o.ProductIds) {
		return true
	}

	return false
}

// SetProductIds gets a reference to the given []int32 and assigns it to the ProductIds field.
func (o *Order) SetProductIds(v []int32) {
	o.ProductIds = v
}

// GetDocumentIds returns the DocumentIds field value if set, zero value otherwise.
func (o *Order) GetDocumentIds() []int32 {
	if o == nil || IsNil(o.DocumentIds) {
		var ret []int32
		return ret
	}
	return o.DocumentIds
}

// GetDocumentIdsOk returns a tuple with the DocumentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDocumentIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DocumentIds) {
		return nil, false
	}
	return o.DocumentIds, true
}

// HasDocumentIds returns a boolean if a field has been set.
func (o *Order) HasDocumentIds() bool {
	if o != nil && !IsNil(o.DocumentIds) {
		return true
	}

	return false
}

// SetDocumentIds gets a reference to the given []int32 and assigns it to the DocumentIds field.
func (o *Order) SetDocumentIds(v []int32) {
	o.DocumentIds = v
}

// GetInvoiceIds returns the InvoiceIds field value if set, zero value otherwise.
func (o *Order) GetInvoiceIds() []int32 {
	if o == nil || IsNil(o.InvoiceIds) {
		var ret []int32
		return ret
	}
	return o.InvoiceIds
}

// GetInvoiceIdsOk returns a tuple with the InvoiceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetInvoiceIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.InvoiceIds) {
		return nil, false
	}
	return o.InvoiceIds, true
}

// HasInvoiceIds returns a boolean if a field has been set.
func (o *Order) HasInvoiceIds() bool {
	if o != nil && !IsNil(o.InvoiceIds) {
		return true
	}

	return false
}

// SetInvoiceIds gets a reference to the given []int32 and assigns it to the InvoiceIds field.
func (o *Order) SetInvoiceIds(v []int32) {
	o.InvoiceIds = v
}

// GetConfigIds returns the ConfigIds field value if set, zero value otherwise.
func (o *Order) GetConfigIds() []int32 {
	if o == nil || IsNil(o.ConfigIds) {
		var ret []int32
		return ret
	}
	return o.ConfigIds
}

// GetConfigIdsOk returns a tuple with the ConfigIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetConfigIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ConfigIds) {
		return nil, false
	}
	return o.ConfigIds, true
}

// HasConfigIds returns a boolean if a field has been set.
func (o *Order) HasConfigIds() bool {
	if o != nil && !IsNil(o.ConfigIds) {
		return true
	}

	return false
}

// SetConfigIds gets a reference to the given []int32 and assigns it to the ConfigIds field.
func (o *Order) SetConfigIds(v []int32) {
	o.ConfigIds = v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *Order) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *Order) SetTotal(v float64) {
	o.Total.Set(&v)
}

// SetTotalNil sets the value for Total to be an explicit nil
func (o *Order) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *Order) UnsetTotal() {
	o.Total.Unset()
}

// GetTaxTotal returns the TaxTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetTaxTotal() float64 {
	if o == nil || IsNil(o.TaxTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxTotal.Get()
}

// GetTaxTotalOk returns a tuple with the TaxTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetTaxTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxTotal.Get(), o.TaxTotal.IsSet()
}

// HasTaxTotal returns a boolean if a field has been set.
func (o *Order) HasTaxTotal() bool {
	if o != nil && o.TaxTotal.IsSet() {
		return true
	}

	return false
}

// SetTaxTotal gets a reference to the given NullableFloat64 and assigns it to the TaxTotal field.
func (o *Order) SetTaxTotal(v float64) {
	o.TaxTotal.Set(&v)
}

// SetTaxTotalNil sets the value for TaxTotal to be an explicit nil
func (o *Order) SetTaxTotalNil() {
	o.TaxTotal.Set(nil)
}

// UnsetTaxTotal ensures that no value is present for TaxTotal, not even an explicit nil
func (o *Order) UnsetTaxTotal() {
	o.TaxTotal.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Order) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Order) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Order) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetCompanyLocation returns the CompanyLocation field value if set, zero value otherwise.
func (o *Order) GetCompanyLocation() SystemLocationReference {
	if o == nil || IsNil(o.CompanyLocation) {
		var ret SystemLocationReference
		return ret
	}
	return *o.CompanyLocation
}

// GetCompanyLocationOk returns a tuple with the CompanyLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCompanyLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.CompanyLocation) {
		return nil, false
	}
	return o.CompanyLocation, true
}

// HasCompanyLocation returns a boolean if a field has been set.
func (o *Order) HasCompanyLocation() bool {
	if o != nil && !IsNil(o.CompanyLocation) {
		return true
	}

	return false
}

// SetCompanyLocation gets a reference to the given SystemLocationReference and assigns it to the CompanyLocation field.
func (o *Order) SetCompanyLocation(v SystemLocationReference) {
	o.CompanyLocation = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *Order) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float64
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSubTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *Order) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float64 and assigns it to the SubTotal field.
func (o *Order) SetSubTotal(v float64) {
	o.SubTotal = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Order) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Order) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Order) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Order) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Order) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Order) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["company"] = o.Company
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.PhoneExt) {
		toSerialize["phoneExt"] = o.PhoneExt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.OrderDate) {
		toSerialize["orderDate"] = o.OrderDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	toSerialize["salesRep"] = o.SalesRep
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.BillClosedFlag.IsSet() {
		toSerialize["billClosedFlag"] = o.BillClosedFlag.Get()
	}
	if o.BillShippedFlag.IsSet() {
		toSerialize["billShippedFlag"] = o.BillShippedFlag.Get()
	}
	if o.RestrictDownpaymentFlag.IsSet() {
		toSerialize["restrictDownpaymentFlag"] = o.RestrictDownpaymentFlag.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.TopCommentFlag.IsSet() {
		toSerialize["topCommentFlag"] = o.TopCommentFlag.Get()
	}
	if o.BottomCommentFlag.IsSet() {
		toSerialize["bottomCommentFlag"] = o.BottomCommentFlag.Get()
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToContact) {
		toSerialize["shipToContact"] = o.ShipToContact
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.BillToContact) {
		toSerialize["billToContact"] = o.BillToContact
	}
	if !IsNil(o.BillToSite) {
		toSerialize["billToSite"] = o.BillToSite
	}
	if !IsNil(o.ProductIds) {
		toSerialize["productIds"] = o.ProductIds
	}
	if !IsNil(o.DocumentIds) {
		toSerialize["documentIds"] = o.DocumentIds
	}
	if !IsNil(o.InvoiceIds) {
		toSerialize["invoiceIds"] = o.InvoiceIds
	}
	if !IsNil(o.ConfigIds) {
		toSerialize["configIds"] = o.ConfigIds
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.TaxTotal.IsSet() {
		toSerialize["taxTotal"] = o.TaxTotal.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CompanyLocation) {
		toSerialize["companyLocation"] = o.CompanyLocation
	}
	if !IsNil(o.SubTotal) {
		toSerialize["subTotal"] = o.SubTotal
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Order) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company",
		"status",
		"salesRep",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrder := _Order{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrder)

	if err != nil {
		return err
	}

	*o = Order(varOrder)

	return err
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
