/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Other type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Other{}

// Other struct for Other
type Other struct {
	Id          *int32                      `json:"id,omitempty"`
	DefaultLdap *LdapConfigurationReference `json:"defaultLdap,omitempty"`
	//  Max length: 50;
	DefaultFromAddress string `json:"defaultFromAddress"`
	//  Max length: 100;
	PortalUrlOverride string `json:"portalUrlOverride"`
	//  Max length: 100;
	SiteUrl string `json:"siteUrl"`
	//  Max length: 200;
	LogoPath                      *string                `json:"logoPath,omitempty"`
	ContactSync                   NullableString         `json:"contactSync,omitempty"`
	ServerTimeZone                TimeZoneSetupReference `json:"serverTimeZone"`
	DefaultCalendar               CalendarReference      `json:"defaultCalendar"`
	DefaultAddressFormat          AddressFormatReference `json:"defaultAddressFormat"`
	UseSslFlag                    NullableBool           `json:"useSslFlag,omitempty"`
	SyncLeadsFlag                 NullableBool           `json:"syncLeadsFlag,omitempty"`
	IncludePortalLinkFlag         NullableBool           `json:"includePortalLinkFlag,omitempty"`
	UseExpandedFormatTimeFlag     NullableBool           `json:"useExpandedFormatTimeFlag,omitempty"`
	UseExpandedFormatActivityFlag NullableBool           `json:"useExpandedFormatActivityFlag,omitempty"`
	DisableZAdminLoginFlag        NullableBool           `json:"disableZAdminLoginFlag,omitempty"`
	Locale                        LocaleReference        `json:"locale"`
	// If true, all Members time zone will also be set to serverTimeZone. Otherwise, only My Company time zone will be updated.
	UpdateMemberTimeZonesFlag NullableBool       `json:"updateMemberTimeZonesFlag,omitempty"`
	Info                      *map[string]string `json:"_info,omitempty"`
}

type _Other Other

// NewOther instantiates a new Other object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOther(defaultFromAddress string, portalUrlOverride string, siteUrl string, serverTimeZone TimeZoneSetupReference, defaultCalendar CalendarReference, defaultAddressFormat AddressFormatReference, locale LocaleReference) *Other {
	this := Other{}
	this.DefaultFromAddress = defaultFromAddress
	this.PortalUrlOverride = portalUrlOverride
	this.SiteUrl = siteUrl
	this.ServerTimeZone = serverTimeZone
	this.DefaultCalendar = defaultCalendar
	this.DefaultAddressFormat = defaultAddressFormat
	this.Locale = locale
	return &this
}

// NewOtherWithDefaults instantiates a new Other object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtherWithDefaults() *Other {
	this := Other{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Other) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Other) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Other) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Other) SetId(v int32) {
	o.Id = &v
}

// GetDefaultLdap returns the DefaultLdap field value if set, zero value otherwise.
func (o *Other) GetDefaultLdap() LdapConfigurationReference {
	if o == nil || IsNil(o.DefaultLdap) {
		var ret LdapConfigurationReference
		return ret
	}
	return *o.DefaultLdap
}

// GetDefaultLdapOk returns a tuple with the DefaultLdap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Other) GetDefaultLdapOk() (*LdapConfigurationReference, bool) {
	if o == nil || IsNil(o.DefaultLdap) {
		return nil, false
	}
	return o.DefaultLdap, true
}

// HasDefaultLdap returns a boolean if a field has been set.
func (o *Other) HasDefaultLdap() bool {
	if o != nil && !IsNil(o.DefaultLdap) {
		return true
	}

	return false
}

// SetDefaultLdap gets a reference to the given LdapConfigurationReference and assigns it to the DefaultLdap field.
func (o *Other) SetDefaultLdap(v LdapConfigurationReference) {
	o.DefaultLdap = &v
}

// GetDefaultFromAddress returns the DefaultFromAddress field value
func (o *Other) GetDefaultFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultFromAddress
}

// GetDefaultFromAddressOk returns a tuple with the DefaultFromAddress field value
// and a boolean to check if the value has been set.
func (o *Other) GetDefaultFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultFromAddress, true
}

// SetDefaultFromAddress sets field value
func (o *Other) SetDefaultFromAddress(v string) {
	o.DefaultFromAddress = v
}

// GetPortalUrlOverride returns the PortalUrlOverride field value
func (o *Other) GetPortalUrlOverride() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortalUrlOverride
}

// GetPortalUrlOverrideOk returns a tuple with the PortalUrlOverride field value
// and a boolean to check if the value has been set.
func (o *Other) GetPortalUrlOverrideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortalUrlOverride, true
}

// SetPortalUrlOverride sets field value
func (o *Other) SetPortalUrlOverride(v string) {
	o.PortalUrlOverride = v
}

// GetSiteUrl returns the SiteUrl field value
func (o *Other) GetSiteUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteUrl
}

// GetSiteUrlOk returns a tuple with the SiteUrl field value
// and a boolean to check if the value has been set.
func (o *Other) GetSiteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteUrl, true
}

// SetSiteUrl sets field value
func (o *Other) SetSiteUrl(v string) {
	o.SiteUrl = v
}

// GetLogoPath returns the LogoPath field value if set, zero value otherwise.
func (o *Other) GetLogoPath() string {
	if o == nil || IsNil(o.LogoPath) {
		var ret string
		return ret
	}
	return *o.LogoPath
}

// GetLogoPathOk returns a tuple with the LogoPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Other) GetLogoPathOk() (*string, bool) {
	if o == nil || IsNil(o.LogoPath) {
		return nil, false
	}
	return o.LogoPath, true
}

// HasLogoPath returns a boolean if a field has been set.
func (o *Other) HasLogoPath() bool {
	if o != nil && !IsNil(o.LogoPath) {
		return true
	}

	return false
}

// SetLogoPath gets a reference to the given string and assigns it to the LogoPath field.
func (o *Other) SetLogoPath(v string) {
	o.LogoPath = &v
}

// GetContactSync returns the ContactSync field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetContactSync() string {
	if o == nil || IsNil(o.ContactSync.Get()) {
		var ret string
		return ret
	}
	return *o.ContactSync.Get()
}

// GetContactSyncOk returns a tuple with the ContactSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetContactSyncOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactSync.Get(), o.ContactSync.IsSet()
}

// HasContactSync returns a boolean if a field has been set.
func (o *Other) HasContactSync() bool {
	if o != nil && o.ContactSync.IsSet() {
		return true
	}

	return false
}

// SetContactSync gets a reference to the given NullableString and assigns it to the ContactSync field.
func (o *Other) SetContactSync(v string) {
	o.ContactSync.Set(&v)
}

// SetContactSyncNil sets the value for ContactSync to be an explicit nil
func (o *Other) SetContactSyncNil() {
	o.ContactSync.Set(nil)
}

// UnsetContactSync ensures that no value is present for ContactSync, not even an explicit nil
func (o *Other) UnsetContactSync() {
	o.ContactSync.Unset()
}

// GetServerTimeZone returns the ServerTimeZone field value
func (o *Other) GetServerTimeZone() TimeZoneSetupReference {
	if o == nil {
		var ret TimeZoneSetupReference
		return ret
	}

	return o.ServerTimeZone
}

// GetServerTimeZoneOk returns a tuple with the ServerTimeZone field value
// and a boolean to check if the value has been set.
func (o *Other) GetServerTimeZoneOk() (*TimeZoneSetupReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerTimeZone, true
}

// SetServerTimeZone sets field value
func (o *Other) SetServerTimeZone(v TimeZoneSetupReference) {
	o.ServerTimeZone = v
}

// GetDefaultCalendar returns the DefaultCalendar field value
func (o *Other) GetDefaultCalendar() CalendarReference {
	if o == nil {
		var ret CalendarReference
		return ret
	}

	return o.DefaultCalendar
}

// GetDefaultCalendarOk returns a tuple with the DefaultCalendar field value
// and a boolean to check if the value has been set.
func (o *Other) GetDefaultCalendarOk() (*CalendarReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultCalendar, true
}

// SetDefaultCalendar sets field value
func (o *Other) SetDefaultCalendar(v CalendarReference) {
	o.DefaultCalendar = v
}

// GetDefaultAddressFormat returns the DefaultAddressFormat field value
func (o *Other) GetDefaultAddressFormat() AddressFormatReference {
	if o == nil {
		var ret AddressFormatReference
		return ret
	}

	return o.DefaultAddressFormat
}

// GetDefaultAddressFormatOk returns a tuple with the DefaultAddressFormat field value
// and a boolean to check if the value has been set.
func (o *Other) GetDefaultAddressFormatOk() (*AddressFormatReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultAddressFormat, true
}

// SetDefaultAddressFormat sets field value
func (o *Other) SetDefaultAddressFormat(v AddressFormatReference) {
	o.DefaultAddressFormat = v
}

// GetUseSslFlag returns the UseSslFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetUseSslFlag() bool {
	if o == nil || IsNil(o.UseSslFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseSslFlag.Get()
}

// GetUseSslFlagOk returns a tuple with the UseSslFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetUseSslFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseSslFlag.Get(), o.UseSslFlag.IsSet()
}

// HasUseSslFlag returns a boolean if a field has been set.
func (o *Other) HasUseSslFlag() bool {
	if o != nil && o.UseSslFlag.IsSet() {
		return true
	}

	return false
}

// SetUseSslFlag gets a reference to the given NullableBool and assigns it to the UseSslFlag field.
func (o *Other) SetUseSslFlag(v bool) {
	o.UseSslFlag.Set(&v)
}

// SetUseSslFlagNil sets the value for UseSslFlag to be an explicit nil
func (o *Other) SetUseSslFlagNil() {
	o.UseSslFlag.Set(nil)
}

// UnsetUseSslFlag ensures that no value is present for UseSslFlag, not even an explicit nil
func (o *Other) UnsetUseSslFlag() {
	o.UseSslFlag.Unset()
}

// GetSyncLeadsFlag returns the SyncLeadsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetSyncLeadsFlag() bool {
	if o == nil || IsNil(o.SyncLeadsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SyncLeadsFlag.Get()
}

// GetSyncLeadsFlagOk returns a tuple with the SyncLeadsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetSyncLeadsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SyncLeadsFlag.Get(), o.SyncLeadsFlag.IsSet()
}

// HasSyncLeadsFlag returns a boolean if a field has been set.
func (o *Other) HasSyncLeadsFlag() bool {
	if o != nil && o.SyncLeadsFlag.IsSet() {
		return true
	}

	return false
}

// SetSyncLeadsFlag gets a reference to the given NullableBool and assigns it to the SyncLeadsFlag field.
func (o *Other) SetSyncLeadsFlag(v bool) {
	o.SyncLeadsFlag.Set(&v)
}

// SetSyncLeadsFlagNil sets the value for SyncLeadsFlag to be an explicit nil
func (o *Other) SetSyncLeadsFlagNil() {
	o.SyncLeadsFlag.Set(nil)
}

// UnsetSyncLeadsFlag ensures that no value is present for SyncLeadsFlag, not even an explicit nil
func (o *Other) UnsetSyncLeadsFlag() {
	o.SyncLeadsFlag.Unset()
}

// GetIncludePortalLinkFlag returns the IncludePortalLinkFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetIncludePortalLinkFlag() bool {
	if o == nil || IsNil(o.IncludePortalLinkFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludePortalLinkFlag.Get()
}

// GetIncludePortalLinkFlagOk returns a tuple with the IncludePortalLinkFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetIncludePortalLinkFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludePortalLinkFlag.Get(), o.IncludePortalLinkFlag.IsSet()
}

// HasIncludePortalLinkFlag returns a boolean if a field has been set.
func (o *Other) HasIncludePortalLinkFlag() bool {
	if o != nil && o.IncludePortalLinkFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludePortalLinkFlag gets a reference to the given NullableBool and assigns it to the IncludePortalLinkFlag field.
func (o *Other) SetIncludePortalLinkFlag(v bool) {
	o.IncludePortalLinkFlag.Set(&v)
}

// SetIncludePortalLinkFlagNil sets the value for IncludePortalLinkFlag to be an explicit nil
func (o *Other) SetIncludePortalLinkFlagNil() {
	o.IncludePortalLinkFlag.Set(nil)
}

// UnsetIncludePortalLinkFlag ensures that no value is present for IncludePortalLinkFlag, not even an explicit nil
func (o *Other) UnsetIncludePortalLinkFlag() {
	o.IncludePortalLinkFlag.Unset()
}

// GetUseExpandedFormatTimeFlag returns the UseExpandedFormatTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetUseExpandedFormatTimeFlag() bool {
	if o == nil || IsNil(o.UseExpandedFormatTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseExpandedFormatTimeFlag.Get()
}

// GetUseExpandedFormatTimeFlagOk returns a tuple with the UseExpandedFormatTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetUseExpandedFormatTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseExpandedFormatTimeFlag.Get(), o.UseExpandedFormatTimeFlag.IsSet()
}

// HasUseExpandedFormatTimeFlag returns a boolean if a field has been set.
func (o *Other) HasUseExpandedFormatTimeFlag() bool {
	if o != nil && o.UseExpandedFormatTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetUseExpandedFormatTimeFlag gets a reference to the given NullableBool and assigns it to the UseExpandedFormatTimeFlag field.
func (o *Other) SetUseExpandedFormatTimeFlag(v bool) {
	o.UseExpandedFormatTimeFlag.Set(&v)
}

// SetUseExpandedFormatTimeFlagNil sets the value for UseExpandedFormatTimeFlag to be an explicit nil
func (o *Other) SetUseExpandedFormatTimeFlagNil() {
	o.UseExpandedFormatTimeFlag.Set(nil)
}

// UnsetUseExpandedFormatTimeFlag ensures that no value is present for UseExpandedFormatTimeFlag, not even an explicit nil
func (o *Other) UnsetUseExpandedFormatTimeFlag() {
	o.UseExpandedFormatTimeFlag.Unset()
}

// GetUseExpandedFormatActivityFlag returns the UseExpandedFormatActivityFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetUseExpandedFormatActivityFlag() bool {
	if o == nil || IsNil(o.UseExpandedFormatActivityFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseExpandedFormatActivityFlag.Get()
}

// GetUseExpandedFormatActivityFlagOk returns a tuple with the UseExpandedFormatActivityFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetUseExpandedFormatActivityFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseExpandedFormatActivityFlag.Get(), o.UseExpandedFormatActivityFlag.IsSet()
}

// HasUseExpandedFormatActivityFlag returns a boolean if a field has been set.
func (o *Other) HasUseExpandedFormatActivityFlag() bool {
	if o != nil && o.UseExpandedFormatActivityFlag.IsSet() {
		return true
	}

	return false
}

// SetUseExpandedFormatActivityFlag gets a reference to the given NullableBool and assigns it to the UseExpandedFormatActivityFlag field.
func (o *Other) SetUseExpandedFormatActivityFlag(v bool) {
	o.UseExpandedFormatActivityFlag.Set(&v)
}

// SetUseExpandedFormatActivityFlagNil sets the value for UseExpandedFormatActivityFlag to be an explicit nil
func (o *Other) SetUseExpandedFormatActivityFlagNil() {
	o.UseExpandedFormatActivityFlag.Set(nil)
}

// UnsetUseExpandedFormatActivityFlag ensures that no value is present for UseExpandedFormatActivityFlag, not even an explicit nil
func (o *Other) UnsetUseExpandedFormatActivityFlag() {
	o.UseExpandedFormatActivityFlag.Unset()
}

// GetDisableZAdminLoginFlag returns the DisableZAdminLoginFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetDisableZAdminLoginFlag() bool {
	if o == nil || IsNil(o.DisableZAdminLoginFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableZAdminLoginFlag.Get()
}

// GetDisableZAdminLoginFlagOk returns a tuple with the DisableZAdminLoginFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetDisableZAdminLoginFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableZAdminLoginFlag.Get(), o.DisableZAdminLoginFlag.IsSet()
}

// HasDisableZAdminLoginFlag returns a boolean if a field has been set.
func (o *Other) HasDisableZAdminLoginFlag() bool {
	if o != nil && o.DisableZAdminLoginFlag.IsSet() {
		return true
	}

	return false
}

// SetDisableZAdminLoginFlag gets a reference to the given NullableBool and assigns it to the DisableZAdminLoginFlag field.
func (o *Other) SetDisableZAdminLoginFlag(v bool) {
	o.DisableZAdminLoginFlag.Set(&v)
}

// SetDisableZAdminLoginFlagNil sets the value for DisableZAdminLoginFlag to be an explicit nil
func (o *Other) SetDisableZAdminLoginFlagNil() {
	o.DisableZAdminLoginFlag.Set(nil)
}

// UnsetDisableZAdminLoginFlag ensures that no value is present for DisableZAdminLoginFlag, not even an explicit nil
func (o *Other) UnsetDisableZAdminLoginFlag() {
	o.DisableZAdminLoginFlag.Unset()
}

// GetLocale returns the Locale field value
func (o *Other) GetLocale() LocaleReference {
	if o == nil {
		var ret LocaleReference
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *Other) GetLocaleOk() (*LocaleReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *Other) SetLocale(v LocaleReference) {
	o.Locale = v
}

// GetUpdateMemberTimeZonesFlag returns the UpdateMemberTimeZonesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Other) GetUpdateMemberTimeZonesFlag() bool {
	if o == nil || IsNil(o.UpdateMemberTimeZonesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UpdateMemberTimeZonesFlag.Get()
}

// GetUpdateMemberTimeZonesFlagOk returns a tuple with the UpdateMemberTimeZonesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Other) GetUpdateMemberTimeZonesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateMemberTimeZonesFlag.Get(), o.UpdateMemberTimeZonesFlag.IsSet()
}

// HasUpdateMemberTimeZonesFlag returns a boolean if a field has been set.
func (o *Other) HasUpdateMemberTimeZonesFlag() bool {
	if o != nil && o.UpdateMemberTimeZonesFlag.IsSet() {
		return true
	}

	return false
}

// SetUpdateMemberTimeZonesFlag gets a reference to the given NullableBool and assigns it to the UpdateMemberTimeZonesFlag field.
func (o *Other) SetUpdateMemberTimeZonesFlag(v bool) {
	o.UpdateMemberTimeZonesFlag.Set(&v)
}

// SetUpdateMemberTimeZonesFlagNil sets the value for UpdateMemberTimeZonesFlag to be an explicit nil
func (o *Other) SetUpdateMemberTimeZonesFlagNil() {
	o.UpdateMemberTimeZonesFlag.Set(nil)
}

// UnsetUpdateMemberTimeZonesFlag ensures that no value is present for UpdateMemberTimeZonesFlag, not even an explicit nil
func (o *Other) UnsetUpdateMemberTimeZonesFlag() {
	o.UpdateMemberTimeZonesFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Other) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Other) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Other) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Other) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Other) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Other) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DefaultLdap) {
		toSerialize["defaultLdap"] = o.DefaultLdap
	}
	toSerialize["defaultFromAddress"] = o.DefaultFromAddress
	toSerialize["portalUrlOverride"] = o.PortalUrlOverride
	toSerialize["siteUrl"] = o.SiteUrl
	if !IsNil(o.LogoPath) {
		toSerialize["logoPath"] = o.LogoPath
	}
	if o.ContactSync.IsSet() {
		toSerialize["contactSync"] = o.ContactSync.Get()
	}
	toSerialize["serverTimeZone"] = o.ServerTimeZone
	toSerialize["defaultCalendar"] = o.DefaultCalendar
	toSerialize["defaultAddressFormat"] = o.DefaultAddressFormat
	if o.UseSslFlag.IsSet() {
		toSerialize["useSslFlag"] = o.UseSslFlag.Get()
	}
	if o.SyncLeadsFlag.IsSet() {
		toSerialize["syncLeadsFlag"] = o.SyncLeadsFlag.Get()
	}
	if o.IncludePortalLinkFlag.IsSet() {
		toSerialize["includePortalLinkFlag"] = o.IncludePortalLinkFlag.Get()
	}
	if o.UseExpandedFormatTimeFlag.IsSet() {
		toSerialize["useExpandedFormatTimeFlag"] = o.UseExpandedFormatTimeFlag.Get()
	}
	if o.UseExpandedFormatActivityFlag.IsSet() {
		toSerialize["useExpandedFormatActivityFlag"] = o.UseExpandedFormatActivityFlag.Get()
	}
	if o.DisableZAdminLoginFlag.IsSet() {
		toSerialize["disableZAdminLoginFlag"] = o.DisableZAdminLoginFlag.Get()
	}
	toSerialize["locale"] = o.Locale
	if o.UpdateMemberTimeZonesFlag.IsSet() {
		toSerialize["updateMemberTimeZonesFlag"] = o.UpdateMemberTimeZonesFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Other) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultFromAddress",
		"portalUrlOverride",
		"siteUrl",
		"serverTimeZone",
		"defaultCalendar",
		"defaultAddressFormat",
		"locale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOther := _Other{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOther)

	if err != nil {
		return err
	}

	*o = Other(varOther)

	return err
}

type NullableOther struct {
	value *Other
	isSet bool
}

func (v NullableOther) Get() *Other {
	return v.value
}

func (v *NullableOther) Set(val *Other) {
	v.value = val
	v.isSet = true
}

func (v NullableOther) IsSet() bool {
	return v.isSet
}

func (v *NullableOther) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOther(val *Other) *NullableOther {
	return &NullableOther{value: val, isSet: true}
}

func (v NullableOther) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOther) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
