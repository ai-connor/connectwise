/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PortalCalendar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortalCalendar{}

// PortalCalendar struct for PortalCalendar
type PortalCalendar struct {
	Id           *int32             `json:"id,omitempty"`
	WeekStart    NullableString     `json:"weekStart"`
	Adjust1Start *string            `json:"adjust1Start,omitempty"`
	Adjust1End   *string            `json:"adjust1End,omitempty"`
	Adjust1Hours NullableFloat64    `json:"adjust1Hours,omitempty"`
	Adjust2Start *string            `json:"adjust2Start,omitempty"`
	Adjust2End   *string            `json:"adjust2End,omitempty"`
	Adjust2Hours NullableFloat64    `json:"adjust2Hours,omitempty"`
	Adjust3Start *string            `json:"adjust3Start,omitempty"`
	Adjust3End   *string            `json:"adjust3End,omitempty"`
	Adjust3Hours NullableFloat64    `json:"adjust3Hours,omitempty"`
	Info         *map[string]string `json:"_info,omitempty"`
}

type _PortalCalendar PortalCalendar

// NewPortalCalendar instantiates a new PortalCalendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortalCalendar(weekStart NullableString) *PortalCalendar {
	this := PortalCalendar{}
	this.WeekStart = weekStart
	return &this
}

// NewPortalCalendarWithDefaults instantiates a new PortalCalendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortalCalendarWithDefaults() *PortalCalendar {
	this := PortalCalendar{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortalCalendar) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortalCalendar) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PortalCalendar) SetId(v int32) {
	o.Id = &v
}

// GetWeekStart returns the WeekStart field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PortalCalendar) GetWeekStart() string {
	if o == nil || o.WeekStart.Get() == nil {
		var ret string
		return ret
	}

	return *o.WeekStart.Get()
}

// GetWeekStartOk returns a tuple with the WeekStart field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalCalendar) GetWeekStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeekStart.Get(), o.WeekStart.IsSet()
}

// SetWeekStart sets field value
func (o *PortalCalendar) SetWeekStart(v string) {
	o.WeekStart.Set(&v)
}

// GetAdjust1Start returns the Adjust1Start field value if set, zero value otherwise.
func (o *PortalCalendar) GetAdjust1Start() string {
	if o == nil || IsNil(o.Adjust1Start) {
		var ret string
		return ret
	}
	return *o.Adjust1Start
}

// GetAdjust1StartOk returns a tuple with the Adjust1Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetAdjust1StartOk() (*string, bool) {
	if o == nil || IsNil(o.Adjust1Start) {
		return nil, false
	}
	return o.Adjust1Start, true
}

// HasAdjust1Start returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust1Start() bool {
	if o != nil && !IsNil(o.Adjust1Start) {
		return true
	}

	return false
}

// SetAdjust1Start gets a reference to the given string and assigns it to the Adjust1Start field.
func (o *PortalCalendar) SetAdjust1Start(v string) {
	o.Adjust1Start = &v
}

// GetAdjust1End returns the Adjust1End field value if set, zero value otherwise.
func (o *PortalCalendar) GetAdjust1End() string {
	if o == nil || IsNil(o.Adjust1End) {
		var ret string
		return ret
	}
	return *o.Adjust1End
}

// GetAdjust1EndOk returns a tuple with the Adjust1End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetAdjust1EndOk() (*string, bool) {
	if o == nil || IsNil(o.Adjust1End) {
		return nil, false
	}
	return o.Adjust1End, true
}

// HasAdjust1End returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust1End() bool {
	if o != nil && !IsNil(o.Adjust1End) {
		return true
	}

	return false
}

// SetAdjust1End gets a reference to the given string and assigns it to the Adjust1End field.
func (o *PortalCalendar) SetAdjust1End(v string) {
	o.Adjust1End = &v
}

// GetAdjust1Hours returns the Adjust1Hours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalCalendar) GetAdjust1Hours() float64 {
	if o == nil || IsNil(o.Adjust1Hours.Get()) {
		var ret float64
		return ret
	}
	return *o.Adjust1Hours.Get()
}

// GetAdjust1HoursOk returns a tuple with the Adjust1Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalCalendar) GetAdjust1HoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjust1Hours.Get(), o.Adjust1Hours.IsSet()
}

// HasAdjust1Hours returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust1Hours() bool {
	if o != nil && o.Adjust1Hours.IsSet() {
		return true
	}

	return false
}

// SetAdjust1Hours gets a reference to the given NullableFloat64 and assigns it to the Adjust1Hours field.
func (o *PortalCalendar) SetAdjust1Hours(v float64) {
	o.Adjust1Hours.Set(&v)
}

// SetAdjust1HoursNil sets the value for Adjust1Hours to be an explicit nil
func (o *PortalCalendar) SetAdjust1HoursNil() {
	o.Adjust1Hours.Set(nil)
}

// UnsetAdjust1Hours ensures that no value is present for Adjust1Hours, not even an explicit nil
func (o *PortalCalendar) UnsetAdjust1Hours() {
	o.Adjust1Hours.Unset()
}

// GetAdjust2Start returns the Adjust2Start field value if set, zero value otherwise.
func (o *PortalCalendar) GetAdjust2Start() string {
	if o == nil || IsNil(o.Adjust2Start) {
		var ret string
		return ret
	}
	return *o.Adjust2Start
}

// GetAdjust2StartOk returns a tuple with the Adjust2Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetAdjust2StartOk() (*string, bool) {
	if o == nil || IsNil(o.Adjust2Start) {
		return nil, false
	}
	return o.Adjust2Start, true
}

// HasAdjust2Start returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust2Start() bool {
	if o != nil && !IsNil(o.Adjust2Start) {
		return true
	}

	return false
}

// SetAdjust2Start gets a reference to the given string and assigns it to the Adjust2Start field.
func (o *PortalCalendar) SetAdjust2Start(v string) {
	o.Adjust2Start = &v
}

// GetAdjust2End returns the Adjust2End field value if set, zero value otherwise.
func (o *PortalCalendar) GetAdjust2End() string {
	if o == nil || IsNil(o.Adjust2End) {
		var ret string
		return ret
	}
	return *o.Adjust2End
}

// GetAdjust2EndOk returns a tuple with the Adjust2End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetAdjust2EndOk() (*string, bool) {
	if o == nil || IsNil(o.Adjust2End) {
		return nil, false
	}
	return o.Adjust2End, true
}

// HasAdjust2End returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust2End() bool {
	if o != nil && !IsNil(o.Adjust2End) {
		return true
	}

	return false
}

// SetAdjust2End gets a reference to the given string and assigns it to the Adjust2End field.
func (o *PortalCalendar) SetAdjust2End(v string) {
	o.Adjust2End = &v
}

// GetAdjust2Hours returns the Adjust2Hours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalCalendar) GetAdjust2Hours() float64 {
	if o == nil || IsNil(o.Adjust2Hours.Get()) {
		var ret float64
		return ret
	}
	return *o.Adjust2Hours.Get()
}

// GetAdjust2HoursOk returns a tuple with the Adjust2Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalCalendar) GetAdjust2HoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjust2Hours.Get(), o.Adjust2Hours.IsSet()
}

// HasAdjust2Hours returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust2Hours() bool {
	if o != nil && o.Adjust2Hours.IsSet() {
		return true
	}

	return false
}

// SetAdjust2Hours gets a reference to the given NullableFloat64 and assigns it to the Adjust2Hours field.
func (o *PortalCalendar) SetAdjust2Hours(v float64) {
	o.Adjust2Hours.Set(&v)
}

// SetAdjust2HoursNil sets the value for Adjust2Hours to be an explicit nil
func (o *PortalCalendar) SetAdjust2HoursNil() {
	o.Adjust2Hours.Set(nil)
}

// UnsetAdjust2Hours ensures that no value is present for Adjust2Hours, not even an explicit nil
func (o *PortalCalendar) UnsetAdjust2Hours() {
	o.Adjust2Hours.Unset()
}

// GetAdjust3Start returns the Adjust3Start field value if set, zero value otherwise.
func (o *PortalCalendar) GetAdjust3Start() string {
	if o == nil || IsNil(o.Adjust3Start) {
		var ret string
		return ret
	}
	return *o.Adjust3Start
}

// GetAdjust3StartOk returns a tuple with the Adjust3Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetAdjust3StartOk() (*string, bool) {
	if o == nil || IsNil(o.Adjust3Start) {
		return nil, false
	}
	return o.Adjust3Start, true
}

// HasAdjust3Start returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust3Start() bool {
	if o != nil && !IsNil(o.Adjust3Start) {
		return true
	}

	return false
}

// SetAdjust3Start gets a reference to the given string and assigns it to the Adjust3Start field.
func (o *PortalCalendar) SetAdjust3Start(v string) {
	o.Adjust3Start = &v
}

// GetAdjust3End returns the Adjust3End field value if set, zero value otherwise.
func (o *PortalCalendar) GetAdjust3End() string {
	if o == nil || IsNil(o.Adjust3End) {
		var ret string
		return ret
	}
	return *o.Adjust3End
}

// GetAdjust3EndOk returns a tuple with the Adjust3End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetAdjust3EndOk() (*string, bool) {
	if o == nil || IsNil(o.Adjust3End) {
		return nil, false
	}
	return o.Adjust3End, true
}

// HasAdjust3End returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust3End() bool {
	if o != nil && !IsNil(o.Adjust3End) {
		return true
	}

	return false
}

// SetAdjust3End gets a reference to the given string and assigns it to the Adjust3End field.
func (o *PortalCalendar) SetAdjust3End(v string) {
	o.Adjust3End = &v
}

// GetAdjust3Hours returns the Adjust3Hours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalCalendar) GetAdjust3Hours() float64 {
	if o == nil || IsNil(o.Adjust3Hours.Get()) {
		var ret float64
		return ret
	}
	return *o.Adjust3Hours.Get()
}

// GetAdjust3HoursOk returns a tuple with the Adjust3Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalCalendar) GetAdjust3HoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjust3Hours.Get(), o.Adjust3Hours.IsSet()
}

// HasAdjust3Hours returns a boolean if a field has been set.
func (o *PortalCalendar) HasAdjust3Hours() bool {
	if o != nil && o.Adjust3Hours.IsSet() {
		return true
	}

	return false
}

// SetAdjust3Hours gets a reference to the given NullableFloat64 and assigns it to the Adjust3Hours field.
func (o *PortalCalendar) SetAdjust3Hours(v float64) {
	o.Adjust3Hours.Set(&v)
}

// SetAdjust3HoursNil sets the value for Adjust3Hours to be an explicit nil
func (o *PortalCalendar) SetAdjust3HoursNil() {
	o.Adjust3Hours.Set(nil)
}

// UnsetAdjust3Hours ensures that no value is present for Adjust3Hours, not even an explicit nil
func (o *PortalCalendar) UnsetAdjust3Hours() {
	o.Adjust3Hours.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PortalCalendar) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalCalendar) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PortalCalendar) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PortalCalendar) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PortalCalendar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortalCalendar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["weekStart"] = o.WeekStart.Get()
	if !IsNil(o.Adjust1Start) {
		toSerialize["adjust1Start"] = o.Adjust1Start
	}
	if !IsNil(o.Adjust1End) {
		toSerialize["adjust1End"] = o.Adjust1End
	}
	if o.Adjust1Hours.IsSet() {
		toSerialize["adjust1Hours"] = o.Adjust1Hours.Get()
	}
	if !IsNil(o.Adjust2Start) {
		toSerialize["adjust2Start"] = o.Adjust2Start
	}
	if !IsNil(o.Adjust2End) {
		toSerialize["adjust2End"] = o.Adjust2End
	}
	if o.Adjust2Hours.IsSet() {
		toSerialize["adjust2Hours"] = o.Adjust2Hours.Get()
	}
	if !IsNil(o.Adjust3Start) {
		toSerialize["adjust3Start"] = o.Adjust3Start
	}
	if !IsNil(o.Adjust3End) {
		toSerialize["adjust3End"] = o.Adjust3End
	}
	if o.Adjust3Hours.IsSet() {
		toSerialize["adjust3Hours"] = o.Adjust3Hours.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *PortalCalendar) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"weekStart",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortalCalendar := _PortalCalendar{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortalCalendar)

	if err != nil {
		return err
	}

	*o = PortalCalendar(varPortalCalendar)

	return err
}

type NullablePortalCalendar struct {
	value *PortalCalendar
	isSet bool
}

func (v NullablePortalCalendar) Get() *PortalCalendar {
	return v.value
}

func (v *NullablePortalCalendar) Set(val *PortalCalendar) {
	v.value = val
	v.isSet = true
}

func (v NullablePortalCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullablePortalCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortalCalendar(val *PortalCalendar) *NullablePortalCalendar {
	return &NullablePortalCalendar{value: val, isSet: true}
}

func (v NullablePortalCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortalCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
