/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the PortalConfigurationPasswordEmailSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortalConfigurationPasswordEmailSetup{}

// PortalConfigurationPasswordEmailSetup struct for PortalConfigurationPasswordEmailSetup
type PortalConfigurationPasswordEmailSetup struct {
	Id                                   *int32       `json:"id,omitempty"`
	ValidPasswordEmailUseCustomEmailFlag NullableBool `json:"validPasswordEmailUseCustomEmailFlag,omitempty"`
	ValidPasswordEmailFromFirstName      *string      `json:"validPasswordEmailFromFirstName,omitempty"`
	ValidPasswordEmailFromLastName       *string      `json:"validPasswordEmailFromLastName,omitempty"`
	// Gets or sets             required when validPasswordEmailUseCustomEmailFlag is true.
	ValidPasswordEmailFromEmail            *string      `json:"validPasswordEmailFromEmail,omitempty"`
	ValidPasswordEmailSubject              *string      `json:"validPasswordEmailSubject,omitempty"`
	ValidPasswordEmailBody                 *string      `json:"validPasswordEmailBody,omitempty"`
	InvalidPasswordEmailUseCustomEmailFlag NullableBool `json:"invalidPasswordEmailUseCustomEmailFlag,omitempty"`
	InvalidPasswordEmailFromFirstName      *string      `json:"invalidPasswordEmailFromFirstName,omitempty"`
	InvalidPasswordEmailFromLastName       *string      `json:"invalidPasswordEmailFromLastName,omitempty"`
	// Gets or sets             required when invalidPasswordEmailUseCustomEmailFlag is true.
	InvalidPasswordEmailFromEmail *string            `json:"invalidPasswordEmailFromEmail,omitempty"`
	InvalidPasswordEmailSubject   *string            `json:"invalidPasswordEmailSubject,omitempty"`
	InvalidPasswordEmailBody      *string            `json:"invalidPasswordEmailBody,omitempty"`
	Info                          *map[string]string `json:"_info,omitempty"`
}

// NewPortalConfigurationPasswordEmailSetup instantiates a new PortalConfigurationPasswordEmailSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortalConfigurationPasswordEmailSetup() *PortalConfigurationPasswordEmailSetup {
	this := PortalConfigurationPasswordEmailSetup{}
	return &this
}

// NewPortalConfigurationPasswordEmailSetupWithDefaults instantiates a new PortalConfigurationPasswordEmailSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortalConfigurationPasswordEmailSetupWithDefaults() *PortalConfigurationPasswordEmailSetup {
	this := PortalConfigurationPasswordEmailSetup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PortalConfigurationPasswordEmailSetup) SetId(v int32) {
	o.Id = &v
}

// GetValidPasswordEmailUseCustomEmailFlag returns the ValidPasswordEmailUseCustomEmailFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailUseCustomEmailFlag() bool {
	if o == nil || IsNil(o.ValidPasswordEmailUseCustomEmailFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ValidPasswordEmailUseCustomEmailFlag.Get()
}

// GetValidPasswordEmailUseCustomEmailFlagOk returns a tuple with the ValidPasswordEmailUseCustomEmailFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailUseCustomEmailFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidPasswordEmailUseCustomEmailFlag.Get(), o.ValidPasswordEmailUseCustomEmailFlag.IsSet()
}

// HasValidPasswordEmailUseCustomEmailFlag returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasValidPasswordEmailUseCustomEmailFlag() bool {
	if o != nil && o.ValidPasswordEmailUseCustomEmailFlag.IsSet() {
		return true
	}

	return false
}

// SetValidPasswordEmailUseCustomEmailFlag gets a reference to the given NullableBool and assigns it to the ValidPasswordEmailUseCustomEmailFlag field.
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailUseCustomEmailFlag(v bool) {
	o.ValidPasswordEmailUseCustomEmailFlag.Set(&v)
}

// SetValidPasswordEmailUseCustomEmailFlagNil sets the value for ValidPasswordEmailUseCustomEmailFlag to be an explicit nil
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailUseCustomEmailFlagNil() {
	o.ValidPasswordEmailUseCustomEmailFlag.Set(nil)
}

// UnsetValidPasswordEmailUseCustomEmailFlag ensures that no value is present for ValidPasswordEmailUseCustomEmailFlag, not even an explicit nil
func (o *PortalConfigurationPasswordEmailSetup) UnsetValidPasswordEmailUseCustomEmailFlag() {
	o.ValidPasswordEmailUseCustomEmailFlag.Unset()
}

// GetValidPasswordEmailFromFirstName returns the ValidPasswordEmailFromFirstName field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailFromFirstName() string {
	if o == nil || IsNil(o.ValidPasswordEmailFromFirstName) {
		var ret string
		return ret
	}
	return *o.ValidPasswordEmailFromFirstName
}

// GetValidPasswordEmailFromFirstNameOk returns a tuple with the ValidPasswordEmailFromFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailFromFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPasswordEmailFromFirstName) {
		return nil, false
	}
	return o.ValidPasswordEmailFromFirstName, true
}

// HasValidPasswordEmailFromFirstName returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasValidPasswordEmailFromFirstName() bool {
	if o != nil && !IsNil(o.ValidPasswordEmailFromFirstName) {
		return true
	}

	return false
}

// SetValidPasswordEmailFromFirstName gets a reference to the given string and assigns it to the ValidPasswordEmailFromFirstName field.
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailFromFirstName(v string) {
	o.ValidPasswordEmailFromFirstName = &v
}

// GetValidPasswordEmailFromLastName returns the ValidPasswordEmailFromLastName field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailFromLastName() string {
	if o == nil || IsNil(o.ValidPasswordEmailFromLastName) {
		var ret string
		return ret
	}
	return *o.ValidPasswordEmailFromLastName
}

// GetValidPasswordEmailFromLastNameOk returns a tuple with the ValidPasswordEmailFromLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailFromLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPasswordEmailFromLastName) {
		return nil, false
	}
	return o.ValidPasswordEmailFromLastName, true
}

// HasValidPasswordEmailFromLastName returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasValidPasswordEmailFromLastName() bool {
	if o != nil && !IsNil(o.ValidPasswordEmailFromLastName) {
		return true
	}

	return false
}

// SetValidPasswordEmailFromLastName gets a reference to the given string and assigns it to the ValidPasswordEmailFromLastName field.
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailFromLastName(v string) {
	o.ValidPasswordEmailFromLastName = &v
}

// GetValidPasswordEmailFromEmail returns the ValidPasswordEmailFromEmail field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailFromEmail() string {
	if o == nil || IsNil(o.ValidPasswordEmailFromEmail) {
		var ret string
		return ret
	}
	return *o.ValidPasswordEmailFromEmail
}

// GetValidPasswordEmailFromEmailOk returns a tuple with the ValidPasswordEmailFromEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailFromEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPasswordEmailFromEmail) {
		return nil, false
	}
	return o.ValidPasswordEmailFromEmail, true
}

// HasValidPasswordEmailFromEmail returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasValidPasswordEmailFromEmail() bool {
	if o != nil && !IsNil(o.ValidPasswordEmailFromEmail) {
		return true
	}

	return false
}

// SetValidPasswordEmailFromEmail gets a reference to the given string and assigns it to the ValidPasswordEmailFromEmail field.
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailFromEmail(v string) {
	o.ValidPasswordEmailFromEmail = &v
}

// GetValidPasswordEmailSubject returns the ValidPasswordEmailSubject field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailSubject() string {
	if o == nil || IsNil(o.ValidPasswordEmailSubject) {
		var ret string
		return ret
	}
	return *o.ValidPasswordEmailSubject
}

// GetValidPasswordEmailSubjectOk returns a tuple with the ValidPasswordEmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPasswordEmailSubject) {
		return nil, false
	}
	return o.ValidPasswordEmailSubject, true
}

// HasValidPasswordEmailSubject returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasValidPasswordEmailSubject() bool {
	if o != nil && !IsNil(o.ValidPasswordEmailSubject) {
		return true
	}

	return false
}

// SetValidPasswordEmailSubject gets a reference to the given string and assigns it to the ValidPasswordEmailSubject field.
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailSubject(v string) {
	o.ValidPasswordEmailSubject = &v
}

// GetValidPasswordEmailBody returns the ValidPasswordEmailBody field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailBody() string {
	if o == nil || IsNil(o.ValidPasswordEmailBody) {
		var ret string
		return ret
	}
	return *o.ValidPasswordEmailBody
}

// GetValidPasswordEmailBodyOk returns a tuple with the ValidPasswordEmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetValidPasswordEmailBodyOk() (*string, bool) {
	if o == nil || IsNil(o.ValidPasswordEmailBody) {
		return nil, false
	}
	return o.ValidPasswordEmailBody, true
}

// HasValidPasswordEmailBody returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasValidPasswordEmailBody() bool {
	if o != nil && !IsNil(o.ValidPasswordEmailBody) {
		return true
	}

	return false
}

// SetValidPasswordEmailBody gets a reference to the given string and assigns it to the ValidPasswordEmailBody field.
func (o *PortalConfigurationPasswordEmailSetup) SetValidPasswordEmailBody(v string) {
	o.ValidPasswordEmailBody = &v
}

// GetInvalidPasswordEmailUseCustomEmailFlag returns the InvalidPasswordEmailUseCustomEmailFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailUseCustomEmailFlag() bool {
	if o == nil || IsNil(o.InvalidPasswordEmailUseCustomEmailFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvalidPasswordEmailUseCustomEmailFlag.Get()
}

// GetInvalidPasswordEmailUseCustomEmailFlagOk returns a tuple with the InvalidPasswordEmailUseCustomEmailFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailUseCustomEmailFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvalidPasswordEmailUseCustomEmailFlag.Get(), o.InvalidPasswordEmailUseCustomEmailFlag.IsSet()
}

// HasInvalidPasswordEmailUseCustomEmailFlag returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInvalidPasswordEmailUseCustomEmailFlag() bool {
	if o != nil && o.InvalidPasswordEmailUseCustomEmailFlag.IsSet() {
		return true
	}

	return false
}

// SetInvalidPasswordEmailUseCustomEmailFlag gets a reference to the given NullableBool and assigns it to the InvalidPasswordEmailUseCustomEmailFlag field.
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailUseCustomEmailFlag(v bool) {
	o.InvalidPasswordEmailUseCustomEmailFlag.Set(&v)
}

// SetInvalidPasswordEmailUseCustomEmailFlagNil sets the value for InvalidPasswordEmailUseCustomEmailFlag to be an explicit nil
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailUseCustomEmailFlagNil() {
	o.InvalidPasswordEmailUseCustomEmailFlag.Set(nil)
}

// UnsetInvalidPasswordEmailUseCustomEmailFlag ensures that no value is present for InvalidPasswordEmailUseCustomEmailFlag, not even an explicit nil
func (o *PortalConfigurationPasswordEmailSetup) UnsetInvalidPasswordEmailUseCustomEmailFlag() {
	o.InvalidPasswordEmailUseCustomEmailFlag.Unset()
}

// GetInvalidPasswordEmailFromFirstName returns the InvalidPasswordEmailFromFirstName field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailFromFirstName() string {
	if o == nil || IsNil(o.InvalidPasswordEmailFromFirstName) {
		var ret string
		return ret
	}
	return *o.InvalidPasswordEmailFromFirstName
}

// GetInvalidPasswordEmailFromFirstNameOk returns a tuple with the InvalidPasswordEmailFromFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailFromFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidPasswordEmailFromFirstName) {
		return nil, false
	}
	return o.InvalidPasswordEmailFromFirstName, true
}

// HasInvalidPasswordEmailFromFirstName returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInvalidPasswordEmailFromFirstName() bool {
	if o != nil && !IsNil(o.InvalidPasswordEmailFromFirstName) {
		return true
	}

	return false
}

// SetInvalidPasswordEmailFromFirstName gets a reference to the given string and assigns it to the InvalidPasswordEmailFromFirstName field.
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailFromFirstName(v string) {
	o.InvalidPasswordEmailFromFirstName = &v
}

// GetInvalidPasswordEmailFromLastName returns the InvalidPasswordEmailFromLastName field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailFromLastName() string {
	if o == nil || IsNil(o.InvalidPasswordEmailFromLastName) {
		var ret string
		return ret
	}
	return *o.InvalidPasswordEmailFromLastName
}

// GetInvalidPasswordEmailFromLastNameOk returns a tuple with the InvalidPasswordEmailFromLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailFromLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidPasswordEmailFromLastName) {
		return nil, false
	}
	return o.InvalidPasswordEmailFromLastName, true
}

// HasInvalidPasswordEmailFromLastName returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInvalidPasswordEmailFromLastName() bool {
	if o != nil && !IsNil(o.InvalidPasswordEmailFromLastName) {
		return true
	}

	return false
}

// SetInvalidPasswordEmailFromLastName gets a reference to the given string and assigns it to the InvalidPasswordEmailFromLastName field.
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailFromLastName(v string) {
	o.InvalidPasswordEmailFromLastName = &v
}

// GetInvalidPasswordEmailFromEmail returns the InvalidPasswordEmailFromEmail field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailFromEmail() string {
	if o == nil || IsNil(o.InvalidPasswordEmailFromEmail) {
		var ret string
		return ret
	}
	return *o.InvalidPasswordEmailFromEmail
}

// GetInvalidPasswordEmailFromEmailOk returns a tuple with the InvalidPasswordEmailFromEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailFromEmailOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidPasswordEmailFromEmail) {
		return nil, false
	}
	return o.InvalidPasswordEmailFromEmail, true
}

// HasInvalidPasswordEmailFromEmail returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInvalidPasswordEmailFromEmail() bool {
	if o != nil && !IsNil(o.InvalidPasswordEmailFromEmail) {
		return true
	}

	return false
}

// SetInvalidPasswordEmailFromEmail gets a reference to the given string and assigns it to the InvalidPasswordEmailFromEmail field.
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailFromEmail(v string) {
	o.InvalidPasswordEmailFromEmail = &v
}

// GetInvalidPasswordEmailSubject returns the InvalidPasswordEmailSubject field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailSubject() string {
	if o == nil || IsNil(o.InvalidPasswordEmailSubject) {
		var ret string
		return ret
	}
	return *o.InvalidPasswordEmailSubject
}

// GetInvalidPasswordEmailSubjectOk returns a tuple with the InvalidPasswordEmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidPasswordEmailSubject) {
		return nil, false
	}
	return o.InvalidPasswordEmailSubject, true
}

// HasInvalidPasswordEmailSubject returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInvalidPasswordEmailSubject() bool {
	if o != nil && !IsNil(o.InvalidPasswordEmailSubject) {
		return true
	}

	return false
}

// SetInvalidPasswordEmailSubject gets a reference to the given string and assigns it to the InvalidPasswordEmailSubject field.
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailSubject(v string) {
	o.InvalidPasswordEmailSubject = &v
}

// GetInvalidPasswordEmailBody returns the InvalidPasswordEmailBody field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailBody() string {
	if o == nil || IsNil(o.InvalidPasswordEmailBody) {
		var ret string
		return ret
	}
	return *o.InvalidPasswordEmailBody
}

// GetInvalidPasswordEmailBodyOk returns a tuple with the InvalidPasswordEmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetInvalidPasswordEmailBodyOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidPasswordEmailBody) {
		return nil, false
	}
	return o.InvalidPasswordEmailBody, true
}

// HasInvalidPasswordEmailBody returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInvalidPasswordEmailBody() bool {
	if o != nil && !IsNil(o.InvalidPasswordEmailBody) {
		return true
	}

	return false
}

// SetInvalidPasswordEmailBody gets a reference to the given string and assigns it to the InvalidPasswordEmailBody field.
func (o *PortalConfigurationPasswordEmailSetup) SetInvalidPasswordEmailBody(v string) {
	o.InvalidPasswordEmailBody = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PortalConfigurationPasswordEmailSetup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfigurationPasswordEmailSetup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PortalConfigurationPasswordEmailSetup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PortalConfigurationPasswordEmailSetup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PortalConfigurationPasswordEmailSetup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortalConfigurationPasswordEmailSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ValidPasswordEmailUseCustomEmailFlag.IsSet() {
		toSerialize["validPasswordEmailUseCustomEmailFlag"] = o.ValidPasswordEmailUseCustomEmailFlag.Get()
	}
	if !IsNil(o.ValidPasswordEmailFromFirstName) {
		toSerialize["validPasswordEmailFromFirstName"] = o.ValidPasswordEmailFromFirstName
	}
	if !IsNil(o.ValidPasswordEmailFromLastName) {
		toSerialize["validPasswordEmailFromLastName"] = o.ValidPasswordEmailFromLastName
	}
	if !IsNil(o.ValidPasswordEmailFromEmail) {
		toSerialize["validPasswordEmailFromEmail"] = o.ValidPasswordEmailFromEmail
	}
	if !IsNil(o.ValidPasswordEmailSubject) {
		toSerialize["validPasswordEmailSubject"] = o.ValidPasswordEmailSubject
	}
	if !IsNil(o.ValidPasswordEmailBody) {
		toSerialize["validPasswordEmailBody"] = o.ValidPasswordEmailBody
	}
	if o.InvalidPasswordEmailUseCustomEmailFlag.IsSet() {
		toSerialize["invalidPasswordEmailUseCustomEmailFlag"] = o.InvalidPasswordEmailUseCustomEmailFlag.Get()
	}
	if !IsNil(o.InvalidPasswordEmailFromFirstName) {
		toSerialize["invalidPasswordEmailFromFirstName"] = o.InvalidPasswordEmailFromFirstName
	}
	if !IsNil(o.InvalidPasswordEmailFromLastName) {
		toSerialize["invalidPasswordEmailFromLastName"] = o.InvalidPasswordEmailFromLastName
	}
	if !IsNil(o.InvalidPasswordEmailFromEmail) {
		toSerialize["invalidPasswordEmailFromEmail"] = o.InvalidPasswordEmailFromEmail
	}
	if !IsNil(o.InvalidPasswordEmailSubject) {
		toSerialize["invalidPasswordEmailSubject"] = o.InvalidPasswordEmailSubject
	}
	if !IsNil(o.InvalidPasswordEmailBody) {
		toSerialize["invalidPasswordEmailBody"] = o.InvalidPasswordEmailBody
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullablePortalConfigurationPasswordEmailSetup struct {
	value *PortalConfigurationPasswordEmailSetup
	isSet bool
}

func (v NullablePortalConfigurationPasswordEmailSetup) Get() *PortalConfigurationPasswordEmailSetup {
	return v.value
}

func (v *NullablePortalConfigurationPasswordEmailSetup) Set(val *PortalConfigurationPasswordEmailSetup) {
	v.value = val
	v.isSet = true
}

func (v NullablePortalConfigurationPasswordEmailSetup) IsSet() bool {
	return v.isSet
}

func (v *NullablePortalConfigurationPasswordEmailSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortalConfigurationPasswordEmailSetup(val *PortalConfigurationPasswordEmailSetup) *NullablePortalConfigurationPasswordEmailSetup {
	return &NullablePortalConfigurationPasswordEmailSetup{value: val, isSet: true}
}

func (v NullablePortalConfigurationPasswordEmailSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortalConfigurationPasswordEmailSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
