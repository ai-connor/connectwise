/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PricingBreak type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PricingBreak{}

// PricingBreak struct for PricingBreak
type PricingBreak struct {
	Id            *int32             `json:"id,omitempty"`
	DetailId      NullableInt32      `json:"detailId,omitempty"`
	Amount        NullableFloat64    `json:"amount,omitempty"`
	QuantityStart NullableFloat64    `json:"quantityStart"`
	QuantityEnd   NullableFloat64    `json:"quantityEnd,omitempty"`
	Unlimited     *bool              `json:"unlimited,omitempty"`
	PriceMethod   NullableString     `json:"priceMethod"`
	Info          *map[string]string `json:"_info,omitempty"`
}

type _PricingBreak PricingBreak

// NewPricingBreak instantiates a new PricingBreak object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPricingBreak(quantityStart NullableFloat64, priceMethod NullableString) *PricingBreak {
	this := PricingBreak{}
	this.QuantityStart = quantityStart
	this.PriceMethod = priceMethod
	return &this
}

// NewPricingBreakWithDefaults instantiates a new PricingBreak object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPricingBreakWithDefaults() *PricingBreak {
	this := PricingBreak{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PricingBreak) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingBreak) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PricingBreak) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PricingBreak) SetId(v int32) {
	o.Id = &v
}

// GetDetailId returns the DetailId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PricingBreak) GetDetailId() int32 {
	if o == nil || IsNil(o.DetailId.Get()) {
		var ret int32
		return ret
	}
	return *o.DetailId.Get()
}

// GetDetailIdOk returns a tuple with the DetailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PricingBreak) GetDetailIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetailId.Get(), o.DetailId.IsSet()
}

// HasDetailId returns a boolean if a field has been set.
func (o *PricingBreak) HasDetailId() bool {
	if o != nil && o.DetailId.IsSet() {
		return true
	}

	return false
}

// SetDetailId gets a reference to the given NullableInt32 and assigns it to the DetailId field.
func (o *PricingBreak) SetDetailId(v int32) {
	o.DetailId.Set(&v)
}

// SetDetailIdNil sets the value for DetailId to be an explicit nil
func (o *PricingBreak) SetDetailIdNil() {
	o.DetailId.Set(nil)
}

// UnsetDetailId ensures that no value is present for DetailId, not even an explicit nil
func (o *PricingBreak) UnsetDetailId() {
	o.DetailId.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PricingBreak) GetAmount() float64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret float64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PricingBreak) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *PricingBreak) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat64 and assigns it to the Amount field.
func (o *PricingBreak) SetAmount(v float64) {
	o.Amount.Set(&v)
}

// SetAmountNil sets the value for Amount to be an explicit nil
func (o *PricingBreak) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *PricingBreak) UnsetAmount() {
	o.Amount.Unset()
}

// GetQuantityStart returns the QuantityStart field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *PricingBreak) GetQuantityStart() float64 {
	if o == nil || o.QuantityStart.Get() == nil {
		var ret float64
		return ret
	}

	return *o.QuantityStart.Get()
}

// GetQuantityStartOk returns a tuple with the QuantityStart field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PricingBreak) GetQuantityStartOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityStart.Get(), o.QuantityStart.IsSet()
}

// SetQuantityStart sets field value
func (o *PricingBreak) SetQuantityStart(v float64) {
	o.QuantityStart.Set(&v)
}

// GetQuantityEnd returns the QuantityEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PricingBreak) GetQuantityEnd() float64 {
	if o == nil || IsNil(o.QuantityEnd.Get()) {
		var ret float64
		return ret
	}
	return *o.QuantityEnd.Get()
}

// GetQuantityEndOk returns a tuple with the QuantityEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PricingBreak) GetQuantityEndOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityEnd.Get(), o.QuantityEnd.IsSet()
}

// HasQuantityEnd returns a boolean if a field has been set.
func (o *PricingBreak) HasQuantityEnd() bool {
	if o != nil && o.QuantityEnd.IsSet() {
		return true
	}

	return false
}

// SetQuantityEnd gets a reference to the given NullableFloat64 and assigns it to the QuantityEnd field.
func (o *PricingBreak) SetQuantityEnd(v float64) {
	o.QuantityEnd.Set(&v)
}

// SetQuantityEndNil sets the value for QuantityEnd to be an explicit nil
func (o *PricingBreak) SetQuantityEndNil() {
	o.QuantityEnd.Set(nil)
}

// UnsetQuantityEnd ensures that no value is present for QuantityEnd, not even an explicit nil
func (o *PricingBreak) UnsetQuantityEnd() {
	o.QuantityEnd.Unset()
}

// GetUnlimited returns the Unlimited field value if set, zero value otherwise.
func (o *PricingBreak) GetUnlimited() bool {
	if o == nil || IsNil(o.Unlimited) {
		var ret bool
		return ret
	}
	return *o.Unlimited
}

// GetUnlimitedOk returns a tuple with the Unlimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingBreak) GetUnlimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unlimited) {
		return nil, false
	}
	return o.Unlimited, true
}

// HasUnlimited returns a boolean if a field has been set.
func (o *PricingBreak) HasUnlimited() bool {
	if o != nil && !IsNil(o.Unlimited) {
		return true
	}

	return false
}

// SetUnlimited gets a reference to the given bool and assigns it to the Unlimited field.
func (o *PricingBreak) SetUnlimited(v bool) {
	o.Unlimited = &v
}

// GetPriceMethod returns the PriceMethod field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PricingBreak) GetPriceMethod() string {
	if o == nil || o.PriceMethod.Get() == nil {
		var ret string
		return ret
	}

	return *o.PriceMethod.Get()
}

// GetPriceMethodOk returns a tuple with the PriceMethod field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PricingBreak) GetPriceMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceMethod.Get(), o.PriceMethod.IsSet()
}

// SetPriceMethod sets field value
func (o *PricingBreak) SetPriceMethod(v string) {
	o.PriceMethod.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PricingBreak) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PricingBreak) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PricingBreak) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PricingBreak) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PricingBreak) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PricingBreak) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.DetailId.IsSet() {
		toSerialize["detailId"] = o.DetailId.Get()
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	toSerialize["quantityStart"] = o.QuantityStart.Get()
	if o.QuantityEnd.IsSet() {
		toSerialize["quantityEnd"] = o.QuantityEnd.Get()
	}
	if !IsNil(o.Unlimited) {
		toSerialize["unlimited"] = o.Unlimited
	}
	toSerialize["priceMethod"] = o.PriceMethod.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *PricingBreak) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantityStart",
		"priceMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPricingBreak := _PricingBreak{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPricingBreak)

	if err != nil {
		return err
	}

	*o = PricingBreak(varPricingBreak)

	return err
}

type NullablePricingBreak struct {
	value *PricingBreak
	isSet bool
}

func (v NullablePricingBreak) Get() *PricingBreak {
	return v.value
}

func (v *NullablePricingBreak) Set(val *PricingBreak) {
	v.value = val
	v.isSet = true
}

func (v NullablePricingBreak) IsSet() bool {
	return v.isSet
}

func (v *NullablePricingBreak) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricingBreak(val *PricingBreak) *NullablePricingBreak {
	return &NullablePricingBreak{value: val, isSet: true}
}

func (v NullablePricingBreak) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricingBreak) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
