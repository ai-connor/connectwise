/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the PriorityInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriorityInfo{}

// PriorityInfo struct for PriorityInfo
type PriorityInfo struct {
	Id               *int32             `json:"id,omitempty"`
	Name             *string            `json:"name,omitempty"`
	Color            NullableString     `json:"color,omitempty"`
	SortOrder        NullableInt32      `json:"sortOrder,omitempty"`
	DefaultFlag      NullableBool       `json:"defaultFlag,omitempty"`
	ImageLink        *string            `json:"imageLink,omitempty"`
	UrgencySortOrder *string            `json:"urgencySortOrder,omitempty"`
	Level            NullableString     `json:"level,omitempty"`
	Info             *map[string]string `json:"_info,omitempty"`
}

// NewPriorityInfo instantiates a new PriorityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriorityInfo() *PriorityInfo {
	this := PriorityInfo{}
	return &this
}

// NewPriorityInfoWithDefaults instantiates a new PriorityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriorityInfoWithDefaults() *PriorityInfo {
	this := PriorityInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PriorityInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PriorityInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PriorityInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PriorityInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PriorityInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PriorityInfo) SetName(v string) {
	o.Name = &v
}

// GetColor returns the Color field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriorityInfo) GetColor() string {
	if o == nil || IsNil(o.Color.Get()) {
		var ret string
		return ret
	}
	return *o.Color.Get()
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriorityInfo) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Color.Get(), o.Color.IsSet()
}

// HasColor returns a boolean if a field has been set.
func (o *PriorityInfo) HasColor() bool {
	if o != nil && o.Color.IsSet() {
		return true
	}

	return false
}

// SetColor gets a reference to the given NullableString and assigns it to the Color field.
func (o *PriorityInfo) SetColor(v string) {
	o.Color.Set(&v)
}

// SetColorNil sets the value for Color to be an explicit nil
func (o *PriorityInfo) SetColorNil() {
	o.Color.Set(nil)
}

// UnsetColor ensures that no value is present for Color, not even an explicit nil
func (o *PriorityInfo) UnsetColor() {
	o.Color.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriorityInfo) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriorityInfo) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *PriorityInfo) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *PriorityInfo) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *PriorityInfo) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *PriorityInfo) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriorityInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriorityInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *PriorityInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *PriorityInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *PriorityInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *PriorityInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetImageLink returns the ImageLink field value if set, zero value otherwise.
func (o *PriorityInfo) GetImageLink() string {
	if o == nil || IsNil(o.ImageLink) {
		var ret string
		return ret
	}
	return *o.ImageLink
}

// GetImageLinkOk returns a tuple with the ImageLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityInfo) GetImageLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ImageLink) {
		return nil, false
	}
	return o.ImageLink, true
}

// HasImageLink returns a boolean if a field has been set.
func (o *PriorityInfo) HasImageLink() bool {
	if o != nil && !IsNil(o.ImageLink) {
		return true
	}

	return false
}

// SetImageLink gets a reference to the given string and assigns it to the ImageLink field.
func (o *PriorityInfo) SetImageLink(v string) {
	o.ImageLink = &v
}

// GetUrgencySortOrder returns the UrgencySortOrder field value if set, zero value otherwise.
func (o *PriorityInfo) GetUrgencySortOrder() string {
	if o == nil || IsNil(o.UrgencySortOrder) {
		var ret string
		return ret
	}
	return *o.UrgencySortOrder
}

// GetUrgencySortOrderOk returns a tuple with the UrgencySortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityInfo) GetUrgencySortOrderOk() (*string, bool) {
	if o == nil || IsNil(o.UrgencySortOrder) {
		return nil, false
	}
	return o.UrgencySortOrder, true
}

// HasUrgencySortOrder returns a boolean if a field has been set.
func (o *PriorityInfo) HasUrgencySortOrder() bool {
	if o != nil && !IsNil(o.UrgencySortOrder) {
		return true
	}

	return false
}

// SetUrgencySortOrder gets a reference to the given string and assigns it to the UrgencySortOrder field.
func (o *PriorityInfo) SetUrgencySortOrder(v string) {
	o.UrgencySortOrder = &v
}

// GetLevel returns the Level field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriorityInfo) GetLevel() string {
	if o == nil || IsNil(o.Level.Get()) {
		var ret string
		return ret
	}
	return *o.Level.Get()
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriorityInfo) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Level.Get(), o.Level.IsSet()
}

// HasLevel returns a boolean if a field has been set.
func (o *PriorityInfo) HasLevel() bool {
	if o != nil && o.Level.IsSet() {
		return true
	}

	return false
}

// SetLevel gets a reference to the given NullableString and assigns it to the Level field.
func (o *PriorityInfo) SetLevel(v string) {
	o.Level.Set(&v)
}

// SetLevelNil sets the value for Level to be an explicit nil
func (o *PriorityInfo) SetLevelNil() {
	o.Level.Set(nil)
}

// UnsetLevel ensures that no value is present for Level, not even an explicit nil
func (o *PriorityInfo) UnsetLevel() {
	o.Level.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PriorityInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriorityInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PriorityInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PriorityInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PriorityInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriorityInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Color.IsSet() {
		toSerialize["color"] = o.Color.Get()
	}
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.ImageLink) {
		toSerialize["imageLink"] = o.ImageLink
	}
	if !IsNil(o.UrgencySortOrder) {
		toSerialize["urgencySortOrder"] = o.UrgencySortOrder
	}
	if o.Level.IsSet() {
		toSerialize["level"] = o.Level.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullablePriorityInfo struct {
	value *PriorityInfo
	isSet bool
}

func (v NullablePriorityInfo) Get() *PriorityInfo {
	return v.value
}

func (v *NullablePriorityInfo) Set(val *PriorityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePriorityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePriorityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriorityInfo(val *PriorityInfo) *NullablePriorityInfo {
	return &NullablePriorityInfo{value: val, isSet: true}
}

func (v NullablePriorityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriorityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
