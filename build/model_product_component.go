/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProductComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductComponent{}

// ProductComponent struct for ProductComponent
type ProductComponent struct {
	Id *int32 `json:"id,omitempty"`
	//  Required On Updates;
	SequenceNumber         NullableInt32         `json:"sequenceNumber,omitempty"`
	Quantity               NullableFloat64       `json:"quantity"`
	CatalogItem            CatalogItemReference  `json:"catalogItem"`
	HidePriceFlag          NullableBool          `json:"hidePriceFlag,omitempty"`
	HideItemIdentifierFlag NullableBool          `json:"hideItemIdentifierFlag,omitempty"`
	HideDescriptionFlag    NullableBool          `json:"hideDescriptionFlag,omitempty"`
	HideQuantityFlag       NullableBool          `json:"hideQuantityFlag,omitempty"`
	HideExtendedPriceFlag  NullableBool          `json:"hideExtendedPriceFlag,omitempty"`
	Vendor                 *CompanyReference     `json:"vendor,omitempty"`
	ParentProductItem      *ProductItemReference `json:"parentProductItem,omitempty"`
	ProductItem            *ProductItemReference `json:"productItem,omitempty"`
	Price                  NullableFloat64       `json:"price,omitempty"`
	Cost                   NullableFloat64       `json:"cost,omitempty"`
	Info                   *map[string]string    `json:"_info,omitempty"`
}

type _ProductComponent ProductComponent

// NewProductComponent instantiates a new ProductComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductComponent(quantity NullableFloat64, catalogItem CatalogItemReference) *ProductComponent {
	this := ProductComponent{}
	this.Quantity = quantity
	this.CatalogItem = catalogItem
	return &this
}

// NewProductComponentWithDefaults instantiates a new ProductComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductComponentWithDefaults() *ProductComponent {
	this := ProductComponent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductComponent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductComponent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductComponent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProductComponent) SetId(v int32) {
	o.Id = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetSequenceNumber() int32 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetSequenceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ProductComponent) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableInt32 and assigns it to the SequenceNumber field.
func (o *ProductComponent) SetSequenceNumber(v int32) {
	o.SequenceNumber.Set(&v)
}

// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *ProductComponent) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *ProductComponent) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetQuantity returns the Quantity field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *ProductComponent) GetQuantity() float64 {
	if o == nil || o.Quantity.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// SetQuantity sets field value
func (o *ProductComponent) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}

// GetCatalogItem returns the CatalogItem field value
func (o *ProductComponent) GetCatalogItem() CatalogItemReference {
	if o == nil {
		var ret CatalogItemReference
		return ret
	}

	return o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value
// and a boolean to check if the value has been set.
func (o *ProductComponent) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogItem, true
}

// SetCatalogItem sets field value
func (o *ProductComponent) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = v
}

// GetHidePriceFlag returns the HidePriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetHidePriceFlag() bool {
	if o == nil || IsNil(o.HidePriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HidePriceFlag.Get()
}

// GetHidePriceFlagOk returns a tuple with the HidePriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetHidePriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HidePriceFlag.Get(), o.HidePriceFlag.IsSet()
}

// HasHidePriceFlag returns a boolean if a field has been set.
func (o *ProductComponent) HasHidePriceFlag() bool {
	if o != nil && o.HidePriceFlag.IsSet() {
		return true
	}

	return false
}

// SetHidePriceFlag gets a reference to the given NullableBool and assigns it to the HidePriceFlag field.
func (o *ProductComponent) SetHidePriceFlag(v bool) {
	o.HidePriceFlag.Set(&v)
}

// SetHidePriceFlagNil sets the value for HidePriceFlag to be an explicit nil
func (o *ProductComponent) SetHidePriceFlagNil() {
	o.HidePriceFlag.Set(nil)
}

// UnsetHidePriceFlag ensures that no value is present for HidePriceFlag, not even an explicit nil
func (o *ProductComponent) UnsetHidePriceFlag() {
	o.HidePriceFlag.Unset()
}

// GetHideItemIdentifierFlag returns the HideItemIdentifierFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetHideItemIdentifierFlag() bool {
	if o == nil || IsNil(o.HideItemIdentifierFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideItemIdentifierFlag.Get()
}

// GetHideItemIdentifierFlagOk returns a tuple with the HideItemIdentifierFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetHideItemIdentifierFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideItemIdentifierFlag.Get(), o.HideItemIdentifierFlag.IsSet()
}

// HasHideItemIdentifierFlag returns a boolean if a field has been set.
func (o *ProductComponent) HasHideItemIdentifierFlag() bool {
	if o != nil && o.HideItemIdentifierFlag.IsSet() {
		return true
	}

	return false
}

// SetHideItemIdentifierFlag gets a reference to the given NullableBool and assigns it to the HideItemIdentifierFlag field.
func (o *ProductComponent) SetHideItemIdentifierFlag(v bool) {
	o.HideItemIdentifierFlag.Set(&v)
}

// SetHideItemIdentifierFlagNil sets the value for HideItemIdentifierFlag to be an explicit nil
func (o *ProductComponent) SetHideItemIdentifierFlagNil() {
	o.HideItemIdentifierFlag.Set(nil)
}

// UnsetHideItemIdentifierFlag ensures that no value is present for HideItemIdentifierFlag, not even an explicit nil
func (o *ProductComponent) UnsetHideItemIdentifierFlag() {
	o.HideItemIdentifierFlag.Unset()
}

// GetHideDescriptionFlag returns the HideDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetHideDescriptionFlag() bool {
	if o == nil || IsNil(o.HideDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideDescriptionFlag.Get()
}

// GetHideDescriptionFlagOk returns a tuple with the HideDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetHideDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideDescriptionFlag.Get(), o.HideDescriptionFlag.IsSet()
}

// HasHideDescriptionFlag returns a boolean if a field has been set.
func (o *ProductComponent) HasHideDescriptionFlag() bool {
	if o != nil && o.HideDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetHideDescriptionFlag gets a reference to the given NullableBool and assigns it to the HideDescriptionFlag field.
func (o *ProductComponent) SetHideDescriptionFlag(v bool) {
	o.HideDescriptionFlag.Set(&v)
}

// SetHideDescriptionFlagNil sets the value for HideDescriptionFlag to be an explicit nil
func (o *ProductComponent) SetHideDescriptionFlagNil() {
	o.HideDescriptionFlag.Set(nil)
}

// UnsetHideDescriptionFlag ensures that no value is present for HideDescriptionFlag, not even an explicit nil
func (o *ProductComponent) UnsetHideDescriptionFlag() {
	o.HideDescriptionFlag.Unset()
}

// GetHideQuantityFlag returns the HideQuantityFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetHideQuantityFlag() bool {
	if o == nil || IsNil(o.HideQuantityFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideQuantityFlag.Get()
}

// GetHideQuantityFlagOk returns a tuple with the HideQuantityFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetHideQuantityFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideQuantityFlag.Get(), o.HideQuantityFlag.IsSet()
}

// HasHideQuantityFlag returns a boolean if a field has been set.
func (o *ProductComponent) HasHideQuantityFlag() bool {
	if o != nil && o.HideQuantityFlag.IsSet() {
		return true
	}

	return false
}

// SetHideQuantityFlag gets a reference to the given NullableBool and assigns it to the HideQuantityFlag field.
func (o *ProductComponent) SetHideQuantityFlag(v bool) {
	o.HideQuantityFlag.Set(&v)
}

// SetHideQuantityFlagNil sets the value for HideQuantityFlag to be an explicit nil
func (o *ProductComponent) SetHideQuantityFlagNil() {
	o.HideQuantityFlag.Set(nil)
}

// UnsetHideQuantityFlag ensures that no value is present for HideQuantityFlag, not even an explicit nil
func (o *ProductComponent) UnsetHideQuantityFlag() {
	o.HideQuantityFlag.Unset()
}

// GetHideExtendedPriceFlag returns the HideExtendedPriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetHideExtendedPriceFlag() bool {
	if o == nil || IsNil(o.HideExtendedPriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideExtendedPriceFlag.Get()
}

// GetHideExtendedPriceFlagOk returns a tuple with the HideExtendedPriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetHideExtendedPriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideExtendedPriceFlag.Get(), o.HideExtendedPriceFlag.IsSet()
}

// HasHideExtendedPriceFlag returns a boolean if a field has been set.
func (o *ProductComponent) HasHideExtendedPriceFlag() bool {
	if o != nil && o.HideExtendedPriceFlag.IsSet() {
		return true
	}

	return false
}

// SetHideExtendedPriceFlag gets a reference to the given NullableBool and assigns it to the HideExtendedPriceFlag field.
func (o *ProductComponent) SetHideExtendedPriceFlag(v bool) {
	o.HideExtendedPriceFlag.Set(&v)
}

// SetHideExtendedPriceFlagNil sets the value for HideExtendedPriceFlag to be an explicit nil
func (o *ProductComponent) SetHideExtendedPriceFlagNil() {
	o.HideExtendedPriceFlag.Set(nil)
}

// UnsetHideExtendedPriceFlag ensures that no value is present for HideExtendedPriceFlag, not even an explicit nil
func (o *ProductComponent) UnsetHideExtendedPriceFlag() {
	o.HideExtendedPriceFlag.Unset()
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *ProductComponent) GetVendor() CompanyReference {
	if o == nil || IsNil(o.Vendor) {
		var ret CompanyReference
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductComponent) GetVendorOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *ProductComponent) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given CompanyReference and assigns it to the Vendor field.
func (o *ProductComponent) SetVendor(v CompanyReference) {
	o.Vendor = &v
}

// GetParentProductItem returns the ParentProductItem field value if set, zero value otherwise.
func (o *ProductComponent) GetParentProductItem() ProductItemReference {
	if o == nil || IsNil(o.ParentProductItem) {
		var ret ProductItemReference
		return ret
	}
	return *o.ParentProductItem
}

// GetParentProductItemOk returns a tuple with the ParentProductItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductComponent) GetParentProductItemOk() (*ProductItemReference, bool) {
	if o == nil || IsNil(o.ParentProductItem) {
		return nil, false
	}
	return o.ParentProductItem, true
}

// HasParentProductItem returns a boolean if a field has been set.
func (o *ProductComponent) HasParentProductItem() bool {
	if o != nil && !IsNil(o.ParentProductItem) {
		return true
	}

	return false
}

// SetParentProductItem gets a reference to the given ProductItemReference and assigns it to the ParentProductItem field.
func (o *ProductComponent) SetParentProductItem(v ProductItemReference) {
	o.ParentProductItem = &v
}

// GetProductItem returns the ProductItem field value if set, zero value otherwise.
func (o *ProductComponent) GetProductItem() ProductItemReference {
	if o == nil || IsNil(o.ProductItem) {
		var ret ProductItemReference
		return ret
	}
	return *o.ProductItem
}

// GetProductItemOk returns a tuple with the ProductItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductComponent) GetProductItemOk() (*ProductItemReference, bool) {
	if o == nil || IsNil(o.ProductItem) {
		return nil, false
	}
	return o.ProductItem, true
}

// HasProductItem returns a boolean if a field has been set.
func (o *ProductComponent) HasProductItem() bool {
	if o != nil && !IsNil(o.ProductItem) {
		return true
	}

	return false
}

// SetProductItem gets a reference to the given ProductItemReference and assigns it to the ProductItem field.
func (o *ProductComponent) SetProductItem(v ProductItemReference) {
	o.ProductItem = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductComponent) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *ProductComponent) SetPrice(v float64) {
	o.Price.Set(&v)
}

// SetPriceNil sets the value for Price to be an explicit nil
func (o *ProductComponent) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ProductComponent) UnsetPrice() {
	o.Price.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductComponent) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductComponent) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *ProductComponent) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *ProductComponent) SetCost(v float64) {
	o.Cost.Set(&v)
}

// SetCostNil sets the value for Cost to be an explicit nil
func (o *ProductComponent) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *ProductComponent) UnsetCost() {
	o.Cost.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProductComponent) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductComponent) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProductComponent) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProductComponent) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ProductComponent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	toSerialize["quantity"] = o.Quantity.Get()
	toSerialize["catalogItem"] = o.CatalogItem
	if o.HidePriceFlag.IsSet() {
		toSerialize["hidePriceFlag"] = o.HidePriceFlag.Get()
	}
	if o.HideItemIdentifierFlag.IsSet() {
		toSerialize["hideItemIdentifierFlag"] = o.HideItemIdentifierFlag.Get()
	}
	if o.HideDescriptionFlag.IsSet() {
		toSerialize["hideDescriptionFlag"] = o.HideDescriptionFlag.Get()
	}
	if o.HideQuantityFlag.IsSet() {
		toSerialize["hideQuantityFlag"] = o.HideQuantityFlag.Get()
	}
	if o.HideExtendedPriceFlag.IsSet() {
		toSerialize["hideExtendedPriceFlag"] = o.HideExtendedPriceFlag.Get()
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.ParentProductItem) {
		toSerialize["parentProductItem"] = o.ParentProductItem
	}
	if !IsNil(o.ProductItem) {
		toSerialize["productItem"] = o.ProductItem
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ProductComponent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"catalogItem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductComponent := _ProductComponent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductComponent)

	if err != nil {
		return err
	}

	*o = ProductComponent(varProductComponent)

	return err
}

type NullableProductComponent struct {
	value *ProductComponent
	isSet bool
}

func (v NullableProductComponent) Get() *ProductComponent {
	return v.value
}

func (v *NullableProductComponent) Set(val *ProductComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableProductComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableProductComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductComponent(val *ProductComponent) *NullableProductComponent {
	return &NullableProductComponent{value: val, isSet: true}
}

func (v NullableProductComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
