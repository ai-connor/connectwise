/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ProductDetach type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductDetach{}

// ProductDetach struct for ProductDetach
type ProductDetach struct {
	RemoveFromTicket      *bool `json:"removeFromTicket,omitempty"`
	RemoveFromInvoice     *bool `json:"removeFromInvoice,omitempty"`
	RemoveFromOpportunity *bool `json:"removeFromOpportunity,omitempty"`
	RemoveFromSalesOrder  *bool `json:"removeFromSalesOrder,omitempty"`
	RemoveFromProject     *bool `json:"removeFromProject,omitempty"`
}

// NewProductDetach instantiates a new ProductDetach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductDetach() *ProductDetach {
	this := ProductDetach{}
	return &this
}

// NewProductDetachWithDefaults instantiates a new ProductDetach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductDetachWithDefaults() *ProductDetach {
	this := ProductDetach{}
	return &this
}

// GetRemoveFromTicket returns the RemoveFromTicket field value if set, zero value otherwise.
func (o *ProductDetach) GetRemoveFromTicket() bool {
	if o == nil || IsNil(o.RemoveFromTicket) {
		var ret bool
		return ret
	}
	return *o.RemoveFromTicket
}

// GetRemoveFromTicketOk returns a tuple with the RemoveFromTicket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDetach) GetRemoveFromTicketOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveFromTicket) {
		return nil, false
	}
	return o.RemoveFromTicket, true
}

// HasRemoveFromTicket returns a boolean if a field has been set.
func (o *ProductDetach) HasRemoveFromTicket() bool {
	if o != nil && !IsNil(o.RemoveFromTicket) {
		return true
	}

	return false
}

// SetRemoveFromTicket gets a reference to the given bool and assigns it to the RemoveFromTicket field.
func (o *ProductDetach) SetRemoveFromTicket(v bool) {
	o.RemoveFromTicket = &v
}

// GetRemoveFromInvoice returns the RemoveFromInvoice field value if set, zero value otherwise.
func (o *ProductDetach) GetRemoveFromInvoice() bool {
	if o == nil || IsNil(o.RemoveFromInvoice) {
		var ret bool
		return ret
	}
	return *o.RemoveFromInvoice
}

// GetRemoveFromInvoiceOk returns a tuple with the RemoveFromInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDetach) GetRemoveFromInvoiceOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveFromInvoice) {
		return nil, false
	}
	return o.RemoveFromInvoice, true
}

// HasRemoveFromInvoice returns a boolean if a field has been set.
func (o *ProductDetach) HasRemoveFromInvoice() bool {
	if o != nil && !IsNil(o.RemoveFromInvoice) {
		return true
	}

	return false
}

// SetRemoveFromInvoice gets a reference to the given bool and assigns it to the RemoveFromInvoice field.
func (o *ProductDetach) SetRemoveFromInvoice(v bool) {
	o.RemoveFromInvoice = &v
}

// GetRemoveFromOpportunity returns the RemoveFromOpportunity field value if set, zero value otherwise.
func (o *ProductDetach) GetRemoveFromOpportunity() bool {
	if o == nil || IsNil(o.RemoveFromOpportunity) {
		var ret bool
		return ret
	}
	return *o.RemoveFromOpportunity
}

// GetRemoveFromOpportunityOk returns a tuple with the RemoveFromOpportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDetach) GetRemoveFromOpportunityOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveFromOpportunity) {
		return nil, false
	}
	return o.RemoveFromOpportunity, true
}

// HasRemoveFromOpportunity returns a boolean if a field has been set.
func (o *ProductDetach) HasRemoveFromOpportunity() bool {
	if o != nil && !IsNil(o.RemoveFromOpportunity) {
		return true
	}

	return false
}

// SetRemoveFromOpportunity gets a reference to the given bool and assigns it to the RemoveFromOpportunity field.
func (o *ProductDetach) SetRemoveFromOpportunity(v bool) {
	o.RemoveFromOpportunity = &v
}

// GetRemoveFromSalesOrder returns the RemoveFromSalesOrder field value if set, zero value otherwise.
func (o *ProductDetach) GetRemoveFromSalesOrder() bool {
	if o == nil || IsNil(o.RemoveFromSalesOrder) {
		var ret bool
		return ret
	}
	return *o.RemoveFromSalesOrder
}

// GetRemoveFromSalesOrderOk returns a tuple with the RemoveFromSalesOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDetach) GetRemoveFromSalesOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveFromSalesOrder) {
		return nil, false
	}
	return o.RemoveFromSalesOrder, true
}

// HasRemoveFromSalesOrder returns a boolean if a field has been set.
func (o *ProductDetach) HasRemoveFromSalesOrder() bool {
	if o != nil && !IsNil(o.RemoveFromSalesOrder) {
		return true
	}

	return false
}

// SetRemoveFromSalesOrder gets a reference to the given bool and assigns it to the RemoveFromSalesOrder field.
func (o *ProductDetach) SetRemoveFromSalesOrder(v bool) {
	o.RemoveFromSalesOrder = &v
}

// GetRemoveFromProject returns the RemoveFromProject field value if set, zero value otherwise.
func (o *ProductDetach) GetRemoveFromProject() bool {
	if o == nil || IsNil(o.RemoveFromProject) {
		var ret bool
		return ret
	}
	return *o.RemoveFromProject
}

// GetRemoveFromProjectOk returns a tuple with the RemoveFromProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDetach) GetRemoveFromProjectOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveFromProject) {
		return nil, false
	}
	return o.RemoveFromProject, true
}

// HasRemoveFromProject returns a boolean if a field has been set.
func (o *ProductDetach) HasRemoveFromProject() bool {
	if o != nil && !IsNil(o.RemoveFromProject) {
		return true
	}

	return false
}

// SetRemoveFromProject gets a reference to the given bool and assigns it to the RemoveFromProject field.
func (o *ProductDetach) SetRemoveFromProject(v bool) {
	o.RemoveFromProject = &v
}

func (o ProductDetach) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductDetach) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RemoveFromTicket) {
		toSerialize["removeFromTicket"] = o.RemoveFromTicket
	}
	if !IsNil(o.RemoveFromInvoice) {
		toSerialize["removeFromInvoice"] = o.RemoveFromInvoice
	}
	if !IsNil(o.RemoveFromOpportunity) {
		toSerialize["removeFromOpportunity"] = o.RemoveFromOpportunity
	}
	if !IsNil(o.RemoveFromSalesOrder) {
		toSerialize["removeFromSalesOrder"] = o.RemoveFromSalesOrder
	}
	if !IsNil(o.RemoveFromProject) {
		toSerialize["removeFromProject"] = o.RemoveFromProject
	}
	return toSerialize, nil
}

type NullableProductDetach struct {
	value *ProductDetach
	isSet bool
}

func (v NullableProductDetach) Get() *ProductDetach {
	return v.value
}

func (v *NullableProductDetach) Set(val *ProductDetach) {
	v.value = val
	v.isSet = true
}

func (v NullableProductDetach) IsSet() bool {
	return v.isSet
}

func (v *NullableProductDetach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductDetach(val *ProductDetach) *NullableProductDetach {
	return &NullableProductDetach{value: val, isSet: true}
}

func (v NullableProductDetach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductDetach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
