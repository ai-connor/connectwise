/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProjectBoardTeamMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBoardTeamMember{}

// ProjectBoardTeamMember struct for ProjectBoardTeamMember
type ProjectBoardTeamMember struct {
	Id          *int32               `json:"id,omitempty"`
	Member      MemberReference      `json:"member"`
	ProjectRole ProjectRoleReference `json:"projectRole"`
	WorkRole    *WorkRoleReference   `json:"workRole,omitempty"`
	Info        *map[string]string   `json:"_info,omitempty"`
}

type _ProjectBoardTeamMember ProjectBoardTeamMember

// NewProjectBoardTeamMember instantiates a new ProjectBoardTeamMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBoardTeamMember(member MemberReference, projectRole ProjectRoleReference) *ProjectBoardTeamMember {
	this := ProjectBoardTeamMember{}
	this.Member = member
	this.ProjectRole = projectRole
	return &this
}

// NewProjectBoardTeamMemberWithDefaults instantiates a new ProjectBoardTeamMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBoardTeamMemberWithDefaults() *ProjectBoardTeamMember {
	this := ProjectBoardTeamMember{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectBoardTeamMember) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBoardTeamMember) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectBoardTeamMember) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectBoardTeamMember) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value
func (o *ProjectBoardTeamMember) GetMember() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.Member
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *ProjectBoardTeamMember) GetMemberOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Member, true
}

// SetMember sets field value
func (o *ProjectBoardTeamMember) SetMember(v MemberReference) {
	o.Member = v
}

// GetProjectRole returns the ProjectRole field value
func (o *ProjectBoardTeamMember) GetProjectRole() ProjectRoleReference {
	if o == nil {
		var ret ProjectRoleReference
		return ret
	}

	return o.ProjectRole
}

// GetProjectRoleOk returns a tuple with the ProjectRole field value
// and a boolean to check if the value has been set.
func (o *ProjectBoardTeamMember) GetProjectRoleOk() (*ProjectRoleReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectRole, true
}

// SetProjectRole sets field value
func (o *ProjectBoardTeamMember) SetProjectRole(v ProjectRoleReference) {
	o.ProjectRole = v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *ProjectBoardTeamMember) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBoardTeamMember) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *ProjectBoardTeamMember) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *ProjectBoardTeamMember) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectBoardTeamMember) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBoardTeamMember) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectBoardTeamMember) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectBoardTeamMember) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ProjectBoardTeamMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBoardTeamMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["member"] = o.Member
	toSerialize["projectRole"] = o.ProjectRole
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ProjectBoardTeamMember) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member",
		"projectRole",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectBoardTeamMember := _ProjectBoardTeamMember{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectBoardTeamMember)

	if err != nil {
		return err
	}

	*o = ProjectBoardTeamMember(varProjectBoardTeamMember)

	return err
}

type NullableProjectBoardTeamMember struct {
	value *ProjectBoardTeamMember
	isSet bool
}

func (v NullableProjectBoardTeamMember) Get() *ProjectBoardTeamMember {
	return v.value
}

func (v *NullableProjectBoardTeamMember) Set(val *ProjectBoardTeamMember) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBoardTeamMember) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBoardTeamMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBoardTeamMember(val *ProjectBoardTeamMember) *NullableProjectBoardTeamMember {
	return &NullableProjectBoardTeamMember{value: val, isSet: true}
}

func (v NullableProjectBoardTeamMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBoardTeamMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
