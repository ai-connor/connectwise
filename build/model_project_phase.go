/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProjectPhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectPhase{}

// ProjectPhase struct for ProjectPhase
type ProjectPhase struct {
	Id        *int32        `json:"id,omitempty"`
	ProjectId NullableInt32 `json:"projectId,omitempty"`
	//  Max length: 100;
	Description string                 `json:"description"`
	Board       *ProjectBoardReference `json:"board,omitempty"`
	Status      *PhaseStatusReference  `json:"status,omitempty"`
	Agreement   *AgreementReference    `json:"agreement,omitempty"`
	Opportunity *OpportunityReference  `json:"opportunity,omitempty"`
	Department  *BillingUnitReference  `json:"department,omitempty"`
	ParentPhase *ProjectPhaseReference `json:"parentPhase,omitempty"`
	//  Max length: 50;
	WbsCode *string `json:"wbsCode,omitempty"`
	//  Required On Updates;
	BillTime NullableString `json:"billTime,omitempty"`
	//  Required On Updates;
	BillExpenses NullableString `json:"billExpenses,omitempty"`
	//  Required On Updates;
	BillProducts        NullableString `json:"billProducts,omitempty"`
	MarkAsMilestoneFlag NullableBool   `json:"markAsMilestoneFlag,omitempty"`
	Notes               *string        `json:"notes,omitempty"`
	DeadlineDate        *time.Time     `json:"deadlineDate,omitempty"`
	BillSeparatelyFlag  NullableBool   `json:"billSeparatelyFlag,omitempty"`
	// billingMethod is required if the phase billSeparatelyFlag is true.
	BillingMethod    NullableString  `json:"billingMethod,omitempty"`
	ScheduledHours   NullableFloat64 `json:"scheduledHours,omitempty"`
	ScheduledStart   *string         `json:"scheduledStart,omitempty"`
	ScheduledEnd     *string         `json:"scheduledEnd,omitempty"`
	ActualHours      NullableFloat64 `json:"actualHours,omitempty"`
	ActualStart      *string         `json:"actualStart,omitempty"`
	ActualEnd        *string         `json:"actualEnd,omitempty"`
	BudgetHours      NullableFloat64 `json:"budgetHours,omitempty"`
	StartDate        *string         `json:"startDate,omitempty"`
	EndDate          *string         `json:"endDate,omitempty"`
	LocationId       NullableInt32   `json:"locationId,omitempty"`
	BusinessUnitId   NullableInt32   `json:"businessUnitId,omitempty"`
	HourlyRate       NullableFloat64 `json:"hourlyRate,omitempty"`
	BillingStartDate *time.Time      `json:"billingStartDate,omitempty"`
	// This phase can only be billed after it has been closed.
	BillPhaseClosedFlag NullableBool `json:"billPhaseClosedFlag,omitempty"`
	// This phase can only be billed after the project has been closed.
	BillProjectClosedFlag NullableBool    `json:"billProjectClosedFlag,omitempty"`
	Downpayment           NullableFloat64 `json:"downpayment,omitempty"`
	//  Max length: 25;
	PoNumber                *string                `json:"poNumber,omitempty"`
	PoAmount                NullableFloat64        `json:"poAmount,omitempty"`
	EstimatedTimeCost       NullableFloat64        `json:"estimatedTimeCost,omitempty"`
	EstimatedExpenseCost    NullableFloat64        `json:"estimatedExpenseCost,omitempty"`
	EstimatedProductCost    NullableFloat64        `json:"estimatedProductCost,omitempty"`
	EstimatedTimeRevenue    NullableFloat64        `json:"estimatedTimeRevenue,omitempty"`
	EstimatedExpenseRevenue NullableFloat64        `json:"estimatedExpenseRevenue,omitempty"`
	EstimatedProductRevenue NullableFloat64        `json:"estimatedProductRevenue,omitempty"`
	Currency                *CurrencyReference     `json:"currency,omitempty"`
	BillToCompany           *CompanyReference      `json:"billToCompany,omitempty"`
	BillToContact           *ContactReference      `json:"billToContact,omitempty"`
	BillToSite              *SiteReference         `json:"billToSite,omitempty"`
	ShipToCompany           *CompanyReference      `json:"shipToCompany,omitempty"`
	ShipToContact           *ContactReference      `json:"shipToContact,omitempty"`
	ShipToSite              *SiteReference         `json:"shipToSite,omitempty"`
	BillingTerms            *BillingTermsReference `json:"billingTerms,omitempty"`
	TaxCode                 *TaxCodeReference      `json:"taxCode,omitempty"`
	Info                    *map[string]string     `json:"_info,omitempty"`
	CustomFields            []CustomFieldValue     `json:"customFields,omitempty"`
}

type _ProjectPhase ProjectPhase

// NewProjectPhase instantiates a new ProjectPhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectPhase(description string) *ProjectPhase {
	this := ProjectPhase{}
	this.Description = description
	return &this
}

// NewProjectPhaseWithDefaults instantiates a new ProjectPhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectPhaseWithDefaults() *ProjectPhase {
	this := ProjectPhase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectPhase) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectPhase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectPhase) SetId(v int32) {
	o.Id = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectPhase) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableInt32 and assigns it to the ProjectId field.
func (o *ProjectPhase) SetProjectId(v int32) {
	o.ProjectId.Set(&v)
}

// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *ProjectPhase) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *ProjectPhase) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetDescription returns the Description field value
func (o *ProjectPhase) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ProjectPhase) SetDescription(v string) {
	o.Description = v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *ProjectPhase) GetBoard() ProjectBoardReference {
	if o == nil || IsNil(o.Board) {
		var ret ProjectBoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetBoardOk() (*ProjectBoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *ProjectPhase) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given ProjectBoardReference and assigns it to the Board field.
func (o *ProjectPhase) SetBoard(v ProjectBoardReference) {
	o.Board = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectPhase) GetStatus() PhaseStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret PhaseStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetStatusOk() (*PhaseStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectPhase) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PhaseStatusReference and assigns it to the Status field.
func (o *ProjectPhase) SetStatus(v PhaseStatusReference) {
	o.Status = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *ProjectPhase) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *ProjectPhase) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *ProjectPhase) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *ProjectPhase) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *ProjectPhase) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *ProjectPhase) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *ProjectPhase) GetDepartment() BillingUnitReference {
	if o == nil || IsNil(o.Department) {
		var ret BillingUnitReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetDepartmentOk() (*BillingUnitReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *ProjectPhase) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given BillingUnitReference and assigns it to the Department field.
func (o *ProjectPhase) SetDepartment(v BillingUnitReference) {
	o.Department = &v
}

// GetParentPhase returns the ParentPhase field value if set, zero value otherwise.
func (o *ProjectPhase) GetParentPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.ParentPhase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.ParentPhase
}

// GetParentPhaseOk returns a tuple with the ParentPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetParentPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.ParentPhase) {
		return nil, false
	}
	return o.ParentPhase, true
}

// HasParentPhase returns a boolean if a field has been set.
func (o *ProjectPhase) HasParentPhase() bool {
	if o != nil && !IsNil(o.ParentPhase) {
		return true
	}

	return false
}

// SetParentPhase gets a reference to the given ProjectPhaseReference and assigns it to the ParentPhase field.
func (o *ProjectPhase) SetParentPhase(v ProjectPhaseReference) {
	o.ParentPhase = &v
}

// GetWbsCode returns the WbsCode field value if set, zero value otherwise.
func (o *ProjectPhase) GetWbsCode() string {
	if o == nil || IsNil(o.WbsCode) {
		var ret string
		return ret
	}
	return *o.WbsCode
}

// GetWbsCodeOk returns a tuple with the WbsCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetWbsCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WbsCode) {
		return nil, false
	}
	return o.WbsCode, true
}

// HasWbsCode returns a boolean if a field has been set.
func (o *ProjectPhase) HasWbsCode() bool {
	if o != nil && !IsNil(o.WbsCode) {
		return true
	}

	return false
}

// SetWbsCode gets a reference to the given string and assigns it to the WbsCode field.
func (o *ProjectPhase) SetWbsCode(v string) {
	o.WbsCode = &v
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *ProjectPhase) SetBillTime(v string) {
	o.BillTime.Set(&v)
}

// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *ProjectPhase) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *ProjectPhase) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillExpenses returns the BillExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillExpenses() string {
	if o == nil || IsNil(o.BillExpenses.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// HasBillExpenses returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillExpenses() bool {
	if o != nil && o.BillExpenses.IsSet() {
		return true
	}

	return false
}

// SetBillExpenses gets a reference to the given NullableString and assigns it to the BillExpenses field.
func (o *ProjectPhase) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}

// SetBillExpensesNil sets the value for BillExpenses to be an explicit nil
func (o *ProjectPhase) SetBillExpensesNil() {
	o.BillExpenses.Set(nil)
}

// UnsetBillExpenses ensures that no value is present for BillExpenses, not even an explicit nil
func (o *ProjectPhase) UnsetBillExpenses() {
	o.BillExpenses.Unset()
}

// GetBillProducts returns the BillProducts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillProducts() string {
	if o == nil || IsNil(o.BillProducts.Get()) {
		var ret string
		return ret
	}
	return *o.BillProducts.Get()
}

// GetBillProductsOk returns a tuple with the BillProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillProductsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProducts.Get(), o.BillProducts.IsSet()
}

// HasBillProducts returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillProducts() bool {
	if o != nil && o.BillProducts.IsSet() {
		return true
	}

	return false
}

// SetBillProducts gets a reference to the given NullableString and assigns it to the BillProducts field.
func (o *ProjectPhase) SetBillProducts(v string) {
	o.BillProducts.Set(&v)
}

// SetBillProductsNil sets the value for BillProducts to be an explicit nil
func (o *ProjectPhase) SetBillProductsNil() {
	o.BillProducts.Set(nil)
}

// UnsetBillProducts ensures that no value is present for BillProducts, not even an explicit nil
func (o *ProjectPhase) UnsetBillProducts() {
	o.BillProducts.Unset()
}

// GetMarkAsMilestoneFlag returns the MarkAsMilestoneFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetMarkAsMilestoneFlag() bool {
	if o == nil || IsNil(o.MarkAsMilestoneFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkAsMilestoneFlag.Get()
}

// GetMarkAsMilestoneFlagOk returns a tuple with the MarkAsMilestoneFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetMarkAsMilestoneFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkAsMilestoneFlag.Get(), o.MarkAsMilestoneFlag.IsSet()
}

// HasMarkAsMilestoneFlag returns a boolean if a field has been set.
func (o *ProjectPhase) HasMarkAsMilestoneFlag() bool {
	if o != nil && o.MarkAsMilestoneFlag.IsSet() {
		return true
	}

	return false
}

// SetMarkAsMilestoneFlag gets a reference to the given NullableBool and assigns it to the MarkAsMilestoneFlag field.
func (o *ProjectPhase) SetMarkAsMilestoneFlag(v bool) {
	o.MarkAsMilestoneFlag.Set(&v)
}

// SetMarkAsMilestoneFlagNil sets the value for MarkAsMilestoneFlag to be an explicit nil
func (o *ProjectPhase) SetMarkAsMilestoneFlagNil() {
	o.MarkAsMilestoneFlag.Set(nil)
}

// UnsetMarkAsMilestoneFlag ensures that no value is present for MarkAsMilestoneFlag, not even an explicit nil
func (o *ProjectPhase) UnsetMarkAsMilestoneFlag() {
	o.MarkAsMilestoneFlag.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ProjectPhase) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ProjectPhase) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ProjectPhase) SetNotes(v string) {
	o.Notes = &v
}

// GetDeadlineDate returns the DeadlineDate field value if set, zero value otherwise.
func (o *ProjectPhase) GetDeadlineDate() time.Time {
	if o == nil || IsNil(o.DeadlineDate) {
		var ret time.Time
		return ret
	}
	return *o.DeadlineDate
}

// GetDeadlineDateOk returns a tuple with the DeadlineDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetDeadlineDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeadlineDate) {
		return nil, false
	}
	return o.DeadlineDate, true
}

// HasDeadlineDate returns a boolean if a field has been set.
func (o *ProjectPhase) HasDeadlineDate() bool {
	if o != nil && !IsNil(o.DeadlineDate) {
		return true
	}

	return false
}

// SetDeadlineDate gets a reference to the given time.Time and assigns it to the DeadlineDate field.
func (o *ProjectPhase) SetDeadlineDate(v time.Time) {
	o.DeadlineDate = &v
}

// GetBillSeparatelyFlag returns the BillSeparatelyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillSeparatelyFlag() bool {
	if o == nil || IsNil(o.BillSeparatelyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillSeparatelyFlag.Get()
}

// GetBillSeparatelyFlagOk returns a tuple with the BillSeparatelyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillSeparatelyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillSeparatelyFlag.Get(), o.BillSeparatelyFlag.IsSet()
}

// HasBillSeparatelyFlag returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillSeparatelyFlag() bool {
	if o != nil && o.BillSeparatelyFlag.IsSet() {
		return true
	}

	return false
}

// SetBillSeparatelyFlag gets a reference to the given NullableBool and assigns it to the BillSeparatelyFlag field.
func (o *ProjectPhase) SetBillSeparatelyFlag(v bool) {
	o.BillSeparatelyFlag.Set(&v)
}

// SetBillSeparatelyFlagNil sets the value for BillSeparatelyFlag to be an explicit nil
func (o *ProjectPhase) SetBillSeparatelyFlagNil() {
	o.BillSeparatelyFlag.Set(nil)
}

// UnsetBillSeparatelyFlag ensures that no value is present for BillSeparatelyFlag, not even an explicit nil
func (o *ProjectPhase) UnsetBillSeparatelyFlag() {
	o.BillSeparatelyFlag.Unset()
}

// GetBillingMethod returns the BillingMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillingMethod() string {
	if o == nil || IsNil(o.BillingMethod.Get()) {
		var ret string
		return ret
	}
	return *o.BillingMethod.Get()
}

// GetBillingMethodOk returns a tuple with the BillingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingMethod.Get(), o.BillingMethod.IsSet()
}

// HasBillingMethod returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillingMethod() bool {
	if o != nil && o.BillingMethod.IsSet() {
		return true
	}

	return false
}

// SetBillingMethod gets a reference to the given NullableString and assigns it to the BillingMethod field.
func (o *ProjectPhase) SetBillingMethod(v string) {
	o.BillingMethod.Set(&v)
}

// SetBillingMethodNil sets the value for BillingMethod to be an explicit nil
func (o *ProjectPhase) SetBillingMethodNil() {
	o.BillingMethod.Set(nil)
}

// UnsetBillingMethod ensures that no value is present for BillingMethod, not even an explicit nil
func (o *ProjectPhase) UnsetBillingMethod() {
	o.BillingMethod.Unset()
}

// GetScheduledHours returns the ScheduledHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetScheduledHours() float64 {
	if o == nil || IsNil(o.ScheduledHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ScheduledHours.Get()
}

// GetScheduledHoursOk returns a tuple with the ScheduledHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetScheduledHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduledHours.Get(), o.ScheduledHours.IsSet()
}

// HasScheduledHours returns a boolean if a field has been set.
func (o *ProjectPhase) HasScheduledHours() bool {
	if o != nil && o.ScheduledHours.IsSet() {
		return true
	}

	return false
}

// SetScheduledHours gets a reference to the given NullableFloat64 and assigns it to the ScheduledHours field.
func (o *ProjectPhase) SetScheduledHours(v float64) {
	o.ScheduledHours.Set(&v)
}

// SetScheduledHoursNil sets the value for ScheduledHours to be an explicit nil
func (o *ProjectPhase) SetScheduledHoursNil() {
	o.ScheduledHours.Set(nil)
}

// UnsetScheduledHours ensures that no value is present for ScheduledHours, not even an explicit nil
func (o *ProjectPhase) UnsetScheduledHours() {
	o.ScheduledHours.Unset()
}

// GetScheduledStart returns the ScheduledStart field value if set, zero value otherwise.
func (o *ProjectPhase) GetScheduledStart() string {
	if o == nil || IsNil(o.ScheduledStart) {
		var ret string
		return ret
	}
	return *o.ScheduledStart
}

// GetScheduledStartOk returns a tuple with the ScheduledStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetScheduledStartOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledStart) {
		return nil, false
	}
	return o.ScheduledStart, true
}

// HasScheduledStart returns a boolean if a field has been set.
func (o *ProjectPhase) HasScheduledStart() bool {
	if o != nil && !IsNil(o.ScheduledStart) {
		return true
	}

	return false
}

// SetScheduledStart gets a reference to the given string and assigns it to the ScheduledStart field.
func (o *ProjectPhase) SetScheduledStart(v string) {
	o.ScheduledStart = &v
}

// GetScheduledEnd returns the ScheduledEnd field value if set, zero value otherwise.
func (o *ProjectPhase) GetScheduledEnd() string {
	if o == nil || IsNil(o.ScheduledEnd) {
		var ret string
		return ret
	}
	return *o.ScheduledEnd
}

// GetScheduledEndOk returns a tuple with the ScheduledEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetScheduledEndOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledEnd) {
		return nil, false
	}
	return o.ScheduledEnd, true
}

// HasScheduledEnd returns a boolean if a field has been set.
func (o *ProjectPhase) HasScheduledEnd() bool {
	if o != nil && !IsNil(o.ScheduledEnd) {
		return true
	}

	return false
}

// SetScheduledEnd gets a reference to the given string and assigns it to the ScheduledEnd field.
func (o *ProjectPhase) SetScheduledEnd(v string) {
	o.ScheduledEnd = &v
}

// GetActualHours returns the ActualHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetActualHours() float64 {
	if o == nil || IsNil(o.ActualHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualHours.Get()
}

// GetActualHoursOk returns a tuple with the ActualHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetActualHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualHours.Get(), o.ActualHours.IsSet()
}

// HasActualHours returns a boolean if a field has been set.
func (o *ProjectPhase) HasActualHours() bool {
	if o != nil && o.ActualHours.IsSet() {
		return true
	}

	return false
}

// SetActualHours gets a reference to the given NullableFloat64 and assigns it to the ActualHours field.
func (o *ProjectPhase) SetActualHours(v float64) {
	o.ActualHours.Set(&v)
}

// SetActualHoursNil sets the value for ActualHours to be an explicit nil
func (o *ProjectPhase) SetActualHoursNil() {
	o.ActualHours.Set(nil)
}

// UnsetActualHours ensures that no value is present for ActualHours, not even an explicit nil
func (o *ProjectPhase) UnsetActualHours() {
	o.ActualHours.Unset()
}

// GetActualStart returns the ActualStart field value if set, zero value otherwise.
func (o *ProjectPhase) GetActualStart() string {
	if o == nil || IsNil(o.ActualStart) {
		var ret string
		return ret
	}
	return *o.ActualStart
}

// GetActualStartOk returns a tuple with the ActualStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetActualStartOk() (*string, bool) {
	if o == nil || IsNil(o.ActualStart) {
		return nil, false
	}
	return o.ActualStart, true
}

// HasActualStart returns a boolean if a field has been set.
func (o *ProjectPhase) HasActualStart() bool {
	if o != nil && !IsNil(o.ActualStart) {
		return true
	}

	return false
}

// SetActualStart gets a reference to the given string and assigns it to the ActualStart field.
func (o *ProjectPhase) SetActualStart(v string) {
	o.ActualStart = &v
}

// GetActualEnd returns the ActualEnd field value if set, zero value otherwise.
func (o *ProjectPhase) GetActualEnd() string {
	if o == nil || IsNil(o.ActualEnd) {
		var ret string
		return ret
	}
	return *o.ActualEnd
}

// GetActualEndOk returns a tuple with the ActualEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetActualEndOk() (*string, bool) {
	if o == nil || IsNil(o.ActualEnd) {
		return nil, false
	}
	return o.ActualEnd, true
}

// HasActualEnd returns a boolean if a field has been set.
func (o *ProjectPhase) HasActualEnd() bool {
	if o != nil && !IsNil(o.ActualEnd) {
		return true
	}

	return false
}

// SetActualEnd gets a reference to the given string and assigns it to the ActualEnd field.
func (o *ProjectPhase) SetActualEnd(v string) {
	o.ActualEnd = &v
}

// GetBudgetHours returns the BudgetHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBudgetHours() float64 {
	if o == nil || IsNil(o.BudgetHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BudgetHours.Get()
}

// GetBudgetHoursOk returns a tuple with the BudgetHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBudgetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetHours.Get(), o.BudgetHours.IsSet()
}

// HasBudgetHours returns a boolean if a field has been set.
func (o *ProjectPhase) HasBudgetHours() bool {
	if o != nil && o.BudgetHours.IsSet() {
		return true
	}

	return false
}

// SetBudgetHours gets a reference to the given NullableFloat64 and assigns it to the BudgetHours field.
func (o *ProjectPhase) SetBudgetHours(v float64) {
	o.BudgetHours.Set(&v)
}

// SetBudgetHoursNil sets the value for BudgetHours to be an explicit nil
func (o *ProjectPhase) SetBudgetHoursNil() {
	o.BudgetHours.Set(nil)
}

// UnsetBudgetHours ensures that no value is present for BudgetHours, not even an explicit nil
func (o *ProjectPhase) UnsetBudgetHours() {
	o.BudgetHours.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectPhase) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectPhase) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ProjectPhase) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ProjectPhase) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ProjectPhase) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ProjectPhase) SetEndDate(v string) {
	o.EndDate = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *ProjectPhase) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *ProjectPhase) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}

// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *ProjectPhase) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *ProjectPhase) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *ProjectPhase) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *ProjectPhase) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}

// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *ProjectPhase) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *ProjectPhase) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetHourlyRate returns the HourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetHourlyRate() float64 {
	if o == nil || IsNil(o.HourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyRate.Get()
}

// GetHourlyRateOk returns a tuple with the HourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyRate.Get(), o.HourlyRate.IsSet()
}

// HasHourlyRate returns a boolean if a field has been set.
func (o *ProjectPhase) HasHourlyRate() bool {
	if o != nil && o.HourlyRate.IsSet() {
		return true
	}

	return false
}

// SetHourlyRate gets a reference to the given NullableFloat64 and assigns it to the HourlyRate field.
func (o *ProjectPhase) SetHourlyRate(v float64) {
	o.HourlyRate.Set(&v)
}

// SetHourlyRateNil sets the value for HourlyRate to be an explicit nil
func (o *ProjectPhase) SetHourlyRateNil() {
	o.HourlyRate.Set(nil)
}

// UnsetHourlyRate ensures that no value is present for HourlyRate, not even an explicit nil
func (o *ProjectPhase) UnsetHourlyRate() {
	o.HourlyRate.Unset()
}

// GetBillingStartDate returns the BillingStartDate field value if set, zero value otherwise.
func (o *ProjectPhase) GetBillingStartDate() time.Time {
	if o == nil || IsNil(o.BillingStartDate) {
		var ret time.Time
		return ret
	}
	return *o.BillingStartDate
}

// GetBillingStartDateOk returns a tuple with the BillingStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetBillingStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BillingStartDate) {
		return nil, false
	}
	return o.BillingStartDate, true
}

// HasBillingStartDate returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillingStartDate() bool {
	if o != nil && !IsNil(o.BillingStartDate) {
		return true
	}

	return false
}

// SetBillingStartDate gets a reference to the given time.Time and assigns it to the BillingStartDate field.
func (o *ProjectPhase) SetBillingStartDate(v time.Time) {
	o.BillingStartDate = &v
}

// GetBillPhaseClosedFlag returns the BillPhaseClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillPhaseClosedFlag() bool {
	if o == nil || IsNil(o.BillPhaseClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillPhaseClosedFlag.Get()
}

// GetBillPhaseClosedFlagOk returns a tuple with the BillPhaseClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillPhaseClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillPhaseClosedFlag.Get(), o.BillPhaseClosedFlag.IsSet()
}

// HasBillPhaseClosedFlag returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillPhaseClosedFlag() bool {
	if o != nil && o.BillPhaseClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillPhaseClosedFlag gets a reference to the given NullableBool and assigns it to the BillPhaseClosedFlag field.
func (o *ProjectPhase) SetBillPhaseClosedFlag(v bool) {
	o.BillPhaseClosedFlag.Set(&v)
}

// SetBillPhaseClosedFlagNil sets the value for BillPhaseClosedFlag to be an explicit nil
func (o *ProjectPhase) SetBillPhaseClosedFlagNil() {
	o.BillPhaseClosedFlag.Set(nil)
}

// UnsetBillPhaseClosedFlag ensures that no value is present for BillPhaseClosedFlag, not even an explicit nil
func (o *ProjectPhase) UnsetBillPhaseClosedFlag() {
	o.BillPhaseClosedFlag.Unset()
}

// GetBillProjectClosedFlag returns the BillProjectClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetBillProjectClosedFlag() bool {
	if o == nil || IsNil(o.BillProjectClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillProjectClosedFlag.Get()
}

// GetBillProjectClosedFlagOk returns a tuple with the BillProjectClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetBillProjectClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProjectClosedFlag.Get(), o.BillProjectClosedFlag.IsSet()
}

// HasBillProjectClosedFlag returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillProjectClosedFlag() bool {
	if o != nil && o.BillProjectClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillProjectClosedFlag gets a reference to the given NullableBool and assigns it to the BillProjectClosedFlag field.
func (o *ProjectPhase) SetBillProjectClosedFlag(v bool) {
	o.BillProjectClosedFlag.Set(&v)
}

// SetBillProjectClosedFlagNil sets the value for BillProjectClosedFlag to be an explicit nil
func (o *ProjectPhase) SetBillProjectClosedFlagNil() {
	o.BillProjectClosedFlag.Set(nil)
}

// UnsetBillProjectClosedFlag ensures that no value is present for BillProjectClosedFlag, not even an explicit nil
func (o *ProjectPhase) UnsetBillProjectClosedFlag() {
	o.BillProjectClosedFlag.Unset()
}

// GetDownpayment returns the Downpayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetDownpayment() float64 {
	if o == nil || IsNil(o.Downpayment.Get()) {
		var ret float64
		return ret
	}
	return *o.Downpayment.Get()
}

// GetDownpaymentOk returns a tuple with the Downpayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetDownpaymentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Downpayment.Get(), o.Downpayment.IsSet()
}

// HasDownpayment returns a boolean if a field has been set.
func (o *ProjectPhase) HasDownpayment() bool {
	if o != nil && o.Downpayment.IsSet() {
		return true
	}

	return false
}

// SetDownpayment gets a reference to the given NullableFloat64 and assigns it to the Downpayment field.
func (o *ProjectPhase) SetDownpayment(v float64) {
	o.Downpayment.Set(&v)
}

// SetDownpaymentNil sets the value for Downpayment to be an explicit nil
func (o *ProjectPhase) SetDownpaymentNil() {
	o.Downpayment.Set(nil)
}

// UnsetDownpayment ensures that no value is present for Downpayment, not even an explicit nil
func (o *ProjectPhase) UnsetDownpayment() {
	o.Downpayment.Unset()
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *ProjectPhase) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *ProjectPhase) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *ProjectPhase) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetPoAmount returns the PoAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetPoAmount() float64 {
	if o == nil || IsNil(o.PoAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.PoAmount.Get()
}

// GetPoAmountOk returns a tuple with the PoAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetPoAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoAmount.Get(), o.PoAmount.IsSet()
}

// HasPoAmount returns a boolean if a field has been set.
func (o *ProjectPhase) HasPoAmount() bool {
	if o != nil && o.PoAmount.IsSet() {
		return true
	}

	return false
}

// SetPoAmount gets a reference to the given NullableFloat64 and assigns it to the PoAmount field.
func (o *ProjectPhase) SetPoAmount(v float64) {
	o.PoAmount.Set(&v)
}

// SetPoAmountNil sets the value for PoAmount to be an explicit nil
func (o *ProjectPhase) SetPoAmountNil() {
	o.PoAmount.Set(nil)
}

// UnsetPoAmount ensures that no value is present for PoAmount, not even an explicit nil
func (o *ProjectPhase) UnsetPoAmount() {
	o.PoAmount.Unset()
}

// GetEstimatedTimeCost returns the EstimatedTimeCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetEstimatedTimeCost() float64 {
	if o == nil || IsNil(o.EstimatedTimeCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeCost.Get()
}

// GetEstimatedTimeCostOk returns a tuple with the EstimatedTimeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetEstimatedTimeCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedTimeCost.Get(), o.EstimatedTimeCost.IsSet()
}

// HasEstimatedTimeCost returns a boolean if a field has been set.
func (o *ProjectPhase) HasEstimatedTimeCost() bool {
	if o != nil && o.EstimatedTimeCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedTimeCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedTimeCost field.
func (o *ProjectPhase) SetEstimatedTimeCost(v float64) {
	o.EstimatedTimeCost.Set(&v)
}

// SetEstimatedTimeCostNil sets the value for EstimatedTimeCost to be an explicit nil
func (o *ProjectPhase) SetEstimatedTimeCostNil() {
	o.EstimatedTimeCost.Set(nil)
}

// UnsetEstimatedTimeCost ensures that no value is present for EstimatedTimeCost, not even an explicit nil
func (o *ProjectPhase) UnsetEstimatedTimeCost() {
	o.EstimatedTimeCost.Unset()
}

// GetEstimatedExpenseCost returns the EstimatedExpenseCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetEstimatedExpenseCost() float64 {
	if o == nil || IsNil(o.EstimatedExpenseCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedExpenseCost.Get()
}

// GetEstimatedExpenseCostOk returns a tuple with the EstimatedExpenseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetEstimatedExpenseCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedExpenseCost.Get(), o.EstimatedExpenseCost.IsSet()
}

// HasEstimatedExpenseCost returns a boolean if a field has been set.
func (o *ProjectPhase) HasEstimatedExpenseCost() bool {
	if o != nil && o.EstimatedExpenseCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedExpenseCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedExpenseCost field.
func (o *ProjectPhase) SetEstimatedExpenseCost(v float64) {
	o.EstimatedExpenseCost.Set(&v)
}

// SetEstimatedExpenseCostNil sets the value for EstimatedExpenseCost to be an explicit nil
func (o *ProjectPhase) SetEstimatedExpenseCostNil() {
	o.EstimatedExpenseCost.Set(nil)
}

// UnsetEstimatedExpenseCost ensures that no value is present for EstimatedExpenseCost, not even an explicit nil
func (o *ProjectPhase) UnsetEstimatedExpenseCost() {
	o.EstimatedExpenseCost.Unset()
}

// GetEstimatedProductCost returns the EstimatedProductCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetEstimatedProductCost() float64 {
	if o == nil || IsNil(o.EstimatedProductCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedProductCost.Get()
}

// GetEstimatedProductCostOk returns a tuple with the EstimatedProductCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetEstimatedProductCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedProductCost.Get(), o.EstimatedProductCost.IsSet()
}

// HasEstimatedProductCost returns a boolean if a field has been set.
func (o *ProjectPhase) HasEstimatedProductCost() bool {
	if o != nil && o.EstimatedProductCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedProductCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedProductCost field.
func (o *ProjectPhase) SetEstimatedProductCost(v float64) {
	o.EstimatedProductCost.Set(&v)
}

// SetEstimatedProductCostNil sets the value for EstimatedProductCost to be an explicit nil
func (o *ProjectPhase) SetEstimatedProductCostNil() {
	o.EstimatedProductCost.Set(nil)
}

// UnsetEstimatedProductCost ensures that no value is present for EstimatedProductCost, not even an explicit nil
func (o *ProjectPhase) UnsetEstimatedProductCost() {
	o.EstimatedProductCost.Unset()
}

// GetEstimatedTimeRevenue returns the EstimatedTimeRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetEstimatedTimeRevenue() float64 {
	if o == nil || IsNil(o.EstimatedTimeRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeRevenue.Get()
}

// GetEstimatedTimeRevenueOk returns a tuple with the EstimatedTimeRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetEstimatedTimeRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedTimeRevenue.Get(), o.EstimatedTimeRevenue.IsSet()
}

// HasEstimatedTimeRevenue returns a boolean if a field has been set.
func (o *ProjectPhase) HasEstimatedTimeRevenue() bool {
	if o != nil && o.EstimatedTimeRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedTimeRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedTimeRevenue field.
func (o *ProjectPhase) SetEstimatedTimeRevenue(v float64) {
	o.EstimatedTimeRevenue.Set(&v)
}

// SetEstimatedTimeRevenueNil sets the value for EstimatedTimeRevenue to be an explicit nil
func (o *ProjectPhase) SetEstimatedTimeRevenueNil() {
	o.EstimatedTimeRevenue.Set(nil)
}

// UnsetEstimatedTimeRevenue ensures that no value is present for EstimatedTimeRevenue, not even an explicit nil
func (o *ProjectPhase) UnsetEstimatedTimeRevenue() {
	o.EstimatedTimeRevenue.Unset()
}

// GetEstimatedExpenseRevenue returns the EstimatedExpenseRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetEstimatedExpenseRevenue() float64 {
	if o == nil || IsNil(o.EstimatedExpenseRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedExpenseRevenue.Get()
}

// GetEstimatedExpenseRevenueOk returns a tuple with the EstimatedExpenseRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetEstimatedExpenseRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedExpenseRevenue.Get(), o.EstimatedExpenseRevenue.IsSet()
}

// HasEstimatedExpenseRevenue returns a boolean if a field has been set.
func (o *ProjectPhase) HasEstimatedExpenseRevenue() bool {
	if o != nil && o.EstimatedExpenseRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedExpenseRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedExpenseRevenue field.
func (o *ProjectPhase) SetEstimatedExpenseRevenue(v float64) {
	o.EstimatedExpenseRevenue.Set(&v)
}

// SetEstimatedExpenseRevenueNil sets the value for EstimatedExpenseRevenue to be an explicit nil
func (o *ProjectPhase) SetEstimatedExpenseRevenueNil() {
	o.EstimatedExpenseRevenue.Set(nil)
}

// UnsetEstimatedExpenseRevenue ensures that no value is present for EstimatedExpenseRevenue, not even an explicit nil
func (o *ProjectPhase) UnsetEstimatedExpenseRevenue() {
	o.EstimatedExpenseRevenue.Unset()
}

// GetEstimatedProductRevenue returns the EstimatedProductRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectPhase) GetEstimatedProductRevenue() float64 {
	if o == nil || IsNil(o.EstimatedProductRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedProductRevenue.Get()
}

// GetEstimatedProductRevenueOk returns a tuple with the EstimatedProductRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectPhase) GetEstimatedProductRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedProductRevenue.Get(), o.EstimatedProductRevenue.IsSet()
}

// HasEstimatedProductRevenue returns a boolean if a field has been set.
func (o *ProjectPhase) HasEstimatedProductRevenue() bool {
	if o != nil && o.EstimatedProductRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedProductRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedProductRevenue field.
func (o *ProjectPhase) SetEstimatedProductRevenue(v float64) {
	o.EstimatedProductRevenue.Set(&v)
}

// SetEstimatedProductRevenueNil sets the value for EstimatedProductRevenue to be an explicit nil
func (o *ProjectPhase) SetEstimatedProductRevenueNil() {
	o.EstimatedProductRevenue.Set(nil)
}

// UnsetEstimatedProductRevenue ensures that no value is present for EstimatedProductRevenue, not even an explicit nil
func (o *ProjectPhase) UnsetEstimatedProductRevenue() {
	o.EstimatedProductRevenue.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ProjectPhase) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ProjectPhase) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *ProjectPhase) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *ProjectPhase) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *ProjectPhase) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetBillToContact returns the BillToContact field value if set, zero value otherwise.
func (o *ProjectPhase) GetBillToContact() ContactReference {
	if o == nil || IsNil(o.BillToContact) {
		var ret ContactReference
		return ret
	}
	return *o.BillToContact
}

// GetBillToContactOk returns a tuple with the BillToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetBillToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BillToContact) {
		return nil, false
	}
	return o.BillToContact, true
}

// HasBillToContact returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillToContact() bool {
	if o != nil && !IsNil(o.BillToContact) {
		return true
	}

	return false
}

// SetBillToContact gets a reference to the given ContactReference and assigns it to the BillToContact field.
func (o *ProjectPhase) SetBillToContact(v ContactReference) {
	o.BillToContact = &v
}

// GetBillToSite returns the BillToSite field value if set, zero value otherwise.
func (o *ProjectPhase) GetBillToSite() SiteReference {
	if o == nil || IsNil(o.BillToSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillToSite
}

// GetBillToSiteOk returns a tuple with the BillToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetBillToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillToSite) {
		return nil, false
	}
	return o.BillToSite, true
}

// HasBillToSite returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillToSite() bool {
	if o != nil && !IsNil(o.BillToSite) {
		return true
	}

	return false
}

// SetBillToSite gets a reference to the given SiteReference and assigns it to the BillToSite field.
func (o *ProjectPhase) SetBillToSite(v SiteReference) {
	o.BillToSite = &v
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *ProjectPhase) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *ProjectPhase) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *ProjectPhase) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToContact returns the ShipToContact field value if set, zero value otherwise.
func (o *ProjectPhase) GetShipToContact() ContactReference {
	if o == nil || IsNil(o.ShipToContact) {
		var ret ContactReference
		return ret
	}
	return *o.ShipToContact
}

// GetShipToContactOk returns a tuple with the ShipToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetShipToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.ShipToContact) {
		return nil, false
	}
	return o.ShipToContact, true
}

// HasShipToContact returns a boolean if a field has been set.
func (o *ProjectPhase) HasShipToContact() bool {
	if o != nil && !IsNil(o.ShipToContact) {
		return true
	}

	return false
}

// SetShipToContact gets a reference to the given ContactReference and assigns it to the ShipToContact field.
func (o *ProjectPhase) SetShipToContact(v ContactReference) {
	o.ShipToContact = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *ProjectPhase) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *ProjectPhase) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *ProjectPhase) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *ProjectPhase) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *ProjectPhase) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *ProjectPhase) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *ProjectPhase) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *ProjectPhase) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *ProjectPhase) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectPhase) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectPhase) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectPhase) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *ProjectPhase) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPhase) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ProjectPhase) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *ProjectPhase) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o ProjectPhase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectPhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.ParentPhase) {
		toSerialize["parentPhase"] = o.ParentPhase
	}
	if !IsNil(o.WbsCode) {
		toSerialize["wbsCode"] = o.WbsCode
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.BillExpenses.IsSet() {
		toSerialize["billExpenses"] = o.BillExpenses.Get()
	}
	if o.BillProducts.IsSet() {
		toSerialize["billProducts"] = o.BillProducts.Get()
	}
	if o.MarkAsMilestoneFlag.IsSet() {
		toSerialize["markAsMilestoneFlag"] = o.MarkAsMilestoneFlag.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.DeadlineDate) {
		toSerialize["deadlineDate"] = o.DeadlineDate
	}
	if o.BillSeparatelyFlag.IsSet() {
		toSerialize["billSeparatelyFlag"] = o.BillSeparatelyFlag.Get()
	}
	if o.BillingMethod.IsSet() {
		toSerialize["billingMethod"] = o.BillingMethod.Get()
	}
	if o.ScheduledHours.IsSet() {
		toSerialize["scheduledHours"] = o.ScheduledHours.Get()
	}
	if !IsNil(o.ScheduledStart) {
		toSerialize["scheduledStart"] = o.ScheduledStart
	}
	if !IsNil(o.ScheduledEnd) {
		toSerialize["scheduledEnd"] = o.ScheduledEnd
	}
	if o.ActualHours.IsSet() {
		toSerialize["actualHours"] = o.ActualHours.Get()
	}
	if !IsNil(o.ActualStart) {
		toSerialize["actualStart"] = o.ActualStart
	}
	if !IsNil(o.ActualEnd) {
		toSerialize["actualEnd"] = o.ActualEnd
	}
	if o.BudgetHours.IsSet() {
		toSerialize["budgetHours"] = o.BudgetHours.Get()
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if o.HourlyRate.IsSet() {
		toSerialize["hourlyRate"] = o.HourlyRate.Get()
	}
	if !IsNil(o.BillingStartDate) {
		toSerialize["billingStartDate"] = o.BillingStartDate
	}
	if o.BillPhaseClosedFlag.IsSet() {
		toSerialize["billPhaseClosedFlag"] = o.BillPhaseClosedFlag.Get()
	}
	if o.BillProjectClosedFlag.IsSet() {
		toSerialize["billProjectClosedFlag"] = o.BillProjectClosedFlag.Get()
	}
	if o.Downpayment.IsSet() {
		toSerialize["downpayment"] = o.Downpayment.Get()
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if o.PoAmount.IsSet() {
		toSerialize["poAmount"] = o.PoAmount.Get()
	}
	if o.EstimatedTimeCost.IsSet() {
		toSerialize["estimatedTimeCost"] = o.EstimatedTimeCost.Get()
	}
	if o.EstimatedExpenseCost.IsSet() {
		toSerialize["estimatedExpenseCost"] = o.EstimatedExpenseCost.Get()
	}
	if o.EstimatedProductCost.IsSet() {
		toSerialize["estimatedProductCost"] = o.EstimatedProductCost.Get()
	}
	if o.EstimatedTimeRevenue.IsSet() {
		toSerialize["estimatedTimeRevenue"] = o.EstimatedTimeRevenue.Get()
	}
	if o.EstimatedExpenseRevenue.IsSet() {
		toSerialize["estimatedExpenseRevenue"] = o.EstimatedExpenseRevenue.Get()
	}
	if o.EstimatedProductRevenue.IsSet() {
		toSerialize["estimatedProductRevenue"] = o.EstimatedProductRevenue.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.BillToContact) {
		toSerialize["billToContact"] = o.BillToContact
	}
	if !IsNil(o.BillToSite) {
		toSerialize["billToSite"] = o.BillToSite
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToContact) {
		toSerialize["shipToContact"] = o.ShipToContact
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *ProjectPhase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectPhase := _ProjectPhase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectPhase)

	if err != nil {
		return err
	}

	*o = ProjectPhase(varProjectPhase)

	return err
}

type NullableProjectPhase struct {
	value *ProjectPhase
	isSet bool
}

func (v NullableProjectPhase) Get() *ProjectPhase {
	return v.value
}

func (v *NullableProjectPhase) Set(val *ProjectPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectPhase(val *ProjectPhase) *NullableProjectPhase {
	return &NullableProjectPhase{value: val, isSet: true}
}

func (v NullableProjectPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
