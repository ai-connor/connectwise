/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProjectStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectStatus{}

// ProjectStatus struct for ProjectStatus
type ProjectStatus struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name            string                    `json:"name"`
	DefaultFlag     NullableBool              `json:"defaultFlag,omitempty"`
	InactiveFlag    NullableBool              `json:"inactiveFlag,omitempty"`
	NoTimeFlag      NullableBool              `json:"noTimeFlag,omitempty"`
	ClosedFlag      NullableBool              `json:"closedFlag,omitempty"`
	StatusIndicator *StatusIndicatorReference `json:"statusIndicator,omitempty"`
	// Required when statusIndicator is Custom. Max length: 30;
	CustomStatusIndicatorName *string            `json:"customStatusIndicatorName,omitempty"`
	Info                      *map[string]string `json:"_info,omitempty"`
}

type _ProjectStatus ProjectStatus

// NewProjectStatus instantiates a new ProjectStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectStatus(name string) *ProjectStatus {
	this := ProjectStatus{}
	this.Name = name
	return &this
}

// NewProjectStatusWithDefaults instantiates a new ProjectStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectStatusWithDefaults() *ProjectStatus {
	this := ProjectStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectStatus) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectStatus) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ProjectStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectStatus) SetName(v string) {
	o.Name = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectStatus) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectStatus) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *ProjectStatus) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *ProjectStatus) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *ProjectStatus) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *ProjectStatus) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectStatus) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectStatus) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ProjectStatus) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ProjectStatus) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ProjectStatus) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ProjectStatus) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetNoTimeFlag returns the NoTimeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectStatus) GetNoTimeFlag() bool {
	if o == nil || IsNil(o.NoTimeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NoTimeFlag.Get()
}

// GetNoTimeFlagOk returns a tuple with the NoTimeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectStatus) GetNoTimeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoTimeFlag.Get(), o.NoTimeFlag.IsSet()
}

// HasNoTimeFlag returns a boolean if a field has been set.
func (o *ProjectStatus) HasNoTimeFlag() bool {
	if o != nil && o.NoTimeFlag.IsSet() {
		return true
	}

	return false
}

// SetNoTimeFlag gets a reference to the given NullableBool and assigns it to the NoTimeFlag field.
func (o *ProjectStatus) SetNoTimeFlag(v bool) {
	o.NoTimeFlag.Set(&v)
}

// SetNoTimeFlagNil sets the value for NoTimeFlag to be an explicit nil
func (o *ProjectStatus) SetNoTimeFlagNil() {
	o.NoTimeFlag.Set(nil)
}

// UnsetNoTimeFlag ensures that no value is present for NoTimeFlag, not even an explicit nil
func (o *ProjectStatus) UnsetNoTimeFlag() {
	o.NoTimeFlag.Unset()
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectStatus) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectStatus) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *ProjectStatus) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *ProjectStatus) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}

// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *ProjectStatus) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *ProjectStatus) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetStatusIndicator returns the StatusIndicator field value if set, zero value otherwise.
func (o *ProjectStatus) GetStatusIndicator() StatusIndicatorReference {
	if o == nil || IsNil(o.StatusIndicator) {
		var ret StatusIndicatorReference
		return ret
	}
	return *o.StatusIndicator
}

// GetStatusIndicatorOk returns a tuple with the StatusIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetStatusIndicatorOk() (*StatusIndicatorReference, bool) {
	if o == nil || IsNil(o.StatusIndicator) {
		return nil, false
	}
	return o.StatusIndicator, true
}

// HasStatusIndicator returns a boolean if a field has been set.
func (o *ProjectStatus) HasStatusIndicator() bool {
	if o != nil && !IsNil(o.StatusIndicator) {
		return true
	}

	return false
}

// SetStatusIndicator gets a reference to the given StatusIndicatorReference and assigns it to the StatusIndicator field.
func (o *ProjectStatus) SetStatusIndicator(v StatusIndicatorReference) {
	o.StatusIndicator = &v
}

// GetCustomStatusIndicatorName returns the CustomStatusIndicatorName field value if set, zero value otherwise.
func (o *ProjectStatus) GetCustomStatusIndicatorName() string {
	if o == nil || IsNil(o.CustomStatusIndicatorName) {
		var ret string
		return ret
	}
	return *o.CustomStatusIndicatorName
}

// GetCustomStatusIndicatorNameOk returns a tuple with the CustomStatusIndicatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetCustomStatusIndicatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomStatusIndicatorName) {
		return nil, false
	}
	return o.CustomStatusIndicatorName, true
}

// HasCustomStatusIndicatorName returns a boolean if a field has been set.
func (o *ProjectStatus) HasCustomStatusIndicatorName() bool {
	if o != nil && !IsNil(o.CustomStatusIndicatorName) {
		return true
	}

	return false
}

// SetCustomStatusIndicatorName gets a reference to the given string and assigns it to the CustomStatusIndicatorName field.
func (o *ProjectStatus) SetCustomStatusIndicatorName(v string) {
	o.CustomStatusIndicatorName = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectStatus) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectStatus) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectStatus) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectStatus) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ProjectStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.NoTimeFlag.IsSet() {
		toSerialize["noTimeFlag"] = o.NoTimeFlag.Get()
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if !IsNil(o.StatusIndicator) {
		toSerialize["statusIndicator"] = o.StatusIndicator
	}
	if !IsNil(o.CustomStatusIndicatorName) {
		toSerialize["customStatusIndicatorName"] = o.CustomStatusIndicatorName
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ProjectStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectStatus := _ProjectStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectStatus)

	if err != nil {
		return err
	}

	*o = ProjectStatus(varProjectStatus)

	return err
}

type NullableProjectStatus struct {
	value *ProjectStatus
	isSet bool
}

func (v NullableProjectStatus) Get() *ProjectStatus {
	return v.value
}

func (v *NullableProjectStatus) Set(val *ProjectStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectStatus(val *ProjectStatus) *NullableProjectStatus {
	return &NullableProjectStatus{value: val, isSet: true}
}

func (v NullableProjectStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
