/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProjectTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTemplate{}

// ProjectTemplate struct for ProjectTemplate
type ProjectTemplate struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 200;
	Name          string                `json:"name"`
	Description   *string               `json:"description,omitempty"`
	ConnectWiseId *string               `json:"connectWiseId,omitempty"`
	Type          *ProjectTypeReference `json:"type,omitempty"`
	Info          *map[string]string    `json:"_info,omitempty"`
}

type _ProjectTemplate ProjectTemplate

// NewProjectTemplate instantiates a new ProjectTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTemplate(name string) *ProjectTemplate {
	this := ProjectTemplate{}
	this.Name = name
	return &this
}

// NewProjectTemplateWithDefaults instantiates a new ProjectTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTemplateWithDefaults() *ProjectTemplate {
	this := ProjectTemplate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectTemplate) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplate) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectTemplate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectTemplate) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ProjectTemplate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectTemplate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectTemplate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectTemplate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectTemplate) SetDescription(v string) {
	o.Description = &v
}

// GetConnectWiseId returns the ConnectWiseId field value if set, zero value otherwise.
func (o *ProjectTemplate) GetConnectWiseId() string {
	if o == nil || IsNil(o.ConnectWiseId) {
		var ret string
		return ret
	}
	return *o.ConnectWiseId
}

// GetConnectWiseIdOk returns a tuple with the ConnectWiseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplate) GetConnectWiseIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectWiseId) {
		return nil, false
	}
	return o.ConnectWiseId, true
}

// HasConnectWiseId returns a boolean if a field has been set.
func (o *ProjectTemplate) HasConnectWiseId() bool {
	if o != nil && !IsNil(o.ConnectWiseId) {
		return true
	}

	return false
}

// SetConnectWiseId gets a reference to the given string and assigns it to the ConnectWiseId field.
func (o *ProjectTemplate) SetConnectWiseId(v string) {
	o.ConnectWiseId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectTemplate) GetType() ProjectTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ProjectTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplate) GetTypeOk() (*ProjectTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectTemplate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProjectTypeReference and assigns it to the Type field.
func (o *ProjectTemplate) SetType(v ProjectTypeReference) {
	o.Type = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectTemplate) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplate) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectTemplate) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectTemplate) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ProjectTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ConnectWiseId) {
		toSerialize["connectWiseId"] = o.ConnectWiseId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ProjectTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectTemplate := _ProjectTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectTemplate)

	if err != nil {
		return err
	}

	*o = ProjectTemplate(varProjectTemplate)

	return err
}

type NullableProjectTemplate struct {
	value *ProjectTemplate
	isSet bool
}

func (v NullableProjectTemplate) Get() *ProjectTemplate {
	return v.value
}

func (v *NullableProjectTemplate) Set(val *ProjectTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTemplate(val *ProjectTemplate) *NullableProjectTemplate {
	return &NullableProjectTemplate{value: val, isSet: true}
}

func (v NullableProjectTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
