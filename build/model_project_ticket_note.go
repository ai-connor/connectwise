/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
)

// checks if the ProjectTicketNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTicketNote{}

// ProjectTicketNote struct for ProjectTicketNote
type ProjectTicketNote struct {
	Id                    *int32             `json:"id,omitempty"`
	NoteType              NullableString     `json:"noteType,omitempty"`
	Ticket                *TicketReference   `json:"ticket,omitempty"`
	Text                  *string            `json:"text,omitempty"`
	DetailDescriptionFlag NullableBool       `json:"detailDescriptionFlag,omitempty"`
	InternalAnalysisFlag  NullableBool       `json:"internalAnalysisFlag,omitempty"`
	ResolutionFlag        NullableBool       `json:"resolutionFlag,omitempty"`
	TimeStart             *time.Time         `json:"timeStart,omitempty"`
	TimeEnd               *time.Time         `json:"timeEnd,omitempty"`
	BundledFlag           NullableBool       `json:"bundledFlag,omitempty"`
	MergedFlag            NullableBool       `json:"mergedFlag,omitempty"`
	IssueFlag             NullableBool       `json:"issueFlag,omitempty"`
	OriginalAuthor        *string            `json:"originalAuthor,omitempty"`
	Member                *MemberReference   `json:"member,omitempty"`
	Contact               *ContactReference  `json:"contact,omitempty"`
	Info                  *map[string]string `json:"_info,omitempty"`
}

// NewProjectTicketNote instantiates a new ProjectTicketNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTicketNote() *ProjectTicketNote {
	this := ProjectTicketNote{}
	return &this
}

// NewProjectTicketNoteWithDefaults instantiates a new ProjectTicketNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTicketNoteWithDefaults() *ProjectTicketNote {
	this := ProjectTicketNote{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectTicketNote) SetId(v int32) {
	o.Id = &v
}

// GetNoteType returns the NoteType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetNoteType() string {
	if o == nil || IsNil(o.NoteType.Get()) {
		var ret string
		return ret
	}
	return *o.NoteType.Get()
}

// GetNoteTypeOk returns a tuple with the NoteType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetNoteTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoteType.Get(), o.NoteType.IsSet()
}

// HasNoteType returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasNoteType() bool {
	if o != nil && o.NoteType.IsSet() {
		return true
	}

	return false
}

// SetNoteType gets a reference to the given NullableString and assigns it to the NoteType field.
func (o *ProjectTicketNote) SetNoteType(v string) {
	o.NoteType.Set(&v)
}

// SetNoteTypeNil sets the value for NoteType to be an explicit nil
func (o *ProjectTicketNote) SetNoteTypeNil() {
	o.NoteType.Set(nil)
}

// UnsetNoteType ensures that no value is present for NoteType, not even an explicit nil
func (o *ProjectTicketNote) UnsetNoteType() {
	o.NoteType.Unset()
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *ProjectTicketNote) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ProjectTicketNote) SetText(v string) {
	o.Text = &v
}

// GetDetailDescriptionFlag returns the DetailDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetDetailDescriptionFlag() bool {
	if o == nil || IsNil(o.DetailDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DetailDescriptionFlag.Get()
}

// GetDetailDescriptionFlagOk returns a tuple with the DetailDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetDetailDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetailDescriptionFlag.Get(), o.DetailDescriptionFlag.IsSet()
}

// HasDetailDescriptionFlag returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasDetailDescriptionFlag() bool {
	if o != nil && o.DetailDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetDetailDescriptionFlag gets a reference to the given NullableBool and assigns it to the DetailDescriptionFlag field.
func (o *ProjectTicketNote) SetDetailDescriptionFlag(v bool) {
	o.DetailDescriptionFlag.Set(&v)
}

// SetDetailDescriptionFlagNil sets the value for DetailDescriptionFlag to be an explicit nil
func (o *ProjectTicketNote) SetDetailDescriptionFlagNil() {
	o.DetailDescriptionFlag.Set(nil)
}

// UnsetDetailDescriptionFlag ensures that no value is present for DetailDescriptionFlag, not even an explicit nil
func (o *ProjectTicketNote) UnsetDetailDescriptionFlag() {
	o.DetailDescriptionFlag.Unset()
}

// GetInternalAnalysisFlag returns the InternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.InternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InternalAnalysisFlag.Get()
}

// GetInternalAnalysisFlagOk returns a tuple with the InternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalAnalysisFlag.Get(), o.InternalAnalysisFlag.IsSet()
}

// HasInternalAnalysisFlag returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasInternalAnalysisFlag() bool {
	if o != nil && o.InternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the InternalAnalysisFlag field.
func (o *ProjectTicketNote) SetInternalAnalysisFlag(v bool) {
	o.InternalAnalysisFlag.Set(&v)
}

// SetInternalAnalysisFlagNil sets the value for InternalAnalysisFlag to be an explicit nil
func (o *ProjectTicketNote) SetInternalAnalysisFlagNil() {
	o.InternalAnalysisFlag.Set(nil)
}

// UnsetInternalAnalysisFlag ensures that no value is present for InternalAnalysisFlag, not even an explicit nil
func (o *ProjectTicketNote) UnsetInternalAnalysisFlag() {
	o.InternalAnalysisFlag.Unset()
}

// GetResolutionFlag returns the ResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetResolutionFlag() bool {
	if o == nil || IsNil(o.ResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ResolutionFlag.Get()
}

// GetResolutionFlagOk returns a tuple with the ResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionFlag.Get(), o.ResolutionFlag.IsSet()
}

// HasResolutionFlag returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasResolutionFlag() bool {
	if o != nil && o.ResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetResolutionFlag gets a reference to the given NullableBool and assigns it to the ResolutionFlag field.
func (o *ProjectTicketNote) SetResolutionFlag(v bool) {
	o.ResolutionFlag.Set(&v)
}

// SetResolutionFlagNil sets the value for ResolutionFlag to be an explicit nil
func (o *ProjectTicketNote) SetResolutionFlagNil() {
	o.ResolutionFlag.Set(nil)
}

// UnsetResolutionFlag ensures that no value is present for ResolutionFlag, not even an explicit nil
func (o *ProjectTicketNote) UnsetResolutionFlag() {
	o.ResolutionFlag.Unset()
}

// GetTimeStart returns the TimeStart field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetTimeStart() time.Time {
	if o == nil || IsNil(o.TimeStart) {
		var ret time.Time
		return ret
	}
	return *o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetTimeStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStart) {
		return nil, false
	}
	return o.TimeStart, true
}

// HasTimeStart returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasTimeStart() bool {
	if o != nil && !IsNil(o.TimeStart) {
		return true
	}

	return false
}

// SetTimeStart gets a reference to the given time.Time and assigns it to the TimeStart field.
func (o *ProjectTicketNote) SetTimeStart(v time.Time) {
	o.TimeStart = &v
}

// GetTimeEnd returns the TimeEnd field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetTimeEnd() time.Time {
	if o == nil || IsNil(o.TimeEnd) {
		var ret time.Time
		return ret
	}
	return *o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetTimeEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeEnd) {
		return nil, false
	}
	return o.TimeEnd, true
}

// HasTimeEnd returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasTimeEnd() bool {
	if o != nil && !IsNil(o.TimeEnd) {
		return true
	}

	return false
}

// SetTimeEnd gets a reference to the given time.Time and assigns it to the TimeEnd field.
func (o *ProjectTicketNote) SetTimeEnd(v time.Time) {
	o.TimeEnd = &v
}

// GetBundledFlag returns the BundledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetBundledFlag() bool {
	if o == nil || IsNil(o.BundledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BundledFlag.Get()
}

// GetBundledFlagOk returns a tuple with the BundledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetBundledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BundledFlag.Get(), o.BundledFlag.IsSet()
}

// HasBundledFlag returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasBundledFlag() bool {
	if o != nil && o.BundledFlag.IsSet() {
		return true
	}

	return false
}

// SetBundledFlag gets a reference to the given NullableBool and assigns it to the BundledFlag field.
func (o *ProjectTicketNote) SetBundledFlag(v bool) {
	o.BundledFlag.Set(&v)
}

// SetBundledFlagNil sets the value for BundledFlag to be an explicit nil
func (o *ProjectTicketNote) SetBundledFlagNil() {
	o.BundledFlag.Set(nil)
}

// UnsetBundledFlag ensures that no value is present for BundledFlag, not even an explicit nil
func (o *ProjectTicketNote) UnsetBundledFlag() {
	o.BundledFlag.Unset()
}

// GetMergedFlag returns the MergedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetMergedFlag() bool {
	if o == nil || IsNil(o.MergedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MergedFlag.Get()
}

// GetMergedFlagOk returns a tuple with the MergedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetMergedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergedFlag.Get(), o.MergedFlag.IsSet()
}

// HasMergedFlag returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasMergedFlag() bool {
	if o != nil && o.MergedFlag.IsSet() {
		return true
	}

	return false
}

// SetMergedFlag gets a reference to the given NullableBool and assigns it to the MergedFlag field.
func (o *ProjectTicketNote) SetMergedFlag(v bool) {
	o.MergedFlag.Set(&v)
}

// SetMergedFlagNil sets the value for MergedFlag to be an explicit nil
func (o *ProjectTicketNote) SetMergedFlagNil() {
	o.MergedFlag.Set(nil)
}

// UnsetMergedFlag ensures that no value is present for MergedFlag, not even an explicit nil
func (o *ProjectTicketNote) UnsetMergedFlag() {
	o.MergedFlag.Unset()
}

// GetIssueFlag returns the IssueFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicketNote) GetIssueFlag() bool {
	if o == nil || IsNil(o.IssueFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IssueFlag.Get()
}

// GetIssueFlagOk returns a tuple with the IssueFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicketNote) GetIssueFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueFlag.Get(), o.IssueFlag.IsSet()
}

// HasIssueFlag returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasIssueFlag() bool {
	if o != nil && o.IssueFlag.IsSet() {
		return true
	}

	return false
}

// SetIssueFlag gets a reference to the given NullableBool and assigns it to the IssueFlag field.
func (o *ProjectTicketNote) SetIssueFlag(v bool) {
	o.IssueFlag.Set(&v)
}

// SetIssueFlagNil sets the value for IssueFlag to be an explicit nil
func (o *ProjectTicketNote) SetIssueFlagNil() {
	o.IssueFlag.Set(nil)
}

// UnsetIssueFlag ensures that no value is present for IssueFlag, not even an explicit nil
func (o *ProjectTicketNote) UnsetIssueFlag() {
	o.IssueFlag.Unset()
}

// GetOriginalAuthor returns the OriginalAuthor field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetOriginalAuthor() string {
	if o == nil || IsNil(o.OriginalAuthor) {
		var ret string
		return ret
	}
	return *o.OriginalAuthor
}

// GetOriginalAuthorOk returns a tuple with the OriginalAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetOriginalAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalAuthor) {
		return nil, false
	}
	return o.OriginalAuthor, true
}

// HasOriginalAuthor returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasOriginalAuthor() bool {
	if o != nil && !IsNil(o.OriginalAuthor) {
		return true
	}

	return false
}

// SetOriginalAuthor gets a reference to the given string and assigns it to the OriginalAuthor field.
func (o *ProjectTicketNote) SetOriginalAuthor(v string) {
	o.OriginalAuthor = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ProjectTicketNote) SetMember(v MemberReference) {
	o.Member = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ProjectTicketNote) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectTicketNote) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicketNote) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectTicketNote) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectTicketNote) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ProjectTicketNote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTicketNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.NoteType.IsSet() {
		toSerialize["noteType"] = o.NoteType.Get()
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if o.DetailDescriptionFlag.IsSet() {
		toSerialize["detailDescriptionFlag"] = o.DetailDescriptionFlag.Get()
	}
	if o.InternalAnalysisFlag.IsSet() {
		toSerialize["internalAnalysisFlag"] = o.InternalAnalysisFlag.Get()
	}
	if o.ResolutionFlag.IsSet() {
		toSerialize["resolutionFlag"] = o.ResolutionFlag.Get()
	}
	if !IsNil(o.TimeStart) {
		toSerialize["timeStart"] = o.TimeStart
	}
	if !IsNil(o.TimeEnd) {
		toSerialize["timeEnd"] = o.TimeEnd
	}
	if o.BundledFlag.IsSet() {
		toSerialize["bundledFlag"] = o.BundledFlag.Get()
	}
	if o.MergedFlag.IsSet() {
		toSerialize["mergedFlag"] = o.MergedFlag.Get()
	}
	if o.IssueFlag.IsSet() {
		toSerialize["issueFlag"] = o.IssueFlag.Get()
	}
	if !IsNil(o.OriginalAuthor) {
		toSerialize["originalAuthor"] = o.OriginalAuthor
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableProjectTicketNote struct {
	value *ProjectTicketNote
	isSet bool
}

func (v NullableProjectTicketNote) Get() *ProjectTicketNote {
	return v.value
}

func (v *NullableProjectTicketNote) Set(val *ProjectTicketNote) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTicketNote) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTicketNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTicketNote(val *ProjectTicketNote) *NullableProjectTicketNote {
	return &NullableProjectTicketNote{value: val, isSet: true}
}

func (v NullableProjectTicketNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTicketNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
