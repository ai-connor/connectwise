/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ProjectWorkplan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectWorkplan{}

// ProjectWorkplan struct for ProjectWorkplan
type ProjectWorkplan struct {
	ProjectId *int32                        `json:"projectId,omitempty"`
	Phases    []ProjectWorkplanProjectPhase `json:"phases,omitempty"`
}

// NewProjectWorkplan instantiates a new ProjectWorkplan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectWorkplan() *ProjectWorkplan {
	this := ProjectWorkplan{}
	return &this
}

// NewProjectWorkplanWithDefaults instantiates a new ProjectWorkplan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWorkplanWithDefaults() *ProjectWorkplan {
	this := ProjectWorkplan{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ProjectWorkplan) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplan) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectWorkplan) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ProjectWorkplan) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetPhases returns the Phases field value if set, zero value otherwise.
func (o *ProjectWorkplan) GetPhases() []ProjectWorkplanProjectPhase {
	if o == nil || IsNil(o.Phases) {
		var ret []ProjectWorkplanProjectPhase
		return ret
	}
	return o.Phases
}

// GetPhasesOk returns a tuple with the Phases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplan) GetPhasesOk() ([]ProjectWorkplanProjectPhase, bool) {
	if o == nil || IsNil(o.Phases) {
		return nil, false
	}
	return o.Phases, true
}

// HasPhases returns a boolean if a field has been set.
func (o *ProjectWorkplan) HasPhases() bool {
	if o != nil && !IsNil(o.Phases) {
		return true
	}

	return false
}

// SetPhases gets a reference to the given []ProjectWorkplanProjectPhase and assigns it to the Phases field.
func (o *ProjectWorkplan) SetPhases(v []ProjectWorkplanProjectPhase) {
	o.Phases = v
}

func (o ProjectWorkplan) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectWorkplan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.Phases) {
		toSerialize["phases"] = o.Phases
	}
	return toSerialize, nil
}

type NullableProjectWorkplan struct {
	value *ProjectWorkplan
	isSet bool
}

func (v NullableProjectWorkplan) Get() *ProjectWorkplan {
	return v.value
}

func (v *NullableProjectWorkplan) Set(val *ProjectWorkplan) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectWorkplan) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectWorkplan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectWorkplan(val *ProjectWorkplan) *NullableProjectWorkplan {
	return &NullableProjectWorkplan{value: val, isSet: true}
}

func (v NullableProjectWorkplan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectWorkplan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
