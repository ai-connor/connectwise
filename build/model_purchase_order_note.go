/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the PurchaseOrderNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrderNote{}

// PurchaseOrderNote struct for PurchaseOrderNote
type PurchaseOrderNote struct {
	Id                  *int32             `json:"id,omitempty"`
	PurchaseHeaderRecID NullableInt32      `json:"purchaseHeaderRecID,omitempty"`
	Text                *string            `json:"text,omitempty"`
	Type                *NoteTypeReference `json:"type,omitempty"`
	Flagged             NullableBool       `json:"flagged,omitempty"`
	EnteredBy           *string            `json:"enteredBy,omitempty"`
	Info                *map[string]string `json:"_info,omitempty"`
}

// NewPurchaseOrderNote instantiates a new PurchaseOrderNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrderNote() *PurchaseOrderNote {
	this := PurchaseOrderNote{}
	return &this
}

// NewPurchaseOrderNoteWithDefaults instantiates a new PurchaseOrderNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderNoteWithDefaults() *PurchaseOrderNote {
	this := PurchaseOrderNote{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PurchaseOrderNote) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderNote) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PurchaseOrderNote) SetId(v int32) {
	o.Id = &v
}

// GetPurchaseHeaderRecID returns the PurchaseHeaderRecID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderNote) GetPurchaseHeaderRecID() int32 {
	if o == nil || IsNil(o.PurchaseHeaderRecID.Get()) {
		var ret int32
		return ret
	}
	return *o.PurchaseHeaderRecID.Get()
}

// GetPurchaseHeaderRecIDOk returns a tuple with the PurchaseHeaderRecID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderNote) GetPurchaseHeaderRecIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseHeaderRecID.Get(), o.PurchaseHeaderRecID.IsSet()
}

// HasPurchaseHeaderRecID returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasPurchaseHeaderRecID() bool {
	if o != nil && o.PurchaseHeaderRecID.IsSet() {
		return true
	}

	return false
}

// SetPurchaseHeaderRecID gets a reference to the given NullableInt32 and assigns it to the PurchaseHeaderRecID field.
func (o *PurchaseOrderNote) SetPurchaseHeaderRecID(v int32) {
	o.PurchaseHeaderRecID.Set(&v)
}

// SetPurchaseHeaderRecIDNil sets the value for PurchaseHeaderRecID to be an explicit nil
func (o *PurchaseOrderNote) SetPurchaseHeaderRecIDNil() {
	o.PurchaseHeaderRecID.Set(nil)
}

// UnsetPurchaseHeaderRecID ensures that no value is present for PurchaseHeaderRecID, not even an explicit nil
func (o *PurchaseOrderNote) UnsetPurchaseHeaderRecID() {
	o.PurchaseHeaderRecID.Unset()
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *PurchaseOrderNote) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderNote) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *PurchaseOrderNote) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PurchaseOrderNote) GetType() NoteTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret NoteTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderNote) GetTypeOk() (*NoteTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NoteTypeReference and assigns it to the Type field.
func (o *PurchaseOrderNote) SetType(v NoteTypeReference) {
	o.Type = &v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderNote) GetFlagged() bool {
	if o == nil || IsNil(o.Flagged.Get()) {
		var ret bool
		return ret
	}
	return *o.Flagged.Get()
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderNote) GetFlaggedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flagged.Get(), o.Flagged.IsSet()
}

// HasFlagged returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasFlagged() bool {
	if o != nil && o.Flagged.IsSet() {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given NullableBool and assigns it to the Flagged field.
func (o *PurchaseOrderNote) SetFlagged(v bool) {
	o.Flagged.Set(&v)
}

// SetFlaggedNil sets the value for Flagged to be an explicit nil
func (o *PurchaseOrderNote) SetFlaggedNil() {
	o.Flagged.Set(nil)
}

// UnsetFlagged ensures that no value is present for Flagged, not even an explicit nil
func (o *PurchaseOrderNote) UnsetFlagged() {
	o.Flagged.Unset()
}

// GetEnteredBy returns the EnteredBy field value if set, zero value otherwise.
func (o *PurchaseOrderNote) GetEnteredBy() string {
	if o == nil || IsNil(o.EnteredBy) {
		var ret string
		return ret
	}
	return *o.EnteredBy
}

// GetEnteredByOk returns a tuple with the EnteredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderNote) GetEnteredByOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredBy) {
		return nil, false
	}
	return o.EnteredBy, true
}

// HasEnteredBy returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasEnteredBy() bool {
	if o != nil && !IsNil(o.EnteredBy) {
		return true
	}

	return false
}

// SetEnteredBy gets a reference to the given string and assigns it to the EnteredBy field.
func (o *PurchaseOrderNote) SetEnteredBy(v string) {
	o.EnteredBy = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PurchaseOrderNote) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderNote) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PurchaseOrderNote) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PurchaseOrderNote) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PurchaseOrderNote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrderNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.PurchaseHeaderRecID.IsSet() {
		toSerialize["purchaseHeaderRecID"] = o.PurchaseHeaderRecID.Get()
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Flagged.IsSet() {
		toSerialize["flagged"] = o.Flagged.Get()
	}
	if !IsNil(o.EnteredBy) {
		toSerialize["enteredBy"] = o.EnteredBy
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullablePurchaseOrderNote struct {
	value *PurchaseOrderNote
	isSet bool
}

func (v NullablePurchaseOrderNote) Get() *PurchaseOrderNote {
	return v.value
}

func (v *NullablePurchaseOrderNote) Set(val *PurchaseOrderNote) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderNote) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderNote(val *PurchaseOrderNote) *NullablePurchaseOrderNote {
	return &NullablePurchaseOrderNote{value: val, isSet: true}
}

func (v NullablePurchaseOrderNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
