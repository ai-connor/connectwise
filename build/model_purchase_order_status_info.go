/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the PurchaseOrderStatusInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrderStatusInfo{}

// PurchaseOrderStatusInfo struct for PurchaseOrderStatusInfo
type PurchaseOrderStatusInfo struct {
	Id                *int32             `json:"id,omitempty"`
	Name              *string            `json:"name,omitempty"`
	DefaultFlag       NullableBool       `json:"defaultFlag,omitempty"`
	ClosedFlag        NullableBool       `json:"closedFlag,omitempty"`
	InactiveFlag      NullableBool       `json:"inactiveFlag,omitempty"`
	DefaultClosedFlag NullableBool       `json:"defaultClosedFlag,omitempty"`
	SortOrder         NullableInt32      `json:"sortOrder,omitempty"`
	Info              *map[string]string `json:"_info,omitempty"`
}

// NewPurchaseOrderStatusInfo instantiates a new PurchaseOrderStatusInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrderStatusInfo() *PurchaseOrderStatusInfo {
	this := PurchaseOrderStatusInfo{}
	return &this
}

// NewPurchaseOrderStatusInfoWithDefaults instantiates a new PurchaseOrderStatusInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderStatusInfoWithDefaults() *PurchaseOrderStatusInfo {
	this := PurchaseOrderStatusInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PurchaseOrderStatusInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderStatusInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PurchaseOrderStatusInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PurchaseOrderStatusInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderStatusInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PurchaseOrderStatusInfo) SetName(v string) {
	o.Name = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderStatusInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderStatusInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *PurchaseOrderStatusInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *PurchaseOrderStatusInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *PurchaseOrderStatusInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderStatusInfo) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderStatusInfo) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *PurchaseOrderStatusInfo) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}

// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *PurchaseOrderStatusInfo) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *PurchaseOrderStatusInfo) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderStatusInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderStatusInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *PurchaseOrderStatusInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *PurchaseOrderStatusInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *PurchaseOrderStatusInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetDefaultClosedFlag returns the DefaultClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderStatusInfo) GetDefaultClosedFlag() bool {
	if o == nil || IsNil(o.DefaultClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultClosedFlag.Get()
}

// GetDefaultClosedFlagOk returns a tuple with the DefaultClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderStatusInfo) GetDefaultClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultClosedFlag.Get(), o.DefaultClosedFlag.IsSet()
}

// HasDefaultClosedFlag returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasDefaultClosedFlag() bool {
	if o != nil && o.DefaultClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultClosedFlag gets a reference to the given NullableBool and assigns it to the DefaultClosedFlag field.
func (o *PurchaseOrderStatusInfo) SetDefaultClosedFlag(v bool) {
	o.DefaultClosedFlag.Set(&v)
}

// SetDefaultClosedFlagNil sets the value for DefaultClosedFlag to be an explicit nil
func (o *PurchaseOrderStatusInfo) SetDefaultClosedFlagNil() {
	o.DefaultClosedFlag.Set(nil)
}

// UnsetDefaultClosedFlag ensures that no value is present for DefaultClosedFlag, not even an explicit nil
func (o *PurchaseOrderStatusInfo) UnsetDefaultClosedFlag() {
	o.DefaultClosedFlag.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrderStatusInfo) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrderStatusInfo) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *PurchaseOrderStatusInfo) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *PurchaseOrderStatusInfo) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *PurchaseOrderStatusInfo) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PurchaseOrderStatusInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrderStatusInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PurchaseOrderStatusInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PurchaseOrderStatusInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PurchaseOrderStatusInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrderStatusInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.DefaultClosedFlag.IsSet() {
		toSerialize["defaultClosedFlag"] = o.DefaultClosedFlag.Get()
	}
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullablePurchaseOrderStatusInfo struct {
	value *PurchaseOrderStatusInfo
	isSet bool
}

func (v NullablePurchaseOrderStatusInfo) Get() *PurchaseOrderStatusInfo {
	return v.value
}

func (v *NullablePurchaseOrderStatusInfo) Set(val *PurchaseOrderStatusInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderStatusInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderStatusInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderStatusInfo(val *PurchaseOrderStatusInfo) *NullablePurchaseOrderStatusInfo {
	return &NullablePurchaseOrderStatusInfo{value: val, isSet: true}
}

func (v NullablePurchaseOrderStatusInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderStatusInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
