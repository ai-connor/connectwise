/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReportCardDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportCardDetail{}

// ReportCardDetail struct for ReportCardDetail
type ReportCardDetail struct {
	Id         *int32               `json:"id,omitempty"`
	Kpi        KPIReference         `json:"kpi"`
	SortOrder  NullableInt32        `json:"sortOrder,omitempty"`
	ReportCard *ReportCardReference `json:"reportCard,omitempty"`
	Info       *map[string]string   `json:"_info,omitempty"`
}

type _ReportCardDetail ReportCardDetail

// NewReportCardDetail instantiates a new ReportCardDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportCardDetail(kpi KPIReference) *ReportCardDetail {
	this := ReportCardDetail{}
	this.Kpi = kpi
	return &this
}

// NewReportCardDetailWithDefaults instantiates a new ReportCardDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportCardDetailWithDefaults() *ReportCardDetail {
	this := ReportCardDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReportCardDetail) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportCardDetail) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReportCardDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReportCardDetail) SetId(v int32) {
	o.Id = &v
}

// GetKpi returns the Kpi field value
func (o *ReportCardDetail) GetKpi() KPIReference {
	if o == nil {
		var ret KPIReference
		return ret
	}

	return o.Kpi
}

// GetKpiOk returns a tuple with the Kpi field value
// and a boolean to check if the value has been set.
func (o *ReportCardDetail) GetKpiOk() (*KPIReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kpi, true
}

// SetKpi sets field value
func (o *ReportCardDetail) SetKpi(v KPIReference) {
	o.Kpi = v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportCardDetail) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportCardDetail) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *ReportCardDetail) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *ReportCardDetail) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *ReportCardDetail) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *ReportCardDetail) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetReportCard returns the ReportCard field value if set, zero value otherwise.
func (o *ReportCardDetail) GetReportCard() ReportCardReference {
	if o == nil || IsNil(o.ReportCard) {
		var ret ReportCardReference
		return ret
	}
	return *o.ReportCard
}

// GetReportCardOk returns a tuple with the ReportCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportCardDetail) GetReportCardOk() (*ReportCardReference, bool) {
	if o == nil || IsNil(o.ReportCard) {
		return nil, false
	}
	return o.ReportCard, true
}

// HasReportCard returns a boolean if a field has been set.
func (o *ReportCardDetail) HasReportCard() bool {
	if o != nil && !IsNil(o.ReportCard) {
		return true
	}

	return false
}

// SetReportCard gets a reference to the given ReportCardReference and assigns it to the ReportCard field.
func (o *ReportCardDetail) SetReportCard(v ReportCardReference) {
	o.ReportCard = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ReportCardDetail) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportCardDetail) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ReportCardDetail) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ReportCardDetail) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ReportCardDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportCardDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["kpi"] = o.Kpi
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	if !IsNil(o.ReportCard) {
		toSerialize["reportCard"] = o.ReportCard
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ReportCardDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kpi",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportCardDetail := _ReportCardDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportCardDetail)

	if err != nil {
		return err
	}

	*o = ReportCardDetail(varReportCardDetail)

	return err
}

type NullableReportCardDetail struct {
	value *ReportCardDetail
	isSet bool
}

func (v NullableReportCardDetail) Get() *ReportCardDetail {
	return v.value
}

func (v *NullableReportCardDetail) Set(val *ReportCardDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableReportCardDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableReportCardDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportCardDetail(val *ReportCardDetail) *NullableReportCardDetail {
	return &NullableReportCardDetail{value: val, isSet: true}
}

func (v NullableReportCardDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportCardDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
