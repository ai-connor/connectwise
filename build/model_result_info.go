/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ResultInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultInfo{}

// ResultInfo struct for ResultInfo
type ResultInfo struct {
	Success       *bool                 `json:"success,omitempty"`
	OriginalIndex *int32                `json:"originalIndex,omitempty"`
	StatusCode    *int32                `json:"statusCode,omitempty"`
	Data          *IRestIdentifiedItem  `json:"data,omitempty"`
	Error         *ErrorResponseMessage `json:"error,omitempty"`
}

// NewResultInfo instantiates a new ResultInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultInfo() *ResultInfo {
	this := ResultInfo{}
	return &this
}

// NewResultInfoWithDefaults instantiates a new ResultInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultInfoWithDefaults() *ResultInfo {
	this := ResultInfo{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ResultInfo) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ResultInfo) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ResultInfo) SetSuccess(v bool) {
	o.Success = &v
}

// GetOriginalIndex returns the OriginalIndex field value if set, zero value otherwise.
func (o *ResultInfo) GetOriginalIndex() int32 {
	if o == nil || IsNil(o.OriginalIndex) {
		var ret int32
		return ret
	}
	return *o.OriginalIndex
}

// GetOriginalIndexOk returns a tuple with the OriginalIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetOriginalIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalIndex) {
		return nil, false
	}
	return o.OriginalIndex, true
}

// HasOriginalIndex returns a boolean if a field has been set.
func (o *ResultInfo) HasOriginalIndex() bool {
	if o != nil && !IsNil(o.OriginalIndex) {
		return true
	}

	return false
}

// SetOriginalIndex gets a reference to the given int32 and assigns it to the OriginalIndex field.
func (o *ResultInfo) SetOriginalIndex(v int32) {
	o.OriginalIndex = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ResultInfo) GetStatusCode() int32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ResultInfo) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ResultInfo) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResultInfo) GetData() IRestIdentifiedItem {
	if o == nil || IsNil(o.Data) {
		var ret IRestIdentifiedItem
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetDataOk() (*IRestIdentifiedItem, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResultInfo) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given IRestIdentifiedItem and assigns it to the Data field.
func (o *ResultInfo) SetData(v IRestIdentifiedItem) {
	o.Data = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ResultInfo) GetError() ErrorResponseMessage {
	if o == nil || IsNil(o.Error) {
		var ret ErrorResponseMessage
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetErrorOk() (*ErrorResponseMessage, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ResultInfo) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorResponseMessage and assigns it to the Error field.
func (o *ResultInfo) SetError(v ErrorResponseMessage) {
	o.Error = &v
}

func (o ResultInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.OriginalIndex) {
		toSerialize["originalIndex"] = o.OriginalIndex
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableResultInfo struct {
	value *ResultInfo
	isSet bool
}

func (v NullableResultInfo) Get() *ResultInfo {
	return v.value
}

func (v *NullableResultInfo) Set(val *ResultInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResultInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResultInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultInfo(val *ResultInfo) *NullableResultInfo {
	return &NullableResultInfo{value: val, isSet: true}
}

func (v NullableResultInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
