/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RmaStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RmaStatus{}

// RmaStatus struct for RmaStatus
type RmaStatus struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name          string                           `json:"name"`
	DefaultFlag   NullableBool                     `json:"defaultFlag,omitempty"`
	SortOrder     NullableInt32                    `json:"sortOrder,omitempty"`
	ClosedFlag    NullableBool                     `json:"closedFlag,omitempty"`
	EmailTemplate *RmaStatusEmailTemplateReference `json:"emailTemplate,omitempty"`
	Info          *map[string]string               `json:"_info,omitempty"`
}

type _RmaStatus RmaStatus

// NewRmaStatus instantiates a new RmaStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRmaStatus(name string) *RmaStatus {
	this := RmaStatus{}
	this.Name = name
	return &this
}

// NewRmaStatusWithDefaults instantiates a new RmaStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRmaStatusWithDefaults() *RmaStatus {
	this := RmaStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RmaStatus) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaStatus) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RmaStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RmaStatus) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *RmaStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RmaStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RmaStatus) SetName(v string) {
	o.Name = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RmaStatus) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RmaStatus) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *RmaStatus) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *RmaStatus) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *RmaStatus) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *RmaStatus) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RmaStatus) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RmaStatus) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *RmaStatus) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *RmaStatus) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *RmaStatus) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *RmaStatus) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RmaStatus) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RmaStatus) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *RmaStatus) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *RmaStatus) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}

// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *RmaStatus) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *RmaStatus) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetEmailTemplate returns the EmailTemplate field value if set, zero value otherwise.
func (o *RmaStatus) GetEmailTemplate() RmaStatusEmailTemplateReference {
	if o == nil || IsNil(o.EmailTemplate) {
		var ret RmaStatusEmailTemplateReference
		return ret
	}
	return *o.EmailTemplate
}

// GetEmailTemplateOk returns a tuple with the EmailTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaStatus) GetEmailTemplateOk() (*RmaStatusEmailTemplateReference, bool) {
	if o == nil || IsNil(o.EmailTemplate) {
		return nil, false
	}
	return o.EmailTemplate, true
}

// HasEmailTemplate returns a boolean if a field has been set.
func (o *RmaStatus) HasEmailTemplate() bool {
	if o != nil && !IsNil(o.EmailTemplate) {
		return true
	}

	return false
}

// SetEmailTemplate gets a reference to the given RmaStatusEmailTemplateReference and assigns it to the EmailTemplate field.
func (o *RmaStatus) SetEmailTemplate(v RmaStatusEmailTemplateReference) {
	o.EmailTemplate = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *RmaStatus) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RmaStatus) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *RmaStatus) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *RmaStatus) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o RmaStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RmaStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if !IsNil(o.EmailTemplate) {
		toSerialize["emailTemplate"] = o.EmailTemplate
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *RmaStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRmaStatus := _RmaStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRmaStatus)

	if err != nil {
		return err
	}

	*o = RmaStatus(varRmaStatus)

	return err
}

type NullableRmaStatus struct {
	value *RmaStatus
	isSet bool
}

func (v NullableRmaStatus) Get() *RmaStatus {
	return v.value
}

func (v *NullableRmaStatus) Set(val *RmaStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRmaStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRmaStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRmaStatus(val *RmaStatus) *NullableRmaStatus {
	return &NullableRmaStatus{value: val, isSet: true}
}

func (v NullableRmaStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRmaStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
