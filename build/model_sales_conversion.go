/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the SalesConversion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesConversion{}

// SalesConversion struct for SalesConversion
type SalesConversion struct {
	ParentType  *string                  `json:"parentType,omitempty"`
	ConvertedTo *ConversionTypeReference `json:"convertedTo,omitempty"`
	Info        *map[string]string       `json:"_info,omitempty"`
}

// NewSalesConversion instantiates a new SalesConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesConversion() *SalesConversion {
	this := SalesConversion{}
	return &this
}

// NewSalesConversionWithDefaults instantiates a new SalesConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesConversionWithDefaults() *SalesConversion {
	this := SalesConversion{}
	return &this
}

// GetParentType returns the ParentType field value if set, zero value otherwise.
func (o *SalesConversion) GetParentType() string {
	if o == nil || IsNil(o.ParentType) {
		var ret string
		return ret
	}
	return *o.ParentType
}

// GetParentTypeOk returns a tuple with the ParentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesConversion) GetParentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ParentType) {
		return nil, false
	}
	return o.ParentType, true
}

// HasParentType returns a boolean if a field has been set.
func (o *SalesConversion) HasParentType() bool {
	if o != nil && !IsNil(o.ParentType) {
		return true
	}

	return false
}

// SetParentType gets a reference to the given string and assigns it to the ParentType field.
func (o *SalesConversion) SetParentType(v string) {
	o.ParentType = &v
}

// GetConvertedTo returns the ConvertedTo field value if set, zero value otherwise.
func (o *SalesConversion) GetConvertedTo() ConversionTypeReference {
	if o == nil || IsNil(o.ConvertedTo) {
		var ret ConversionTypeReference
		return ret
	}
	return *o.ConvertedTo
}

// GetConvertedToOk returns a tuple with the ConvertedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesConversion) GetConvertedToOk() (*ConversionTypeReference, bool) {
	if o == nil || IsNil(o.ConvertedTo) {
		return nil, false
	}
	return o.ConvertedTo, true
}

// HasConvertedTo returns a boolean if a field has been set.
func (o *SalesConversion) HasConvertedTo() bool {
	if o != nil && !IsNil(o.ConvertedTo) {
		return true
	}

	return false
}

// SetConvertedTo gets a reference to the given ConversionTypeReference and assigns it to the ConvertedTo field.
func (o *SalesConversion) SetConvertedTo(v ConversionTypeReference) {
	o.ConvertedTo = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SalesConversion) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesConversion) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SalesConversion) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SalesConversion) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SalesConversion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesConversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentType) {
		toSerialize["parentType"] = o.ParentType
	}
	if !IsNil(o.ConvertedTo) {
		toSerialize["convertedTo"] = o.ConvertedTo
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableSalesConversion struct {
	value *SalesConversion
	isSet bool
}

func (v NullableSalesConversion) Get() *SalesConversion {
	return v.value
}

func (v *NullableSalesConversion) Set(val *SalesConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesConversion(val *SalesConversion) *NullableSalesConversion {
	return &NullableSalesConversion{value: val, isSet: true}
}

func (v NullableSalesConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
