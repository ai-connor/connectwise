/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SalesProbability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesProbability{}

// SalesProbability struct for SalesProbability
type SalesProbability struct {
	Id          *int32             `json:"id,omitempty"`
	Probability int32              `json:"probability"`
	Info        *map[string]string `json:"_info,omitempty"`
}

type _SalesProbability SalesProbability

// NewSalesProbability instantiates a new SalesProbability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesProbability(probability int32) *SalesProbability {
	this := SalesProbability{}
	this.Probability = probability
	return &this
}

// NewSalesProbabilityWithDefaults instantiates a new SalesProbability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesProbabilityWithDefaults() *SalesProbability {
	this := SalesProbability{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SalesProbability) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesProbability) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SalesProbability) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SalesProbability) SetId(v int32) {
	o.Id = &v
}

// GetProbability returns the Probability field value
func (o *SalesProbability) GetProbability() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value
// and a boolean to check if the value has been set.
func (o *SalesProbability) GetProbabilityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Probability, true
}

// SetProbability sets field value
func (o *SalesProbability) SetProbability(v int32) {
	o.Probability = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SalesProbability) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesProbability) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SalesProbability) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SalesProbability) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SalesProbability) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesProbability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["probability"] = o.Probability
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SalesProbability) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"probability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSalesProbability := _SalesProbability{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSalesProbability)

	if err != nil {
		return err
	}

	*o = SalesProbability(varSalesProbability)

	return err
}

type NullableSalesProbability struct {
	value *SalesProbability
	isSet bool
}

func (v NullableSalesProbability) Get() *SalesProbability {
	return v.value
}

func (v *NullableSalesProbability) Set(val *SalesProbability) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesProbability) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesProbability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesProbability(val *SalesProbability) *NullableSalesProbability {
	return &NullableSalesProbability{value: val, isSet: true}
}

func (v NullableSalesProbability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesProbability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
