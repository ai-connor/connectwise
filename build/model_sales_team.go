/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SalesTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesTeam{}

// SalesTeam struct for SalesTeam
type SalesTeam struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 20;
	SalesTeamIdentifier string `json:"salesTeamIdentifier"`
	//  Max length: 50;
	SalesTeamDescription string                  `json:"salesTeamDescription"`
	SalesTeamLocation    SystemLocationReference `json:"salesTeamLocation"`
	InactiveFlag         NullableBool            `json:"inactiveFlag,omitempty"`
	Info                 *map[string]string      `json:"_info,omitempty"`
}

type _SalesTeam SalesTeam

// NewSalesTeam instantiates a new SalesTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesTeam(salesTeamIdentifier string, salesTeamDescription string, salesTeamLocation SystemLocationReference) *SalesTeam {
	this := SalesTeam{}
	this.SalesTeamIdentifier = salesTeamIdentifier
	this.SalesTeamDescription = salesTeamDescription
	this.SalesTeamLocation = salesTeamLocation
	return &this
}

// NewSalesTeamWithDefaults instantiates a new SalesTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesTeamWithDefaults() *SalesTeam {
	this := SalesTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SalesTeam) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesTeam) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SalesTeam) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SalesTeam) SetId(v int32) {
	o.Id = &v
}

// GetSalesTeamIdentifier returns the SalesTeamIdentifier field value
func (o *SalesTeam) GetSalesTeamIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SalesTeamIdentifier
}

// GetSalesTeamIdentifierOk returns a tuple with the SalesTeamIdentifier field value
// and a boolean to check if the value has been set.
func (o *SalesTeam) GetSalesTeamIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTeamIdentifier, true
}

// SetSalesTeamIdentifier sets field value
func (o *SalesTeam) SetSalesTeamIdentifier(v string) {
	o.SalesTeamIdentifier = v
}

// GetSalesTeamDescription returns the SalesTeamDescription field value
func (o *SalesTeam) GetSalesTeamDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SalesTeamDescription
}

// GetSalesTeamDescriptionOk returns a tuple with the SalesTeamDescription field value
// and a boolean to check if the value has been set.
func (o *SalesTeam) GetSalesTeamDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTeamDescription, true
}

// SetSalesTeamDescription sets field value
func (o *SalesTeam) SetSalesTeamDescription(v string) {
	o.SalesTeamDescription = v
}

// GetSalesTeamLocation returns the SalesTeamLocation field value
func (o *SalesTeam) GetSalesTeamLocation() SystemLocationReference {
	if o == nil {
		var ret SystemLocationReference
		return ret
	}

	return o.SalesTeamLocation
}

// GetSalesTeamLocationOk returns a tuple with the SalesTeamLocation field value
// and a boolean to check if the value has been set.
func (o *SalesTeam) GetSalesTeamLocationOk() (*SystemLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTeamLocation, true
}

// SetSalesTeamLocation sets field value
func (o *SalesTeam) SetSalesTeamLocation(v SystemLocationReference) {
	o.SalesTeamLocation = v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SalesTeam) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SalesTeam) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *SalesTeam) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *SalesTeam) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *SalesTeam) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *SalesTeam) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SalesTeam) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesTeam) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SalesTeam) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SalesTeam) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SalesTeam) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["salesTeamIdentifier"] = o.SalesTeamIdentifier
	toSerialize["salesTeamDescription"] = o.SalesTeamDescription
	toSerialize["salesTeamLocation"] = o.SalesTeamLocation
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SalesTeam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"salesTeamIdentifier",
		"salesTeamDescription",
		"salesTeamLocation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSalesTeam := _SalesTeam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSalesTeam)

	if err != nil {
		return err
	}

	*o = SalesTeam(varSalesTeam)

	return err
}

type NullableSalesTeam struct {
	value *SalesTeam
	isSet bool
}

func (v NullableSalesTeam) Get() *SalesTeam {
	return v.value
}

func (v *NullableSalesTeam) Set(val *SalesTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesTeam(val *SalesTeam) *NullableSalesTeam {
	return &NullableSalesTeam{value: val, isSet: true}
}

func (v NullableSalesTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
