/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ScheduleEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleEntry{}

// ScheduleEntry struct for ScheduleEntry
type ScheduleEntry struct {
	Id       *int32        `json:"id,omitempty"`
	ObjectId NullableInt32 `json:"objectId,omitempty"`
	//  Max length: 250;
	Name                       *string                   `json:"name,omitempty"`
	Member                     *MemberReference          `json:"member,omitempty"`
	Where                      *ServiceLocationReference `json:"where,omitempty"`
	DateStart                  *time.Time                `json:"dateStart,omitempty"`
	DateEnd                    *time.Time                `json:"dateEnd,omitempty"`
	Reminder                   *ReminderReference        `json:"reminder,omitempty"`
	Status                     *ScheduleStatusReference  `json:"status,omitempty"`
	Type                       ScheduleTypeReference     `json:"type"`
	Span                       *ScheduleSpanReference    `json:"span,omitempty"`
	DoneFlag                   NullableBool              `json:"doneFlag,omitempty"`
	AcknowledgedFlag           NullableBool              `json:"acknowledgedFlag,omitempty"`
	OwnerFlag                  NullableBool              `json:"ownerFlag,omitempty"`
	MeetingFlag                NullableBool              `json:"meetingFlag,omitempty"`
	AllowScheduleConflictsFlag NullableBool              `json:"allowScheduleConflictsFlag,omitempty"`
	AddMemberToProjectFlag     NullableBool              `json:"addMemberToProjectFlag,omitempty"`
	ProjectRoleId              NullableInt32             `json:"projectRoleId,omitempty"`
	MobileGuid                 NullableString            `json:"mobileGuid,omitempty"`
	AcknowledgedDate           *time.Time                `json:"acknowledgedDate,omitempty"`
	CloseDate                  *time.Time                `json:"closeDate,omitempty"`
	NotifyResource             NullableBool              `json:"notifyResource,omitempty"`
	NotificationSent           NullableBool              `json:"notificationSent,omitempty"`
	NotificationResponse       *string                   `json:"notificationResponse,omitempty"`
	Hours                      NullableFloat64           `json:"hours,omitempty"`
	StartTimeSet               NullableBool              `json:"startTimeSet,omitempty"`
	EndTimeSet                 NullableBool              `json:"endTimeSet,omitempty"`
	Info                       *map[string]string        `json:"_info,omitempty"`
}

type _ScheduleEntry ScheduleEntry

// NewScheduleEntry instantiates a new ScheduleEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleEntry(type_ ScheduleTypeReference) *ScheduleEntry {
	this := ScheduleEntry{}
	this.Type = type_
	return &this
}

// NewScheduleEntryWithDefaults instantiates a new ScheduleEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleEntryWithDefaults() *ScheduleEntry {
	this := ScheduleEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScheduleEntry) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScheduleEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ScheduleEntry) SetId(v int32) {
	o.Id = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetObjectId() int32 {
	if o == nil || IsNil(o.ObjectId.Get()) {
		var ret int32
		return ret
	}
	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetObjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// HasObjectId returns a boolean if a field has been set.
func (o *ScheduleEntry) HasObjectId() bool {
	if o != nil && o.ObjectId.IsSet() {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given NullableInt32 and assigns it to the ObjectId field.
func (o *ScheduleEntry) SetObjectId(v int32) {
	o.ObjectId.Set(&v)
}

// SetObjectIdNil sets the value for ObjectId to be an explicit nil
func (o *ScheduleEntry) SetObjectIdNil() {
	o.ObjectId.Set(nil)
}

// UnsetObjectId ensures that no value is present for ObjectId, not even an explicit nil
func (o *ScheduleEntry) UnsetObjectId() {
	o.ObjectId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScheduleEntry) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScheduleEntry) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScheduleEntry) SetName(v string) {
	o.Name = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ScheduleEntry) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ScheduleEntry) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ScheduleEntry) SetMember(v MemberReference) {
	o.Member = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *ScheduleEntry) GetWhere() ServiceLocationReference {
	if o == nil || IsNil(o.Where) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetWhereOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.Where) {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *ScheduleEntry) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given ServiceLocationReference and assigns it to the Where field.
func (o *ScheduleEntry) SetWhere(v ServiceLocationReference) {
	o.Where = &v
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *ScheduleEntry) GetDateStart() time.Time {
	if o == nil || IsNil(o.DateStart) {
		var ret time.Time
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetDateStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *ScheduleEntry) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given time.Time and assigns it to the DateStart field.
func (o *ScheduleEntry) SetDateStart(v time.Time) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *ScheduleEntry) GetDateEnd() time.Time {
	if o == nil || IsNil(o.DateEnd) {
		var ret time.Time
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetDateEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *ScheduleEntry) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given time.Time and assigns it to the DateEnd field.
func (o *ScheduleEntry) SetDateEnd(v time.Time) {
	o.DateEnd = &v
}

// GetReminder returns the Reminder field value if set, zero value otherwise.
func (o *ScheduleEntry) GetReminder() ReminderReference {
	if o == nil || IsNil(o.Reminder) {
		var ret ReminderReference
		return ret
	}
	return *o.Reminder
}

// GetReminderOk returns a tuple with the Reminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetReminderOk() (*ReminderReference, bool) {
	if o == nil || IsNil(o.Reminder) {
		return nil, false
	}
	return o.Reminder, true
}

// HasReminder returns a boolean if a field has been set.
func (o *ScheduleEntry) HasReminder() bool {
	if o != nil && !IsNil(o.Reminder) {
		return true
	}

	return false
}

// SetReminder gets a reference to the given ReminderReference and assigns it to the Reminder field.
func (o *ScheduleEntry) SetReminder(v ReminderReference) {
	o.Reminder = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScheduleEntry) GetStatus() ScheduleStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ScheduleStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetStatusOk() (*ScheduleStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScheduleEntry) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ScheduleStatusReference and assigns it to the Status field.
func (o *ScheduleEntry) SetStatus(v ScheduleStatusReference) {
	o.Status = &v
}

// GetType returns the Type field value
func (o *ScheduleEntry) GetType() ScheduleTypeReference {
	if o == nil {
		var ret ScheduleTypeReference
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetTypeOk() (*ScheduleTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScheduleEntry) SetType(v ScheduleTypeReference) {
	o.Type = v
}

// GetSpan returns the Span field value if set, zero value otherwise.
func (o *ScheduleEntry) GetSpan() ScheduleSpanReference {
	if o == nil || IsNil(o.Span) {
		var ret ScheduleSpanReference
		return ret
	}
	return *o.Span
}

// GetSpanOk returns a tuple with the Span field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetSpanOk() (*ScheduleSpanReference, bool) {
	if o == nil || IsNil(o.Span) {
		return nil, false
	}
	return o.Span, true
}

// HasSpan returns a boolean if a field has been set.
func (o *ScheduleEntry) HasSpan() bool {
	if o != nil && !IsNil(o.Span) {
		return true
	}

	return false
}

// SetSpan gets a reference to the given ScheduleSpanReference and assigns it to the Span field.
func (o *ScheduleEntry) SetSpan(v ScheduleSpanReference) {
	o.Span = &v
}

// GetDoneFlag returns the DoneFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetDoneFlag() bool {
	if o == nil || IsNil(o.DoneFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DoneFlag.Get()
}

// GetDoneFlagOk returns a tuple with the DoneFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetDoneFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoneFlag.Get(), o.DoneFlag.IsSet()
}

// HasDoneFlag returns a boolean if a field has been set.
func (o *ScheduleEntry) HasDoneFlag() bool {
	if o != nil && o.DoneFlag.IsSet() {
		return true
	}

	return false
}

// SetDoneFlag gets a reference to the given NullableBool and assigns it to the DoneFlag field.
func (o *ScheduleEntry) SetDoneFlag(v bool) {
	o.DoneFlag.Set(&v)
}

// SetDoneFlagNil sets the value for DoneFlag to be an explicit nil
func (o *ScheduleEntry) SetDoneFlagNil() {
	o.DoneFlag.Set(nil)
}

// UnsetDoneFlag ensures that no value is present for DoneFlag, not even an explicit nil
func (o *ScheduleEntry) UnsetDoneFlag() {
	o.DoneFlag.Unset()
}

// GetAcknowledgedFlag returns the AcknowledgedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetAcknowledgedFlag() bool {
	if o == nil || IsNil(o.AcknowledgedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AcknowledgedFlag.Get()
}

// GetAcknowledgedFlagOk returns a tuple with the AcknowledgedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetAcknowledgedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcknowledgedFlag.Get(), o.AcknowledgedFlag.IsSet()
}

// HasAcknowledgedFlag returns a boolean if a field has been set.
func (o *ScheduleEntry) HasAcknowledgedFlag() bool {
	if o != nil && o.AcknowledgedFlag.IsSet() {
		return true
	}

	return false
}

// SetAcknowledgedFlag gets a reference to the given NullableBool and assigns it to the AcknowledgedFlag field.
func (o *ScheduleEntry) SetAcknowledgedFlag(v bool) {
	o.AcknowledgedFlag.Set(&v)
}

// SetAcknowledgedFlagNil sets the value for AcknowledgedFlag to be an explicit nil
func (o *ScheduleEntry) SetAcknowledgedFlagNil() {
	o.AcknowledgedFlag.Set(nil)
}

// UnsetAcknowledgedFlag ensures that no value is present for AcknowledgedFlag, not even an explicit nil
func (o *ScheduleEntry) UnsetAcknowledgedFlag() {
	o.AcknowledgedFlag.Unset()
}

// GetOwnerFlag returns the OwnerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetOwnerFlag() bool {
	if o == nil || IsNil(o.OwnerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OwnerFlag.Get()
}

// GetOwnerFlagOk returns a tuple with the OwnerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetOwnerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerFlag.Get(), o.OwnerFlag.IsSet()
}

// HasOwnerFlag returns a boolean if a field has been set.
func (o *ScheduleEntry) HasOwnerFlag() bool {
	if o != nil && o.OwnerFlag.IsSet() {
		return true
	}

	return false
}

// SetOwnerFlag gets a reference to the given NullableBool and assigns it to the OwnerFlag field.
func (o *ScheduleEntry) SetOwnerFlag(v bool) {
	o.OwnerFlag.Set(&v)
}

// SetOwnerFlagNil sets the value for OwnerFlag to be an explicit nil
func (o *ScheduleEntry) SetOwnerFlagNil() {
	o.OwnerFlag.Set(nil)
}

// UnsetOwnerFlag ensures that no value is present for OwnerFlag, not even an explicit nil
func (o *ScheduleEntry) UnsetOwnerFlag() {
	o.OwnerFlag.Unset()
}

// GetMeetingFlag returns the MeetingFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetMeetingFlag() bool {
	if o == nil || IsNil(o.MeetingFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MeetingFlag.Get()
}

// GetMeetingFlagOk returns a tuple with the MeetingFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetMeetingFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MeetingFlag.Get(), o.MeetingFlag.IsSet()
}

// HasMeetingFlag returns a boolean if a field has been set.
func (o *ScheduleEntry) HasMeetingFlag() bool {
	if o != nil && o.MeetingFlag.IsSet() {
		return true
	}

	return false
}

// SetMeetingFlag gets a reference to the given NullableBool and assigns it to the MeetingFlag field.
func (o *ScheduleEntry) SetMeetingFlag(v bool) {
	o.MeetingFlag.Set(&v)
}

// SetMeetingFlagNil sets the value for MeetingFlag to be an explicit nil
func (o *ScheduleEntry) SetMeetingFlagNil() {
	o.MeetingFlag.Set(nil)
}

// UnsetMeetingFlag ensures that no value is present for MeetingFlag, not even an explicit nil
func (o *ScheduleEntry) UnsetMeetingFlag() {
	o.MeetingFlag.Unset()
}

// GetAllowScheduleConflictsFlag returns the AllowScheduleConflictsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetAllowScheduleConflictsFlag() bool {
	if o == nil || IsNil(o.AllowScheduleConflictsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowScheduleConflictsFlag.Get()
}

// GetAllowScheduleConflictsFlagOk returns a tuple with the AllowScheduleConflictsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetAllowScheduleConflictsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowScheduleConflictsFlag.Get(), o.AllowScheduleConflictsFlag.IsSet()
}

// HasAllowScheduleConflictsFlag returns a boolean if a field has been set.
func (o *ScheduleEntry) HasAllowScheduleConflictsFlag() bool {
	if o != nil && o.AllowScheduleConflictsFlag.IsSet() {
		return true
	}

	return false
}

// SetAllowScheduleConflictsFlag gets a reference to the given NullableBool and assigns it to the AllowScheduleConflictsFlag field.
func (o *ScheduleEntry) SetAllowScheduleConflictsFlag(v bool) {
	o.AllowScheduleConflictsFlag.Set(&v)
}

// SetAllowScheduleConflictsFlagNil sets the value for AllowScheduleConflictsFlag to be an explicit nil
func (o *ScheduleEntry) SetAllowScheduleConflictsFlagNil() {
	o.AllowScheduleConflictsFlag.Set(nil)
}

// UnsetAllowScheduleConflictsFlag ensures that no value is present for AllowScheduleConflictsFlag, not even an explicit nil
func (o *ScheduleEntry) UnsetAllowScheduleConflictsFlag() {
	o.AllowScheduleConflictsFlag.Unset()
}

// GetAddMemberToProjectFlag returns the AddMemberToProjectFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetAddMemberToProjectFlag() bool {
	if o == nil || IsNil(o.AddMemberToProjectFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddMemberToProjectFlag.Get()
}

// GetAddMemberToProjectFlagOk returns a tuple with the AddMemberToProjectFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetAddMemberToProjectFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddMemberToProjectFlag.Get(), o.AddMemberToProjectFlag.IsSet()
}

// HasAddMemberToProjectFlag returns a boolean if a field has been set.
func (o *ScheduleEntry) HasAddMemberToProjectFlag() bool {
	if o != nil && o.AddMemberToProjectFlag.IsSet() {
		return true
	}

	return false
}

// SetAddMemberToProjectFlag gets a reference to the given NullableBool and assigns it to the AddMemberToProjectFlag field.
func (o *ScheduleEntry) SetAddMemberToProjectFlag(v bool) {
	o.AddMemberToProjectFlag.Set(&v)
}

// SetAddMemberToProjectFlagNil sets the value for AddMemberToProjectFlag to be an explicit nil
func (o *ScheduleEntry) SetAddMemberToProjectFlagNil() {
	o.AddMemberToProjectFlag.Set(nil)
}

// UnsetAddMemberToProjectFlag ensures that no value is present for AddMemberToProjectFlag, not even an explicit nil
func (o *ScheduleEntry) UnsetAddMemberToProjectFlag() {
	o.AddMemberToProjectFlag.Unset()
}

// GetProjectRoleId returns the ProjectRoleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetProjectRoleId() int32 {
	if o == nil || IsNil(o.ProjectRoleId.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectRoleId.Get()
}

// GetProjectRoleIdOk returns a tuple with the ProjectRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetProjectRoleIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectRoleId.Get(), o.ProjectRoleId.IsSet()
}

// HasProjectRoleId returns a boolean if a field has been set.
func (o *ScheduleEntry) HasProjectRoleId() bool {
	if o != nil && o.ProjectRoleId.IsSet() {
		return true
	}

	return false
}

// SetProjectRoleId gets a reference to the given NullableInt32 and assigns it to the ProjectRoleId field.
func (o *ScheduleEntry) SetProjectRoleId(v int32) {
	o.ProjectRoleId.Set(&v)
}

// SetProjectRoleIdNil sets the value for ProjectRoleId to be an explicit nil
func (o *ScheduleEntry) SetProjectRoleIdNil() {
	o.ProjectRoleId.Set(nil)
}

// UnsetProjectRoleId ensures that no value is present for ProjectRoleId, not even an explicit nil
func (o *ScheduleEntry) UnsetProjectRoleId() {
	o.ProjectRoleId.Unset()
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *ScheduleEntry) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *ScheduleEntry) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}

// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *ScheduleEntry) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *ScheduleEntry) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetAcknowledgedDate returns the AcknowledgedDate field value if set, zero value otherwise.
func (o *ScheduleEntry) GetAcknowledgedDate() time.Time {
	if o == nil || IsNil(o.AcknowledgedDate) {
		var ret time.Time
		return ret
	}
	return *o.AcknowledgedDate
}

// GetAcknowledgedDateOk returns a tuple with the AcknowledgedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetAcknowledgedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcknowledgedDate) {
		return nil, false
	}
	return o.AcknowledgedDate, true
}

// HasAcknowledgedDate returns a boolean if a field has been set.
func (o *ScheduleEntry) HasAcknowledgedDate() bool {
	if o != nil && !IsNil(o.AcknowledgedDate) {
		return true
	}

	return false
}

// SetAcknowledgedDate gets a reference to the given time.Time and assigns it to the AcknowledgedDate field.
func (o *ScheduleEntry) SetAcknowledgedDate(v time.Time) {
	o.AcknowledgedDate = &v
}

// GetCloseDate returns the CloseDate field value if set, zero value otherwise.
func (o *ScheduleEntry) GetCloseDate() time.Time {
	if o == nil || IsNil(o.CloseDate) {
		var ret time.Time
		return ret
	}
	return *o.CloseDate
}

// GetCloseDateOk returns a tuple with the CloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetCloseDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CloseDate) {
		return nil, false
	}
	return o.CloseDate, true
}

// HasCloseDate returns a boolean if a field has been set.
func (o *ScheduleEntry) HasCloseDate() bool {
	if o != nil && !IsNil(o.CloseDate) {
		return true
	}

	return false
}

// SetCloseDate gets a reference to the given time.Time and assigns it to the CloseDate field.
func (o *ScheduleEntry) SetCloseDate(v time.Time) {
	o.CloseDate = &v
}

// GetNotifyResource returns the NotifyResource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetNotifyResource() bool {
	if o == nil || IsNil(o.NotifyResource.Get()) {
		var ret bool
		return ret
	}
	return *o.NotifyResource.Get()
}

// GetNotifyResourceOk returns a tuple with the NotifyResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetNotifyResourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotifyResource.Get(), o.NotifyResource.IsSet()
}

// HasNotifyResource returns a boolean if a field has been set.
func (o *ScheduleEntry) HasNotifyResource() bool {
	if o != nil && o.NotifyResource.IsSet() {
		return true
	}

	return false
}

// SetNotifyResource gets a reference to the given NullableBool and assigns it to the NotifyResource field.
func (o *ScheduleEntry) SetNotifyResource(v bool) {
	o.NotifyResource.Set(&v)
}

// SetNotifyResourceNil sets the value for NotifyResource to be an explicit nil
func (o *ScheduleEntry) SetNotifyResourceNil() {
	o.NotifyResource.Set(nil)
}

// UnsetNotifyResource ensures that no value is present for NotifyResource, not even an explicit nil
func (o *ScheduleEntry) UnsetNotifyResource() {
	o.NotifyResource.Unset()
}

// GetNotificationSent returns the NotificationSent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetNotificationSent() bool {
	if o == nil || IsNil(o.NotificationSent.Get()) {
		var ret bool
		return ret
	}
	return *o.NotificationSent.Get()
}

// GetNotificationSentOk returns a tuple with the NotificationSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetNotificationSentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationSent.Get(), o.NotificationSent.IsSet()
}

// HasNotificationSent returns a boolean if a field has been set.
func (o *ScheduleEntry) HasNotificationSent() bool {
	if o != nil && o.NotificationSent.IsSet() {
		return true
	}

	return false
}

// SetNotificationSent gets a reference to the given NullableBool and assigns it to the NotificationSent field.
func (o *ScheduleEntry) SetNotificationSent(v bool) {
	o.NotificationSent.Set(&v)
}

// SetNotificationSentNil sets the value for NotificationSent to be an explicit nil
func (o *ScheduleEntry) SetNotificationSentNil() {
	o.NotificationSent.Set(nil)
}

// UnsetNotificationSent ensures that no value is present for NotificationSent, not even an explicit nil
func (o *ScheduleEntry) UnsetNotificationSent() {
	o.NotificationSent.Unset()
}

// GetNotificationResponse returns the NotificationResponse field value if set, zero value otherwise.
func (o *ScheduleEntry) GetNotificationResponse() string {
	if o == nil || IsNil(o.NotificationResponse) {
		var ret string
		return ret
	}
	return *o.NotificationResponse
}

// GetNotificationResponseOk returns a tuple with the NotificationResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetNotificationResponseOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationResponse) {
		return nil, false
	}
	return o.NotificationResponse, true
}

// HasNotificationResponse returns a boolean if a field has been set.
func (o *ScheduleEntry) HasNotificationResponse() bool {
	if o != nil && !IsNil(o.NotificationResponse) {
		return true
	}

	return false
}

// SetNotificationResponse gets a reference to the given string and assigns it to the NotificationResponse field.
func (o *ScheduleEntry) SetNotificationResponse(v string) {
	o.NotificationResponse = &v
}

// GetHours returns the Hours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetHours() float64 {
	if o == nil || IsNil(o.Hours.Get()) {
		var ret float64
		return ret
	}
	return *o.Hours.Get()
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hours.Get(), o.Hours.IsSet()
}

// HasHours returns a boolean if a field has been set.
func (o *ScheduleEntry) HasHours() bool {
	if o != nil && o.Hours.IsSet() {
		return true
	}

	return false
}

// SetHours gets a reference to the given NullableFloat64 and assigns it to the Hours field.
func (o *ScheduleEntry) SetHours(v float64) {
	o.Hours.Set(&v)
}

// SetHoursNil sets the value for Hours to be an explicit nil
func (o *ScheduleEntry) SetHoursNil() {
	o.Hours.Set(nil)
}

// UnsetHours ensures that no value is present for Hours, not even an explicit nil
func (o *ScheduleEntry) UnsetHours() {
	o.Hours.Unset()
}

// GetStartTimeSet returns the StartTimeSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetStartTimeSet() bool {
	if o == nil || IsNil(o.StartTimeSet.Get()) {
		var ret bool
		return ret
	}
	return *o.StartTimeSet.Get()
}

// GetStartTimeSetOk returns a tuple with the StartTimeSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetStartTimeSetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTimeSet.Get(), o.StartTimeSet.IsSet()
}

// HasStartTimeSet returns a boolean if a field has been set.
func (o *ScheduleEntry) HasStartTimeSet() bool {
	if o != nil && o.StartTimeSet.IsSet() {
		return true
	}

	return false
}

// SetStartTimeSet gets a reference to the given NullableBool and assigns it to the StartTimeSet field.
func (o *ScheduleEntry) SetStartTimeSet(v bool) {
	o.StartTimeSet.Set(&v)
}

// SetStartTimeSetNil sets the value for StartTimeSet to be an explicit nil
func (o *ScheduleEntry) SetStartTimeSetNil() {
	o.StartTimeSet.Set(nil)
}

// UnsetStartTimeSet ensures that no value is present for StartTimeSet, not even an explicit nil
func (o *ScheduleEntry) UnsetStartTimeSet() {
	o.StartTimeSet.Unset()
}

// GetEndTimeSet returns the EndTimeSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleEntry) GetEndTimeSet() bool {
	if o == nil || IsNil(o.EndTimeSet.Get()) {
		var ret bool
		return ret
	}
	return *o.EndTimeSet.Get()
}

// GetEndTimeSetOk returns a tuple with the EndTimeSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleEntry) GetEndTimeSetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTimeSet.Get(), o.EndTimeSet.IsSet()
}

// HasEndTimeSet returns a boolean if a field has been set.
func (o *ScheduleEntry) HasEndTimeSet() bool {
	if o != nil && o.EndTimeSet.IsSet() {
		return true
	}

	return false
}

// SetEndTimeSet gets a reference to the given NullableBool and assigns it to the EndTimeSet field.
func (o *ScheduleEntry) SetEndTimeSet(v bool) {
	o.EndTimeSet.Set(&v)
}

// SetEndTimeSetNil sets the value for EndTimeSet to be an explicit nil
func (o *ScheduleEntry) SetEndTimeSetNil() {
	o.EndTimeSet.Set(nil)
}

// UnsetEndTimeSet ensures that no value is present for EndTimeSet, not even an explicit nil
func (o *ScheduleEntry) UnsetEndTimeSet() {
	o.EndTimeSet.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ScheduleEntry) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEntry) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ScheduleEntry) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ScheduleEntry) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ScheduleEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ObjectId.IsSet() {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}
	if !IsNil(o.DateStart) {
		toSerialize["dateStart"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["dateEnd"] = o.DateEnd
	}
	if !IsNil(o.Reminder) {
		toSerialize["reminder"] = o.Reminder
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Span) {
		toSerialize["span"] = o.Span
	}
	if o.DoneFlag.IsSet() {
		toSerialize["doneFlag"] = o.DoneFlag.Get()
	}
	if o.AcknowledgedFlag.IsSet() {
		toSerialize["acknowledgedFlag"] = o.AcknowledgedFlag.Get()
	}
	if o.OwnerFlag.IsSet() {
		toSerialize["ownerFlag"] = o.OwnerFlag.Get()
	}
	if o.MeetingFlag.IsSet() {
		toSerialize["meetingFlag"] = o.MeetingFlag.Get()
	}
	if o.AllowScheduleConflictsFlag.IsSet() {
		toSerialize["allowScheduleConflictsFlag"] = o.AllowScheduleConflictsFlag.Get()
	}
	if o.AddMemberToProjectFlag.IsSet() {
		toSerialize["addMemberToProjectFlag"] = o.AddMemberToProjectFlag.Get()
	}
	if o.ProjectRoleId.IsSet() {
		toSerialize["projectRoleId"] = o.ProjectRoleId.Get()
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.AcknowledgedDate) {
		toSerialize["acknowledgedDate"] = o.AcknowledgedDate
	}
	if !IsNil(o.CloseDate) {
		toSerialize["closeDate"] = o.CloseDate
	}
	if o.NotifyResource.IsSet() {
		toSerialize["notifyResource"] = o.NotifyResource.Get()
	}
	if o.NotificationSent.IsSet() {
		toSerialize["notificationSent"] = o.NotificationSent.Get()
	}
	if !IsNil(o.NotificationResponse) {
		toSerialize["notificationResponse"] = o.NotificationResponse
	}
	if o.Hours.IsSet() {
		toSerialize["hours"] = o.Hours.Get()
	}
	if o.StartTimeSet.IsSet() {
		toSerialize["startTimeSet"] = o.StartTimeSet.Get()
	}
	if o.EndTimeSet.IsSet() {
		toSerialize["endTimeSet"] = o.EndTimeSet.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ScheduleEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleEntry := _ScheduleEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleEntry)

	if err != nil {
		return err
	}

	*o = ScheduleEntry(varScheduleEntry)

	return err
}

type NullableScheduleEntry struct {
	value *ScheduleEntry
	isSet bool
}

func (v NullableScheduleEntry) Get() *ScheduleEntry {
	return v.value
}

func (v *NullableScheduleEntry) Set(val *ScheduleEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleEntry(val *ScheduleEntry) *NullableScheduleEntry {
	return &NullableScheduleEntry{value: val, isSet: true}
}

func (v NullableScheduleEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
