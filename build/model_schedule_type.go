/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleType{}

// ScheduleType struct for ScheduleType
type ScheduleType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	//  Max length: 1;
	Identifier string                    `json:"identifier"`
	ChargeCode *ChargeCodeReference      `json:"chargeCode,omitempty"`
	Where      *ServiceLocationReference `json:"where,omitempty"`
	SystemFlag NullableBool              `json:"systemFlag,omitempty"`
	Info       *map[string]string        `json:"_info,omitempty"`
}

type _ScheduleType ScheduleType

// NewScheduleType instantiates a new ScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleType(name string, identifier string) *ScheduleType {
	this := ScheduleType{}
	this.Name = name
	this.Identifier = identifier
	return &this
}

// NewScheduleTypeWithDefaults instantiates a new ScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleTypeWithDefaults() *ScheduleType {
	this := ScheduleType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScheduleType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScheduleType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ScheduleType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ScheduleType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScheduleType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScheduleType) SetName(v string) {
	o.Name = v
}

// GetIdentifier returns the Identifier field value
func (o *ScheduleType) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ScheduleType) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ScheduleType) SetIdentifier(v string) {
	o.Identifier = v
}

// GetChargeCode returns the ChargeCode field value if set, zero value otherwise.
func (o *ScheduleType) GetChargeCode() ChargeCodeReference {
	if o == nil || IsNil(o.ChargeCode) {
		var ret ChargeCodeReference
		return ret
	}
	return *o.ChargeCode
}

// GetChargeCodeOk returns a tuple with the ChargeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleType) GetChargeCodeOk() (*ChargeCodeReference, bool) {
	if o == nil || IsNil(o.ChargeCode) {
		return nil, false
	}
	return o.ChargeCode, true
}

// HasChargeCode returns a boolean if a field has been set.
func (o *ScheduleType) HasChargeCode() bool {
	if o != nil && !IsNil(o.ChargeCode) {
		return true
	}

	return false
}

// SetChargeCode gets a reference to the given ChargeCodeReference and assigns it to the ChargeCode field.
func (o *ScheduleType) SetChargeCode(v ChargeCodeReference) {
	o.ChargeCode = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *ScheduleType) GetWhere() ServiceLocationReference {
	if o == nil || IsNil(o.Where) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleType) GetWhereOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.Where) {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *ScheduleType) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given ServiceLocationReference and assigns it to the Where field.
func (o *ScheduleType) SetWhere(v ServiceLocationReference) {
	o.Where = &v
}

// GetSystemFlag returns the SystemFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleType) GetSystemFlag() bool {
	if o == nil || IsNil(o.SystemFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SystemFlag.Get()
}

// GetSystemFlagOk returns a tuple with the SystemFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleType) GetSystemFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemFlag.Get(), o.SystemFlag.IsSet()
}

// HasSystemFlag returns a boolean if a field has been set.
func (o *ScheduleType) HasSystemFlag() bool {
	if o != nil && o.SystemFlag.IsSet() {
		return true
	}

	return false
}

// SetSystemFlag gets a reference to the given NullableBool and assigns it to the SystemFlag field.
func (o *ScheduleType) SetSystemFlag(v bool) {
	o.SystemFlag.Set(&v)
}

// SetSystemFlagNil sets the value for SystemFlag to be an explicit nil
func (o *ScheduleType) SetSystemFlagNil() {
	o.SystemFlag.Set(nil)
}

// UnsetSystemFlag ensures that no value is present for SystemFlag, not even an explicit nil
func (o *ScheduleType) UnsetSystemFlag() {
	o.SystemFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ScheduleType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ScheduleType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ScheduleType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.ChargeCode) {
		toSerialize["chargeCode"] = o.ChargeCode
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}
	if o.SystemFlag.IsSet() {
		toSerialize["systemFlag"] = o.SystemFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ScheduleType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"identifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleType := _ScheduleType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleType)

	if err != nil {
		return err
	}

	*o = ScheduleType(varScheduleType)

	return err
}

type NullableScheduleType struct {
	value *ScheduleType
	isSet bool
}

func (v NullableScheduleType) Get() *ScheduleType {
	return v.value
}

func (v *NullableScheduleType) Set(val *ScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleType(val *ScheduleType) *NullableScheduleType {
	return &NullableScheduleType{value: val, isSet: true}
}

func (v NullableScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
