/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SecurityRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityRole{}

// SecurityRole struct for SecurityRole
type SecurityRole struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name string `json:"name"`
	//  Max length: 30;
	RoleType     *string            `json:"roleType,omitempty"`
	AdminFlag    NullableBool       `json:"adminFlag,omitempty"`
	InactiveFlag NullableBool       `json:"inactiveFlag,omitempty"`
	Info         *map[string]string `json:"_info,omitempty"`
}

type _SecurityRole SecurityRole

// NewSecurityRole instantiates a new SecurityRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityRole(name string) *SecurityRole {
	this := SecurityRole{}
	this.Name = name
	return &this
}

// NewSecurityRoleWithDefaults instantiates a new SecurityRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityRoleWithDefaults() *SecurityRole {
	this := SecurityRole{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecurityRole) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRole) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecurityRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SecurityRole) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *SecurityRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecurityRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecurityRole) SetName(v string) {
	o.Name = v
}

// GetRoleType returns the RoleType field value if set, zero value otherwise.
func (o *SecurityRole) GetRoleType() string {
	if o == nil || IsNil(o.RoleType) {
		var ret string
		return ret
	}
	return *o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRole) GetRoleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoleType) {
		return nil, false
	}
	return o.RoleType, true
}

// HasRoleType returns a boolean if a field has been set.
func (o *SecurityRole) HasRoleType() bool {
	if o != nil && !IsNil(o.RoleType) {
		return true
	}

	return false
}

// SetRoleType gets a reference to the given string and assigns it to the RoleType field.
func (o *SecurityRole) SetRoleType(v string) {
	o.RoleType = &v
}

// GetAdminFlag returns the AdminFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityRole) GetAdminFlag() bool {
	if o == nil || IsNil(o.AdminFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AdminFlag.Get()
}

// GetAdminFlagOk returns a tuple with the AdminFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityRole) GetAdminFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminFlag.Get(), o.AdminFlag.IsSet()
}

// HasAdminFlag returns a boolean if a field has been set.
func (o *SecurityRole) HasAdminFlag() bool {
	if o != nil && o.AdminFlag.IsSet() {
		return true
	}

	return false
}

// SetAdminFlag gets a reference to the given NullableBool and assigns it to the AdminFlag field.
func (o *SecurityRole) SetAdminFlag(v bool) {
	o.AdminFlag.Set(&v)
}

// SetAdminFlagNil sets the value for AdminFlag to be an explicit nil
func (o *SecurityRole) SetAdminFlagNil() {
	o.AdminFlag.Set(nil)
}

// UnsetAdminFlag ensures that no value is present for AdminFlag, not even an explicit nil
func (o *SecurityRole) UnsetAdminFlag() {
	o.AdminFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityRole) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityRole) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *SecurityRole) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *SecurityRole) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *SecurityRole) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *SecurityRole) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SecurityRole) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRole) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SecurityRole) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SecurityRole) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SecurityRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.RoleType) {
		toSerialize["roleType"] = o.RoleType
	}
	if o.AdminFlag.IsSet() {
		toSerialize["adminFlag"] = o.AdminFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SecurityRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecurityRole := _SecurityRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecurityRole)

	if err != nil {
		return err
	}

	*o = SecurityRole(varSecurityRole)

	return err
}

type NullableSecurityRole struct {
	value *SecurityRole
	isSet bool
}

func (v NullableSecurityRole) Get() *SecurityRole {
	return v.value
}

func (v *NullableSecurityRole) Set(val *SecurityRole) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityRole) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityRole(val *SecurityRole) *NullableSecurityRole {
	return &NullableSecurityRole{value: val, isSet: true}
}

func (v NullableSecurityRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
