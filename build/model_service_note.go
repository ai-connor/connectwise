/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ServiceNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceNote{}

// ServiceNote struct for ServiceNote
type ServiceNote struct {
	Id                    *int32             `json:"id,omitempty"`
	TicketId              NullableInt32      `json:"ticketId,omitempty"`
	Text                  *string            `json:"text,omitempty"`
	DetailDescriptionFlag NullableBool       `json:"detailDescriptionFlag,omitempty"`
	InternalAnalysisFlag  NullableBool       `json:"internalAnalysisFlag,omitempty"`
	ResolutionFlag        NullableBool       `json:"resolutionFlag,omitempty"`
	IssueFlag             NullableBool       `json:"issueFlag,omitempty"`
	Member                *MemberReference   `json:"member,omitempty"`
	Contact               *ContactReference  `json:"contact,omitempty"`
	CustomerUpdatedFlag   NullableBool       `json:"customerUpdatedFlag,omitempty"`
	ProcessNotifications  NullableBool       `json:"processNotifications,omitempty"`
	DateCreated           *string            `json:"dateCreated,omitempty"`
	CreatedBy             *string            `json:"createdBy,omitempty"`
	InternalFlag          NullableBool       `json:"internalFlag,omitempty"`
	ExternalFlag          NullableBool       `json:"externalFlag,omitempty"`
	SentimentScore        NullableFloat64    `json:"sentimentScore,omitempty"`
	Info                  *map[string]string `json:"_info,omitempty"`
}

// NewServiceNote instantiates a new ServiceNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceNote() *ServiceNote {
	this := ServiceNote{}
	return &this
}

// NewServiceNoteWithDefaults instantiates a new ServiceNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceNoteWithDefaults() *ServiceNote {
	this := ServiceNote{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceNote) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceNote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServiceNote) SetId(v int32) {
	o.Id = &v
}

// GetTicketId returns the TicketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetTicketId() int32 {
	if o == nil || IsNil(o.TicketId.Get()) {
		var ret int32
		return ret
	}
	return *o.TicketId.Get()
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TicketId.Get(), o.TicketId.IsSet()
}

// HasTicketId returns a boolean if a field has been set.
func (o *ServiceNote) HasTicketId() bool {
	if o != nil && o.TicketId.IsSet() {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given NullableInt32 and assigns it to the TicketId field.
func (o *ServiceNote) SetTicketId(v int32) {
	o.TicketId.Set(&v)
}

// SetTicketIdNil sets the value for TicketId to be an explicit nil
func (o *ServiceNote) SetTicketIdNil() {
	o.TicketId.Set(nil)
}

// UnsetTicketId ensures that no value is present for TicketId, not even an explicit nil
func (o *ServiceNote) UnsetTicketId() {
	o.TicketId.Unset()
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ServiceNote) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ServiceNote) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ServiceNote) SetText(v string) {
	o.Text = &v
}

// GetDetailDescriptionFlag returns the DetailDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetDetailDescriptionFlag() bool {
	if o == nil || IsNil(o.DetailDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DetailDescriptionFlag.Get()
}

// GetDetailDescriptionFlagOk returns a tuple with the DetailDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetDetailDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetailDescriptionFlag.Get(), o.DetailDescriptionFlag.IsSet()
}

// HasDetailDescriptionFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasDetailDescriptionFlag() bool {
	if o != nil && o.DetailDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetDetailDescriptionFlag gets a reference to the given NullableBool and assigns it to the DetailDescriptionFlag field.
func (o *ServiceNote) SetDetailDescriptionFlag(v bool) {
	o.DetailDescriptionFlag.Set(&v)
}

// SetDetailDescriptionFlagNil sets the value for DetailDescriptionFlag to be an explicit nil
func (o *ServiceNote) SetDetailDescriptionFlagNil() {
	o.DetailDescriptionFlag.Set(nil)
}

// UnsetDetailDescriptionFlag ensures that no value is present for DetailDescriptionFlag, not even an explicit nil
func (o *ServiceNote) UnsetDetailDescriptionFlag() {
	o.DetailDescriptionFlag.Unset()
}

// GetInternalAnalysisFlag returns the InternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.InternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InternalAnalysisFlag.Get()
}

// GetInternalAnalysisFlagOk returns a tuple with the InternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalAnalysisFlag.Get(), o.InternalAnalysisFlag.IsSet()
}

// HasInternalAnalysisFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasInternalAnalysisFlag() bool {
	if o != nil && o.InternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the InternalAnalysisFlag field.
func (o *ServiceNote) SetInternalAnalysisFlag(v bool) {
	o.InternalAnalysisFlag.Set(&v)
}

// SetInternalAnalysisFlagNil sets the value for InternalAnalysisFlag to be an explicit nil
func (o *ServiceNote) SetInternalAnalysisFlagNil() {
	o.InternalAnalysisFlag.Set(nil)
}

// UnsetInternalAnalysisFlag ensures that no value is present for InternalAnalysisFlag, not even an explicit nil
func (o *ServiceNote) UnsetInternalAnalysisFlag() {
	o.InternalAnalysisFlag.Unset()
}

// GetResolutionFlag returns the ResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetResolutionFlag() bool {
	if o == nil || IsNil(o.ResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ResolutionFlag.Get()
}

// GetResolutionFlagOk returns a tuple with the ResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionFlag.Get(), o.ResolutionFlag.IsSet()
}

// HasResolutionFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasResolutionFlag() bool {
	if o != nil && o.ResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetResolutionFlag gets a reference to the given NullableBool and assigns it to the ResolutionFlag field.
func (o *ServiceNote) SetResolutionFlag(v bool) {
	o.ResolutionFlag.Set(&v)
}

// SetResolutionFlagNil sets the value for ResolutionFlag to be an explicit nil
func (o *ServiceNote) SetResolutionFlagNil() {
	o.ResolutionFlag.Set(nil)
}

// UnsetResolutionFlag ensures that no value is present for ResolutionFlag, not even an explicit nil
func (o *ServiceNote) UnsetResolutionFlag() {
	o.ResolutionFlag.Unset()
}

// GetIssueFlag returns the IssueFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetIssueFlag() bool {
	if o == nil || IsNil(o.IssueFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IssueFlag.Get()
}

// GetIssueFlagOk returns a tuple with the IssueFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetIssueFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueFlag.Get(), o.IssueFlag.IsSet()
}

// HasIssueFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasIssueFlag() bool {
	if o != nil && o.IssueFlag.IsSet() {
		return true
	}

	return false
}

// SetIssueFlag gets a reference to the given NullableBool and assigns it to the IssueFlag field.
func (o *ServiceNote) SetIssueFlag(v bool) {
	o.IssueFlag.Set(&v)
}

// SetIssueFlagNil sets the value for IssueFlag to be an explicit nil
func (o *ServiceNote) SetIssueFlagNil() {
	o.IssueFlag.Set(nil)
}

// UnsetIssueFlag ensures that no value is present for IssueFlag, not even an explicit nil
func (o *ServiceNote) UnsetIssueFlag() {
	o.IssueFlag.Unset()
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ServiceNote) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ServiceNote) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ServiceNote) SetMember(v MemberReference) {
	o.Member = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ServiceNote) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ServiceNote) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ServiceNote) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetCustomerUpdatedFlag returns the CustomerUpdatedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetCustomerUpdatedFlag() bool {
	if o == nil || IsNil(o.CustomerUpdatedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomerUpdatedFlag.Get()
}

// GetCustomerUpdatedFlagOk returns a tuple with the CustomerUpdatedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetCustomerUpdatedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerUpdatedFlag.Get(), o.CustomerUpdatedFlag.IsSet()
}

// HasCustomerUpdatedFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasCustomerUpdatedFlag() bool {
	if o != nil && o.CustomerUpdatedFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomerUpdatedFlag gets a reference to the given NullableBool and assigns it to the CustomerUpdatedFlag field.
func (o *ServiceNote) SetCustomerUpdatedFlag(v bool) {
	o.CustomerUpdatedFlag.Set(&v)
}

// SetCustomerUpdatedFlagNil sets the value for CustomerUpdatedFlag to be an explicit nil
func (o *ServiceNote) SetCustomerUpdatedFlagNil() {
	o.CustomerUpdatedFlag.Set(nil)
}

// UnsetCustomerUpdatedFlag ensures that no value is present for CustomerUpdatedFlag, not even an explicit nil
func (o *ServiceNote) UnsetCustomerUpdatedFlag() {
	o.CustomerUpdatedFlag.Unset()
}

// GetProcessNotifications returns the ProcessNotifications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetProcessNotifications() bool {
	if o == nil || IsNil(o.ProcessNotifications.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessNotifications.Get()
}

// GetProcessNotificationsOk returns a tuple with the ProcessNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetProcessNotificationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessNotifications.Get(), o.ProcessNotifications.IsSet()
}

// HasProcessNotifications returns a boolean if a field has been set.
func (o *ServiceNote) HasProcessNotifications() bool {
	if o != nil && o.ProcessNotifications.IsSet() {
		return true
	}

	return false
}

// SetProcessNotifications gets a reference to the given NullableBool and assigns it to the ProcessNotifications field.
func (o *ServiceNote) SetProcessNotifications(v bool) {
	o.ProcessNotifications.Set(&v)
}

// SetProcessNotificationsNil sets the value for ProcessNotifications to be an explicit nil
func (o *ServiceNote) SetProcessNotificationsNil() {
	o.ProcessNotifications.Set(nil)
}

// UnsetProcessNotifications ensures that no value is present for ProcessNotifications, not even an explicit nil
func (o *ServiceNote) UnsetProcessNotifications() {
	o.ProcessNotifications.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ServiceNote) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ServiceNote) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *ServiceNote) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ServiceNote) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ServiceNote) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *ServiceNote) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetInternalFlag returns the InternalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetInternalFlag() bool {
	if o == nil || IsNil(o.InternalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InternalFlag.Get()
}

// GetInternalFlagOk returns a tuple with the InternalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetInternalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalFlag.Get(), o.InternalFlag.IsSet()
}

// HasInternalFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasInternalFlag() bool {
	if o != nil && o.InternalFlag.IsSet() {
		return true
	}

	return false
}

// SetInternalFlag gets a reference to the given NullableBool and assigns it to the InternalFlag field.
func (o *ServiceNote) SetInternalFlag(v bool) {
	o.InternalFlag.Set(&v)
}

// SetInternalFlagNil sets the value for InternalFlag to be an explicit nil
func (o *ServiceNote) SetInternalFlagNil() {
	o.InternalFlag.Set(nil)
}

// UnsetInternalFlag ensures that no value is present for InternalFlag, not even an explicit nil
func (o *ServiceNote) UnsetInternalFlag() {
	o.InternalFlag.Unset()
}

// GetExternalFlag returns the ExternalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetExternalFlag() bool {
	if o == nil || IsNil(o.ExternalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExternalFlag.Get()
}

// GetExternalFlagOk returns a tuple with the ExternalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetExternalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalFlag.Get(), o.ExternalFlag.IsSet()
}

// HasExternalFlag returns a boolean if a field has been set.
func (o *ServiceNote) HasExternalFlag() bool {
	if o != nil && o.ExternalFlag.IsSet() {
		return true
	}

	return false
}

// SetExternalFlag gets a reference to the given NullableBool and assigns it to the ExternalFlag field.
func (o *ServiceNote) SetExternalFlag(v bool) {
	o.ExternalFlag.Set(&v)
}

// SetExternalFlagNil sets the value for ExternalFlag to be an explicit nil
func (o *ServiceNote) SetExternalFlagNil() {
	o.ExternalFlag.Set(nil)
}

// UnsetExternalFlag ensures that no value is present for ExternalFlag, not even an explicit nil
func (o *ServiceNote) UnsetExternalFlag() {
	o.ExternalFlag.Unset()
}

// GetSentimentScore returns the SentimentScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceNote) GetSentimentScore() float64 {
	if o == nil || IsNil(o.SentimentScore.Get()) {
		var ret float64
		return ret
	}
	return *o.SentimentScore.Get()
}

// GetSentimentScoreOk returns a tuple with the SentimentScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceNote) GetSentimentScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SentimentScore.Get(), o.SentimentScore.IsSet()
}

// HasSentimentScore returns a boolean if a field has been set.
func (o *ServiceNote) HasSentimentScore() bool {
	if o != nil && o.SentimentScore.IsSet() {
		return true
	}

	return false
}

// SetSentimentScore gets a reference to the given NullableFloat64 and assigns it to the SentimentScore field.
func (o *ServiceNote) SetSentimentScore(v float64) {
	o.SentimentScore.Set(&v)
}

// SetSentimentScoreNil sets the value for SentimentScore to be an explicit nil
func (o *ServiceNote) SetSentimentScoreNil() {
	o.SentimentScore.Set(nil)
}

// UnsetSentimentScore ensures that no value is present for SentimentScore, not even an explicit nil
func (o *ServiceNote) UnsetSentimentScore() {
	o.SentimentScore.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ServiceNote) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNote) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServiceNote) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ServiceNote) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ServiceNote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.TicketId.IsSet() {
		toSerialize["ticketId"] = o.TicketId.Get()
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if o.DetailDescriptionFlag.IsSet() {
		toSerialize["detailDescriptionFlag"] = o.DetailDescriptionFlag.Get()
	}
	if o.InternalAnalysisFlag.IsSet() {
		toSerialize["internalAnalysisFlag"] = o.InternalAnalysisFlag.Get()
	}
	if o.ResolutionFlag.IsSet() {
		toSerialize["resolutionFlag"] = o.ResolutionFlag.Get()
	}
	if o.IssueFlag.IsSet() {
		toSerialize["issueFlag"] = o.IssueFlag.Get()
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if o.CustomerUpdatedFlag.IsSet() {
		toSerialize["customerUpdatedFlag"] = o.CustomerUpdatedFlag.Get()
	}
	if o.ProcessNotifications.IsSet() {
		toSerialize["processNotifications"] = o.ProcessNotifications.Get()
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.InternalFlag.IsSet() {
		toSerialize["internalFlag"] = o.InternalFlag.Get()
	}
	if o.ExternalFlag.IsSet() {
		toSerialize["externalFlag"] = o.ExternalFlag.Get()
	}
	if o.SentimentScore.IsSet() {
		toSerialize["sentimentScore"] = o.SentimentScore.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableServiceNote struct {
	value *ServiceNote
	isSet bool
}

func (v NullableServiceNote) Get() *ServiceNote {
	return v.value
}

func (v *NullableServiceNote) Set(val *ServiceNote) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceNote) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceNote(val *ServiceNote) *NullableServiceNote {
	return &NullableServiceNote{value: val, isSet: true}
}

func (v NullableServiceNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
