/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServiceSurveyQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceSurveyQuestion{}

// ServiceSurveyQuestion struct for ServiceSurveyQuestion
type ServiceSurveyQuestion struct {
	Id             *int32         `json:"id,omitempty"`
	SequenceNumber NullableInt32  `json:"sequenceNumber,omitempty"`
	Type           NullableString `json:"type"`
	//  Max length: 1000;
	Question       string                        `json:"question"`
	Options        []ServiceSurveyQuestionOption `json:"options,omitempty"`
	IncludeFlag    NullableBool                  `json:"includeFlag,omitempty"`
	RequiredFlag   NullableBool                  `json:"requiredFlag,omitempty"`
	NoAnswerPoints NullableInt32                 `json:"noAnswerPoints,omitempty"`
	SurveyId       NullableInt32                 `json:"surveyId,omitempty"`
	Info           *map[string]string            `json:"_info,omitempty"`
}

type _ServiceSurveyQuestion ServiceSurveyQuestion

// NewServiceSurveyQuestion instantiates a new ServiceSurveyQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceSurveyQuestion(type_ NullableString, question string) *ServiceSurveyQuestion {
	this := ServiceSurveyQuestion{}
	this.Type = type_
	this.Question = question
	return &this
}

// NewServiceSurveyQuestionWithDefaults instantiates a new ServiceSurveyQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceSurveyQuestionWithDefaults() *ServiceSurveyQuestion {
	this := ServiceSurveyQuestion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceSurveyQuestion) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSurveyQuestion) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServiceSurveyQuestion) SetId(v int32) {
	o.Id = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceSurveyQuestion) GetSequenceNumber() int32 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceSurveyQuestion) GetSequenceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableInt32 and assigns it to the SequenceNumber field.
func (o *ServiceSurveyQuestion) SetSequenceNumber(v int32) {
	o.SequenceNumber.Set(&v)
}

// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *ServiceSurveyQuestion) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *ServiceSurveyQuestion) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ServiceSurveyQuestion) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceSurveyQuestion) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *ServiceSurveyQuestion) SetType(v string) {
	o.Type.Set(&v)
}

// GetQuestion returns the Question field value
func (o *ServiceSurveyQuestion) GetQuestion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *ServiceSurveyQuestion) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *ServiceSurveyQuestion) SetQuestion(v string) {
	o.Question = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ServiceSurveyQuestion) GetOptions() []ServiceSurveyQuestionOption {
	if o == nil || IsNil(o.Options) {
		var ret []ServiceSurveyQuestionOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSurveyQuestion) GetOptionsOk() ([]ServiceSurveyQuestionOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []ServiceSurveyQuestionOption and assigns it to the Options field.
func (o *ServiceSurveyQuestion) SetOptions(v []ServiceSurveyQuestionOption) {
	o.Options = v
}

// GetIncludeFlag returns the IncludeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceSurveyQuestion) GetIncludeFlag() bool {
	if o == nil || IsNil(o.IncludeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeFlag.Get()
}

// GetIncludeFlagOk returns a tuple with the IncludeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceSurveyQuestion) GetIncludeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeFlag.Get(), o.IncludeFlag.IsSet()
}

// HasIncludeFlag returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasIncludeFlag() bool {
	if o != nil && o.IncludeFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeFlag gets a reference to the given NullableBool and assigns it to the IncludeFlag field.
func (o *ServiceSurveyQuestion) SetIncludeFlag(v bool) {
	o.IncludeFlag.Set(&v)
}

// SetIncludeFlagNil sets the value for IncludeFlag to be an explicit nil
func (o *ServiceSurveyQuestion) SetIncludeFlagNil() {
	o.IncludeFlag.Set(nil)
}

// UnsetIncludeFlag ensures that no value is present for IncludeFlag, not even an explicit nil
func (o *ServiceSurveyQuestion) UnsetIncludeFlag() {
	o.IncludeFlag.Unset()
}

// GetRequiredFlag returns the RequiredFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceSurveyQuestion) GetRequiredFlag() bool {
	if o == nil || IsNil(o.RequiredFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiredFlag.Get()
}

// GetRequiredFlagOk returns a tuple with the RequiredFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceSurveyQuestion) GetRequiredFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFlag.Get(), o.RequiredFlag.IsSet()
}

// HasRequiredFlag returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasRequiredFlag() bool {
	if o != nil && o.RequiredFlag.IsSet() {
		return true
	}

	return false
}

// SetRequiredFlag gets a reference to the given NullableBool and assigns it to the RequiredFlag field.
func (o *ServiceSurveyQuestion) SetRequiredFlag(v bool) {
	o.RequiredFlag.Set(&v)
}

// SetRequiredFlagNil sets the value for RequiredFlag to be an explicit nil
func (o *ServiceSurveyQuestion) SetRequiredFlagNil() {
	o.RequiredFlag.Set(nil)
}

// UnsetRequiredFlag ensures that no value is present for RequiredFlag, not even an explicit nil
func (o *ServiceSurveyQuestion) UnsetRequiredFlag() {
	o.RequiredFlag.Unset()
}

// GetNoAnswerPoints returns the NoAnswerPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceSurveyQuestion) GetNoAnswerPoints() int32 {
	if o == nil || IsNil(o.NoAnswerPoints.Get()) {
		var ret int32
		return ret
	}
	return *o.NoAnswerPoints.Get()
}

// GetNoAnswerPointsOk returns a tuple with the NoAnswerPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceSurveyQuestion) GetNoAnswerPointsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoAnswerPoints.Get(), o.NoAnswerPoints.IsSet()
}

// HasNoAnswerPoints returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasNoAnswerPoints() bool {
	if o != nil && o.NoAnswerPoints.IsSet() {
		return true
	}

	return false
}

// SetNoAnswerPoints gets a reference to the given NullableInt32 and assigns it to the NoAnswerPoints field.
func (o *ServiceSurveyQuestion) SetNoAnswerPoints(v int32) {
	o.NoAnswerPoints.Set(&v)
}

// SetNoAnswerPointsNil sets the value for NoAnswerPoints to be an explicit nil
func (o *ServiceSurveyQuestion) SetNoAnswerPointsNil() {
	o.NoAnswerPoints.Set(nil)
}

// UnsetNoAnswerPoints ensures that no value is present for NoAnswerPoints, not even an explicit nil
func (o *ServiceSurveyQuestion) UnsetNoAnswerPoints() {
	o.NoAnswerPoints.Unset()
}

// GetSurveyId returns the SurveyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceSurveyQuestion) GetSurveyId() int32 {
	if o == nil || IsNil(o.SurveyId.Get()) {
		var ret int32
		return ret
	}
	return *o.SurveyId.Get()
}

// GetSurveyIdOk returns a tuple with the SurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceSurveyQuestion) GetSurveyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SurveyId.Get(), o.SurveyId.IsSet()
}

// HasSurveyId returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasSurveyId() bool {
	if o != nil && o.SurveyId.IsSet() {
		return true
	}

	return false
}

// SetSurveyId gets a reference to the given NullableInt32 and assigns it to the SurveyId field.
func (o *ServiceSurveyQuestion) SetSurveyId(v int32) {
	o.SurveyId.Set(&v)
}

// SetSurveyIdNil sets the value for SurveyId to be an explicit nil
func (o *ServiceSurveyQuestion) SetSurveyIdNil() {
	o.SurveyId.Set(nil)
}

// UnsetSurveyId ensures that no value is present for SurveyId, not even an explicit nil
func (o *ServiceSurveyQuestion) UnsetSurveyId() {
	o.SurveyId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ServiceSurveyQuestion) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceSurveyQuestion) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServiceSurveyQuestion) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ServiceSurveyQuestion) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ServiceSurveyQuestion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceSurveyQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	toSerialize["type"] = o.Type.Get()
	toSerialize["question"] = o.Question
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if o.IncludeFlag.IsSet() {
		toSerialize["includeFlag"] = o.IncludeFlag.Get()
	}
	if o.RequiredFlag.IsSet() {
		toSerialize["requiredFlag"] = o.RequiredFlag.Get()
	}
	if o.NoAnswerPoints.IsSet() {
		toSerialize["noAnswerPoints"] = o.NoAnswerPoints.Get()
	}
	if o.SurveyId.IsSet() {
		toSerialize["surveyId"] = o.SurveyId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ServiceSurveyQuestion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"question",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceSurveyQuestion := _ServiceSurveyQuestion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceSurveyQuestion)

	if err != nil {
		return err
	}

	*o = ServiceSurveyQuestion(varServiceSurveyQuestion)

	return err
}

type NullableServiceSurveyQuestion struct {
	value *ServiceSurveyQuestion
	isSet bool
}

func (v NullableServiceSurveyQuestion) Get() *ServiceSurveyQuestion {
	return v.value
}

func (v *NullableServiceSurveyQuestion) Set(val *ServiceSurveyQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceSurveyQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceSurveyQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceSurveyQuestion(val *ServiceSurveyQuestion) *NullableServiceSurveyQuestion {
	return &NullableServiceSurveyQuestion{value: val, isSet: true}
}

func (v NullableServiceSurveyQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceSurveyQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
