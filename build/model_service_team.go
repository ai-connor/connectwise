/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ServiceTeam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTeam{}

// ServiceTeam struct for ServiceTeam
type ServiceTeam struct {
	Id               *int32                     `json:"id,omitempty"`
	Name             *string                    `json:"name,omitempty"`
	Leader           *MemberReference           `json:"leader,omitempty"`
	Location         *SystemLocationReference   `json:"location,omitempty"`
	Department       *SystemDepartmentReference `json:"department,omitempty"`
	DeleteNotifyFlag NullableBool               `json:"deleteNotifyFlag,omitempty"`
	Info             *map[string]string         `json:"_info,omitempty"`
}

// NewServiceTeam instantiates a new ServiceTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTeam() *ServiceTeam {
	this := ServiceTeam{}
	return &this
}

// NewServiceTeamWithDefaults instantiates a new ServiceTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTeamWithDefaults() *ServiceTeam {
	this := ServiceTeam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceTeam) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeam) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceTeam) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServiceTeam) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceTeam) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeam) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceTeam) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServiceTeam) SetName(v string) {
	o.Name = &v
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *ServiceTeam) GetLeader() MemberReference {
	if o == nil || IsNil(o.Leader) {
		var ret MemberReference
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeam) GetLeaderOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Leader) {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *ServiceTeam) HasLeader() bool {
	if o != nil && !IsNil(o.Leader) {
		return true
	}

	return false
}

// SetLeader gets a reference to the given MemberReference and assigns it to the Leader field.
func (o *ServiceTeam) SetLeader(v MemberReference) {
	o.Leader = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ServiceTeam) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeam) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ServiceTeam) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *ServiceTeam) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *ServiceTeam) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeam) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *ServiceTeam) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *ServiceTeam) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetDeleteNotifyFlag returns the DeleteNotifyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTeam) GetDeleteNotifyFlag() bool {
	if o == nil || IsNil(o.DeleteNotifyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DeleteNotifyFlag.Get()
}

// GetDeleteNotifyFlagOk returns a tuple with the DeleteNotifyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTeam) GetDeleteNotifyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteNotifyFlag.Get(), o.DeleteNotifyFlag.IsSet()
}

// HasDeleteNotifyFlag returns a boolean if a field has been set.
func (o *ServiceTeam) HasDeleteNotifyFlag() bool {
	if o != nil && o.DeleteNotifyFlag.IsSet() {
		return true
	}

	return false
}

// SetDeleteNotifyFlag gets a reference to the given NullableBool and assigns it to the DeleteNotifyFlag field.
func (o *ServiceTeam) SetDeleteNotifyFlag(v bool) {
	o.DeleteNotifyFlag.Set(&v)
}

// SetDeleteNotifyFlagNil sets the value for DeleteNotifyFlag to be an explicit nil
func (o *ServiceTeam) SetDeleteNotifyFlagNil() {
	o.DeleteNotifyFlag.Set(nil)
}

// UnsetDeleteNotifyFlag ensures that no value is present for DeleteNotifyFlag, not even an explicit nil
func (o *ServiceTeam) UnsetDeleteNotifyFlag() {
	o.DeleteNotifyFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ServiceTeam) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeam) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServiceTeam) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ServiceTeam) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ServiceTeam) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTeam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Leader) {
		toSerialize["leader"] = o.Leader
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.DeleteNotifyFlag.IsSet() {
		toSerialize["deleteNotifyFlag"] = o.DeleteNotifyFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableServiceTeam struct {
	value *ServiceTeam
	isSet bool
}

func (v NullableServiceTeam) Get() *ServiceTeam {
	return v.value
}

func (v *NullableServiceTeam) Set(val *ServiceTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTeam(val *ServiceTeam) *NullableServiceTeam {
	return &NullableServiceTeam{value: val, isSet: true}
}

func (v NullableServiceTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
