/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServiceTicketLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTicketLink{}

// ServiceTicketLink struct for ServiceTicketLink
type ServiceTicketLink struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name        string       `json:"name"`
	EnabledFlag NullableBool `json:"enabledFlag,omitempty"`
	//  Max length: 50;
	LinkText string `json:"linkText"`
	//  Max length: 1000;
	Url  string             `json:"url"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ServiceTicketLink ServiceTicketLink

// NewServiceTicketLink instantiates a new ServiceTicketLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTicketLink(name string, linkText string, url string) *ServiceTicketLink {
	this := ServiceTicketLink{}
	this.Name = name
	this.LinkText = linkText
	this.Url = url
	return &this
}

// NewServiceTicketLinkWithDefaults instantiates a new ServiceTicketLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTicketLinkWithDefaults() *ServiceTicketLink {
	this := ServiceTicketLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceTicketLink) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketLink) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceTicketLink) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServiceTicketLink) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ServiceTicketLink) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceTicketLink) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceTicketLink) SetName(v string) {
	o.Name = v
}

// GetEnabledFlag returns the EnabledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketLink) GetEnabledFlag() bool {
	if o == nil || IsNil(o.EnabledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EnabledFlag.Get()
}

// GetEnabledFlagOk returns a tuple with the EnabledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketLink) GetEnabledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnabledFlag.Get(), o.EnabledFlag.IsSet()
}

// HasEnabledFlag returns a boolean if a field has been set.
func (o *ServiceTicketLink) HasEnabledFlag() bool {
	if o != nil && o.EnabledFlag.IsSet() {
		return true
	}

	return false
}

// SetEnabledFlag gets a reference to the given NullableBool and assigns it to the EnabledFlag field.
func (o *ServiceTicketLink) SetEnabledFlag(v bool) {
	o.EnabledFlag.Set(&v)
}

// SetEnabledFlagNil sets the value for EnabledFlag to be an explicit nil
func (o *ServiceTicketLink) SetEnabledFlagNil() {
	o.EnabledFlag.Set(nil)
}

// UnsetEnabledFlag ensures that no value is present for EnabledFlag, not even an explicit nil
func (o *ServiceTicketLink) UnsetEnabledFlag() {
	o.EnabledFlag.Unset()
}

// GetLinkText returns the LinkText field value
func (o *ServiceTicketLink) GetLinkText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkText
}

// GetLinkTextOk returns a tuple with the LinkText field value
// and a boolean to check if the value has been set.
func (o *ServiceTicketLink) GetLinkTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkText, true
}

// SetLinkText sets field value
func (o *ServiceTicketLink) SetLinkText(v string) {
	o.LinkText = v
}

// GetUrl returns the Url field value
func (o *ServiceTicketLink) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ServiceTicketLink) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ServiceTicketLink) SetUrl(v string) {
	o.Url = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ServiceTicketLink) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketLink) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServiceTicketLink) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ServiceTicketLink) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ServiceTicketLink) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTicketLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.EnabledFlag.IsSet() {
		toSerialize["enabledFlag"] = o.EnabledFlag.Get()
	}
	toSerialize["linkText"] = o.LinkText
	toSerialize["url"] = o.Url
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ServiceTicketLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"linkText",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceTicketLink := _ServiceTicketLink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceTicketLink)

	if err != nil {
		return err
	}

	*o = ServiceTicketLink(varServiceTicketLink)

	return err
}

type NullableServiceTicketLink struct {
	value *ServiceTicketLink
	isSet bool
}

func (v NullableServiceTicketLink) Get() *ServiceTicketLink {
	return v.value
}

func (v *NullableServiceTicketLink) Set(val *ServiceTicketLink) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTicketLink) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTicketLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTicketLink(val *ServiceTicketLink) *NullableServiceTicketLink {
	return &NullableServiceTicketLink{value: val, isSet: true}
}

func (v NullableServiceTicketLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTicketLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
