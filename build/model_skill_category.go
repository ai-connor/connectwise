/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SkillCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkillCategory{}

// SkillCategory struct for SkillCategory
type SkillCategory struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name string             `json:"name"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _SkillCategory SkillCategory

// NewSkillCategory instantiates a new SkillCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkillCategory(name string) *SkillCategory {
	this := SkillCategory{}
	this.Name = name
	return &this
}

// NewSkillCategoryWithDefaults instantiates a new SkillCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkillCategoryWithDefaults() *SkillCategory {
	this := SkillCategory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SkillCategory) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkillCategory) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SkillCategory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SkillCategory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *SkillCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SkillCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SkillCategory) SetName(v string) {
	o.Name = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SkillCategory) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkillCategory) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SkillCategory) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SkillCategory) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SkillCategory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkillCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SkillCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkillCategory := _SkillCategory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkillCategory)

	if err != nil {
		return err
	}

	*o = SkillCategory(varSkillCategory)

	return err
}

type NullableSkillCategory struct {
	value *SkillCategory
	isSet bool
}

func (v NullableSkillCategory) Get() *SkillCategory {
	return v.value
}

func (v *NullableSkillCategory) Set(val *SkillCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableSkillCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableSkillCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkillCategory(val *SkillCategory) *NullableSkillCategory {
	return &NullableSkillCategory{value: val, isSet: true}
}

func (v NullableSkillCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkillCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
