/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SLA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SLA{}

// SLA struct for SLA
type SLA struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 25;
	Name                string             `json:"name"`
	BasedOn             NullableString     `json:"basedOn"`
	CustomCalendar      *CalendarReference `json:"customCalendar,omitempty"`
	DefaultFlag         NullableBool       `json:"defaultFlag,omitempty"`
	ApplicationOrder    NullableInt32      `json:"applicationOrder,omitempty"`
	HiImpactHiUrgency   *PriorityReference `json:"hiImpactHiUrgency,omitempty"`
	HiImpactMedUrgency  *PriorityReference `json:"hiImpactMedUrgency,omitempty"`
	HiImpactLowUrgency  *PriorityReference `json:"hiImpactLowUrgency,omitempty"`
	MedImpactHiUrgency  *PriorityReference `json:"medImpactHiUrgency,omitempty"`
	MedImpactMedUrgency *PriorityReference `json:"medImpactMedUrgency,omitempty"`
	MedImpactLowUrgency *PriorityReference `json:"medImpactLowUrgency,omitempty"`
	LowImpactHiUrgency  *PriorityReference `json:"lowImpactHiUrgency,omitempty"`
	LowImpactMedUrgency *PriorityReference `json:"lowImpactMedUrgency,omitempty"`
	LowImpactLowUrgency *PriorityReference `json:"lowImpactLowUrgency,omitempty"`
	RespondHours        NullableFloat64    `json:"respondHours,omitempty"`
	RespondPercent      NullableInt32      `json:"respondPercent,omitempty"`
	PlanWithin          NullableFloat64    `json:"planWithin,omitempty"`
	PlanWithinPercent   NullableInt32      `json:"planWithinPercent,omitempty"`
	ResolutionHours     NullableFloat64    `json:"resolutionHours,omitempty"`
	ResolutionPercent   NullableInt32      `json:"resolutionPercent,omitempty"`
	Info                *map[string]string `json:"_info,omitempty"`
}

type _SLA SLA

// NewSLA instantiates a new SLA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLA(name string, basedOn NullableString) *SLA {
	this := SLA{}
	this.Name = name
	this.BasedOn = basedOn
	return &this
}

// NewSLAWithDefaults instantiates a new SLA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLAWithDefaults() *SLA {
	this := SLA{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SLA) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SLA) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SLA) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *SLA) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SLA) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SLA) SetName(v string) {
	o.Name = v
}

// GetBasedOn returns the BasedOn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SLA) GetBasedOn() string {
	if o == nil || o.BasedOn.Get() == nil {
		var ret string
		return ret
	}

	return *o.BasedOn.Get()
}

// GetBasedOnOk returns a tuple with the BasedOn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetBasedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasedOn.Get(), o.BasedOn.IsSet()
}

// SetBasedOn sets field value
func (o *SLA) SetBasedOn(v string) {
	o.BasedOn.Set(&v)
}

// GetCustomCalendar returns the CustomCalendar field value if set, zero value otherwise.
func (o *SLA) GetCustomCalendar() CalendarReference {
	if o == nil || IsNil(o.CustomCalendar) {
		var ret CalendarReference
		return ret
	}
	return *o.CustomCalendar
}

// GetCustomCalendarOk returns a tuple with the CustomCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetCustomCalendarOk() (*CalendarReference, bool) {
	if o == nil || IsNil(o.CustomCalendar) {
		return nil, false
	}
	return o.CustomCalendar, true
}

// HasCustomCalendar returns a boolean if a field has been set.
func (o *SLA) HasCustomCalendar() bool {
	if o != nil && !IsNil(o.CustomCalendar) {
		return true
	}

	return false
}

// SetCustomCalendar gets a reference to the given CalendarReference and assigns it to the CustomCalendar field.
func (o *SLA) SetCustomCalendar(v CalendarReference) {
	o.CustomCalendar = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *SLA) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *SLA) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *SLA) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *SLA) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetApplicationOrder returns the ApplicationOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetApplicationOrder() int32 {
	if o == nil || IsNil(o.ApplicationOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.ApplicationOrder.Get()
}

// GetApplicationOrderOk returns a tuple with the ApplicationOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetApplicationOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationOrder.Get(), o.ApplicationOrder.IsSet()
}

// HasApplicationOrder returns a boolean if a field has been set.
func (o *SLA) HasApplicationOrder() bool {
	if o != nil && o.ApplicationOrder.IsSet() {
		return true
	}

	return false
}

// SetApplicationOrder gets a reference to the given NullableInt32 and assigns it to the ApplicationOrder field.
func (o *SLA) SetApplicationOrder(v int32) {
	o.ApplicationOrder.Set(&v)
}

// SetApplicationOrderNil sets the value for ApplicationOrder to be an explicit nil
func (o *SLA) SetApplicationOrderNil() {
	o.ApplicationOrder.Set(nil)
}

// UnsetApplicationOrder ensures that no value is present for ApplicationOrder, not even an explicit nil
func (o *SLA) UnsetApplicationOrder() {
	o.ApplicationOrder.Unset()
}

// GetHiImpactHiUrgency returns the HiImpactHiUrgency field value if set, zero value otherwise.
func (o *SLA) GetHiImpactHiUrgency() PriorityReference {
	if o == nil || IsNil(o.HiImpactHiUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.HiImpactHiUrgency
}

// GetHiImpactHiUrgencyOk returns a tuple with the HiImpactHiUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetHiImpactHiUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.HiImpactHiUrgency) {
		return nil, false
	}
	return o.HiImpactHiUrgency, true
}

// HasHiImpactHiUrgency returns a boolean if a field has been set.
func (o *SLA) HasHiImpactHiUrgency() bool {
	if o != nil && !IsNil(o.HiImpactHiUrgency) {
		return true
	}

	return false
}

// SetHiImpactHiUrgency gets a reference to the given PriorityReference and assigns it to the HiImpactHiUrgency field.
func (o *SLA) SetHiImpactHiUrgency(v PriorityReference) {
	o.HiImpactHiUrgency = &v
}

// GetHiImpactMedUrgency returns the HiImpactMedUrgency field value if set, zero value otherwise.
func (o *SLA) GetHiImpactMedUrgency() PriorityReference {
	if o == nil || IsNil(o.HiImpactMedUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.HiImpactMedUrgency
}

// GetHiImpactMedUrgencyOk returns a tuple with the HiImpactMedUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetHiImpactMedUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.HiImpactMedUrgency) {
		return nil, false
	}
	return o.HiImpactMedUrgency, true
}

// HasHiImpactMedUrgency returns a boolean if a field has been set.
func (o *SLA) HasHiImpactMedUrgency() bool {
	if o != nil && !IsNil(o.HiImpactMedUrgency) {
		return true
	}

	return false
}

// SetHiImpactMedUrgency gets a reference to the given PriorityReference and assigns it to the HiImpactMedUrgency field.
func (o *SLA) SetHiImpactMedUrgency(v PriorityReference) {
	o.HiImpactMedUrgency = &v
}

// GetHiImpactLowUrgency returns the HiImpactLowUrgency field value if set, zero value otherwise.
func (o *SLA) GetHiImpactLowUrgency() PriorityReference {
	if o == nil || IsNil(o.HiImpactLowUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.HiImpactLowUrgency
}

// GetHiImpactLowUrgencyOk returns a tuple with the HiImpactLowUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetHiImpactLowUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.HiImpactLowUrgency) {
		return nil, false
	}
	return o.HiImpactLowUrgency, true
}

// HasHiImpactLowUrgency returns a boolean if a field has been set.
func (o *SLA) HasHiImpactLowUrgency() bool {
	if o != nil && !IsNil(o.HiImpactLowUrgency) {
		return true
	}

	return false
}

// SetHiImpactLowUrgency gets a reference to the given PriorityReference and assigns it to the HiImpactLowUrgency field.
func (o *SLA) SetHiImpactLowUrgency(v PriorityReference) {
	o.HiImpactLowUrgency = &v
}

// GetMedImpactHiUrgency returns the MedImpactHiUrgency field value if set, zero value otherwise.
func (o *SLA) GetMedImpactHiUrgency() PriorityReference {
	if o == nil || IsNil(o.MedImpactHiUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.MedImpactHiUrgency
}

// GetMedImpactHiUrgencyOk returns a tuple with the MedImpactHiUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetMedImpactHiUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.MedImpactHiUrgency) {
		return nil, false
	}
	return o.MedImpactHiUrgency, true
}

// HasMedImpactHiUrgency returns a boolean if a field has been set.
func (o *SLA) HasMedImpactHiUrgency() bool {
	if o != nil && !IsNil(o.MedImpactHiUrgency) {
		return true
	}

	return false
}

// SetMedImpactHiUrgency gets a reference to the given PriorityReference and assigns it to the MedImpactHiUrgency field.
func (o *SLA) SetMedImpactHiUrgency(v PriorityReference) {
	o.MedImpactHiUrgency = &v
}

// GetMedImpactMedUrgency returns the MedImpactMedUrgency field value if set, zero value otherwise.
func (o *SLA) GetMedImpactMedUrgency() PriorityReference {
	if o == nil || IsNil(o.MedImpactMedUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.MedImpactMedUrgency
}

// GetMedImpactMedUrgencyOk returns a tuple with the MedImpactMedUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetMedImpactMedUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.MedImpactMedUrgency) {
		return nil, false
	}
	return o.MedImpactMedUrgency, true
}

// HasMedImpactMedUrgency returns a boolean if a field has been set.
func (o *SLA) HasMedImpactMedUrgency() bool {
	if o != nil && !IsNil(o.MedImpactMedUrgency) {
		return true
	}

	return false
}

// SetMedImpactMedUrgency gets a reference to the given PriorityReference and assigns it to the MedImpactMedUrgency field.
func (o *SLA) SetMedImpactMedUrgency(v PriorityReference) {
	o.MedImpactMedUrgency = &v
}

// GetMedImpactLowUrgency returns the MedImpactLowUrgency field value if set, zero value otherwise.
func (o *SLA) GetMedImpactLowUrgency() PriorityReference {
	if o == nil || IsNil(o.MedImpactLowUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.MedImpactLowUrgency
}

// GetMedImpactLowUrgencyOk returns a tuple with the MedImpactLowUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetMedImpactLowUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.MedImpactLowUrgency) {
		return nil, false
	}
	return o.MedImpactLowUrgency, true
}

// HasMedImpactLowUrgency returns a boolean if a field has been set.
func (o *SLA) HasMedImpactLowUrgency() bool {
	if o != nil && !IsNil(o.MedImpactLowUrgency) {
		return true
	}

	return false
}

// SetMedImpactLowUrgency gets a reference to the given PriorityReference and assigns it to the MedImpactLowUrgency field.
func (o *SLA) SetMedImpactLowUrgency(v PriorityReference) {
	o.MedImpactLowUrgency = &v
}

// GetLowImpactHiUrgency returns the LowImpactHiUrgency field value if set, zero value otherwise.
func (o *SLA) GetLowImpactHiUrgency() PriorityReference {
	if o == nil || IsNil(o.LowImpactHiUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.LowImpactHiUrgency
}

// GetLowImpactHiUrgencyOk returns a tuple with the LowImpactHiUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetLowImpactHiUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.LowImpactHiUrgency) {
		return nil, false
	}
	return o.LowImpactHiUrgency, true
}

// HasLowImpactHiUrgency returns a boolean if a field has been set.
func (o *SLA) HasLowImpactHiUrgency() bool {
	if o != nil && !IsNil(o.LowImpactHiUrgency) {
		return true
	}

	return false
}

// SetLowImpactHiUrgency gets a reference to the given PriorityReference and assigns it to the LowImpactHiUrgency field.
func (o *SLA) SetLowImpactHiUrgency(v PriorityReference) {
	o.LowImpactHiUrgency = &v
}

// GetLowImpactMedUrgency returns the LowImpactMedUrgency field value if set, zero value otherwise.
func (o *SLA) GetLowImpactMedUrgency() PriorityReference {
	if o == nil || IsNil(o.LowImpactMedUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.LowImpactMedUrgency
}

// GetLowImpactMedUrgencyOk returns a tuple with the LowImpactMedUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetLowImpactMedUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.LowImpactMedUrgency) {
		return nil, false
	}
	return o.LowImpactMedUrgency, true
}

// HasLowImpactMedUrgency returns a boolean if a field has been set.
func (o *SLA) HasLowImpactMedUrgency() bool {
	if o != nil && !IsNil(o.LowImpactMedUrgency) {
		return true
	}

	return false
}

// SetLowImpactMedUrgency gets a reference to the given PriorityReference and assigns it to the LowImpactMedUrgency field.
func (o *SLA) SetLowImpactMedUrgency(v PriorityReference) {
	o.LowImpactMedUrgency = &v
}

// GetLowImpactLowUrgency returns the LowImpactLowUrgency field value if set, zero value otherwise.
func (o *SLA) GetLowImpactLowUrgency() PriorityReference {
	if o == nil || IsNil(o.LowImpactLowUrgency) {
		var ret PriorityReference
		return ret
	}
	return *o.LowImpactLowUrgency
}

// GetLowImpactLowUrgencyOk returns a tuple with the LowImpactLowUrgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetLowImpactLowUrgencyOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.LowImpactLowUrgency) {
		return nil, false
	}
	return o.LowImpactLowUrgency, true
}

// HasLowImpactLowUrgency returns a boolean if a field has been set.
func (o *SLA) HasLowImpactLowUrgency() bool {
	if o != nil && !IsNil(o.LowImpactLowUrgency) {
		return true
	}

	return false
}

// SetLowImpactLowUrgency gets a reference to the given PriorityReference and assigns it to the LowImpactLowUrgency field.
func (o *SLA) SetLowImpactLowUrgency(v PriorityReference) {
	o.LowImpactLowUrgency = &v
}

// GetRespondHours returns the RespondHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetRespondHours() float64 {
	if o == nil || IsNil(o.RespondHours.Get()) {
		var ret float64
		return ret
	}
	return *o.RespondHours.Get()
}

// GetRespondHoursOk returns a tuple with the RespondHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetRespondHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondHours.Get(), o.RespondHours.IsSet()
}

// HasRespondHours returns a boolean if a field has been set.
func (o *SLA) HasRespondHours() bool {
	if o != nil && o.RespondHours.IsSet() {
		return true
	}

	return false
}

// SetRespondHours gets a reference to the given NullableFloat64 and assigns it to the RespondHours field.
func (o *SLA) SetRespondHours(v float64) {
	o.RespondHours.Set(&v)
}

// SetRespondHoursNil sets the value for RespondHours to be an explicit nil
func (o *SLA) SetRespondHoursNil() {
	o.RespondHours.Set(nil)
}

// UnsetRespondHours ensures that no value is present for RespondHours, not even an explicit nil
func (o *SLA) UnsetRespondHours() {
	o.RespondHours.Unset()
}

// GetRespondPercent returns the RespondPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetRespondPercent() int32 {
	if o == nil || IsNil(o.RespondPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.RespondPercent.Get()
}

// GetRespondPercentOk returns a tuple with the RespondPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetRespondPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondPercent.Get(), o.RespondPercent.IsSet()
}

// HasRespondPercent returns a boolean if a field has been set.
func (o *SLA) HasRespondPercent() bool {
	if o != nil && o.RespondPercent.IsSet() {
		return true
	}

	return false
}

// SetRespondPercent gets a reference to the given NullableInt32 and assigns it to the RespondPercent field.
func (o *SLA) SetRespondPercent(v int32) {
	o.RespondPercent.Set(&v)
}

// SetRespondPercentNil sets the value for RespondPercent to be an explicit nil
func (o *SLA) SetRespondPercentNil() {
	o.RespondPercent.Set(nil)
}

// UnsetRespondPercent ensures that no value is present for RespondPercent, not even an explicit nil
func (o *SLA) UnsetRespondPercent() {
	o.RespondPercent.Unset()
}

// GetPlanWithin returns the PlanWithin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetPlanWithin() float64 {
	if o == nil || IsNil(o.PlanWithin.Get()) {
		var ret float64
		return ret
	}
	return *o.PlanWithin.Get()
}

// GetPlanWithinOk returns a tuple with the PlanWithin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetPlanWithinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanWithin.Get(), o.PlanWithin.IsSet()
}

// HasPlanWithin returns a boolean if a field has been set.
func (o *SLA) HasPlanWithin() bool {
	if o != nil && o.PlanWithin.IsSet() {
		return true
	}

	return false
}

// SetPlanWithin gets a reference to the given NullableFloat64 and assigns it to the PlanWithin field.
func (o *SLA) SetPlanWithin(v float64) {
	o.PlanWithin.Set(&v)
}

// SetPlanWithinNil sets the value for PlanWithin to be an explicit nil
func (o *SLA) SetPlanWithinNil() {
	o.PlanWithin.Set(nil)
}

// UnsetPlanWithin ensures that no value is present for PlanWithin, not even an explicit nil
func (o *SLA) UnsetPlanWithin() {
	o.PlanWithin.Unset()
}

// GetPlanWithinPercent returns the PlanWithinPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetPlanWithinPercent() int32 {
	if o == nil || IsNil(o.PlanWithinPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.PlanWithinPercent.Get()
}

// GetPlanWithinPercentOk returns a tuple with the PlanWithinPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetPlanWithinPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanWithinPercent.Get(), o.PlanWithinPercent.IsSet()
}

// HasPlanWithinPercent returns a boolean if a field has been set.
func (o *SLA) HasPlanWithinPercent() bool {
	if o != nil && o.PlanWithinPercent.IsSet() {
		return true
	}

	return false
}

// SetPlanWithinPercent gets a reference to the given NullableInt32 and assigns it to the PlanWithinPercent field.
func (o *SLA) SetPlanWithinPercent(v int32) {
	o.PlanWithinPercent.Set(&v)
}

// SetPlanWithinPercentNil sets the value for PlanWithinPercent to be an explicit nil
func (o *SLA) SetPlanWithinPercentNil() {
	o.PlanWithinPercent.Set(nil)
}

// UnsetPlanWithinPercent ensures that no value is present for PlanWithinPercent, not even an explicit nil
func (o *SLA) UnsetPlanWithinPercent() {
	o.PlanWithinPercent.Unset()
}

// GetResolutionHours returns the ResolutionHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetResolutionHours() float64 {
	if o == nil || IsNil(o.ResolutionHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ResolutionHours.Get()
}

// GetResolutionHoursOk returns a tuple with the ResolutionHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetResolutionHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionHours.Get(), o.ResolutionHours.IsSet()
}

// HasResolutionHours returns a boolean if a field has been set.
func (o *SLA) HasResolutionHours() bool {
	if o != nil && o.ResolutionHours.IsSet() {
		return true
	}

	return false
}

// SetResolutionHours gets a reference to the given NullableFloat64 and assigns it to the ResolutionHours field.
func (o *SLA) SetResolutionHours(v float64) {
	o.ResolutionHours.Set(&v)
}

// SetResolutionHoursNil sets the value for ResolutionHours to be an explicit nil
func (o *SLA) SetResolutionHoursNil() {
	o.ResolutionHours.Set(nil)
}

// UnsetResolutionHours ensures that no value is present for ResolutionHours, not even an explicit nil
func (o *SLA) UnsetResolutionHours() {
	o.ResolutionHours.Unset()
}

// GetResolutionPercent returns the ResolutionPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLA) GetResolutionPercent() int32 {
	if o == nil || IsNil(o.ResolutionPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.ResolutionPercent.Get()
}

// GetResolutionPercentOk returns a tuple with the ResolutionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLA) GetResolutionPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionPercent.Get(), o.ResolutionPercent.IsSet()
}

// HasResolutionPercent returns a boolean if a field has been set.
func (o *SLA) HasResolutionPercent() bool {
	if o != nil && o.ResolutionPercent.IsSet() {
		return true
	}

	return false
}

// SetResolutionPercent gets a reference to the given NullableInt32 and assigns it to the ResolutionPercent field.
func (o *SLA) SetResolutionPercent(v int32) {
	o.ResolutionPercent.Set(&v)
}

// SetResolutionPercentNil sets the value for ResolutionPercent to be an explicit nil
func (o *SLA) SetResolutionPercentNil() {
	o.ResolutionPercent.Set(nil)
}

// UnsetResolutionPercent ensures that no value is present for ResolutionPercent, not even an explicit nil
func (o *SLA) UnsetResolutionPercent() {
	o.ResolutionPercent.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SLA) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLA) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SLA) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SLA) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SLA) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SLA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["basedOn"] = o.BasedOn.Get()
	if !IsNil(o.CustomCalendar) {
		toSerialize["customCalendar"] = o.CustomCalendar
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.ApplicationOrder.IsSet() {
		toSerialize["applicationOrder"] = o.ApplicationOrder.Get()
	}
	if !IsNil(o.HiImpactHiUrgency) {
		toSerialize["hiImpactHiUrgency"] = o.HiImpactHiUrgency
	}
	if !IsNil(o.HiImpactMedUrgency) {
		toSerialize["hiImpactMedUrgency"] = o.HiImpactMedUrgency
	}
	if !IsNil(o.HiImpactLowUrgency) {
		toSerialize["hiImpactLowUrgency"] = o.HiImpactLowUrgency
	}
	if !IsNil(o.MedImpactHiUrgency) {
		toSerialize["medImpactHiUrgency"] = o.MedImpactHiUrgency
	}
	if !IsNil(o.MedImpactMedUrgency) {
		toSerialize["medImpactMedUrgency"] = o.MedImpactMedUrgency
	}
	if !IsNil(o.MedImpactLowUrgency) {
		toSerialize["medImpactLowUrgency"] = o.MedImpactLowUrgency
	}
	if !IsNil(o.LowImpactHiUrgency) {
		toSerialize["lowImpactHiUrgency"] = o.LowImpactHiUrgency
	}
	if !IsNil(o.LowImpactMedUrgency) {
		toSerialize["lowImpactMedUrgency"] = o.LowImpactMedUrgency
	}
	if !IsNil(o.LowImpactLowUrgency) {
		toSerialize["lowImpactLowUrgency"] = o.LowImpactLowUrgency
	}
	if o.RespondHours.IsSet() {
		toSerialize["respondHours"] = o.RespondHours.Get()
	}
	if o.RespondPercent.IsSet() {
		toSerialize["respondPercent"] = o.RespondPercent.Get()
	}
	if o.PlanWithin.IsSet() {
		toSerialize["planWithin"] = o.PlanWithin.Get()
	}
	if o.PlanWithinPercent.IsSet() {
		toSerialize["planWithinPercent"] = o.PlanWithinPercent.Get()
	}
	if o.ResolutionHours.IsSet() {
		toSerialize["resolutionHours"] = o.ResolutionHours.Get()
	}
	if o.ResolutionPercent.IsSet() {
		toSerialize["resolutionPercent"] = o.ResolutionPercent.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SLA) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"basedOn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSLA := _SLA{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSLA)

	if err != nil {
		return err
	}

	*o = SLA(varSLA)

	return err
}

type NullableSLA struct {
	value *SLA
	isSet bool
}

func (v NullableSLA) Get() *SLA {
	return v.value
}

func (v *NullableSLA) Set(val *SLA) {
	v.value = val
	v.isSet = true
}

func (v NullableSLA) IsSet() bool {
	return v.isSet
}

func (v *NullableSLA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLA(val *SLA) *NullableSLA {
	return &NullableSLA{value: val, isSet: true}
}

func (v NullableSLA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
