/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SLAPriority type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SLAPriority{}

// SLAPriority struct for SLAPriority
type SLAPriority struct {
	Id                *int32             `json:"id,omitempty"`
	Priority          PriorityReference  `json:"priority"`
	RespondHours      NullableFloat64    `json:"respondHours,omitempty"`
	RespondPercent    NullableInt32      `json:"respondPercent,omitempty"`
	PlanWithin        NullableFloat64    `json:"planWithin,omitempty"`
	PlanWithinPercent NullableInt32      `json:"planWithinPercent,omitempty"`
	ResolutionHours   NullableFloat64    `json:"resolutionHours,omitempty"`
	ResolutionPercent NullableInt32      `json:"resolutionPercent,omitempty"`
	Sla               *SLAReference      `json:"sla,omitempty"`
	Info              *map[string]string `json:"_info,omitempty"`
}

type _SLAPriority SLAPriority

// NewSLAPriority instantiates a new SLAPriority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLAPriority(priority PriorityReference) *SLAPriority {
	this := SLAPriority{}
	this.Priority = priority
	return &this
}

// NewSLAPriorityWithDefaults instantiates a new SLAPriority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLAPriorityWithDefaults() *SLAPriority {
	this := SLAPriority{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SLAPriority) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLAPriority) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SLAPriority) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SLAPriority) SetId(v int32) {
	o.Id = &v
}

// GetPriority returns the Priority field value
func (o *SLAPriority) GetPriority() PriorityReference {
	if o == nil {
		var ret PriorityReference
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *SLAPriority) GetPriorityOk() (*PriorityReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *SLAPriority) SetPriority(v PriorityReference) {
	o.Priority = v
}

// GetRespondHours returns the RespondHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLAPriority) GetRespondHours() float64 {
	if o == nil || IsNil(o.RespondHours.Get()) {
		var ret float64
		return ret
	}
	return *o.RespondHours.Get()
}

// GetRespondHoursOk returns a tuple with the RespondHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLAPriority) GetRespondHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondHours.Get(), o.RespondHours.IsSet()
}

// HasRespondHours returns a boolean if a field has been set.
func (o *SLAPriority) HasRespondHours() bool {
	if o != nil && o.RespondHours.IsSet() {
		return true
	}

	return false
}

// SetRespondHours gets a reference to the given NullableFloat64 and assigns it to the RespondHours field.
func (o *SLAPriority) SetRespondHours(v float64) {
	o.RespondHours.Set(&v)
}

// SetRespondHoursNil sets the value for RespondHours to be an explicit nil
func (o *SLAPriority) SetRespondHoursNil() {
	o.RespondHours.Set(nil)
}

// UnsetRespondHours ensures that no value is present for RespondHours, not even an explicit nil
func (o *SLAPriority) UnsetRespondHours() {
	o.RespondHours.Unset()
}

// GetRespondPercent returns the RespondPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLAPriority) GetRespondPercent() int32 {
	if o == nil || IsNil(o.RespondPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.RespondPercent.Get()
}

// GetRespondPercentOk returns a tuple with the RespondPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLAPriority) GetRespondPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondPercent.Get(), o.RespondPercent.IsSet()
}

// HasRespondPercent returns a boolean if a field has been set.
func (o *SLAPriority) HasRespondPercent() bool {
	if o != nil && o.RespondPercent.IsSet() {
		return true
	}

	return false
}

// SetRespondPercent gets a reference to the given NullableInt32 and assigns it to the RespondPercent field.
func (o *SLAPriority) SetRespondPercent(v int32) {
	o.RespondPercent.Set(&v)
}

// SetRespondPercentNil sets the value for RespondPercent to be an explicit nil
func (o *SLAPriority) SetRespondPercentNil() {
	o.RespondPercent.Set(nil)
}

// UnsetRespondPercent ensures that no value is present for RespondPercent, not even an explicit nil
func (o *SLAPriority) UnsetRespondPercent() {
	o.RespondPercent.Unset()
}

// GetPlanWithin returns the PlanWithin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLAPriority) GetPlanWithin() float64 {
	if o == nil || IsNil(o.PlanWithin.Get()) {
		var ret float64
		return ret
	}
	return *o.PlanWithin.Get()
}

// GetPlanWithinOk returns a tuple with the PlanWithin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLAPriority) GetPlanWithinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanWithin.Get(), o.PlanWithin.IsSet()
}

// HasPlanWithin returns a boolean if a field has been set.
func (o *SLAPriority) HasPlanWithin() bool {
	if o != nil && o.PlanWithin.IsSet() {
		return true
	}

	return false
}

// SetPlanWithin gets a reference to the given NullableFloat64 and assigns it to the PlanWithin field.
func (o *SLAPriority) SetPlanWithin(v float64) {
	o.PlanWithin.Set(&v)
}

// SetPlanWithinNil sets the value for PlanWithin to be an explicit nil
func (o *SLAPriority) SetPlanWithinNil() {
	o.PlanWithin.Set(nil)
}

// UnsetPlanWithin ensures that no value is present for PlanWithin, not even an explicit nil
func (o *SLAPriority) UnsetPlanWithin() {
	o.PlanWithin.Unset()
}

// GetPlanWithinPercent returns the PlanWithinPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLAPriority) GetPlanWithinPercent() int32 {
	if o == nil || IsNil(o.PlanWithinPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.PlanWithinPercent.Get()
}

// GetPlanWithinPercentOk returns a tuple with the PlanWithinPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLAPriority) GetPlanWithinPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanWithinPercent.Get(), o.PlanWithinPercent.IsSet()
}

// HasPlanWithinPercent returns a boolean if a field has been set.
func (o *SLAPriority) HasPlanWithinPercent() bool {
	if o != nil && o.PlanWithinPercent.IsSet() {
		return true
	}

	return false
}

// SetPlanWithinPercent gets a reference to the given NullableInt32 and assigns it to the PlanWithinPercent field.
func (o *SLAPriority) SetPlanWithinPercent(v int32) {
	o.PlanWithinPercent.Set(&v)
}

// SetPlanWithinPercentNil sets the value for PlanWithinPercent to be an explicit nil
func (o *SLAPriority) SetPlanWithinPercentNil() {
	o.PlanWithinPercent.Set(nil)
}

// UnsetPlanWithinPercent ensures that no value is present for PlanWithinPercent, not even an explicit nil
func (o *SLAPriority) UnsetPlanWithinPercent() {
	o.PlanWithinPercent.Unset()
}

// GetResolutionHours returns the ResolutionHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLAPriority) GetResolutionHours() float64 {
	if o == nil || IsNil(o.ResolutionHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ResolutionHours.Get()
}

// GetResolutionHoursOk returns a tuple with the ResolutionHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLAPriority) GetResolutionHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionHours.Get(), o.ResolutionHours.IsSet()
}

// HasResolutionHours returns a boolean if a field has been set.
func (o *SLAPriority) HasResolutionHours() bool {
	if o != nil && o.ResolutionHours.IsSet() {
		return true
	}

	return false
}

// SetResolutionHours gets a reference to the given NullableFloat64 and assigns it to the ResolutionHours field.
func (o *SLAPriority) SetResolutionHours(v float64) {
	o.ResolutionHours.Set(&v)
}

// SetResolutionHoursNil sets the value for ResolutionHours to be an explicit nil
func (o *SLAPriority) SetResolutionHoursNil() {
	o.ResolutionHours.Set(nil)
}

// UnsetResolutionHours ensures that no value is present for ResolutionHours, not even an explicit nil
func (o *SLAPriority) UnsetResolutionHours() {
	o.ResolutionHours.Unset()
}

// GetResolutionPercent returns the ResolutionPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SLAPriority) GetResolutionPercent() int32 {
	if o == nil || IsNil(o.ResolutionPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.ResolutionPercent.Get()
}

// GetResolutionPercentOk returns a tuple with the ResolutionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SLAPriority) GetResolutionPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionPercent.Get(), o.ResolutionPercent.IsSet()
}

// HasResolutionPercent returns a boolean if a field has been set.
func (o *SLAPriority) HasResolutionPercent() bool {
	if o != nil && o.ResolutionPercent.IsSet() {
		return true
	}

	return false
}

// SetResolutionPercent gets a reference to the given NullableInt32 and assigns it to the ResolutionPercent field.
func (o *SLAPriority) SetResolutionPercent(v int32) {
	o.ResolutionPercent.Set(&v)
}

// SetResolutionPercentNil sets the value for ResolutionPercent to be an explicit nil
func (o *SLAPriority) SetResolutionPercentNil() {
	o.ResolutionPercent.Set(nil)
}

// UnsetResolutionPercent ensures that no value is present for ResolutionPercent, not even an explicit nil
func (o *SLAPriority) UnsetResolutionPercent() {
	o.ResolutionPercent.Unset()
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *SLAPriority) GetSla() SLAReference {
	if o == nil || IsNil(o.Sla) {
		var ret SLAReference
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLAPriority) GetSlaOk() (*SLAReference, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *SLAPriority) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLAReference and assigns it to the Sla field.
func (o *SLAPriority) SetSla(v SLAReference) {
	o.Sla = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SLAPriority) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLAPriority) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SLAPriority) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SLAPriority) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SLAPriority) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SLAPriority) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["priority"] = o.Priority
	if o.RespondHours.IsSet() {
		toSerialize["respondHours"] = o.RespondHours.Get()
	}
	if o.RespondPercent.IsSet() {
		toSerialize["respondPercent"] = o.RespondPercent.Get()
	}
	if o.PlanWithin.IsSet() {
		toSerialize["planWithin"] = o.PlanWithin.Get()
	}
	if o.PlanWithinPercent.IsSet() {
		toSerialize["planWithinPercent"] = o.PlanWithinPercent.Get()
	}
	if o.ResolutionHours.IsSet() {
		toSerialize["resolutionHours"] = o.ResolutionHours.Get()
	}
	if o.ResolutionPercent.IsSet() {
		toSerialize["resolutionPercent"] = o.ResolutionPercent.Get()
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SLAPriority) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSLAPriority := _SLAPriority{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSLAPriority)

	if err != nil {
		return err
	}

	*o = SLAPriority(varSLAPriority)

	return err
}

type NullableSLAPriority struct {
	value *SLAPriority
	isSet bool
}

func (v NullableSLAPriority) Get() *SLAPriority {
	return v.value
}

func (v *NullableSLAPriority) Set(val *SLAPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableSLAPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableSLAPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLAPriority(val *SLAPriority) *NullableSLAPriority {
	return &NullableSLAPriority{value: val, isSet: true}
}

func (v NullableSLAPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLAPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
