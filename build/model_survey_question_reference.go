/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the SurveyQuestionReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveyQuestionReference{}

// SurveyQuestionReference struct for SurveyQuestionReference
type SurveyQuestionReference struct {
	Id       NullableInt32      `json:"id,omitempty"`
	Question *string            `json:"question,omitempty"`
	Info     *map[string]string `json:"_info,omitempty"`
}

// NewSurveyQuestionReference instantiates a new SurveyQuestionReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveyQuestionReference() *SurveyQuestionReference {
	this := SurveyQuestionReference{}
	return &this
}

// NewSurveyQuestionReferenceWithDefaults instantiates a new SurveyQuestionReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveyQuestionReferenceWithDefaults() *SurveyQuestionReference {
	this := SurveyQuestionReference{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyQuestionReference) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyQuestionReference) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SurveyQuestionReference) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *SurveyQuestionReference) SetId(v int32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *SurveyQuestionReference) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SurveyQuestionReference) UnsetId() {
	o.Id.Unset()
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *SurveyQuestionReference) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReference) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *SurveyQuestionReference) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *SurveyQuestionReference) SetQuestion(v string) {
	o.Question = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SurveyQuestionReference) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionReference) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SurveyQuestionReference) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SurveyQuestionReference) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SurveyQuestionReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveyQuestionReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableSurveyQuestionReference struct {
	value *SurveyQuestionReference
	isSet bool
}

func (v NullableSurveyQuestionReference) Get() *SurveyQuestionReference {
	return v.value
}

func (v *NullableSurveyQuestionReference) Set(val *SurveyQuestionReference) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveyQuestionReference) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveyQuestionReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveyQuestionReference(val *SurveyQuestionReference) *NullableSurveyQuestionReference {
	return &NullableSurveyQuestionReference{value: val, isSet: true}
}

func (v NullableSurveyQuestionReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveyQuestionReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
