/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TaxCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxCode{}

// TaxCode struct for TaxCode
type TaxCode struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 8;
	Identifier string `json:"identifier"`
	//  Max length: 50;
	Description string `json:"description"`
	//  Max length: 25;
	InvoiceCaption         string            `json:"invoiceCaption"`
	Country                *CountryReference `json:"country,omitempty"`
	EffectiveDate          time.Time         `json:"effectiveDate"`
	DefaultFlag            NullableBool      `json:"defaultFlag,omitempty"`
	DisplayOnInvoiceFlag   NullableBool      `json:"displayOnInvoiceFlag,omitempty"`
	CanadaCalculateGSTFlag NullableBool      `json:"canadaCalculateGSTFlag,omitempty"`
	CancelDate             *time.Time        `json:"cancelDate,omitempty"`
	LevelOneRate           NullableFloat64   `json:"levelOneRate,omitempty"`
	LevelOneRateType       NullableString    `json:"levelOneRateType,omitempty"`
	LevelOneTaxableMax     NullableFloat64   `json:"levelOneTaxableMax,omitempty"`
	//  Max length: 25;
	LevelOneCaption *string `json:"levelOneCaption,omitempty"`
	//  Max length: 50;
	LevelOneTaxCodeXref *string `json:"levelOneTaxCodeXref,omitempty"`
	//  Max length: 100;
	LevelOneAgencyXref          *string         `json:"levelOneAgencyXref,omitempty"`
	LevelOneServicesFlag        NullableBool    `json:"levelOneServicesFlag,omitempty"`
	LevelOneExpensesFlag        NullableBool    `json:"levelOneExpensesFlag,omitempty"`
	LevelOneProductsFlag        NullableBool    `json:"levelOneProductsFlag,omitempty"`
	LevelOneApplySingleUnitFlag NullableBool    `json:"levelOneApplySingleUnitFlag,omitempty"`
	LevelOneApplySingleUnitMin  NullableFloat64 `json:"levelOneApplySingleUnitMin,omitempty"`
	LevelOneApplySingleUnitMax  NullableFloat64 `json:"levelOneApplySingleUnitMax,omitempty"`
	LevelTwoRate                NullableFloat64 `json:"levelTwoRate,omitempty"`
	LevelTwoRateType            NullableString  `json:"levelTwoRateType,omitempty"`
	LevelTwoTaxableMax          NullableFloat64 `json:"levelTwoTaxableMax,omitempty"`
	//  Max length: 25;
	LevelTwoCaption *string `json:"levelTwoCaption,omitempty"`
	//  Max length: 50;
	LevelTwoTaxCodeXref *string `json:"levelTwoTaxCodeXref,omitempty"`
	//  Max length: 100;
	LevelTwoAgencyXref          *string         `json:"levelTwoAgencyXref,omitempty"`
	LevelTwoServicesFlag        NullableBool    `json:"levelTwoServicesFlag,omitempty"`
	LevelTwoExpensesFlag        NullableBool    `json:"levelTwoExpensesFlag,omitempty"`
	LevelTwoProductsFlag        NullableBool    `json:"levelTwoProductsFlag,omitempty"`
	LevelTwoApplySingleUnitFlag NullableBool    `json:"levelTwoApplySingleUnitFlag,omitempty"`
	LevelTwoApplySingleUnitMin  NullableFloat64 `json:"levelTwoApplySingleUnitMin,omitempty"`
	LevelTwoApplySingleUnitMax  NullableFloat64 `json:"levelTwoApplySingleUnitMax,omitempty"`
	LevelThreeRate              NullableFloat64 `json:"levelThreeRate,omitempty"`
	LevelThreeRateType          NullableString  `json:"levelThreeRateType,omitempty"`
	LevelThreeTaxableMax        NullableFloat64 `json:"levelThreeTaxableMax,omitempty"`
	//  Max length: 25;
	LevelThreeCaption *string `json:"levelThreeCaption,omitempty"`
	//  Max length: 50;
	LevelThreeTaxCodeXref *string `json:"levelThreeTaxCodeXref,omitempty"`
	//  Max length: 100;
	LevelThreeAgencyXref          *string         `json:"levelThreeAgencyXref,omitempty"`
	LevelThreeServicesFlag        NullableBool    `json:"levelThreeServicesFlag,omitempty"`
	LevelThreeExpensesFlag        NullableBool    `json:"levelThreeExpensesFlag,omitempty"`
	LevelThreeProductsFlag        NullableBool    `json:"levelThreeProductsFlag,omitempty"`
	LevelThreeApplySingleUnitFlag NullableBool    `json:"levelThreeApplySingleUnitFlag,omitempty"`
	LevelThreeApplySingleUnitMin  NullableFloat64 `json:"levelThreeApplySingleUnitMin,omitempty"`
	LevelThreeApplySingleUnitMax  NullableFloat64 `json:"levelThreeApplySingleUnitMax,omitempty"`
	LevelFourRate                 NullableFloat64 `json:"levelFourRate,omitempty"`
	LevelFourRateType             NullableString  `json:"levelFourRateType,omitempty"`
	LevelFourTaxableMax           NullableFloat64 `json:"levelFourTaxableMax,omitempty"`
	//  Max length: 25;
	LevelFourCaption *string `json:"levelFourCaption,omitempty"`
	//  Max length: 50;
	LevelFourTaxCodeXref *string `json:"levelFourTaxCodeXref,omitempty"`
	//  Max length: 100;
	LevelFourAgencyXref          *string         `json:"levelFourAgencyXref,omitempty"`
	LevelFourServicesFlag        NullableBool    `json:"levelFourServicesFlag,omitempty"`
	LevelFourExpensesFlag        NullableBool    `json:"levelFourExpensesFlag,omitempty"`
	LevelFourProductsFlag        NullableBool    `json:"levelFourProductsFlag,omitempty"`
	LevelFourApplySingleUnitFlag NullableBool    `json:"levelFourApplySingleUnitFlag,omitempty"`
	LevelFourApplySingleUnitMin  NullableFloat64 `json:"levelFourApplySingleUnitMin,omitempty"`
	LevelFourApplySingleUnitMax  NullableFloat64 `json:"levelFourApplySingleUnitMax,omitempty"`
	LevelFiveRate                NullableFloat64 `json:"levelFiveRate,omitempty"`
	LevelFiveRateType            NullableString  `json:"levelFiveRateType,omitempty"`
	LevelFiveTaxableMax          NullableFloat64 `json:"levelFiveTaxableMax,omitempty"`
	//  Max length: 25;
	LevelFiveCaption *string `json:"levelFiveCaption,omitempty"`
	//  Max length: 50;
	LevelFiveTaxCodeXref *string `json:"levelFiveTaxCodeXref,omitempty"`
	//  Max length: 100;
	LevelFiveAgencyXref          *string         `json:"levelFiveAgencyXref,omitempty"`
	LevelFiveServicesFlag        NullableBool    `json:"levelFiveServicesFlag,omitempty"`
	LevelFiveExpensesFlag        NullableBool    `json:"levelFiveExpensesFlag,omitempty"`
	LevelFiveProductsFlag        NullableBool    `json:"levelFiveProductsFlag,omitempty"`
	LevelFiveApplySingleUnitFlag NullableBool    `json:"levelFiveApplySingleUnitFlag,omitempty"`
	LevelFiveApplySingleUnitMin  NullableFloat64 `json:"levelFiveApplySingleUnitMin,omitempty"`
	LevelFiveApplySingleUnitMax  NullableFloat64 `json:"levelFiveApplySingleUnitMax,omitempty"`
	LevelSixRate                 NullableFloat64 `json:"levelSixRate,omitempty"`
	LevelSixRateType             NullableString  `json:"levelSixRateType,omitempty"`
	LevelSixTaxableMax           NullableFloat64 `json:"levelSixTaxableMax,omitempty"`
	//  Max length: 25;
	LevelSixCaption *string `json:"levelSixCaption,omitempty"`
	//  Max length: 50;
	LevelSixTaxCodeXref *string `json:"levelSixTaxCodeXref,omitempty"`
	//  Max length: 100;
	LevelSixAgencyXref          *string         `json:"levelSixAgencyXref,omitempty"`
	LevelSixServicesFlag        NullableBool    `json:"levelSixServicesFlag,omitempty"`
	LevelSixExpensesFlag        NullableBool    `json:"levelSixExpensesFlag,omitempty"`
	LevelSixProductsFlag        NullableBool    `json:"levelSixProductsFlag,omitempty"`
	LevelSixApplySingleUnitFlag NullableBool    `json:"levelSixApplySingleUnitFlag,omitempty"`
	LevelSixApplySingleUnitMin  NullableFloat64 `json:"levelSixApplySingleUnitMin,omitempty"`
	LevelSixApplySingleUnitMax  NullableFloat64 `json:"levelSixApplySingleUnitMax,omitempty"`
	// Array of work role exemptions for the tax code.
	WorkRoleIds        []int32      `json:"workRoleIds,omitempty"`
	AddAllWorkRoles    NullableBool `json:"addAllWorkRoles,omitempty"`
	RemoveAllWorkRoles NullableBool `json:"removeAllWorkRoles,omitempty"`
	// Array of expense type exemptions for the tax code.
	ExpenseTypeIds        []int32      `json:"expenseTypeIds,omitempty"`
	AddAllExpenseTypes    NullableBool `json:"addAllExpenseTypes,omitempty"`
	RemoveAllExpenseTypes NullableBool `json:"removeAllExpenseTypes,omitempty"`
	// Array of product type exemptions for the tax code.
	ProductTypeIds        []int32            `json:"productTypeIds,omitempty"`
	AddAllProductTypes    NullableBool       `json:"addAllProductTypes,omitempty"`
	RemoveAllProductTypes NullableBool       `json:"removeAllProductTypes,omitempty"`
	Info                  *map[string]string `json:"_info,omitempty"`
}

type _TaxCode TaxCode

// NewTaxCode instantiates a new TaxCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxCode(identifier string, description string, invoiceCaption string, effectiveDate time.Time) *TaxCode {
	this := TaxCode{}
	this.Identifier = identifier
	this.Description = description
	this.InvoiceCaption = invoiceCaption
	this.EffectiveDate = effectiveDate
	return &this
}

// NewTaxCodeWithDefaults instantiates a new TaxCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxCodeWithDefaults() *TaxCode {
	this := TaxCode{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxCode) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxCode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxCode) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value
func (o *TaxCode) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *TaxCode) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *TaxCode) SetIdentifier(v string) {
	o.Identifier = v
}

// GetDescription returns the Description field value
func (o *TaxCode) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TaxCode) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TaxCode) SetDescription(v string) {
	o.Description = v
}

// GetInvoiceCaption returns the InvoiceCaption field value
func (o *TaxCode) GetInvoiceCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceCaption
}

// GetInvoiceCaptionOk returns a tuple with the InvoiceCaption field value
// and a boolean to check if the value has been set.
func (o *TaxCode) GetInvoiceCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceCaption, true
}

// SetInvoiceCaption sets field value
func (o *TaxCode) SetInvoiceCaption(v string) {
	o.InvoiceCaption = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *TaxCode) GetCountry() CountryReference {
	if o == nil || IsNil(o.Country) {
		var ret CountryReference
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *TaxCode) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given CountryReference and assigns it to the Country field.
func (o *TaxCode) SetCountry(v CountryReference) {
	o.Country = &v
}

// GetEffectiveDate returns the EffectiveDate field value
func (o *TaxCode) GetEffectiveDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value
// and a boolean to check if the value has been set.
func (o *TaxCode) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveDate, true
}

// SetEffectiveDate sets field value
func (o *TaxCode) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *TaxCode) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *TaxCode) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *TaxCode) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *TaxCode) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetDisplayOnInvoiceFlag returns the DisplayOnInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetDisplayOnInvoiceFlag() bool {
	if o == nil || IsNil(o.DisplayOnInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplayOnInvoiceFlag.Get()
}

// GetDisplayOnInvoiceFlagOk returns a tuple with the DisplayOnInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetDisplayOnInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayOnInvoiceFlag.Get(), o.DisplayOnInvoiceFlag.IsSet()
}

// HasDisplayOnInvoiceFlag returns a boolean if a field has been set.
func (o *TaxCode) HasDisplayOnInvoiceFlag() bool {
	if o != nil && o.DisplayOnInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetDisplayOnInvoiceFlag gets a reference to the given NullableBool and assigns it to the DisplayOnInvoiceFlag field.
func (o *TaxCode) SetDisplayOnInvoiceFlag(v bool) {
	o.DisplayOnInvoiceFlag.Set(&v)
}

// SetDisplayOnInvoiceFlagNil sets the value for DisplayOnInvoiceFlag to be an explicit nil
func (o *TaxCode) SetDisplayOnInvoiceFlagNil() {
	o.DisplayOnInvoiceFlag.Set(nil)
}

// UnsetDisplayOnInvoiceFlag ensures that no value is present for DisplayOnInvoiceFlag, not even an explicit nil
func (o *TaxCode) UnsetDisplayOnInvoiceFlag() {
	o.DisplayOnInvoiceFlag.Unset()
}

// GetCanadaCalculateGSTFlag returns the CanadaCalculateGSTFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetCanadaCalculateGSTFlag() bool {
	if o == nil || IsNil(o.CanadaCalculateGSTFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CanadaCalculateGSTFlag.Get()
}

// GetCanadaCalculateGSTFlagOk returns a tuple with the CanadaCalculateGSTFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetCanadaCalculateGSTFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanadaCalculateGSTFlag.Get(), o.CanadaCalculateGSTFlag.IsSet()
}

// HasCanadaCalculateGSTFlag returns a boolean if a field has been set.
func (o *TaxCode) HasCanadaCalculateGSTFlag() bool {
	if o != nil && o.CanadaCalculateGSTFlag.IsSet() {
		return true
	}

	return false
}

// SetCanadaCalculateGSTFlag gets a reference to the given NullableBool and assigns it to the CanadaCalculateGSTFlag field.
func (o *TaxCode) SetCanadaCalculateGSTFlag(v bool) {
	o.CanadaCalculateGSTFlag.Set(&v)
}

// SetCanadaCalculateGSTFlagNil sets the value for CanadaCalculateGSTFlag to be an explicit nil
func (o *TaxCode) SetCanadaCalculateGSTFlagNil() {
	o.CanadaCalculateGSTFlag.Set(nil)
}

// UnsetCanadaCalculateGSTFlag ensures that no value is present for CanadaCalculateGSTFlag, not even an explicit nil
func (o *TaxCode) UnsetCanadaCalculateGSTFlag() {
	o.CanadaCalculateGSTFlag.Unset()
}

// GetCancelDate returns the CancelDate field value if set, zero value otherwise.
func (o *TaxCode) GetCancelDate() time.Time {
	if o == nil || IsNil(o.CancelDate) {
		var ret time.Time
		return ret
	}
	return *o.CancelDate
}

// GetCancelDateOk returns a tuple with the CancelDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetCancelDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelDate) {
		return nil, false
	}
	return o.CancelDate, true
}

// HasCancelDate returns a boolean if a field has been set.
func (o *TaxCode) HasCancelDate() bool {
	if o != nil && !IsNil(o.CancelDate) {
		return true
	}

	return false
}

// SetCancelDate gets a reference to the given time.Time and assigns it to the CancelDate field.
func (o *TaxCode) SetCancelDate(v time.Time) {
	o.CancelDate = &v
}

// GetLevelOneRate returns the LevelOneRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneRate() float64 {
	if o == nil || IsNil(o.LevelOneRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelOneRate.Get()
}

// GetLevelOneRateOk returns a tuple with the LevelOneRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneRate.Get(), o.LevelOneRate.IsSet()
}

// HasLevelOneRate returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneRate() bool {
	if o != nil && o.LevelOneRate.IsSet() {
		return true
	}

	return false
}

// SetLevelOneRate gets a reference to the given NullableFloat64 and assigns it to the LevelOneRate field.
func (o *TaxCode) SetLevelOneRate(v float64) {
	o.LevelOneRate.Set(&v)
}

// SetLevelOneRateNil sets the value for LevelOneRate to be an explicit nil
func (o *TaxCode) SetLevelOneRateNil() {
	o.LevelOneRate.Set(nil)
}

// UnsetLevelOneRate ensures that no value is present for LevelOneRate, not even an explicit nil
func (o *TaxCode) UnsetLevelOneRate() {
	o.LevelOneRate.Unset()
}

// GetLevelOneRateType returns the LevelOneRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneRateType() string {
	if o == nil || IsNil(o.LevelOneRateType.Get()) {
		var ret string
		return ret
	}
	return *o.LevelOneRateType.Get()
}

// GetLevelOneRateTypeOk returns a tuple with the LevelOneRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneRateType.Get(), o.LevelOneRateType.IsSet()
}

// HasLevelOneRateType returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneRateType() bool {
	if o != nil && o.LevelOneRateType.IsSet() {
		return true
	}

	return false
}

// SetLevelOneRateType gets a reference to the given NullableString and assigns it to the LevelOneRateType field.
func (o *TaxCode) SetLevelOneRateType(v string) {
	o.LevelOneRateType.Set(&v)
}

// SetLevelOneRateTypeNil sets the value for LevelOneRateType to be an explicit nil
func (o *TaxCode) SetLevelOneRateTypeNil() {
	o.LevelOneRateType.Set(nil)
}

// UnsetLevelOneRateType ensures that no value is present for LevelOneRateType, not even an explicit nil
func (o *TaxCode) UnsetLevelOneRateType() {
	o.LevelOneRateType.Unset()
}

// GetLevelOneTaxableMax returns the LevelOneTaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneTaxableMax() float64 {
	if o == nil || IsNil(o.LevelOneTaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelOneTaxableMax.Get()
}

// GetLevelOneTaxableMaxOk returns a tuple with the LevelOneTaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneTaxableMax.Get(), o.LevelOneTaxableMax.IsSet()
}

// HasLevelOneTaxableMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneTaxableMax() bool {
	if o != nil && o.LevelOneTaxableMax.IsSet() {
		return true
	}

	return false
}

// SetLevelOneTaxableMax gets a reference to the given NullableFloat64 and assigns it to the LevelOneTaxableMax field.
func (o *TaxCode) SetLevelOneTaxableMax(v float64) {
	o.LevelOneTaxableMax.Set(&v)
}

// SetLevelOneTaxableMaxNil sets the value for LevelOneTaxableMax to be an explicit nil
func (o *TaxCode) SetLevelOneTaxableMaxNil() {
	o.LevelOneTaxableMax.Set(nil)
}

// UnsetLevelOneTaxableMax ensures that no value is present for LevelOneTaxableMax, not even an explicit nil
func (o *TaxCode) UnsetLevelOneTaxableMax() {
	o.LevelOneTaxableMax.Unset()
}

// GetLevelOneCaption returns the LevelOneCaption field value if set, zero value otherwise.
func (o *TaxCode) GetLevelOneCaption() string {
	if o == nil || IsNil(o.LevelOneCaption) {
		var ret string
		return ret
	}
	return *o.LevelOneCaption
}

// GetLevelOneCaptionOk returns a tuple with the LevelOneCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelOneCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.LevelOneCaption) {
		return nil, false
	}
	return o.LevelOneCaption, true
}

// HasLevelOneCaption returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneCaption() bool {
	if o != nil && !IsNil(o.LevelOneCaption) {
		return true
	}

	return false
}

// SetLevelOneCaption gets a reference to the given string and assigns it to the LevelOneCaption field.
func (o *TaxCode) SetLevelOneCaption(v string) {
	o.LevelOneCaption = &v
}

// GetLevelOneTaxCodeXref returns the LevelOneTaxCodeXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelOneTaxCodeXref() string {
	if o == nil || IsNil(o.LevelOneTaxCodeXref) {
		var ret string
		return ret
	}
	return *o.LevelOneTaxCodeXref
}

// GetLevelOneTaxCodeXrefOk returns a tuple with the LevelOneTaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelOneTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelOneTaxCodeXref) {
		return nil, false
	}
	return o.LevelOneTaxCodeXref, true
}

// HasLevelOneTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneTaxCodeXref() bool {
	if o != nil && !IsNil(o.LevelOneTaxCodeXref) {
		return true
	}

	return false
}

// SetLevelOneTaxCodeXref gets a reference to the given string and assigns it to the LevelOneTaxCodeXref field.
func (o *TaxCode) SetLevelOneTaxCodeXref(v string) {
	o.LevelOneTaxCodeXref = &v
}

// GetLevelOneAgencyXref returns the LevelOneAgencyXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelOneAgencyXref() string {
	if o == nil || IsNil(o.LevelOneAgencyXref) {
		var ret string
		return ret
	}
	return *o.LevelOneAgencyXref
}

// GetLevelOneAgencyXrefOk returns a tuple with the LevelOneAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelOneAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelOneAgencyXref) {
		return nil, false
	}
	return o.LevelOneAgencyXref, true
}

// HasLevelOneAgencyXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneAgencyXref() bool {
	if o != nil && !IsNil(o.LevelOneAgencyXref) {
		return true
	}

	return false
}

// SetLevelOneAgencyXref gets a reference to the given string and assigns it to the LevelOneAgencyXref field.
func (o *TaxCode) SetLevelOneAgencyXref(v string) {
	o.LevelOneAgencyXref = &v
}

// GetLevelOneServicesFlag returns the LevelOneServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneServicesFlag() bool {
	if o == nil || IsNil(o.LevelOneServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelOneServicesFlag.Get()
}

// GetLevelOneServicesFlagOk returns a tuple with the LevelOneServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneServicesFlag.Get(), o.LevelOneServicesFlag.IsSet()
}

// HasLevelOneServicesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneServicesFlag() bool {
	if o != nil && o.LevelOneServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelOneServicesFlag gets a reference to the given NullableBool and assigns it to the LevelOneServicesFlag field.
func (o *TaxCode) SetLevelOneServicesFlag(v bool) {
	o.LevelOneServicesFlag.Set(&v)
}

// SetLevelOneServicesFlagNil sets the value for LevelOneServicesFlag to be an explicit nil
func (o *TaxCode) SetLevelOneServicesFlagNil() {
	o.LevelOneServicesFlag.Set(nil)
}

// UnsetLevelOneServicesFlag ensures that no value is present for LevelOneServicesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelOneServicesFlag() {
	o.LevelOneServicesFlag.Unset()
}

// GetLevelOneExpensesFlag returns the LevelOneExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneExpensesFlag() bool {
	if o == nil || IsNil(o.LevelOneExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelOneExpensesFlag.Get()
}

// GetLevelOneExpensesFlagOk returns a tuple with the LevelOneExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneExpensesFlag.Get(), o.LevelOneExpensesFlag.IsSet()
}

// HasLevelOneExpensesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneExpensesFlag() bool {
	if o != nil && o.LevelOneExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelOneExpensesFlag gets a reference to the given NullableBool and assigns it to the LevelOneExpensesFlag field.
func (o *TaxCode) SetLevelOneExpensesFlag(v bool) {
	o.LevelOneExpensesFlag.Set(&v)
}

// SetLevelOneExpensesFlagNil sets the value for LevelOneExpensesFlag to be an explicit nil
func (o *TaxCode) SetLevelOneExpensesFlagNil() {
	o.LevelOneExpensesFlag.Set(nil)
}

// UnsetLevelOneExpensesFlag ensures that no value is present for LevelOneExpensesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelOneExpensesFlag() {
	o.LevelOneExpensesFlag.Unset()
}

// GetLevelOneProductsFlag returns the LevelOneProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneProductsFlag() bool {
	if o == nil || IsNil(o.LevelOneProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelOneProductsFlag.Get()
}

// GetLevelOneProductsFlagOk returns a tuple with the LevelOneProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneProductsFlag.Get(), o.LevelOneProductsFlag.IsSet()
}

// HasLevelOneProductsFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneProductsFlag() bool {
	if o != nil && o.LevelOneProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelOneProductsFlag gets a reference to the given NullableBool and assigns it to the LevelOneProductsFlag field.
func (o *TaxCode) SetLevelOneProductsFlag(v bool) {
	o.LevelOneProductsFlag.Set(&v)
}

// SetLevelOneProductsFlagNil sets the value for LevelOneProductsFlag to be an explicit nil
func (o *TaxCode) SetLevelOneProductsFlagNil() {
	o.LevelOneProductsFlag.Set(nil)
}

// UnsetLevelOneProductsFlag ensures that no value is present for LevelOneProductsFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelOneProductsFlag() {
	o.LevelOneProductsFlag.Unset()
}

// GetLevelOneApplySingleUnitFlag returns the LevelOneApplySingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneApplySingleUnitFlag() bool {
	if o == nil || IsNil(o.LevelOneApplySingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelOneApplySingleUnitFlag.Get()
}

// GetLevelOneApplySingleUnitFlagOk returns a tuple with the LevelOneApplySingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneApplySingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneApplySingleUnitFlag.Get(), o.LevelOneApplySingleUnitFlag.IsSet()
}

// HasLevelOneApplySingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneApplySingleUnitFlag() bool {
	if o != nil && o.LevelOneApplySingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelOneApplySingleUnitFlag gets a reference to the given NullableBool and assigns it to the LevelOneApplySingleUnitFlag field.
func (o *TaxCode) SetLevelOneApplySingleUnitFlag(v bool) {
	o.LevelOneApplySingleUnitFlag.Set(&v)
}

// SetLevelOneApplySingleUnitFlagNil sets the value for LevelOneApplySingleUnitFlag to be an explicit nil
func (o *TaxCode) SetLevelOneApplySingleUnitFlagNil() {
	o.LevelOneApplySingleUnitFlag.Set(nil)
}

// UnsetLevelOneApplySingleUnitFlag ensures that no value is present for LevelOneApplySingleUnitFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelOneApplySingleUnitFlag() {
	o.LevelOneApplySingleUnitFlag.Unset()
}

// GetLevelOneApplySingleUnitMin returns the LevelOneApplySingleUnitMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneApplySingleUnitMin() float64 {
	if o == nil || IsNil(o.LevelOneApplySingleUnitMin.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelOneApplySingleUnitMin.Get()
}

// GetLevelOneApplySingleUnitMinOk returns a tuple with the LevelOneApplySingleUnitMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneApplySingleUnitMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneApplySingleUnitMin.Get(), o.LevelOneApplySingleUnitMin.IsSet()
}

// HasLevelOneApplySingleUnitMin returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneApplySingleUnitMin() bool {
	if o != nil && o.LevelOneApplySingleUnitMin.IsSet() {
		return true
	}

	return false
}

// SetLevelOneApplySingleUnitMin gets a reference to the given NullableFloat64 and assigns it to the LevelOneApplySingleUnitMin field.
func (o *TaxCode) SetLevelOneApplySingleUnitMin(v float64) {
	o.LevelOneApplySingleUnitMin.Set(&v)
}

// SetLevelOneApplySingleUnitMinNil sets the value for LevelOneApplySingleUnitMin to be an explicit nil
func (o *TaxCode) SetLevelOneApplySingleUnitMinNil() {
	o.LevelOneApplySingleUnitMin.Set(nil)
}

// UnsetLevelOneApplySingleUnitMin ensures that no value is present for LevelOneApplySingleUnitMin, not even an explicit nil
func (o *TaxCode) UnsetLevelOneApplySingleUnitMin() {
	o.LevelOneApplySingleUnitMin.Unset()
}

// GetLevelOneApplySingleUnitMax returns the LevelOneApplySingleUnitMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelOneApplySingleUnitMax() float64 {
	if o == nil || IsNil(o.LevelOneApplySingleUnitMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelOneApplySingleUnitMax.Get()
}

// GetLevelOneApplySingleUnitMaxOk returns a tuple with the LevelOneApplySingleUnitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelOneApplySingleUnitMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneApplySingleUnitMax.Get(), o.LevelOneApplySingleUnitMax.IsSet()
}

// HasLevelOneApplySingleUnitMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelOneApplySingleUnitMax() bool {
	if o != nil && o.LevelOneApplySingleUnitMax.IsSet() {
		return true
	}

	return false
}

// SetLevelOneApplySingleUnitMax gets a reference to the given NullableFloat64 and assigns it to the LevelOneApplySingleUnitMax field.
func (o *TaxCode) SetLevelOneApplySingleUnitMax(v float64) {
	o.LevelOneApplySingleUnitMax.Set(&v)
}

// SetLevelOneApplySingleUnitMaxNil sets the value for LevelOneApplySingleUnitMax to be an explicit nil
func (o *TaxCode) SetLevelOneApplySingleUnitMaxNil() {
	o.LevelOneApplySingleUnitMax.Set(nil)
}

// UnsetLevelOneApplySingleUnitMax ensures that no value is present for LevelOneApplySingleUnitMax, not even an explicit nil
func (o *TaxCode) UnsetLevelOneApplySingleUnitMax() {
	o.LevelOneApplySingleUnitMax.Unset()
}

// GetLevelTwoRate returns the LevelTwoRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoRate() float64 {
	if o == nil || IsNil(o.LevelTwoRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelTwoRate.Get()
}

// GetLevelTwoRateOk returns a tuple with the LevelTwoRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoRate.Get(), o.LevelTwoRate.IsSet()
}

// HasLevelTwoRate returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoRate() bool {
	if o != nil && o.LevelTwoRate.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoRate gets a reference to the given NullableFloat64 and assigns it to the LevelTwoRate field.
func (o *TaxCode) SetLevelTwoRate(v float64) {
	o.LevelTwoRate.Set(&v)
}

// SetLevelTwoRateNil sets the value for LevelTwoRate to be an explicit nil
func (o *TaxCode) SetLevelTwoRateNil() {
	o.LevelTwoRate.Set(nil)
}

// UnsetLevelTwoRate ensures that no value is present for LevelTwoRate, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoRate() {
	o.LevelTwoRate.Unset()
}

// GetLevelTwoRateType returns the LevelTwoRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoRateType() string {
	if o == nil || IsNil(o.LevelTwoRateType.Get()) {
		var ret string
		return ret
	}
	return *o.LevelTwoRateType.Get()
}

// GetLevelTwoRateTypeOk returns a tuple with the LevelTwoRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoRateType.Get(), o.LevelTwoRateType.IsSet()
}

// HasLevelTwoRateType returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoRateType() bool {
	if o != nil && o.LevelTwoRateType.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoRateType gets a reference to the given NullableString and assigns it to the LevelTwoRateType field.
func (o *TaxCode) SetLevelTwoRateType(v string) {
	o.LevelTwoRateType.Set(&v)
}

// SetLevelTwoRateTypeNil sets the value for LevelTwoRateType to be an explicit nil
func (o *TaxCode) SetLevelTwoRateTypeNil() {
	o.LevelTwoRateType.Set(nil)
}

// UnsetLevelTwoRateType ensures that no value is present for LevelTwoRateType, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoRateType() {
	o.LevelTwoRateType.Unset()
}

// GetLevelTwoTaxableMax returns the LevelTwoTaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoTaxableMax() float64 {
	if o == nil || IsNil(o.LevelTwoTaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelTwoTaxableMax.Get()
}

// GetLevelTwoTaxableMaxOk returns a tuple with the LevelTwoTaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoTaxableMax.Get(), o.LevelTwoTaxableMax.IsSet()
}

// HasLevelTwoTaxableMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoTaxableMax() bool {
	if o != nil && o.LevelTwoTaxableMax.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoTaxableMax gets a reference to the given NullableFloat64 and assigns it to the LevelTwoTaxableMax field.
func (o *TaxCode) SetLevelTwoTaxableMax(v float64) {
	o.LevelTwoTaxableMax.Set(&v)
}

// SetLevelTwoTaxableMaxNil sets the value for LevelTwoTaxableMax to be an explicit nil
func (o *TaxCode) SetLevelTwoTaxableMaxNil() {
	o.LevelTwoTaxableMax.Set(nil)
}

// UnsetLevelTwoTaxableMax ensures that no value is present for LevelTwoTaxableMax, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoTaxableMax() {
	o.LevelTwoTaxableMax.Unset()
}

// GetLevelTwoCaption returns the LevelTwoCaption field value if set, zero value otherwise.
func (o *TaxCode) GetLevelTwoCaption() string {
	if o == nil || IsNil(o.LevelTwoCaption) {
		var ret string
		return ret
	}
	return *o.LevelTwoCaption
}

// GetLevelTwoCaptionOk returns a tuple with the LevelTwoCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelTwoCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.LevelTwoCaption) {
		return nil, false
	}
	return o.LevelTwoCaption, true
}

// HasLevelTwoCaption returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoCaption() bool {
	if o != nil && !IsNil(o.LevelTwoCaption) {
		return true
	}

	return false
}

// SetLevelTwoCaption gets a reference to the given string and assigns it to the LevelTwoCaption field.
func (o *TaxCode) SetLevelTwoCaption(v string) {
	o.LevelTwoCaption = &v
}

// GetLevelTwoTaxCodeXref returns the LevelTwoTaxCodeXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelTwoTaxCodeXref() string {
	if o == nil || IsNil(o.LevelTwoTaxCodeXref) {
		var ret string
		return ret
	}
	return *o.LevelTwoTaxCodeXref
}

// GetLevelTwoTaxCodeXrefOk returns a tuple with the LevelTwoTaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelTwoTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelTwoTaxCodeXref) {
		return nil, false
	}
	return o.LevelTwoTaxCodeXref, true
}

// HasLevelTwoTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoTaxCodeXref() bool {
	if o != nil && !IsNil(o.LevelTwoTaxCodeXref) {
		return true
	}

	return false
}

// SetLevelTwoTaxCodeXref gets a reference to the given string and assigns it to the LevelTwoTaxCodeXref field.
func (o *TaxCode) SetLevelTwoTaxCodeXref(v string) {
	o.LevelTwoTaxCodeXref = &v
}

// GetLevelTwoAgencyXref returns the LevelTwoAgencyXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelTwoAgencyXref() string {
	if o == nil || IsNil(o.LevelTwoAgencyXref) {
		var ret string
		return ret
	}
	return *o.LevelTwoAgencyXref
}

// GetLevelTwoAgencyXrefOk returns a tuple with the LevelTwoAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelTwoAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelTwoAgencyXref) {
		return nil, false
	}
	return o.LevelTwoAgencyXref, true
}

// HasLevelTwoAgencyXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoAgencyXref() bool {
	if o != nil && !IsNil(o.LevelTwoAgencyXref) {
		return true
	}

	return false
}

// SetLevelTwoAgencyXref gets a reference to the given string and assigns it to the LevelTwoAgencyXref field.
func (o *TaxCode) SetLevelTwoAgencyXref(v string) {
	o.LevelTwoAgencyXref = &v
}

// GetLevelTwoServicesFlag returns the LevelTwoServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoServicesFlag() bool {
	if o == nil || IsNil(o.LevelTwoServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelTwoServicesFlag.Get()
}

// GetLevelTwoServicesFlagOk returns a tuple with the LevelTwoServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoServicesFlag.Get(), o.LevelTwoServicesFlag.IsSet()
}

// HasLevelTwoServicesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoServicesFlag() bool {
	if o != nil && o.LevelTwoServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoServicesFlag gets a reference to the given NullableBool and assigns it to the LevelTwoServicesFlag field.
func (o *TaxCode) SetLevelTwoServicesFlag(v bool) {
	o.LevelTwoServicesFlag.Set(&v)
}

// SetLevelTwoServicesFlagNil sets the value for LevelTwoServicesFlag to be an explicit nil
func (o *TaxCode) SetLevelTwoServicesFlagNil() {
	o.LevelTwoServicesFlag.Set(nil)
}

// UnsetLevelTwoServicesFlag ensures that no value is present for LevelTwoServicesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoServicesFlag() {
	o.LevelTwoServicesFlag.Unset()
}

// GetLevelTwoExpensesFlag returns the LevelTwoExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoExpensesFlag() bool {
	if o == nil || IsNil(o.LevelTwoExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelTwoExpensesFlag.Get()
}

// GetLevelTwoExpensesFlagOk returns a tuple with the LevelTwoExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoExpensesFlag.Get(), o.LevelTwoExpensesFlag.IsSet()
}

// HasLevelTwoExpensesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoExpensesFlag() bool {
	if o != nil && o.LevelTwoExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoExpensesFlag gets a reference to the given NullableBool and assigns it to the LevelTwoExpensesFlag field.
func (o *TaxCode) SetLevelTwoExpensesFlag(v bool) {
	o.LevelTwoExpensesFlag.Set(&v)
}

// SetLevelTwoExpensesFlagNil sets the value for LevelTwoExpensesFlag to be an explicit nil
func (o *TaxCode) SetLevelTwoExpensesFlagNil() {
	o.LevelTwoExpensesFlag.Set(nil)
}

// UnsetLevelTwoExpensesFlag ensures that no value is present for LevelTwoExpensesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoExpensesFlag() {
	o.LevelTwoExpensesFlag.Unset()
}

// GetLevelTwoProductsFlag returns the LevelTwoProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoProductsFlag() bool {
	if o == nil || IsNil(o.LevelTwoProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelTwoProductsFlag.Get()
}

// GetLevelTwoProductsFlagOk returns a tuple with the LevelTwoProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoProductsFlag.Get(), o.LevelTwoProductsFlag.IsSet()
}

// HasLevelTwoProductsFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoProductsFlag() bool {
	if o != nil && o.LevelTwoProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoProductsFlag gets a reference to the given NullableBool and assigns it to the LevelTwoProductsFlag field.
func (o *TaxCode) SetLevelTwoProductsFlag(v bool) {
	o.LevelTwoProductsFlag.Set(&v)
}

// SetLevelTwoProductsFlagNil sets the value for LevelTwoProductsFlag to be an explicit nil
func (o *TaxCode) SetLevelTwoProductsFlagNil() {
	o.LevelTwoProductsFlag.Set(nil)
}

// UnsetLevelTwoProductsFlag ensures that no value is present for LevelTwoProductsFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoProductsFlag() {
	o.LevelTwoProductsFlag.Unset()
}

// GetLevelTwoApplySingleUnitFlag returns the LevelTwoApplySingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoApplySingleUnitFlag() bool {
	if o == nil || IsNil(o.LevelTwoApplySingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelTwoApplySingleUnitFlag.Get()
}

// GetLevelTwoApplySingleUnitFlagOk returns a tuple with the LevelTwoApplySingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoApplySingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoApplySingleUnitFlag.Get(), o.LevelTwoApplySingleUnitFlag.IsSet()
}

// HasLevelTwoApplySingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoApplySingleUnitFlag() bool {
	if o != nil && o.LevelTwoApplySingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoApplySingleUnitFlag gets a reference to the given NullableBool and assigns it to the LevelTwoApplySingleUnitFlag field.
func (o *TaxCode) SetLevelTwoApplySingleUnitFlag(v bool) {
	o.LevelTwoApplySingleUnitFlag.Set(&v)
}

// SetLevelTwoApplySingleUnitFlagNil sets the value for LevelTwoApplySingleUnitFlag to be an explicit nil
func (o *TaxCode) SetLevelTwoApplySingleUnitFlagNil() {
	o.LevelTwoApplySingleUnitFlag.Set(nil)
}

// UnsetLevelTwoApplySingleUnitFlag ensures that no value is present for LevelTwoApplySingleUnitFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoApplySingleUnitFlag() {
	o.LevelTwoApplySingleUnitFlag.Unset()
}

// GetLevelTwoApplySingleUnitMin returns the LevelTwoApplySingleUnitMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoApplySingleUnitMin() float64 {
	if o == nil || IsNil(o.LevelTwoApplySingleUnitMin.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelTwoApplySingleUnitMin.Get()
}

// GetLevelTwoApplySingleUnitMinOk returns a tuple with the LevelTwoApplySingleUnitMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoApplySingleUnitMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoApplySingleUnitMin.Get(), o.LevelTwoApplySingleUnitMin.IsSet()
}

// HasLevelTwoApplySingleUnitMin returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoApplySingleUnitMin() bool {
	if o != nil && o.LevelTwoApplySingleUnitMin.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoApplySingleUnitMin gets a reference to the given NullableFloat64 and assigns it to the LevelTwoApplySingleUnitMin field.
func (o *TaxCode) SetLevelTwoApplySingleUnitMin(v float64) {
	o.LevelTwoApplySingleUnitMin.Set(&v)
}

// SetLevelTwoApplySingleUnitMinNil sets the value for LevelTwoApplySingleUnitMin to be an explicit nil
func (o *TaxCode) SetLevelTwoApplySingleUnitMinNil() {
	o.LevelTwoApplySingleUnitMin.Set(nil)
}

// UnsetLevelTwoApplySingleUnitMin ensures that no value is present for LevelTwoApplySingleUnitMin, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoApplySingleUnitMin() {
	o.LevelTwoApplySingleUnitMin.Unset()
}

// GetLevelTwoApplySingleUnitMax returns the LevelTwoApplySingleUnitMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelTwoApplySingleUnitMax() float64 {
	if o == nil || IsNil(o.LevelTwoApplySingleUnitMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelTwoApplySingleUnitMax.Get()
}

// GetLevelTwoApplySingleUnitMaxOk returns a tuple with the LevelTwoApplySingleUnitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelTwoApplySingleUnitMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoApplySingleUnitMax.Get(), o.LevelTwoApplySingleUnitMax.IsSet()
}

// HasLevelTwoApplySingleUnitMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelTwoApplySingleUnitMax() bool {
	if o != nil && o.LevelTwoApplySingleUnitMax.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoApplySingleUnitMax gets a reference to the given NullableFloat64 and assigns it to the LevelTwoApplySingleUnitMax field.
func (o *TaxCode) SetLevelTwoApplySingleUnitMax(v float64) {
	o.LevelTwoApplySingleUnitMax.Set(&v)
}

// SetLevelTwoApplySingleUnitMaxNil sets the value for LevelTwoApplySingleUnitMax to be an explicit nil
func (o *TaxCode) SetLevelTwoApplySingleUnitMaxNil() {
	o.LevelTwoApplySingleUnitMax.Set(nil)
}

// UnsetLevelTwoApplySingleUnitMax ensures that no value is present for LevelTwoApplySingleUnitMax, not even an explicit nil
func (o *TaxCode) UnsetLevelTwoApplySingleUnitMax() {
	o.LevelTwoApplySingleUnitMax.Unset()
}

// GetLevelThreeRate returns the LevelThreeRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeRate() float64 {
	if o == nil || IsNil(o.LevelThreeRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelThreeRate.Get()
}

// GetLevelThreeRateOk returns a tuple with the LevelThreeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeRate.Get(), o.LevelThreeRate.IsSet()
}

// HasLevelThreeRate returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeRate() bool {
	if o != nil && o.LevelThreeRate.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeRate gets a reference to the given NullableFloat64 and assigns it to the LevelThreeRate field.
func (o *TaxCode) SetLevelThreeRate(v float64) {
	o.LevelThreeRate.Set(&v)
}

// SetLevelThreeRateNil sets the value for LevelThreeRate to be an explicit nil
func (o *TaxCode) SetLevelThreeRateNil() {
	o.LevelThreeRate.Set(nil)
}

// UnsetLevelThreeRate ensures that no value is present for LevelThreeRate, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeRate() {
	o.LevelThreeRate.Unset()
}

// GetLevelThreeRateType returns the LevelThreeRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeRateType() string {
	if o == nil || IsNil(o.LevelThreeRateType.Get()) {
		var ret string
		return ret
	}
	return *o.LevelThreeRateType.Get()
}

// GetLevelThreeRateTypeOk returns a tuple with the LevelThreeRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeRateType.Get(), o.LevelThreeRateType.IsSet()
}

// HasLevelThreeRateType returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeRateType() bool {
	if o != nil && o.LevelThreeRateType.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeRateType gets a reference to the given NullableString and assigns it to the LevelThreeRateType field.
func (o *TaxCode) SetLevelThreeRateType(v string) {
	o.LevelThreeRateType.Set(&v)
}

// SetLevelThreeRateTypeNil sets the value for LevelThreeRateType to be an explicit nil
func (o *TaxCode) SetLevelThreeRateTypeNil() {
	o.LevelThreeRateType.Set(nil)
}

// UnsetLevelThreeRateType ensures that no value is present for LevelThreeRateType, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeRateType() {
	o.LevelThreeRateType.Unset()
}

// GetLevelThreeTaxableMax returns the LevelThreeTaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeTaxableMax() float64 {
	if o == nil || IsNil(o.LevelThreeTaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelThreeTaxableMax.Get()
}

// GetLevelThreeTaxableMaxOk returns a tuple with the LevelThreeTaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeTaxableMax.Get(), o.LevelThreeTaxableMax.IsSet()
}

// HasLevelThreeTaxableMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeTaxableMax() bool {
	if o != nil && o.LevelThreeTaxableMax.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeTaxableMax gets a reference to the given NullableFloat64 and assigns it to the LevelThreeTaxableMax field.
func (o *TaxCode) SetLevelThreeTaxableMax(v float64) {
	o.LevelThreeTaxableMax.Set(&v)
}

// SetLevelThreeTaxableMaxNil sets the value for LevelThreeTaxableMax to be an explicit nil
func (o *TaxCode) SetLevelThreeTaxableMaxNil() {
	o.LevelThreeTaxableMax.Set(nil)
}

// UnsetLevelThreeTaxableMax ensures that no value is present for LevelThreeTaxableMax, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeTaxableMax() {
	o.LevelThreeTaxableMax.Unset()
}

// GetLevelThreeCaption returns the LevelThreeCaption field value if set, zero value otherwise.
func (o *TaxCode) GetLevelThreeCaption() string {
	if o == nil || IsNil(o.LevelThreeCaption) {
		var ret string
		return ret
	}
	return *o.LevelThreeCaption
}

// GetLevelThreeCaptionOk returns a tuple with the LevelThreeCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelThreeCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.LevelThreeCaption) {
		return nil, false
	}
	return o.LevelThreeCaption, true
}

// HasLevelThreeCaption returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeCaption() bool {
	if o != nil && !IsNil(o.LevelThreeCaption) {
		return true
	}

	return false
}

// SetLevelThreeCaption gets a reference to the given string and assigns it to the LevelThreeCaption field.
func (o *TaxCode) SetLevelThreeCaption(v string) {
	o.LevelThreeCaption = &v
}

// GetLevelThreeTaxCodeXref returns the LevelThreeTaxCodeXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelThreeTaxCodeXref() string {
	if o == nil || IsNil(o.LevelThreeTaxCodeXref) {
		var ret string
		return ret
	}
	return *o.LevelThreeTaxCodeXref
}

// GetLevelThreeTaxCodeXrefOk returns a tuple with the LevelThreeTaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelThreeTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelThreeTaxCodeXref) {
		return nil, false
	}
	return o.LevelThreeTaxCodeXref, true
}

// HasLevelThreeTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeTaxCodeXref() bool {
	if o != nil && !IsNil(o.LevelThreeTaxCodeXref) {
		return true
	}

	return false
}

// SetLevelThreeTaxCodeXref gets a reference to the given string and assigns it to the LevelThreeTaxCodeXref field.
func (o *TaxCode) SetLevelThreeTaxCodeXref(v string) {
	o.LevelThreeTaxCodeXref = &v
}

// GetLevelThreeAgencyXref returns the LevelThreeAgencyXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelThreeAgencyXref() string {
	if o == nil || IsNil(o.LevelThreeAgencyXref) {
		var ret string
		return ret
	}
	return *o.LevelThreeAgencyXref
}

// GetLevelThreeAgencyXrefOk returns a tuple with the LevelThreeAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelThreeAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelThreeAgencyXref) {
		return nil, false
	}
	return o.LevelThreeAgencyXref, true
}

// HasLevelThreeAgencyXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeAgencyXref() bool {
	if o != nil && !IsNil(o.LevelThreeAgencyXref) {
		return true
	}

	return false
}

// SetLevelThreeAgencyXref gets a reference to the given string and assigns it to the LevelThreeAgencyXref field.
func (o *TaxCode) SetLevelThreeAgencyXref(v string) {
	o.LevelThreeAgencyXref = &v
}

// GetLevelThreeServicesFlag returns the LevelThreeServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeServicesFlag() bool {
	if o == nil || IsNil(o.LevelThreeServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelThreeServicesFlag.Get()
}

// GetLevelThreeServicesFlagOk returns a tuple with the LevelThreeServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeServicesFlag.Get(), o.LevelThreeServicesFlag.IsSet()
}

// HasLevelThreeServicesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeServicesFlag() bool {
	if o != nil && o.LevelThreeServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeServicesFlag gets a reference to the given NullableBool and assigns it to the LevelThreeServicesFlag field.
func (o *TaxCode) SetLevelThreeServicesFlag(v bool) {
	o.LevelThreeServicesFlag.Set(&v)
}

// SetLevelThreeServicesFlagNil sets the value for LevelThreeServicesFlag to be an explicit nil
func (o *TaxCode) SetLevelThreeServicesFlagNil() {
	o.LevelThreeServicesFlag.Set(nil)
}

// UnsetLevelThreeServicesFlag ensures that no value is present for LevelThreeServicesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeServicesFlag() {
	o.LevelThreeServicesFlag.Unset()
}

// GetLevelThreeExpensesFlag returns the LevelThreeExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeExpensesFlag() bool {
	if o == nil || IsNil(o.LevelThreeExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelThreeExpensesFlag.Get()
}

// GetLevelThreeExpensesFlagOk returns a tuple with the LevelThreeExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeExpensesFlag.Get(), o.LevelThreeExpensesFlag.IsSet()
}

// HasLevelThreeExpensesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeExpensesFlag() bool {
	if o != nil && o.LevelThreeExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeExpensesFlag gets a reference to the given NullableBool and assigns it to the LevelThreeExpensesFlag field.
func (o *TaxCode) SetLevelThreeExpensesFlag(v bool) {
	o.LevelThreeExpensesFlag.Set(&v)
}

// SetLevelThreeExpensesFlagNil sets the value for LevelThreeExpensesFlag to be an explicit nil
func (o *TaxCode) SetLevelThreeExpensesFlagNil() {
	o.LevelThreeExpensesFlag.Set(nil)
}

// UnsetLevelThreeExpensesFlag ensures that no value is present for LevelThreeExpensesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeExpensesFlag() {
	o.LevelThreeExpensesFlag.Unset()
}

// GetLevelThreeProductsFlag returns the LevelThreeProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeProductsFlag() bool {
	if o == nil || IsNil(o.LevelThreeProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelThreeProductsFlag.Get()
}

// GetLevelThreeProductsFlagOk returns a tuple with the LevelThreeProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeProductsFlag.Get(), o.LevelThreeProductsFlag.IsSet()
}

// HasLevelThreeProductsFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeProductsFlag() bool {
	if o != nil && o.LevelThreeProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeProductsFlag gets a reference to the given NullableBool and assigns it to the LevelThreeProductsFlag field.
func (o *TaxCode) SetLevelThreeProductsFlag(v bool) {
	o.LevelThreeProductsFlag.Set(&v)
}

// SetLevelThreeProductsFlagNil sets the value for LevelThreeProductsFlag to be an explicit nil
func (o *TaxCode) SetLevelThreeProductsFlagNil() {
	o.LevelThreeProductsFlag.Set(nil)
}

// UnsetLevelThreeProductsFlag ensures that no value is present for LevelThreeProductsFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeProductsFlag() {
	o.LevelThreeProductsFlag.Unset()
}

// GetLevelThreeApplySingleUnitFlag returns the LevelThreeApplySingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeApplySingleUnitFlag() bool {
	if o == nil || IsNil(o.LevelThreeApplySingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelThreeApplySingleUnitFlag.Get()
}

// GetLevelThreeApplySingleUnitFlagOk returns a tuple with the LevelThreeApplySingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeApplySingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeApplySingleUnitFlag.Get(), o.LevelThreeApplySingleUnitFlag.IsSet()
}

// HasLevelThreeApplySingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeApplySingleUnitFlag() bool {
	if o != nil && o.LevelThreeApplySingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeApplySingleUnitFlag gets a reference to the given NullableBool and assigns it to the LevelThreeApplySingleUnitFlag field.
func (o *TaxCode) SetLevelThreeApplySingleUnitFlag(v bool) {
	o.LevelThreeApplySingleUnitFlag.Set(&v)
}

// SetLevelThreeApplySingleUnitFlagNil sets the value for LevelThreeApplySingleUnitFlag to be an explicit nil
func (o *TaxCode) SetLevelThreeApplySingleUnitFlagNil() {
	o.LevelThreeApplySingleUnitFlag.Set(nil)
}

// UnsetLevelThreeApplySingleUnitFlag ensures that no value is present for LevelThreeApplySingleUnitFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeApplySingleUnitFlag() {
	o.LevelThreeApplySingleUnitFlag.Unset()
}

// GetLevelThreeApplySingleUnitMin returns the LevelThreeApplySingleUnitMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeApplySingleUnitMin() float64 {
	if o == nil || IsNil(o.LevelThreeApplySingleUnitMin.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelThreeApplySingleUnitMin.Get()
}

// GetLevelThreeApplySingleUnitMinOk returns a tuple with the LevelThreeApplySingleUnitMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeApplySingleUnitMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeApplySingleUnitMin.Get(), o.LevelThreeApplySingleUnitMin.IsSet()
}

// HasLevelThreeApplySingleUnitMin returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeApplySingleUnitMin() bool {
	if o != nil && o.LevelThreeApplySingleUnitMin.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeApplySingleUnitMin gets a reference to the given NullableFloat64 and assigns it to the LevelThreeApplySingleUnitMin field.
func (o *TaxCode) SetLevelThreeApplySingleUnitMin(v float64) {
	o.LevelThreeApplySingleUnitMin.Set(&v)
}

// SetLevelThreeApplySingleUnitMinNil sets the value for LevelThreeApplySingleUnitMin to be an explicit nil
func (o *TaxCode) SetLevelThreeApplySingleUnitMinNil() {
	o.LevelThreeApplySingleUnitMin.Set(nil)
}

// UnsetLevelThreeApplySingleUnitMin ensures that no value is present for LevelThreeApplySingleUnitMin, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeApplySingleUnitMin() {
	o.LevelThreeApplySingleUnitMin.Unset()
}

// GetLevelThreeApplySingleUnitMax returns the LevelThreeApplySingleUnitMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelThreeApplySingleUnitMax() float64 {
	if o == nil || IsNil(o.LevelThreeApplySingleUnitMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelThreeApplySingleUnitMax.Get()
}

// GetLevelThreeApplySingleUnitMaxOk returns a tuple with the LevelThreeApplySingleUnitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelThreeApplySingleUnitMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeApplySingleUnitMax.Get(), o.LevelThreeApplySingleUnitMax.IsSet()
}

// HasLevelThreeApplySingleUnitMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelThreeApplySingleUnitMax() bool {
	if o != nil && o.LevelThreeApplySingleUnitMax.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeApplySingleUnitMax gets a reference to the given NullableFloat64 and assigns it to the LevelThreeApplySingleUnitMax field.
func (o *TaxCode) SetLevelThreeApplySingleUnitMax(v float64) {
	o.LevelThreeApplySingleUnitMax.Set(&v)
}

// SetLevelThreeApplySingleUnitMaxNil sets the value for LevelThreeApplySingleUnitMax to be an explicit nil
func (o *TaxCode) SetLevelThreeApplySingleUnitMaxNil() {
	o.LevelThreeApplySingleUnitMax.Set(nil)
}

// UnsetLevelThreeApplySingleUnitMax ensures that no value is present for LevelThreeApplySingleUnitMax, not even an explicit nil
func (o *TaxCode) UnsetLevelThreeApplySingleUnitMax() {
	o.LevelThreeApplySingleUnitMax.Unset()
}

// GetLevelFourRate returns the LevelFourRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourRate() float64 {
	if o == nil || IsNil(o.LevelFourRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFourRate.Get()
}

// GetLevelFourRateOk returns a tuple with the LevelFourRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourRate.Get(), o.LevelFourRate.IsSet()
}

// HasLevelFourRate returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourRate() bool {
	if o != nil && o.LevelFourRate.IsSet() {
		return true
	}

	return false
}

// SetLevelFourRate gets a reference to the given NullableFloat64 and assigns it to the LevelFourRate field.
func (o *TaxCode) SetLevelFourRate(v float64) {
	o.LevelFourRate.Set(&v)
}

// SetLevelFourRateNil sets the value for LevelFourRate to be an explicit nil
func (o *TaxCode) SetLevelFourRateNil() {
	o.LevelFourRate.Set(nil)
}

// UnsetLevelFourRate ensures that no value is present for LevelFourRate, not even an explicit nil
func (o *TaxCode) UnsetLevelFourRate() {
	o.LevelFourRate.Unset()
}

// GetLevelFourRateType returns the LevelFourRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourRateType() string {
	if o == nil || IsNil(o.LevelFourRateType.Get()) {
		var ret string
		return ret
	}
	return *o.LevelFourRateType.Get()
}

// GetLevelFourRateTypeOk returns a tuple with the LevelFourRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourRateType.Get(), o.LevelFourRateType.IsSet()
}

// HasLevelFourRateType returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourRateType() bool {
	if o != nil && o.LevelFourRateType.IsSet() {
		return true
	}

	return false
}

// SetLevelFourRateType gets a reference to the given NullableString and assigns it to the LevelFourRateType field.
func (o *TaxCode) SetLevelFourRateType(v string) {
	o.LevelFourRateType.Set(&v)
}

// SetLevelFourRateTypeNil sets the value for LevelFourRateType to be an explicit nil
func (o *TaxCode) SetLevelFourRateTypeNil() {
	o.LevelFourRateType.Set(nil)
}

// UnsetLevelFourRateType ensures that no value is present for LevelFourRateType, not even an explicit nil
func (o *TaxCode) UnsetLevelFourRateType() {
	o.LevelFourRateType.Unset()
}

// GetLevelFourTaxableMax returns the LevelFourTaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourTaxableMax() float64 {
	if o == nil || IsNil(o.LevelFourTaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFourTaxableMax.Get()
}

// GetLevelFourTaxableMaxOk returns a tuple with the LevelFourTaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourTaxableMax.Get(), o.LevelFourTaxableMax.IsSet()
}

// HasLevelFourTaxableMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourTaxableMax() bool {
	if o != nil && o.LevelFourTaxableMax.IsSet() {
		return true
	}

	return false
}

// SetLevelFourTaxableMax gets a reference to the given NullableFloat64 and assigns it to the LevelFourTaxableMax field.
func (o *TaxCode) SetLevelFourTaxableMax(v float64) {
	o.LevelFourTaxableMax.Set(&v)
}

// SetLevelFourTaxableMaxNil sets the value for LevelFourTaxableMax to be an explicit nil
func (o *TaxCode) SetLevelFourTaxableMaxNil() {
	o.LevelFourTaxableMax.Set(nil)
}

// UnsetLevelFourTaxableMax ensures that no value is present for LevelFourTaxableMax, not even an explicit nil
func (o *TaxCode) UnsetLevelFourTaxableMax() {
	o.LevelFourTaxableMax.Unset()
}

// GetLevelFourCaption returns the LevelFourCaption field value if set, zero value otherwise.
func (o *TaxCode) GetLevelFourCaption() string {
	if o == nil || IsNil(o.LevelFourCaption) {
		var ret string
		return ret
	}
	return *o.LevelFourCaption
}

// GetLevelFourCaptionOk returns a tuple with the LevelFourCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelFourCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.LevelFourCaption) {
		return nil, false
	}
	return o.LevelFourCaption, true
}

// HasLevelFourCaption returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourCaption() bool {
	if o != nil && !IsNil(o.LevelFourCaption) {
		return true
	}

	return false
}

// SetLevelFourCaption gets a reference to the given string and assigns it to the LevelFourCaption field.
func (o *TaxCode) SetLevelFourCaption(v string) {
	o.LevelFourCaption = &v
}

// GetLevelFourTaxCodeXref returns the LevelFourTaxCodeXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelFourTaxCodeXref() string {
	if o == nil || IsNil(o.LevelFourTaxCodeXref) {
		var ret string
		return ret
	}
	return *o.LevelFourTaxCodeXref
}

// GetLevelFourTaxCodeXrefOk returns a tuple with the LevelFourTaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelFourTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelFourTaxCodeXref) {
		return nil, false
	}
	return o.LevelFourTaxCodeXref, true
}

// HasLevelFourTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourTaxCodeXref() bool {
	if o != nil && !IsNil(o.LevelFourTaxCodeXref) {
		return true
	}

	return false
}

// SetLevelFourTaxCodeXref gets a reference to the given string and assigns it to the LevelFourTaxCodeXref field.
func (o *TaxCode) SetLevelFourTaxCodeXref(v string) {
	o.LevelFourTaxCodeXref = &v
}

// GetLevelFourAgencyXref returns the LevelFourAgencyXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelFourAgencyXref() string {
	if o == nil || IsNil(o.LevelFourAgencyXref) {
		var ret string
		return ret
	}
	return *o.LevelFourAgencyXref
}

// GetLevelFourAgencyXrefOk returns a tuple with the LevelFourAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelFourAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelFourAgencyXref) {
		return nil, false
	}
	return o.LevelFourAgencyXref, true
}

// HasLevelFourAgencyXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourAgencyXref() bool {
	if o != nil && !IsNil(o.LevelFourAgencyXref) {
		return true
	}

	return false
}

// SetLevelFourAgencyXref gets a reference to the given string and assigns it to the LevelFourAgencyXref field.
func (o *TaxCode) SetLevelFourAgencyXref(v string) {
	o.LevelFourAgencyXref = &v
}

// GetLevelFourServicesFlag returns the LevelFourServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourServicesFlag() bool {
	if o == nil || IsNil(o.LevelFourServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFourServicesFlag.Get()
}

// GetLevelFourServicesFlagOk returns a tuple with the LevelFourServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourServicesFlag.Get(), o.LevelFourServicesFlag.IsSet()
}

// HasLevelFourServicesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourServicesFlag() bool {
	if o != nil && o.LevelFourServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFourServicesFlag gets a reference to the given NullableBool and assigns it to the LevelFourServicesFlag field.
func (o *TaxCode) SetLevelFourServicesFlag(v bool) {
	o.LevelFourServicesFlag.Set(&v)
}

// SetLevelFourServicesFlagNil sets the value for LevelFourServicesFlag to be an explicit nil
func (o *TaxCode) SetLevelFourServicesFlagNil() {
	o.LevelFourServicesFlag.Set(nil)
}

// UnsetLevelFourServicesFlag ensures that no value is present for LevelFourServicesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFourServicesFlag() {
	o.LevelFourServicesFlag.Unset()
}

// GetLevelFourExpensesFlag returns the LevelFourExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourExpensesFlag() bool {
	if o == nil || IsNil(o.LevelFourExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFourExpensesFlag.Get()
}

// GetLevelFourExpensesFlagOk returns a tuple with the LevelFourExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourExpensesFlag.Get(), o.LevelFourExpensesFlag.IsSet()
}

// HasLevelFourExpensesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourExpensesFlag() bool {
	if o != nil && o.LevelFourExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFourExpensesFlag gets a reference to the given NullableBool and assigns it to the LevelFourExpensesFlag field.
func (o *TaxCode) SetLevelFourExpensesFlag(v bool) {
	o.LevelFourExpensesFlag.Set(&v)
}

// SetLevelFourExpensesFlagNil sets the value for LevelFourExpensesFlag to be an explicit nil
func (o *TaxCode) SetLevelFourExpensesFlagNil() {
	o.LevelFourExpensesFlag.Set(nil)
}

// UnsetLevelFourExpensesFlag ensures that no value is present for LevelFourExpensesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFourExpensesFlag() {
	o.LevelFourExpensesFlag.Unset()
}

// GetLevelFourProductsFlag returns the LevelFourProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourProductsFlag() bool {
	if o == nil || IsNil(o.LevelFourProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFourProductsFlag.Get()
}

// GetLevelFourProductsFlagOk returns a tuple with the LevelFourProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourProductsFlag.Get(), o.LevelFourProductsFlag.IsSet()
}

// HasLevelFourProductsFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourProductsFlag() bool {
	if o != nil && o.LevelFourProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFourProductsFlag gets a reference to the given NullableBool and assigns it to the LevelFourProductsFlag field.
func (o *TaxCode) SetLevelFourProductsFlag(v bool) {
	o.LevelFourProductsFlag.Set(&v)
}

// SetLevelFourProductsFlagNil sets the value for LevelFourProductsFlag to be an explicit nil
func (o *TaxCode) SetLevelFourProductsFlagNil() {
	o.LevelFourProductsFlag.Set(nil)
}

// UnsetLevelFourProductsFlag ensures that no value is present for LevelFourProductsFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFourProductsFlag() {
	o.LevelFourProductsFlag.Unset()
}

// GetLevelFourApplySingleUnitFlag returns the LevelFourApplySingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourApplySingleUnitFlag() bool {
	if o == nil || IsNil(o.LevelFourApplySingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFourApplySingleUnitFlag.Get()
}

// GetLevelFourApplySingleUnitFlagOk returns a tuple with the LevelFourApplySingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourApplySingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourApplySingleUnitFlag.Get(), o.LevelFourApplySingleUnitFlag.IsSet()
}

// HasLevelFourApplySingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourApplySingleUnitFlag() bool {
	if o != nil && o.LevelFourApplySingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFourApplySingleUnitFlag gets a reference to the given NullableBool and assigns it to the LevelFourApplySingleUnitFlag field.
func (o *TaxCode) SetLevelFourApplySingleUnitFlag(v bool) {
	o.LevelFourApplySingleUnitFlag.Set(&v)
}

// SetLevelFourApplySingleUnitFlagNil sets the value for LevelFourApplySingleUnitFlag to be an explicit nil
func (o *TaxCode) SetLevelFourApplySingleUnitFlagNil() {
	o.LevelFourApplySingleUnitFlag.Set(nil)
}

// UnsetLevelFourApplySingleUnitFlag ensures that no value is present for LevelFourApplySingleUnitFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFourApplySingleUnitFlag() {
	o.LevelFourApplySingleUnitFlag.Unset()
}

// GetLevelFourApplySingleUnitMin returns the LevelFourApplySingleUnitMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourApplySingleUnitMin() float64 {
	if o == nil || IsNil(o.LevelFourApplySingleUnitMin.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFourApplySingleUnitMin.Get()
}

// GetLevelFourApplySingleUnitMinOk returns a tuple with the LevelFourApplySingleUnitMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourApplySingleUnitMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourApplySingleUnitMin.Get(), o.LevelFourApplySingleUnitMin.IsSet()
}

// HasLevelFourApplySingleUnitMin returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourApplySingleUnitMin() bool {
	if o != nil && o.LevelFourApplySingleUnitMin.IsSet() {
		return true
	}

	return false
}

// SetLevelFourApplySingleUnitMin gets a reference to the given NullableFloat64 and assigns it to the LevelFourApplySingleUnitMin field.
func (o *TaxCode) SetLevelFourApplySingleUnitMin(v float64) {
	o.LevelFourApplySingleUnitMin.Set(&v)
}

// SetLevelFourApplySingleUnitMinNil sets the value for LevelFourApplySingleUnitMin to be an explicit nil
func (o *TaxCode) SetLevelFourApplySingleUnitMinNil() {
	o.LevelFourApplySingleUnitMin.Set(nil)
}

// UnsetLevelFourApplySingleUnitMin ensures that no value is present for LevelFourApplySingleUnitMin, not even an explicit nil
func (o *TaxCode) UnsetLevelFourApplySingleUnitMin() {
	o.LevelFourApplySingleUnitMin.Unset()
}

// GetLevelFourApplySingleUnitMax returns the LevelFourApplySingleUnitMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFourApplySingleUnitMax() float64 {
	if o == nil || IsNil(o.LevelFourApplySingleUnitMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFourApplySingleUnitMax.Get()
}

// GetLevelFourApplySingleUnitMaxOk returns a tuple with the LevelFourApplySingleUnitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFourApplySingleUnitMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourApplySingleUnitMax.Get(), o.LevelFourApplySingleUnitMax.IsSet()
}

// HasLevelFourApplySingleUnitMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFourApplySingleUnitMax() bool {
	if o != nil && o.LevelFourApplySingleUnitMax.IsSet() {
		return true
	}

	return false
}

// SetLevelFourApplySingleUnitMax gets a reference to the given NullableFloat64 and assigns it to the LevelFourApplySingleUnitMax field.
func (o *TaxCode) SetLevelFourApplySingleUnitMax(v float64) {
	o.LevelFourApplySingleUnitMax.Set(&v)
}

// SetLevelFourApplySingleUnitMaxNil sets the value for LevelFourApplySingleUnitMax to be an explicit nil
func (o *TaxCode) SetLevelFourApplySingleUnitMaxNil() {
	o.LevelFourApplySingleUnitMax.Set(nil)
}

// UnsetLevelFourApplySingleUnitMax ensures that no value is present for LevelFourApplySingleUnitMax, not even an explicit nil
func (o *TaxCode) UnsetLevelFourApplySingleUnitMax() {
	o.LevelFourApplySingleUnitMax.Unset()
}

// GetLevelFiveRate returns the LevelFiveRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveRate() float64 {
	if o == nil || IsNil(o.LevelFiveRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFiveRate.Get()
}

// GetLevelFiveRateOk returns a tuple with the LevelFiveRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveRate.Get(), o.LevelFiveRate.IsSet()
}

// HasLevelFiveRate returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveRate() bool {
	if o != nil && o.LevelFiveRate.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveRate gets a reference to the given NullableFloat64 and assigns it to the LevelFiveRate field.
func (o *TaxCode) SetLevelFiveRate(v float64) {
	o.LevelFiveRate.Set(&v)
}

// SetLevelFiveRateNil sets the value for LevelFiveRate to be an explicit nil
func (o *TaxCode) SetLevelFiveRateNil() {
	o.LevelFiveRate.Set(nil)
}

// UnsetLevelFiveRate ensures that no value is present for LevelFiveRate, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveRate() {
	o.LevelFiveRate.Unset()
}

// GetLevelFiveRateType returns the LevelFiveRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveRateType() string {
	if o == nil || IsNil(o.LevelFiveRateType.Get()) {
		var ret string
		return ret
	}
	return *o.LevelFiveRateType.Get()
}

// GetLevelFiveRateTypeOk returns a tuple with the LevelFiveRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveRateType.Get(), o.LevelFiveRateType.IsSet()
}

// HasLevelFiveRateType returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveRateType() bool {
	if o != nil && o.LevelFiveRateType.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveRateType gets a reference to the given NullableString and assigns it to the LevelFiveRateType field.
func (o *TaxCode) SetLevelFiveRateType(v string) {
	o.LevelFiveRateType.Set(&v)
}

// SetLevelFiveRateTypeNil sets the value for LevelFiveRateType to be an explicit nil
func (o *TaxCode) SetLevelFiveRateTypeNil() {
	o.LevelFiveRateType.Set(nil)
}

// UnsetLevelFiveRateType ensures that no value is present for LevelFiveRateType, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveRateType() {
	o.LevelFiveRateType.Unset()
}

// GetLevelFiveTaxableMax returns the LevelFiveTaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveTaxableMax() float64 {
	if o == nil || IsNil(o.LevelFiveTaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFiveTaxableMax.Get()
}

// GetLevelFiveTaxableMaxOk returns a tuple with the LevelFiveTaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveTaxableMax.Get(), o.LevelFiveTaxableMax.IsSet()
}

// HasLevelFiveTaxableMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveTaxableMax() bool {
	if o != nil && o.LevelFiveTaxableMax.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveTaxableMax gets a reference to the given NullableFloat64 and assigns it to the LevelFiveTaxableMax field.
func (o *TaxCode) SetLevelFiveTaxableMax(v float64) {
	o.LevelFiveTaxableMax.Set(&v)
}

// SetLevelFiveTaxableMaxNil sets the value for LevelFiveTaxableMax to be an explicit nil
func (o *TaxCode) SetLevelFiveTaxableMaxNil() {
	o.LevelFiveTaxableMax.Set(nil)
}

// UnsetLevelFiveTaxableMax ensures that no value is present for LevelFiveTaxableMax, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveTaxableMax() {
	o.LevelFiveTaxableMax.Unset()
}

// GetLevelFiveCaption returns the LevelFiveCaption field value if set, zero value otherwise.
func (o *TaxCode) GetLevelFiveCaption() string {
	if o == nil || IsNil(o.LevelFiveCaption) {
		var ret string
		return ret
	}
	return *o.LevelFiveCaption
}

// GetLevelFiveCaptionOk returns a tuple with the LevelFiveCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelFiveCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.LevelFiveCaption) {
		return nil, false
	}
	return o.LevelFiveCaption, true
}

// HasLevelFiveCaption returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveCaption() bool {
	if o != nil && !IsNil(o.LevelFiveCaption) {
		return true
	}

	return false
}

// SetLevelFiveCaption gets a reference to the given string and assigns it to the LevelFiveCaption field.
func (o *TaxCode) SetLevelFiveCaption(v string) {
	o.LevelFiveCaption = &v
}

// GetLevelFiveTaxCodeXref returns the LevelFiveTaxCodeXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelFiveTaxCodeXref() string {
	if o == nil || IsNil(o.LevelFiveTaxCodeXref) {
		var ret string
		return ret
	}
	return *o.LevelFiveTaxCodeXref
}

// GetLevelFiveTaxCodeXrefOk returns a tuple with the LevelFiveTaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelFiveTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelFiveTaxCodeXref) {
		return nil, false
	}
	return o.LevelFiveTaxCodeXref, true
}

// HasLevelFiveTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveTaxCodeXref() bool {
	if o != nil && !IsNil(o.LevelFiveTaxCodeXref) {
		return true
	}

	return false
}

// SetLevelFiveTaxCodeXref gets a reference to the given string and assigns it to the LevelFiveTaxCodeXref field.
func (o *TaxCode) SetLevelFiveTaxCodeXref(v string) {
	o.LevelFiveTaxCodeXref = &v
}

// GetLevelFiveAgencyXref returns the LevelFiveAgencyXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelFiveAgencyXref() string {
	if o == nil || IsNil(o.LevelFiveAgencyXref) {
		var ret string
		return ret
	}
	return *o.LevelFiveAgencyXref
}

// GetLevelFiveAgencyXrefOk returns a tuple with the LevelFiveAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelFiveAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelFiveAgencyXref) {
		return nil, false
	}
	return o.LevelFiveAgencyXref, true
}

// HasLevelFiveAgencyXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveAgencyXref() bool {
	if o != nil && !IsNil(o.LevelFiveAgencyXref) {
		return true
	}

	return false
}

// SetLevelFiveAgencyXref gets a reference to the given string and assigns it to the LevelFiveAgencyXref field.
func (o *TaxCode) SetLevelFiveAgencyXref(v string) {
	o.LevelFiveAgencyXref = &v
}

// GetLevelFiveServicesFlag returns the LevelFiveServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveServicesFlag() bool {
	if o == nil || IsNil(o.LevelFiveServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFiveServicesFlag.Get()
}

// GetLevelFiveServicesFlagOk returns a tuple with the LevelFiveServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveServicesFlag.Get(), o.LevelFiveServicesFlag.IsSet()
}

// HasLevelFiveServicesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveServicesFlag() bool {
	if o != nil && o.LevelFiveServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveServicesFlag gets a reference to the given NullableBool and assigns it to the LevelFiveServicesFlag field.
func (o *TaxCode) SetLevelFiveServicesFlag(v bool) {
	o.LevelFiveServicesFlag.Set(&v)
}

// SetLevelFiveServicesFlagNil sets the value for LevelFiveServicesFlag to be an explicit nil
func (o *TaxCode) SetLevelFiveServicesFlagNil() {
	o.LevelFiveServicesFlag.Set(nil)
}

// UnsetLevelFiveServicesFlag ensures that no value is present for LevelFiveServicesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveServicesFlag() {
	o.LevelFiveServicesFlag.Unset()
}

// GetLevelFiveExpensesFlag returns the LevelFiveExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveExpensesFlag() bool {
	if o == nil || IsNil(o.LevelFiveExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFiveExpensesFlag.Get()
}

// GetLevelFiveExpensesFlagOk returns a tuple with the LevelFiveExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveExpensesFlag.Get(), o.LevelFiveExpensesFlag.IsSet()
}

// HasLevelFiveExpensesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveExpensesFlag() bool {
	if o != nil && o.LevelFiveExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveExpensesFlag gets a reference to the given NullableBool and assigns it to the LevelFiveExpensesFlag field.
func (o *TaxCode) SetLevelFiveExpensesFlag(v bool) {
	o.LevelFiveExpensesFlag.Set(&v)
}

// SetLevelFiveExpensesFlagNil sets the value for LevelFiveExpensesFlag to be an explicit nil
func (o *TaxCode) SetLevelFiveExpensesFlagNil() {
	o.LevelFiveExpensesFlag.Set(nil)
}

// UnsetLevelFiveExpensesFlag ensures that no value is present for LevelFiveExpensesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveExpensesFlag() {
	o.LevelFiveExpensesFlag.Unset()
}

// GetLevelFiveProductsFlag returns the LevelFiveProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveProductsFlag() bool {
	if o == nil || IsNil(o.LevelFiveProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFiveProductsFlag.Get()
}

// GetLevelFiveProductsFlagOk returns a tuple with the LevelFiveProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveProductsFlag.Get(), o.LevelFiveProductsFlag.IsSet()
}

// HasLevelFiveProductsFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveProductsFlag() bool {
	if o != nil && o.LevelFiveProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveProductsFlag gets a reference to the given NullableBool and assigns it to the LevelFiveProductsFlag field.
func (o *TaxCode) SetLevelFiveProductsFlag(v bool) {
	o.LevelFiveProductsFlag.Set(&v)
}

// SetLevelFiveProductsFlagNil sets the value for LevelFiveProductsFlag to be an explicit nil
func (o *TaxCode) SetLevelFiveProductsFlagNil() {
	o.LevelFiveProductsFlag.Set(nil)
}

// UnsetLevelFiveProductsFlag ensures that no value is present for LevelFiveProductsFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveProductsFlag() {
	o.LevelFiveProductsFlag.Unset()
}

// GetLevelFiveApplySingleUnitFlag returns the LevelFiveApplySingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveApplySingleUnitFlag() bool {
	if o == nil || IsNil(o.LevelFiveApplySingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelFiveApplySingleUnitFlag.Get()
}

// GetLevelFiveApplySingleUnitFlagOk returns a tuple with the LevelFiveApplySingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveApplySingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveApplySingleUnitFlag.Get(), o.LevelFiveApplySingleUnitFlag.IsSet()
}

// HasLevelFiveApplySingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveApplySingleUnitFlag() bool {
	if o != nil && o.LevelFiveApplySingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveApplySingleUnitFlag gets a reference to the given NullableBool and assigns it to the LevelFiveApplySingleUnitFlag field.
func (o *TaxCode) SetLevelFiveApplySingleUnitFlag(v bool) {
	o.LevelFiveApplySingleUnitFlag.Set(&v)
}

// SetLevelFiveApplySingleUnitFlagNil sets the value for LevelFiveApplySingleUnitFlag to be an explicit nil
func (o *TaxCode) SetLevelFiveApplySingleUnitFlagNil() {
	o.LevelFiveApplySingleUnitFlag.Set(nil)
}

// UnsetLevelFiveApplySingleUnitFlag ensures that no value is present for LevelFiveApplySingleUnitFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveApplySingleUnitFlag() {
	o.LevelFiveApplySingleUnitFlag.Unset()
}

// GetLevelFiveApplySingleUnitMin returns the LevelFiveApplySingleUnitMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveApplySingleUnitMin() float64 {
	if o == nil || IsNil(o.LevelFiveApplySingleUnitMin.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFiveApplySingleUnitMin.Get()
}

// GetLevelFiveApplySingleUnitMinOk returns a tuple with the LevelFiveApplySingleUnitMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveApplySingleUnitMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveApplySingleUnitMin.Get(), o.LevelFiveApplySingleUnitMin.IsSet()
}

// HasLevelFiveApplySingleUnitMin returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveApplySingleUnitMin() bool {
	if o != nil && o.LevelFiveApplySingleUnitMin.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveApplySingleUnitMin gets a reference to the given NullableFloat64 and assigns it to the LevelFiveApplySingleUnitMin field.
func (o *TaxCode) SetLevelFiveApplySingleUnitMin(v float64) {
	o.LevelFiveApplySingleUnitMin.Set(&v)
}

// SetLevelFiveApplySingleUnitMinNil sets the value for LevelFiveApplySingleUnitMin to be an explicit nil
func (o *TaxCode) SetLevelFiveApplySingleUnitMinNil() {
	o.LevelFiveApplySingleUnitMin.Set(nil)
}

// UnsetLevelFiveApplySingleUnitMin ensures that no value is present for LevelFiveApplySingleUnitMin, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveApplySingleUnitMin() {
	o.LevelFiveApplySingleUnitMin.Unset()
}

// GetLevelFiveApplySingleUnitMax returns the LevelFiveApplySingleUnitMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelFiveApplySingleUnitMax() float64 {
	if o == nil || IsNil(o.LevelFiveApplySingleUnitMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFiveApplySingleUnitMax.Get()
}

// GetLevelFiveApplySingleUnitMaxOk returns a tuple with the LevelFiveApplySingleUnitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelFiveApplySingleUnitMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveApplySingleUnitMax.Get(), o.LevelFiveApplySingleUnitMax.IsSet()
}

// HasLevelFiveApplySingleUnitMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelFiveApplySingleUnitMax() bool {
	if o != nil && o.LevelFiveApplySingleUnitMax.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveApplySingleUnitMax gets a reference to the given NullableFloat64 and assigns it to the LevelFiveApplySingleUnitMax field.
func (o *TaxCode) SetLevelFiveApplySingleUnitMax(v float64) {
	o.LevelFiveApplySingleUnitMax.Set(&v)
}

// SetLevelFiveApplySingleUnitMaxNil sets the value for LevelFiveApplySingleUnitMax to be an explicit nil
func (o *TaxCode) SetLevelFiveApplySingleUnitMaxNil() {
	o.LevelFiveApplySingleUnitMax.Set(nil)
}

// UnsetLevelFiveApplySingleUnitMax ensures that no value is present for LevelFiveApplySingleUnitMax, not even an explicit nil
func (o *TaxCode) UnsetLevelFiveApplySingleUnitMax() {
	o.LevelFiveApplySingleUnitMax.Unset()
}

// GetLevelSixRate returns the LevelSixRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixRate() float64 {
	if o == nil || IsNil(o.LevelSixRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixRate.Get()
}

// GetLevelSixRateOk returns a tuple with the LevelSixRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixRate.Get(), o.LevelSixRate.IsSet()
}

// HasLevelSixRate returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixRate() bool {
	if o != nil && o.LevelSixRate.IsSet() {
		return true
	}

	return false
}

// SetLevelSixRate gets a reference to the given NullableFloat64 and assigns it to the LevelSixRate field.
func (o *TaxCode) SetLevelSixRate(v float64) {
	o.LevelSixRate.Set(&v)
}

// SetLevelSixRateNil sets the value for LevelSixRate to be an explicit nil
func (o *TaxCode) SetLevelSixRateNil() {
	o.LevelSixRate.Set(nil)
}

// UnsetLevelSixRate ensures that no value is present for LevelSixRate, not even an explicit nil
func (o *TaxCode) UnsetLevelSixRate() {
	o.LevelSixRate.Unset()
}

// GetLevelSixRateType returns the LevelSixRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixRateType() string {
	if o == nil || IsNil(o.LevelSixRateType.Get()) {
		var ret string
		return ret
	}
	return *o.LevelSixRateType.Get()
}

// GetLevelSixRateTypeOk returns a tuple with the LevelSixRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixRateType.Get(), o.LevelSixRateType.IsSet()
}

// HasLevelSixRateType returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixRateType() bool {
	if o != nil && o.LevelSixRateType.IsSet() {
		return true
	}

	return false
}

// SetLevelSixRateType gets a reference to the given NullableString and assigns it to the LevelSixRateType field.
func (o *TaxCode) SetLevelSixRateType(v string) {
	o.LevelSixRateType.Set(&v)
}

// SetLevelSixRateTypeNil sets the value for LevelSixRateType to be an explicit nil
func (o *TaxCode) SetLevelSixRateTypeNil() {
	o.LevelSixRateType.Set(nil)
}

// UnsetLevelSixRateType ensures that no value is present for LevelSixRateType, not even an explicit nil
func (o *TaxCode) UnsetLevelSixRateType() {
	o.LevelSixRateType.Unset()
}

// GetLevelSixTaxableMax returns the LevelSixTaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixTaxableMax() float64 {
	if o == nil || IsNil(o.LevelSixTaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixTaxableMax.Get()
}

// GetLevelSixTaxableMaxOk returns a tuple with the LevelSixTaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxableMax.Get(), o.LevelSixTaxableMax.IsSet()
}

// HasLevelSixTaxableMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixTaxableMax() bool {
	if o != nil && o.LevelSixTaxableMax.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxableMax gets a reference to the given NullableFloat64 and assigns it to the LevelSixTaxableMax field.
func (o *TaxCode) SetLevelSixTaxableMax(v float64) {
	o.LevelSixTaxableMax.Set(&v)
}

// SetLevelSixTaxableMaxNil sets the value for LevelSixTaxableMax to be an explicit nil
func (o *TaxCode) SetLevelSixTaxableMaxNil() {
	o.LevelSixTaxableMax.Set(nil)
}

// UnsetLevelSixTaxableMax ensures that no value is present for LevelSixTaxableMax, not even an explicit nil
func (o *TaxCode) UnsetLevelSixTaxableMax() {
	o.LevelSixTaxableMax.Unset()
}

// GetLevelSixCaption returns the LevelSixCaption field value if set, zero value otherwise.
func (o *TaxCode) GetLevelSixCaption() string {
	if o == nil || IsNil(o.LevelSixCaption) {
		var ret string
		return ret
	}
	return *o.LevelSixCaption
}

// GetLevelSixCaptionOk returns a tuple with the LevelSixCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelSixCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.LevelSixCaption) {
		return nil, false
	}
	return o.LevelSixCaption, true
}

// HasLevelSixCaption returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixCaption() bool {
	if o != nil && !IsNil(o.LevelSixCaption) {
		return true
	}

	return false
}

// SetLevelSixCaption gets a reference to the given string and assigns it to the LevelSixCaption field.
func (o *TaxCode) SetLevelSixCaption(v string) {
	o.LevelSixCaption = &v
}

// GetLevelSixTaxCodeXref returns the LevelSixTaxCodeXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelSixTaxCodeXref() string {
	if o == nil || IsNil(o.LevelSixTaxCodeXref) {
		var ret string
		return ret
	}
	return *o.LevelSixTaxCodeXref
}

// GetLevelSixTaxCodeXrefOk returns a tuple with the LevelSixTaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelSixTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelSixTaxCodeXref) {
		return nil, false
	}
	return o.LevelSixTaxCodeXref, true
}

// HasLevelSixTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixTaxCodeXref() bool {
	if o != nil && !IsNil(o.LevelSixTaxCodeXref) {
		return true
	}

	return false
}

// SetLevelSixTaxCodeXref gets a reference to the given string and assigns it to the LevelSixTaxCodeXref field.
func (o *TaxCode) SetLevelSixTaxCodeXref(v string) {
	o.LevelSixTaxCodeXref = &v
}

// GetLevelSixAgencyXref returns the LevelSixAgencyXref field value if set, zero value otherwise.
func (o *TaxCode) GetLevelSixAgencyXref() string {
	if o == nil || IsNil(o.LevelSixAgencyXref) {
		var ret string
		return ret
	}
	return *o.LevelSixAgencyXref
}

// GetLevelSixAgencyXrefOk returns a tuple with the LevelSixAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetLevelSixAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelSixAgencyXref) {
		return nil, false
	}
	return o.LevelSixAgencyXref, true
}

// HasLevelSixAgencyXref returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixAgencyXref() bool {
	if o != nil && !IsNil(o.LevelSixAgencyXref) {
		return true
	}

	return false
}

// SetLevelSixAgencyXref gets a reference to the given string and assigns it to the LevelSixAgencyXref field.
func (o *TaxCode) SetLevelSixAgencyXref(v string) {
	o.LevelSixAgencyXref = &v
}

// GetLevelSixServicesFlag returns the LevelSixServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixServicesFlag() bool {
	if o == nil || IsNil(o.LevelSixServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixServicesFlag.Get()
}

// GetLevelSixServicesFlagOk returns a tuple with the LevelSixServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixServicesFlag.Get(), o.LevelSixServicesFlag.IsSet()
}

// HasLevelSixServicesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixServicesFlag() bool {
	if o != nil && o.LevelSixServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixServicesFlag gets a reference to the given NullableBool and assigns it to the LevelSixServicesFlag field.
func (o *TaxCode) SetLevelSixServicesFlag(v bool) {
	o.LevelSixServicesFlag.Set(&v)
}

// SetLevelSixServicesFlagNil sets the value for LevelSixServicesFlag to be an explicit nil
func (o *TaxCode) SetLevelSixServicesFlagNil() {
	o.LevelSixServicesFlag.Set(nil)
}

// UnsetLevelSixServicesFlag ensures that no value is present for LevelSixServicesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelSixServicesFlag() {
	o.LevelSixServicesFlag.Unset()
}

// GetLevelSixExpensesFlag returns the LevelSixExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixExpensesFlag() bool {
	if o == nil || IsNil(o.LevelSixExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixExpensesFlag.Get()
}

// GetLevelSixExpensesFlagOk returns a tuple with the LevelSixExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixExpensesFlag.Get(), o.LevelSixExpensesFlag.IsSet()
}

// HasLevelSixExpensesFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixExpensesFlag() bool {
	if o != nil && o.LevelSixExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixExpensesFlag gets a reference to the given NullableBool and assigns it to the LevelSixExpensesFlag field.
func (o *TaxCode) SetLevelSixExpensesFlag(v bool) {
	o.LevelSixExpensesFlag.Set(&v)
}

// SetLevelSixExpensesFlagNil sets the value for LevelSixExpensesFlag to be an explicit nil
func (o *TaxCode) SetLevelSixExpensesFlagNil() {
	o.LevelSixExpensesFlag.Set(nil)
}

// UnsetLevelSixExpensesFlag ensures that no value is present for LevelSixExpensesFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelSixExpensesFlag() {
	o.LevelSixExpensesFlag.Unset()
}

// GetLevelSixProductsFlag returns the LevelSixProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixProductsFlag() bool {
	if o == nil || IsNil(o.LevelSixProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixProductsFlag.Get()
}

// GetLevelSixProductsFlagOk returns a tuple with the LevelSixProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixProductsFlag.Get(), o.LevelSixProductsFlag.IsSet()
}

// HasLevelSixProductsFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixProductsFlag() bool {
	if o != nil && o.LevelSixProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixProductsFlag gets a reference to the given NullableBool and assigns it to the LevelSixProductsFlag field.
func (o *TaxCode) SetLevelSixProductsFlag(v bool) {
	o.LevelSixProductsFlag.Set(&v)
}

// SetLevelSixProductsFlagNil sets the value for LevelSixProductsFlag to be an explicit nil
func (o *TaxCode) SetLevelSixProductsFlagNil() {
	o.LevelSixProductsFlag.Set(nil)
}

// UnsetLevelSixProductsFlag ensures that no value is present for LevelSixProductsFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelSixProductsFlag() {
	o.LevelSixProductsFlag.Unset()
}

// GetLevelSixApplySingleUnitFlag returns the LevelSixApplySingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixApplySingleUnitFlag() bool {
	if o == nil || IsNil(o.LevelSixApplySingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixApplySingleUnitFlag.Get()
}

// GetLevelSixApplySingleUnitFlagOk returns a tuple with the LevelSixApplySingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixApplySingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixApplySingleUnitFlag.Get(), o.LevelSixApplySingleUnitFlag.IsSet()
}

// HasLevelSixApplySingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixApplySingleUnitFlag() bool {
	if o != nil && o.LevelSixApplySingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixApplySingleUnitFlag gets a reference to the given NullableBool and assigns it to the LevelSixApplySingleUnitFlag field.
func (o *TaxCode) SetLevelSixApplySingleUnitFlag(v bool) {
	o.LevelSixApplySingleUnitFlag.Set(&v)
}

// SetLevelSixApplySingleUnitFlagNil sets the value for LevelSixApplySingleUnitFlag to be an explicit nil
func (o *TaxCode) SetLevelSixApplySingleUnitFlagNil() {
	o.LevelSixApplySingleUnitFlag.Set(nil)
}

// UnsetLevelSixApplySingleUnitFlag ensures that no value is present for LevelSixApplySingleUnitFlag, not even an explicit nil
func (o *TaxCode) UnsetLevelSixApplySingleUnitFlag() {
	o.LevelSixApplySingleUnitFlag.Unset()
}

// GetLevelSixApplySingleUnitMin returns the LevelSixApplySingleUnitMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixApplySingleUnitMin() float64 {
	if o == nil || IsNil(o.LevelSixApplySingleUnitMin.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixApplySingleUnitMin.Get()
}

// GetLevelSixApplySingleUnitMinOk returns a tuple with the LevelSixApplySingleUnitMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixApplySingleUnitMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixApplySingleUnitMin.Get(), o.LevelSixApplySingleUnitMin.IsSet()
}

// HasLevelSixApplySingleUnitMin returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixApplySingleUnitMin() bool {
	if o != nil && o.LevelSixApplySingleUnitMin.IsSet() {
		return true
	}

	return false
}

// SetLevelSixApplySingleUnitMin gets a reference to the given NullableFloat64 and assigns it to the LevelSixApplySingleUnitMin field.
func (o *TaxCode) SetLevelSixApplySingleUnitMin(v float64) {
	o.LevelSixApplySingleUnitMin.Set(&v)
}

// SetLevelSixApplySingleUnitMinNil sets the value for LevelSixApplySingleUnitMin to be an explicit nil
func (o *TaxCode) SetLevelSixApplySingleUnitMinNil() {
	o.LevelSixApplySingleUnitMin.Set(nil)
}

// UnsetLevelSixApplySingleUnitMin ensures that no value is present for LevelSixApplySingleUnitMin, not even an explicit nil
func (o *TaxCode) UnsetLevelSixApplySingleUnitMin() {
	o.LevelSixApplySingleUnitMin.Unset()
}

// GetLevelSixApplySingleUnitMax returns the LevelSixApplySingleUnitMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetLevelSixApplySingleUnitMax() float64 {
	if o == nil || IsNil(o.LevelSixApplySingleUnitMax.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixApplySingleUnitMax.Get()
}

// GetLevelSixApplySingleUnitMaxOk returns a tuple with the LevelSixApplySingleUnitMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetLevelSixApplySingleUnitMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixApplySingleUnitMax.Get(), o.LevelSixApplySingleUnitMax.IsSet()
}

// HasLevelSixApplySingleUnitMax returns a boolean if a field has been set.
func (o *TaxCode) HasLevelSixApplySingleUnitMax() bool {
	if o != nil && o.LevelSixApplySingleUnitMax.IsSet() {
		return true
	}

	return false
}

// SetLevelSixApplySingleUnitMax gets a reference to the given NullableFloat64 and assigns it to the LevelSixApplySingleUnitMax field.
func (o *TaxCode) SetLevelSixApplySingleUnitMax(v float64) {
	o.LevelSixApplySingleUnitMax.Set(&v)
}

// SetLevelSixApplySingleUnitMaxNil sets the value for LevelSixApplySingleUnitMax to be an explicit nil
func (o *TaxCode) SetLevelSixApplySingleUnitMaxNil() {
	o.LevelSixApplySingleUnitMax.Set(nil)
}

// UnsetLevelSixApplySingleUnitMax ensures that no value is present for LevelSixApplySingleUnitMax, not even an explicit nil
func (o *TaxCode) UnsetLevelSixApplySingleUnitMax() {
	o.LevelSixApplySingleUnitMax.Unset()
}

// GetWorkRoleIds returns the WorkRoleIds field value if set, zero value otherwise.
func (o *TaxCode) GetWorkRoleIds() []int32 {
	if o == nil || IsNil(o.WorkRoleIds) {
		var ret []int32
		return ret
	}
	return o.WorkRoleIds
}

// GetWorkRoleIdsOk returns a tuple with the WorkRoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetWorkRoleIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.WorkRoleIds) {
		return nil, false
	}
	return o.WorkRoleIds, true
}

// HasWorkRoleIds returns a boolean if a field has been set.
func (o *TaxCode) HasWorkRoleIds() bool {
	if o != nil && !IsNil(o.WorkRoleIds) {
		return true
	}

	return false
}

// SetWorkRoleIds gets a reference to the given []int32 and assigns it to the WorkRoleIds field.
func (o *TaxCode) SetWorkRoleIds(v []int32) {
	o.WorkRoleIds = v
}

// GetAddAllWorkRoles returns the AddAllWorkRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetAddAllWorkRoles() bool {
	if o == nil || IsNil(o.AddAllWorkRoles.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllWorkRoles.Get()
}

// GetAddAllWorkRolesOk returns a tuple with the AddAllWorkRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetAddAllWorkRolesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllWorkRoles.Get(), o.AddAllWorkRoles.IsSet()
}

// HasAddAllWorkRoles returns a boolean if a field has been set.
func (o *TaxCode) HasAddAllWorkRoles() bool {
	if o != nil && o.AddAllWorkRoles.IsSet() {
		return true
	}

	return false
}

// SetAddAllWorkRoles gets a reference to the given NullableBool and assigns it to the AddAllWorkRoles field.
func (o *TaxCode) SetAddAllWorkRoles(v bool) {
	o.AddAllWorkRoles.Set(&v)
}

// SetAddAllWorkRolesNil sets the value for AddAllWorkRoles to be an explicit nil
func (o *TaxCode) SetAddAllWorkRolesNil() {
	o.AddAllWorkRoles.Set(nil)
}

// UnsetAddAllWorkRoles ensures that no value is present for AddAllWorkRoles, not even an explicit nil
func (o *TaxCode) UnsetAddAllWorkRoles() {
	o.AddAllWorkRoles.Unset()
}

// GetRemoveAllWorkRoles returns the RemoveAllWorkRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetRemoveAllWorkRoles() bool {
	if o == nil || IsNil(o.RemoveAllWorkRoles.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllWorkRoles.Get()
}

// GetRemoveAllWorkRolesOk returns a tuple with the RemoveAllWorkRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetRemoveAllWorkRolesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllWorkRoles.Get(), o.RemoveAllWorkRoles.IsSet()
}

// HasRemoveAllWorkRoles returns a boolean if a field has been set.
func (o *TaxCode) HasRemoveAllWorkRoles() bool {
	if o != nil && o.RemoveAllWorkRoles.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllWorkRoles gets a reference to the given NullableBool and assigns it to the RemoveAllWorkRoles field.
func (o *TaxCode) SetRemoveAllWorkRoles(v bool) {
	o.RemoveAllWorkRoles.Set(&v)
}

// SetRemoveAllWorkRolesNil sets the value for RemoveAllWorkRoles to be an explicit nil
func (o *TaxCode) SetRemoveAllWorkRolesNil() {
	o.RemoveAllWorkRoles.Set(nil)
}

// UnsetRemoveAllWorkRoles ensures that no value is present for RemoveAllWorkRoles, not even an explicit nil
func (o *TaxCode) UnsetRemoveAllWorkRoles() {
	o.RemoveAllWorkRoles.Unset()
}

// GetExpenseTypeIds returns the ExpenseTypeIds field value if set, zero value otherwise.
func (o *TaxCode) GetExpenseTypeIds() []int32 {
	if o == nil || IsNil(o.ExpenseTypeIds) {
		var ret []int32
		return ret
	}
	return o.ExpenseTypeIds
}

// GetExpenseTypeIdsOk returns a tuple with the ExpenseTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetExpenseTypeIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExpenseTypeIds) {
		return nil, false
	}
	return o.ExpenseTypeIds, true
}

// HasExpenseTypeIds returns a boolean if a field has been set.
func (o *TaxCode) HasExpenseTypeIds() bool {
	if o != nil && !IsNil(o.ExpenseTypeIds) {
		return true
	}

	return false
}

// SetExpenseTypeIds gets a reference to the given []int32 and assigns it to the ExpenseTypeIds field.
func (o *TaxCode) SetExpenseTypeIds(v []int32) {
	o.ExpenseTypeIds = v
}

// GetAddAllExpenseTypes returns the AddAllExpenseTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetAddAllExpenseTypes() bool {
	if o == nil || IsNil(o.AddAllExpenseTypes.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllExpenseTypes.Get()
}

// GetAddAllExpenseTypesOk returns a tuple with the AddAllExpenseTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetAddAllExpenseTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllExpenseTypes.Get(), o.AddAllExpenseTypes.IsSet()
}

// HasAddAllExpenseTypes returns a boolean if a field has been set.
func (o *TaxCode) HasAddAllExpenseTypes() bool {
	if o != nil && o.AddAllExpenseTypes.IsSet() {
		return true
	}

	return false
}

// SetAddAllExpenseTypes gets a reference to the given NullableBool and assigns it to the AddAllExpenseTypes field.
func (o *TaxCode) SetAddAllExpenseTypes(v bool) {
	o.AddAllExpenseTypes.Set(&v)
}

// SetAddAllExpenseTypesNil sets the value for AddAllExpenseTypes to be an explicit nil
func (o *TaxCode) SetAddAllExpenseTypesNil() {
	o.AddAllExpenseTypes.Set(nil)
}

// UnsetAddAllExpenseTypes ensures that no value is present for AddAllExpenseTypes, not even an explicit nil
func (o *TaxCode) UnsetAddAllExpenseTypes() {
	o.AddAllExpenseTypes.Unset()
}

// GetRemoveAllExpenseTypes returns the RemoveAllExpenseTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetRemoveAllExpenseTypes() bool {
	if o == nil || IsNil(o.RemoveAllExpenseTypes.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllExpenseTypes.Get()
}

// GetRemoveAllExpenseTypesOk returns a tuple with the RemoveAllExpenseTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetRemoveAllExpenseTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllExpenseTypes.Get(), o.RemoveAllExpenseTypes.IsSet()
}

// HasRemoveAllExpenseTypes returns a boolean if a field has been set.
func (o *TaxCode) HasRemoveAllExpenseTypes() bool {
	if o != nil && o.RemoveAllExpenseTypes.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllExpenseTypes gets a reference to the given NullableBool and assigns it to the RemoveAllExpenseTypes field.
func (o *TaxCode) SetRemoveAllExpenseTypes(v bool) {
	o.RemoveAllExpenseTypes.Set(&v)
}

// SetRemoveAllExpenseTypesNil sets the value for RemoveAllExpenseTypes to be an explicit nil
func (o *TaxCode) SetRemoveAllExpenseTypesNil() {
	o.RemoveAllExpenseTypes.Set(nil)
}

// UnsetRemoveAllExpenseTypes ensures that no value is present for RemoveAllExpenseTypes, not even an explicit nil
func (o *TaxCode) UnsetRemoveAllExpenseTypes() {
	o.RemoveAllExpenseTypes.Unset()
}

// GetProductTypeIds returns the ProductTypeIds field value if set, zero value otherwise.
func (o *TaxCode) GetProductTypeIds() []int32 {
	if o == nil || IsNil(o.ProductTypeIds) {
		var ret []int32
		return ret
	}
	return o.ProductTypeIds
}

// GetProductTypeIdsOk returns a tuple with the ProductTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetProductTypeIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ProductTypeIds) {
		return nil, false
	}
	return o.ProductTypeIds, true
}

// HasProductTypeIds returns a boolean if a field has been set.
func (o *TaxCode) HasProductTypeIds() bool {
	if o != nil && !IsNil(o.ProductTypeIds) {
		return true
	}

	return false
}

// SetProductTypeIds gets a reference to the given []int32 and assigns it to the ProductTypeIds field.
func (o *TaxCode) SetProductTypeIds(v []int32) {
	o.ProductTypeIds = v
}

// GetAddAllProductTypes returns the AddAllProductTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetAddAllProductTypes() bool {
	if o == nil || IsNil(o.AddAllProductTypes.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllProductTypes.Get()
}

// GetAddAllProductTypesOk returns a tuple with the AddAllProductTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetAddAllProductTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllProductTypes.Get(), o.AddAllProductTypes.IsSet()
}

// HasAddAllProductTypes returns a boolean if a field has been set.
func (o *TaxCode) HasAddAllProductTypes() bool {
	if o != nil && o.AddAllProductTypes.IsSet() {
		return true
	}

	return false
}

// SetAddAllProductTypes gets a reference to the given NullableBool and assigns it to the AddAllProductTypes field.
func (o *TaxCode) SetAddAllProductTypes(v bool) {
	o.AddAllProductTypes.Set(&v)
}

// SetAddAllProductTypesNil sets the value for AddAllProductTypes to be an explicit nil
func (o *TaxCode) SetAddAllProductTypesNil() {
	o.AddAllProductTypes.Set(nil)
}

// UnsetAddAllProductTypes ensures that no value is present for AddAllProductTypes, not even an explicit nil
func (o *TaxCode) UnsetAddAllProductTypes() {
	o.AddAllProductTypes.Unset()
}

// GetRemoveAllProductTypes returns the RemoveAllProductTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCode) GetRemoveAllProductTypes() bool {
	if o == nil || IsNil(o.RemoveAllProductTypes.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllProductTypes.Get()
}

// GetRemoveAllProductTypesOk returns a tuple with the RemoveAllProductTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCode) GetRemoveAllProductTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllProductTypes.Get(), o.RemoveAllProductTypes.IsSet()
}

// HasRemoveAllProductTypes returns a boolean if a field has been set.
func (o *TaxCode) HasRemoveAllProductTypes() bool {
	if o != nil && o.RemoveAllProductTypes.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllProductTypes gets a reference to the given NullableBool and assigns it to the RemoveAllProductTypes field.
func (o *TaxCode) SetRemoveAllProductTypes(v bool) {
	o.RemoveAllProductTypes.Set(&v)
}

// SetRemoveAllProductTypesNil sets the value for RemoveAllProductTypes to be an explicit nil
func (o *TaxCode) SetRemoveAllProductTypesNil() {
	o.RemoveAllProductTypes.Set(nil)
}

// UnsetRemoveAllProductTypes ensures that no value is present for RemoveAllProductTypes, not even an explicit nil
func (o *TaxCode) UnsetRemoveAllProductTypes() {
	o.RemoveAllProductTypes.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TaxCode) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCode) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TaxCode) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TaxCode) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TaxCode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["identifier"] = o.Identifier
	toSerialize["description"] = o.Description
	toSerialize["invoiceCaption"] = o.InvoiceCaption
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	toSerialize["effectiveDate"] = o.EffectiveDate
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.DisplayOnInvoiceFlag.IsSet() {
		toSerialize["displayOnInvoiceFlag"] = o.DisplayOnInvoiceFlag.Get()
	}
	if o.CanadaCalculateGSTFlag.IsSet() {
		toSerialize["canadaCalculateGSTFlag"] = o.CanadaCalculateGSTFlag.Get()
	}
	if !IsNil(o.CancelDate) {
		toSerialize["cancelDate"] = o.CancelDate
	}
	if o.LevelOneRate.IsSet() {
		toSerialize["levelOneRate"] = o.LevelOneRate.Get()
	}
	if o.LevelOneRateType.IsSet() {
		toSerialize["levelOneRateType"] = o.LevelOneRateType.Get()
	}
	if o.LevelOneTaxableMax.IsSet() {
		toSerialize["levelOneTaxableMax"] = o.LevelOneTaxableMax.Get()
	}
	if !IsNil(o.LevelOneCaption) {
		toSerialize["levelOneCaption"] = o.LevelOneCaption
	}
	if !IsNil(o.LevelOneTaxCodeXref) {
		toSerialize["levelOneTaxCodeXref"] = o.LevelOneTaxCodeXref
	}
	if !IsNil(o.LevelOneAgencyXref) {
		toSerialize["levelOneAgencyXref"] = o.LevelOneAgencyXref
	}
	if o.LevelOneServicesFlag.IsSet() {
		toSerialize["levelOneServicesFlag"] = o.LevelOneServicesFlag.Get()
	}
	if o.LevelOneExpensesFlag.IsSet() {
		toSerialize["levelOneExpensesFlag"] = o.LevelOneExpensesFlag.Get()
	}
	if o.LevelOneProductsFlag.IsSet() {
		toSerialize["levelOneProductsFlag"] = o.LevelOneProductsFlag.Get()
	}
	if o.LevelOneApplySingleUnitFlag.IsSet() {
		toSerialize["levelOneApplySingleUnitFlag"] = o.LevelOneApplySingleUnitFlag.Get()
	}
	if o.LevelOneApplySingleUnitMin.IsSet() {
		toSerialize["levelOneApplySingleUnitMin"] = o.LevelOneApplySingleUnitMin.Get()
	}
	if o.LevelOneApplySingleUnitMax.IsSet() {
		toSerialize["levelOneApplySingleUnitMax"] = o.LevelOneApplySingleUnitMax.Get()
	}
	if o.LevelTwoRate.IsSet() {
		toSerialize["levelTwoRate"] = o.LevelTwoRate.Get()
	}
	if o.LevelTwoRateType.IsSet() {
		toSerialize["levelTwoRateType"] = o.LevelTwoRateType.Get()
	}
	if o.LevelTwoTaxableMax.IsSet() {
		toSerialize["levelTwoTaxableMax"] = o.LevelTwoTaxableMax.Get()
	}
	if !IsNil(o.LevelTwoCaption) {
		toSerialize["levelTwoCaption"] = o.LevelTwoCaption
	}
	if !IsNil(o.LevelTwoTaxCodeXref) {
		toSerialize["levelTwoTaxCodeXref"] = o.LevelTwoTaxCodeXref
	}
	if !IsNil(o.LevelTwoAgencyXref) {
		toSerialize["levelTwoAgencyXref"] = o.LevelTwoAgencyXref
	}
	if o.LevelTwoServicesFlag.IsSet() {
		toSerialize["levelTwoServicesFlag"] = o.LevelTwoServicesFlag.Get()
	}
	if o.LevelTwoExpensesFlag.IsSet() {
		toSerialize["levelTwoExpensesFlag"] = o.LevelTwoExpensesFlag.Get()
	}
	if o.LevelTwoProductsFlag.IsSet() {
		toSerialize["levelTwoProductsFlag"] = o.LevelTwoProductsFlag.Get()
	}
	if o.LevelTwoApplySingleUnitFlag.IsSet() {
		toSerialize["levelTwoApplySingleUnitFlag"] = o.LevelTwoApplySingleUnitFlag.Get()
	}
	if o.LevelTwoApplySingleUnitMin.IsSet() {
		toSerialize["levelTwoApplySingleUnitMin"] = o.LevelTwoApplySingleUnitMin.Get()
	}
	if o.LevelTwoApplySingleUnitMax.IsSet() {
		toSerialize["levelTwoApplySingleUnitMax"] = o.LevelTwoApplySingleUnitMax.Get()
	}
	if o.LevelThreeRate.IsSet() {
		toSerialize["levelThreeRate"] = o.LevelThreeRate.Get()
	}
	if o.LevelThreeRateType.IsSet() {
		toSerialize["levelThreeRateType"] = o.LevelThreeRateType.Get()
	}
	if o.LevelThreeTaxableMax.IsSet() {
		toSerialize["levelThreeTaxableMax"] = o.LevelThreeTaxableMax.Get()
	}
	if !IsNil(o.LevelThreeCaption) {
		toSerialize["levelThreeCaption"] = o.LevelThreeCaption
	}
	if !IsNil(o.LevelThreeTaxCodeXref) {
		toSerialize["levelThreeTaxCodeXref"] = o.LevelThreeTaxCodeXref
	}
	if !IsNil(o.LevelThreeAgencyXref) {
		toSerialize["levelThreeAgencyXref"] = o.LevelThreeAgencyXref
	}
	if o.LevelThreeServicesFlag.IsSet() {
		toSerialize["levelThreeServicesFlag"] = o.LevelThreeServicesFlag.Get()
	}
	if o.LevelThreeExpensesFlag.IsSet() {
		toSerialize["levelThreeExpensesFlag"] = o.LevelThreeExpensesFlag.Get()
	}
	if o.LevelThreeProductsFlag.IsSet() {
		toSerialize["levelThreeProductsFlag"] = o.LevelThreeProductsFlag.Get()
	}
	if o.LevelThreeApplySingleUnitFlag.IsSet() {
		toSerialize["levelThreeApplySingleUnitFlag"] = o.LevelThreeApplySingleUnitFlag.Get()
	}
	if o.LevelThreeApplySingleUnitMin.IsSet() {
		toSerialize["levelThreeApplySingleUnitMin"] = o.LevelThreeApplySingleUnitMin.Get()
	}
	if o.LevelThreeApplySingleUnitMax.IsSet() {
		toSerialize["levelThreeApplySingleUnitMax"] = o.LevelThreeApplySingleUnitMax.Get()
	}
	if o.LevelFourRate.IsSet() {
		toSerialize["levelFourRate"] = o.LevelFourRate.Get()
	}
	if o.LevelFourRateType.IsSet() {
		toSerialize["levelFourRateType"] = o.LevelFourRateType.Get()
	}
	if o.LevelFourTaxableMax.IsSet() {
		toSerialize["levelFourTaxableMax"] = o.LevelFourTaxableMax.Get()
	}
	if !IsNil(o.LevelFourCaption) {
		toSerialize["levelFourCaption"] = o.LevelFourCaption
	}
	if !IsNil(o.LevelFourTaxCodeXref) {
		toSerialize["levelFourTaxCodeXref"] = o.LevelFourTaxCodeXref
	}
	if !IsNil(o.LevelFourAgencyXref) {
		toSerialize["levelFourAgencyXref"] = o.LevelFourAgencyXref
	}
	if o.LevelFourServicesFlag.IsSet() {
		toSerialize["levelFourServicesFlag"] = o.LevelFourServicesFlag.Get()
	}
	if o.LevelFourExpensesFlag.IsSet() {
		toSerialize["levelFourExpensesFlag"] = o.LevelFourExpensesFlag.Get()
	}
	if o.LevelFourProductsFlag.IsSet() {
		toSerialize["levelFourProductsFlag"] = o.LevelFourProductsFlag.Get()
	}
	if o.LevelFourApplySingleUnitFlag.IsSet() {
		toSerialize["levelFourApplySingleUnitFlag"] = o.LevelFourApplySingleUnitFlag.Get()
	}
	if o.LevelFourApplySingleUnitMin.IsSet() {
		toSerialize["levelFourApplySingleUnitMin"] = o.LevelFourApplySingleUnitMin.Get()
	}
	if o.LevelFourApplySingleUnitMax.IsSet() {
		toSerialize["levelFourApplySingleUnitMax"] = o.LevelFourApplySingleUnitMax.Get()
	}
	if o.LevelFiveRate.IsSet() {
		toSerialize["levelFiveRate"] = o.LevelFiveRate.Get()
	}
	if o.LevelFiveRateType.IsSet() {
		toSerialize["levelFiveRateType"] = o.LevelFiveRateType.Get()
	}
	if o.LevelFiveTaxableMax.IsSet() {
		toSerialize["levelFiveTaxableMax"] = o.LevelFiveTaxableMax.Get()
	}
	if !IsNil(o.LevelFiveCaption) {
		toSerialize["levelFiveCaption"] = o.LevelFiveCaption
	}
	if !IsNil(o.LevelFiveTaxCodeXref) {
		toSerialize["levelFiveTaxCodeXref"] = o.LevelFiveTaxCodeXref
	}
	if !IsNil(o.LevelFiveAgencyXref) {
		toSerialize["levelFiveAgencyXref"] = o.LevelFiveAgencyXref
	}
	if o.LevelFiveServicesFlag.IsSet() {
		toSerialize["levelFiveServicesFlag"] = o.LevelFiveServicesFlag.Get()
	}
	if o.LevelFiveExpensesFlag.IsSet() {
		toSerialize["levelFiveExpensesFlag"] = o.LevelFiveExpensesFlag.Get()
	}
	if o.LevelFiveProductsFlag.IsSet() {
		toSerialize["levelFiveProductsFlag"] = o.LevelFiveProductsFlag.Get()
	}
	if o.LevelFiveApplySingleUnitFlag.IsSet() {
		toSerialize["levelFiveApplySingleUnitFlag"] = o.LevelFiveApplySingleUnitFlag.Get()
	}
	if o.LevelFiveApplySingleUnitMin.IsSet() {
		toSerialize["levelFiveApplySingleUnitMin"] = o.LevelFiveApplySingleUnitMin.Get()
	}
	if o.LevelFiveApplySingleUnitMax.IsSet() {
		toSerialize["levelFiveApplySingleUnitMax"] = o.LevelFiveApplySingleUnitMax.Get()
	}
	if o.LevelSixRate.IsSet() {
		toSerialize["levelSixRate"] = o.LevelSixRate.Get()
	}
	if o.LevelSixRateType.IsSet() {
		toSerialize["levelSixRateType"] = o.LevelSixRateType.Get()
	}
	if o.LevelSixTaxableMax.IsSet() {
		toSerialize["levelSixTaxableMax"] = o.LevelSixTaxableMax.Get()
	}
	if !IsNil(o.LevelSixCaption) {
		toSerialize["levelSixCaption"] = o.LevelSixCaption
	}
	if !IsNil(o.LevelSixTaxCodeXref) {
		toSerialize["levelSixTaxCodeXref"] = o.LevelSixTaxCodeXref
	}
	if !IsNil(o.LevelSixAgencyXref) {
		toSerialize["levelSixAgencyXref"] = o.LevelSixAgencyXref
	}
	if o.LevelSixServicesFlag.IsSet() {
		toSerialize["levelSixServicesFlag"] = o.LevelSixServicesFlag.Get()
	}
	if o.LevelSixExpensesFlag.IsSet() {
		toSerialize["levelSixExpensesFlag"] = o.LevelSixExpensesFlag.Get()
	}
	if o.LevelSixProductsFlag.IsSet() {
		toSerialize["levelSixProductsFlag"] = o.LevelSixProductsFlag.Get()
	}
	if o.LevelSixApplySingleUnitFlag.IsSet() {
		toSerialize["levelSixApplySingleUnitFlag"] = o.LevelSixApplySingleUnitFlag.Get()
	}
	if o.LevelSixApplySingleUnitMin.IsSet() {
		toSerialize["levelSixApplySingleUnitMin"] = o.LevelSixApplySingleUnitMin.Get()
	}
	if o.LevelSixApplySingleUnitMax.IsSet() {
		toSerialize["levelSixApplySingleUnitMax"] = o.LevelSixApplySingleUnitMax.Get()
	}
	if !IsNil(o.WorkRoleIds) {
		toSerialize["workRoleIds"] = o.WorkRoleIds
	}
	if o.AddAllWorkRoles.IsSet() {
		toSerialize["addAllWorkRoles"] = o.AddAllWorkRoles.Get()
	}
	if o.RemoveAllWorkRoles.IsSet() {
		toSerialize["removeAllWorkRoles"] = o.RemoveAllWorkRoles.Get()
	}
	if !IsNil(o.ExpenseTypeIds) {
		toSerialize["expenseTypeIds"] = o.ExpenseTypeIds
	}
	if o.AddAllExpenseTypes.IsSet() {
		toSerialize["addAllExpenseTypes"] = o.AddAllExpenseTypes.Get()
	}
	if o.RemoveAllExpenseTypes.IsSet() {
		toSerialize["removeAllExpenseTypes"] = o.RemoveAllExpenseTypes.Get()
	}
	if !IsNil(o.ProductTypeIds) {
		toSerialize["productTypeIds"] = o.ProductTypeIds
	}
	if o.AddAllProductTypes.IsSet() {
		toSerialize["addAllProductTypes"] = o.AddAllProductTypes.Get()
	}
	if o.RemoveAllProductTypes.IsSet() {
		toSerialize["removeAllProductTypes"] = o.RemoveAllProductTypes.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TaxCode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"description",
		"invoiceCaption",
		"effectiveDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxCode := _TaxCode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxCode)

	if err != nil {
		return err
	}

	*o = TaxCode(varTaxCode)

	return err
}

type NullableTaxCode struct {
	value *TaxCode
	isSet bool
}

func (v NullableTaxCode) Get() *TaxCode {
	return v.value
}

func (v *NullableTaxCode) Set(val *TaxCode) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxCode) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxCode(val *TaxCode) *NullableTaxCode {
	return &NullableTaxCode{value: val, isSet: true}
}

func (v NullableTaxCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
