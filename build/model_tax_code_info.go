/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TaxCodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxCodeInfo{}

// TaxCodeInfo struct for TaxCodeInfo
type TaxCodeInfo struct {
	Id             *int32             `json:"id,omitempty"`
	Identifier     *string            `json:"identifier,omitempty"`
	Description    *string            `json:"description,omitempty"`
	EffectiveDate  *string            `json:"effectiveDate,omitempty"`
	CancelDate     *string            `json:"cancelDate,omitempty"`
	DefaultFlag    NullableBool       `json:"defaultFlag,omitempty"`
	LevelOneRate   NullableFloat64    `json:"levelOneRate,omitempty"`
	LevelTwoRate   NullableFloat64    `json:"levelTwoRate,omitempty"`
	LevelThreeRate NullableFloat64    `json:"levelThreeRate,omitempty"`
	LevelFourRate  NullableFloat64    `json:"levelFourRate,omitempty"`
	LevelFiveRate  NullableFloat64    `json:"levelFiveRate,omitempty"`
	LevelSixRate   NullableFloat64    `json:"levelSixRate,omitempty"`
	Info           *map[string]string `json:"_info,omitempty"`
}

// NewTaxCodeInfo instantiates a new TaxCodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxCodeInfo() *TaxCodeInfo {
	this := TaxCodeInfo{}
	return &this
}

// NewTaxCodeInfoWithDefaults instantiates a new TaxCodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxCodeInfoWithDefaults() *TaxCodeInfo {
	this := TaxCodeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxCodeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxCodeInfo) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *TaxCodeInfo) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeInfo) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *TaxCodeInfo) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaxCodeInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaxCodeInfo) SetDescription(v string) {
	o.Description = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *TaxCodeInfo) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeInfo) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *TaxCodeInfo) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetCancelDate returns the CancelDate field value if set, zero value otherwise.
func (o *TaxCodeInfo) GetCancelDate() string {
	if o == nil || IsNil(o.CancelDate) {
		var ret string
		return ret
	}
	return *o.CancelDate
}

// GetCancelDateOk returns a tuple with the CancelDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeInfo) GetCancelDateOk() (*string, bool) {
	if o == nil || IsNil(o.CancelDate) {
		return nil, false
	}
	return o.CancelDate, true
}

// HasCancelDate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasCancelDate() bool {
	if o != nil && !IsNil(o.CancelDate) {
		return true
	}

	return false
}

// SetCancelDate gets a reference to the given string and assigns it to the CancelDate field.
func (o *TaxCodeInfo) SetCancelDate(v string) {
	o.CancelDate = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *TaxCodeInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *TaxCodeInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *TaxCodeInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetLevelOneRate returns the LevelOneRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetLevelOneRate() float64 {
	if o == nil || IsNil(o.LevelOneRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelOneRate.Get()
}

// GetLevelOneRateOk returns a tuple with the LevelOneRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetLevelOneRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOneRate.Get(), o.LevelOneRate.IsSet()
}

// HasLevelOneRate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasLevelOneRate() bool {
	if o != nil && o.LevelOneRate.IsSet() {
		return true
	}

	return false
}

// SetLevelOneRate gets a reference to the given NullableFloat64 and assigns it to the LevelOneRate field.
func (o *TaxCodeInfo) SetLevelOneRate(v float64) {
	o.LevelOneRate.Set(&v)
}

// SetLevelOneRateNil sets the value for LevelOneRate to be an explicit nil
func (o *TaxCodeInfo) SetLevelOneRateNil() {
	o.LevelOneRate.Set(nil)
}

// UnsetLevelOneRate ensures that no value is present for LevelOneRate, not even an explicit nil
func (o *TaxCodeInfo) UnsetLevelOneRate() {
	o.LevelOneRate.Unset()
}

// GetLevelTwoRate returns the LevelTwoRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetLevelTwoRate() float64 {
	if o == nil || IsNil(o.LevelTwoRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelTwoRate.Get()
}

// GetLevelTwoRateOk returns a tuple with the LevelTwoRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetLevelTwoRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwoRate.Get(), o.LevelTwoRate.IsSet()
}

// HasLevelTwoRate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasLevelTwoRate() bool {
	if o != nil && o.LevelTwoRate.IsSet() {
		return true
	}

	return false
}

// SetLevelTwoRate gets a reference to the given NullableFloat64 and assigns it to the LevelTwoRate field.
func (o *TaxCodeInfo) SetLevelTwoRate(v float64) {
	o.LevelTwoRate.Set(&v)
}

// SetLevelTwoRateNil sets the value for LevelTwoRate to be an explicit nil
func (o *TaxCodeInfo) SetLevelTwoRateNil() {
	o.LevelTwoRate.Set(nil)
}

// UnsetLevelTwoRate ensures that no value is present for LevelTwoRate, not even an explicit nil
func (o *TaxCodeInfo) UnsetLevelTwoRate() {
	o.LevelTwoRate.Unset()
}

// GetLevelThreeRate returns the LevelThreeRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetLevelThreeRate() float64 {
	if o == nil || IsNil(o.LevelThreeRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelThreeRate.Get()
}

// GetLevelThreeRateOk returns a tuple with the LevelThreeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetLevelThreeRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThreeRate.Get(), o.LevelThreeRate.IsSet()
}

// HasLevelThreeRate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasLevelThreeRate() bool {
	if o != nil && o.LevelThreeRate.IsSet() {
		return true
	}

	return false
}

// SetLevelThreeRate gets a reference to the given NullableFloat64 and assigns it to the LevelThreeRate field.
func (o *TaxCodeInfo) SetLevelThreeRate(v float64) {
	o.LevelThreeRate.Set(&v)
}

// SetLevelThreeRateNil sets the value for LevelThreeRate to be an explicit nil
func (o *TaxCodeInfo) SetLevelThreeRateNil() {
	o.LevelThreeRate.Set(nil)
}

// UnsetLevelThreeRate ensures that no value is present for LevelThreeRate, not even an explicit nil
func (o *TaxCodeInfo) UnsetLevelThreeRate() {
	o.LevelThreeRate.Unset()
}

// GetLevelFourRate returns the LevelFourRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetLevelFourRate() float64 {
	if o == nil || IsNil(o.LevelFourRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFourRate.Get()
}

// GetLevelFourRateOk returns a tuple with the LevelFourRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetLevelFourRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFourRate.Get(), o.LevelFourRate.IsSet()
}

// HasLevelFourRate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasLevelFourRate() bool {
	if o != nil && o.LevelFourRate.IsSet() {
		return true
	}

	return false
}

// SetLevelFourRate gets a reference to the given NullableFloat64 and assigns it to the LevelFourRate field.
func (o *TaxCodeInfo) SetLevelFourRate(v float64) {
	o.LevelFourRate.Set(&v)
}

// SetLevelFourRateNil sets the value for LevelFourRate to be an explicit nil
func (o *TaxCodeInfo) SetLevelFourRateNil() {
	o.LevelFourRate.Set(nil)
}

// UnsetLevelFourRate ensures that no value is present for LevelFourRate, not even an explicit nil
func (o *TaxCodeInfo) UnsetLevelFourRate() {
	o.LevelFourRate.Unset()
}

// GetLevelFiveRate returns the LevelFiveRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetLevelFiveRate() float64 {
	if o == nil || IsNil(o.LevelFiveRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelFiveRate.Get()
}

// GetLevelFiveRateOk returns a tuple with the LevelFiveRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetLevelFiveRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFiveRate.Get(), o.LevelFiveRate.IsSet()
}

// HasLevelFiveRate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasLevelFiveRate() bool {
	if o != nil && o.LevelFiveRate.IsSet() {
		return true
	}

	return false
}

// SetLevelFiveRate gets a reference to the given NullableFloat64 and assigns it to the LevelFiveRate field.
func (o *TaxCodeInfo) SetLevelFiveRate(v float64) {
	o.LevelFiveRate.Set(&v)
}

// SetLevelFiveRateNil sets the value for LevelFiveRate to be an explicit nil
func (o *TaxCodeInfo) SetLevelFiveRateNil() {
	o.LevelFiveRate.Set(nil)
}

// UnsetLevelFiveRate ensures that no value is present for LevelFiveRate, not even an explicit nil
func (o *TaxCodeInfo) UnsetLevelFiveRate() {
	o.LevelFiveRate.Unset()
}

// GetLevelSixRate returns the LevelSixRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeInfo) GetLevelSixRate() float64 {
	if o == nil || IsNil(o.LevelSixRate.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixRate.Get()
}

// GetLevelSixRateOk returns a tuple with the LevelSixRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeInfo) GetLevelSixRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixRate.Get(), o.LevelSixRate.IsSet()
}

// HasLevelSixRate returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasLevelSixRate() bool {
	if o != nil && o.LevelSixRate.IsSet() {
		return true
	}

	return false
}

// SetLevelSixRate gets a reference to the given NullableFloat64 and assigns it to the LevelSixRate field.
func (o *TaxCodeInfo) SetLevelSixRate(v float64) {
	o.LevelSixRate.Set(&v)
}

// SetLevelSixRateNil sets the value for LevelSixRate to be an explicit nil
func (o *TaxCodeInfo) SetLevelSixRateNil() {
	o.LevelSixRate.Set(nil)
}

// UnsetLevelSixRate ensures that no value is present for LevelSixRate, not even an explicit nil
func (o *TaxCodeInfo) UnsetLevelSixRate() {
	o.LevelSixRate.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TaxCodeInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TaxCodeInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TaxCodeInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TaxCodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxCodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.CancelDate) {
		toSerialize["cancelDate"] = o.CancelDate
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.LevelOneRate.IsSet() {
		toSerialize["levelOneRate"] = o.LevelOneRate.Get()
	}
	if o.LevelTwoRate.IsSet() {
		toSerialize["levelTwoRate"] = o.LevelTwoRate.Get()
	}
	if o.LevelThreeRate.IsSet() {
		toSerialize["levelThreeRate"] = o.LevelThreeRate.Get()
	}
	if o.LevelFourRate.IsSet() {
		toSerialize["levelFourRate"] = o.LevelFourRate.Get()
	}
	if o.LevelFiveRate.IsSet() {
		toSerialize["levelFiveRate"] = o.LevelFiveRate.Get()
	}
	if o.LevelSixRate.IsSet() {
		toSerialize["levelSixRate"] = o.LevelSixRate.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTaxCodeInfo struct {
	value *TaxCodeInfo
	isSet bool
}

func (v NullableTaxCodeInfo) Get() *TaxCodeInfo {
	return v.value
}

func (v *NullableTaxCodeInfo) Set(val *TaxCodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxCodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxCodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxCodeInfo(val *TaxCodeInfo) *NullableTaxCodeInfo {
	return &NullableTaxCodeInfo{value: val, isSet: true}
}

func (v NullableTaxCodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxCodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
