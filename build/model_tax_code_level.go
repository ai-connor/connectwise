/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TaxCodeLevel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxCodeLevel{}

// TaxCodeLevel struct for TaxCodeLevel
type TaxCodeLevel struct {
	Id         *int32          `json:"id,omitempty"`
	TaxLevel   *int32          `json:"taxLevel,omitempty"`
	TaxRate    NullableFloat64 `json:"taxRate"`
	RateType   NullableString  `json:"rateType"`
	TaxableMax NullableFloat64 `json:"taxableMax,omitempty"`
	//  Max length: 25;
	Caption *string `json:"caption,omitempty"`
	//  Max length: 50;
	TaxCodeXref *string `json:"taxCodeXref,omitempty"`
	//  Max length: 100;
	AgencyXref        *string            `json:"agencyXref,omitempty"`
	TaxServicesFlag   NullableBool       `json:"taxServicesFlag,omitempty"`
	TaxExpensesFlag   NullableBool       `json:"taxExpensesFlag,omitempty"`
	TaxProductsFlag   NullableBool       `json:"taxProductsFlag,omitempty"`
	SingleUnitFlag    NullableBool       `json:"singleUnitFlag,omitempty"`
	SingleUnitMinimum NullableFloat64    `json:"singleUnitMinimum,omitempty"`
	SingleUnitMaximum NullableFloat64    `json:"singleUnitMaximum,omitempty"`
	Info              *map[string]string `json:"_info,omitempty"`
}

type _TaxCodeLevel TaxCodeLevel

// NewTaxCodeLevel instantiates a new TaxCodeLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxCodeLevel(taxRate NullableFloat64, rateType NullableString) *TaxCodeLevel {
	this := TaxCodeLevel{}
	this.TaxRate = taxRate
	this.RateType = rateType
	return &this
}

// NewTaxCodeLevelWithDefaults instantiates a new TaxCodeLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxCodeLevelWithDefaults() *TaxCodeLevel {
	this := TaxCodeLevel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxCodeLevel) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeLevel) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxCodeLevel) SetId(v int32) {
	o.Id = &v
}

// GetTaxLevel returns the TaxLevel field value if set, zero value otherwise.
func (o *TaxCodeLevel) GetTaxLevel() int32 {
	if o == nil || IsNil(o.TaxLevel) {
		var ret int32
		return ret
	}
	return *o.TaxLevel
}

// GetTaxLevelOk returns a tuple with the TaxLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeLevel) GetTaxLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxLevel) {
		return nil, false
	}
	return o.TaxLevel, true
}

// HasTaxLevel returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasTaxLevel() bool {
	if o != nil && !IsNil(o.TaxLevel) {
		return true
	}

	return false
}

// SetTaxLevel gets a reference to the given int32 and assigns it to the TaxLevel field.
func (o *TaxCodeLevel) SetTaxLevel(v int32) {
	o.TaxLevel = &v
}

// GetTaxRate returns the TaxRate field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *TaxCodeLevel) GetTaxRate() float64 {
	if o == nil || o.TaxRate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.TaxRate.Get()
}

// GetTaxRateOk returns a tuple with the TaxRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRate.Get(), o.TaxRate.IsSet()
}

// SetTaxRate sets field value
func (o *TaxCodeLevel) SetTaxRate(v float64) {
	o.TaxRate.Set(&v)
}

// GetRateType returns the RateType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TaxCodeLevel) GetRateType() string {
	if o == nil || o.RateType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RateType.Get()
}

// GetRateTypeOk returns a tuple with the RateType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateType.Get(), o.RateType.IsSet()
}

// SetRateType sets field value
func (o *TaxCodeLevel) SetRateType(v string) {
	o.RateType.Set(&v)
}

// GetTaxableMax returns the TaxableMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetTaxableMax() float64 {
	if o == nil || IsNil(o.TaxableMax.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableMax.Get()
}

// GetTaxableMaxOk returns a tuple with the TaxableMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetTaxableMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableMax.Get(), o.TaxableMax.IsSet()
}

// HasTaxableMax returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasTaxableMax() bool {
	if o != nil && o.TaxableMax.IsSet() {
		return true
	}

	return false
}

// SetTaxableMax gets a reference to the given NullableFloat64 and assigns it to the TaxableMax field.
func (o *TaxCodeLevel) SetTaxableMax(v float64) {
	o.TaxableMax.Set(&v)
}

// SetTaxableMaxNil sets the value for TaxableMax to be an explicit nil
func (o *TaxCodeLevel) SetTaxableMaxNil() {
	o.TaxableMax.Set(nil)
}

// UnsetTaxableMax ensures that no value is present for TaxableMax, not even an explicit nil
func (o *TaxCodeLevel) UnsetTaxableMax() {
	o.TaxableMax.Unset()
}

// GetCaption returns the Caption field value if set, zero value otherwise.
func (o *TaxCodeLevel) GetCaption() string {
	if o == nil || IsNil(o.Caption) {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeLevel) GetCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.Caption) {
		return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasCaption() bool {
	if o != nil && !IsNil(o.Caption) {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
func (o *TaxCodeLevel) SetCaption(v string) {
	o.Caption = &v
}

// GetTaxCodeXref returns the TaxCodeXref field value if set, zero value otherwise.
func (o *TaxCodeLevel) GetTaxCodeXref() string {
	if o == nil || IsNil(o.TaxCodeXref) {
		var ret string
		return ret
	}
	return *o.TaxCodeXref
}

// GetTaxCodeXrefOk returns a tuple with the TaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeLevel) GetTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxCodeXref) {
		return nil, false
	}
	return o.TaxCodeXref, true
}

// HasTaxCodeXref returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasTaxCodeXref() bool {
	if o != nil && !IsNil(o.TaxCodeXref) {
		return true
	}

	return false
}

// SetTaxCodeXref gets a reference to the given string and assigns it to the TaxCodeXref field.
func (o *TaxCodeLevel) SetTaxCodeXref(v string) {
	o.TaxCodeXref = &v
}

// GetAgencyXref returns the AgencyXref field value if set, zero value otherwise.
func (o *TaxCodeLevel) GetAgencyXref() string {
	if o == nil || IsNil(o.AgencyXref) {
		var ret string
		return ret
	}
	return *o.AgencyXref
}

// GetAgencyXrefOk returns a tuple with the AgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeLevel) GetAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.AgencyXref) {
		return nil, false
	}
	return o.AgencyXref, true
}

// HasAgencyXref returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasAgencyXref() bool {
	if o != nil && !IsNil(o.AgencyXref) {
		return true
	}

	return false
}

// SetAgencyXref gets a reference to the given string and assigns it to the AgencyXref field.
func (o *TaxCodeLevel) SetAgencyXref(v string) {
	o.AgencyXref = &v
}

// GetTaxServicesFlag returns the TaxServicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetTaxServicesFlag() bool {
	if o == nil || IsNil(o.TaxServicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxServicesFlag.Get()
}

// GetTaxServicesFlagOk returns a tuple with the TaxServicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetTaxServicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxServicesFlag.Get(), o.TaxServicesFlag.IsSet()
}

// HasTaxServicesFlag returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasTaxServicesFlag() bool {
	if o != nil && o.TaxServicesFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxServicesFlag gets a reference to the given NullableBool and assigns it to the TaxServicesFlag field.
func (o *TaxCodeLevel) SetTaxServicesFlag(v bool) {
	o.TaxServicesFlag.Set(&v)
}

// SetTaxServicesFlagNil sets the value for TaxServicesFlag to be an explicit nil
func (o *TaxCodeLevel) SetTaxServicesFlagNil() {
	o.TaxServicesFlag.Set(nil)
}

// UnsetTaxServicesFlag ensures that no value is present for TaxServicesFlag, not even an explicit nil
func (o *TaxCodeLevel) UnsetTaxServicesFlag() {
	o.TaxServicesFlag.Unset()
}

// GetTaxExpensesFlag returns the TaxExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetTaxExpensesFlag() bool {
	if o == nil || IsNil(o.TaxExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxExpensesFlag.Get()
}

// GetTaxExpensesFlagOk returns a tuple with the TaxExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetTaxExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxExpensesFlag.Get(), o.TaxExpensesFlag.IsSet()
}

// HasTaxExpensesFlag returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasTaxExpensesFlag() bool {
	if o != nil && o.TaxExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxExpensesFlag gets a reference to the given NullableBool and assigns it to the TaxExpensesFlag field.
func (o *TaxCodeLevel) SetTaxExpensesFlag(v bool) {
	o.TaxExpensesFlag.Set(&v)
}

// SetTaxExpensesFlagNil sets the value for TaxExpensesFlag to be an explicit nil
func (o *TaxCodeLevel) SetTaxExpensesFlagNil() {
	o.TaxExpensesFlag.Set(nil)
}

// UnsetTaxExpensesFlag ensures that no value is present for TaxExpensesFlag, not even an explicit nil
func (o *TaxCodeLevel) UnsetTaxExpensesFlag() {
	o.TaxExpensesFlag.Unset()
}

// GetTaxProductsFlag returns the TaxProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetTaxProductsFlag() bool {
	if o == nil || IsNil(o.TaxProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxProductsFlag.Get()
}

// GetTaxProductsFlagOk returns a tuple with the TaxProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetTaxProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxProductsFlag.Get(), o.TaxProductsFlag.IsSet()
}

// HasTaxProductsFlag returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasTaxProductsFlag() bool {
	if o != nil && o.TaxProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxProductsFlag gets a reference to the given NullableBool and assigns it to the TaxProductsFlag field.
func (o *TaxCodeLevel) SetTaxProductsFlag(v bool) {
	o.TaxProductsFlag.Set(&v)
}

// SetTaxProductsFlagNil sets the value for TaxProductsFlag to be an explicit nil
func (o *TaxCodeLevel) SetTaxProductsFlagNil() {
	o.TaxProductsFlag.Set(nil)
}

// UnsetTaxProductsFlag ensures that no value is present for TaxProductsFlag, not even an explicit nil
func (o *TaxCodeLevel) UnsetTaxProductsFlag() {
	o.TaxProductsFlag.Unset()
}

// GetSingleUnitFlag returns the SingleUnitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetSingleUnitFlag() bool {
	if o == nil || IsNil(o.SingleUnitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SingleUnitFlag.Get()
}

// GetSingleUnitFlagOk returns a tuple with the SingleUnitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetSingleUnitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleUnitFlag.Get(), o.SingleUnitFlag.IsSet()
}

// HasSingleUnitFlag returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasSingleUnitFlag() bool {
	if o != nil && o.SingleUnitFlag.IsSet() {
		return true
	}

	return false
}

// SetSingleUnitFlag gets a reference to the given NullableBool and assigns it to the SingleUnitFlag field.
func (o *TaxCodeLevel) SetSingleUnitFlag(v bool) {
	o.SingleUnitFlag.Set(&v)
}

// SetSingleUnitFlagNil sets the value for SingleUnitFlag to be an explicit nil
func (o *TaxCodeLevel) SetSingleUnitFlagNil() {
	o.SingleUnitFlag.Set(nil)
}

// UnsetSingleUnitFlag ensures that no value is present for SingleUnitFlag, not even an explicit nil
func (o *TaxCodeLevel) UnsetSingleUnitFlag() {
	o.SingleUnitFlag.Unset()
}

// GetSingleUnitMinimum returns the SingleUnitMinimum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetSingleUnitMinimum() float64 {
	if o == nil || IsNil(o.SingleUnitMinimum.Get()) {
		var ret float64
		return ret
	}
	return *o.SingleUnitMinimum.Get()
}

// GetSingleUnitMinimumOk returns a tuple with the SingleUnitMinimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetSingleUnitMinimumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleUnitMinimum.Get(), o.SingleUnitMinimum.IsSet()
}

// HasSingleUnitMinimum returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasSingleUnitMinimum() bool {
	if o != nil && o.SingleUnitMinimum.IsSet() {
		return true
	}

	return false
}

// SetSingleUnitMinimum gets a reference to the given NullableFloat64 and assigns it to the SingleUnitMinimum field.
func (o *TaxCodeLevel) SetSingleUnitMinimum(v float64) {
	o.SingleUnitMinimum.Set(&v)
}

// SetSingleUnitMinimumNil sets the value for SingleUnitMinimum to be an explicit nil
func (o *TaxCodeLevel) SetSingleUnitMinimumNil() {
	o.SingleUnitMinimum.Set(nil)
}

// UnsetSingleUnitMinimum ensures that no value is present for SingleUnitMinimum, not even an explicit nil
func (o *TaxCodeLevel) UnsetSingleUnitMinimum() {
	o.SingleUnitMinimum.Unset()
}

// GetSingleUnitMaximum returns the SingleUnitMaximum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeLevel) GetSingleUnitMaximum() float64 {
	if o == nil || IsNil(o.SingleUnitMaximum.Get()) {
		var ret float64
		return ret
	}
	return *o.SingleUnitMaximum.Get()
}

// GetSingleUnitMaximumOk returns a tuple with the SingleUnitMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeLevel) GetSingleUnitMaximumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleUnitMaximum.Get(), o.SingleUnitMaximum.IsSet()
}

// HasSingleUnitMaximum returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasSingleUnitMaximum() bool {
	if o != nil && o.SingleUnitMaximum.IsSet() {
		return true
	}

	return false
}

// SetSingleUnitMaximum gets a reference to the given NullableFloat64 and assigns it to the SingleUnitMaximum field.
func (o *TaxCodeLevel) SetSingleUnitMaximum(v float64) {
	o.SingleUnitMaximum.Set(&v)
}

// SetSingleUnitMaximumNil sets the value for SingleUnitMaximum to be an explicit nil
func (o *TaxCodeLevel) SetSingleUnitMaximumNil() {
	o.SingleUnitMaximum.Set(nil)
}

// UnsetSingleUnitMaximum ensures that no value is present for SingleUnitMaximum, not even an explicit nil
func (o *TaxCodeLevel) UnsetSingleUnitMaximum() {
	o.SingleUnitMaximum.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TaxCodeLevel) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeLevel) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TaxCodeLevel) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TaxCodeLevel) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TaxCodeLevel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxCodeLevel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TaxLevel) {
		toSerialize["taxLevel"] = o.TaxLevel
	}
	toSerialize["taxRate"] = o.TaxRate.Get()
	toSerialize["rateType"] = o.RateType.Get()
	if o.TaxableMax.IsSet() {
		toSerialize["taxableMax"] = o.TaxableMax.Get()
	}
	if !IsNil(o.Caption) {
		toSerialize["caption"] = o.Caption
	}
	if !IsNil(o.TaxCodeXref) {
		toSerialize["taxCodeXref"] = o.TaxCodeXref
	}
	if !IsNil(o.AgencyXref) {
		toSerialize["agencyXref"] = o.AgencyXref
	}
	if o.TaxServicesFlag.IsSet() {
		toSerialize["taxServicesFlag"] = o.TaxServicesFlag.Get()
	}
	if o.TaxExpensesFlag.IsSet() {
		toSerialize["taxExpensesFlag"] = o.TaxExpensesFlag.Get()
	}
	if o.TaxProductsFlag.IsSet() {
		toSerialize["taxProductsFlag"] = o.TaxProductsFlag.Get()
	}
	if o.SingleUnitFlag.IsSet() {
		toSerialize["singleUnitFlag"] = o.SingleUnitFlag.Get()
	}
	if o.SingleUnitMinimum.IsSet() {
		toSerialize["singleUnitMinimum"] = o.SingleUnitMinimum.Get()
	}
	if o.SingleUnitMaximum.IsSet() {
		toSerialize["singleUnitMaximum"] = o.SingleUnitMaximum.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TaxCodeLevel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taxRate",
		"rateType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxCodeLevel := _TaxCodeLevel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxCodeLevel)

	if err != nil {
		return err
	}

	*o = TaxCodeLevel(varTaxCodeLevel)

	return err
}

type NullableTaxCodeLevel struct {
	value *TaxCodeLevel
	isSet bool
}

func (v NullableTaxCodeLevel) Get() *TaxCodeLevel {
	return v.value
}

func (v *NullableTaxCodeLevel) Set(val *TaxCodeLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxCodeLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxCodeLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxCodeLevel(val *TaxCodeLevel) *NullableTaxCodeLevel {
	return &NullableTaxCodeLevel{value: val, isSet: true}
}

func (v NullableTaxCodeLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxCodeLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
