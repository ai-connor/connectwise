/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TeamMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamMember{}

// TeamMember struct for TeamMember
type TeamMember struct {
	Id             *int32               `json:"id,omitempty"`
	Board          *BoardReference      `json:"board,omitempty"`
	Team           ServiceTeamReference `json:"team"`
	Member         MemberReference      `json:"member"`
	TeamLeaderFlag NullableBool         `json:"teamLeaderFlag,omitempty"`
	Info           *map[string]string   `json:"_info,omitempty"`
}

type _TeamMember TeamMember

// NewTeamMember instantiates a new TeamMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMember(team ServiceTeamReference, member MemberReference) *TeamMember {
	this := TeamMember{}
	this.Team = team
	this.Member = member
	return &this
}

// NewTeamMemberWithDefaults instantiates a new TeamMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberWithDefaults() *TeamMember {
	this := TeamMember{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeamMember) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMember) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeamMember) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TeamMember) SetId(v int32) {
	o.Id = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *TeamMember) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMember) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *TeamMember) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *TeamMember) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetTeam returns the Team field value
func (o *TeamMember) GetTeam() ServiceTeamReference {
	if o == nil {
		var ret ServiceTeamReference
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *TeamMember) GetTeamOk() (*ServiceTeamReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *TeamMember) SetTeam(v ServiceTeamReference) {
	o.Team = v
}

// GetMember returns the Member field value
func (o *TeamMember) GetMember() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.Member
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *TeamMember) GetMemberOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Member, true
}

// SetMember sets field value
func (o *TeamMember) SetMember(v MemberReference) {
	o.Member = v
}

// GetTeamLeaderFlag returns the TeamLeaderFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamMember) GetTeamLeaderFlag() bool {
	if o == nil || IsNil(o.TeamLeaderFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TeamLeaderFlag.Get()
}

// GetTeamLeaderFlagOk returns a tuple with the TeamLeaderFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamMember) GetTeamLeaderFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamLeaderFlag.Get(), o.TeamLeaderFlag.IsSet()
}

// HasTeamLeaderFlag returns a boolean if a field has been set.
func (o *TeamMember) HasTeamLeaderFlag() bool {
	if o != nil && o.TeamLeaderFlag.IsSet() {
		return true
	}

	return false
}

// SetTeamLeaderFlag gets a reference to the given NullableBool and assigns it to the TeamLeaderFlag field.
func (o *TeamMember) SetTeamLeaderFlag(v bool) {
	o.TeamLeaderFlag.Set(&v)
}

// SetTeamLeaderFlagNil sets the value for TeamLeaderFlag to be an explicit nil
func (o *TeamMember) SetTeamLeaderFlagNil() {
	o.TeamLeaderFlag.Set(nil)
}

// UnsetTeamLeaderFlag ensures that no value is present for TeamLeaderFlag, not even an explicit nil
func (o *TeamMember) UnsetTeamLeaderFlag() {
	o.TeamLeaderFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TeamMember) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMember) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TeamMember) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TeamMember) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TeamMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	toSerialize["team"] = o.Team
	toSerialize["member"] = o.Member
	if o.TeamLeaderFlag.IsSet() {
		toSerialize["teamLeaderFlag"] = o.TeamLeaderFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TeamMember) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team",
		"member",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamMember := _TeamMember{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamMember)

	if err != nil {
		return err
	}

	*o = TeamMember(varTeamMember)

	return err
}

type NullableTeamMember struct {
	value *TeamMember
	isSet bool
}

func (v NullableTeamMember) Get() *TeamMember {
	return v.value
}

func (v *NullableTeamMember) Set(val *TeamMember) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMember) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMember(val *TeamMember) *NullableTeamMember {
	return &NullableTeamMember{value: val, isSet: true}
}

func (v NullableTeamMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
