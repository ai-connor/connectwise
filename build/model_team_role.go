/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TeamRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamRole{}

// TeamRole struct for TeamRole
type TeamRole struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 20;
	Name               string             `json:"name"`
	AccountManagerFlag NullableBool       `json:"accountManagerFlag,omitempty"`
	TechFlag           NullableBool       `json:"techFlag,omitempty"`
	SalesFlag          NullableBool       `json:"salesFlag,omitempty"`
	Info               *map[string]string `json:"_info,omitempty"`
}

type _TeamRole TeamRole

// NewTeamRole instantiates a new TeamRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamRole(name string) *TeamRole {
	this := TeamRole{}
	this.Name = name
	return &this
}

// NewTeamRoleWithDefaults instantiates a new TeamRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamRoleWithDefaults() *TeamRole {
	this := TeamRole{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeamRole) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRole) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeamRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TeamRole) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *TeamRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamRole) SetName(v string) {
	o.Name = v
}

// GetAccountManagerFlag returns the AccountManagerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamRole) GetAccountManagerFlag() bool {
	if o == nil || IsNil(o.AccountManagerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AccountManagerFlag.Get()
}

// GetAccountManagerFlagOk returns a tuple with the AccountManagerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamRole) GetAccountManagerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountManagerFlag.Get(), o.AccountManagerFlag.IsSet()
}

// HasAccountManagerFlag returns a boolean if a field has been set.
func (o *TeamRole) HasAccountManagerFlag() bool {
	if o != nil && o.AccountManagerFlag.IsSet() {
		return true
	}

	return false
}

// SetAccountManagerFlag gets a reference to the given NullableBool and assigns it to the AccountManagerFlag field.
func (o *TeamRole) SetAccountManagerFlag(v bool) {
	o.AccountManagerFlag.Set(&v)
}

// SetAccountManagerFlagNil sets the value for AccountManagerFlag to be an explicit nil
func (o *TeamRole) SetAccountManagerFlagNil() {
	o.AccountManagerFlag.Set(nil)
}

// UnsetAccountManagerFlag ensures that no value is present for AccountManagerFlag, not even an explicit nil
func (o *TeamRole) UnsetAccountManagerFlag() {
	o.AccountManagerFlag.Unset()
}

// GetTechFlag returns the TechFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamRole) GetTechFlag() bool {
	if o == nil || IsNil(o.TechFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TechFlag.Get()
}

// GetTechFlagOk returns a tuple with the TechFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamRole) GetTechFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TechFlag.Get(), o.TechFlag.IsSet()
}

// HasTechFlag returns a boolean if a field has been set.
func (o *TeamRole) HasTechFlag() bool {
	if o != nil && o.TechFlag.IsSet() {
		return true
	}

	return false
}

// SetTechFlag gets a reference to the given NullableBool and assigns it to the TechFlag field.
func (o *TeamRole) SetTechFlag(v bool) {
	o.TechFlag.Set(&v)
}

// SetTechFlagNil sets the value for TechFlag to be an explicit nil
func (o *TeamRole) SetTechFlagNil() {
	o.TechFlag.Set(nil)
}

// UnsetTechFlag ensures that no value is present for TechFlag, not even an explicit nil
func (o *TeamRole) UnsetTechFlag() {
	o.TechFlag.Unset()
}

// GetSalesFlag returns the SalesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamRole) GetSalesFlag() bool {
	if o == nil || IsNil(o.SalesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SalesFlag.Get()
}

// GetSalesFlagOk returns a tuple with the SalesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamRole) GetSalesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesFlag.Get(), o.SalesFlag.IsSet()
}

// HasSalesFlag returns a boolean if a field has been set.
func (o *TeamRole) HasSalesFlag() bool {
	if o != nil && o.SalesFlag.IsSet() {
		return true
	}

	return false
}

// SetSalesFlag gets a reference to the given NullableBool and assigns it to the SalesFlag field.
func (o *TeamRole) SetSalesFlag(v bool) {
	o.SalesFlag.Set(&v)
}

// SetSalesFlagNil sets the value for SalesFlag to be an explicit nil
func (o *TeamRole) SetSalesFlagNil() {
	o.SalesFlag.Set(nil)
}

// UnsetSalesFlag ensures that no value is present for SalesFlag, not even an explicit nil
func (o *TeamRole) UnsetSalesFlag() {
	o.SalesFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TeamRole) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamRole) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TeamRole) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TeamRole) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TeamRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.AccountManagerFlag.IsSet() {
		toSerialize["accountManagerFlag"] = o.AccountManagerFlag.Get()
	}
	if o.TechFlag.IsSet() {
		toSerialize["techFlag"] = o.TechFlag.Get()
	}
	if o.SalesFlag.IsSet() {
		toSerialize["salesFlag"] = o.SalesFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TeamRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamRole := _TeamRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamRole)

	if err != nil {
		return err
	}

	*o = TeamRole(varTeamRole)

	return err
}

type NullableTeamRole struct {
	value *TeamRole
	isSet bool
}

func (v NullableTeamRole) Get() *TeamRole {
	return v.value
}

func (v *NullableTeamRole) Set(val *TeamRole) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamRole) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamRole(val *TeamRole) *NullableTeamRole {
	return &NullableTeamRole{value: val, isSet: true}
}

func (v NullableTeamRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
