/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TicketInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketInfo{}

// TicketInfo struct for TicketInfo
type TicketInfo struct {
	Id      *int32             `json:"id,omitempty"`
	Summary *string            `json:"summary,omitempty"`
	Company *CompanyReference  `json:"company,omitempty"`
	Info    *map[string]string `json:"_info,omitempty"`
}

// NewTicketInfo instantiates a new TicketInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketInfo() *TicketInfo {
	this := TicketInfo{}
	return &this
}

// NewTicketInfoWithDefaults instantiates a new TicketInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketInfoWithDefaults() *TicketInfo {
	this := TicketInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TicketInfo) SetId(v int32) {
	o.Id = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *TicketInfo) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketInfo) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *TicketInfo) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *TicketInfo) SetSummary(v string) {
	o.Summary = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *TicketInfo) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketInfo) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *TicketInfo) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *TicketInfo) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TicketInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TicketInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TicketInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TicketInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTicketInfo struct {
	value *TicketInfo
	isSet bool
}

func (v NullableTicketInfo) Get() *TicketInfo {
	return v.value
}

func (v *NullableTicketInfo) Set(val *TicketInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketInfo(val *TicketInfo) *NullableTicketInfo {
	return &NullableTicketInfo{value: val, isSet: true}
}

func (v NullableTicketInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
