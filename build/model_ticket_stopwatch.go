/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TicketStopwatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketStopwatch{}

// TicketStopwatch struct for TicketStopwatch
type TicketStopwatch struct {
	Info           *map[string]string  `json:"_info,omitempty"`
	Agreement      *AgreementReference `json:"agreement,omitempty"`
	BillableOption NullableString      `json:"billableOption,omitempty"`
	BusinessUnitId NullableInt32       `json:"businessUnitId,omitempty"`
	DateEntered    *time.Time          `json:"dateEntered,omitempty"`
	EndTime        *time.Time          `json:"endTime,omitempty"`
	Id             *int32              `json:"id,omitempty"`
	InternalNotes  *string             `json:"internalNotes,omitempty"`
	LocationId     NullableInt32       `json:"locationId,omitempty"`
	Member         MemberReference     `json:"member"`
	MobileGuid     NullableString      `json:"mobileGuid,omitempty"`
	//  Max length: 4000;
	Notes                     *string                 `json:"notes,omitempty"`
	ServiceStatus             *ServiceStatusReference `json:"serviceStatus,omitempty"`
	StartTime                 *time.Time              `json:"startTime,omitempty"`
	Status                    NullableString          `json:"status"`
	Ticket                    TicketReference         `json:"ticket"`
	TicketMobileGuid          NullableString          `json:"ticketMobileGuid,omitempty"`
	TotalPauseTime            NullableInt32           `json:"totalPauseTime,omitempty"`
	WorkRole                  *WorkRoleReference      `json:"workRole,omitempty"`
	WorkType                  *WorkTypeReference      `json:"workType,omitempty"`
	ShowNotesInDiscussionFlag NullableBool            `json:"showNotesInDiscussionFlag,omitempty"`
	ShowNotesInInternalFlag   NullableBool            `json:"showNotesInInternalFlag,omitempty"`
	ShowNotesInResolutionFlag NullableBool            `json:"showNotesInResolutionFlag,omitempty"`
	EmailNotesToContactFlag   NullableBool            `json:"emailNotesToContactFlag,omitempty"`
	EmailNotesToResourcesFlag NullableBool            `json:"emailNotesToResourcesFlag,omitempty"`
}

type _TicketStopwatch TicketStopwatch

// NewTicketStopwatch instantiates a new TicketStopwatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketStopwatch(member MemberReference, status NullableString, ticket TicketReference) *TicketStopwatch {
	this := TicketStopwatch{}
	this.Member = member
	this.Status = status
	this.Ticket = ticket
	return &this
}

// NewTicketStopwatchWithDefaults instantiates a new TicketStopwatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketStopwatchWithDefaults() *TicketStopwatch {
	this := TicketStopwatch{}
	return &this
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TicketStopwatch) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TicketStopwatch) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TicketStopwatch) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *TicketStopwatch) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *TicketStopwatch) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *TicketStopwatch) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetBillableOption returns the BillableOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetBillableOption() string {
	if o == nil || IsNil(o.BillableOption.Get()) {
		var ret string
		return ret
	}
	return *o.BillableOption.Get()
}

// GetBillableOptionOk returns a tuple with the BillableOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetBillableOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableOption.Get(), o.BillableOption.IsSet()
}

// HasBillableOption returns a boolean if a field has been set.
func (o *TicketStopwatch) HasBillableOption() bool {
	if o != nil && o.BillableOption.IsSet() {
		return true
	}

	return false
}

// SetBillableOption gets a reference to the given NullableString and assigns it to the BillableOption field.
func (o *TicketStopwatch) SetBillableOption(v string) {
	o.BillableOption.Set(&v)
}

// SetBillableOptionNil sets the value for BillableOption to be an explicit nil
func (o *TicketStopwatch) SetBillableOptionNil() {
	o.BillableOption.Set(nil)
}

// UnsetBillableOption ensures that no value is present for BillableOption, not even an explicit nil
func (o *TicketStopwatch) UnsetBillableOption() {
	o.BillableOption.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *TicketStopwatch) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *TicketStopwatch) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}

// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *TicketStopwatch) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *TicketStopwatch) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetDateEntered returns the DateEntered field value if set, zero value otherwise.
func (o *TicketStopwatch) GetDateEntered() time.Time {
	if o == nil || IsNil(o.DateEntered) {
		var ret time.Time
		return ret
	}
	return *o.DateEntered
}

// GetDateEnteredOk returns a tuple with the DateEntered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetDateEnteredOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEntered) {
		return nil, false
	}
	return o.DateEntered, true
}

// HasDateEntered returns a boolean if a field has been set.
func (o *TicketStopwatch) HasDateEntered() bool {
	if o != nil && !IsNil(o.DateEntered) {
		return true
	}

	return false
}

// SetDateEntered gets a reference to the given time.Time and assigns it to the DateEntered field.
func (o *TicketStopwatch) SetDateEntered(v time.Time) {
	o.DateEntered = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *TicketStopwatch) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *TicketStopwatch) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *TicketStopwatch) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketStopwatch) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketStopwatch) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TicketStopwatch) SetId(v int32) {
	o.Id = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *TicketStopwatch) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *TicketStopwatch) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *TicketStopwatch) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *TicketStopwatch) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *TicketStopwatch) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}

// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *TicketStopwatch) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *TicketStopwatch) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetMember returns the Member field value
func (o *TicketStopwatch) GetMember() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.Member
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetMemberOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Member, true
}

// SetMember sets field value
func (o *TicketStopwatch) SetMember(v MemberReference) {
	o.Member = v
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *TicketStopwatch) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *TicketStopwatch) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}

// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *TicketStopwatch) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *TicketStopwatch) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TicketStopwatch) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TicketStopwatch) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TicketStopwatch) SetNotes(v string) {
	o.Notes = &v
}

// GetServiceStatus returns the ServiceStatus field value if set, zero value otherwise.
func (o *TicketStopwatch) GetServiceStatus() ServiceStatusReference {
	if o == nil || IsNil(o.ServiceStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetServiceStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.ServiceStatus) {
		return nil, false
	}
	return o.ServiceStatus, true
}

// HasServiceStatus returns a boolean if a field has been set.
func (o *TicketStopwatch) HasServiceStatus() bool {
	if o != nil && !IsNil(o.ServiceStatus) {
		return true
	}

	return false
}

// SetServiceStatus gets a reference to the given ServiceStatusReference and assigns it to the ServiceStatus field.
func (o *TicketStopwatch) SetServiceStatus(v ServiceStatusReference) {
	o.ServiceStatus = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TicketStopwatch) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TicketStopwatch) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *TicketStopwatch) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TicketStopwatch) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *TicketStopwatch) SetStatus(v string) {
	o.Status.Set(&v)
}

// GetTicket returns the Ticket field value
func (o *TicketStopwatch) GetTicket() TicketReference {
	if o == nil {
		var ret TicketReference
		return ret
	}

	return o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetTicketOk() (*TicketReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ticket, true
}

// SetTicket sets field value
func (o *TicketStopwatch) SetTicket(v TicketReference) {
	o.Ticket = v
}

// GetTicketMobileGuid returns the TicketMobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetTicketMobileGuid() string {
	if o == nil || IsNil(o.TicketMobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.TicketMobileGuid.Get()
}

// GetTicketMobileGuidOk returns a tuple with the TicketMobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetTicketMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TicketMobileGuid.Get(), o.TicketMobileGuid.IsSet()
}

// HasTicketMobileGuid returns a boolean if a field has been set.
func (o *TicketStopwatch) HasTicketMobileGuid() bool {
	if o != nil && o.TicketMobileGuid.IsSet() {
		return true
	}

	return false
}

// SetTicketMobileGuid gets a reference to the given NullableString and assigns it to the TicketMobileGuid field.
func (o *TicketStopwatch) SetTicketMobileGuid(v string) {
	o.TicketMobileGuid.Set(&v)
}

// SetTicketMobileGuidNil sets the value for TicketMobileGuid to be an explicit nil
func (o *TicketStopwatch) SetTicketMobileGuidNil() {
	o.TicketMobileGuid.Set(nil)
}

// UnsetTicketMobileGuid ensures that no value is present for TicketMobileGuid, not even an explicit nil
func (o *TicketStopwatch) UnsetTicketMobileGuid() {
	o.TicketMobileGuid.Unset()
}

// GetTotalPauseTime returns the TotalPauseTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetTotalPauseTime() int32 {
	if o == nil || IsNil(o.TotalPauseTime.Get()) {
		var ret int32
		return ret
	}
	return *o.TotalPauseTime.Get()
}

// GetTotalPauseTimeOk returns a tuple with the TotalPauseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetTotalPauseTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalPauseTime.Get(), o.TotalPauseTime.IsSet()
}

// HasTotalPauseTime returns a boolean if a field has been set.
func (o *TicketStopwatch) HasTotalPauseTime() bool {
	if o != nil && o.TotalPauseTime.IsSet() {
		return true
	}

	return false
}

// SetTotalPauseTime gets a reference to the given NullableInt32 and assigns it to the TotalPauseTime field.
func (o *TicketStopwatch) SetTotalPauseTime(v int32) {
	o.TotalPauseTime.Set(&v)
}

// SetTotalPauseTimeNil sets the value for TotalPauseTime to be an explicit nil
func (o *TicketStopwatch) SetTotalPauseTimeNil() {
	o.TotalPauseTime.Set(nil)
}

// UnsetTotalPauseTime ensures that no value is present for TotalPauseTime, not even an explicit nil
func (o *TicketStopwatch) UnsetTotalPauseTime() {
	o.TotalPauseTime.Unset()
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *TicketStopwatch) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *TicketStopwatch) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *TicketStopwatch) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *TicketStopwatch) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketStopwatch) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *TicketStopwatch) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *TicketStopwatch) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetShowNotesInDiscussionFlag returns the ShowNotesInDiscussionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetShowNotesInDiscussionFlag() bool {
	if o == nil || IsNil(o.ShowNotesInDiscussionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowNotesInDiscussionFlag.Get()
}

// GetShowNotesInDiscussionFlagOk returns a tuple with the ShowNotesInDiscussionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetShowNotesInDiscussionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowNotesInDiscussionFlag.Get(), o.ShowNotesInDiscussionFlag.IsSet()
}

// HasShowNotesInDiscussionFlag returns a boolean if a field has been set.
func (o *TicketStopwatch) HasShowNotesInDiscussionFlag() bool {
	if o != nil && o.ShowNotesInDiscussionFlag.IsSet() {
		return true
	}

	return false
}

// SetShowNotesInDiscussionFlag gets a reference to the given NullableBool and assigns it to the ShowNotesInDiscussionFlag field.
func (o *TicketStopwatch) SetShowNotesInDiscussionFlag(v bool) {
	o.ShowNotesInDiscussionFlag.Set(&v)
}

// SetShowNotesInDiscussionFlagNil sets the value for ShowNotesInDiscussionFlag to be an explicit nil
func (o *TicketStopwatch) SetShowNotesInDiscussionFlagNil() {
	o.ShowNotesInDiscussionFlag.Set(nil)
}

// UnsetShowNotesInDiscussionFlag ensures that no value is present for ShowNotesInDiscussionFlag, not even an explicit nil
func (o *TicketStopwatch) UnsetShowNotesInDiscussionFlag() {
	o.ShowNotesInDiscussionFlag.Unset()
}

// GetShowNotesInInternalFlag returns the ShowNotesInInternalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetShowNotesInInternalFlag() bool {
	if o == nil || IsNil(o.ShowNotesInInternalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowNotesInInternalFlag.Get()
}

// GetShowNotesInInternalFlagOk returns a tuple with the ShowNotesInInternalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetShowNotesInInternalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowNotesInInternalFlag.Get(), o.ShowNotesInInternalFlag.IsSet()
}

// HasShowNotesInInternalFlag returns a boolean if a field has been set.
func (o *TicketStopwatch) HasShowNotesInInternalFlag() bool {
	if o != nil && o.ShowNotesInInternalFlag.IsSet() {
		return true
	}

	return false
}

// SetShowNotesInInternalFlag gets a reference to the given NullableBool and assigns it to the ShowNotesInInternalFlag field.
func (o *TicketStopwatch) SetShowNotesInInternalFlag(v bool) {
	o.ShowNotesInInternalFlag.Set(&v)
}

// SetShowNotesInInternalFlagNil sets the value for ShowNotesInInternalFlag to be an explicit nil
func (o *TicketStopwatch) SetShowNotesInInternalFlagNil() {
	o.ShowNotesInInternalFlag.Set(nil)
}

// UnsetShowNotesInInternalFlag ensures that no value is present for ShowNotesInInternalFlag, not even an explicit nil
func (o *TicketStopwatch) UnsetShowNotesInInternalFlag() {
	o.ShowNotesInInternalFlag.Unset()
}

// GetShowNotesInResolutionFlag returns the ShowNotesInResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetShowNotesInResolutionFlag() bool {
	if o == nil || IsNil(o.ShowNotesInResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowNotesInResolutionFlag.Get()
}

// GetShowNotesInResolutionFlagOk returns a tuple with the ShowNotesInResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetShowNotesInResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowNotesInResolutionFlag.Get(), o.ShowNotesInResolutionFlag.IsSet()
}

// HasShowNotesInResolutionFlag returns a boolean if a field has been set.
func (o *TicketStopwatch) HasShowNotesInResolutionFlag() bool {
	if o != nil && o.ShowNotesInResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetShowNotesInResolutionFlag gets a reference to the given NullableBool and assigns it to the ShowNotesInResolutionFlag field.
func (o *TicketStopwatch) SetShowNotesInResolutionFlag(v bool) {
	o.ShowNotesInResolutionFlag.Set(&v)
}

// SetShowNotesInResolutionFlagNil sets the value for ShowNotesInResolutionFlag to be an explicit nil
func (o *TicketStopwatch) SetShowNotesInResolutionFlagNil() {
	o.ShowNotesInResolutionFlag.Set(nil)
}

// UnsetShowNotesInResolutionFlag ensures that no value is present for ShowNotesInResolutionFlag, not even an explicit nil
func (o *TicketStopwatch) UnsetShowNotesInResolutionFlag() {
	o.ShowNotesInResolutionFlag.Unset()
}

// GetEmailNotesToContactFlag returns the EmailNotesToContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetEmailNotesToContactFlag() bool {
	if o == nil || IsNil(o.EmailNotesToContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailNotesToContactFlag.Get()
}

// GetEmailNotesToContactFlagOk returns a tuple with the EmailNotesToContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetEmailNotesToContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailNotesToContactFlag.Get(), o.EmailNotesToContactFlag.IsSet()
}

// HasEmailNotesToContactFlag returns a boolean if a field has been set.
func (o *TicketStopwatch) HasEmailNotesToContactFlag() bool {
	if o != nil && o.EmailNotesToContactFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailNotesToContactFlag gets a reference to the given NullableBool and assigns it to the EmailNotesToContactFlag field.
func (o *TicketStopwatch) SetEmailNotesToContactFlag(v bool) {
	o.EmailNotesToContactFlag.Set(&v)
}

// SetEmailNotesToContactFlagNil sets the value for EmailNotesToContactFlag to be an explicit nil
func (o *TicketStopwatch) SetEmailNotesToContactFlagNil() {
	o.EmailNotesToContactFlag.Set(nil)
}

// UnsetEmailNotesToContactFlag ensures that no value is present for EmailNotesToContactFlag, not even an explicit nil
func (o *TicketStopwatch) UnsetEmailNotesToContactFlag() {
	o.EmailNotesToContactFlag.Unset()
}

// GetEmailNotesToResourcesFlag returns the EmailNotesToResourcesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketStopwatch) GetEmailNotesToResourcesFlag() bool {
	if o == nil || IsNil(o.EmailNotesToResourcesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailNotesToResourcesFlag.Get()
}

// GetEmailNotesToResourcesFlagOk returns a tuple with the EmailNotesToResourcesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketStopwatch) GetEmailNotesToResourcesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailNotesToResourcesFlag.Get(), o.EmailNotesToResourcesFlag.IsSet()
}

// HasEmailNotesToResourcesFlag returns a boolean if a field has been set.
func (o *TicketStopwatch) HasEmailNotesToResourcesFlag() bool {
	if o != nil && o.EmailNotesToResourcesFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailNotesToResourcesFlag gets a reference to the given NullableBool and assigns it to the EmailNotesToResourcesFlag field.
func (o *TicketStopwatch) SetEmailNotesToResourcesFlag(v bool) {
	o.EmailNotesToResourcesFlag.Set(&v)
}

// SetEmailNotesToResourcesFlagNil sets the value for EmailNotesToResourcesFlag to be an explicit nil
func (o *TicketStopwatch) SetEmailNotesToResourcesFlagNil() {
	o.EmailNotesToResourcesFlag.Set(nil)
}

// UnsetEmailNotesToResourcesFlag ensures that no value is present for EmailNotesToResourcesFlag, not even an explicit nil
func (o *TicketStopwatch) UnsetEmailNotesToResourcesFlag() {
	o.EmailNotesToResourcesFlag.Unset()
}

func (o TicketStopwatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketStopwatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if o.BillableOption.IsSet() {
		toSerialize["billableOption"] = o.BillableOption.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.DateEntered) {
		toSerialize["dateEntered"] = o.DateEntered
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	toSerialize["member"] = o.Member
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.ServiceStatus) {
		toSerialize["serviceStatus"] = o.ServiceStatus
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	toSerialize["status"] = o.Status.Get()
	toSerialize["ticket"] = o.Ticket
	if o.TicketMobileGuid.IsSet() {
		toSerialize["ticketMobileGuid"] = o.TicketMobileGuid.Get()
	}
	if o.TotalPauseTime.IsSet() {
		toSerialize["totalPauseTime"] = o.TotalPauseTime.Get()
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if o.ShowNotesInDiscussionFlag.IsSet() {
		toSerialize["showNotesInDiscussionFlag"] = o.ShowNotesInDiscussionFlag.Get()
	}
	if o.ShowNotesInInternalFlag.IsSet() {
		toSerialize["showNotesInInternalFlag"] = o.ShowNotesInInternalFlag.Get()
	}
	if o.ShowNotesInResolutionFlag.IsSet() {
		toSerialize["showNotesInResolutionFlag"] = o.ShowNotesInResolutionFlag.Get()
	}
	if o.EmailNotesToContactFlag.IsSet() {
		toSerialize["emailNotesToContactFlag"] = o.EmailNotesToContactFlag.Get()
	}
	if o.EmailNotesToResourcesFlag.IsSet() {
		toSerialize["emailNotesToResourcesFlag"] = o.EmailNotesToResourcesFlag.Get()
	}
	return toSerialize, nil
}

func (o *TicketStopwatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member",
		"status",
		"ticket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicketStopwatch := _TicketStopwatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicketStopwatch)

	if err != nil {
		return err
	}

	*o = TicketStopwatch(varTicketStopwatch)

	return err
}

type NullableTicketStopwatch struct {
	value *TicketStopwatch
	isSet bool
}

func (v NullableTicketStopwatch) Get() *TicketStopwatch {
	return v.value
}

func (v *NullableTicketStopwatch) Set(val *TicketStopwatch) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketStopwatch) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketStopwatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketStopwatch(val *TicketStopwatch) *NullableTicketStopwatch {
	return &NullableTicketStopwatch{value: val, isSet: true}
}

func (v NullableTicketStopwatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketStopwatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
