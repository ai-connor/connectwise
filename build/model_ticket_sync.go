/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TicketSync type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketSync{}

// TicketSync struct for TicketSync
type TicketSync struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 80;
	Name                   string                   `json:"name"`
	VendorType             NullableString           `json:"vendorType"`
	IntegratorLogin        IntegratorLoginReference `json:"integratorLogin"`
	Company                CompanyReference         `json:"company"`
	Url                    string                   `json:"url"`
	UserName               *string                  `json:"userName,omitempty"`
	Password               *string                  `json:"password,omitempty"`
	Psg                    *string                  `json:"psg,omitempty"`
	ProblemDescriptionFlag NullableBool             `json:"problemDescriptionFlag,omitempty"`
	InternalAnalysisFlag   NullableBool             `json:"internalAnalysisFlag,omitempty"`
	ResolutionFlag         NullableBool             `json:"resolutionFlag,omitempty"`
	Info                   *map[string]string       `json:"_info,omitempty"`
}

type _TicketSync TicketSync

// NewTicketSync instantiates a new TicketSync object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketSync(name string, vendorType NullableString, integratorLogin IntegratorLoginReference, company CompanyReference, url string) *TicketSync {
	this := TicketSync{}
	this.Name = name
	this.VendorType = vendorType
	this.IntegratorLogin = integratorLogin
	this.Company = company
	this.Url = url
	return &this
}

// NewTicketSyncWithDefaults instantiates a new TicketSync object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketSyncWithDefaults() *TicketSync {
	this := TicketSync{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketSync) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketSync) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketSync) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TicketSync) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *TicketSync) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TicketSync) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TicketSync) SetName(v string) {
	o.Name = v
}

// GetVendorType returns the VendorType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TicketSync) GetVendorType() string {
	if o == nil || o.VendorType.Get() == nil {
		var ret string
		return ret
	}

	return *o.VendorType.Get()
}

// GetVendorTypeOk returns a tuple with the VendorType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketSync) GetVendorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VendorType.Get(), o.VendorType.IsSet()
}

// SetVendorType sets field value
func (o *TicketSync) SetVendorType(v string) {
	o.VendorType.Set(&v)
}

// GetIntegratorLogin returns the IntegratorLogin field value
func (o *TicketSync) GetIntegratorLogin() IntegratorLoginReference {
	if o == nil {
		var ret IntegratorLoginReference
		return ret
	}

	return o.IntegratorLogin
}

// GetIntegratorLoginOk returns a tuple with the IntegratorLogin field value
// and a boolean to check if the value has been set.
func (o *TicketSync) GetIntegratorLoginOk() (*IntegratorLoginReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegratorLogin, true
}

// SetIntegratorLogin sets field value
func (o *TicketSync) SetIntegratorLogin(v IntegratorLoginReference) {
	o.IntegratorLogin = v
}

// GetCompany returns the Company field value
func (o *TicketSync) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *TicketSync) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *TicketSync) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetUrl returns the Url field value
func (o *TicketSync) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TicketSync) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TicketSync) SetUrl(v string) {
	o.Url = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *TicketSync) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketSync) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *TicketSync) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *TicketSync) SetUserName(v string) {
	o.UserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *TicketSync) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketSync) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *TicketSync) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *TicketSync) SetPassword(v string) {
	o.Password = &v
}

// GetPsg returns the Psg field value if set, zero value otherwise.
func (o *TicketSync) GetPsg() string {
	if o == nil || IsNil(o.Psg) {
		var ret string
		return ret
	}
	return *o.Psg
}

// GetPsgOk returns a tuple with the Psg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketSync) GetPsgOk() (*string, bool) {
	if o == nil || IsNil(o.Psg) {
		return nil, false
	}
	return o.Psg, true
}

// HasPsg returns a boolean if a field has been set.
func (o *TicketSync) HasPsg() bool {
	if o != nil && !IsNil(o.Psg) {
		return true
	}

	return false
}

// SetPsg gets a reference to the given string and assigns it to the Psg field.
func (o *TicketSync) SetPsg(v string) {
	o.Psg = &v
}

// GetProblemDescriptionFlag returns the ProblemDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketSync) GetProblemDescriptionFlag() bool {
	if o == nil || IsNil(o.ProblemDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProblemDescriptionFlag.Get()
}

// GetProblemDescriptionFlagOk returns a tuple with the ProblemDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketSync) GetProblemDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProblemDescriptionFlag.Get(), o.ProblemDescriptionFlag.IsSet()
}

// HasProblemDescriptionFlag returns a boolean if a field has been set.
func (o *TicketSync) HasProblemDescriptionFlag() bool {
	if o != nil && o.ProblemDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetProblemDescriptionFlag gets a reference to the given NullableBool and assigns it to the ProblemDescriptionFlag field.
func (o *TicketSync) SetProblemDescriptionFlag(v bool) {
	o.ProblemDescriptionFlag.Set(&v)
}

// SetProblemDescriptionFlagNil sets the value for ProblemDescriptionFlag to be an explicit nil
func (o *TicketSync) SetProblemDescriptionFlagNil() {
	o.ProblemDescriptionFlag.Set(nil)
}

// UnsetProblemDescriptionFlag ensures that no value is present for ProblemDescriptionFlag, not even an explicit nil
func (o *TicketSync) UnsetProblemDescriptionFlag() {
	o.ProblemDescriptionFlag.Unset()
}

// GetInternalAnalysisFlag returns the InternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketSync) GetInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.InternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InternalAnalysisFlag.Get()
}

// GetInternalAnalysisFlagOk returns a tuple with the InternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketSync) GetInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalAnalysisFlag.Get(), o.InternalAnalysisFlag.IsSet()
}

// HasInternalAnalysisFlag returns a boolean if a field has been set.
func (o *TicketSync) HasInternalAnalysisFlag() bool {
	if o != nil && o.InternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the InternalAnalysisFlag field.
func (o *TicketSync) SetInternalAnalysisFlag(v bool) {
	o.InternalAnalysisFlag.Set(&v)
}

// SetInternalAnalysisFlagNil sets the value for InternalAnalysisFlag to be an explicit nil
func (o *TicketSync) SetInternalAnalysisFlagNil() {
	o.InternalAnalysisFlag.Set(nil)
}

// UnsetInternalAnalysisFlag ensures that no value is present for InternalAnalysisFlag, not even an explicit nil
func (o *TicketSync) UnsetInternalAnalysisFlag() {
	o.InternalAnalysisFlag.Unset()
}

// GetResolutionFlag returns the ResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketSync) GetResolutionFlag() bool {
	if o == nil || IsNil(o.ResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ResolutionFlag.Get()
}

// GetResolutionFlagOk returns a tuple with the ResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketSync) GetResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionFlag.Get(), o.ResolutionFlag.IsSet()
}

// HasResolutionFlag returns a boolean if a field has been set.
func (o *TicketSync) HasResolutionFlag() bool {
	if o != nil && o.ResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetResolutionFlag gets a reference to the given NullableBool and assigns it to the ResolutionFlag field.
func (o *TicketSync) SetResolutionFlag(v bool) {
	o.ResolutionFlag.Set(&v)
}

// SetResolutionFlagNil sets the value for ResolutionFlag to be an explicit nil
func (o *TicketSync) SetResolutionFlagNil() {
	o.ResolutionFlag.Set(nil)
}

// UnsetResolutionFlag ensures that no value is present for ResolutionFlag, not even an explicit nil
func (o *TicketSync) UnsetResolutionFlag() {
	o.ResolutionFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TicketSync) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketSync) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TicketSync) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TicketSync) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TicketSync) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketSync) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["vendorType"] = o.VendorType.Get()
	toSerialize["integratorLogin"] = o.IntegratorLogin
	toSerialize["company"] = o.Company
	toSerialize["url"] = o.Url
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Psg) {
		toSerialize["psg"] = o.Psg
	}
	if o.ProblemDescriptionFlag.IsSet() {
		toSerialize["problemDescriptionFlag"] = o.ProblemDescriptionFlag.Get()
	}
	if o.InternalAnalysisFlag.IsSet() {
		toSerialize["internalAnalysisFlag"] = o.InternalAnalysisFlag.Get()
	}
	if o.ResolutionFlag.IsSet() {
		toSerialize["resolutionFlag"] = o.ResolutionFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TicketSync) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"vendorType",
		"integratorLogin",
		"company",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicketSync := _TicketSync{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicketSync)

	if err != nil {
		return err
	}

	*o = TicketSync(varTicketSync)

	return err
}

type NullableTicketSync struct {
	value *TicketSync
	isSet bool
}

func (v NullableTicketSync) Get() *TicketSync {
	return v.value
}

func (v *NullableTicketSync) Set(val *TicketSync) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketSync) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketSync) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketSync(val *TicketSync) *NullableTicketSync {
	return &NullableTicketSync{value: val, isSet: true}
}

func (v NullableTicketSync) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketSync) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
