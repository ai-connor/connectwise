/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TimeAccrual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeAccrual{}

// TimeAccrual struct for TimeAccrual
type TimeAccrual struct {
	Id       *int32                   `json:"id,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	// if vacationFlag is set to false, system will clear out or ingore the values of vacationAvailableType, vacationCarryoverAllowedFlag, vacationCarryoverLimit
	VacationFlag                 NullableBool    `json:"vacationFlag,omitempty"`
	VacationAvailableType        NullableString  `json:"vacationAvailableType,omitempty"`
	VacationCarryoverAllowedFlag NullableBool    `json:"vacationCarryoverAllowedFlag,omitempty"`
	VacationCarryoverLimit       NullableFloat64 `json:"vacationCarryoverLimit,omitempty"`
	// if sickFlag is set to false, system will clear out or ignore the values of sickAvailableType, sickCarryoverAllowedFlag, sickCarryoverLimit
	SickFlag                 NullableBool    `json:"sickFlag,omitempty"`
	SickAvailableType        NullableString  `json:"sickAvailableType,omitempty"`
	SickCarryoverAllowedFlag NullableBool    `json:"sickCarryoverAllowedFlag,omitempty"`
	SickCarryoverLimit       NullableFloat64 `json:"sickCarryoverLimit,omitempty"`
	// if ptoFlag is set to false, system will clear out or ignore the values of ptoAvailableType, ptoCarryoverAllowedFlag, ptoCarryoverLimit
	PtoFlag                 NullableBool    `json:"ptoFlag,omitempty"`
	PtoAvailableType        NullableString  `json:"ptoAvailableType,omitempty"`
	PtoCarryoverAllowedFlag NullableBool    `json:"ptoCarryoverAllowedFlag,omitempty"`
	PtoCarryoverLimit       NullableFloat64 `json:"ptoCarryoverLimit,omitempty"`
	// if holidayFlag is set to false, system will clear out or ignore the values of holidayAvailableType, holidayCarryoverAllowedFlag, holidayCarryoverLimit
	HolidayFlag                 NullableBool       `json:"holidayFlag,omitempty"`
	HolidayAvailableType        NullableString     `json:"holidayAvailableType,omitempty"`
	HolidayCarryoverAllowedFlag NullableBool       `json:"holidayCarryoverAllowedFlag,omitempty"`
	HolidayCarryoverLimit       NullableFloat64    `json:"holidayCarryoverLimit,omitempty"`
	Info                        *map[string]string `json:"_info,omitempty"`
}

// NewTimeAccrual instantiates a new TimeAccrual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeAccrual() *TimeAccrual {
	this := TimeAccrual{}
	return &this
}

// NewTimeAccrualWithDefaults instantiates a new TimeAccrual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeAccrualWithDefaults() *TimeAccrual {
	this := TimeAccrual{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimeAccrual) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeAccrual) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimeAccrual) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TimeAccrual) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *TimeAccrual) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeAccrual) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *TimeAccrual) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *TimeAccrual) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetVacationFlag returns the VacationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetVacationFlag() bool {
	if o == nil || IsNil(o.VacationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.VacationFlag.Get()
}

// GetVacationFlagOk returns a tuple with the VacationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetVacationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VacationFlag.Get(), o.VacationFlag.IsSet()
}

// HasVacationFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasVacationFlag() bool {
	if o != nil && o.VacationFlag.IsSet() {
		return true
	}

	return false
}

// SetVacationFlag gets a reference to the given NullableBool and assigns it to the VacationFlag field.
func (o *TimeAccrual) SetVacationFlag(v bool) {
	o.VacationFlag.Set(&v)
}

// SetVacationFlagNil sets the value for VacationFlag to be an explicit nil
func (o *TimeAccrual) SetVacationFlagNil() {
	o.VacationFlag.Set(nil)
}

// UnsetVacationFlag ensures that no value is present for VacationFlag, not even an explicit nil
func (o *TimeAccrual) UnsetVacationFlag() {
	o.VacationFlag.Unset()
}

// GetVacationAvailableType returns the VacationAvailableType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetVacationAvailableType() string {
	if o == nil || IsNil(o.VacationAvailableType.Get()) {
		var ret string
		return ret
	}
	return *o.VacationAvailableType.Get()
}

// GetVacationAvailableTypeOk returns a tuple with the VacationAvailableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetVacationAvailableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VacationAvailableType.Get(), o.VacationAvailableType.IsSet()
}

// HasVacationAvailableType returns a boolean if a field has been set.
func (o *TimeAccrual) HasVacationAvailableType() bool {
	if o != nil && o.VacationAvailableType.IsSet() {
		return true
	}

	return false
}

// SetVacationAvailableType gets a reference to the given NullableString and assigns it to the VacationAvailableType field.
func (o *TimeAccrual) SetVacationAvailableType(v string) {
	o.VacationAvailableType.Set(&v)
}

// SetVacationAvailableTypeNil sets the value for VacationAvailableType to be an explicit nil
func (o *TimeAccrual) SetVacationAvailableTypeNil() {
	o.VacationAvailableType.Set(nil)
}

// UnsetVacationAvailableType ensures that no value is present for VacationAvailableType, not even an explicit nil
func (o *TimeAccrual) UnsetVacationAvailableType() {
	o.VacationAvailableType.Unset()
}

// GetVacationCarryoverAllowedFlag returns the VacationCarryoverAllowedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetVacationCarryoverAllowedFlag() bool {
	if o == nil || IsNil(o.VacationCarryoverAllowedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.VacationCarryoverAllowedFlag.Get()
}

// GetVacationCarryoverAllowedFlagOk returns a tuple with the VacationCarryoverAllowedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetVacationCarryoverAllowedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VacationCarryoverAllowedFlag.Get(), o.VacationCarryoverAllowedFlag.IsSet()
}

// HasVacationCarryoverAllowedFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasVacationCarryoverAllowedFlag() bool {
	if o != nil && o.VacationCarryoverAllowedFlag.IsSet() {
		return true
	}

	return false
}

// SetVacationCarryoverAllowedFlag gets a reference to the given NullableBool and assigns it to the VacationCarryoverAllowedFlag field.
func (o *TimeAccrual) SetVacationCarryoverAllowedFlag(v bool) {
	o.VacationCarryoverAllowedFlag.Set(&v)
}

// SetVacationCarryoverAllowedFlagNil sets the value for VacationCarryoverAllowedFlag to be an explicit nil
func (o *TimeAccrual) SetVacationCarryoverAllowedFlagNil() {
	o.VacationCarryoverAllowedFlag.Set(nil)
}

// UnsetVacationCarryoverAllowedFlag ensures that no value is present for VacationCarryoverAllowedFlag, not even an explicit nil
func (o *TimeAccrual) UnsetVacationCarryoverAllowedFlag() {
	o.VacationCarryoverAllowedFlag.Unset()
}

// GetVacationCarryoverLimit returns the VacationCarryoverLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetVacationCarryoverLimit() float64 {
	if o == nil || IsNil(o.VacationCarryoverLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.VacationCarryoverLimit.Get()
}

// GetVacationCarryoverLimitOk returns a tuple with the VacationCarryoverLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetVacationCarryoverLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.VacationCarryoverLimit.Get(), o.VacationCarryoverLimit.IsSet()
}

// HasVacationCarryoverLimit returns a boolean if a field has been set.
func (o *TimeAccrual) HasVacationCarryoverLimit() bool {
	if o != nil && o.VacationCarryoverLimit.IsSet() {
		return true
	}

	return false
}

// SetVacationCarryoverLimit gets a reference to the given NullableFloat64 and assigns it to the VacationCarryoverLimit field.
func (o *TimeAccrual) SetVacationCarryoverLimit(v float64) {
	o.VacationCarryoverLimit.Set(&v)
}

// SetVacationCarryoverLimitNil sets the value for VacationCarryoverLimit to be an explicit nil
func (o *TimeAccrual) SetVacationCarryoverLimitNil() {
	o.VacationCarryoverLimit.Set(nil)
}

// UnsetVacationCarryoverLimit ensures that no value is present for VacationCarryoverLimit, not even an explicit nil
func (o *TimeAccrual) UnsetVacationCarryoverLimit() {
	o.VacationCarryoverLimit.Unset()
}

// GetSickFlag returns the SickFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetSickFlag() bool {
	if o == nil || IsNil(o.SickFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SickFlag.Get()
}

// GetSickFlagOk returns a tuple with the SickFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetSickFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SickFlag.Get(), o.SickFlag.IsSet()
}

// HasSickFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasSickFlag() bool {
	if o != nil && o.SickFlag.IsSet() {
		return true
	}

	return false
}

// SetSickFlag gets a reference to the given NullableBool and assigns it to the SickFlag field.
func (o *TimeAccrual) SetSickFlag(v bool) {
	o.SickFlag.Set(&v)
}

// SetSickFlagNil sets the value for SickFlag to be an explicit nil
func (o *TimeAccrual) SetSickFlagNil() {
	o.SickFlag.Set(nil)
}

// UnsetSickFlag ensures that no value is present for SickFlag, not even an explicit nil
func (o *TimeAccrual) UnsetSickFlag() {
	o.SickFlag.Unset()
}

// GetSickAvailableType returns the SickAvailableType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetSickAvailableType() string {
	if o == nil || IsNil(o.SickAvailableType.Get()) {
		var ret string
		return ret
	}
	return *o.SickAvailableType.Get()
}

// GetSickAvailableTypeOk returns a tuple with the SickAvailableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetSickAvailableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SickAvailableType.Get(), o.SickAvailableType.IsSet()
}

// HasSickAvailableType returns a boolean if a field has been set.
func (o *TimeAccrual) HasSickAvailableType() bool {
	if o != nil && o.SickAvailableType.IsSet() {
		return true
	}

	return false
}

// SetSickAvailableType gets a reference to the given NullableString and assigns it to the SickAvailableType field.
func (o *TimeAccrual) SetSickAvailableType(v string) {
	o.SickAvailableType.Set(&v)
}

// SetSickAvailableTypeNil sets the value for SickAvailableType to be an explicit nil
func (o *TimeAccrual) SetSickAvailableTypeNil() {
	o.SickAvailableType.Set(nil)
}

// UnsetSickAvailableType ensures that no value is present for SickAvailableType, not even an explicit nil
func (o *TimeAccrual) UnsetSickAvailableType() {
	o.SickAvailableType.Unset()
}

// GetSickCarryoverAllowedFlag returns the SickCarryoverAllowedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetSickCarryoverAllowedFlag() bool {
	if o == nil || IsNil(o.SickCarryoverAllowedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SickCarryoverAllowedFlag.Get()
}

// GetSickCarryoverAllowedFlagOk returns a tuple with the SickCarryoverAllowedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetSickCarryoverAllowedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SickCarryoverAllowedFlag.Get(), o.SickCarryoverAllowedFlag.IsSet()
}

// HasSickCarryoverAllowedFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasSickCarryoverAllowedFlag() bool {
	if o != nil && o.SickCarryoverAllowedFlag.IsSet() {
		return true
	}

	return false
}

// SetSickCarryoverAllowedFlag gets a reference to the given NullableBool and assigns it to the SickCarryoverAllowedFlag field.
func (o *TimeAccrual) SetSickCarryoverAllowedFlag(v bool) {
	o.SickCarryoverAllowedFlag.Set(&v)
}

// SetSickCarryoverAllowedFlagNil sets the value for SickCarryoverAllowedFlag to be an explicit nil
func (o *TimeAccrual) SetSickCarryoverAllowedFlagNil() {
	o.SickCarryoverAllowedFlag.Set(nil)
}

// UnsetSickCarryoverAllowedFlag ensures that no value is present for SickCarryoverAllowedFlag, not even an explicit nil
func (o *TimeAccrual) UnsetSickCarryoverAllowedFlag() {
	o.SickCarryoverAllowedFlag.Unset()
}

// GetSickCarryoverLimit returns the SickCarryoverLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetSickCarryoverLimit() float64 {
	if o == nil || IsNil(o.SickCarryoverLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.SickCarryoverLimit.Get()
}

// GetSickCarryoverLimitOk returns a tuple with the SickCarryoverLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetSickCarryoverLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SickCarryoverLimit.Get(), o.SickCarryoverLimit.IsSet()
}

// HasSickCarryoverLimit returns a boolean if a field has been set.
func (o *TimeAccrual) HasSickCarryoverLimit() bool {
	if o != nil && o.SickCarryoverLimit.IsSet() {
		return true
	}

	return false
}

// SetSickCarryoverLimit gets a reference to the given NullableFloat64 and assigns it to the SickCarryoverLimit field.
func (o *TimeAccrual) SetSickCarryoverLimit(v float64) {
	o.SickCarryoverLimit.Set(&v)
}

// SetSickCarryoverLimitNil sets the value for SickCarryoverLimit to be an explicit nil
func (o *TimeAccrual) SetSickCarryoverLimitNil() {
	o.SickCarryoverLimit.Set(nil)
}

// UnsetSickCarryoverLimit ensures that no value is present for SickCarryoverLimit, not even an explicit nil
func (o *TimeAccrual) UnsetSickCarryoverLimit() {
	o.SickCarryoverLimit.Unset()
}

// GetPtoFlag returns the PtoFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetPtoFlag() bool {
	if o == nil || IsNil(o.PtoFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PtoFlag.Get()
}

// GetPtoFlagOk returns a tuple with the PtoFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetPtoFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PtoFlag.Get(), o.PtoFlag.IsSet()
}

// HasPtoFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasPtoFlag() bool {
	if o != nil && o.PtoFlag.IsSet() {
		return true
	}

	return false
}

// SetPtoFlag gets a reference to the given NullableBool and assigns it to the PtoFlag field.
func (o *TimeAccrual) SetPtoFlag(v bool) {
	o.PtoFlag.Set(&v)
}

// SetPtoFlagNil sets the value for PtoFlag to be an explicit nil
func (o *TimeAccrual) SetPtoFlagNil() {
	o.PtoFlag.Set(nil)
}

// UnsetPtoFlag ensures that no value is present for PtoFlag, not even an explicit nil
func (o *TimeAccrual) UnsetPtoFlag() {
	o.PtoFlag.Unset()
}

// GetPtoAvailableType returns the PtoAvailableType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetPtoAvailableType() string {
	if o == nil || IsNil(o.PtoAvailableType.Get()) {
		var ret string
		return ret
	}
	return *o.PtoAvailableType.Get()
}

// GetPtoAvailableTypeOk returns a tuple with the PtoAvailableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetPtoAvailableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PtoAvailableType.Get(), o.PtoAvailableType.IsSet()
}

// HasPtoAvailableType returns a boolean if a field has been set.
func (o *TimeAccrual) HasPtoAvailableType() bool {
	if o != nil && o.PtoAvailableType.IsSet() {
		return true
	}

	return false
}

// SetPtoAvailableType gets a reference to the given NullableString and assigns it to the PtoAvailableType field.
func (o *TimeAccrual) SetPtoAvailableType(v string) {
	o.PtoAvailableType.Set(&v)
}

// SetPtoAvailableTypeNil sets the value for PtoAvailableType to be an explicit nil
func (o *TimeAccrual) SetPtoAvailableTypeNil() {
	o.PtoAvailableType.Set(nil)
}

// UnsetPtoAvailableType ensures that no value is present for PtoAvailableType, not even an explicit nil
func (o *TimeAccrual) UnsetPtoAvailableType() {
	o.PtoAvailableType.Unset()
}

// GetPtoCarryoverAllowedFlag returns the PtoCarryoverAllowedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetPtoCarryoverAllowedFlag() bool {
	if o == nil || IsNil(o.PtoCarryoverAllowedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PtoCarryoverAllowedFlag.Get()
}

// GetPtoCarryoverAllowedFlagOk returns a tuple with the PtoCarryoverAllowedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetPtoCarryoverAllowedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PtoCarryoverAllowedFlag.Get(), o.PtoCarryoverAllowedFlag.IsSet()
}

// HasPtoCarryoverAllowedFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasPtoCarryoverAllowedFlag() bool {
	if o != nil && o.PtoCarryoverAllowedFlag.IsSet() {
		return true
	}

	return false
}

// SetPtoCarryoverAllowedFlag gets a reference to the given NullableBool and assigns it to the PtoCarryoverAllowedFlag field.
func (o *TimeAccrual) SetPtoCarryoverAllowedFlag(v bool) {
	o.PtoCarryoverAllowedFlag.Set(&v)
}

// SetPtoCarryoverAllowedFlagNil sets the value for PtoCarryoverAllowedFlag to be an explicit nil
func (o *TimeAccrual) SetPtoCarryoverAllowedFlagNil() {
	o.PtoCarryoverAllowedFlag.Set(nil)
}

// UnsetPtoCarryoverAllowedFlag ensures that no value is present for PtoCarryoverAllowedFlag, not even an explicit nil
func (o *TimeAccrual) UnsetPtoCarryoverAllowedFlag() {
	o.PtoCarryoverAllowedFlag.Unset()
}

// GetPtoCarryoverLimit returns the PtoCarryoverLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetPtoCarryoverLimit() float64 {
	if o == nil || IsNil(o.PtoCarryoverLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.PtoCarryoverLimit.Get()
}

// GetPtoCarryoverLimitOk returns a tuple with the PtoCarryoverLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetPtoCarryoverLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PtoCarryoverLimit.Get(), o.PtoCarryoverLimit.IsSet()
}

// HasPtoCarryoverLimit returns a boolean if a field has been set.
func (o *TimeAccrual) HasPtoCarryoverLimit() bool {
	if o != nil && o.PtoCarryoverLimit.IsSet() {
		return true
	}

	return false
}

// SetPtoCarryoverLimit gets a reference to the given NullableFloat64 and assigns it to the PtoCarryoverLimit field.
func (o *TimeAccrual) SetPtoCarryoverLimit(v float64) {
	o.PtoCarryoverLimit.Set(&v)
}

// SetPtoCarryoverLimitNil sets the value for PtoCarryoverLimit to be an explicit nil
func (o *TimeAccrual) SetPtoCarryoverLimitNil() {
	o.PtoCarryoverLimit.Set(nil)
}

// UnsetPtoCarryoverLimit ensures that no value is present for PtoCarryoverLimit, not even an explicit nil
func (o *TimeAccrual) UnsetPtoCarryoverLimit() {
	o.PtoCarryoverLimit.Unset()
}

// GetHolidayFlag returns the HolidayFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetHolidayFlag() bool {
	if o == nil || IsNil(o.HolidayFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HolidayFlag.Get()
}

// GetHolidayFlagOk returns a tuple with the HolidayFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetHolidayFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HolidayFlag.Get(), o.HolidayFlag.IsSet()
}

// HasHolidayFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasHolidayFlag() bool {
	if o != nil && o.HolidayFlag.IsSet() {
		return true
	}

	return false
}

// SetHolidayFlag gets a reference to the given NullableBool and assigns it to the HolidayFlag field.
func (o *TimeAccrual) SetHolidayFlag(v bool) {
	o.HolidayFlag.Set(&v)
}

// SetHolidayFlagNil sets the value for HolidayFlag to be an explicit nil
func (o *TimeAccrual) SetHolidayFlagNil() {
	o.HolidayFlag.Set(nil)
}

// UnsetHolidayFlag ensures that no value is present for HolidayFlag, not even an explicit nil
func (o *TimeAccrual) UnsetHolidayFlag() {
	o.HolidayFlag.Unset()
}

// GetHolidayAvailableType returns the HolidayAvailableType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetHolidayAvailableType() string {
	if o == nil || IsNil(o.HolidayAvailableType.Get()) {
		var ret string
		return ret
	}
	return *o.HolidayAvailableType.Get()
}

// GetHolidayAvailableTypeOk returns a tuple with the HolidayAvailableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetHolidayAvailableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HolidayAvailableType.Get(), o.HolidayAvailableType.IsSet()
}

// HasHolidayAvailableType returns a boolean if a field has been set.
func (o *TimeAccrual) HasHolidayAvailableType() bool {
	if o != nil && o.HolidayAvailableType.IsSet() {
		return true
	}

	return false
}

// SetHolidayAvailableType gets a reference to the given NullableString and assigns it to the HolidayAvailableType field.
func (o *TimeAccrual) SetHolidayAvailableType(v string) {
	o.HolidayAvailableType.Set(&v)
}

// SetHolidayAvailableTypeNil sets the value for HolidayAvailableType to be an explicit nil
func (o *TimeAccrual) SetHolidayAvailableTypeNil() {
	o.HolidayAvailableType.Set(nil)
}

// UnsetHolidayAvailableType ensures that no value is present for HolidayAvailableType, not even an explicit nil
func (o *TimeAccrual) UnsetHolidayAvailableType() {
	o.HolidayAvailableType.Unset()
}

// GetHolidayCarryoverAllowedFlag returns the HolidayCarryoverAllowedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetHolidayCarryoverAllowedFlag() bool {
	if o == nil || IsNil(o.HolidayCarryoverAllowedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HolidayCarryoverAllowedFlag.Get()
}

// GetHolidayCarryoverAllowedFlagOk returns a tuple with the HolidayCarryoverAllowedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetHolidayCarryoverAllowedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HolidayCarryoverAllowedFlag.Get(), o.HolidayCarryoverAllowedFlag.IsSet()
}

// HasHolidayCarryoverAllowedFlag returns a boolean if a field has been set.
func (o *TimeAccrual) HasHolidayCarryoverAllowedFlag() bool {
	if o != nil && o.HolidayCarryoverAllowedFlag.IsSet() {
		return true
	}

	return false
}

// SetHolidayCarryoverAllowedFlag gets a reference to the given NullableBool and assigns it to the HolidayCarryoverAllowedFlag field.
func (o *TimeAccrual) SetHolidayCarryoverAllowedFlag(v bool) {
	o.HolidayCarryoverAllowedFlag.Set(&v)
}

// SetHolidayCarryoverAllowedFlagNil sets the value for HolidayCarryoverAllowedFlag to be an explicit nil
func (o *TimeAccrual) SetHolidayCarryoverAllowedFlagNil() {
	o.HolidayCarryoverAllowedFlag.Set(nil)
}

// UnsetHolidayCarryoverAllowedFlag ensures that no value is present for HolidayCarryoverAllowedFlag, not even an explicit nil
func (o *TimeAccrual) UnsetHolidayCarryoverAllowedFlag() {
	o.HolidayCarryoverAllowedFlag.Unset()
}

// GetHolidayCarryoverLimit returns the HolidayCarryoverLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeAccrual) GetHolidayCarryoverLimit() float64 {
	if o == nil || IsNil(o.HolidayCarryoverLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.HolidayCarryoverLimit.Get()
}

// GetHolidayCarryoverLimitOk returns a tuple with the HolidayCarryoverLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrual) GetHolidayCarryoverLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HolidayCarryoverLimit.Get(), o.HolidayCarryoverLimit.IsSet()
}

// HasHolidayCarryoverLimit returns a boolean if a field has been set.
func (o *TimeAccrual) HasHolidayCarryoverLimit() bool {
	if o != nil && o.HolidayCarryoverLimit.IsSet() {
		return true
	}

	return false
}

// SetHolidayCarryoverLimit gets a reference to the given NullableFloat64 and assigns it to the HolidayCarryoverLimit field.
func (o *TimeAccrual) SetHolidayCarryoverLimit(v float64) {
	o.HolidayCarryoverLimit.Set(&v)
}

// SetHolidayCarryoverLimitNil sets the value for HolidayCarryoverLimit to be an explicit nil
func (o *TimeAccrual) SetHolidayCarryoverLimitNil() {
	o.HolidayCarryoverLimit.Set(nil)
}

// UnsetHolidayCarryoverLimit ensures that no value is present for HolidayCarryoverLimit, not even an explicit nil
func (o *TimeAccrual) UnsetHolidayCarryoverLimit() {
	o.HolidayCarryoverLimit.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TimeAccrual) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeAccrual) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TimeAccrual) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TimeAccrual) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TimeAccrual) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeAccrual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if o.VacationFlag.IsSet() {
		toSerialize["vacationFlag"] = o.VacationFlag.Get()
	}
	if o.VacationAvailableType.IsSet() {
		toSerialize["vacationAvailableType"] = o.VacationAvailableType.Get()
	}
	if o.VacationCarryoverAllowedFlag.IsSet() {
		toSerialize["vacationCarryoverAllowedFlag"] = o.VacationCarryoverAllowedFlag.Get()
	}
	if o.VacationCarryoverLimit.IsSet() {
		toSerialize["vacationCarryoverLimit"] = o.VacationCarryoverLimit.Get()
	}
	if o.SickFlag.IsSet() {
		toSerialize["sickFlag"] = o.SickFlag.Get()
	}
	if o.SickAvailableType.IsSet() {
		toSerialize["sickAvailableType"] = o.SickAvailableType.Get()
	}
	if o.SickCarryoverAllowedFlag.IsSet() {
		toSerialize["sickCarryoverAllowedFlag"] = o.SickCarryoverAllowedFlag.Get()
	}
	if o.SickCarryoverLimit.IsSet() {
		toSerialize["sickCarryoverLimit"] = o.SickCarryoverLimit.Get()
	}
	if o.PtoFlag.IsSet() {
		toSerialize["ptoFlag"] = o.PtoFlag.Get()
	}
	if o.PtoAvailableType.IsSet() {
		toSerialize["ptoAvailableType"] = o.PtoAvailableType.Get()
	}
	if o.PtoCarryoverAllowedFlag.IsSet() {
		toSerialize["ptoCarryoverAllowedFlag"] = o.PtoCarryoverAllowedFlag.Get()
	}
	if o.PtoCarryoverLimit.IsSet() {
		toSerialize["ptoCarryoverLimit"] = o.PtoCarryoverLimit.Get()
	}
	if o.HolidayFlag.IsSet() {
		toSerialize["holidayFlag"] = o.HolidayFlag.Get()
	}
	if o.HolidayAvailableType.IsSet() {
		toSerialize["holidayAvailableType"] = o.HolidayAvailableType.Get()
	}
	if o.HolidayCarryoverAllowedFlag.IsSet() {
		toSerialize["holidayCarryoverAllowedFlag"] = o.HolidayCarryoverAllowedFlag.Get()
	}
	if o.HolidayCarryoverLimit.IsSet() {
		toSerialize["holidayCarryoverLimit"] = o.HolidayCarryoverLimit.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTimeAccrual struct {
	value *TimeAccrual
	isSet bool
}

func (v NullableTimeAccrual) Get() *TimeAccrual {
	return v.value
}

func (v *NullableTimeAccrual) Set(val *TimeAccrual) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeAccrual) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeAccrual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeAccrual(val *TimeAccrual) *NullableTimeAccrual {
	return &NullableTimeAccrual{value: val, isSet: true}
}

func (v NullableTimeAccrual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeAccrual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
