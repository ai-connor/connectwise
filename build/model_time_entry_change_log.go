/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TimeEntryChangeLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeEntryChangeLog{}

// TimeEntryChangeLog struct for TimeEntryChangeLog
type TimeEntryChangeLog struct {
	// Time Entry Change Log ID.
	Id *int32 `json:"id,omitempty"`
	// Partner ID.
	PartnerId *string `json:"partnerId,omitempty"`
	// Product Instance ID.
	ProductInstanceId *string `json:"productInstanceId,omitempty"`
	// Action.
	Action *string `json:"action,omitempty"`
	// Activity Subject.
	ActivitySubject *string `json:"activitySubject,omitempty"`
	// Actual Utilized Hours.
	ActualUtilizedHrs NullableFloat64 `json:"actualUtilizedHrs,omitempty"`
	// Agreement Adjustment Firm.
	AgreementAdjustmentFirm NullableFloat64 `json:"agreementAdjustmentFirm,omitempty"`
	// Agreement Adjustment Total.
	AgreementAdjustmentTotal NullableFloat64 `json:"agreementAdjustmentTotal,omitempty"`
	// Agreement Amount Covered.
	AgreementAmountCovered NullableFloat64 `json:"agreementAmountCovered,omitempty"`
	// Agreement Hours Covered.
	AgreementHoursCovered NullableFloat64 `json:"agreementHoursCovered,omitempty"`
	// Billable Amount.
	BillableAmount NullableFloat64 `json:"billableAmount,omitempty"`
	// Billable Flag.
	BillableFlag NullableBool `json:"billableFlag,omitempty"`
	// Billable Hours.
	BillableHours NullableFloat64 `json:"billableHours,omitempty"`
	// Billable Utilized Hours.
	BillableUtilizedHours NullableFloat64 `json:"billableUtilizedHours,omitempty"`
	// Member Daily Capacity.
	MemberDailyCapacity NullableFloat64 `json:"memberDailyCapacity,omitempty"`
	// Billable Option.
	BillableOption NullableString `json:"billableOption,omitempty"`
	// Business Group.
	BusinessGroup *string `json:"businessGroup,omitempty"`
	// Location Name.
	LocationName *string `json:"locationName,omitempty"`
	// Charge Code.
	ChargeCode *string `json:"chargeCode,omitempty"`
	// Charge To.
	ChargeTo *string `json:"chargeTo,omitempty"`
	// Charge To Type.
	ChargeToType NullableString `json:"chargeToType,omitempty"`
	// Charge To Record ID.
	ChargeToRecId NullableInt32 `json:"chargeToRecId,omitempty"`
	// Company and Agreement.
	CompanyAndAgreement *string `json:"companyAndAgreement,omitempty"`
	// Company Name.
	CompanyName *string `json:"companyName,omitempty"`
	// Time Start.
	TimeStart *string `json:"timeStart,omitempty"`
	// Time Start UTC.
	TimeStartUtc *string `json:"timeStartUtc,omitempty"`
	// Time End.
	TimeEnd *string `json:"timeEnd,omitempty"`
	// Time End UTC.
	TimeEndUtc *string `json:"timeEndUtc,omitempty"`
	// Date Start.
	DateStart *string `json:"dateStart,omitempty"`
	// Date Invoice.
	DateInvoice *string `json:"dateInvoice,omitempty"`
	// First Name.
	FirstName *string `json:"firstName,omitempty"`
	// Hourly Cost.
	HourlyCost *string `json:"hourlyCost,omitempty"`
	// Hourly Cost in Decimal.
	HourlyCostDecimal NullableFloat64 `json:"hourlyCostDecimal,omitempty"`
	// Hourly Rate.
	HourlyRate NullableFloat64 `json:"hourlyRate,omitempty"`
	// Actual Hours.
	HoursActual NullableFloat64 `json:"hoursActual,omitempty"`
	// Internal Note.
	InternalNote *string `json:"internalNote,omitempty"`
	// Invoice Adjustment Firm.
	InvoiceAdjustmentFirm NullableFloat64 `json:"invoiceAdjustmentFirm,omitempty"`
	// Invoice Adjustment Total.
	InvoiceAdjustmentTotal NullableFloat64 `json:"invoiceAdjustmentTotal,omitempty"`
	// Invoice Flag.
	InvoiceFlag *bool `json:"invoiceFlag,omitempty"`
	// Invoice Number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// Invoice Ready status.
	InvoiceReady *bool `json:"invoiceReady,omitempty"`
	// Last Name.
	LastName *string `json:"lastName,omitempty"`
	// Member ID.
	MemberId *string `json:"memberId,omitempty"`
	// Non-Billable Amount.
	NonBillableAmt NullableFloat64 `json:"nonBillableAmt,omitempty"`
	// Non-Billable Hours.
	NonBillableHrs NullableFloat64 `json:"nonBillableHrs,omitempty"`
	// Notes.
	Notes *string `json:"notes,omitempty"`
	// Opportunity Record ID.
	OpportunityRecId NullableInt32 `json:"opportunityRecId,omitempty"`
	// Option ID.
	OptionId *string `json:"optionId,omitempty"`
	// Project Activity.
	ProjectActivity *string `json:"projectActivity,omitempty"`
	// Project Name.
	ProjectName *string `json:"projectName,omitempty"`
	// Project Phase.
	ProjectPhase *string `json:"projectPhase,omitempty"`
	// Service Request Status.
	ServiceRequestStatus *string `json:"serviceRequestStatus,omitempty"`
	// Service Request Summary.
	ServiceRequestSummary *string `json:"serviceRequestSummary,omitempty"`
	// Territory.
	Territory *string `json:"territory,omitempty"`
	// Time Record ID.
	TimeRecId *int32 `json:"timeRecId,omitempty"`
	// Time Status.
	TimeStatus *string `json:"timeStatus,omitempty"`
	// Utilization Flag.
	UtilizationFlag NullableBool `json:"utilizationFlag,omitempty"`
	// Company Type.
	CompanyType *string `json:"companyType,omitempty"`
	// Current Board of the Ticket.
	TicketCurrentBoard *string `json:"ticketCurrentBoard,omitempty"`
	// Type of the Ticket.
	TicketType *string `json:"ticketType,omitempty"`
	// Subtype of the Ticket.
	TicketSubtype *string `json:"ticketSubtype,omitempty"`
	// Type of the Agreement.
	AgreementType *string `json:"agreementType,omitempty"`
	// Billing Status.
	BillingStatus *string `json:"billingStatus,omitempty"`
	// Processing Status.
	ProcessingStatus *string `json:"processingStatus,omitempty"`
	// Invoiced Hours.
	Invoicedhours NullableFloat64        `json:"invoicedhours,omitempty"`
	Company       *CompanyReference      `json:"company,omitempty"`
	Member        *MemberReference       `json:"member,omitempty"`
	WorkType      *WorkTypeReference     `json:"workType,omitempty"`
	WorkRole      *WorkRoleReference     `json:"workRole,omitempty"`
	Agreement     *AgreementReference    `json:"agreement,omitempty"`
	Invoice       *InvoiceReference      `json:"invoice,omitempty"`
	Ticket        *TicketReference       `json:"ticket,omitempty"`
	Project       *ProjectReference      `json:"project,omitempty"`
	Phase         *ProjectPhaseReference `json:"phase,omitempty"`
	Activity      *ActivityReference     `json:"activity,omitempty"`
	Info          *map[string]string     `json:"_info,omitempty"`
}

// NewTimeEntryChangeLog instantiates a new TimeEntryChangeLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeEntryChangeLog() *TimeEntryChangeLog {
	this := TimeEntryChangeLog{}
	return &this
}

// NewTimeEntryChangeLogWithDefaults instantiates a new TimeEntryChangeLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeEntryChangeLogWithDefaults() *TimeEntryChangeLog {
	this := TimeEntryChangeLog{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TimeEntryChangeLog) SetId(v int32) {
	o.Id = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *TimeEntryChangeLog) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetProductInstanceId returns the ProductInstanceId field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetProductInstanceId() string {
	if o == nil || IsNil(o.ProductInstanceId) {
		var ret string
		return ret
	}
	return *o.ProductInstanceId
}

// GetProductInstanceIdOk returns a tuple with the ProductInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetProductInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductInstanceId) {
		return nil, false
	}
	return o.ProductInstanceId, true
}

// HasProductInstanceId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasProductInstanceId() bool {
	if o != nil && !IsNil(o.ProductInstanceId) {
		return true
	}

	return false
}

// SetProductInstanceId gets a reference to the given string and assigns it to the ProductInstanceId field.
func (o *TimeEntryChangeLog) SetProductInstanceId(v string) {
	o.ProductInstanceId = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *TimeEntryChangeLog) SetAction(v string) {
	o.Action = &v
}

// GetActivitySubject returns the ActivitySubject field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetActivitySubject() string {
	if o == nil || IsNil(o.ActivitySubject) {
		var ret string
		return ret
	}
	return *o.ActivitySubject
}

// GetActivitySubjectOk returns a tuple with the ActivitySubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetActivitySubjectOk() (*string, bool) {
	if o == nil || IsNil(o.ActivitySubject) {
		return nil, false
	}
	return o.ActivitySubject, true
}

// HasActivitySubject returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasActivitySubject() bool {
	if o != nil && !IsNil(o.ActivitySubject) {
		return true
	}

	return false
}

// SetActivitySubject gets a reference to the given string and assigns it to the ActivitySubject field.
func (o *TimeEntryChangeLog) SetActivitySubject(v string) {
	o.ActivitySubject = &v
}

// GetActualUtilizedHrs returns the ActualUtilizedHrs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetActualUtilizedHrs() float64 {
	if o == nil || IsNil(o.ActualUtilizedHrs.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualUtilizedHrs.Get()
}

// GetActualUtilizedHrsOk returns a tuple with the ActualUtilizedHrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetActualUtilizedHrsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualUtilizedHrs.Get(), o.ActualUtilizedHrs.IsSet()
}

// HasActualUtilizedHrs returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasActualUtilizedHrs() bool {
	if o != nil && o.ActualUtilizedHrs.IsSet() {
		return true
	}

	return false
}

// SetActualUtilizedHrs gets a reference to the given NullableFloat64 and assigns it to the ActualUtilizedHrs field.
func (o *TimeEntryChangeLog) SetActualUtilizedHrs(v float64) {
	o.ActualUtilizedHrs.Set(&v)
}

// SetActualUtilizedHrsNil sets the value for ActualUtilizedHrs to be an explicit nil
func (o *TimeEntryChangeLog) SetActualUtilizedHrsNil() {
	o.ActualUtilizedHrs.Set(nil)
}

// UnsetActualUtilizedHrs ensures that no value is present for ActualUtilizedHrs, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetActualUtilizedHrs() {
	o.ActualUtilizedHrs.Unset()
}

// GetAgreementAdjustmentFirm returns the AgreementAdjustmentFirm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetAgreementAdjustmentFirm() float64 {
	if o == nil || IsNil(o.AgreementAdjustmentFirm.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAdjustmentFirm.Get()
}

// GetAgreementAdjustmentFirmOk returns a tuple with the AgreementAdjustmentFirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetAgreementAdjustmentFirmOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAdjustmentFirm.Get(), o.AgreementAdjustmentFirm.IsSet()
}

// HasAgreementAdjustmentFirm returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAgreementAdjustmentFirm() bool {
	if o != nil && o.AgreementAdjustmentFirm.IsSet() {
		return true
	}

	return false
}

// SetAgreementAdjustmentFirm gets a reference to the given NullableFloat64 and assigns it to the AgreementAdjustmentFirm field.
func (o *TimeEntryChangeLog) SetAgreementAdjustmentFirm(v float64) {
	o.AgreementAdjustmentFirm.Set(&v)
}

// SetAgreementAdjustmentFirmNil sets the value for AgreementAdjustmentFirm to be an explicit nil
func (o *TimeEntryChangeLog) SetAgreementAdjustmentFirmNil() {
	o.AgreementAdjustmentFirm.Set(nil)
}

// UnsetAgreementAdjustmentFirm ensures that no value is present for AgreementAdjustmentFirm, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetAgreementAdjustmentFirm() {
	o.AgreementAdjustmentFirm.Unset()
}

// GetAgreementAdjustmentTotal returns the AgreementAdjustmentTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetAgreementAdjustmentTotal() float64 {
	if o == nil || IsNil(o.AgreementAdjustmentTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAdjustmentTotal.Get()
}

// GetAgreementAdjustmentTotalOk returns a tuple with the AgreementAdjustmentTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetAgreementAdjustmentTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAdjustmentTotal.Get(), o.AgreementAdjustmentTotal.IsSet()
}

// HasAgreementAdjustmentTotal returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAgreementAdjustmentTotal() bool {
	if o != nil && o.AgreementAdjustmentTotal.IsSet() {
		return true
	}

	return false
}

// SetAgreementAdjustmentTotal gets a reference to the given NullableFloat64 and assigns it to the AgreementAdjustmentTotal field.
func (o *TimeEntryChangeLog) SetAgreementAdjustmentTotal(v float64) {
	o.AgreementAdjustmentTotal.Set(&v)
}

// SetAgreementAdjustmentTotalNil sets the value for AgreementAdjustmentTotal to be an explicit nil
func (o *TimeEntryChangeLog) SetAgreementAdjustmentTotalNil() {
	o.AgreementAdjustmentTotal.Set(nil)
}

// UnsetAgreementAdjustmentTotal ensures that no value is present for AgreementAdjustmentTotal, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetAgreementAdjustmentTotal() {
	o.AgreementAdjustmentTotal.Unset()
}

// GetAgreementAmountCovered returns the AgreementAmountCovered field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetAgreementAmountCovered() float64 {
	if o == nil || IsNil(o.AgreementAmountCovered.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAmountCovered.Get()
}

// GetAgreementAmountCoveredOk returns a tuple with the AgreementAmountCovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetAgreementAmountCoveredOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAmountCovered.Get(), o.AgreementAmountCovered.IsSet()
}

// HasAgreementAmountCovered returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAgreementAmountCovered() bool {
	if o != nil && o.AgreementAmountCovered.IsSet() {
		return true
	}

	return false
}

// SetAgreementAmountCovered gets a reference to the given NullableFloat64 and assigns it to the AgreementAmountCovered field.
func (o *TimeEntryChangeLog) SetAgreementAmountCovered(v float64) {
	o.AgreementAmountCovered.Set(&v)
}

// SetAgreementAmountCoveredNil sets the value for AgreementAmountCovered to be an explicit nil
func (o *TimeEntryChangeLog) SetAgreementAmountCoveredNil() {
	o.AgreementAmountCovered.Set(nil)
}

// UnsetAgreementAmountCovered ensures that no value is present for AgreementAmountCovered, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetAgreementAmountCovered() {
	o.AgreementAmountCovered.Unset()
}

// GetAgreementHoursCovered returns the AgreementHoursCovered field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetAgreementHoursCovered() float64 {
	if o == nil || IsNil(o.AgreementHoursCovered.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementHoursCovered.Get()
}

// GetAgreementHoursCoveredOk returns a tuple with the AgreementHoursCovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetAgreementHoursCoveredOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementHoursCovered.Get(), o.AgreementHoursCovered.IsSet()
}

// HasAgreementHoursCovered returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAgreementHoursCovered() bool {
	if o != nil && o.AgreementHoursCovered.IsSet() {
		return true
	}

	return false
}

// SetAgreementHoursCovered gets a reference to the given NullableFloat64 and assigns it to the AgreementHoursCovered field.
func (o *TimeEntryChangeLog) SetAgreementHoursCovered(v float64) {
	o.AgreementHoursCovered.Set(&v)
}

// SetAgreementHoursCoveredNil sets the value for AgreementHoursCovered to be an explicit nil
func (o *TimeEntryChangeLog) SetAgreementHoursCoveredNil() {
	o.AgreementHoursCovered.Set(nil)
}

// UnsetAgreementHoursCovered ensures that no value is present for AgreementHoursCovered, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetAgreementHoursCovered() {
	o.AgreementHoursCovered.Unset()
}

// GetBillableAmount returns the BillableAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetBillableAmount() float64 {
	if o == nil || IsNil(o.BillableAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillableAmount.Get()
}

// GetBillableAmountOk returns a tuple with the BillableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetBillableAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableAmount.Get(), o.BillableAmount.IsSet()
}

// HasBillableAmount returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBillableAmount() bool {
	if o != nil && o.BillableAmount.IsSet() {
		return true
	}

	return false
}

// SetBillableAmount gets a reference to the given NullableFloat64 and assigns it to the BillableAmount field.
func (o *TimeEntryChangeLog) SetBillableAmount(v float64) {
	o.BillableAmount.Set(&v)
}

// SetBillableAmountNil sets the value for BillableAmount to be an explicit nil
func (o *TimeEntryChangeLog) SetBillableAmountNil() {
	o.BillableAmount.Set(nil)
}

// UnsetBillableAmount ensures that no value is present for BillableAmount, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetBillableAmount() {
	o.BillableAmount.Unset()
}

// GetBillableFlag returns the BillableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetBillableFlag() bool {
	if o == nil || IsNil(o.BillableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillableFlag.Get()
}

// GetBillableFlagOk returns a tuple with the BillableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetBillableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableFlag.Get(), o.BillableFlag.IsSet()
}

// HasBillableFlag returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBillableFlag() bool {
	if o != nil && o.BillableFlag.IsSet() {
		return true
	}

	return false
}

// SetBillableFlag gets a reference to the given NullableBool and assigns it to the BillableFlag field.
func (o *TimeEntryChangeLog) SetBillableFlag(v bool) {
	o.BillableFlag.Set(&v)
}

// SetBillableFlagNil sets the value for BillableFlag to be an explicit nil
func (o *TimeEntryChangeLog) SetBillableFlagNil() {
	o.BillableFlag.Set(nil)
}

// UnsetBillableFlag ensures that no value is present for BillableFlag, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetBillableFlag() {
	o.BillableFlag.Unset()
}

// GetBillableHours returns the BillableHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetBillableHours() float64 {
	if o == nil || IsNil(o.BillableHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BillableHours.Get()
}

// GetBillableHoursOk returns a tuple with the BillableHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetBillableHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableHours.Get(), o.BillableHours.IsSet()
}

// HasBillableHours returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBillableHours() bool {
	if o != nil && o.BillableHours.IsSet() {
		return true
	}

	return false
}

// SetBillableHours gets a reference to the given NullableFloat64 and assigns it to the BillableHours field.
func (o *TimeEntryChangeLog) SetBillableHours(v float64) {
	o.BillableHours.Set(&v)
}

// SetBillableHoursNil sets the value for BillableHours to be an explicit nil
func (o *TimeEntryChangeLog) SetBillableHoursNil() {
	o.BillableHours.Set(nil)
}

// UnsetBillableHours ensures that no value is present for BillableHours, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetBillableHours() {
	o.BillableHours.Unset()
}

// GetBillableUtilizedHours returns the BillableUtilizedHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetBillableUtilizedHours() float64 {
	if o == nil || IsNil(o.BillableUtilizedHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BillableUtilizedHours.Get()
}

// GetBillableUtilizedHoursOk returns a tuple with the BillableUtilizedHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetBillableUtilizedHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableUtilizedHours.Get(), o.BillableUtilizedHours.IsSet()
}

// HasBillableUtilizedHours returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBillableUtilizedHours() bool {
	if o != nil && o.BillableUtilizedHours.IsSet() {
		return true
	}

	return false
}

// SetBillableUtilizedHours gets a reference to the given NullableFloat64 and assigns it to the BillableUtilizedHours field.
func (o *TimeEntryChangeLog) SetBillableUtilizedHours(v float64) {
	o.BillableUtilizedHours.Set(&v)
}

// SetBillableUtilizedHoursNil sets the value for BillableUtilizedHours to be an explicit nil
func (o *TimeEntryChangeLog) SetBillableUtilizedHoursNil() {
	o.BillableUtilizedHours.Set(nil)
}

// UnsetBillableUtilizedHours ensures that no value is present for BillableUtilizedHours, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetBillableUtilizedHours() {
	o.BillableUtilizedHours.Unset()
}

// GetMemberDailyCapacity returns the MemberDailyCapacity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetMemberDailyCapacity() float64 {
	if o == nil || IsNil(o.MemberDailyCapacity.Get()) {
		var ret float64
		return ret
	}
	return *o.MemberDailyCapacity.Get()
}

// GetMemberDailyCapacityOk returns a tuple with the MemberDailyCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetMemberDailyCapacityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberDailyCapacity.Get(), o.MemberDailyCapacity.IsSet()
}

// HasMemberDailyCapacity returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasMemberDailyCapacity() bool {
	if o != nil && o.MemberDailyCapacity.IsSet() {
		return true
	}

	return false
}

// SetMemberDailyCapacity gets a reference to the given NullableFloat64 and assigns it to the MemberDailyCapacity field.
func (o *TimeEntryChangeLog) SetMemberDailyCapacity(v float64) {
	o.MemberDailyCapacity.Set(&v)
}

// SetMemberDailyCapacityNil sets the value for MemberDailyCapacity to be an explicit nil
func (o *TimeEntryChangeLog) SetMemberDailyCapacityNil() {
	o.MemberDailyCapacity.Set(nil)
}

// UnsetMemberDailyCapacity ensures that no value is present for MemberDailyCapacity, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetMemberDailyCapacity() {
	o.MemberDailyCapacity.Unset()
}

// GetBillableOption returns the BillableOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetBillableOption() string {
	if o == nil || IsNil(o.BillableOption.Get()) {
		var ret string
		return ret
	}
	return *o.BillableOption.Get()
}

// GetBillableOptionOk returns a tuple with the BillableOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetBillableOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableOption.Get(), o.BillableOption.IsSet()
}

// HasBillableOption returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBillableOption() bool {
	if o != nil && o.BillableOption.IsSet() {
		return true
	}

	return false
}

// SetBillableOption gets a reference to the given NullableString and assigns it to the BillableOption field.
func (o *TimeEntryChangeLog) SetBillableOption(v string) {
	o.BillableOption.Set(&v)
}

// SetBillableOptionNil sets the value for BillableOption to be an explicit nil
func (o *TimeEntryChangeLog) SetBillableOptionNil() {
	o.BillableOption.Set(nil)
}

// UnsetBillableOption ensures that no value is present for BillableOption, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetBillableOption() {
	o.BillableOption.Unset()
}

// GetBusinessGroup returns the BusinessGroup field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetBusinessGroup() string {
	if o == nil || IsNil(o.BusinessGroup) {
		var ret string
		return ret
	}
	return *o.BusinessGroup
}

// GetBusinessGroupOk returns a tuple with the BusinessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetBusinessGroupOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessGroup) {
		return nil, false
	}
	return o.BusinessGroup, true
}

// HasBusinessGroup returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBusinessGroup() bool {
	if o != nil && !IsNil(o.BusinessGroup) {
		return true
	}

	return false
}

// SetBusinessGroup gets a reference to the given string and assigns it to the BusinessGroup field.
func (o *TimeEntryChangeLog) SetBusinessGroup(v string) {
	o.BusinessGroup = &v
}

// GetLocationName returns the LocationName field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetLocationName() string {
	if o == nil || IsNil(o.LocationName) {
		var ret string
		return ret
	}
	return *o.LocationName
}

// GetLocationNameOk returns a tuple with the LocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetLocationNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocationName) {
		return nil, false
	}
	return o.LocationName, true
}

// HasLocationName returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasLocationName() bool {
	if o != nil && !IsNil(o.LocationName) {
		return true
	}

	return false
}

// SetLocationName gets a reference to the given string and assigns it to the LocationName field.
func (o *TimeEntryChangeLog) SetLocationName(v string) {
	o.LocationName = &v
}

// GetChargeCode returns the ChargeCode field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetChargeCode() string {
	if o == nil || IsNil(o.ChargeCode) {
		var ret string
		return ret
	}
	return *o.ChargeCode
}

// GetChargeCodeOk returns a tuple with the ChargeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetChargeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeCode) {
		return nil, false
	}
	return o.ChargeCode, true
}

// HasChargeCode returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasChargeCode() bool {
	if o != nil && !IsNil(o.ChargeCode) {
		return true
	}

	return false
}

// SetChargeCode gets a reference to the given string and assigns it to the ChargeCode field.
func (o *TimeEntryChangeLog) SetChargeCode(v string) {
	o.ChargeCode = &v
}

// GetChargeTo returns the ChargeTo field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetChargeTo() string {
	if o == nil || IsNil(o.ChargeTo) {
		var ret string
		return ret
	}
	return *o.ChargeTo
}

// GetChargeToOk returns a tuple with the ChargeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetChargeToOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeTo) {
		return nil, false
	}
	return o.ChargeTo, true
}

// HasChargeTo returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasChargeTo() bool {
	if o != nil && !IsNil(o.ChargeTo) {
		return true
	}

	return false
}

// SetChargeTo gets a reference to the given string and assigns it to the ChargeTo field.
func (o *TimeEntryChangeLog) SetChargeTo(v string) {
	o.ChargeTo = &v
}

// GetChargeToType returns the ChargeToType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetChargeToType() string {
	if o == nil || IsNil(o.ChargeToType.Get()) {
		var ret string
		return ret
	}
	return *o.ChargeToType.Get()
}

// GetChargeToTypeOk returns a tuple with the ChargeToType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetChargeToTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeToType.Get(), o.ChargeToType.IsSet()
}

// HasChargeToType returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasChargeToType() bool {
	if o != nil && o.ChargeToType.IsSet() {
		return true
	}

	return false
}

// SetChargeToType gets a reference to the given NullableString and assigns it to the ChargeToType field.
func (o *TimeEntryChangeLog) SetChargeToType(v string) {
	o.ChargeToType.Set(&v)
}

// SetChargeToTypeNil sets the value for ChargeToType to be an explicit nil
func (o *TimeEntryChangeLog) SetChargeToTypeNil() {
	o.ChargeToType.Set(nil)
}

// UnsetChargeToType ensures that no value is present for ChargeToType, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetChargeToType() {
	o.ChargeToType.Unset()
}

// GetChargeToRecId returns the ChargeToRecId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetChargeToRecId() int32 {
	if o == nil || IsNil(o.ChargeToRecId.Get()) {
		var ret int32
		return ret
	}
	return *o.ChargeToRecId.Get()
}

// GetChargeToRecIdOk returns a tuple with the ChargeToRecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetChargeToRecIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeToRecId.Get(), o.ChargeToRecId.IsSet()
}

// HasChargeToRecId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasChargeToRecId() bool {
	if o != nil && o.ChargeToRecId.IsSet() {
		return true
	}

	return false
}

// SetChargeToRecId gets a reference to the given NullableInt32 and assigns it to the ChargeToRecId field.
func (o *TimeEntryChangeLog) SetChargeToRecId(v int32) {
	o.ChargeToRecId.Set(&v)
}

// SetChargeToRecIdNil sets the value for ChargeToRecId to be an explicit nil
func (o *TimeEntryChangeLog) SetChargeToRecIdNil() {
	o.ChargeToRecId.Set(nil)
}

// UnsetChargeToRecId ensures that no value is present for ChargeToRecId, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetChargeToRecId() {
	o.ChargeToRecId.Unset()
}

// GetCompanyAndAgreement returns the CompanyAndAgreement field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetCompanyAndAgreement() string {
	if o == nil || IsNil(o.CompanyAndAgreement) {
		var ret string
		return ret
	}
	return *o.CompanyAndAgreement
}

// GetCompanyAndAgreementOk returns a tuple with the CompanyAndAgreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetCompanyAndAgreementOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyAndAgreement) {
		return nil, false
	}
	return o.CompanyAndAgreement, true
}

// HasCompanyAndAgreement returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasCompanyAndAgreement() bool {
	if o != nil && !IsNil(o.CompanyAndAgreement) {
		return true
	}

	return false
}

// SetCompanyAndAgreement gets a reference to the given string and assigns it to the CompanyAndAgreement field.
func (o *TimeEntryChangeLog) SetCompanyAndAgreement(v string) {
	o.CompanyAndAgreement = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *TimeEntryChangeLog) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetTimeStart returns the TimeStart field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTimeStart() string {
	if o == nil || IsNil(o.TimeStart) {
		var ret string
		return ret
	}
	return *o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTimeStartOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStart) {
		return nil, false
	}
	return o.TimeStart, true
}

// HasTimeStart returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTimeStart() bool {
	if o != nil && !IsNil(o.TimeStart) {
		return true
	}

	return false
}

// SetTimeStart gets a reference to the given string and assigns it to the TimeStart field.
func (o *TimeEntryChangeLog) SetTimeStart(v string) {
	o.TimeStart = &v
}

// GetTimeStartUtc returns the TimeStartUtc field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTimeStartUtc() string {
	if o == nil || IsNil(o.TimeStartUtc) {
		var ret string
		return ret
	}
	return *o.TimeStartUtc
}

// GetTimeStartUtcOk returns a tuple with the TimeStartUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTimeStartUtcOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStartUtc) {
		return nil, false
	}
	return o.TimeStartUtc, true
}

// HasTimeStartUtc returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTimeStartUtc() bool {
	if o != nil && !IsNil(o.TimeStartUtc) {
		return true
	}

	return false
}

// SetTimeStartUtc gets a reference to the given string and assigns it to the TimeStartUtc field.
func (o *TimeEntryChangeLog) SetTimeStartUtc(v string) {
	o.TimeStartUtc = &v
}

// GetTimeEnd returns the TimeEnd field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTimeEnd() string {
	if o == nil || IsNil(o.TimeEnd) {
		var ret string
		return ret
	}
	return *o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTimeEndOk() (*string, bool) {
	if o == nil || IsNil(o.TimeEnd) {
		return nil, false
	}
	return o.TimeEnd, true
}

// HasTimeEnd returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTimeEnd() bool {
	if o != nil && !IsNil(o.TimeEnd) {
		return true
	}

	return false
}

// SetTimeEnd gets a reference to the given string and assigns it to the TimeEnd field.
func (o *TimeEntryChangeLog) SetTimeEnd(v string) {
	o.TimeEnd = &v
}

// GetTimeEndUtc returns the TimeEndUtc field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTimeEndUtc() string {
	if o == nil || IsNil(o.TimeEndUtc) {
		var ret string
		return ret
	}
	return *o.TimeEndUtc
}

// GetTimeEndUtcOk returns a tuple with the TimeEndUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTimeEndUtcOk() (*string, bool) {
	if o == nil || IsNil(o.TimeEndUtc) {
		return nil, false
	}
	return o.TimeEndUtc, true
}

// HasTimeEndUtc returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTimeEndUtc() bool {
	if o != nil && !IsNil(o.TimeEndUtc) {
		return true
	}

	return false
}

// SetTimeEndUtc gets a reference to the given string and assigns it to the TimeEndUtc field.
func (o *TimeEntryChangeLog) SetTimeEndUtc(v string) {
	o.TimeEndUtc = &v
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetDateStart() string {
	if o == nil || IsNil(o.DateStart) {
		var ret string
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetDateStartOk() (*string, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given string and assigns it to the DateStart field.
func (o *TimeEntryChangeLog) SetDateStart(v string) {
	o.DateStart = &v
}

// GetDateInvoice returns the DateInvoice field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetDateInvoice() string {
	if o == nil || IsNil(o.DateInvoice) {
		var ret string
		return ret
	}
	return *o.DateInvoice
}

// GetDateInvoiceOk returns a tuple with the DateInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetDateInvoiceOk() (*string, bool) {
	if o == nil || IsNil(o.DateInvoice) {
		return nil, false
	}
	return o.DateInvoice, true
}

// HasDateInvoice returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasDateInvoice() bool {
	if o != nil && !IsNil(o.DateInvoice) {
		return true
	}

	return false
}

// SetDateInvoice gets a reference to the given string and assigns it to the DateInvoice field.
func (o *TimeEntryChangeLog) SetDateInvoice(v string) {
	o.DateInvoice = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *TimeEntryChangeLog) SetFirstName(v string) {
	o.FirstName = &v
}

// GetHourlyCost returns the HourlyCost field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetHourlyCost() string {
	if o == nil || IsNil(o.HourlyCost) {
		var ret string
		return ret
	}
	return *o.HourlyCost
}

// GetHourlyCostOk returns a tuple with the HourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetHourlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.HourlyCost) {
		return nil, false
	}
	return o.HourlyCost, true
}

// HasHourlyCost returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasHourlyCost() bool {
	if o != nil && !IsNil(o.HourlyCost) {
		return true
	}

	return false
}

// SetHourlyCost gets a reference to the given string and assigns it to the HourlyCost field.
func (o *TimeEntryChangeLog) SetHourlyCost(v string) {
	o.HourlyCost = &v
}

// GetHourlyCostDecimal returns the HourlyCostDecimal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetHourlyCostDecimal() float64 {
	if o == nil || IsNil(o.HourlyCostDecimal.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyCostDecimal.Get()
}

// GetHourlyCostDecimalOk returns a tuple with the HourlyCostDecimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetHourlyCostDecimalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyCostDecimal.Get(), o.HourlyCostDecimal.IsSet()
}

// HasHourlyCostDecimal returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasHourlyCostDecimal() bool {
	if o != nil && o.HourlyCostDecimal.IsSet() {
		return true
	}

	return false
}

// SetHourlyCostDecimal gets a reference to the given NullableFloat64 and assigns it to the HourlyCostDecimal field.
func (o *TimeEntryChangeLog) SetHourlyCostDecimal(v float64) {
	o.HourlyCostDecimal.Set(&v)
}

// SetHourlyCostDecimalNil sets the value for HourlyCostDecimal to be an explicit nil
func (o *TimeEntryChangeLog) SetHourlyCostDecimalNil() {
	o.HourlyCostDecimal.Set(nil)
}

// UnsetHourlyCostDecimal ensures that no value is present for HourlyCostDecimal, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetHourlyCostDecimal() {
	o.HourlyCostDecimal.Unset()
}

// GetHourlyRate returns the HourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetHourlyRate() float64 {
	if o == nil || IsNil(o.HourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyRate.Get()
}

// GetHourlyRateOk returns a tuple with the HourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyRate.Get(), o.HourlyRate.IsSet()
}

// HasHourlyRate returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasHourlyRate() bool {
	if o != nil && o.HourlyRate.IsSet() {
		return true
	}

	return false
}

// SetHourlyRate gets a reference to the given NullableFloat64 and assigns it to the HourlyRate field.
func (o *TimeEntryChangeLog) SetHourlyRate(v float64) {
	o.HourlyRate.Set(&v)
}

// SetHourlyRateNil sets the value for HourlyRate to be an explicit nil
func (o *TimeEntryChangeLog) SetHourlyRateNil() {
	o.HourlyRate.Set(nil)
}

// UnsetHourlyRate ensures that no value is present for HourlyRate, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetHourlyRate() {
	o.HourlyRate.Unset()
}

// GetHoursActual returns the HoursActual field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetHoursActual() float64 {
	if o == nil || IsNil(o.HoursActual.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursActual.Get()
}

// GetHoursActualOk returns a tuple with the HoursActual field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetHoursActualOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursActual.Get(), o.HoursActual.IsSet()
}

// HasHoursActual returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasHoursActual() bool {
	if o != nil && o.HoursActual.IsSet() {
		return true
	}

	return false
}

// SetHoursActual gets a reference to the given NullableFloat64 and assigns it to the HoursActual field.
func (o *TimeEntryChangeLog) SetHoursActual(v float64) {
	o.HoursActual.Set(&v)
}

// SetHoursActualNil sets the value for HoursActual to be an explicit nil
func (o *TimeEntryChangeLog) SetHoursActualNil() {
	o.HoursActual.Set(nil)
}

// UnsetHoursActual ensures that no value is present for HoursActual, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetHoursActual() {
	o.HoursActual.Unset()
}

// GetInternalNote returns the InternalNote field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetInternalNote() string {
	if o == nil || IsNil(o.InternalNote) {
		var ret string
		return ret
	}
	return *o.InternalNote
}

// GetInternalNoteOk returns a tuple with the InternalNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetInternalNoteOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNote) {
		return nil, false
	}
	return o.InternalNote, true
}

// HasInternalNote returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInternalNote() bool {
	if o != nil && !IsNil(o.InternalNote) {
		return true
	}

	return false
}

// SetInternalNote gets a reference to the given string and assigns it to the InternalNote field.
func (o *TimeEntryChangeLog) SetInternalNote(v string) {
	o.InternalNote = &v
}

// GetInvoiceAdjustmentFirm returns the InvoiceAdjustmentFirm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetInvoiceAdjustmentFirm() float64 {
	if o == nil || IsNil(o.InvoiceAdjustmentFirm.Get()) {
		var ret float64
		return ret
	}
	return *o.InvoiceAdjustmentFirm.Get()
}

// GetInvoiceAdjustmentFirmOk returns a tuple with the InvoiceAdjustmentFirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetInvoiceAdjustmentFirmOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceAdjustmentFirm.Get(), o.InvoiceAdjustmentFirm.IsSet()
}

// HasInvoiceAdjustmentFirm returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoiceAdjustmentFirm() bool {
	if o != nil && o.InvoiceAdjustmentFirm.IsSet() {
		return true
	}

	return false
}

// SetInvoiceAdjustmentFirm gets a reference to the given NullableFloat64 and assigns it to the InvoiceAdjustmentFirm field.
func (o *TimeEntryChangeLog) SetInvoiceAdjustmentFirm(v float64) {
	o.InvoiceAdjustmentFirm.Set(&v)
}

// SetInvoiceAdjustmentFirmNil sets the value for InvoiceAdjustmentFirm to be an explicit nil
func (o *TimeEntryChangeLog) SetInvoiceAdjustmentFirmNil() {
	o.InvoiceAdjustmentFirm.Set(nil)
}

// UnsetInvoiceAdjustmentFirm ensures that no value is present for InvoiceAdjustmentFirm, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetInvoiceAdjustmentFirm() {
	o.InvoiceAdjustmentFirm.Unset()
}

// GetInvoiceAdjustmentTotal returns the InvoiceAdjustmentTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetInvoiceAdjustmentTotal() float64 {
	if o == nil || IsNil(o.InvoiceAdjustmentTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.InvoiceAdjustmentTotal.Get()
}

// GetInvoiceAdjustmentTotalOk returns a tuple with the InvoiceAdjustmentTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetInvoiceAdjustmentTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceAdjustmentTotal.Get(), o.InvoiceAdjustmentTotal.IsSet()
}

// HasInvoiceAdjustmentTotal returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoiceAdjustmentTotal() bool {
	if o != nil && o.InvoiceAdjustmentTotal.IsSet() {
		return true
	}

	return false
}

// SetInvoiceAdjustmentTotal gets a reference to the given NullableFloat64 and assigns it to the InvoiceAdjustmentTotal field.
func (o *TimeEntryChangeLog) SetInvoiceAdjustmentTotal(v float64) {
	o.InvoiceAdjustmentTotal.Set(&v)
}

// SetInvoiceAdjustmentTotalNil sets the value for InvoiceAdjustmentTotal to be an explicit nil
func (o *TimeEntryChangeLog) SetInvoiceAdjustmentTotalNil() {
	o.InvoiceAdjustmentTotal.Set(nil)
}

// UnsetInvoiceAdjustmentTotal ensures that no value is present for InvoiceAdjustmentTotal, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetInvoiceAdjustmentTotal() {
	o.InvoiceAdjustmentTotal.Unset()
}

// GetInvoiceFlag returns the InvoiceFlag field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetInvoiceFlag() bool {
	if o == nil || IsNil(o.InvoiceFlag) {
		var ret bool
		return ret
	}
	return *o.InvoiceFlag
}

// GetInvoiceFlagOk returns a tuple with the InvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetInvoiceFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.InvoiceFlag) {
		return nil, false
	}
	return o.InvoiceFlag, true
}

// HasInvoiceFlag returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoiceFlag() bool {
	if o != nil && !IsNil(o.InvoiceFlag) {
		return true
	}

	return false
}

// SetInvoiceFlag gets a reference to the given bool and assigns it to the InvoiceFlag field.
func (o *TimeEntryChangeLog) SetInvoiceFlag(v bool) {
	o.InvoiceFlag = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *TimeEntryChangeLog) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetInvoiceReady returns the InvoiceReady field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetInvoiceReady() bool {
	if o == nil || IsNil(o.InvoiceReady) {
		var ret bool
		return ret
	}
	return *o.InvoiceReady
}

// GetInvoiceReadyOk returns a tuple with the InvoiceReady field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetInvoiceReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.InvoiceReady) {
		return nil, false
	}
	return o.InvoiceReady, true
}

// HasInvoiceReady returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoiceReady() bool {
	if o != nil && !IsNil(o.InvoiceReady) {
		return true
	}

	return false
}

// SetInvoiceReady gets a reference to the given bool and assigns it to the InvoiceReady field.
func (o *TimeEntryChangeLog) SetInvoiceReady(v bool) {
	o.InvoiceReady = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *TimeEntryChangeLog) SetLastName(v string) {
	o.LastName = &v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetMemberId() string {
	if o == nil || IsNil(o.MemberId) {
		var ret string
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetMemberIdOk() (*string, bool) {
	if o == nil || IsNil(o.MemberId) {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasMemberId() bool {
	if o != nil && !IsNil(o.MemberId) {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given string and assigns it to the MemberId field.
func (o *TimeEntryChangeLog) SetMemberId(v string) {
	o.MemberId = &v
}

// GetNonBillableAmt returns the NonBillableAmt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetNonBillableAmt() float64 {
	if o == nil || IsNil(o.NonBillableAmt.Get()) {
		var ret float64
		return ret
	}
	return *o.NonBillableAmt.Get()
}

// GetNonBillableAmtOk returns a tuple with the NonBillableAmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetNonBillableAmtOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonBillableAmt.Get(), o.NonBillableAmt.IsSet()
}

// HasNonBillableAmt returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasNonBillableAmt() bool {
	if o != nil && o.NonBillableAmt.IsSet() {
		return true
	}

	return false
}

// SetNonBillableAmt gets a reference to the given NullableFloat64 and assigns it to the NonBillableAmt field.
func (o *TimeEntryChangeLog) SetNonBillableAmt(v float64) {
	o.NonBillableAmt.Set(&v)
}

// SetNonBillableAmtNil sets the value for NonBillableAmt to be an explicit nil
func (o *TimeEntryChangeLog) SetNonBillableAmtNil() {
	o.NonBillableAmt.Set(nil)
}

// UnsetNonBillableAmt ensures that no value is present for NonBillableAmt, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetNonBillableAmt() {
	o.NonBillableAmt.Unset()
}

// GetNonBillableHrs returns the NonBillableHrs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetNonBillableHrs() float64 {
	if o == nil || IsNil(o.NonBillableHrs.Get()) {
		var ret float64
		return ret
	}
	return *o.NonBillableHrs.Get()
}

// GetNonBillableHrsOk returns a tuple with the NonBillableHrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetNonBillableHrsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonBillableHrs.Get(), o.NonBillableHrs.IsSet()
}

// HasNonBillableHrs returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasNonBillableHrs() bool {
	if o != nil && o.NonBillableHrs.IsSet() {
		return true
	}

	return false
}

// SetNonBillableHrs gets a reference to the given NullableFloat64 and assigns it to the NonBillableHrs field.
func (o *TimeEntryChangeLog) SetNonBillableHrs(v float64) {
	o.NonBillableHrs.Set(&v)
}

// SetNonBillableHrsNil sets the value for NonBillableHrs to be an explicit nil
func (o *TimeEntryChangeLog) SetNonBillableHrsNil() {
	o.NonBillableHrs.Set(nil)
}

// UnsetNonBillableHrs ensures that no value is present for NonBillableHrs, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetNonBillableHrs() {
	o.NonBillableHrs.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TimeEntryChangeLog) SetNotes(v string) {
	o.Notes = &v
}

// GetOpportunityRecId returns the OpportunityRecId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetOpportunityRecId() int32 {
	if o == nil || IsNil(o.OpportunityRecId.Get()) {
		var ret int32
		return ret
	}
	return *o.OpportunityRecId.Get()
}

// GetOpportunityRecIdOk returns a tuple with the OpportunityRecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetOpportunityRecIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityRecId.Get(), o.OpportunityRecId.IsSet()
}

// HasOpportunityRecId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasOpportunityRecId() bool {
	if o != nil && o.OpportunityRecId.IsSet() {
		return true
	}

	return false
}

// SetOpportunityRecId gets a reference to the given NullableInt32 and assigns it to the OpportunityRecId field.
func (o *TimeEntryChangeLog) SetOpportunityRecId(v int32) {
	o.OpportunityRecId.Set(&v)
}

// SetOpportunityRecIdNil sets the value for OpportunityRecId to be an explicit nil
func (o *TimeEntryChangeLog) SetOpportunityRecIdNil() {
	o.OpportunityRecId.Set(nil)
}

// UnsetOpportunityRecId ensures that no value is present for OpportunityRecId, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetOpportunityRecId() {
	o.OpportunityRecId.Unset()
}

// GetOptionId returns the OptionId field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetOptionId() string {
	if o == nil || IsNil(o.OptionId) {
		var ret string
		return ret
	}
	return *o.OptionId
}

// GetOptionIdOk returns a tuple with the OptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetOptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.OptionId) {
		return nil, false
	}
	return o.OptionId, true
}

// HasOptionId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasOptionId() bool {
	if o != nil && !IsNil(o.OptionId) {
		return true
	}

	return false
}

// SetOptionId gets a reference to the given string and assigns it to the OptionId field.
func (o *TimeEntryChangeLog) SetOptionId(v string) {
	o.OptionId = &v
}

// GetProjectActivity returns the ProjectActivity field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetProjectActivity() string {
	if o == nil || IsNil(o.ProjectActivity) {
		var ret string
		return ret
	}
	return *o.ProjectActivity
}

// GetProjectActivityOk returns a tuple with the ProjectActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetProjectActivityOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectActivity) {
		return nil, false
	}
	return o.ProjectActivity, true
}

// HasProjectActivity returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasProjectActivity() bool {
	if o != nil && !IsNil(o.ProjectActivity) {
		return true
	}

	return false
}

// SetProjectActivity gets a reference to the given string and assigns it to the ProjectActivity field.
func (o *TimeEntryChangeLog) SetProjectActivity(v string) {
	o.ProjectActivity = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *TimeEntryChangeLog) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetProjectPhase returns the ProjectPhase field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetProjectPhase() string {
	if o == nil || IsNil(o.ProjectPhase) {
		var ret string
		return ret
	}
	return *o.ProjectPhase
}

// GetProjectPhaseOk returns a tuple with the ProjectPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetProjectPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectPhase) {
		return nil, false
	}
	return o.ProjectPhase, true
}

// HasProjectPhase returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasProjectPhase() bool {
	if o != nil && !IsNil(o.ProjectPhase) {
		return true
	}

	return false
}

// SetProjectPhase gets a reference to the given string and assigns it to the ProjectPhase field.
func (o *TimeEntryChangeLog) SetProjectPhase(v string) {
	o.ProjectPhase = &v
}

// GetServiceRequestStatus returns the ServiceRequestStatus field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetServiceRequestStatus() string {
	if o == nil || IsNil(o.ServiceRequestStatus) {
		var ret string
		return ret
	}
	return *o.ServiceRequestStatus
}

// GetServiceRequestStatusOk returns a tuple with the ServiceRequestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetServiceRequestStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceRequestStatus) {
		return nil, false
	}
	return o.ServiceRequestStatus, true
}

// HasServiceRequestStatus returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasServiceRequestStatus() bool {
	if o != nil && !IsNil(o.ServiceRequestStatus) {
		return true
	}

	return false
}

// SetServiceRequestStatus gets a reference to the given string and assigns it to the ServiceRequestStatus field.
func (o *TimeEntryChangeLog) SetServiceRequestStatus(v string) {
	o.ServiceRequestStatus = &v
}

// GetServiceRequestSummary returns the ServiceRequestSummary field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetServiceRequestSummary() string {
	if o == nil || IsNil(o.ServiceRequestSummary) {
		var ret string
		return ret
	}
	return *o.ServiceRequestSummary
}

// GetServiceRequestSummaryOk returns a tuple with the ServiceRequestSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetServiceRequestSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceRequestSummary) {
		return nil, false
	}
	return o.ServiceRequestSummary, true
}

// HasServiceRequestSummary returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasServiceRequestSummary() bool {
	if o != nil && !IsNil(o.ServiceRequestSummary) {
		return true
	}

	return false
}

// SetServiceRequestSummary gets a reference to the given string and assigns it to the ServiceRequestSummary field.
func (o *TimeEntryChangeLog) SetServiceRequestSummary(v string) {
	o.ServiceRequestSummary = &v
}

// GetTerritory returns the Territory field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTerritory() string {
	if o == nil || IsNil(o.Territory) {
		var ret string
		return ret
	}
	return *o.Territory
}

// GetTerritoryOk returns a tuple with the Territory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTerritoryOk() (*string, bool) {
	if o == nil || IsNil(o.Territory) {
		return nil, false
	}
	return o.Territory, true
}

// HasTerritory returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTerritory() bool {
	if o != nil && !IsNil(o.Territory) {
		return true
	}

	return false
}

// SetTerritory gets a reference to the given string and assigns it to the Territory field.
func (o *TimeEntryChangeLog) SetTerritory(v string) {
	o.Territory = &v
}

// GetTimeRecId returns the TimeRecId field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTimeRecId() int32 {
	if o == nil || IsNil(o.TimeRecId) {
		var ret int32
		return ret
	}
	return *o.TimeRecId
}

// GetTimeRecIdOk returns a tuple with the TimeRecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTimeRecIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeRecId) {
		return nil, false
	}
	return o.TimeRecId, true
}

// HasTimeRecId returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTimeRecId() bool {
	if o != nil && !IsNil(o.TimeRecId) {
		return true
	}

	return false
}

// SetTimeRecId gets a reference to the given int32 and assigns it to the TimeRecId field.
func (o *TimeEntryChangeLog) SetTimeRecId(v int32) {
	o.TimeRecId = &v
}

// GetTimeStatus returns the TimeStatus field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTimeStatus() string {
	if o == nil || IsNil(o.TimeStatus) {
		var ret string
		return ret
	}
	return *o.TimeStatus
}

// GetTimeStatusOk returns a tuple with the TimeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTimeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStatus) {
		return nil, false
	}
	return o.TimeStatus, true
}

// HasTimeStatus returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTimeStatus() bool {
	if o != nil && !IsNil(o.TimeStatus) {
		return true
	}

	return false
}

// SetTimeStatus gets a reference to the given string and assigns it to the TimeStatus field.
func (o *TimeEntryChangeLog) SetTimeStatus(v string) {
	o.TimeStatus = &v
}

// GetUtilizationFlag returns the UtilizationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetUtilizationFlag() bool {
	if o == nil || IsNil(o.UtilizationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UtilizationFlag.Get()
}

// GetUtilizationFlagOk returns a tuple with the UtilizationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetUtilizationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UtilizationFlag.Get(), o.UtilizationFlag.IsSet()
}

// HasUtilizationFlag returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasUtilizationFlag() bool {
	if o != nil && o.UtilizationFlag.IsSet() {
		return true
	}

	return false
}

// SetUtilizationFlag gets a reference to the given NullableBool and assigns it to the UtilizationFlag field.
func (o *TimeEntryChangeLog) SetUtilizationFlag(v bool) {
	o.UtilizationFlag.Set(&v)
}

// SetUtilizationFlagNil sets the value for UtilizationFlag to be an explicit nil
func (o *TimeEntryChangeLog) SetUtilizationFlagNil() {
	o.UtilizationFlag.Set(nil)
}

// UnsetUtilizationFlag ensures that no value is present for UtilizationFlag, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetUtilizationFlag() {
	o.UtilizationFlag.Unset()
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetCompanyType() string {
	if o == nil || IsNil(o.CompanyType) {
		var ret string
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetCompanyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given string and assigns it to the CompanyType field.
func (o *TimeEntryChangeLog) SetCompanyType(v string) {
	o.CompanyType = &v
}

// GetTicketCurrentBoard returns the TicketCurrentBoard field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTicketCurrentBoard() string {
	if o == nil || IsNil(o.TicketCurrentBoard) {
		var ret string
		return ret
	}
	return *o.TicketCurrentBoard
}

// GetTicketCurrentBoardOk returns a tuple with the TicketCurrentBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTicketCurrentBoardOk() (*string, bool) {
	if o == nil || IsNil(o.TicketCurrentBoard) {
		return nil, false
	}
	return o.TicketCurrentBoard, true
}

// HasTicketCurrentBoard returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTicketCurrentBoard() bool {
	if o != nil && !IsNil(o.TicketCurrentBoard) {
		return true
	}

	return false
}

// SetTicketCurrentBoard gets a reference to the given string and assigns it to the TicketCurrentBoard field.
func (o *TimeEntryChangeLog) SetTicketCurrentBoard(v string) {
	o.TicketCurrentBoard = &v
}

// GetTicketType returns the TicketType field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTicketType() string {
	if o == nil || IsNil(o.TicketType) {
		var ret string
		return ret
	}
	return *o.TicketType
}

// GetTicketTypeOk returns a tuple with the TicketType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTicketTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TicketType) {
		return nil, false
	}
	return o.TicketType, true
}

// HasTicketType returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTicketType() bool {
	if o != nil && !IsNil(o.TicketType) {
		return true
	}

	return false
}

// SetTicketType gets a reference to the given string and assigns it to the TicketType field.
func (o *TimeEntryChangeLog) SetTicketType(v string) {
	o.TicketType = &v
}

// GetTicketSubtype returns the TicketSubtype field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTicketSubtype() string {
	if o == nil || IsNil(o.TicketSubtype) {
		var ret string
		return ret
	}
	return *o.TicketSubtype
}

// GetTicketSubtypeOk returns a tuple with the TicketSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTicketSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.TicketSubtype) {
		return nil, false
	}
	return o.TicketSubtype, true
}

// HasTicketSubtype returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTicketSubtype() bool {
	if o != nil && !IsNil(o.TicketSubtype) {
		return true
	}

	return false
}

// SetTicketSubtype gets a reference to the given string and assigns it to the TicketSubtype field.
func (o *TimeEntryChangeLog) SetTicketSubtype(v string) {
	o.TicketSubtype = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetAgreementType() string {
	if o == nil || IsNil(o.AgreementType) {
		var ret string
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetAgreementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given string and assigns it to the AgreementType field.
func (o *TimeEntryChangeLog) SetAgreementType(v string) {
	o.AgreementType = &v
}

// GetBillingStatus returns the BillingStatus field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetBillingStatus() string {
	if o == nil || IsNil(o.BillingStatus) {
		var ret string
		return ret
	}
	return *o.BillingStatus
}

// GetBillingStatusOk returns a tuple with the BillingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetBillingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BillingStatus) {
		return nil, false
	}
	return o.BillingStatus, true
}

// HasBillingStatus returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasBillingStatus() bool {
	if o != nil && !IsNil(o.BillingStatus) {
		return true
	}

	return false
}

// SetBillingStatus gets a reference to the given string and assigns it to the BillingStatus field.
func (o *TimeEntryChangeLog) SetBillingStatus(v string) {
	o.BillingStatus = &v
}

// GetProcessingStatus returns the ProcessingStatus field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetProcessingStatus() string {
	if o == nil || IsNil(o.ProcessingStatus) {
		var ret string
		return ret
	}
	return *o.ProcessingStatus
}

// GetProcessingStatusOk returns a tuple with the ProcessingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetProcessingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingStatus) {
		return nil, false
	}
	return o.ProcessingStatus, true
}

// HasProcessingStatus returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasProcessingStatus() bool {
	if o != nil && !IsNil(o.ProcessingStatus) {
		return true
	}

	return false
}

// SetProcessingStatus gets a reference to the given string and assigns it to the ProcessingStatus field.
func (o *TimeEntryChangeLog) SetProcessingStatus(v string) {
	o.ProcessingStatus = &v
}

// GetInvoicedhours returns the Invoicedhours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntryChangeLog) GetInvoicedhours() float64 {
	if o == nil || IsNil(o.Invoicedhours.Get()) {
		var ret float64
		return ret
	}
	return *o.Invoicedhours.Get()
}

// GetInvoicedhoursOk returns a tuple with the Invoicedhours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntryChangeLog) GetInvoicedhoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invoicedhours.Get(), o.Invoicedhours.IsSet()
}

// HasInvoicedhours returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoicedhours() bool {
	if o != nil && o.Invoicedhours.IsSet() {
		return true
	}

	return false
}

// SetInvoicedhours gets a reference to the given NullableFloat64 and assigns it to the Invoicedhours field.
func (o *TimeEntryChangeLog) SetInvoicedhours(v float64) {
	o.Invoicedhours.Set(&v)
}

// SetInvoicedhoursNil sets the value for Invoicedhours to be an explicit nil
func (o *TimeEntryChangeLog) SetInvoicedhoursNil() {
	o.Invoicedhours.Set(nil)
}

// UnsetInvoicedhours ensures that no value is present for Invoicedhours, not even an explicit nil
func (o *TimeEntryChangeLog) UnsetInvoicedhours() {
	o.Invoicedhours.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *TimeEntryChangeLog) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *TimeEntryChangeLog) SetMember(v MemberReference) {
	o.Member = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *TimeEntryChangeLog) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *TimeEntryChangeLog) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *TimeEntryChangeLog) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *TimeEntryChangeLog) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *TimeEntryChangeLog) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *TimeEntryChangeLog) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.Phase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given ProjectPhaseReference and assigns it to the Phase field.
func (o *TimeEntryChangeLog) SetPhase(v ProjectPhaseReference) {
	o.Phase = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetActivity() ActivityReference {
	if o == nil || IsNil(o.Activity) {
		var ret ActivityReference
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetActivityOk() (*ActivityReference, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given ActivityReference and assigns it to the Activity field.
func (o *TimeEntryChangeLog) SetActivity(v ActivityReference) {
	o.Activity = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TimeEntryChangeLog) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntryChangeLog) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TimeEntryChangeLog) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TimeEntryChangeLog) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TimeEntryChangeLog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeEntryChangeLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partnerId"] = o.PartnerId
	}
	if !IsNil(o.ProductInstanceId) {
		toSerialize["productInstanceId"] = o.ProductInstanceId
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.ActivitySubject) {
		toSerialize["activitySubject"] = o.ActivitySubject
	}
	if o.ActualUtilizedHrs.IsSet() {
		toSerialize["actualUtilizedHrs"] = o.ActualUtilizedHrs.Get()
	}
	if o.AgreementAdjustmentFirm.IsSet() {
		toSerialize["agreementAdjustmentFirm"] = o.AgreementAdjustmentFirm.Get()
	}
	if o.AgreementAdjustmentTotal.IsSet() {
		toSerialize["agreementAdjustmentTotal"] = o.AgreementAdjustmentTotal.Get()
	}
	if o.AgreementAmountCovered.IsSet() {
		toSerialize["agreementAmountCovered"] = o.AgreementAmountCovered.Get()
	}
	if o.AgreementHoursCovered.IsSet() {
		toSerialize["agreementHoursCovered"] = o.AgreementHoursCovered.Get()
	}
	if o.BillableAmount.IsSet() {
		toSerialize["billableAmount"] = o.BillableAmount.Get()
	}
	if o.BillableFlag.IsSet() {
		toSerialize["billableFlag"] = o.BillableFlag.Get()
	}
	if o.BillableHours.IsSet() {
		toSerialize["billableHours"] = o.BillableHours.Get()
	}
	if o.BillableUtilizedHours.IsSet() {
		toSerialize["billableUtilizedHours"] = o.BillableUtilizedHours.Get()
	}
	if o.MemberDailyCapacity.IsSet() {
		toSerialize["memberDailyCapacity"] = o.MemberDailyCapacity.Get()
	}
	if o.BillableOption.IsSet() {
		toSerialize["billableOption"] = o.BillableOption.Get()
	}
	if !IsNil(o.BusinessGroup) {
		toSerialize["businessGroup"] = o.BusinessGroup
	}
	if !IsNil(o.LocationName) {
		toSerialize["locationName"] = o.LocationName
	}
	if !IsNil(o.ChargeCode) {
		toSerialize["chargeCode"] = o.ChargeCode
	}
	if !IsNil(o.ChargeTo) {
		toSerialize["chargeTo"] = o.ChargeTo
	}
	if o.ChargeToType.IsSet() {
		toSerialize["chargeToType"] = o.ChargeToType.Get()
	}
	if o.ChargeToRecId.IsSet() {
		toSerialize["chargeToRecId"] = o.ChargeToRecId.Get()
	}
	if !IsNil(o.CompanyAndAgreement) {
		toSerialize["companyAndAgreement"] = o.CompanyAndAgreement
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.TimeStart) {
		toSerialize["timeStart"] = o.TimeStart
	}
	if !IsNil(o.TimeStartUtc) {
		toSerialize["timeStartUtc"] = o.TimeStartUtc
	}
	if !IsNil(o.TimeEnd) {
		toSerialize["timeEnd"] = o.TimeEnd
	}
	if !IsNil(o.TimeEndUtc) {
		toSerialize["timeEndUtc"] = o.TimeEndUtc
	}
	if !IsNil(o.DateStart) {
		toSerialize["dateStart"] = o.DateStart
	}
	if !IsNil(o.DateInvoice) {
		toSerialize["dateInvoice"] = o.DateInvoice
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.HourlyCost) {
		toSerialize["hourlyCost"] = o.HourlyCost
	}
	if o.HourlyCostDecimal.IsSet() {
		toSerialize["hourlyCostDecimal"] = o.HourlyCostDecimal.Get()
	}
	if o.HourlyRate.IsSet() {
		toSerialize["hourlyRate"] = o.HourlyRate.Get()
	}
	if o.HoursActual.IsSet() {
		toSerialize["hoursActual"] = o.HoursActual.Get()
	}
	if !IsNil(o.InternalNote) {
		toSerialize["internalNote"] = o.InternalNote
	}
	if o.InvoiceAdjustmentFirm.IsSet() {
		toSerialize["invoiceAdjustmentFirm"] = o.InvoiceAdjustmentFirm.Get()
	}
	if o.InvoiceAdjustmentTotal.IsSet() {
		toSerialize["invoiceAdjustmentTotal"] = o.InvoiceAdjustmentTotal.Get()
	}
	if !IsNil(o.InvoiceFlag) {
		toSerialize["invoiceFlag"] = o.InvoiceFlag
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["invoiceNumber"] = o.InvoiceNumber
	}
	if !IsNil(o.InvoiceReady) {
		toSerialize["invoiceReady"] = o.InvoiceReady
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.MemberId) {
		toSerialize["memberId"] = o.MemberId
	}
	if o.NonBillableAmt.IsSet() {
		toSerialize["nonBillableAmt"] = o.NonBillableAmt.Get()
	}
	if o.NonBillableHrs.IsSet() {
		toSerialize["nonBillableHrs"] = o.NonBillableHrs.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.OpportunityRecId.IsSet() {
		toSerialize["opportunityRecId"] = o.OpportunityRecId.Get()
	}
	if !IsNil(o.OptionId) {
		toSerialize["optionId"] = o.OptionId
	}
	if !IsNil(o.ProjectActivity) {
		toSerialize["projectActivity"] = o.ProjectActivity
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	if !IsNil(o.ProjectPhase) {
		toSerialize["projectPhase"] = o.ProjectPhase
	}
	if !IsNil(o.ServiceRequestStatus) {
		toSerialize["serviceRequestStatus"] = o.ServiceRequestStatus
	}
	if !IsNil(o.ServiceRequestSummary) {
		toSerialize["serviceRequestSummary"] = o.ServiceRequestSummary
	}
	if !IsNil(o.Territory) {
		toSerialize["territory"] = o.Territory
	}
	if !IsNil(o.TimeRecId) {
		toSerialize["timeRecId"] = o.TimeRecId
	}
	if !IsNil(o.TimeStatus) {
		toSerialize["timeStatus"] = o.TimeStatus
	}
	if o.UtilizationFlag.IsSet() {
		toSerialize["utilizationFlag"] = o.UtilizationFlag.Get()
	}
	if !IsNil(o.CompanyType) {
		toSerialize["companyType"] = o.CompanyType
	}
	if !IsNil(o.TicketCurrentBoard) {
		toSerialize["ticketCurrentBoard"] = o.TicketCurrentBoard
	}
	if !IsNil(o.TicketType) {
		toSerialize["ticketType"] = o.TicketType
	}
	if !IsNil(o.TicketSubtype) {
		toSerialize["ticketSubtype"] = o.TicketSubtype
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if !IsNil(o.BillingStatus) {
		toSerialize["billingStatus"] = o.BillingStatus
	}
	if !IsNil(o.ProcessingStatus) {
		toSerialize["processingStatus"] = o.ProcessingStatus
	}
	if o.Invoicedhours.IsSet() {
		toSerialize["invoicedhours"] = o.Invoicedhours.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTimeEntryChangeLog struct {
	value *TimeEntryChangeLog
	isSet bool
}

func (v NullableTimeEntryChangeLog) Get() *TimeEntryChangeLog {
	return v.value
}

func (v *NullableTimeEntryChangeLog) Set(val *TimeEntryChangeLog) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeEntryChangeLog) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeEntryChangeLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeEntryChangeLog(val *TimeEntryChangeLog) *NullableTimeEntryChangeLog {
	return &NullableTimeEntryChangeLog{value: val, isSet: true}
}

func (v NullableTimeEntryChangeLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeEntryChangeLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
