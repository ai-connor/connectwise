/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TimeExpense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeExpense{}

// TimeExpense struct for TimeExpense
type TimeExpense struct {
	Id                        *int32             `json:"id,omitempty"`
	Tier1ApprovalFlag         NullableBool       `json:"tier1ApprovalFlag,omitempty"`
	Tier2ApprovalFlag         NullableBool       `json:"tier2ApprovalFlag,omitempty"`
	DisableTimeEntryFlag      NullableBool       `json:"disableTimeEntryFlag,omitempty"`
	RequireTimeNoteFlag       NullableBool       `json:"requireTimeNoteFlag,omitempty"`
	RequireExpenseNoteFlag    NullableBool       `json:"requireExpenseNoteFlag,omitempty"`
	RoundingFactor            NullableFloat64    `json:"roundingFactor,omitempty"`
	InvoiceStart              NullableInt32      `json:"invoiceStart,omitempty"`
	DefaultSpecialInvoiceType NullableString     `json:"defaultSpecialInvoiceType,omitempty"`
	InternalCompany           CompanyReference   `json:"internalCompany"`
	Info                      *map[string]string `json:"_info,omitempty"`
}

type _TimeExpense TimeExpense

// NewTimeExpense instantiates a new TimeExpense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeExpense(internalCompany CompanyReference) *TimeExpense {
	this := TimeExpense{}
	this.InternalCompany = internalCompany
	return &this
}

// NewTimeExpenseWithDefaults instantiates a new TimeExpense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeExpenseWithDefaults() *TimeExpense {
	this := TimeExpense{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimeExpense) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeExpense) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimeExpense) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TimeExpense) SetId(v int32) {
	o.Id = &v
}

// GetTier1ApprovalFlag returns the Tier1ApprovalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetTier1ApprovalFlag() bool {
	if o == nil || IsNil(o.Tier1ApprovalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.Tier1ApprovalFlag.Get()
}

// GetTier1ApprovalFlagOk returns a tuple with the Tier1ApprovalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetTier1ApprovalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tier1ApprovalFlag.Get(), o.Tier1ApprovalFlag.IsSet()
}

// HasTier1ApprovalFlag returns a boolean if a field has been set.
func (o *TimeExpense) HasTier1ApprovalFlag() bool {
	if o != nil && o.Tier1ApprovalFlag.IsSet() {
		return true
	}

	return false
}

// SetTier1ApprovalFlag gets a reference to the given NullableBool and assigns it to the Tier1ApprovalFlag field.
func (o *TimeExpense) SetTier1ApprovalFlag(v bool) {
	o.Tier1ApprovalFlag.Set(&v)
}

// SetTier1ApprovalFlagNil sets the value for Tier1ApprovalFlag to be an explicit nil
func (o *TimeExpense) SetTier1ApprovalFlagNil() {
	o.Tier1ApprovalFlag.Set(nil)
}

// UnsetTier1ApprovalFlag ensures that no value is present for Tier1ApprovalFlag, not even an explicit nil
func (o *TimeExpense) UnsetTier1ApprovalFlag() {
	o.Tier1ApprovalFlag.Unset()
}

// GetTier2ApprovalFlag returns the Tier2ApprovalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetTier2ApprovalFlag() bool {
	if o == nil || IsNil(o.Tier2ApprovalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.Tier2ApprovalFlag.Get()
}

// GetTier2ApprovalFlagOk returns a tuple with the Tier2ApprovalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetTier2ApprovalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tier2ApprovalFlag.Get(), o.Tier2ApprovalFlag.IsSet()
}

// HasTier2ApprovalFlag returns a boolean if a field has been set.
func (o *TimeExpense) HasTier2ApprovalFlag() bool {
	if o != nil && o.Tier2ApprovalFlag.IsSet() {
		return true
	}

	return false
}

// SetTier2ApprovalFlag gets a reference to the given NullableBool and assigns it to the Tier2ApprovalFlag field.
func (o *TimeExpense) SetTier2ApprovalFlag(v bool) {
	o.Tier2ApprovalFlag.Set(&v)
}

// SetTier2ApprovalFlagNil sets the value for Tier2ApprovalFlag to be an explicit nil
func (o *TimeExpense) SetTier2ApprovalFlagNil() {
	o.Tier2ApprovalFlag.Set(nil)
}

// UnsetTier2ApprovalFlag ensures that no value is present for Tier2ApprovalFlag, not even an explicit nil
func (o *TimeExpense) UnsetTier2ApprovalFlag() {
	o.Tier2ApprovalFlag.Unset()
}

// GetDisableTimeEntryFlag returns the DisableTimeEntryFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetDisableTimeEntryFlag() bool {
	if o == nil || IsNil(o.DisableTimeEntryFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableTimeEntryFlag.Get()
}

// GetDisableTimeEntryFlagOk returns a tuple with the DisableTimeEntryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetDisableTimeEntryFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableTimeEntryFlag.Get(), o.DisableTimeEntryFlag.IsSet()
}

// HasDisableTimeEntryFlag returns a boolean if a field has been set.
func (o *TimeExpense) HasDisableTimeEntryFlag() bool {
	if o != nil && o.DisableTimeEntryFlag.IsSet() {
		return true
	}

	return false
}

// SetDisableTimeEntryFlag gets a reference to the given NullableBool and assigns it to the DisableTimeEntryFlag field.
func (o *TimeExpense) SetDisableTimeEntryFlag(v bool) {
	o.DisableTimeEntryFlag.Set(&v)
}

// SetDisableTimeEntryFlagNil sets the value for DisableTimeEntryFlag to be an explicit nil
func (o *TimeExpense) SetDisableTimeEntryFlagNil() {
	o.DisableTimeEntryFlag.Set(nil)
}

// UnsetDisableTimeEntryFlag ensures that no value is present for DisableTimeEntryFlag, not even an explicit nil
func (o *TimeExpense) UnsetDisableTimeEntryFlag() {
	o.DisableTimeEntryFlag.Unset()
}

// GetRequireTimeNoteFlag returns the RequireTimeNoteFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetRequireTimeNoteFlag() bool {
	if o == nil || IsNil(o.RequireTimeNoteFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequireTimeNoteFlag.Get()
}

// GetRequireTimeNoteFlagOk returns a tuple with the RequireTimeNoteFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetRequireTimeNoteFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequireTimeNoteFlag.Get(), o.RequireTimeNoteFlag.IsSet()
}

// HasRequireTimeNoteFlag returns a boolean if a field has been set.
func (o *TimeExpense) HasRequireTimeNoteFlag() bool {
	if o != nil && o.RequireTimeNoteFlag.IsSet() {
		return true
	}

	return false
}

// SetRequireTimeNoteFlag gets a reference to the given NullableBool and assigns it to the RequireTimeNoteFlag field.
func (o *TimeExpense) SetRequireTimeNoteFlag(v bool) {
	o.RequireTimeNoteFlag.Set(&v)
}

// SetRequireTimeNoteFlagNil sets the value for RequireTimeNoteFlag to be an explicit nil
func (o *TimeExpense) SetRequireTimeNoteFlagNil() {
	o.RequireTimeNoteFlag.Set(nil)
}

// UnsetRequireTimeNoteFlag ensures that no value is present for RequireTimeNoteFlag, not even an explicit nil
func (o *TimeExpense) UnsetRequireTimeNoteFlag() {
	o.RequireTimeNoteFlag.Unset()
}

// GetRequireExpenseNoteFlag returns the RequireExpenseNoteFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetRequireExpenseNoteFlag() bool {
	if o == nil || IsNil(o.RequireExpenseNoteFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequireExpenseNoteFlag.Get()
}

// GetRequireExpenseNoteFlagOk returns a tuple with the RequireExpenseNoteFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetRequireExpenseNoteFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequireExpenseNoteFlag.Get(), o.RequireExpenseNoteFlag.IsSet()
}

// HasRequireExpenseNoteFlag returns a boolean if a field has been set.
func (o *TimeExpense) HasRequireExpenseNoteFlag() bool {
	if o != nil && o.RequireExpenseNoteFlag.IsSet() {
		return true
	}

	return false
}

// SetRequireExpenseNoteFlag gets a reference to the given NullableBool and assigns it to the RequireExpenseNoteFlag field.
func (o *TimeExpense) SetRequireExpenseNoteFlag(v bool) {
	o.RequireExpenseNoteFlag.Set(&v)
}

// SetRequireExpenseNoteFlagNil sets the value for RequireExpenseNoteFlag to be an explicit nil
func (o *TimeExpense) SetRequireExpenseNoteFlagNil() {
	o.RequireExpenseNoteFlag.Set(nil)
}

// UnsetRequireExpenseNoteFlag ensures that no value is present for RequireExpenseNoteFlag, not even an explicit nil
func (o *TimeExpense) UnsetRequireExpenseNoteFlag() {
	o.RequireExpenseNoteFlag.Unset()
}

// GetRoundingFactor returns the RoundingFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetRoundingFactor() float64 {
	if o == nil || IsNil(o.RoundingFactor.Get()) {
		var ret float64
		return ret
	}
	return *o.RoundingFactor.Get()
}

// GetRoundingFactorOk returns a tuple with the RoundingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetRoundingFactorOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundingFactor.Get(), o.RoundingFactor.IsSet()
}

// HasRoundingFactor returns a boolean if a field has been set.
func (o *TimeExpense) HasRoundingFactor() bool {
	if o != nil && o.RoundingFactor.IsSet() {
		return true
	}

	return false
}

// SetRoundingFactor gets a reference to the given NullableFloat64 and assigns it to the RoundingFactor field.
func (o *TimeExpense) SetRoundingFactor(v float64) {
	o.RoundingFactor.Set(&v)
}

// SetRoundingFactorNil sets the value for RoundingFactor to be an explicit nil
func (o *TimeExpense) SetRoundingFactorNil() {
	o.RoundingFactor.Set(nil)
}

// UnsetRoundingFactor ensures that no value is present for RoundingFactor, not even an explicit nil
func (o *TimeExpense) UnsetRoundingFactor() {
	o.RoundingFactor.Unset()
}

// GetInvoiceStart returns the InvoiceStart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetInvoiceStart() int32 {
	if o == nil || IsNil(o.InvoiceStart.Get()) {
		var ret int32
		return ret
	}
	return *o.InvoiceStart.Get()
}

// GetInvoiceStartOk returns a tuple with the InvoiceStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetInvoiceStartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceStart.Get(), o.InvoiceStart.IsSet()
}

// HasInvoiceStart returns a boolean if a field has been set.
func (o *TimeExpense) HasInvoiceStart() bool {
	if o != nil && o.InvoiceStart.IsSet() {
		return true
	}

	return false
}

// SetInvoiceStart gets a reference to the given NullableInt32 and assigns it to the InvoiceStart field.
func (o *TimeExpense) SetInvoiceStart(v int32) {
	o.InvoiceStart.Set(&v)
}

// SetInvoiceStartNil sets the value for InvoiceStart to be an explicit nil
func (o *TimeExpense) SetInvoiceStartNil() {
	o.InvoiceStart.Set(nil)
}

// UnsetInvoiceStart ensures that no value is present for InvoiceStart, not even an explicit nil
func (o *TimeExpense) UnsetInvoiceStart() {
	o.InvoiceStart.Unset()
}

// GetDefaultSpecialInvoiceType returns the DefaultSpecialInvoiceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeExpense) GetDefaultSpecialInvoiceType() string {
	if o == nil || IsNil(o.DefaultSpecialInvoiceType.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultSpecialInvoiceType.Get()
}

// GetDefaultSpecialInvoiceTypeOk returns a tuple with the DefaultSpecialInvoiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeExpense) GetDefaultSpecialInvoiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSpecialInvoiceType.Get(), o.DefaultSpecialInvoiceType.IsSet()
}

// HasDefaultSpecialInvoiceType returns a boolean if a field has been set.
func (o *TimeExpense) HasDefaultSpecialInvoiceType() bool {
	if o != nil && o.DefaultSpecialInvoiceType.IsSet() {
		return true
	}

	return false
}

// SetDefaultSpecialInvoiceType gets a reference to the given NullableString and assigns it to the DefaultSpecialInvoiceType field.
func (o *TimeExpense) SetDefaultSpecialInvoiceType(v string) {
	o.DefaultSpecialInvoiceType.Set(&v)
}

// SetDefaultSpecialInvoiceTypeNil sets the value for DefaultSpecialInvoiceType to be an explicit nil
func (o *TimeExpense) SetDefaultSpecialInvoiceTypeNil() {
	o.DefaultSpecialInvoiceType.Set(nil)
}

// UnsetDefaultSpecialInvoiceType ensures that no value is present for DefaultSpecialInvoiceType, not even an explicit nil
func (o *TimeExpense) UnsetDefaultSpecialInvoiceType() {
	o.DefaultSpecialInvoiceType.Unset()
}

// GetInternalCompany returns the InternalCompany field value
func (o *TimeExpense) GetInternalCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.InternalCompany
}

// GetInternalCompanyOk returns a tuple with the InternalCompany field value
// and a boolean to check if the value has been set.
func (o *TimeExpense) GetInternalCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternalCompany, true
}

// SetInternalCompany sets field value
func (o *TimeExpense) SetInternalCompany(v CompanyReference) {
	o.InternalCompany = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TimeExpense) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeExpense) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TimeExpense) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TimeExpense) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TimeExpense) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeExpense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Tier1ApprovalFlag.IsSet() {
		toSerialize["tier1ApprovalFlag"] = o.Tier1ApprovalFlag.Get()
	}
	if o.Tier2ApprovalFlag.IsSet() {
		toSerialize["tier2ApprovalFlag"] = o.Tier2ApprovalFlag.Get()
	}
	if o.DisableTimeEntryFlag.IsSet() {
		toSerialize["disableTimeEntryFlag"] = o.DisableTimeEntryFlag.Get()
	}
	if o.RequireTimeNoteFlag.IsSet() {
		toSerialize["requireTimeNoteFlag"] = o.RequireTimeNoteFlag.Get()
	}
	if o.RequireExpenseNoteFlag.IsSet() {
		toSerialize["requireExpenseNoteFlag"] = o.RequireExpenseNoteFlag.Get()
	}
	if o.RoundingFactor.IsSet() {
		toSerialize["roundingFactor"] = o.RoundingFactor.Get()
	}
	if o.InvoiceStart.IsSet() {
		toSerialize["invoiceStart"] = o.InvoiceStart.Get()
	}
	if o.DefaultSpecialInvoiceType.IsSet() {
		toSerialize["defaultSpecialInvoiceType"] = o.DefaultSpecialInvoiceType.Get()
	}
	toSerialize["internalCompany"] = o.InternalCompany
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TimeExpense) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"internalCompany",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeExpense := _TimeExpense{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeExpense)

	if err != nil {
		return err
	}

	*o = TimeExpense(varTimeExpense)

	return err
}

type NullableTimeExpense struct {
	value *TimeExpense
	isSet bool
}

func (v NullableTimeExpense) Get() *TimeExpense {
	return v.value
}

func (v *NullableTimeExpense) Set(val *TimeExpense) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeExpense) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeExpense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeExpense(val *TimeExpense) *NullableTimeExpense {
	return &NullableTimeExpense{value: val, isSet: true}
}

func (v NullableTimeExpense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeExpense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
