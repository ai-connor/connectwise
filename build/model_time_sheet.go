/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TimeSheet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSheet{}

// TimeSheet struct for TimeSheet
type TimeSheet struct {
	Id        *int32             `json:"id,omitempty"`
	Member    *MemberReference   `json:"member,omitempty"`
	Year      NullableInt32      `json:"year,omitempty"`
	Period    NullableInt32      `json:"period,omitempty"`
	DateStart *string            `json:"dateStart,omitempty"`
	DateEnd   *string            `json:"dateEnd,omitempty"`
	Status    NullableString     `json:"status,omitempty"`
	Hours     NullableFloat64    `json:"hours,omitempty"`
	Deadline  *string            `json:"deadline,omitempty"`
	Info      *map[string]string `json:"_info,omitempty"`
}

// NewTimeSheet instantiates a new TimeSheet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSheet() *TimeSheet {
	this := TimeSheet{}
	return &this
}

// NewTimeSheetWithDefaults instantiates a new TimeSheet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSheetWithDefaults() *TimeSheet {
	this := TimeSheet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimeSheet) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSheet) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimeSheet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TimeSheet) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *TimeSheet) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSheet) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *TimeSheet) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *TimeSheet) SetMember(v MemberReference) {
	o.Member = &v
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSheet) GetYear() int32 {
	if o == nil || IsNil(o.Year.Get()) {
		var ret int32
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSheet) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *TimeSheet) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableInt32 and assigns it to the Year field.
func (o *TimeSheet) SetYear(v int32) {
	o.Year.Set(&v)
}

// SetYearNil sets the value for Year to be an explicit nil
func (o *TimeSheet) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *TimeSheet) UnsetYear() {
	o.Year.Unset()
}

// GetPeriod returns the Period field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSheet) GetPeriod() int32 {
	if o == nil || IsNil(o.Period.Get()) {
		var ret int32
		return ret
	}
	return *o.Period.Get()
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSheet) GetPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Period.Get(), o.Period.IsSet()
}

// HasPeriod returns a boolean if a field has been set.
func (o *TimeSheet) HasPeriod() bool {
	if o != nil && o.Period.IsSet() {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given NullableInt32 and assigns it to the Period field.
func (o *TimeSheet) SetPeriod(v int32) {
	o.Period.Set(&v)
}

// SetPeriodNil sets the value for Period to be an explicit nil
func (o *TimeSheet) SetPeriodNil() {
	o.Period.Set(nil)
}

// UnsetPeriod ensures that no value is present for Period, not even an explicit nil
func (o *TimeSheet) UnsetPeriod() {
	o.Period.Unset()
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *TimeSheet) GetDateStart() string {
	if o == nil || IsNil(o.DateStart) {
		var ret string
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSheet) GetDateStartOk() (*string, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *TimeSheet) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given string and assigns it to the DateStart field.
func (o *TimeSheet) SetDateStart(v string) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *TimeSheet) GetDateEnd() string {
	if o == nil || IsNil(o.DateEnd) {
		var ret string
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSheet) GetDateEndOk() (*string, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *TimeSheet) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given string and assigns it to the DateEnd field.
func (o *TimeSheet) SetDateEnd(v string) {
	o.DateEnd = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSheet) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSheet) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TimeSheet) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *TimeSheet) SetStatus(v string) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *TimeSheet) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TimeSheet) UnsetStatus() {
	o.Status.Unset()
}

// GetHours returns the Hours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSheet) GetHours() float64 {
	if o == nil || IsNil(o.Hours.Get()) {
		var ret float64
		return ret
	}
	return *o.Hours.Get()
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSheet) GetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hours.Get(), o.Hours.IsSet()
}

// HasHours returns a boolean if a field has been set.
func (o *TimeSheet) HasHours() bool {
	if o != nil && o.Hours.IsSet() {
		return true
	}

	return false
}

// SetHours gets a reference to the given NullableFloat64 and assigns it to the Hours field.
func (o *TimeSheet) SetHours(v float64) {
	o.Hours.Set(&v)
}

// SetHoursNil sets the value for Hours to be an explicit nil
func (o *TimeSheet) SetHoursNil() {
	o.Hours.Set(nil)
}

// UnsetHours ensures that no value is present for Hours, not even an explicit nil
func (o *TimeSheet) UnsetHours() {
	o.Hours.Unset()
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *TimeSheet) GetDeadline() string {
	if o == nil || IsNil(o.Deadline) {
		var ret string
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSheet) GetDeadlineOk() (*string, bool) {
	if o == nil || IsNil(o.Deadline) {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *TimeSheet) HasDeadline() bool {
	if o != nil && !IsNil(o.Deadline) {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given string and assigns it to the Deadline field.
func (o *TimeSheet) SetDeadline(v string) {
	o.Deadline = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TimeSheet) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSheet) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TimeSheet) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TimeSheet) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TimeSheet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSheet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.Period.IsSet() {
		toSerialize["period"] = o.Period.Get()
	}
	if !IsNil(o.DateStart) {
		toSerialize["dateStart"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["dateEnd"] = o.DateEnd
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Hours.IsSet() {
		toSerialize["hours"] = o.Hours.Get()
	}
	if !IsNil(o.Deadline) {
		toSerialize["deadline"] = o.Deadline
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTimeSheet struct {
	value *TimeSheet
	isSet bool
}

func (v NullableTimeSheet) Get() *TimeSheet {
	return v.value
}

func (v *NullableTimeSheet) Set(val *TimeSheet) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSheet) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSheet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSheet(val *TimeSheet) *NullableTimeSheet {
	return &NullableTimeSheet{value: val, isSet: true}
}

func (v NullableTimeSheet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSheet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
