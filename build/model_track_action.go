/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrackAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackAction{}

// TrackAction struct for TrackAction
type TrackAction struct {
	Id               *int32                    `json:"id,omitempty"`
	NotifyType       string                    `json:"notifyType"`
	ServiceTemplate  *ServiceTemplateReference `json:"serviceTemplate,omitempty"`
	SpecificMemberTo *MemberReference          `json:"specificMemberTo,omitempty"`
	//  Max length: 250;
	EmailRecipient     *string          `json:"emailRecipient,omitempty"`
	SpecificMemberFrom *MemberReference `json:"specificMemberFrom,omitempty"`
	//  Max length: 250;
	EmailFrom *string `json:"emailFrom,omitempty"`
	//  Max length: 100;
	Subject        *string                         `json:"subject,omitempty"`
	Notes          *string                         `json:"notes,omitempty"`
	ActivityType   *ActivityTypeReference          `json:"activityType,omitempty"`
	ActivityStatus *ActivityStatusReference        `json:"activityStatus,omitempty"`
	CompanyStatus  *CompanyStatusReference         `json:"companyStatus,omitempty"`
	Track          *TrackReference                 `json:"track,omitempty"`
	AttachedTrack  *TrackReference                 `json:"attachedTrack,omitempty"`
	Group          *GroupReference                 `json:"group,omitempty"`
	CcContact      *ContactReference               `json:"ccContact,omitempty"`
	BccContact     *ContactReference               `json:"bccContact,omitempty"`
	DaysToExecute  NullableInt32                   `json:"daysToExecute,omitempty"`
	NotifyWho      *NotificationRecipientReference `json:"notifyWho,omitempty"`
	NotifyFrom     *NotificationRecipientReference `json:"notifyFrom,omitempty"`
	Info           *map[string]string              `json:"_info,omitempty"`
}

type _TrackAction TrackAction

// NewTrackAction instantiates a new TrackAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackAction(notifyType string) *TrackAction {
	this := TrackAction{}
	this.NotifyType = notifyType
	return &this
}

// NewTrackActionWithDefaults instantiates a new TrackAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackActionWithDefaults() *TrackAction {
	this := TrackAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackAction) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TrackAction) SetId(v int32) {
	o.Id = &v
}

// GetNotifyType returns the NotifyType field value
func (o *TrackAction) GetNotifyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifyType
}

// GetNotifyTypeOk returns a tuple with the NotifyType field value
// and a boolean to check if the value has been set.
func (o *TrackAction) GetNotifyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyType, true
}

// SetNotifyType sets field value
func (o *TrackAction) SetNotifyType(v string) {
	o.NotifyType = v
}

// GetServiceTemplate returns the ServiceTemplate field value if set, zero value otherwise.
func (o *TrackAction) GetServiceTemplate() ServiceTemplateReference {
	if o == nil || IsNil(o.ServiceTemplate) {
		var ret ServiceTemplateReference
		return ret
	}
	return *o.ServiceTemplate
}

// GetServiceTemplateOk returns a tuple with the ServiceTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetServiceTemplateOk() (*ServiceTemplateReference, bool) {
	if o == nil || IsNil(o.ServiceTemplate) {
		return nil, false
	}
	return o.ServiceTemplate, true
}

// HasServiceTemplate returns a boolean if a field has been set.
func (o *TrackAction) HasServiceTemplate() bool {
	if o != nil && !IsNil(o.ServiceTemplate) {
		return true
	}

	return false
}

// SetServiceTemplate gets a reference to the given ServiceTemplateReference and assigns it to the ServiceTemplate field.
func (o *TrackAction) SetServiceTemplate(v ServiceTemplateReference) {
	o.ServiceTemplate = &v
}

// GetSpecificMemberTo returns the SpecificMemberTo field value if set, zero value otherwise.
func (o *TrackAction) GetSpecificMemberTo() MemberReference {
	if o == nil || IsNil(o.SpecificMemberTo) {
		var ret MemberReference
		return ret
	}
	return *o.SpecificMemberTo
}

// GetSpecificMemberToOk returns a tuple with the SpecificMemberTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetSpecificMemberToOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.SpecificMemberTo) {
		return nil, false
	}
	return o.SpecificMemberTo, true
}

// HasSpecificMemberTo returns a boolean if a field has been set.
func (o *TrackAction) HasSpecificMemberTo() bool {
	if o != nil && !IsNil(o.SpecificMemberTo) {
		return true
	}

	return false
}

// SetSpecificMemberTo gets a reference to the given MemberReference and assigns it to the SpecificMemberTo field.
func (o *TrackAction) SetSpecificMemberTo(v MemberReference) {
	o.SpecificMemberTo = &v
}

// GetEmailRecipient returns the EmailRecipient field value if set, zero value otherwise.
func (o *TrackAction) GetEmailRecipient() string {
	if o == nil || IsNil(o.EmailRecipient) {
		var ret string
		return ret
	}
	return *o.EmailRecipient
}

// GetEmailRecipientOk returns a tuple with the EmailRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetEmailRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.EmailRecipient) {
		return nil, false
	}
	return o.EmailRecipient, true
}

// HasEmailRecipient returns a boolean if a field has been set.
func (o *TrackAction) HasEmailRecipient() bool {
	if o != nil && !IsNil(o.EmailRecipient) {
		return true
	}

	return false
}

// SetEmailRecipient gets a reference to the given string and assigns it to the EmailRecipient field.
func (o *TrackAction) SetEmailRecipient(v string) {
	o.EmailRecipient = &v
}

// GetSpecificMemberFrom returns the SpecificMemberFrom field value if set, zero value otherwise.
func (o *TrackAction) GetSpecificMemberFrom() MemberReference {
	if o == nil || IsNil(o.SpecificMemberFrom) {
		var ret MemberReference
		return ret
	}
	return *o.SpecificMemberFrom
}

// GetSpecificMemberFromOk returns a tuple with the SpecificMemberFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetSpecificMemberFromOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.SpecificMemberFrom) {
		return nil, false
	}
	return o.SpecificMemberFrom, true
}

// HasSpecificMemberFrom returns a boolean if a field has been set.
func (o *TrackAction) HasSpecificMemberFrom() bool {
	if o != nil && !IsNil(o.SpecificMemberFrom) {
		return true
	}

	return false
}

// SetSpecificMemberFrom gets a reference to the given MemberReference and assigns it to the SpecificMemberFrom field.
func (o *TrackAction) SetSpecificMemberFrom(v MemberReference) {
	o.SpecificMemberFrom = &v
}

// GetEmailFrom returns the EmailFrom field value if set, zero value otherwise.
func (o *TrackAction) GetEmailFrom() string {
	if o == nil || IsNil(o.EmailFrom) {
		var ret string
		return ret
	}
	return *o.EmailFrom
}

// GetEmailFromOk returns a tuple with the EmailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetEmailFromOk() (*string, bool) {
	if o == nil || IsNil(o.EmailFrom) {
		return nil, false
	}
	return o.EmailFrom, true
}

// HasEmailFrom returns a boolean if a field has been set.
func (o *TrackAction) HasEmailFrom() bool {
	if o != nil && !IsNil(o.EmailFrom) {
		return true
	}

	return false
}

// SetEmailFrom gets a reference to the given string and assigns it to the EmailFrom field.
func (o *TrackAction) SetEmailFrom(v string) {
	o.EmailFrom = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TrackAction) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TrackAction) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *TrackAction) SetSubject(v string) {
	o.Subject = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TrackAction) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TrackAction) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TrackAction) SetNotes(v string) {
	o.Notes = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *TrackAction) GetActivityType() ActivityTypeReference {
	if o == nil || IsNil(o.ActivityType) {
		var ret ActivityTypeReference
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetActivityTypeOk() (*ActivityTypeReference, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *TrackAction) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given ActivityTypeReference and assigns it to the ActivityType field.
func (o *TrackAction) SetActivityType(v ActivityTypeReference) {
	o.ActivityType = &v
}

// GetActivityStatus returns the ActivityStatus field value if set, zero value otherwise.
func (o *TrackAction) GetActivityStatus() ActivityStatusReference {
	if o == nil || IsNil(o.ActivityStatus) {
		var ret ActivityStatusReference
		return ret
	}
	return *o.ActivityStatus
}

// GetActivityStatusOk returns a tuple with the ActivityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetActivityStatusOk() (*ActivityStatusReference, bool) {
	if o == nil || IsNil(o.ActivityStatus) {
		return nil, false
	}
	return o.ActivityStatus, true
}

// HasActivityStatus returns a boolean if a field has been set.
func (o *TrackAction) HasActivityStatus() bool {
	if o != nil && !IsNil(o.ActivityStatus) {
		return true
	}

	return false
}

// SetActivityStatus gets a reference to the given ActivityStatusReference and assigns it to the ActivityStatus field.
func (o *TrackAction) SetActivityStatus(v ActivityStatusReference) {
	o.ActivityStatus = &v
}

// GetCompanyStatus returns the CompanyStatus field value if set, zero value otherwise.
func (o *TrackAction) GetCompanyStatus() CompanyStatusReference {
	if o == nil || IsNil(o.CompanyStatus) {
		var ret CompanyStatusReference
		return ret
	}
	return *o.CompanyStatus
}

// GetCompanyStatusOk returns a tuple with the CompanyStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetCompanyStatusOk() (*CompanyStatusReference, bool) {
	if o == nil || IsNil(o.CompanyStatus) {
		return nil, false
	}
	return o.CompanyStatus, true
}

// HasCompanyStatus returns a boolean if a field has been set.
func (o *TrackAction) HasCompanyStatus() bool {
	if o != nil && !IsNil(o.CompanyStatus) {
		return true
	}

	return false
}

// SetCompanyStatus gets a reference to the given CompanyStatusReference and assigns it to the CompanyStatus field.
func (o *TrackAction) SetCompanyStatus(v CompanyStatusReference) {
	o.CompanyStatus = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *TrackAction) GetTrack() TrackReference {
	if o == nil || IsNil(o.Track) {
		var ret TrackReference
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetTrackOk() (*TrackReference, bool) {
	if o == nil || IsNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *TrackAction) HasTrack() bool {
	if o != nil && !IsNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given TrackReference and assigns it to the Track field.
func (o *TrackAction) SetTrack(v TrackReference) {
	o.Track = &v
}

// GetAttachedTrack returns the AttachedTrack field value if set, zero value otherwise.
func (o *TrackAction) GetAttachedTrack() TrackReference {
	if o == nil || IsNil(o.AttachedTrack) {
		var ret TrackReference
		return ret
	}
	return *o.AttachedTrack
}

// GetAttachedTrackOk returns a tuple with the AttachedTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetAttachedTrackOk() (*TrackReference, bool) {
	if o == nil || IsNil(o.AttachedTrack) {
		return nil, false
	}
	return o.AttachedTrack, true
}

// HasAttachedTrack returns a boolean if a field has been set.
func (o *TrackAction) HasAttachedTrack() bool {
	if o != nil && !IsNil(o.AttachedTrack) {
		return true
	}

	return false
}

// SetAttachedTrack gets a reference to the given TrackReference and assigns it to the AttachedTrack field.
func (o *TrackAction) SetAttachedTrack(v TrackReference) {
	o.AttachedTrack = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *TrackAction) GetGroup() GroupReference {
	if o == nil || IsNil(o.Group) {
		var ret GroupReference
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetGroupOk() (*GroupReference, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *TrackAction) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given GroupReference and assigns it to the Group field.
func (o *TrackAction) SetGroup(v GroupReference) {
	o.Group = &v
}

// GetCcContact returns the CcContact field value if set, zero value otherwise.
func (o *TrackAction) GetCcContact() ContactReference {
	if o == nil || IsNil(o.CcContact) {
		var ret ContactReference
		return ret
	}
	return *o.CcContact
}

// GetCcContactOk returns a tuple with the CcContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetCcContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.CcContact) {
		return nil, false
	}
	return o.CcContact, true
}

// HasCcContact returns a boolean if a field has been set.
func (o *TrackAction) HasCcContact() bool {
	if o != nil && !IsNil(o.CcContact) {
		return true
	}

	return false
}

// SetCcContact gets a reference to the given ContactReference and assigns it to the CcContact field.
func (o *TrackAction) SetCcContact(v ContactReference) {
	o.CcContact = &v
}

// GetBccContact returns the BccContact field value if set, zero value otherwise.
func (o *TrackAction) GetBccContact() ContactReference {
	if o == nil || IsNil(o.BccContact) {
		var ret ContactReference
		return ret
	}
	return *o.BccContact
}

// GetBccContactOk returns a tuple with the BccContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetBccContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BccContact) {
		return nil, false
	}
	return o.BccContact, true
}

// HasBccContact returns a boolean if a field has been set.
func (o *TrackAction) HasBccContact() bool {
	if o != nil && !IsNil(o.BccContact) {
		return true
	}

	return false
}

// SetBccContact gets a reference to the given ContactReference and assigns it to the BccContact field.
func (o *TrackAction) SetBccContact(v ContactReference) {
	o.BccContact = &v
}

// GetDaysToExecute returns the DaysToExecute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrackAction) GetDaysToExecute() int32 {
	if o == nil || IsNil(o.DaysToExecute.Get()) {
		var ret int32
		return ret
	}
	return *o.DaysToExecute.Get()
}

// GetDaysToExecuteOk returns a tuple with the DaysToExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrackAction) GetDaysToExecuteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysToExecute.Get(), o.DaysToExecute.IsSet()
}

// HasDaysToExecute returns a boolean if a field has been set.
func (o *TrackAction) HasDaysToExecute() bool {
	if o != nil && o.DaysToExecute.IsSet() {
		return true
	}

	return false
}

// SetDaysToExecute gets a reference to the given NullableInt32 and assigns it to the DaysToExecute field.
func (o *TrackAction) SetDaysToExecute(v int32) {
	o.DaysToExecute.Set(&v)
}

// SetDaysToExecuteNil sets the value for DaysToExecute to be an explicit nil
func (o *TrackAction) SetDaysToExecuteNil() {
	o.DaysToExecute.Set(nil)
}

// UnsetDaysToExecute ensures that no value is present for DaysToExecute, not even an explicit nil
func (o *TrackAction) UnsetDaysToExecute() {
	o.DaysToExecute.Unset()
}

// GetNotifyWho returns the NotifyWho field value if set, zero value otherwise.
func (o *TrackAction) GetNotifyWho() NotificationRecipientReference {
	if o == nil || IsNil(o.NotifyWho) {
		var ret NotificationRecipientReference
		return ret
	}
	return *o.NotifyWho
}

// GetNotifyWhoOk returns a tuple with the NotifyWho field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetNotifyWhoOk() (*NotificationRecipientReference, bool) {
	if o == nil || IsNil(o.NotifyWho) {
		return nil, false
	}
	return o.NotifyWho, true
}

// HasNotifyWho returns a boolean if a field has been set.
func (o *TrackAction) HasNotifyWho() bool {
	if o != nil && !IsNil(o.NotifyWho) {
		return true
	}

	return false
}

// SetNotifyWho gets a reference to the given NotificationRecipientReference and assigns it to the NotifyWho field.
func (o *TrackAction) SetNotifyWho(v NotificationRecipientReference) {
	o.NotifyWho = &v
}

// GetNotifyFrom returns the NotifyFrom field value if set, zero value otherwise.
func (o *TrackAction) GetNotifyFrom() NotificationRecipientReference {
	if o == nil || IsNil(o.NotifyFrom) {
		var ret NotificationRecipientReference
		return ret
	}
	return *o.NotifyFrom
}

// GetNotifyFromOk returns a tuple with the NotifyFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetNotifyFromOk() (*NotificationRecipientReference, bool) {
	if o == nil || IsNil(o.NotifyFrom) {
		return nil, false
	}
	return o.NotifyFrom, true
}

// HasNotifyFrom returns a boolean if a field has been set.
func (o *TrackAction) HasNotifyFrom() bool {
	if o != nil && !IsNil(o.NotifyFrom) {
		return true
	}

	return false
}

// SetNotifyFrom gets a reference to the given NotificationRecipientReference and assigns it to the NotifyFrom field.
func (o *TrackAction) SetNotifyFrom(v NotificationRecipientReference) {
	o.NotifyFrom = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TrackAction) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackAction) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TrackAction) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TrackAction) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TrackAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["notifyType"] = o.NotifyType
	if !IsNil(o.ServiceTemplate) {
		toSerialize["serviceTemplate"] = o.ServiceTemplate
	}
	if !IsNil(o.SpecificMemberTo) {
		toSerialize["specificMemberTo"] = o.SpecificMemberTo
	}
	if !IsNil(o.EmailRecipient) {
		toSerialize["emailRecipient"] = o.EmailRecipient
	}
	if !IsNil(o.SpecificMemberFrom) {
		toSerialize["specificMemberFrom"] = o.SpecificMemberFrom
	}
	if !IsNil(o.EmailFrom) {
		toSerialize["emailFrom"] = o.EmailFrom
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activityType"] = o.ActivityType
	}
	if !IsNil(o.ActivityStatus) {
		toSerialize["activityStatus"] = o.ActivityStatus
	}
	if !IsNil(o.CompanyStatus) {
		toSerialize["companyStatus"] = o.CompanyStatus
	}
	if !IsNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	if !IsNil(o.AttachedTrack) {
		toSerialize["attachedTrack"] = o.AttachedTrack
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.CcContact) {
		toSerialize["ccContact"] = o.CcContact
	}
	if !IsNil(o.BccContact) {
		toSerialize["bccContact"] = o.BccContact
	}
	if o.DaysToExecute.IsSet() {
		toSerialize["daysToExecute"] = o.DaysToExecute.Get()
	}
	if !IsNil(o.NotifyWho) {
		toSerialize["notifyWho"] = o.NotifyWho
	}
	if !IsNil(o.NotifyFrom) {
		toSerialize["notifyFrom"] = o.NotifyFrom
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TrackAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notifyType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackAction := _TrackAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackAction)

	if err != nil {
		return err
	}

	*o = TrackAction(varTrackAction)

	return err
}

type NullableTrackAction struct {
	value *TrackAction
	isSet bool
}

func (v NullableTrackAction) Get() *TrackAction {
	return v.value
}

func (v *NullableTrackAction) Set(val *TrackAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackAction(val *TrackAction) *NullableTrackAction {
	return &NullableTrackAction{value: val, isSet: true}
}

func (v NullableTrackAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
