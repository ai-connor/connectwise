/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UnpostedPayments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnpostedPayments{}

// UnpostedPayments struct for UnpostedPayments
type UnpostedPayments struct {
	Id                *int32             `json:"id,omitempty"`
	Type              *string            `json:"type,omitempty"`
	Source            *string            `json:"source,omitempty"`
	Invoice           *InvoiceReference  `json:"invoice,omitempty"`
	Amount            NullableFloat64    `json:"amount,omitempty"`
	PaymentDate       *string            `json:"paymentDate,omitempty"`
	AppliedBy         *string            `json:"appliedBy,omitempty"`
	Info              *map[string]string `json:"_info,omitempty"`
	WisePayPayment    *WisePayPayment    `json:"wisePayPayment,omitempty"`
	PaymentSyncStatus *string            `json:"paymentSyncStatus,omitempty"`
	PaymentSyncDate   *string            `json:"paymentSyncDate,omitempty"`
	PaymentAccount    *string            `json:"paymentAccount,omitempty"`
	ARPaymentAccount  *string            `json:"aRPaymentAccount,omitempty"`
}

// NewUnpostedPayments instantiates a new UnpostedPayments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnpostedPayments() *UnpostedPayments {
	this := UnpostedPayments{}
	return &this
}

// NewUnpostedPaymentsWithDefaults instantiates a new UnpostedPayments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnpostedPaymentsWithDefaults() *UnpostedPayments {
	this := UnpostedPayments{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnpostedPayments) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnpostedPayments) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UnpostedPayments) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UnpostedPayments) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UnpostedPayments) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UnpostedPayments) SetType(v string) {
	o.Type = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *UnpostedPayments) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *UnpostedPayments) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *UnpostedPayments) SetSource(v string) {
	o.Source = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *UnpostedPayments) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *UnpostedPayments) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *UnpostedPayments) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedPayments) GetAmount() float64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret float64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedPayments) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *UnpostedPayments) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat64 and assigns it to the Amount field.
func (o *UnpostedPayments) SetAmount(v float64) {
	o.Amount.Set(&v)
}

// SetAmountNil sets the value for Amount to be an explicit nil
func (o *UnpostedPayments) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *UnpostedPayments) UnsetAmount() {
	o.Amount.Unset()
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *UnpostedPayments) GetPaymentDate() string {
	if o == nil || IsNil(o.PaymentDate) {
		var ret string
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *UnpostedPayments) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given string and assigns it to the PaymentDate field.
func (o *UnpostedPayments) SetPaymentDate(v string) {
	o.PaymentDate = &v
}

// GetAppliedBy returns the AppliedBy field value if set, zero value otherwise.
func (o *UnpostedPayments) GetAppliedBy() string {
	if o == nil || IsNil(o.AppliedBy) {
		var ret string
		return ret
	}
	return *o.AppliedBy
}

// GetAppliedByOk returns a tuple with the AppliedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetAppliedByOk() (*string, bool) {
	if o == nil || IsNil(o.AppliedBy) {
		return nil, false
	}
	return o.AppliedBy, true
}

// HasAppliedBy returns a boolean if a field has been set.
func (o *UnpostedPayments) HasAppliedBy() bool {
	if o != nil && !IsNil(o.AppliedBy) {
		return true
	}

	return false
}

// SetAppliedBy gets a reference to the given string and assigns it to the AppliedBy field.
func (o *UnpostedPayments) SetAppliedBy(v string) {
	o.AppliedBy = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *UnpostedPayments) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *UnpostedPayments) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *UnpostedPayments) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetWisePayPayment returns the WisePayPayment field value if set, zero value otherwise.
func (o *UnpostedPayments) GetWisePayPayment() WisePayPayment {
	if o == nil || IsNil(o.WisePayPayment) {
		var ret WisePayPayment
		return ret
	}
	return *o.WisePayPayment
}

// GetWisePayPaymentOk returns a tuple with the WisePayPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetWisePayPaymentOk() (*WisePayPayment, bool) {
	if o == nil || IsNil(o.WisePayPayment) {
		return nil, false
	}
	return o.WisePayPayment, true
}

// HasWisePayPayment returns a boolean if a field has been set.
func (o *UnpostedPayments) HasWisePayPayment() bool {
	if o != nil && !IsNil(o.WisePayPayment) {
		return true
	}

	return false
}

// SetWisePayPayment gets a reference to the given WisePayPayment and assigns it to the WisePayPayment field.
func (o *UnpostedPayments) SetWisePayPayment(v WisePayPayment) {
	o.WisePayPayment = &v
}

// GetPaymentSyncStatus returns the PaymentSyncStatus field value if set, zero value otherwise.
func (o *UnpostedPayments) GetPaymentSyncStatus() string {
	if o == nil || IsNil(o.PaymentSyncStatus) {
		var ret string
		return ret
	}
	return *o.PaymentSyncStatus
}

// GetPaymentSyncStatusOk returns a tuple with the PaymentSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetPaymentSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentSyncStatus) {
		return nil, false
	}
	return o.PaymentSyncStatus, true
}

// HasPaymentSyncStatus returns a boolean if a field has been set.
func (o *UnpostedPayments) HasPaymentSyncStatus() bool {
	if o != nil && !IsNil(o.PaymentSyncStatus) {
		return true
	}

	return false
}

// SetPaymentSyncStatus gets a reference to the given string and assigns it to the PaymentSyncStatus field.
func (o *UnpostedPayments) SetPaymentSyncStatus(v string) {
	o.PaymentSyncStatus = &v
}

// GetPaymentSyncDate returns the PaymentSyncDate field value if set, zero value otherwise.
func (o *UnpostedPayments) GetPaymentSyncDate() string {
	if o == nil || IsNil(o.PaymentSyncDate) {
		var ret string
		return ret
	}
	return *o.PaymentSyncDate
}

// GetPaymentSyncDateOk returns a tuple with the PaymentSyncDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetPaymentSyncDateOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentSyncDate) {
		return nil, false
	}
	return o.PaymentSyncDate, true
}

// HasPaymentSyncDate returns a boolean if a field has been set.
func (o *UnpostedPayments) HasPaymentSyncDate() bool {
	if o != nil && !IsNil(o.PaymentSyncDate) {
		return true
	}

	return false
}

// SetPaymentSyncDate gets a reference to the given string and assigns it to the PaymentSyncDate field.
func (o *UnpostedPayments) SetPaymentSyncDate(v string) {
	o.PaymentSyncDate = &v
}

// GetPaymentAccount returns the PaymentAccount field value if set, zero value otherwise.
func (o *UnpostedPayments) GetPaymentAccount() string {
	if o == nil || IsNil(o.PaymentAccount) {
		var ret string
		return ret
	}
	return *o.PaymentAccount
}

// GetPaymentAccountOk returns a tuple with the PaymentAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetPaymentAccountOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentAccount) {
		return nil, false
	}
	return o.PaymentAccount, true
}

// HasPaymentAccount returns a boolean if a field has been set.
func (o *UnpostedPayments) HasPaymentAccount() bool {
	if o != nil && !IsNil(o.PaymentAccount) {
		return true
	}

	return false
}

// SetPaymentAccount gets a reference to the given string and assigns it to the PaymentAccount field.
func (o *UnpostedPayments) SetPaymentAccount(v string) {
	o.PaymentAccount = &v
}

// GetARPaymentAccount returns the ARPaymentAccount field value if set, zero value otherwise.
func (o *UnpostedPayments) GetARPaymentAccount() string {
	if o == nil || IsNil(o.ARPaymentAccount) {
		var ret string
		return ret
	}
	return *o.ARPaymentAccount
}

// GetARPaymentAccountOk returns a tuple with the ARPaymentAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedPayments) GetARPaymentAccountOk() (*string, bool) {
	if o == nil || IsNil(o.ARPaymentAccount) {
		return nil, false
	}
	return o.ARPaymentAccount, true
}

// HasARPaymentAccount returns a boolean if a field has been set.
func (o *UnpostedPayments) HasARPaymentAccount() bool {
	if o != nil && !IsNil(o.ARPaymentAccount) {
		return true
	}

	return false
}

// SetARPaymentAccount gets a reference to the given string and assigns it to the ARPaymentAccount field.
func (o *UnpostedPayments) SetARPaymentAccount(v string) {
	o.ARPaymentAccount = &v
}

func (o UnpostedPayments) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnpostedPayments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if !IsNil(o.AppliedBy) {
		toSerialize["appliedBy"] = o.AppliedBy
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.WisePayPayment) {
		toSerialize["wisePayPayment"] = o.WisePayPayment
	}
	if !IsNil(o.PaymentSyncStatus) {
		toSerialize["paymentSyncStatus"] = o.PaymentSyncStatus
	}
	if !IsNil(o.PaymentSyncDate) {
		toSerialize["paymentSyncDate"] = o.PaymentSyncDate
	}
	if !IsNil(o.PaymentAccount) {
		toSerialize["paymentAccount"] = o.PaymentAccount
	}
	if !IsNil(o.ARPaymentAccount) {
		toSerialize["aRPaymentAccount"] = o.ARPaymentAccount
	}
	return toSerialize, nil
}

type NullableUnpostedPayments struct {
	value *UnpostedPayments
	isSet bool
}

func (v NullableUnpostedPayments) Get() *UnpostedPayments {
	return v.value
}

func (v *NullableUnpostedPayments) Set(val *UnpostedPayments) {
	v.value = val
	v.isSet = true
}

func (v NullableUnpostedPayments) IsSet() bool {
	return v.isSet
}

func (v *NullableUnpostedPayments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnpostedPayments(val *UnpostedPayments) *NullableUnpostedPayments {
	return &NullableUnpostedPayments{value: val, isSet: true}
}

func (v NullableUnpostedPayments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnpostedPayments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
