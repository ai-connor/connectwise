/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UnpostedProcurement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnpostedProcurement{}

// UnpostedProcurement struct for UnpostedProcurement
type UnpostedProcurement struct {
	Id                *int32                  `json:"id,omitempty"`
	Description       *string                 `json:"description,omitempty"`
	UnpostedProductId *string                 `json:"unpostedProductId,omitempty"`
	LocationId        NullableInt32           `json:"locationId,omitempty"`
	DepartmentId      NullableInt32           `json:"departmentId,omitempty"`
	ProcurementType   NullableString          `json:"procurementType,omitempty"`
	PurchaseOrder     *PurchaseOrderReference `json:"purchaseOrder,omitempty"`
	PurchaseDate      *string                 `json:"purchaseDate,omitempty"`
	TrackingNumber    *string                 `json:"trackingNumber,omitempty"`
	BillingTerms      *BillingTermsReference  `json:"billingTerms,omitempty"`
	Currency          *CurrencyReference      `json:"currency,omitempty"`
	Total             NullableFloat64         `json:"total,omitempty"`
	TaxCode           *TaxCodeReference       `json:"taxCode,omitempty"`
	// Used to determine if Avalara tax is enabled.
	AvalaraTaxFlag           NullableBool `json:"avalaraTaxFlag,omitempty"`
	ItemTaxableFlag          NullableBool `json:"itemTaxableFlag,omitempty"`
	PurchaseOrderTaxableFlag NullableBool `json:"purchaseOrderTaxableFlag,omitempty"`
	// Set to true if transaction is taxable at the state level.
	StateTaxFlag   NullableBool    `json:"stateTaxFlag,omitempty"`
	StateTaxXref   *string         `json:"stateTaxXref,omitempty"`
	StateTaxAmount NullableFloat64 `json:"stateTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the county level.
	CountyTaxFlag   NullableBool    `json:"countyTaxFlag,omitempty"`
	CountyTaxXref   *string         `json:"countyTaxXref,omitempty"`
	CountyTaxAmount NullableFloat64 `json:"countyTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the city level.
	CityTaxFlag   NullableBool    `json:"cityTaxFlag,omitempty"`
	CityTaxXref   *string         `json:"cityTaxXref,omitempty"`
	CityTaxAmount NullableFloat64 `json:"cityTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the country level.
	CountryTaxFlag   NullableBool    `json:"countryTaxFlag,omitempty"`
	CountryTaxXref   *string         `json:"countryTaxXref,omitempty"`
	CountryTaxAmount NullableFloat64 `json:"countryTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the composite level.
	CompositeTaxFlag   NullableBool    `json:"compositeTaxFlag,omitempty"`
	CompositeTaxXref   *string         `json:"compositeTaxXref,omitempty"`
	CompositeTaxAmount NullableFloat64 `json:"compositeTaxAmount,omitempty"`
	// Set to true if transaction is taxable at level six.
	LevelSixTaxFlag     NullableBool       `json:"levelSixTaxFlag,omitempty"`
	LevelSixTaxXref     *string            `json:"levelSixTaxXref,omitempty"`
	LevelSixTaxAmount   NullableFloat64    `json:"levelSixTaxAmount,omitempty"`
	TaxTotal            NullableFloat64    `json:"taxTotal,omitempty"`
	Customer            *CompanyReference  `json:"customer,omitempty"`
	Vendor              *CompanyReference  `json:"vendor,omitempty"`
	VendorAccountNumber *string            `json:"vendorAccountNumber,omitempty"`
	VendorInvoiceNumber *string            `json:"vendorInvoiceNumber,omitempty"`
	VendorInvoiceDate   *string            `json:"vendorInvoiceDate,omitempty"`
	TaxFreightFlag      NullableBool       `json:"taxFreightFlag,omitempty"`
	FreightTaxTotal     NullableFloat64    `json:"freightTaxTotal,omitempty"`
	FreightCost         NullableFloat64    `json:"freightCost,omitempty"`
	DateClosed          *string            `json:"dateClosed,omitempty"`
	Info                *map[string]string `json:"_info,omitempty"`
}

// NewUnpostedProcurement instantiates a new UnpostedProcurement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnpostedProcurement() *UnpostedProcurement {
	this := UnpostedProcurement{}
	return &this
}

// NewUnpostedProcurementWithDefaults instantiates a new UnpostedProcurement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnpostedProcurementWithDefaults() *UnpostedProcurement {
	this := UnpostedProcurement{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UnpostedProcurement) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnpostedProcurement) SetDescription(v string) {
	o.Description = &v
}

// GetUnpostedProductId returns the UnpostedProductId field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetUnpostedProductId() string {
	if o == nil || IsNil(o.UnpostedProductId) {
		var ret string
		return ret
	}
	return *o.UnpostedProductId
}

// GetUnpostedProductIdOk returns a tuple with the UnpostedProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetUnpostedProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.UnpostedProductId) {
		return nil, false
	}
	return o.UnpostedProductId, true
}

// HasUnpostedProductId returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasUnpostedProductId() bool {
	if o != nil && !IsNil(o.UnpostedProductId) {
		return true
	}

	return false
}

// SetUnpostedProductId gets a reference to the given string and assigns it to the UnpostedProductId field.
func (o *UnpostedProcurement) SetUnpostedProductId(v string) {
	o.UnpostedProductId = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *UnpostedProcurement) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}

// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *UnpostedProcurement) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *UnpostedProcurement) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetDepartmentId returns the DepartmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetDepartmentId() int32 {
	if o == nil || IsNil(o.DepartmentId.Get()) {
		var ret int32
		return ret
	}
	return *o.DepartmentId.Get()
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetDepartmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentId.Get(), o.DepartmentId.IsSet()
}

// HasDepartmentId returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasDepartmentId() bool {
	if o != nil && o.DepartmentId.IsSet() {
		return true
	}

	return false
}

// SetDepartmentId gets a reference to the given NullableInt32 and assigns it to the DepartmentId field.
func (o *UnpostedProcurement) SetDepartmentId(v int32) {
	o.DepartmentId.Set(&v)
}

// SetDepartmentIdNil sets the value for DepartmentId to be an explicit nil
func (o *UnpostedProcurement) SetDepartmentIdNil() {
	o.DepartmentId.Set(nil)
}

// UnsetDepartmentId ensures that no value is present for DepartmentId, not even an explicit nil
func (o *UnpostedProcurement) UnsetDepartmentId() {
	o.DepartmentId.Unset()
}

// GetProcurementType returns the ProcurementType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetProcurementType() string {
	if o == nil || IsNil(o.ProcurementType.Get()) {
		var ret string
		return ret
	}
	return *o.ProcurementType.Get()
}

// GetProcurementTypeOk returns a tuple with the ProcurementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetProcurementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcurementType.Get(), o.ProcurementType.IsSet()
}

// HasProcurementType returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasProcurementType() bool {
	if o != nil && o.ProcurementType.IsSet() {
		return true
	}

	return false
}

// SetProcurementType gets a reference to the given NullableString and assigns it to the ProcurementType field.
func (o *UnpostedProcurement) SetProcurementType(v string) {
	o.ProcurementType.Set(&v)
}

// SetProcurementTypeNil sets the value for ProcurementType to be an explicit nil
func (o *UnpostedProcurement) SetProcurementTypeNil() {
	o.ProcurementType.Set(nil)
}

// UnsetProcurementType ensures that no value is present for ProcurementType, not even an explicit nil
func (o *UnpostedProcurement) UnsetProcurementType() {
	o.ProcurementType.Unset()
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetPurchaseOrder() PurchaseOrderReference {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret PurchaseOrderReference
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetPurchaseOrderOk() (*PurchaseOrderReference, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given PurchaseOrderReference and assigns it to the PurchaseOrder field.
func (o *UnpostedProcurement) SetPurchaseOrder(v PurchaseOrderReference) {
	o.PurchaseOrder = &v
}

// GetPurchaseDate returns the PurchaseDate field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetPurchaseDate() string {
	if o == nil || IsNil(o.PurchaseDate) {
		var ret string
		return ret
	}
	return *o.PurchaseDate
}

// GetPurchaseDateOk returns a tuple with the PurchaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetPurchaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseDate) {
		return nil, false
	}
	return o.PurchaseDate, true
}

// HasPurchaseDate returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasPurchaseDate() bool {
	if o != nil && !IsNil(o.PurchaseDate) {
		return true
	}

	return false
}

// SetPurchaseDate gets a reference to the given string and assigns it to the PurchaseDate field.
func (o *UnpostedProcurement) SetPurchaseDate(v string) {
	o.PurchaseDate = &v
}

// GetTrackingNumber returns the TrackingNumber field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetTrackingNumber() string {
	if o == nil || IsNil(o.TrackingNumber) {
		var ret string
		return ret
	}
	return *o.TrackingNumber
}

// GetTrackingNumberOk returns a tuple with the TrackingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetTrackingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingNumber) {
		return nil, false
	}
	return o.TrackingNumber, true
}

// HasTrackingNumber returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasTrackingNumber() bool {
	if o != nil && !IsNil(o.TrackingNumber) {
		return true
	}

	return false
}

// SetTrackingNumber gets a reference to the given string and assigns it to the TrackingNumber field.
func (o *UnpostedProcurement) SetTrackingNumber(v string) {
	o.TrackingNumber = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *UnpostedProcurement) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *UnpostedProcurement) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *UnpostedProcurement) SetTotal(v float64) {
	o.Total.Set(&v)
}

// SetTotalNil sets the value for Total to be an explicit nil
func (o *UnpostedProcurement) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *UnpostedProcurement) UnsetTotal() {
	o.Total.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *UnpostedProcurement) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetAvalaraTaxFlag returns the AvalaraTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetAvalaraTaxFlag() bool {
	if o == nil || IsNil(o.AvalaraTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AvalaraTaxFlag.Get()
}

// GetAvalaraTaxFlagOk returns a tuple with the AvalaraTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetAvalaraTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvalaraTaxFlag.Get(), o.AvalaraTaxFlag.IsSet()
}

// HasAvalaraTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasAvalaraTaxFlag() bool {
	if o != nil && o.AvalaraTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetAvalaraTaxFlag gets a reference to the given NullableBool and assigns it to the AvalaraTaxFlag field.
func (o *UnpostedProcurement) SetAvalaraTaxFlag(v bool) {
	o.AvalaraTaxFlag.Set(&v)
}

// SetAvalaraTaxFlagNil sets the value for AvalaraTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetAvalaraTaxFlagNil() {
	o.AvalaraTaxFlag.Set(nil)
}

// UnsetAvalaraTaxFlag ensures that no value is present for AvalaraTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetAvalaraTaxFlag() {
	o.AvalaraTaxFlag.Unset()
}

// GetItemTaxableFlag returns the ItemTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetItemTaxableFlag() bool {
	if o == nil || IsNil(o.ItemTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ItemTaxableFlag.Get()
}

// GetItemTaxableFlagOk returns a tuple with the ItemTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetItemTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemTaxableFlag.Get(), o.ItemTaxableFlag.IsSet()
}

// HasItemTaxableFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasItemTaxableFlag() bool {
	if o != nil && o.ItemTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetItemTaxableFlag gets a reference to the given NullableBool and assigns it to the ItemTaxableFlag field.
func (o *UnpostedProcurement) SetItemTaxableFlag(v bool) {
	o.ItemTaxableFlag.Set(&v)
}

// SetItemTaxableFlagNil sets the value for ItemTaxableFlag to be an explicit nil
func (o *UnpostedProcurement) SetItemTaxableFlagNil() {
	o.ItemTaxableFlag.Set(nil)
}

// UnsetItemTaxableFlag ensures that no value is present for ItemTaxableFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetItemTaxableFlag() {
	o.ItemTaxableFlag.Unset()
}

// GetPurchaseOrderTaxableFlag returns the PurchaseOrderTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetPurchaseOrderTaxableFlag() bool {
	if o == nil || IsNil(o.PurchaseOrderTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PurchaseOrderTaxableFlag.Get()
}

// GetPurchaseOrderTaxableFlagOk returns a tuple with the PurchaseOrderTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetPurchaseOrderTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurchaseOrderTaxableFlag.Get(), o.PurchaseOrderTaxableFlag.IsSet()
}

// HasPurchaseOrderTaxableFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasPurchaseOrderTaxableFlag() bool {
	if o != nil && o.PurchaseOrderTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetPurchaseOrderTaxableFlag gets a reference to the given NullableBool and assigns it to the PurchaseOrderTaxableFlag field.
func (o *UnpostedProcurement) SetPurchaseOrderTaxableFlag(v bool) {
	o.PurchaseOrderTaxableFlag.Set(&v)
}

// SetPurchaseOrderTaxableFlagNil sets the value for PurchaseOrderTaxableFlag to be an explicit nil
func (o *UnpostedProcurement) SetPurchaseOrderTaxableFlagNil() {
	o.PurchaseOrderTaxableFlag.Set(nil)
}

// UnsetPurchaseOrderTaxableFlag ensures that no value is present for PurchaseOrderTaxableFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetPurchaseOrderTaxableFlag() {
	o.PurchaseOrderTaxableFlag.Unset()
}

// GetStateTaxFlag returns the StateTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetStateTaxFlag() bool {
	if o == nil || IsNil(o.StateTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.StateTaxFlag.Get()
}

// GetStateTaxFlagOk returns a tuple with the StateTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetStateTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxFlag.Get(), o.StateTaxFlag.IsSet()
}

// HasStateTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasStateTaxFlag() bool {
	if o != nil && o.StateTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetStateTaxFlag gets a reference to the given NullableBool and assigns it to the StateTaxFlag field.
func (o *UnpostedProcurement) SetStateTaxFlag(v bool) {
	o.StateTaxFlag.Set(&v)
}

// SetStateTaxFlagNil sets the value for StateTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetStateTaxFlagNil() {
	o.StateTaxFlag.Set(nil)
}

// UnsetStateTaxFlag ensures that no value is present for StateTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetStateTaxFlag() {
	o.StateTaxFlag.Unset()
}

// GetStateTaxXref returns the StateTaxXref field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetStateTaxXref() string {
	if o == nil || IsNil(o.StateTaxXref) {
		var ret string
		return ret
	}
	return *o.StateTaxXref
}

// GetStateTaxXrefOk returns a tuple with the StateTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetStateTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxXref) {
		return nil, false
	}
	return o.StateTaxXref, true
}

// HasStateTaxXref returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasStateTaxXref() bool {
	if o != nil && !IsNil(o.StateTaxXref) {
		return true
	}

	return false
}

// SetStateTaxXref gets a reference to the given string and assigns it to the StateTaxXref field.
func (o *UnpostedProcurement) SetStateTaxXref(v string) {
	o.StateTaxXref = &v
}

// GetStateTaxAmount returns the StateTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetStateTaxAmount() float64 {
	if o == nil || IsNil(o.StateTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.StateTaxAmount.Get()
}

// GetStateTaxAmountOk returns a tuple with the StateTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetStateTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxAmount.Get(), o.StateTaxAmount.IsSet()
}

// HasStateTaxAmount returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasStateTaxAmount() bool {
	if o != nil && o.StateTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetStateTaxAmount gets a reference to the given NullableFloat64 and assigns it to the StateTaxAmount field.
func (o *UnpostedProcurement) SetStateTaxAmount(v float64) {
	o.StateTaxAmount.Set(&v)
}

// SetStateTaxAmountNil sets the value for StateTaxAmount to be an explicit nil
func (o *UnpostedProcurement) SetStateTaxAmountNil() {
	o.StateTaxAmount.Set(nil)
}

// UnsetStateTaxAmount ensures that no value is present for StateTaxAmount, not even an explicit nil
func (o *UnpostedProcurement) UnsetStateTaxAmount() {
	o.StateTaxAmount.Unset()
}

// GetCountyTaxFlag returns the CountyTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCountyTaxFlag() bool {
	if o == nil || IsNil(o.CountyTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CountyTaxFlag.Get()
}

// GetCountyTaxFlagOk returns a tuple with the CountyTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCountyTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxFlag.Get(), o.CountyTaxFlag.IsSet()
}

// HasCountyTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCountyTaxFlag() bool {
	if o != nil && o.CountyTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxFlag gets a reference to the given NullableBool and assigns it to the CountyTaxFlag field.
func (o *UnpostedProcurement) SetCountyTaxFlag(v bool) {
	o.CountyTaxFlag.Set(&v)
}

// SetCountyTaxFlagNil sets the value for CountyTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetCountyTaxFlagNil() {
	o.CountyTaxFlag.Set(nil)
}

// UnsetCountyTaxFlag ensures that no value is present for CountyTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetCountyTaxFlag() {
	o.CountyTaxFlag.Unset()
}

// GetCountyTaxXref returns the CountyTaxXref field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetCountyTaxXref() string {
	if o == nil || IsNil(o.CountyTaxXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxXref
}

// GetCountyTaxXrefOk returns a tuple with the CountyTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetCountyTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxXref) {
		return nil, false
	}
	return o.CountyTaxXref, true
}

// HasCountyTaxXref returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCountyTaxXref() bool {
	if o != nil && !IsNil(o.CountyTaxXref) {
		return true
	}

	return false
}

// SetCountyTaxXref gets a reference to the given string and assigns it to the CountyTaxXref field.
func (o *UnpostedProcurement) SetCountyTaxXref(v string) {
	o.CountyTaxXref = &v
}

// GetCountyTaxAmount returns the CountyTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCountyTaxAmount() float64 {
	if o == nil || IsNil(o.CountyTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CountyTaxAmount.Get()
}

// GetCountyTaxAmountOk returns a tuple with the CountyTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCountyTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxAmount.Get(), o.CountyTaxAmount.IsSet()
}

// HasCountyTaxAmount returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCountyTaxAmount() bool {
	if o != nil && o.CountyTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CountyTaxAmount field.
func (o *UnpostedProcurement) SetCountyTaxAmount(v float64) {
	o.CountyTaxAmount.Set(&v)
}

// SetCountyTaxAmountNil sets the value for CountyTaxAmount to be an explicit nil
func (o *UnpostedProcurement) SetCountyTaxAmountNil() {
	o.CountyTaxAmount.Set(nil)
}

// UnsetCountyTaxAmount ensures that no value is present for CountyTaxAmount, not even an explicit nil
func (o *UnpostedProcurement) UnsetCountyTaxAmount() {
	o.CountyTaxAmount.Unset()
}

// GetCityTaxFlag returns the CityTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCityTaxFlag() bool {
	if o == nil || IsNil(o.CityTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CityTaxFlag.Get()
}

// GetCityTaxFlagOk returns a tuple with the CityTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCityTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxFlag.Get(), o.CityTaxFlag.IsSet()
}

// HasCityTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCityTaxFlag() bool {
	if o != nil && o.CityTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCityTaxFlag gets a reference to the given NullableBool and assigns it to the CityTaxFlag field.
func (o *UnpostedProcurement) SetCityTaxFlag(v bool) {
	o.CityTaxFlag.Set(&v)
}

// SetCityTaxFlagNil sets the value for CityTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetCityTaxFlagNil() {
	o.CityTaxFlag.Set(nil)
}

// UnsetCityTaxFlag ensures that no value is present for CityTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetCityTaxFlag() {
	o.CityTaxFlag.Unset()
}

// GetCityTaxXref returns the CityTaxXref field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetCityTaxXref() string {
	if o == nil || IsNil(o.CityTaxXref) {
		var ret string
		return ret
	}
	return *o.CityTaxXref
}

// GetCityTaxXrefOk returns a tuple with the CityTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetCityTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CityTaxXref) {
		return nil, false
	}
	return o.CityTaxXref, true
}

// HasCityTaxXref returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCityTaxXref() bool {
	if o != nil && !IsNil(o.CityTaxXref) {
		return true
	}

	return false
}

// SetCityTaxXref gets a reference to the given string and assigns it to the CityTaxXref field.
func (o *UnpostedProcurement) SetCityTaxXref(v string) {
	o.CityTaxXref = &v
}

// GetCityTaxAmount returns the CityTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCityTaxAmount() float64 {
	if o == nil || IsNil(o.CityTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CityTaxAmount.Get()
}

// GetCityTaxAmountOk returns a tuple with the CityTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCityTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxAmount.Get(), o.CityTaxAmount.IsSet()
}

// HasCityTaxAmount returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCityTaxAmount() bool {
	if o != nil && o.CityTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCityTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CityTaxAmount field.
func (o *UnpostedProcurement) SetCityTaxAmount(v float64) {
	o.CityTaxAmount.Set(&v)
}

// SetCityTaxAmountNil sets the value for CityTaxAmount to be an explicit nil
func (o *UnpostedProcurement) SetCityTaxAmountNil() {
	o.CityTaxAmount.Set(nil)
}

// UnsetCityTaxAmount ensures that no value is present for CityTaxAmount, not even an explicit nil
func (o *UnpostedProcurement) UnsetCityTaxAmount() {
	o.CityTaxAmount.Unset()
}

// GetCountryTaxFlag returns the CountryTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCountryTaxFlag() bool {
	if o == nil || IsNil(o.CountryTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CountryTaxFlag.Get()
}

// GetCountryTaxFlagOk returns a tuple with the CountryTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCountryTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxFlag.Get(), o.CountryTaxFlag.IsSet()
}

// HasCountryTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCountryTaxFlag() bool {
	if o != nil && o.CountryTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxFlag gets a reference to the given NullableBool and assigns it to the CountryTaxFlag field.
func (o *UnpostedProcurement) SetCountryTaxFlag(v bool) {
	o.CountryTaxFlag.Set(&v)
}

// SetCountryTaxFlagNil sets the value for CountryTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetCountryTaxFlagNil() {
	o.CountryTaxFlag.Set(nil)
}

// UnsetCountryTaxFlag ensures that no value is present for CountryTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetCountryTaxFlag() {
	o.CountryTaxFlag.Unset()
}

// GetCountryTaxXref returns the CountryTaxXref field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetCountryTaxXref() string {
	if o == nil || IsNil(o.CountryTaxXref) {
		var ret string
		return ret
	}
	return *o.CountryTaxXref
}

// GetCountryTaxXrefOk returns a tuple with the CountryTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetCountryTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountryTaxXref) {
		return nil, false
	}
	return o.CountryTaxXref, true
}

// HasCountryTaxXref returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCountryTaxXref() bool {
	if o != nil && !IsNil(o.CountryTaxXref) {
		return true
	}

	return false
}

// SetCountryTaxXref gets a reference to the given string and assigns it to the CountryTaxXref field.
func (o *UnpostedProcurement) SetCountryTaxXref(v string) {
	o.CountryTaxXref = &v
}

// GetCountryTaxAmount returns the CountryTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCountryTaxAmount() float64 {
	if o == nil || IsNil(o.CountryTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CountryTaxAmount.Get()
}

// GetCountryTaxAmountOk returns a tuple with the CountryTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCountryTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxAmount.Get(), o.CountryTaxAmount.IsSet()
}

// HasCountryTaxAmount returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCountryTaxAmount() bool {
	if o != nil && o.CountryTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CountryTaxAmount field.
func (o *UnpostedProcurement) SetCountryTaxAmount(v float64) {
	o.CountryTaxAmount.Set(&v)
}

// SetCountryTaxAmountNil sets the value for CountryTaxAmount to be an explicit nil
func (o *UnpostedProcurement) SetCountryTaxAmountNil() {
	o.CountryTaxAmount.Set(nil)
}

// UnsetCountryTaxAmount ensures that no value is present for CountryTaxAmount, not even an explicit nil
func (o *UnpostedProcurement) UnsetCountryTaxAmount() {
	o.CountryTaxAmount.Unset()
}

// GetCompositeTaxFlag returns the CompositeTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCompositeTaxFlag() bool {
	if o == nil || IsNil(o.CompositeTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompositeTaxFlag.Get()
}

// GetCompositeTaxFlagOk returns a tuple with the CompositeTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCompositeTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxFlag.Get(), o.CompositeTaxFlag.IsSet()
}

// HasCompositeTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCompositeTaxFlag() bool {
	if o != nil && o.CompositeTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxFlag gets a reference to the given NullableBool and assigns it to the CompositeTaxFlag field.
func (o *UnpostedProcurement) SetCompositeTaxFlag(v bool) {
	o.CompositeTaxFlag.Set(&v)
}

// SetCompositeTaxFlagNil sets the value for CompositeTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetCompositeTaxFlagNil() {
	o.CompositeTaxFlag.Set(nil)
}

// UnsetCompositeTaxFlag ensures that no value is present for CompositeTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetCompositeTaxFlag() {
	o.CompositeTaxFlag.Unset()
}

// GetCompositeTaxXref returns the CompositeTaxXref field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetCompositeTaxXref() string {
	if o == nil || IsNil(o.CompositeTaxXref) {
		var ret string
		return ret
	}
	return *o.CompositeTaxXref
}

// GetCompositeTaxXrefOk returns a tuple with the CompositeTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetCompositeTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeTaxXref) {
		return nil, false
	}
	return o.CompositeTaxXref, true
}

// HasCompositeTaxXref returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCompositeTaxXref() bool {
	if o != nil && !IsNil(o.CompositeTaxXref) {
		return true
	}

	return false
}

// SetCompositeTaxXref gets a reference to the given string and assigns it to the CompositeTaxXref field.
func (o *UnpostedProcurement) SetCompositeTaxXref(v string) {
	o.CompositeTaxXref = &v
}

// GetCompositeTaxAmount returns the CompositeTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetCompositeTaxAmount() float64 {
	if o == nil || IsNil(o.CompositeTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CompositeTaxAmount.Get()
}

// GetCompositeTaxAmountOk returns a tuple with the CompositeTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetCompositeTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxAmount.Get(), o.CompositeTaxAmount.IsSet()
}

// HasCompositeTaxAmount returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCompositeTaxAmount() bool {
	if o != nil && o.CompositeTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CompositeTaxAmount field.
func (o *UnpostedProcurement) SetCompositeTaxAmount(v float64) {
	o.CompositeTaxAmount.Set(&v)
}

// SetCompositeTaxAmountNil sets the value for CompositeTaxAmount to be an explicit nil
func (o *UnpostedProcurement) SetCompositeTaxAmountNil() {
	o.CompositeTaxAmount.Set(nil)
}

// UnsetCompositeTaxAmount ensures that no value is present for CompositeTaxAmount, not even an explicit nil
func (o *UnpostedProcurement) UnsetCompositeTaxAmount() {
	o.CompositeTaxAmount.Unset()
}

// GetLevelSixTaxFlag returns the LevelSixTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetLevelSixTaxFlag() bool {
	if o == nil || IsNil(o.LevelSixTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixTaxFlag.Get()
}

// GetLevelSixTaxFlagOk returns a tuple with the LevelSixTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetLevelSixTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxFlag.Get(), o.LevelSixTaxFlag.IsSet()
}

// HasLevelSixTaxFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasLevelSixTaxFlag() bool {
	if o != nil && o.LevelSixTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxFlag gets a reference to the given NullableBool and assigns it to the LevelSixTaxFlag field.
func (o *UnpostedProcurement) SetLevelSixTaxFlag(v bool) {
	o.LevelSixTaxFlag.Set(&v)
}

// SetLevelSixTaxFlagNil sets the value for LevelSixTaxFlag to be an explicit nil
func (o *UnpostedProcurement) SetLevelSixTaxFlagNil() {
	o.LevelSixTaxFlag.Set(nil)
}

// UnsetLevelSixTaxFlag ensures that no value is present for LevelSixTaxFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetLevelSixTaxFlag() {
	o.LevelSixTaxFlag.Unset()
}

// GetLevelSixTaxXref returns the LevelSixTaxXref field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetLevelSixTaxXref() string {
	if o == nil || IsNil(o.LevelSixTaxXref) {
		var ret string
		return ret
	}
	return *o.LevelSixTaxXref
}

// GetLevelSixTaxXrefOk returns a tuple with the LevelSixTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetLevelSixTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelSixTaxXref) {
		return nil, false
	}
	return o.LevelSixTaxXref, true
}

// HasLevelSixTaxXref returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasLevelSixTaxXref() bool {
	if o != nil && !IsNil(o.LevelSixTaxXref) {
		return true
	}

	return false
}

// SetLevelSixTaxXref gets a reference to the given string and assigns it to the LevelSixTaxXref field.
func (o *UnpostedProcurement) SetLevelSixTaxXref(v string) {
	o.LevelSixTaxXref = &v
}

// GetLevelSixTaxAmount returns the LevelSixTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetLevelSixTaxAmount() float64 {
	if o == nil || IsNil(o.LevelSixTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixTaxAmount.Get()
}

// GetLevelSixTaxAmountOk returns a tuple with the LevelSixTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetLevelSixTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxAmount.Get(), o.LevelSixTaxAmount.IsSet()
}

// HasLevelSixTaxAmount returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasLevelSixTaxAmount() bool {
	if o != nil && o.LevelSixTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxAmount gets a reference to the given NullableFloat64 and assigns it to the LevelSixTaxAmount field.
func (o *UnpostedProcurement) SetLevelSixTaxAmount(v float64) {
	o.LevelSixTaxAmount.Set(&v)
}

// SetLevelSixTaxAmountNil sets the value for LevelSixTaxAmount to be an explicit nil
func (o *UnpostedProcurement) SetLevelSixTaxAmountNil() {
	o.LevelSixTaxAmount.Set(nil)
}

// UnsetLevelSixTaxAmount ensures that no value is present for LevelSixTaxAmount, not even an explicit nil
func (o *UnpostedProcurement) UnsetLevelSixTaxAmount() {
	o.LevelSixTaxAmount.Unset()
}

// GetTaxTotal returns the TaxTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetTaxTotal() float64 {
	if o == nil || IsNil(o.TaxTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxTotal.Get()
}

// GetTaxTotalOk returns a tuple with the TaxTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetTaxTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxTotal.Get(), o.TaxTotal.IsSet()
}

// HasTaxTotal returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasTaxTotal() bool {
	if o != nil && o.TaxTotal.IsSet() {
		return true
	}

	return false
}

// SetTaxTotal gets a reference to the given NullableFloat64 and assigns it to the TaxTotal field.
func (o *UnpostedProcurement) SetTaxTotal(v float64) {
	o.TaxTotal.Set(&v)
}

// SetTaxTotalNil sets the value for TaxTotal to be an explicit nil
func (o *UnpostedProcurement) SetTaxTotalNil() {
	o.TaxTotal.Set(nil)
}

// UnsetTaxTotal ensures that no value is present for TaxTotal, not even an explicit nil
func (o *UnpostedProcurement) UnsetTaxTotal() {
	o.TaxTotal.Unset()
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetCustomer() CompanyReference {
	if o == nil || IsNil(o.Customer) {
		var ret CompanyReference
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetCustomerOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasCustomer() bool {
	if o != nil && !IsNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given CompanyReference and assigns it to the Customer field.
func (o *UnpostedProcurement) SetCustomer(v CompanyReference) {
	o.Customer = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetVendor() CompanyReference {
	if o == nil || IsNil(o.Vendor) {
		var ret CompanyReference
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetVendorOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given CompanyReference and assigns it to the Vendor field.
func (o *UnpostedProcurement) SetVendor(v CompanyReference) {
	o.Vendor = &v
}

// GetVendorAccountNumber returns the VendorAccountNumber field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetVendorAccountNumber() string {
	if o == nil || IsNil(o.VendorAccountNumber) {
		var ret string
		return ret
	}
	return *o.VendorAccountNumber
}

// GetVendorAccountNumberOk returns a tuple with the VendorAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetVendorAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorAccountNumber) {
		return nil, false
	}
	return o.VendorAccountNumber, true
}

// HasVendorAccountNumber returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasVendorAccountNumber() bool {
	if o != nil && !IsNil(o.VendorAccountNumber) {
		return true
	}

	return false
}

// SetVendorAccountNumber gets a reference to the given string and assigns it to the VendorAccountNumber field.
func (o *UnpostedProcurement) SetVendorAccountNumber(v string) {
	o.VendorAccountNumber = &v
}

// GetVendorInvoiceNumber returns the VendorInvoiceNumber field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetVendorInvoiceNumber() string {
	if o == nil || IsNil(o.VendorInvoiceNumber) {
		var ret string
		return ret
	}
	return *o.VendorInvoiceNumber
}

// GetVendorInvoiceNumberOk returns a tuple with the VendorInvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetVendorInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorInvoiceNumber) {
		return nil, false
	}
	return o.VendorInvoiceNumber, true
}

// HasVendorInvoiceNumber returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasVendorInvoiceNumber() bool {
	if o != nil && !IsNil(o.VendorInvoiceNumber) {
		return true
	}

	return false
}

// SetVendorInvoiceNumber gets a reference to the given string and assigns it to the VendorInvoiceNumber field.
func (o *UnpostedProcurement) SetVendorInvoiceNumber(v string) {
	o.VendorInvoiceNumber = &v
}

// GetVendorInvoiceDate returns the VendorInvoiceDate field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetVendorInvoiceDate() string {
	if o == nil || IsNil(o.VendorInvoiceDate) {
		var ret string
		return ret
	}
	return *o.VendorInvoiceDate
}

// GetVendorInvoiceDateOk returns a tuple with the VendorInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetVendorInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.VendorInvoiceDate) {
		return nil, false
	}
	return o.VendorInvoiceDate, true
}

// HasVendorInvoiceDate returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasVendorInvoiceDate() bool {
	if o != nil && !IsNil(o.VendorInvoiceDate) {
		return true
	}

	return false
}

// SetVendorInvoiceDate gets a reference to the given string and assigns it to the VendorInvoiceDate field.
func (o *UnpostedProcurement) SetVendorInvoiceDate(v string) {
	o.VendorInvoiceDate = &v
}

// GetTaxFreightFlag returns the TaxFreightFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetTaxFreightFlag() bool {
	if o == nil || IsNil(o.TaxFreightFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxFreightFlag.Get()
}

// GetTaxFreightFlagOk returns a tuple with the TaxFreightFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetTaxFreightFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxFreightFlag.Get(), o.TaxFreightFlag.IsSet()
}

// HasTaxFreightFlag returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasTaxFreightFlag() bool {
	if o != nil && o.TaxFreightFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxFreightFlag gets a reference to the given NullableBool and assigns it to the TaxFreightFlag field.
func (o *UnpostedProcurement) SetTaxFreightFlag(v bool) {
	o.TaxFreightFlag.Set(&v)
}

// SetTaxFreightFlagNil sets the value for TaxFreightFlag to be an explicit nil
func (o *UnpostedProcurement) SetTaxFreightFlagNil() {
	o.TaxFreightFlag.Set(nil)
}

// UnsetTaxFreightFlag ensures that no value is present for TaxFreightFlag, not even an explicit nil
func (o *UnpostedProcurement) UnsetTaxFreightFlag() {
	o.TaxFreightFlag.Unset()
}

// GetFreightTaxTotal returns the FreightTaxTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetFreightTaxTotal() float64 {
	if o == nil || IsNil(o.FreightTaxTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.FreightTaxTotal.Get()
}

// GetFreightTaxTotalOk returns a tuple with the FreightTaxTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetFreightTaxTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreightTaxTotal.Get(), o.FreightTaxTotal.IsSet()
}

// HasFreightTaxTotal returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasFreightTaxTotal() bool {
	if o != nil && o.FreightTaxTotal.IsSet() {
		return true
	}

	return false
}

// SetFreightTaxTotal gets a reference to the given NullableFloat64 and assigns it to the FreightTaxTotal field.
func (o *UnpostedProcurement) SetFreightTaxTotal(v float64) {
	o.FreightTaxTotal.Set(&v)
}

// SetFreightTaxTotalNil sets the value for FreightTaxTotal to be an explicit nil
func (o *UnpostedProcurement) SetFreightTaxTotalNil() {
	o.FreightTaxTotal.Set(nil)
}

// UnsetFreightTaxTotal ensures that no value is present for FreightTaxTotal, not even an explicit nil
func (o *UnpostedProcurement) UnsetFreightTaxTotal() {
	o.FreightTaxTotal.Unset()
}

// GetFreightCost returns the FreightCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedProcurement) GetFreightCost() float64 {
	if o == nil || IsNil(o.FreightCost.Get()) {
		var ret float64
		return ret
	}
	return *o.FreightCost.Get()
}

// GetFreightCostOk returns a tuple with the FreightCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedProcurement) GetFreightCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreightCost.Get(), o.FreightCost.IsSet()
}

// HasFreightCost returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasFreightCost() bool {
	if o != nil && o.FreightCost.IsSet() {
		return true
	}

	return false
}

// SetFreightCost gets a reference to the given NullableFloat64 and assigns it to the FreightCost field.
func (o *UnpostedProcurement) SetFreightCost(v float64) {
	o.FreightCost.Set(&v)
}

// SetFreightCostNil sets the value for FreightCost to be an explicit nil
func (o *UnpostedProcurement) SetFreightCostNil() {
	o.FreightCost.Set(nil)
}

// UnsetFreightCost ensures that no value is present for FreightCost, not even an explicit nil
func (o *UnpostedProcurement) UnsetFreightCost() {
	o.FreightCost.Unset()
}

// GetDateClosed returns the DateClosed field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetDateClosed() string {
	if o == nil || IsNil(o.DateClosed) {
		var ret string
		return ret
	}
	return *o.DateClosed
}

// GetDateClosedOk returns a tuple with the DateClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetDateClosedOk() (*string, bool) {
	if o == nil || IsNil(o.DateClosed) {
		return nil, false
	}
	return o.DateClosed, true
}

// HasDateClosed returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasDateClosed() bool {
	if o != nil && !IsNil(o.DateClosed) {
		return true
	}

	return false
}

// SetDateClosed gets a reference to the given string and assigns it to the DateClosed field.
func (o *UnpostedProcurement) SetDateClosed(v string) {
	o.DateClosed = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *UnpostedProcurement) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedProcurement) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *UnpostedProcurement) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *UnpostedProcurement) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o UnpostedProcurement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnpostedProcurement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.UnpostedProductId) {
		toSerialize["unpostedProductId"] = o.UnpostedProductId
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.DepartmentId.IsSet() {
		toSerialize["departmentId"] = o.DepartmentId.Get()
	}
	if o.ProcurementType.IsSet() {
		toSerialize["procurementType"] = o.ProcurementType.Get()
	}
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchaseOrder"] = o.PurchaseOrder
	}
	if !IsNil(o.PurchaseDate) {
		toSerialize["purchaseDate"] = o.PurchaseDate
	}
	if !IsNil(o.TrackingNumber) {
		toSerialize["trackingNumber"] = o.TrackingNumber
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.AvalaraTaxFlag.IsSet() {
		toSerialize["avalaraTaxFlag"] = o.AvalaraTaxFlag.Get()
	}
	if o.ItemTaxableFlag.IsSet() {
		toSerialize["itemTaxableFlag"] = o.ItemTaxableFlag.Get()
	}
	if o.PurchaseOrderTaxableFlag.IsSet() {
		toSerialize["purchaseOrderTaxableFlag"] = o.PurchaseOrderTaxableFlag.Get()
	}
	if o.StateTaxFlag.IsSet() {
		toSerialize["stateTaxFlag"] = o.StateTaxFlag.Get()
	}
	if !IsNil(o.StateTaxXref) {
		toSerialize["stateTaxXref"] = o.StateTaxXref
	}
	if o.StateTaxAmount.IsSet() {
		toSerialize["stateTaxAmount"] = o.StateTaxAmount.Get()
	}
	if o.CountyTaxFlag.IsSet() {
		toSerialize["countyTaxFlag"] = o.CountyTaxFlag.Get()
	}
	if !IsNil(o.CountyTaxXref) {
		toSerialize["countyTaxXref"] = o.CountyTaxXref
	}
	if o.CountyTaxAmount.IsSet() {
		toSerialize["countyTaxAmount"] = o.CountyTaxAmount.Get()
	}
	if o.CityTaxFlag.IsSet() {
		toSerialize["cityTaxFlag"] = o.CityTaxFlag.Get()
	}
	if !IsNil(o.CityTaxXref) {
		toSerialize["cityTaxXref"] = o.CityTaxXref
	}
	if o.CityTaxAmount.IsSet() {
		toSerialize["cityTaxAmount"] = o.CityTaxAmount.Get()
	}
	if o.CountryTaxFlag.IsSet() {
		toSerialize["countryTaxFlag"] = o.CountryTaxFlag.Get()
	}
	if !IsNil(o.CountryTaxXref) {
		toSerialize["countryTaxXref"] = o.CountryTaxXref
	}
	if o.CountryTaxAmount.IsSet() {
		toSerialize["countryTaxAmount"] = o.CountryTaxAmount.Get()
	}
	if o.CompositeTaxFlag.IsSet() {
		toSerialize["compositeTaxFlag"] = o.CompositeTaxFlag.Get()
	}
	if !IsNil(o.CompositeTaxXref) {
		toSerialize["compositeTaxXref"] = o.CompositeTaxXref
	}
	if o.CompositeTaxAmount.IsSet() {
		toSerialize["compositeTaxAmount"] = o.CompositeTaxAmount.Get()
	}
	if o.LevelSixTaxFlag.IsSet() {
		toSerialize["levelSixTaxFlag"] = o.LevelSixTaxFlag.Get()
	}
	if !IsNil(o.LevelSixTaxXref) {
		toSerialize["levelSixTaxXref"] = o.LevelSixTaxXref
	}
	if o.LevelSixTaxAmount.IsSet() {
		toSerialize["levelSixTaxAmount"] = o.LevelSixTaxAmount.Get()
	}
	if o.TaxTotal.IsSet() {
		toSerialize["taxTotal"] = o.TaxTotal.Get()
	}
	if !IsNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorAccountNumber) {
		toSerialize["vendorAccountNumber"] = o.VendorAccountNumber
	}
	if !IsNil(o.VendorInvoiceNumber) {
		toSerialize["vendorInvoiceNumber"] = o.VendorInvoiceNumber
	}
	if !IsNil(o.VendorInvoiceDate) {
		toSerialize["vendorInvoiceDate"] = o.VendorInvoiceDate
	}
	if o.TaxFreightFlag.IsSet() {
		toSerialize["taxFreightFlag"] = o.TaxFreightFlag.Get()
	}
	if o.FreightTaxTotal.IsSet() {
		toSerialize["freightTaxTotal"] = o.FreightTaxTotal.Get()
	}
	if o.FreightCost.IsSet() {
		toSerialize["freightCost"] = o.FreightCost.Get()
	}
	if !IsNil(o.DateClosed) {
		toSerialize["dateClosed"] = o.DateClosed
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableUnpostedProcurement struct {
	value *UnpostedProcurement
	isSet bool
}

func (v NullableUnpostedProcurement) Get() *UnpostedProcurement {
	return v.value
}

func (v *NullableUnpostedProcurement) Set(val *UnpostedProcurement) {
	v.value = val
	v.isSet = true
}

func (v NullableUnpostedProcurement) IsSet() bool {
	return v.isSet
}

func (v *NullableUnpostedProcurement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnpostedProcurement(val *UnpostedProcurement) *NullableUnpostedProcurement {
	return &NullableUnpostedProcurement{value: val, isSet: true}
}

func (v NullableUnpostedProcurement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnpostedProcurement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
