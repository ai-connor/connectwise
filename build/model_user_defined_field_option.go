/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UserDefinedFieldOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedFieldOption{}

// UserDefinedFieldOption struct for UserDefinedFieldOption
type UserDefinedFieldOption struct {
	Id           *int32        `json:"id,omitempty"`
	OptionValue  *string       `json:"optionValue,omitempty"`
	DefaultFlag  NullableBool  `json:"defaultFlag,omitempty"`
	InactiveFlag NullableBool  `json:"inactiveFlag,omitempty"`
	SortOrder    NullableInt32 `json:"sortOrder,omitempty"`
}

// NewUserDefinedFieldOption instantiates a new UserDefinedFieldOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedFieldOption() *UserDefinedFieldOption {
	this := UserDefinedFieldOption{}
	return &this
}

// NewUserDefinedFieldOptionWithDefaults instantiates a new UserDefinedFieldOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedFieldOptionWithDefaults() *UserDefinedFieldOption {
	this := UserDefinedFieldOption{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDefinedFieldOption) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldOption) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDefinedFieldOption) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserDefinedFieldOption) SetId(v int32) {
	o.Id = &v
}

// GetOptionValue returns the OptionValue field value if set, zero value otherwise.
func (o *UserDefinedFieldOption) GetOptionValue() string {
	if o == nil || IsNil(o.OptionValue) {
		var ret string
		return ret
	}
	return *o.OptionValue
}

// GetOptionValueOk returns a tuple with the OptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldOption) GetOptionValueOk() (*string, bool) {
	if o == nil || IsNil(o.OptionValue) {
		return nil, false
	}
	return o.OptionValue, true
}

// HasOptionValue returns a boolean if a field has been set.
func (o *UserDefinedFieldOption) HasOptionValue() bool {
	if o != nil && !IsNil(o.OptionValue) {
		return true
	}

	return false
}

// SetOptionValue gets a reference to the given string and assigns it to the OptionValue field.
func (o *UserDefinedFieldOption) SetOptionValue(v string) {
	o.OptionValue = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedFieldOption) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedFieldOption) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *UserDefinedFieldOption) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *UserDefinedFieldOption) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *UserDefinedFieldOption) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *UserDefinedFieldOption) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedFieldOption) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedFieldOption) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *UserDefinedFieldOption) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *UserDefinedFieldOption) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *UserDefinedFieldOption) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *UserDefinedFieldOption) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedFieldOption) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedFieldOption) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *UserDefinedFieldOption) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *UserDefinedFieldOption) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *UserDefinedFieldOption) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *UserDefinedFieldOption) UnsetSortOrder() {
	o.SortOrder.Unset()
}

func (o UserDefinedFieldOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedFieldOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OptionValue) {
		toSerialize["optionValue"] = o.OptionValue
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	return toSerialize, nil
}

type NullableUserDefinedFieldOption struct {
	value *UserDefinedFieldOption
	isSet bool
}

func (v NullableUserDefinedFieldOption) Get() *UserDefinedFieldOption {
	return v.value
}

func (v *NullableUserDefinedFieldOption) Set(val *UserDefinedFieldOption) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedFieldOption) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedFieldOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedFieldOption(val *UserDefinedFieldOption) *NullableUserDefinedFieldOption {
	return &NullableUserDefinedFieldOption{value: val, isSet: true}
}

func (v NullableUserDefinedFieldOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedFieldOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
