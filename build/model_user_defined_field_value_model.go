/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UserDefinedFieldValueModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedFieldValueModel{}

// UserDefinedFieldValueModel struct for UserDefinedFieldValueModel
type UserDefinedFieldValueModel struct {
	UserDefinedFieldRecId      *int32  `json:"userDefinedFieldRecId,omitempty"`
	Value                      *string `json:"value,omitempty"`
	RowNum                     *int32  `json:"rowNum,omitempty"`
	SkipLocationAndBillingUnit *bool   `json:"skipLocationAndBillingUnit,omitempty"`
	Filtered                   *bool   `json:"filtered,omitempty"`
}

// NewUserDefinedFieldValueModel instantiates a new UserDefinedFieldValueModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedFieldValueModel() *UserDefinedFieldValueModel {
	this := UserDefinedFieldValueModel{}
	return &this
}

// NewUserDefinedFieldValueModelWithDefaults instantiates a new UserDefinedFieldValueModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedFieldValueModelWithDefaults() *UserDefinedFieldValueModel {
	this := UserDefinedFieldValueModel{}
	return &this
}

// GetUserDefinedFieldRecId returns the UserDefinedFieldRecId field value if set, zero value otherwise.
func (o *UserDefinedFieldValueModel) GetUserDefinedFieldRecId() int32 {
	if o == nil || IsNil(o.UserDefinedFieldRecId) {
		var ret int32
		return ret
	}
	return *o.UserDefinedFieldRecId
}

// GetUserDefinedFieldRecIdOk returns a tuple with the UserDefinedFieldRecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldValueModel) GetUserDefinedFieldRecIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserDefinedFieldRecId) {
		return nil, false
	}
	return o.UserDefinedFieldRecId, true
}

// HasUserDefinedFieldRecId returns a boolean if a field has been set.
func (o *UserDefinedFieldValueModel) HasUserDefinedFieldRecId() bool {
	if o != nil && !IsNil(o.UserDefinedFieldRecId) {
		return true
	}

	return false
}

// SetUserDefinedFieldRecId gets a reference to the given int32 and assigns it to the UserDefinedFieldRecId field.
func (o *UserDefinedFieldValueModel) SetUserDefinedFieldRecId(v int32) {
	o.UserDefinedFieldRecId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UserDefinedFieldValueModel) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldValueModel) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UserDefinedFieldValueModel) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UserDefinedFieldValueModel) SetValue(v string) {
	o.Value = &v
}

// GetRowNum returns the RowNum field value if set, zero value otherwise.
func (o *UserDefinedFieldValueModel) GetRowNum() int32 {
	if o == nil || IsNil(o.RowNum) {
		var ret int32
		return ret
	}
	return *o.RowNum
}

// GetRowNumOk returns a tuple with the RowNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldValueModel) GetRowNumOk() (*int32, bool) {
	if o == nil || IsNil(o.RowNum) {
		return nil, false
	}
	return o.RowNum, true
}

// HasRowNum returns a boolean if a field has been set.
func (o *UserDefinedFieldValueModel) HasRowNum() bool {
	if o != nil && !IsNil(o.RowNum) {
		return true
	}

	return false
}

// SetRowNum gets a reference to the given int32 and assigns it to the RowNum field.
func (o *UserDefinedFieldValueModel) SetRowNum(v int32) {
	o.RowNum = &v
}

// GetSkipLocationAndBillingUnit returns the SkipLocationAndBillingUnit field value if set, zero value otherwise.
func (o *UserDefinedFieldValueModel) GetSkipLocationAndBillingUnit() bool {
	if o == nil || IsNil(o.SkipLocationAndBillingUnit) {
		var ret bool
		return ret
	}
	return *o.SkipLocationAndBillingUnit
}

// GetSkipLocationAndBillingUnitOk returns a tuple with the SkipLocationAndBillingUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldValueModel) GetSkipLocationAndBillingUnitOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipLocationAndBillingUnit) {
		return nil, false
	}
	return o.SkipLocationAndBillingUnit, true
}

// HasSkipLocationAndBillingUnit returns a boolean if a field has been set.
func (o *UserDefinedFieldValueModel) HasSkipLocationAndBillingUnit() bool {
	if o != nil && !IsNil(o.SkipLocationAndBillingUnit) {
		return true
	}

	return false
}

// SetSkipLocationAndBillingUnit gets a reference to the given bool and assigns it to the SkipLocationAndBillingUnit field.
func (o *UserDefinedFieldValueModel) SetSkipLocationAndBillingUnit(v bool) {
	o.SkipLocationAndBillingUnit = &v
}

// GetFiltered returns the Filtered field value if set, zero value otherwise.
func (o *UserDefinedFieldValueModel) GetFiltered() bool {
	if o == nil || IsNil(o.Filtered) {
		var ret bool
		return ret
	}
	return *o.Filtered
}

// GetFilteredOk returns a tuple with the Filtered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldValueModel) GetFilteredOk() (*bool, bool) {
	if o == nil || IsNil(o.Filtered) {
		return nil, false
	}
	return o.Filtered, true
}

// HasFiltered returns a boolean if a field has been set.
func (o *UserDefinedFieldValueModel) HasFiltered() bool {
	if o != nil && !IsNil(o.Filtered) {
		return true
	}

	return false
}

// SetFiltered gets a reference to the given bool and assigns it to the Filtered field.
func (o *UserDefinedFieldValueModel) SetFiltered(v bool) {
	o.Filtered = &v
}

func (o UserDefinedFieldValueModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedFieldValueModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserDefinedFieldRecId) {
		toSerialize["userDefinedFieldRecId"] = o.UserDefinedFieldRecId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.RowNum) {
		toSerialize["rowNum"] = o.RowNum
	}
	if !IsNil(o.SkipLocationAndBillingUnit) {
		toSerialize["skipLocationAndBillingUnit"] = o.SkipLocationAndBillingUnit
	}
	if !IsNil(o.Filtered) {
		toSerialize["filtered"] = o.Filtered
	}
	return toSerialize, nil
}

type NullableUserDefinedFieldValueModel struct {
	value *UserDefinedFieldValueModel
	isSet bool
}

func (v NullableUserDefinedFieldValueModel) Get() *UserDefinedFieldValueModel {
	return v.value
}

func (v *NullableUserDefinedFieldValueModel) Set(val *UserDefinedFieldValueModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedFieldValueModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedFieldValueModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedFieldValueModel(val *UserDefinedFieldValueModel) *NullableUserDefinedFieldValueModel {
	return &NullableUserDefinedFieldValueModel{value: val, isSet: true}
}

func (v NullableUserDefinedFieldValueModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedFieldValueModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
