/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the WorkTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkTypeInfo{}

// WorkTypeInfo struct for WorkTypeInfo
type WorkTypeInfo struct {
	Id                  *int32             `json:"id,omitempty"`
	Name                *string            `json:"name,omitempty"`
	DefaultFlag         NullableBool       `json:"defaultFlag,omitempty"`
	InactiveFlag        NullableBool       `json:"inactiveFlag,omitempty"`
	ActivityDefaultFlag NullableBool       `json:"activityDefaultFlag,omitempty"`
	Info                *map[string]string `json:"_info,omitempty"`
}

// NewWorkTypeInfo instantiates a new WorkTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkTypeInfo() *WorkTypeInfo {
	this := WorkTypeInfo{}
	return &this
}

// NewWorkTypeInfoWithDefaults instantiates a new WorkTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkTypeInfoWithDefaults() *WorkTypeInfo {
	this := WorkTypeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkTypeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkTypeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkTypeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WorkTypeInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkTypeInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkTypeInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkTypeInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkTypeInfo) SetName(v string) {
	o.Name = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkTypeInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkTypeInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *WorkTypeInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *WorkTypeInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}

// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *WorkTypeInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *WorkTypeInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkTypeInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkTypeInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *WorkTypeInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *WorkTypeInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}

// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *WorkTypeInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *WorkTypeInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetActivityDefaultFlag returns the ActivityDefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkTypeInfo) GetActivityDefaultFlag() bool {
	if o == nil || IsNil(o.ActivityDefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ActivityDefaultFlag.Get()
}

// GetActivityDefaultFlagOk returns a tuple with the ActivityDefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkTypeInfo) GetActivityDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityDefaultFlag.Get(), o.ActivityDefaultFlag.IsSet()
}

// HasActivityDefaultFlag returns a boolean if a field has been set.
func (o *WorkTypeInfo) HasActivityDefaultFlag() bool {
	if o != nil && o.ActivityDefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetActivityDefaultFlag gets a reference to the given NullableBool and assigns it to the ActivityDefaultFlag field.
func (o *WorkTypeInfo) SetActivityDefaultFlag(v bool) {
	o.ActivityDefaultFlag.Set(&v)
}

// SetActivityDefaultFlagNil sets the value for ActivityDefaultFlag to be an explicit nil
func (o *WorkTypeInfo) SetActivityDefaultFlagNil() {
	o.ActivityDefaultFlag.Set(nil)
}

// UnsetActivityDefaultFlag ensures that no value is present for ActivityDefaultFlag, not even an explicit nil
func (o *WorkTypeInfo) UnsetActivityDefaultFlag() {
	o.ActivityDefaultFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WorkTypeInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkTypeInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WorkTypeInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WorkTypeInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WorkTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.ActivityDefaultFlag.IsSet() {
		toSerialize["activityDefaultFlag"] = o.ActivityDefaultFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableWorkTypeInfo struct {
	value *WorkTypeInfo
	isSet bool
}

func (v NullableWorkTypeInfo) Get() *WorkTypeInfo {
	return v.value
}

func (v *NullableWorkTypeInfo) Set(val *WorkTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkTypeInfo(val *WorkTypeInfo) *NullableWorkTypeInfo {
	return &NullableWorkTypeInfo{value: val, isSet: true}
}

func (v NullableWorkTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
