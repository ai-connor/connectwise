/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WorkflowAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowAction{}

// WorkflowAction struct for WorkflowAction
type WorkflowAction struct {
	Id               *int32                          `json:"id,omitempty"`
	NotifyType       NotifyTypeReference             `json:"notifyType"`
	NotifyWho        *NotificationRecipientReference `json:"notifyWho,omitempty"`
	SpecificMemberTo *MemberReference                `json:"specificMemberTo,omitempty"`
	// Required when notifyWho is set to: \"Email Address\" Max length: 250;
	EmailRecipient     *string                         `json:"emailRecipient,omitempty"`
	NotifyFrom         *NotificationRecipientReference `json:"notifyFrom,omitempty"`
	SpecificMemberFrom *MemberReference                `json:"specificMemberFrom,omitempty"`
	// Required when notifyFrom is set to: \"Email Address\" Max length: 250;
	EmailFrom  *string           `json:"emailFrom,omitempty"`
	CcContact  *ContactReference `json:"ccContact,omitempty"`
	BccContact *ContactReference `json:"bccContact,omitempty"`
	// Required when notifyType is set to: \"Create Activity\", \"Send Email\", \"Assign Resource\" Max length: 100;
	Subject             *string                    `json:"subject,omitempty"`
	Notes               *string                    `json:"notes,omitempty"`
	ActivityStatus      *ActivityStatusReference   `json:"activityStatus,omitempty"`
	ActivityType        *ActivityTypeReference     `json:"activityType,omitempty"`
	AttachedTrack       *TrackReference            `json:"attachedTrack,omitempty"`
	DaysToExecute       NullableInt32              `json:"daysToExecute,omitempty"`
	Board               *BoardReference            `json:"board,omitempty"`
	BoardStatus         *ServiceStatusReference    `json:"boardStatus,omitempty"`
	ServiceType         *ServiceTypeReference      `json:"serviceType,omitempty"`
	ServiceSubType      *ServiceSubTypeReference   `json:"serviceSubType,omitempty"`
	ServiceItem         *ServiceItemReference      `json:"serviceItem,omitempty"`
	Group               *GroupReference            `json:"group,omitempty"`
	ServiceTemplate     *ServiceTemplateReference  `json:"serviceTemplate,omitempty"`
	InvoiceMinDays      NullableInt32              `json:"invoiceMinDays,omitempty"`
	AutomateScript      *AutomateScriptReference   `json:"automateScript,omitempty"`
	ScriptSuccessStatus *ServiceStatusReference    `json:"scriptSuccessStatus,omitempty"`
	ScriptFailStatus    *ServiceStatusReference    `json:"scriptFailStatus,omitempty"`
	DetailNotesFlag     NullableBool               `json:"detailNotesFlag,omitempty"`
	InternalNotesFlag   NullableBool               `json:"internalNotesFlag,omitempty"`
	AuditNotesFlag      NullableBool               `json:"auditNotesFlag,omitempty"`
	ServicePriority     *PriorityReference         `json:"servicePriority,omitempty"`
	UpdateOwnerFlag     NullableBool               `json:"updateOwnerFlag,omitempty"`
	SalesOrderStatus    *OrderStatusReference      `json:"salesOrderStatus,omitempty"`
	ProjectStatus       *ProjectStatusReference    `json:"projectStatus,omitempty"`
	CompanyStatus       *CompanyStatusReference    `json:"companyStatus,omitempty"`
	Attachments         []int32                    `json:"attachments,omitempty"`
	ServiceSurvey       *ServiceSurveyReference    `json:"serviceSurvey,omitempty"`
	SpecificTeamTo      *GenericBoardTeamReference `json:"specificTeamTo,omitempty"`
	// Required when notifyType is set to: \"Attach Configuration\"
	AttachConfigurationsFor NullableString                `json:"attachConfigurationsFor,omitempty"`
	ConfigurationType       *ConfigurationTypeReference   `json:"configurationType,omitempty"`
	ConfigurationStatus     *ConfigurationStatusReference `json:"configurationStatus,omitempty"`
	ConnectWiseID           *string                       `json:"connectWiseID,omitempty"`
	// WF_NotifyEvents_RecID
	ParentId NullableInt32 `json:"parentId,omitempty"`
	// WF_NotifyHeader_RecID
	GrandParentId            NullableInt32      `json:"grandParentId,omitempty"`
	ParentConnectWiseId      *string            `json:"parentConnectWiseId,omitempty"`
	GrandParentConnectWiseId *string            `json:"grandParentConnectWiseId,omitempty"`
	Info                     *map[string]string `json:"_info,omitempty"`
}

type _WorkflowAction WorkflowAction

// NewWorkflowAction instantiates a new WorkflowAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowAction(notifyType NotifyTypeReference) *WorkflowAction {
	this := WorkflowAction{}
	this.NotifyType = notifyType
	return &this
}

// NewWorkflowActionWithDefaults instantiates a new WorkflowAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowActionWithDefaults() *WorkflowAction {
	this := WorkflowAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowAction) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WorkflowAction) SetId(v int32) {
	o.Id = &v
}

// GetNotifyType returns the NotifyType field value
func (o *WorkflowAction) GetNotifyType() NotifyTypeReference {
	if o == nil {
		var ret NotifyTypeReference
		return ret
	}

	return o.NotifyType
}

// GetNotifyTypeOk returns a tuple with the NotifyType field value
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetNotifyTypeOk() (*NotifyTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyType, true
}

// SetNotifyType sets field value
func (o *WorkflowAction) SetNotifyType(v NotifyTypeReference) {
	o.NotifyType = v
}

// GetNotifyWho returns the NotifyWho field value if set, zero value otherwise.
func (o *WorkflowAction) GetNotifyWho() NotificationRecipientReference {
	if o == nil || IsNil(o.NotifyWho) {
		var ret NotificationRecipientReference
		return ret
	}
	return *o.NotifyWho
}

// GetNotifyWhoOk returns a tuple with the NotifyWho field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetNotifyWhoOk() (*NotificationRecipientReference, bool) {
	if o == nil || IsNil(o.NotifyWho) {
		return nil, false
	}
	return o.NotifyWho, true
}

// HasNotifyWho returns a boolean if a field has been set.
func (o *WorkflowAction) HasNotifyWho() bool {
	if o != nil && !IsNil(o.NotifyWho) {
		return true
	}

	return false
}

// SetNotifyWho gets a reference to the given NotificationRecipientReference and assigns it to the NotifyWho field.
func (o *WorkflowAction) SetNotifyWho(v NotificationRecipientReference) {
	o.NotifyWho = &v
}

// GetSpecificMemberTo returns the SpecificMemberTo field value if set, zero value otherwise.
func (o *WorkflowAction) GetSpecificMemberTo() MemberReference {
	if o == nil || IsNil(o.SpecificMemberTo) {
		var ret MemberReference
		return ret
	}
	return *o.SpecificMemberTo
}

// GetSpecificMemberToOk returns a tuple with the SpecificMemberTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetSpecificMemberToOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.SpecificMemberTo) {
		return nil, false
	}
	return o.SpecificMemberTo, true
}

// HasSpecificMemberTo returns a boolean if a field has been set.
func (o *WorkflowAction) HasSpecificMemberTo() bool {
	if o != nil && !IsNil(o.SpecificMemberTo) {
		return true
	}

	return false
}

// SetSpecificMemberTo gets a reference to the given MemberReference and assigns it to the SpecificMemberTo field.
func (o *WorkflowAction) SetSpecificMemberTo(v MemberReference) {
	o.SpecificMemberTo = &v
}

// GetEmailRecipient returns the EmailRecipient field value if set, zero value otherwise.
func (o *WorkflowAction) GetEmailRecipient() string {
	if o == nil || IsNil(o.EmailRecipient) {
		var ret string
		return ret
	}
	return *o.EmailRecipient
}

// GetEmailRecipientOk returns a tuple with the EmailRecipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetEmailRecipientOk() (*string, bool) {
	if o == nil || IsNil(o.EmailRecipient) {
		return nil, false
	}
	return o.EmailRecipient, true
}

// HasEmailRecipient returns a boolean if a field has been set.
func (o *WorkflowAction) HasEmailRecipient() bool {
	if o != nil && !IsNil(o.EmailRecipient) {
		return true
	}

	return false
}

// SetEmailRecipient gets a reference to the given string and assigns it to the EmailRecipient field.
func (o *WorkflowAction) SetEmailRecipient(v string) {
	o.EmailRecipient = &v
}

// GetNotifyFrom returns the NotifyFrom field value if set, zero value otherwise.
func (o *WorkflowAction) GetNotifyFrom() NotificationRecipientReference {
	if o == nil || IsNil(o.NotifyFrom) {
		var ret NotificationRecipientReference
		return ret
	}
	return *o.NotifyFrom
}

// GetNotifyFromOk returns a tuple with the NotifyFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetNotifyFromOk() (*NotificationRecipientReference, bool) {
	if o == nil || IsNil(o.NotifyFrom) {
		return nil, false
	}
	return o.NotifyFrom, true
}

// HasNotifyFrom returns a boolean if a field has been set.
func (o *WorkflowAction) HasNotifyFrom() bool {
	if o != nil && !IsNil(o.NotifyFrom) {
		return true
	}

	return false
}

// SetNotifyFrom gets a reference to the given NotificationRecipientReference and assigns it to the NotifyFrom field.
func (o *WorkflowAction) SetNotifyFrom(v NotificationRecipientReference) {
	o.NotifyFrom = &v
}

// GetSpecificMemberFrom returns the SpecificMemberFrom field value if set, zero value otherwise.
func (o *WorkflowAction) GetSpecificMemberFrom() MemberReference {
	if o == nil || IsNil(o.SpecificMemberFrom) {
		var ret MemberReference
		return ret
	}
	return *o.SpecificMemberFrom
}

// GetSpecificMemberFromOk returns a tuple with the SpecificMemberFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetSpecificMemberFromOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.SpecificMemberFrom) {
		return nil, false
	}
	return o.SpecificMemberFrom, true
}

// HasSpecificMemberFrom returns a boolean if a field has been set.
func (o *WorkflowAction) HasSpecificMemberFrom() bool {
	if o != nil && !IsNil(o.SpecificMemberFrom) {
		return true
	}

	return false
}

// SetSpecificMemberFrom gets a reference to the given MemberReference and assigns it to the SpecificMemberFrom field.
func (o *WorkflowAction) SetSpecificMemberFrom(v MemberReference) {
	o.SpecificMemberFrom = &v
}

// GetEmailFrom returns the EmailFrom field value if set, zero value otherwise.
func (o *WorkflowAction) GetEmailFrom() string {
	if o == nil || IsNil(o.EmailFrom) {
		var ret string
		return ret
	}
	return *o.EmailFrom
}

// GetEmailFromOk returns a tuple with the EmailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetEmailFromOk() (*string, bool) {
	if o == nil || IsNil(o.EmailFrom) {
		return nil, false
	}
	return o.EmailFrom, true
}

// HasEmailFrom returns a boolean if a field has been set.
func (o *WorkflowAction) HasEmailFrom() bool {
	if o != nil && !IsNil(o.EmailFrom) {
		return true
	}

	return false
}

// SetEmailFrom gets a reference to the given string and assigns it to the EmailFrom field.
func (o *WorkflowAction) SetEmailFrom(v string) {
	o.EmailFrom = &v
}

// GetCcContact returns the CcContact field value if set, zero value otherwise.
func (o *WorkflowAction) GetCcContact() ContactReference {
	if o == nil || IsNil(o.CcContact) {
		var ret ContactReference
		return ret
	}
	return *o.CcContact
}

// GetCcContactOk returns a tuple with the CcContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetCcContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.CcContact) {
		return nil, false
	}
	return o.CcContact, true
}

// HasCcContact returns a boolean if a field has been set.
func (o *WorkflowAction) HasCcContact() bool {
	if o != nil && !IsNil(o.CcContact) {
		return true
	}

	return false
}

// SetCcContact gets a reference to the given ContactReference and assigns it to the CcContact field.
func (o *WorkflowAction) SetCcContact(v ContactReference) {
	o.CcContact = &v
}

// GetBccContact returns the BccContact field value if set, zero value otherwise.
func (o *WorkflowAction) GetBccContact() ContactReference {
	if o == nil || IsNil(o.BccContact) {
		var ret ContactReference
		return ret
	}
	return *o.BccContact
}

// GetBccContactOk returns a tuple with the BccContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetBccContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BccContact) {
		return nil, false
	}
	return o.BccContact, true
}

// HasBccContact returns a boolean if a field has been set.
func (o *WorkflowAction) HasBccContact() bool {
	if o != nil && !IsNil(o.BccContact) {
		return true
	}

	return false
}

// SetBccContact gets a reference to the given ContactReference and assigns it to the BccContact field.
func (o *WorkflowAction) SetBccContact(v ContactReference) {
	o.BccContact = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *WorkflowAction) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *WorkflowAction) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *WorkflowAction) SetSubject(v string) {
	o.Subject = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *WorkflowAction) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *WorkflowAction) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *WorkflowAction) SetNotes(v string) {
	o.Notes = &v
}

// GetActivityStatus returns the ActivityStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetActivityStatus() ActivityStatusReference {
	if o == nil || IsNil(o.ActivityStatus) {
		var ret ActivityStatusReference
		return ret
	}
	return *o.ActivityStatus
}

// GetActivityStatusOk returns a tuple with the ActivityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetActivityStatusOk() (*ActivityStatusReference, bool) {
	if o == nil || IsNil(o.ActivityStatus) {
		return nil, false
	}
	return o.ActivityStatus, true
}

// HasActivityStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasActivityStatus() bool {
	if o != nil && !IsNil(o.ActivityStatus) {
		return true
	}

	return false
}

// SetActivityStatus gets a reference to the given ActivityStatusReference and assigns it to the ActivityStatus field.
func (o *WorkflowAction) SetActivityStatus(v ActivityStatusReference) {
	o.ActivityStatus = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *WorkflowAction) GetActivityType() ActivityTypeReference {
	if o == nil || IsNil(o.ActivityType) {
		var ret ActivityTypeReference
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetActivityTypeOk() (*ActivityTypeReference, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *WorkflowAction) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given ActivityTypeReference and assigns it to the ActivityType field.
func (o *WorkflowAction) SetActivityType(v ActivityTypeReference) {
	o.ActivityType = &v
}

// GetAttachedTrack returns the AttachedTrack field value if set, zero value otherwise.
func (o *WorkflowAction) GetAttachedTrack() TrackReference {
	if o == nil || IsNil(o.AttachedTrack) {
		var ret TrackReference
		return ret
	}
	return *o.AttachedTrack
}

// GetAttachedTrackOk returns a tuple with the AttachedTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetAttachedTrackOk() (*TrackReference, bool) {
	if o == nil || IsNil(o.AttachedTrack) {
		return nil, false
	}
	return o.AttachedTrack, true
}

// HasAttachedTrack returns a boolean if a field has been set.
func (o *WorkflowAction) HasAttachedTrack() bool {
	if o != nil && !IsNil(o.AttachedTrack) {
		return true
	}

	return false
}

// SetAttachedTrack gets a reference to the given TrackReference and assigns it to the AttachedTrack field.
func (o *WorkflowAction) SetAttachedTrack(v TrackReference) {
	o.AttachedTrack = &v
}

// GetDaysToExecute returns the DaysToExecute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetDaysToExecute() int32 {
	if o == nil || IsNil(o.DaysToExecute.Get()) {
		var ret int32
		return ret
	}
	return *o.DaysToExecute.Get()
}

// GetDaysToExecuteOk returns a tuple with the DaysToExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetDaysToExecuteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysToExecute.Get(), o.DaysToExecute.IsSet()
}

// HasDaysToExecute returns a boolean if a field has been set.
func (o *WorkflowAction) HasDaysToExecute() bool {
	if o != nil && o.DaysToExecute.IsSet() {
		return true
	}

	return false
}

// SetDaysToExecute gets a reference to the given NullableInt32 and assigns it to the DaysToExecute field.
func (o *WorkflowAction) SetDaysToExecute(v int32) {
	o.DaysToExecute.Set(&v)
}

// SetDaysToExecuteNil sets the value for DaysToExecute to be an explicit nil
func (o *WorkflowAction) SetDaysToExecuteNil() {
	o.DaysToExecute.Set(nil)
}

// UnsetDaysToExecute ensures that no value is present for DaysToExecute, not even an explicit nil
func (o *WorkflowAction) UnsetDaysToExecute() {
	o.DaysToExecute.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *WorkflowAction) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *WorkflowAction) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *WorkflowAction) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetBoardStatus returns the BoardStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetBoardStatus() ServiceStatusReference {
	if o == nil || IsNil(o.BoardStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.BoardStatus
}

// GetBoardStatusOk returns a tuple with the BoardStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetBoardStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.BoardStatus) {
		return nil, false
	}
	return o.BoardStatus, true
}

// HasBoardStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasBoardStatus() bool {
	if o != nil && !IsNil(o.BoardStatus) {
		return true
	}

	return false
}

// SetBoardStatus gets a reference to the given ServiceStatusReference and assigns it to the BoardStatus field.
func (o *WorkflowAction) SetBoardStatus(v ServiceStatusReference) {
	o.BoardStatus = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *WorkflowAction) GetServiceType() ServiceTypeReference {
	if o == nil || IsNil(o.ServiceType) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetServiceTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *WorkflowAction) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given ServiceTypeReference and assigns it to the ServiceType field.
func (o *WorkflowAction) SetServiceType(v ServiceTypeReference) {
	o.ServiceType = &v
}

// GetServiceSubType returns the ServiceSubType field value if set, zero value otherwise.
func (o *WorkflowAction) GetServiceSubType() ServiceSubTypeReference {
	if o == nil || IsNil(o.ServiceSubType) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.ServiceSubType
}

// GetServiceSubTypeOk returns a tuple with the ServiceSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetServiceSubTypeOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.ServiceSubType) {
		return nil, false
	}
	return o.ServiceSubType, true
}

// HasServiceSubType returns a boolean if a field has been set.
func (o *WorkflowAction) HasServiceSubType() bool {
	if o != nil && !IsNil(o.ServiceSubType) {
		return true
	}

	return false
}

// SetServiceSubType gets a reference to the given ServiceSubTypeReference and assigns it to the ServiceSubType field.
func (o *WorkflowAction) SetServiceSubType(v ServiceSubTypeReference) {
	o.ServiceSubType = &v
}

// GetServiceItem returns the ServiceItem field value if set, zero value otherwise.
func (o *WorkflowAction) GetServiceItem() ServiceItemReference {
	if o == nil || IsNil(o.ServiceItem) {
		var ret ServiceItemReference
		return ret
	}
	return *o.ServiceItem
}

// GetServiceItemOk returns a tuple with the ServiceItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetServiceItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.ServiceItem) {
		return nil, false
	}
	return o.ServiceItem, true
}

// HasServiceItem returns a boolean if a field has been set.
func (o *WorkflowAction) HasServiceItem() bool {
	if o != nil && !IsNil(o.ServiceItem) {
		return true
	}

	return false
}

// SetServiceItem gets a reference to the given ServiceItemReference and assigns it to the ServiceItem field.
func (o *WorkflowAction) SetServiceItem(v ServiceItemReference) {
	o.ServiceItem = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *WorkflowAction) GetGroup() GroupReference {
	if o == nil || IsNil(o.Group) {
		var ret GroupReference
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetGroupOk() (*GroupReference, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *WorkflowAction) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given GroupReference and assigns it to the Group field.
func (o *WorkflowAction) SetGroup(v GroupReference) {
	o.Group = &v
}

// GetServiceTemplate returns the ServiceTemplate field value if set, zero value otherwise.
func (o *WorkflowAction) GetServiceTemplate() ServiceTemplateReference {
	if o == nil || IsNil(o.ServiceTemplate) {
		var ret ServiceTemplateReference
		return ret
	}
	return *o.ServiceTemplate
}

// GetServiceTemplateOk returns a tuple with the ServiceTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetServiceTemplateOk() (*ServiceTemplateReference, bool) {
	if o == nil || IsNil(o.ServiceTemplate) {
		return nil, false
	}
	return o.ServiceTemplate, true
}

// HasServiceTemplate returns a boolean if a field has been set.
func (o *WorkflowAction) HasServiceTemplate() bool {
	if o != nil && !IsNil(o.ServiceTemplate) {
		return true
	}

	return false
}

// SetServiceTemplate gets a reference to the given ServiceTemplateReference and assigns it to the ServiceTemplate field.
func (o *WorkflowAction) SetServiceTemplate(v ServiceTemplateReference) {
	o.ServiceTemplate = &v
}

// GetInvoiceMinDays returns the InvoiceMinDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetInvoiceMinDays() int32 {
	if o == nil || IsNil(o.InvoiceMinDays.Get()) {
		var ret int32
		return ret
	}
	return *o.InvoiceMinDays.Get()
}

// GetInvoiceMinDaysOk returns a tuple with the InvoiceMinDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetInvoiceMinDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceMinDays.Get(), o.InvoiceMinDays.IsSet()
}

// HasInvoiceMinDays returns a boolean if a field has been set.
func (o *WorkflowAction) HasInvoiceMinDays() bool {
	if o != nil && o.InvoiceMinDays.IsSet() {
		return true
	}

	return false
}

// SetInvoiceMinDays gets a reference to the given NullableInt32 and assigns it to the InvoiceMinDays field.
func (o *WorkflowAction) SetInvoiceMinDays(v int32) {
	o.InvoiceMinDays.Set(&v)
}

// SetInvoiceMinDaysNil sets the value for InvoiceMinDays to be an explicit nil
func (o *WorkflowAction) SetInvoiceMinDaysNil() {
	o.InvoiceMinDays.Set(nil)
}

// UnsetInvoiceMinDays ensures that no value is present for InvoiceMinDays, not even an explicit nil
func (o *WorkflowAction) UnsetInvoiceMinDays() {
	o.InvoiceMinDays.Unset()
}

// GetAutomateScript returns the AutomateScript field value if set, zero value otherwise.
func (o *WorkflowAction) GetAutomateScript() AutomateScriptReference {
	if o == nil || IsNil(o.AutomateScript) {
		var ret AutomateScriptReference
		return ret
	}
	return *o.AutomateScript
}

// GetAutomateScriptOk returns a tuple with the AutomateScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetAutomateScriptOk() (*AutomateScriptReference, bool) {
	if o == nil || IsNil(o.AutomateScript) {
		return nil, false
	}
	return o.AutomateScript, true
}

// HasAutomateScript returns a boolean if a field has been set.
func (o *WorkflowAction) HasAutomateScript() bool {
	if o != nil && !IsNil(o.AutomateScript) {
		return true
	}

	return false
}

// SetAutomateScript gets a reference to the given AutomateScriptReference and assigns it to the AutomateScript field.
func (o *WorkflowAction) SetAutomateScript(v AutomateScriptReference) {
	o.AutomateScript = &v
}

// GetScriptSuccessStatus returns the ScriptSuccessStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetScriptSuccessStatus() ServiceStatusReference {
	if o == nil || IsNil(o.ScriptSuccessStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.ScriptSuccessStatus
}

// GetScriptSuccessStatusOk returns a tuple with the ScriptSuccessStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetScriptSuccessStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.ScriptSuccessStatus) {
		return nil, false
	}
	return o.ScriptSuccessStatus, true
}

// HasScriptSuccessStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasScriptSuccessStatus() bool {
	if o != nil && !IsNil(o.ScriptSuccessStatus) {
		return true
	}

	return false
}

// SetScriptSuccessStatus gets a reference to the given ServiceStatusReference and assigns it to the ScriptSuccessStatus field.
func (o *WorkflowAction) SetScriptSuccessStatus(v ServiceStatusReference) {
	o.ScriptSuccessStatus = &v
}

// GetScriptFailStatus returns the ScriptFailStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetScriptFailStatus() ServiceStatusReference {
	if o == nil || IsNil(o.ScriptFailStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.ScriptFailStatus
}

// GetScriptFailStatusOk returns a tuple with the ScriptFailStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetScriptFailStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.ScriptFailStatus) {
		return nil, false
	}
	return o.ScriptFailStatus, true
}

// HasScriptFailStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasScriptFailStatus() bool {
	if o != nil && !IsNil(o.ScriptFailStatus) {
		return true
	}

	return false
}

// SetScriptFailStatus gets a reference to the given ServiceStatusReference and assigns it to the ScriptFailStatus field.
func (o *WorkflowAction) SetScriptFailStatus(v ServiceStatusReference) {
	o.ScriptFailStatus = &v
}

// GetDetailNotesFlag returns the DetailNotesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetDetailNotesFlag() bool {
	if o == nil || IsNil(o.DetailNotesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DetailNotesFlag.Get()
}

// GetDetailNotesFlagOk returns a tuple with the DetailNotesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetDetailNotesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetailNotesFlag.Get(), o.DetailNotesFlag.IsSet()
}

// HasDetailNotesFlag returns a boolean if a field has been set.
func (o *WorkflowAction) HasDetailNotesFlag() bool {
	if o != nil && o.DetailNotesFlag.IsSet() {
		return true
	}

	return false
}

// SetDetailNotesFlag gets a reference to the given NullableBool and assigns it to the DetailNotesFlag field.
func (o *WorkflowAction) SetDetailNotesFlag(v bool) {
	o.DetailNotesFlag.Set(&v)
}

// SetDetailNotesFlagNil sets the value for DetailNotesFlag to be an explicit nil
func (o *WorkflowAction) SetDetailNotesFlagNil() {
	o.DetailNotesFlag.Set(nil)
}

// UnsetDetailNotesFlag ensures that no value is present for DetailNotesFlag, not even an explicit nil
func (o *WorkflowAction) UnsetDetailNotesFlag() {
	o.DetailNotesFlag.Unset()
}

// GetInternalNotesFlag returns the InternalNotesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetInternalNotesFlag() bool {
	if o == nil || IsNil(o.InternalNotesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InternalNotesFlag.Get()
}

// GetInternalNotesFlagOk returns a tuple with the InternalNotesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetInternalNotesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalNotesFlag.Get(), o.InternalNotesFlag.IsSet()
}

// HasInternalNotesFlag returns a boolean if a field has been set.
func (o *WorkflowAction) HasInternalNotesFlag() bool {
	if o != nil && o.InternalNotesFlag.IsSet() {
		return true
	}

	return false
}

// SetInternalNotesFlag gets a reference to the given NullableBool and assigns it to the InternalNotesFlag field.
func (o *WorkflowAction) SetInternalNotesFlag(v bool) {
	o.InternalNotesFlag.Set(&v)
}

// SetInternalNotesFlagNil sets the value for InternalNotesFlag to be an explicit nil
func (o *WorkflowAction) SetInternalNotesFlagNil() {
	o.InternalNotesFlag.Set(nil)
}

// UnsetInternalNotesFlag ensures that no value is present for InternalNotesFlag, not even an explicit nil
func (o *WorkflowAction) UnsetInternalNotesFlag() {
	o.InternalNotesFlag.Unset()
}

// GetAuditNotesFlag returns the AuditNotesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetAuditNotesFlag() bool {
	if o == nil || IsNil(o.AuditNotesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AuditNotesFlag.Get()
}

// GetAuditNotesFlagOk returns a tuple with the AuditNotesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetAuditNotesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuditNotesFlag.Get(), o.AuditNotesFlag.IsSet()
}

// HasAuditNotesFlag returns a boolean if a field has been set.
func (o *WorkflowAction) HasAuditNotesFlag() bool {
	if o != nil && o.AuditNotesFlag.IsSet() {
		return true
	}

	return false
}

// SetAuditNotesFlag gets a reference to the given NullableBool and assigns it to the AuditNotesFlag field.
func (o *WorkflowAction) SetAuditNotesFlag(v bool) {
	o.AuditNotesFlag.Set(&v)
}

// SetAuditNotesFlagNil sets the value for AuditNotesFlag to be an explicit nil
func (o *WorkflowAction) SetAuditNotesFlagNil() {
	o.AuditNotesFlag.Set(nil)
}

// UnsetAuditNotesFlag ensures that no value is present for AuditNotesFlag, not even an explicit nil
func (o *WorkflowAction) UnsetAuditNotesFlag() {
	o.AuditNotesFlag.Unset()
}

// GetServicePriority returns the ServicePriority field value if set, zero value otherwise.
func (o *WorkflowAction) GetServicePriority() PriorityReference {
	if o == nil || IsNil(o.ServicePriority) {
		var ret PriorityReference
		return ret
	}
	return *o.ServicePriority
}

// GetServicePriorityOk returns a tuple with the ServicePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetServicePriorityOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.ServicePriority) {
		return nil, false
	}
	return o.ServicePriority, true
}

// HasServicePriority returns a boolean if a field has been set.
func (o *WorkflowAction) HasServicePriority() bool {
	if o != nil && !IsNil(o.ServicePriority) {
		return true
	}

	return false
}

// SetServicePriority gets a reference to the given PriorityReference and assigns it to the ServicePriority field.
func (o *WorkflowAction) SetServicePriority(v PriorityReference) {
	o.ServicePriority = &v
}

// GetUpdateOwnerFlag returns the UpdateOwnerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetUpdateOwnerFlag() bool {
	if o == nil || IsNil(o.UpdateOwnerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UpdateOwnerFlag.Get()
}

// GetUpdateOwnerFlagOk returns a tuple with the UpdateOwnerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetUpdateOwnerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateOwnerFlag.Get(), o.UpdateOwnerFlag.IsSet()
}

// HasUpdateOwnerFlag returns a boolean if a field has been set.
func (o *WorkflowAction) HasUpdateOwnerFlag() bool {
	if o != nil && o.UpdateOwnerFlag.IsSet() {
		return true
	}

	return false
}

// SetUpdateOwnerFlag gets a reference to the given NullableBool and assigns it to the UpdateOwnerFlag field.
func (o *WorkflowAction) SetUpdateOwnerFlag(v bool) {
	o.UpdateOwnerFlag.Set(&v)
}

// SetUpdateOwnerFlagNil sets the value for UpdateOwnerFlag to be an explicit nil
func (o *WorkflowAction) SetUpdateOwnerFlagNil() {
	o.UpdateOwnerFlag.Set(nil)
}

// UnsetUpdateOwnerFlag ensures that no value is present for UpdateOwnerFlag, not even an explicit nil
func (o *WorkflowAction) UnsetUpdateOwnerFlag() {
	o.UpdateOwnerFlag.Unset()
}

// GetSalesOrderStatus returns the SalesOrderStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetSalesOrderStatus() OrderStatusReference {
	if o == nil || IsNil(o.SalesOrderStatus) {
		var ret OrderStatusReference
		return ret
	}
	return *o.SalesOrderStatus
}

// GetSalesOrderStatusOk returns a tuple with the SalesOrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetSalesOrderStatusOk() (*OrderStatusReference, bool) {
	if o == nil || IsNil(o.SalesOrderStatus) {
		return nil, false
	}
	return o.SalesOrderStatus, true
}

// HasSalesOrderStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasSalesOrderStatus() bool {
	if o != nil && !IsNil(o.SalesOrderStatus) {
		return true
	}

	return false
}

// SetSalesOrderStatus gets a reference to the given OrderStatusReference and assigns it to the SalesOrderStatus field.
func (o *WorkflowAction) SetSalesOrderStatus(v OrderStatusReference) {
	o.SalesOrderStatus = &v
}

// GetProjectStatus returns the ProjectStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetProjectStatus() ProjectStatusReference {
	if o == nil || IsNil(o.ProjectStatus) {
		var ret ProjectStatusReference
		return ret
	}
	return *o.ProjectStatus
}

// GetProjectStatusOk returns a tuple with the ProjectStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetProjectStatusOk() (*ProjectStatusReference, bool) {
	if o == nil || IsNil(o.ProjectStatus) {
		return nil, false
	}
	return o.ProjectStatus, true
}

// HasProjectStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasProjectStatus() bool {
	if o != nil && !IsNil(o.ProjectStatus) {
		return true
	}

	return false
}

// SetProjectStatus gets a reference to the given ProjectStatusReference and assigns it to the ProjectStatus field.
func (o *WorkflowAction) SetProjectStatus(v ProjectStatusReference) {
	o.ProjectStatus = &v
}

// GetCompanyStatus returns the CompanyStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetCompanyStatus() CompanyStatusReference {
	if o == nil || IsNil(o.CompanyStatus) {
		var ret CompanyStatusReference
		return ret
	}
	return *o.CompanyStatus
}

// GetCompanyStatusOk returns a tuple with the CompanyStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetCompanyStatusOk() (*CompanyStatusReference, bool) {
	if o == nil || IsNil(o.CompanyStatus) {
		return nil, false
	}
	return o.CompanyStatus, true
}

// HasCompanyStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasCompanyStatus() bool {
	if o != nil && !IsNil(o.CompanyStatus) {
		return true
	}

	return false
}

// SetCompanyStatus gets a reference to the given CompanyStatusReference and assigns it to the CompanyStatus field.
func (o *WorkflowAction) SetCompanyStatus(v CompanyStatusReference) {
	o.CompanyStatus = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *WorkflowAction) GetAttachments() []int32 {
	if o == nil || IsNil(o.Attachments) {
		var ret []int32
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetAttachmentsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *WorkflowAction) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []int32 and assigns it to the Attachments field.
func (o *WorkflowAction) SetAttachments(v []int32) {
	o.Attachments = v
}

// GetServiceSurvey returns the ServiceSurvey field value if set, zero value otherwise.
func (o *WorkflowAction) GetServiceSurvey() ServiceSurveyReference {
	if o == nil || IsNil(o.ServiceSurvey) {
		var ret ServiceSurveyReference
		return ret
	}
	return *o.ServiceSurvey
}

// GetServiceSurveyOk returns a tuple with the ServiceSurvey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetServiceSurveyOk() (*ServiceSurveyReference, bool) {
	if o == nil || IsNil(o.ServiceSurvey) {
		return nil, false
	}
	return o.ServiceSurvey, true
}

// HasServiceSurvey returns a boolean if a field has been set.
func (o *WorkflowAction) HasServiceSurvey() bool {
	if o != nil && !IsNil(o.ServiceSurvey) {
		return true
	}

	return false
}

// SetServiceSurvey gets a reference to the given ServiceSurveyReference and assigns it to the ServiceSurvey field.
func (o *WorkflowAction) SetServiceSurvey(v ServiceSurveyReference) {
	o.ServiceSurvey = &v
}

// GetSpecificTeamTo returns the SpecificTeamTo field value if set, zero value otherwise.
func (o *WorkflowAction) GetSpecificTeamTo() GenericBoardTeamReference {
	if o == nil || IsNil(o.SpecificTeamTo) {
		var ret GenericBoardTeamReference
		return ret
	}
	return *o.SpecificTeamTo
}

// GetSpecificTeamToOk returns a tuple with the SpecificTeamTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetSpecificTeamToOk() (*GenericBoardTeamReference, bool) {
	if o == nil || IsNil(o.SpecificTeamTo) {
		return nil, false
	}
	return o.SpecificTeamTo, true
}

// HasSpecificTeamTo returns a boolean if a field has been set.
func (o *WorkflowAction) HasSpecificTeamTo() bool {
	if o != nil && !IsNil(o.SpecificTeamTo) {
		return true
	}

	return false
}

// SetSpecificTeamTo gets a reference to the given GenericBoardTeamReference and assigns it to the SpecificTeamTo field.
func (o *WorkflowAction) SetSpecificTeamTo(v GenericBoardTeamReference) {
	o.SpecificTeamTo = &v
}

// GetAttachConfigurationsFor returns the AttachConfigurationsFor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetAttachConfigurationsFor() string {
	if o == nil || IsNil(o.AttachConfigurationsFor.Get()) {
		var ret string
		return ret
	}
	return *o.AttachConfigurationsFor.Get()
}

// GetAttachConfigurationsForOk returns a tuple with the AttachConfigurationsFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetAttachConfigurationsForOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttachConfigurationsFor.Get(), o.AttachConfigurationsFor.IsSet()
}

// HasAttachConfigurationsFor returns a boolean if a field has been set.
func (o *WorkflowAction) HasAttachConfigurationsFor() bool {
	if o != nil && o.AttachConfigurationsFor.IsSet() {
		return true
	}

	return false
}

// SetAttachConfigurationsFor gets a reference to the given NullableString and assigns it to the AttachConfigurationsFor field.
func (o *WorkflowAction) SetAttachConfigurationsFor(v string) {
	o.AttachConfigurationsFor.Set(&v)
}

// SetAttachConfigurationsForNil sets the value for AttachConfigurationsFor to be an explicit nil
func (o *WorkflowAction) SetAttachConfigurationsForNil() {
	o.AttachConfigurationsFor.Set(nil)
}

// UnsetAttachConfigurationsFor ensures that no value is present for AttachConfigurationsFor, not even an explicit nil
func (o *WorkflowAction) UnsetAttachConfigurationsFor() {
	o.AttachConfigurationsFor.Unset()
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *WorkflowAction) GetConfigurationType() ConfigurationTypeReference {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret ConfigurationTypeReference
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetConfigurationTypeOk() (*ConfigurationTypeReference, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *WorkflowAction) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given ConfigurationTypeReference and assigns it to the ConfigurationType field.
func (o *WorkflowAction) SetConfigurationType(v ConfigurationTypeReference) {
	o.ConfigurationType = &v
}

// GetConfigurationStatus returns the ConfigurationStatus field value if set, zero value otherwise.
func (o *WorkflowAction) GetConfigurationStatus() ConfigurationStatusReference {
	if o == nil || IsNil(o.ConfigurationStatus) {
		var ret ConfigurationStatusReference
		return ret
	}
	return *o.ConfigurationStatus
}

// GetConfigurationStatusOk returns a tuple with the ConfigurationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetConfigurationStatusOk() (*ConfigurationStatusReference, bool) {
	if o == nil || IsNil(o.ConfigurationStatus) {
		return nil, false
	}
	return o.ConfigurationStatus, true
}

// HasConfigurationStatus returns a boolean if a field has been set.
func (o *WorkflowAction) HasConfigurationStatus() bool {
	if o != nil && !IsNil(o.ConfigurationStatus) {
		return true
	}

	return false
}

// SetConfigurationStatus gets a reference to the given ConfigurationStatusReference and assigns it to the ConfigurationStatus field.
func (o *WorkflowAction) SetConfigurationStatus(v ConfigurationStatusReference) {
	o.ConfigurationStatus = &v
}

// GetConnectWiseID returns the ConnectWiseID field value if set, zero value otherwise.
func (o *WorkflowAction) GetConnectWiseID() string {
	if o == nil || IsNil(o.ConnectWiseID) {
		var ret string
		return ret
	}
	return *o.ConnectWiseID
}

// GetConnectWiseIDOk returns a tuple with the ConnectWiseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetConnectWiseIDOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectWiseID) {
		return nil, false
	}
	return o.ConnectWiseID, true
}

// HasConnectWiseID returns a boolean if a field has been set.
func (o *WorkflowAction) HasConnectWiseID() bool {
	if o != nil && !IsNil(o.ConnectWiseID) {
		return true
	}

	return false
}

// SetConnectWiseID gets a reference to the given string and assigns it to the ConnectWiseID field.
func (o *WorkflowAction) SetConnectWiseID(v string) {
	o.ConnectWiseID = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetParentId() int32 {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetParentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *WorkflowAction) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt32 and assigns it to the ParentId field.
func (o *WorkflowAction) SetParentId(v int32) {
	o.ParentId.Set(&v)
}

// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *WorkflowAction) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *WorkflowAction) UnsetParentId() {
	o.ParentId.Unset()
}

// GetGrandParentId returns the GrandParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowAction) GetGrandParentId() int32 {
	if o == nil || IsNil(o.GrandParentId.Get()) {
		var ret int32
		return ret
	}
	return *o.GrandParentId.Get()
}

// GetGrandParentIdOk returns a tuple with the GrandParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowAction) GetGrandParentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrandParentId.Get(), o.GrandParentId.IsSet()
}

// HasGrandParentId returns a boolean if a field has been set.
func (o *WorkflowAction) HasGrandParentId() bool {
	if o != nil && o.GrandParentId.IsSet() {
		return true
	}

	return false
}

// SetGrandParentId gets a reference to the given NullableInt32 and assigns it to the GrandParentId field.
func (o *WorkflowAction) SetGrandParentId(v int32) {
	o.GrandParentId.Set(&v)
}

// SetGrandParentIdNil sets the value for GrandParentId to be an explicit nil
func (o *WorkflowAction) SetGrandParentIdNil() {
	o.GrandParentId.Set(nil)
}

// UnsetGrandParentId ensures that no value is present for GrandParentId, not even an explicit nil
func (o *WorkflowAction) UnsetGrandParentId() {
	o.GrandParentId.Unset()
}

// GetParentConnectWiseId returns the ParentConnectWiseId field value if set, zero value otherwise.
func (o *WorkflowAction) GetParentConnectWiseId() string {
	if o == nil || IsNil(o.ParentConnectWiseId) {
		var ret string
		return ret
	}
	return *o.ParentConnectWiseId
}

// GetParentConnectWiseIdOk returns a tuple with the ParentConnectWiseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetParentConnectWiseIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentConnectWiseId) {
		return nil, false
	}
	return o.ParentConnectWiseId, true
}

// HasParentConnectWiseId returns a boolean if a field has been set.
func (o *WorkflowAction) HasParentConnectWiseId() bool {
	if o != nil && !IsNil(o.ParentConnectWiseId) {
		return true
	}

	return false
}

// SetParentConnectWiseId gets a reference to the given string and assigns it to the ParentConnectWiseId field.
func (o *WorkflowAction) SetParentConnectWiseId(v string) {
	o.ParentConnectWiseId = &v
}

// GetGrandParentConnectWiseId returns the GrandParentConnectWiseId field value if set, zero value otherwise.
func (o *WorkflowAction) GetGrandParentConnectWiseId() string {
	if o == nil || IsNil(o.GrandParentConnectWiseId) {
		var ret string
		return ret
	}
	return *o.GrandParentConnectWiseId
}

// GetGrandParentConnectWiseIdOk returns a tuple with the GrandParentConnectWiseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetGrandParentConnectWiseIdOk() (*string, bool) {
	if o == nil || IsNil(o.GrandParentConnectWiseId) {
		return nil, false
	}
	return o.GrandParentConnectWiseId, true
}

// HasGrandParentConnectWiseId returns a boolean if a field has been set.
func (o *WorkflowAction) HasGrandParentConnectWiseId() bool {
	if o != nil && !IsNil(o.GrandParentConnectWiseId) {
		return true
	}

	return false
}

// SetGrandParentConnectWiseId gets a reference to the given string and assigns it to the GrandParentConnectWiseId field.
func (o *WorkflowAction) SetGrandParentConnectWiseId(v string) {
	o.GrandParentConnectWiseId = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WorkflowAction) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowAction) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WorkflowAction) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WorkflowAction) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WorkflowAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["notifyType"] = o.NotifyType
	if !IsNil(o.NotifyWho) {
		toSerialize["notifyWho"] = o.NotifyWho
	}
	if !IsNil(o.SpecificMemberTo) {
		toSerialize["specificMemberTo"] = o.SpecificMemberTo
	}
	if !IsNil(o.EmailRecipient) {
		toSerialize["emailRecipient"] = o.EmailRecipient
	}
	if !IsNil(o.NotifyFrom) {
		toSerialize["notifyFrom"] = o.NotifyFrom
	}
	if !IsNil(o.SpecificMemberFrom) {
		toSerialize["specificMemberFrom"] = o.SpecificMemberFrom
	}
	if !IsNil(o.EmailFrom) {
		toSerialize["emailFrom"] = o.EmailFrom
	}
	if !IsNil(o.CcContact) {
		toSerialize["ccContact"] = o.CcContact
	}
	if !IsNil(o.BccContact) {
		toSerialize["bccContact"] = o.BccContact
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.ActivityStatus) {
		toSerialize["activityStatus"] = o.ActivityStatus
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activityType"] = o.ActivityType
	}
	if !IsNil(o.AttachedTrack) {
		toSerialize["attachedTrack"] = o.AttachedTrack
	}
	if o.DaysToExecute.IsSet() {
		toSerialize["daysToExecute"] = o.DaysToExecute.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.BoardStatus) {
		toSerialize["boardStatus"] = o.BoardStatus
	}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !IsNil(o.ServiceSubType) {
		toSerialize["serviceSubType"] = o.ServiceSubType
	}
	if !IsNil(o.ServiceItem) {
		toSerialize["serviceItem"] = o.ServiceItem
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.ServiceTemplate) {
		toSerialize["serviceTemplate"] = o.ServiceTemplate
	}
	if o.InvoiceMinDays.IsSet() {
		toSerialize["invoiceMinDays"] = o.InvoiceMinDays.Get()
	}
	if !IsNil(o.AutomateScript) {
		toSerialize["automateScript"] = o.AutomateScript
	}
	if !IsNil(o.ScriptSuccessStatus) {
		toSerialize["scriptSuccessStatus"] = o.ScriptSuccessStatus
	}
	if !IsNil(o.ScriptFailStatus) {
		toSerialize["scriptFailStatus"] = o.ScriptFailStatus
	}
	if o.DetailNotesFlag.IsSet() {
		toSerialize["detailNotesFlag"] = o.DetailNotesFlag.Get()
	}
	if o.InternalNotesFlag.IsSet() {
		toSerialize["internalNotesFlag"] = o.InternalNotesFlag.Get()
	}
	if o.AuditNotesFlag.IsSet() {
		toSerialize["auditNotesFlag"] = o.AuditNotesFlag.Get()
	}
	if !IsNil(o.ServicePriority) {
		toSerialize["servicePriority"] = o.ServicePriority
	}
	if o.UpdateOwnerFlag.IsSet() {
		toSerialize["updateOwnerFlag"] = o.UpdateOwnerFlag.Get()
	}
	if !IsNil(o.SalesOrderStatus) {
		toSerialize["salesOrderStatus"] = o.SalesOrderStatus
	}
	if !IsNil(o.ProjectStatus) {
		toSerialize["projectStatus"] = o.ProjectStatus
	}
	if !IsNil(o.CompanyStatus) {
		toSerialize["companyStatus"] = o.CompanyStatus
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.ServiceSurvey) {
		toSerialize["serviceSurvey"] = o.ServiceSurvey
	}
	if !IsNil(o.SpecificTeamTo) {
		toSerialize["specificTeamTo"] = o.SpecificTeamTo
	}
	if o.AttachConfigurationsFor.IsSet() {
		toSerialize["attachConfigurationsFor"] = o.AttachConfigurationsFor.Get()
	}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	if !IsNil(o.ConfigurationStatus) {
		toSerialize["configurationStatus"] = o.ConfigurationStatus
	}
	if !IsNil(o.ConnectWiseID) {
		toSerialize["connectWiseID"] = o.ConnectWiseID
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	if o.GrandParentId.IsSet() {
		toSerialize["grandParentId"] = o.GrandParentId.Get()
	}
	if !IsNil(o.ParentConnectWiseId) {
		toSerialize["parentConnectWiseId"] = o.ParentConnectWiseId
	}
	if !IsNil(o.GrandParentConnectWiseId) {
		toSerialize["grandParentConnectWiseId"] = o.GrandParentConnectWiseId
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *WorkflowAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notifyType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkflowAction := _WorkflowAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkflowAction)

	if err != nil {
		return err
	}

	*o = WorkflowAction(varWorkflowAction)

	return err
}

type NullableWorkflowAction struct {
	value *WorkflowAction
	isSet bool
}

func (v NullableWorkflowAction) Get() *WorkflowAction {
	return v.value
}

func (v *NullableWorkflowAction) Set(val *WorkflowAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowAction(val *WorkflowAction) *NullableWorkflowAction {
	return &NullableWorkflowAction{value: val, isSet: true}
}

func (v NullableWorkflowAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
