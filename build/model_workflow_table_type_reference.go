/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the WorkflowTableTypeReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowTableTypeReference{}

// WorkflowTableTypeReference struct for WorkflowTableTypeReference
type WorkflowTableTypeReference struct {
	Id         NullableInt32      `json:"id,omitempty"`
	Identifier *string            `json:"identifier,omitempty"`
	Name       *string            `json:"name,omitempty"`
	Info       *map[string]string `json:"_info,omitempty"`
}

// NewWorkflowTableTypeReference instantiates a new WorkflowTableTypeReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowTableTypeReference() *WorkflowTableTypeReference {
	this := WorkflowTableTypeReference{}
	return &this
}

// NewWorkflowTableTypeReferenceWithDefaults instantiates a new WorkflowTableTypeReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowTableTypeReferenceWithDefaults() *WorkflowTableTypeReference {
	this := WorkflowTableTypeReference{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTableTypeReference) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTableTypeReference) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowTableTypeReference) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *WorkflowTableTypeReference) SetId(v int32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *WorkflowTableTypeReference) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *WorkflowTableTypeReference) UnsetId() {
	o.Id.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *WorkflowTableTypeReference) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTableTypeReference) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *WorkflowTableTypeReference) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *WorkflowTableTypeReference) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowTableTypeReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTableTypeReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowTableTypeReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowTableTypeReference) SetName(v string) {
	o.Name = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WorkflowTableTypeReference) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTableTypeReference) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WorkflowTableTypeReference) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WorkflowTableTypeReference) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WorkflowTableTypeReference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowTableTypeReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableWorkflowTableTypeReference struct {
	value *WorkflowTableTypeReference
	isSet bool
}

func (v NullableWorkflowTableTypeReference) Get() *WorkflowTableTypeReference {
	return v.value
}

func (v *NullableWorkflowTableTypeReference) Set(val *WorkflowTableTypeReference) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTableTypeReference) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTableTypeReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTableTypeReference(val *WorkflowTableTypeReference) *NullableWorkflowTableTypeReference {
	return &NullableWorkflowTableTypeReference{value: val, isSet: true}
}

func (v NullableWorkflowTableTypeReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTableTypeReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
