/*
Connectwise Manage Public Endpoints

Testing AgreementsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_AgreementsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgreementsAPIService DeleteFinanceAgreementsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.AgreementsAPI.DeleteFinanceAgreementsById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService DeleteFinanceAgreementsByParentIdConfigurationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		httpRes, err := apiClient.AgreementsAPI.DeleteFinanceAgreementsByParentIdConfigurationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreements", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsByIdApplicationParametersByPodId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var podId string

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsByIdApplicationParametersByPodId(context.Background(), id, podId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsByIdQuickAccessCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsByIdQuickAccessCount(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsByIdRecurringParametersByPodId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var podId string

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsByIdRecurringParametersByPodId(context.Background(), id, podId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsByParentIdConfigurations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsByParentIdConfigurations(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsByParentIdConfigurationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsByParentIdConfigurationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsByParentIdConfigurationsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsByParentIdConfigurationsCount(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService GetFinanceAgreementsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgreementsAPI.GetFinanceAgreementsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService PatchFinanceAgreementsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.AgreementsAPI.PatchFinanceAgreementsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService PostFinanceAgreements", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AgreementsAPI.PostFinanceAgreements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService PostFinanceAgreementsByIdInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.AgreementsAPI.PostFinanceAgreementsByIdInvoice(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService PostFinanceAgreementsByParentIdConfigurations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.AgreementsAPI.PostFinanceAgreementsByParentIdConfigurations(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService PostFinanceAgreementsByParentIdCopy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.AgreementsAPI.PostFinanceAgreementsByParentIdCopy(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgreementsAPIService PutFinanceAgreementsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.AgreementsAPI.PutFinanceAgreementsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
