/*
Connectwise Manage Public Endpoints

Testing ConfigurationTypeQuestionValuesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_ConfigurationTypeQuestionValuesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigurationTypeQuestionValuesAPIService DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues(context.Background(), parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsages(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesList(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCount(context.Background(), parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues(context.Background(), parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationTypeQuestionValuesAPIService PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.ConfigurationTypeQuestionValuesAPI.PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
