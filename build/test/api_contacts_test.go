/*
Connectwise Manage Public Endpoints

Testing ContactsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_ContactsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContactsAPIService DeleteCompanyContactsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var transferContactId int32

		httpRes, err := apiClient.ContactsAPI.DeleteCompanyContactsById(context.Background(), id, transferContactId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContacts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContacts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContactsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsByIdImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var useDefaultFlag bool
		var lastModified string

		httpRes, err := apiClient.ContactsAPI.GetCompanyContactsByIdImage(context.Background(), id, useDefaultFlag, lastModified).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsByIdPortalSecurity", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContactsByIdPortalSecurity(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsByIdUsages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContactsByIdUsages(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsByIdUsagesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContactsByIdUsagesList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContactsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetCompanyContactsDefault", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var companyId int32

		resp, httpRes, err := apiClient.ContactsAPI.GetCompanyContactsDefault(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService PatchCompanyContactsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ContactsAPI.PatchCompanyContactsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService PostCompanyContacts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.PostCompanyContacts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService PostCompanyContactsRequestPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ContactsAPI.PostCompanyContactsRequestPassword(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService PostCompanyContactsValidatePortalCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.PostCompanyContactsValidatePortalCredentials(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService PutCompanyContactsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ContactsAPI.PutCompanyContactsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
