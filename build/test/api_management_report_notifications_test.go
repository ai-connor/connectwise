/*
Connectwise Manage Public Endpoints

Testing ManagementReportNotificationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_ManagementReportNotificationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagementReportNotificationsAPIService DeleteCompanyCompaniesByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		httpRes, err := apiClient.ManagementReportNotificationsAPI.DeleteCompanyCompaniesByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService DeleteCompanyManagementByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		httpRes, err := apiClient.ManagementReportNotificationsAPI.DeleteCompanyManagementByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService GetCompanyCompaniesByParentIdManagementReportNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.GetCompanyCompaniesByParentIdManagementReportNotifications(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService GetCompanyCompaniesByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.GetCompanyCompaniesByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService GetCompanyCompaniesByParentIdManagementReportNotificationsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.GetCompanyCompaniesByParentIdManagementReportNotificationsCount(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService GetCompanyManagementByParentIdManagementReportNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.GetCompanyManagementByParentIdManagementReportNotifications(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService GetCompanyManagementByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.GetCompanyManagementByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService GetCompanyManagementByParentIdManagementReportNotificationsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.GetCompanyManagementByParentIdManagementReportNotificationsCount(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService PatchCompanyCompaniesByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.PatchCompanyCompaniesByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService PatchCompanyManagementByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.PatchCompanyManagementByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService PostCompanyCompaniesByParentIdManagementReportNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.PostCompanyCompaniesByParentIdManagementReportNotifications(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService PostCompanyManagementByParentIdManagementReportNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.PostCompanyManagementByParentIdManagementReportNotifications(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService PutCompanyCompaniesByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.PutCompanyCompaniesByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagementReportNotificationsAPIService PutCompanyManagementByParentIdManagementReportNotificationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32

		resp, httpRes, err := apiClient.ManagementReportNotificationsAPI.PutCompanyManagementByParentIdManagementReportNotificationsById(context.Background(), id, parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
