/*
Connectwise Manage Public Endpoints

Testing PricingBreaksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_PricingBreaksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PricingBreaksAPIService DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		httpRes, err := apiClient.PricingBreaksAPI.DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricingBreaksAPIService GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.PricingBreaksAPI.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks(context.Background(), parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricingBreaksAPIService GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.PricingBreaksAPI.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricingBreaksAPIService GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.PricingBreaksAPI.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCount(context.Background(), parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricingBreaksAPIService PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.PricingBreaksAPI.PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricingBreaksAPIService PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.PricingBreaksAPI.PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks(context.Background(), parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PricingBreaksAPIService PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var parentId int32
		var grandparentId int32

		resp, httpRes, err := apiClient.PricingBreaksAPI.PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(context.Background(), id, parentId, grandparentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
