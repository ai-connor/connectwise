/*
Connectwise Manage Public Endpoints

Testing PurchaseOrderStatusesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_PurchaseOrderStatusesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PurchaseOrderStatusesAPIService DeleteProcurementPurchaseorderstatusesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.PurchaseOrderStatusesAPI.DeleteProcurementPurchaseorderstatusesById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatuses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesByIdInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesByIdInfo(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesByIdUsages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesByIdUsages(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesByIdUsagesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesByIdUsagesList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService GetProcurementPurchaseorderstatusesInfoCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.GetProcurementPurchaseorderstatusesInfoCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService PatchProcurementPurchaseorderstatusesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.PatchProcurementPurchaseorderstatusesById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService PostProcurementPurchaseorderstatuses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.PostProcurementPurchaseorderstatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrderStatusesAPIService PutProcurementPurchaseorderstatusesById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrderStatusesAPI.PutProcurementPurchaseorderstatusesById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
