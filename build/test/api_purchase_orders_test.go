/*
Connectwise Manage Public Endpoints

Testing PurchaseOrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_PurchaseOrdersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PurchaseOrdersAPIService DeleteProcurementPurchaseordersById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.PurchaseOrdersAPI.DeleteProcurementPurchaseordersById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetProcurementPurchaseorders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetProcurementPurchaseorders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetProcurementPurchaseordersById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetProcurementPurchaseordersById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetProcurementPurchaseordersByIdQuickAccessCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetProcurementPurchaseordersByIdQuickAccessCount(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetProcurementPurchaseordersByParentIdNotes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parentId int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetProcurementPurchaseordersByParentIdNotes(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService GetProcurementPurchaseordersCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.GetProcurementPurchaseordersCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService PatchProcurementPurchaseordersById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.PatchProcurementPurchaseordersById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService PostProcurementPurchaseorders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.PostProcurementPurchaseorders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService PostProcurementPurchaseordersByIdCopy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.PostProcurementPurchaseordersByIdCopy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService PostProcurementPurchaseordersByIdRebatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.PostProcurementPurchaseordersByIdRebatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService PostProcurementPurchaseordersByIdUnbatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.PostProcurementPurchaseordersByIdUnbatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PurchaseOrdersAPIService PutProcurementPurchaseordersById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.PurchaseOrdersAPI.PutProcurementPurchaseordersById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
