/*
Connectwise Manage Public Endpoints

Testing RmaTagsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_RmaTagsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RmaTagsAPIService DeleteProcurementRmaTagsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.RmaTagsAPI.DeleteProcurementRmaTagsById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService GetProcurementRmaTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RmaTagsAPI.GetProcurementRmaTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService GetProcurementRmaTagsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.RmaTagsAPI.GetProcurementRmaTagsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService GetProcurementRmaTagsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RmaTagsAPI.GetProcurementRmaTagsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService GetProcurementRmaTagsDefault", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var productId int32
		var billingLogId int32
		var ticketId int32
		var projectId int32
		var salesOrderId int32
		var companyId int32

		resp, httpRes, err := apiClient.RmaTagsAPI.GetProcurementRmaTagsDefault(context.Background(), productId, billingLogId, ticketId, projectId, salesOrderId, companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService PatchProcurementRmaTagsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.RmaTagsAPI.PatchProcurementRmaTagsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService PostProcurementRmaTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RmaTagsAPI.PostProcurementRmaTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RmaTagsAPIService PutProcurementRmaTagsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.RmaTagsAPI.PutProcurementRmaTagsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
