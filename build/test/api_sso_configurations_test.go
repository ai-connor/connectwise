/*
Connectwise Manage Public Endpoints

Testing SsoConfigurationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cwapi

import (
	"context"
	openapiclient "github.com/ai-connor/connectwise"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_cwapi_SsoConfigurationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SsoConfigurationsAPIService DeleteSystemSsoConfigurationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.SsoConfigurationsAPI.DeleteSystemSsoConfigurationsById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService GetSystemSsoConfigurations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.GetSystemSsoConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService GetSystemSsoConfigurationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.GetSystemSsoConfigurationsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService GetSystemSsoConfigurationsCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.GetSystemSsoConfigurationsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService PatchSystemSsoConfigurationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.PatchSystemSsoConfigurationsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService PostSystemSsoConfigurations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.PostSystemSsoConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService PostSystemSsoConfigurationsByIdRegistertoken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.PostSystemSsoConfigurationsByIdRegistertoken(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService PostSystemSsoConfigurationsByIdSubmitmembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.PostSystemSsoConfigurationsByIdSubmitmembers(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SsoConfigurationsAPIService PutSystemSsoConfigurationsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SsoConfigurationsAPI.PutSystemSsoConfigurationsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
