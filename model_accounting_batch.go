/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the AccountingBatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountingBatch{}

// AccountingBatch struct for AccountingBatch
type AccountingBatch struct {
	Id *int32 `json:"id,omitempty"`
	BatchIdentifier *string `json:"batchIdentifier,omitempty"`
	ExportInvoicesFlag NullableBool `json:"exportInvoicesFlag,omitempty"`
	ExportExpensesFlag NullableBool `json:"exportExpensesFlag,omitempty"`
	ExportProductsFlag NullableBool `json:"exportProductsFlag,omitempty"`
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewAccountingBatch instantiates a new AccountingBatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountingBatch() *AccountingBatch {
	this := AccountingBatch{}
	return &this
}

// NewAccountingBatchWithDefaults instantiates a new AccountingBatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountingBatchWithDefaults() *AccountingBatch {
	this := AccountingBatch{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountingBatch) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingBatch) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountingBatch) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AccountingBatch) SetId(v int32) {
	o.Id = &v
}

// GetBatchIdentifier returns the BatchIdentifier field value if set, zero value otherwise.
func (o *AccountingBatch) GetBatchIdentifier() string {
	if o == nil || IsNil(o.BatchIdentifier) {
		var ret string
		return ret
	}
	return *o.BatchIdentifier
}

// GetBatchIdentifierOk returns a tuple with the BatchIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingBatch) GetBatchIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.BatchIdentifier) {
		return nil, false
	}
	return o.BatchIdentifier, true
}

// HasBatchIdentifier returns a boolean if a field has been set.
func (o *AccountingBatch) HasBatchIdentifier() bool {
	if o != nil && !IsNil(o.BatchIdentifier) {
		return true
	}

	return false
}

// SetBatchIdentifier gets a reference to the given string and assigns it to the BatchIdentifier field.
func (o *AccountingBatch) SetBatchIdentifier(v string) {
	o.BatchIdentifier = &v
}

// GetExportInvoicesFlag returns the ExportInvoicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingBatch) GetExportInvoicesFlag() bool {
	if o == nil || IsNil(o.ExportInvoicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExportInvoicesFlag.Get()
}

// GetExportInvoicesFlagOk returns a tuple with the ExportInvoicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingBatch) GetExportInvoicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportInvoicesFlag.Get(), o.ExportInvoicesFlag.IsSet()
}

// HasExportInvoicesFlag returns a boolean if a field has been set.
func (o *AccountingBatch) HasExportInvoicesFlag() bool {
	if o != nil && o.ExportInvoicesFlag.IsSet() {
		return true
	}

	return false
}

// SetExportInvoicesFlag gets a reference to the given NullableBool and assigns it to the ExportInvoicesFlag field.
func (o *AccountingBatch) SetExportInvoicesFlag(v bool) {
	o.ExportInvoicesFlag.Set(&v)
}
// SetExportInvoicesFlagNil sets the value for ExportInvoicesFlag to be an explicit nil
func (o *AccountingBatch) SetExportInvoicesFlagNil() {
	o.ExportInvoicesFlag.Set(nil)
}

// UnsetExportInvoicesFlag ensures that no value is present for ExportInvoicesFlag, not even an explicit nil
func (o *AccountingBatch) UnsetExportInvoicesFlag() {
	o.ExportInvoicesFlag.Unset()
}

// GetExportExpensesFlag returns the ExportExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingBatch) GetExportExpensesFlag() bool {
	if o == nil || IsNil(o.ExportExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExportExpensesFlag.Get()
}

// GetExportExpensesFlagOk returns a tuple with the ExportExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingBatch) GetExportExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportExpensesFlag.Get(), o.ExportExpensesFlag.IsSet()
}

// HasExportExpensesFlag returns a boolean if a field has been set.
func (o *AccountingBatch) HasExportExpensesFlag() bool {
	if o != nil && o.ExportExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetExportExpensesFlag gets a reference to the given NullableBool and assigns it to the ExportExpensesFlag field.
func (o *AccountingBatch) SetExportExpensesFlag(v bool) {
	o.ExportExpensesFlag.Set(&v)
}
// SetExportExpensesFlagNil sets the value for ExportExpensesFlag to be an explicit nil
func (o *AccountingBatch) SetExportExpensesFlagNil() {
	o.ExportExpensesFlag.Set(nil)
}

// UnsetExportExpensesFlag ensures that no value is present for ExportExpensesFlag, not even an explicit nil
func (o *AccountingBatch) UnsetExportExpensesFlag() {
	o.ExportExpensesFlag.Unset()
}

// GetExportProductsFlag returns the ExportProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingBatch) GetExportProductsFlag() bool {
	if o == nil || IsNil(o.ExportProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExportProductsFlag.Get()
}

// GetExportProductsFlagOk returns a tuple with the ExportProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingBatch) GetExportProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportProductsFlag.Get(), o.ExportProductsFlag.IsSet()
}

// HasExportProductsFlag returns a boolean if a field has been set.
func (o *AccountingBatch) HasExportProductsFlag() bool {
	if o != nil && o.ExportProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetExportProductsFlag gets a reference to the given NullableBool and assigns it to the ExportProductsFlag field.
func (o *AccountingBatch) SetExportProductsFlag(v bool) {
	o.ExportProductsFlag.Set(&v)
}
// SetExportProductsFlagNil sets the value for ExportProductsFlag to be an explicit nil
func (o *AccountingBatch) SetExportProductsFlagNil() {
	o.ExportProductsFlag.Set(nil)
}

// UnsetExportProductsFlag ensures that no value is present for ExportProductsFlag, not even an explicit nil
func (o *AccountingBatch) UnsetExportProductsFlag() {
	o.ExportProductsFlag.Unset()
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingBatch) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingBatch) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *AccountingBatch) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *AccountingBatch) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *AccountingBatch) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *AccountingBatch) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AccountingBatch) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingBatch) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AccountingBatch) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AccountingBatch) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AccountingBatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountingBatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.BatchIdentifier) {
		toSerialize["batchIdentifier"] = o.BatchIdentifier
	}
	if o.ExportInvoicesFlag.IsSet() {
		toSerialize["exportInvoicesFlag"] = o.ExportInvoicesFlag.Get()
	}
	if o.ExportExpensesFlag.IsSet() {
		toSerialize["exportExpensesFlag"] = o.ExportExpensesFlag.Get()
	}
	if o.ExportProductsFlag.IsSet() {
		toSerialize["exportProductsFlag"] = o.ExportProductsFlag.Get()
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableAccountingBatch struct {
	value *AccountingBatch
	isSet bool
}

func (v NullableAccountingBatch) Get() *AccountingBatch {
	return v.value
}

func (v *NullableAccountingBatch) Set(val *AccountingBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountingBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountingBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountingBatch(val *AccountingBatch) *NullableAccountingBatch {
	return &NullableAccountingBatch{value: val, isSet: true}
}

func (v NullableAccountingBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountingBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


