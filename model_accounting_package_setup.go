/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountingPackageSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountingPackageSetup{}

// AccountingPackageSetup struct for AccountingPackageSetup
type AccountingPackageSetup struct {
	Id *int32 `json:"id,omitempty"`
	AccountingPackage AccountingPackageReference `json:"accountingPackage"`
	DirectTransferFlag NullableBool `json:"directTransferFlag,omitempty"`
	IncludeInvoicesFlag NullableBool `json:"includeInvoicesFlag,omitempty"`
	InvoiceFormat NullableString `json:"invoiceFormat,omitempty"`
	IncludeExpensesFlag NullableBool `json:"includeExpensesFlag,omitempty"`
	TransferExpensesAsBillFlag NullableBool `json:"transferExpensesAsBillFlag,omitempty"`
	ExpenseFormat NullableString `json:"expenseFormat,omitempty"`
	SuppressMemoFlag NullableBool `json:"suppressMemoFlag,omitempty"`
	SyncPaymentInfoFlag NullableBool `json:"syncPaymentInfoFlag,omitempty"`
	SyncWisePayPaymentInfoFlag NullableBool `json:"syncWisePayPaymentInfoFlag,omitempty"`
	IncludeSalesTaxFlag NullableBool `json:"includeSalesTaxFlag,omitempty"`
	EnableTaxGroupsFlag NullableBool `json:"enableTaxGroupsFlag,omitempty"`
	ZeroDollarTaxAmountsFlag NullableBool `json:"zeroDollarTaxAmountsFlag,omitempty"`
	IncludeItemsFlag NullableBool `json:"includeItemsFlag,omitempty"`
	InventorySOHFlag NullableBool `json:"inventorySOHFlag,omitempty"`
	SendComponentAmountFlag NullableBool `json:"sendComponentAmountFlag,omitempty"`
	SendUomFlag NullableBool `json:"sendUomFlag,omitempty"`
	IncludeCogsEntriesFlag NullableBool `json:"includeCogsEntriesFlag,omitempty"`
	IncludeCogsDropShipFlag NullableBool `json:"includeCogsDropShipFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AccountingPackageSetup AccountingPackageSetup

// NewAccountingPackageSetup instantiates a new AccountingPackageSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountingPackageSetup(accountingPackage AccountingPackageReference) *AccountingPackageSetup {
	this := AccountingPackageSetup{}
	this.AccountingPackage = accountingPackage
	return &this
}

// NewAccountingPackageSetupWithDefaults instantiates a new AccountingPackageSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountingPackageSetupWithDefaults() *AccountingPackageSetup {
	this := AccountingPackageSetup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountingPackageSetup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingPackageSetup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AccountingPackageSetup) SetId(v int32) {
	o.Id = &v
}

// GetAccountingPackage returns the AccountingPackage field value
func (o *AccountingPackageSetup) GetAccountingPackage() AccountingPackageReference {
	if o == nil {
		var ret AccountingPackageReference
		return ret
	}

	return o.AccountingPackage
}

// GetAccountingPackageOk returns a tuple with the AccountingPackage field value
// and a boolean to check if the value has been set.
func (o *AccountingPackageSetup) GetAccountingPackageOk() (*AccountingPackageReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingPackage, true
}

// SetAccountingPackage sets field value
func (o *AccountingPackageSetup) SetAccountingPackage(v AccountingPackageReference) {
	o.AccountingPackage = v
}

// GetDirectTransferFlag returns the DirectTransferFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetDirectTransferFlag() bool {
	if o == nil || IsNil(o.DirectTransferFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DirectTransferFlag.Get()
}

// GetDirectTransferFlagOk returns a tuple with the DirectTransferFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetDirectTransferFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectTransferFlag.Get(), o.DirectTransferFlag.IsSet()
}

// HasDirectTransferFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasDirectTransferFlag() bool {
	if o != nil && o.DirectTransferFlag.IsSet() {
		return true
	}

	return false
}

// SetDirectTransferFlag gets a reference to the given NullableBool and assigns it to the DirectTransferFlag field.
func (o *AccountingPackageSetup) SetDirectTransferFlag(v bool) {
	o.DirectTransferFlag.Set(&v)
}
// SetDirectTransferFlagNil sets the value for DirectTransferFlag to be an explicit nil
func (o *AccountingPackageSetup) SetDirectTransferFlagNil() {
	o.DirectTransferFlag.Set(nil)
}

// UnsetDirectTransferFlag ensures that no value is present for DirectTransferFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetDirectTransferFlag() {
	o.DirectTransferFlag.Unset()
}

// GetIncludeInvoicesFlag returns the IncludeInvoicesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetIncludeInvoicesFlag() bool {
	if o == nil || IsNil(o.IncludeInvoicesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeInvoicesFlag.Get()
}

// GetIncludeInvoicesFlagOk returns a tuple with the IncludeInvoicesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetIncludeInvoicesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeInvoicesFlag.Get(), o.IncludeInvoicesFlag.IsSet()
}

// HasIncludeInvoicesFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasIncludeInvoicesFlag() bool {
	if o != nil && o.IncludeInvoicesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeInvoicesFlag gets a reference to the given NullableBool and assigns it to the IncludeInvoicesFlag field.
func (o *AccountingPackageSetup) SetIncludeInvoicesFlag(v bool) {
	o.IncludeInvoicesFlag.Set(&v)
}
// SetIncludeInvoicesFlagNil sets the value for IncludeInvoicesFlag to be an explicit nil
func (o *AccountingPackageSetup) SetIncludeInvoicesFlagNil() {
	o.IncludeInvoicesFlag.Set(nil)
}

// UnsetIncludeInvoicesFlag ensures that no value is present for IncludeInvoicesFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetIncludeInvoicesFlag() {
	o.IncludeInvoicesFlag.Unset()
}

// GetInvoiceFormat returns the InvoiceFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetInvoiceFormat() string {
	if o == nil || IsNil(o.InvoiceFormat.Get()) {
		var ret string
		return ret
	}
	return *o.InvoiceFormat.Get()
}

// GetInvoiceFormatOk returns a tuple with the InvoiceFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetInvoiceFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceFormat.Get(), o.InvoiceFormat.IsSet()
}

// HasInvoiceFormat returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasInvoiceFormat() bool {
	if o != nil && o.InvoiceFormat.IsSet() {
		return true
	}

	return false
}

// SetInvoiceFormat gets a reference to the given NullableString and assigns it to the InvoiceFormat field.
func (o *AccountingPackageSetup) SetInvoiceFormat(v string) {
	o.InvoiceFormat.Set(&v)
}
// SetInvoiceFormatNil sets the value for InvoiceFormat to be an explicit nil
func (o *AccountingPackageSetup) SetInvoiceFormatNil() {
	o.InvoiceFormat.Set(nil)
}

// UnsetInvoiceFormat ensures that no value is present for InvoiceFormat, not even an explicit nil
func (o *AccountingPackageSetup) UnsetInvoiceFormat() {
	o.InvoiceFormat.Unset()
}

// GetIncludeExpensesFlag returns the IncludeExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetIncludeExpensesFlag() bool {
	if o == nil || IsNil(o.IncludeExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeExpensesFlag.Get()
}

// GetIncludeExpensesFlagOk returns a tuple with the IncludeExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetIncludeExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeExpensesFlag.Get(), o.IncludeExpensesFlag.IsSet()
}

// HasIncludeExpensesFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasIncludeExpensesFlag() bool {
	if o != nil && o.IncludeExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeExpensesFlag gets a reference to the given NullableBool and assigns it to the IncludeExpensesFlag field.
func (o *AccountingPackageSetup) SetIncludeExpensesFlag(v bool) {
	o.IncludeExpensesFlag.Set(&v)
}
// SetIncludeExpensesFlagNil sets the value for IncludeExpensesFlag to be an explicit nil
func (o *AccountingPackageSetup) SetIncludeExpensesFlagNil() {
	o.IncludeExpensesFlag.Set(nil)
}

// UnsetIncludeExpensesFlag ensures that no value is present for IncludeExpensesFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetIncludeExpensesFlag() {
	o.IncludeExpensesFlag.Unset()
}

// GetTransferExpensesAsBillFlag returns the TransferExpensesAsBillFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetTransferExpensesAsBillFlag() bool {
	if o == nil || IsNil(o.TransferExpensesAsBillFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TransferExpensesAsBillFlag.Get()
}

// GetTransferExpensesAsBillFlagOk returns a tuple with the TransferExpensesAsBillFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetTransferExpensesAsBillFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransferExpensesAsBillFlag.Get(), o.TransferExpensesAsBillFlag.IsSet()
}

// HasTransferExpensesAsBillFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasTransferExpensesAsBillFlag() bool {
	if o != nil && o.TransferExpensesAsBillFlag.IsSet() {
		return true
	}

	return false
}

// SetTransferExpensesAsBillFlag gets a reference to the given NullableBool and assigns it to the TransferExpensesAsBillFlag field.
func (o *AccountingPackageSetup) SetTransferExpensesAsBillFlag(v bool) {
	o.TransferExpensesAsBillFlag.Set(&v)
}
// SetTransferExpensesAsBillFlagNil sets the value for TransferExpensesAsBillFlag to be an explicit nil
func (o *AccountingPackageSetup) SetTransferExpensesAsBillFlagNil() {
	o.TransferExpensesAsBillFlag.Set(nil)
}

// UnsetTransferExpensesAsBillFlag ensures that no value is present for TransferExpensesAsBillFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetTransferExpensesAsBillFlag() {
	o.TransferExpensesAsBillFlag.Unset()
}

// GetExpenseFormat returns the ExpenseFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetExpenseFormat() string {
	if o == nil || IsNil(o.ExpenseFormat.Get()) {
		var ret string
		return ret
	}
	return *o.ExpenseFormat.Get()
}

// GetExpenseFormatOk returns a tuple with the ExpenseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetExpenseFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseFormat.Get(), o.ExpenseFormat.IsSet()
}

// HasExpenseFormat returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasExpenseFormat() bool {
	if o != nil && o.ExpenseFormat.IsSet() {
		return true
	}

	return false
}

// SetExpenseFormat gets a reference to the given NullableString and assigns it to the ExpenseFormat field.
func (o *AccountingPackageSetup) SetExpenseFormat(v string) {
	o.ExpenseFormat.Set(&v)
}
// SetExpenseFormatNil sets the value for ExpenseFormat to be an explicit nil
func (o *AccountingPackageSetup) SetExpenseFormatNil() {
	o.ExpenseFormat.Set(nil)
}

// UnsetExpenseFormat ensures that no value is present for ExpenseFormat, not even an explicit nil
func (o *AccountingPackageSetup) UnsetExpenseFormat() {
	o.ExpenseFormat.Unset()
}

// GetSuppressMemoFlag returns the SuppressMemoFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetSuppressMemoFlag() bool {
	if o == nil || IsNil(o.SuppressMemoFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SuppressMemoFlag.Get()
}

// GetSuppressMemoFlagOk returns a tuple with the SuppressMemoFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetSuppressMemoFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuppressMemoFlag.Get(), o.SuppressMemoFlag.IsSet()
}

// HasSuppressMemoFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasSuppressMemoFlag() bool {
	if o != nil && o.SuppressMemoFlag.IsSet() {
		return true
	}

	return false
}

// SetSuppressMemoFlag gets a reference to the given NullableBool and assigns it to the SuppressMemoFlag field.
func (o *AccountingPackageSetup) SetSuppressMemoFlag(v bool) {
	o.SuppressMemoFlag.Set(&v)
}
// SetSuppressMemoFlagNil sets the value for SuppressMemoFlag to be an explicit nil
func (o *AccountingPackageSetup) SetSuppressMemoFlagNil() {
	o.SuppressMemoFlag.Set(nil)
}

// UnsetSuppressMemoFlag ensures that no value is present for SuppressMemoFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetSuppressMemoFlag() {
	o.SuppressMemoFlag.Unset()
}

// GetSyncPaymentInfoFlag returns the SyncPaymentInfoFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetSyncPaymentInfoFlag() bool {
	if o == nil || IsNil(o.SyncPaymentInfoFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SyncPaymentInfoFlag.Get()
}

// GetSyncPaymentInfoFlagOk returns a tuple with the SyncPaymentInfoFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetSyncPaymentInfoFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SyncPaymentInfoFlag.Get(), o.SyncPaymentInfoFlag.IsSet()
}

// HasSyncPaymentInfoFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasSyncPaymentInfoFlag() bool {
	if o != nil && o.SyncPaymentInfoFlag.IsSet() {
		return true
	}

	return false
}

// SetSyncPaymentInfoFlag gets a reference to the given NullableBool and assigns it to the SyncPaymentInfoFlag field.
func (o *AccountingPackageSetup) SetSyncPaymentInfoFlag(v bool) {
	o.SyncPaymentInfoFlag.Set(&v)
}
// SetSyncPaymentInfoFlagNil sets the value for SyncPaymentInfoFlag to be an explicit nil
func (o *AccountingPackageSetup) SetSyncPaymentInfoFlagNil() {
	o.SyncPaymentInfoFlag.Set(nil)
}

// UnsetSyncPaymentInfoFlag ensures that no value is present for SyncPaymentInfoFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetSyncPaymentInfoFlag() {
	o.SyncPaymentInfoFlag.Unset()
}

// GetSyncWisePayPaymentInfoFlag returns the SyncWisePayPaymentInfoFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetSyncWisePayPaymentInfoFlag() bool {
	if o == nil || IsNil(o.SyncWisePayPaymentInfoFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SyncWisePayPaymentInfoFlag.Get()
}

// GetSyncWisePayPaymentInfoFlagOk returns a tuple with the SyncWisePayPaymentInfoFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetSyncWisePayPaymentInfoFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SyncWisePayPaymentInfoFlag.Get(), o.SyncWisePayPaymentInfoFlag.IsSet()
}

// HasSyncWisePayPaymentInfoFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasSyncWisePayPaymentInfoFlag() bool {
	if o != nil && o.SyncWisePayPaymentInfoFlag.IsSet() {
		return true
	}

	return false
}

// SetSyncWisePayPaymentInfoFlag gets a reference to the given NullableBool and assigns it to the SyncWisePayPaymentInfoFlag field.
func (o *AccountingPackageSetup) SetSyncWisePayPaymentInfoFlag(v bool) {
	o.SyncWisePayPaymentInfoFlag.Set(&v)
}
// SetSyncWisePayPaymentInfoFlagNil sets the value for SyncWisePayPaymentInfoFlag to be an explicit nil
func (o *AccountingPackageSetup) SetSyncWisePayPaymentInfoFlagNil() {
	o.SyncWisePayPaymentInfoFlag.Set(nil)
}

// UnsetSyncWisePayPaymentInfoFlag ensures that no value is present for SyncWisePayPaymentInfoFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetSyncWisePayPaymentInfoFlag() {
	o.SyncWisePayPaymentInfoFlag.Unset()
}

// GetIncludeSalesTaxFlag returns the IncludeSalesTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetIncludeSalesTaxFlag() bool {
	if o == nil || IsNil(o.IncludeSalesTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeSalesTaxFlag.Get()
}

// GetIncludeSalesTaxFlagOk returns a tuple with the IncludeSalesTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetIncludeSalesTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeSalesTaxFlag.Get(), o.IncludeSalesTaxFlag.IsSet()
}

// HasIncludeSalesTaxFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasIncludeSalesTaxFlag() bool {
	if o != nil && o.IncludeSalesTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeSalesTaxFlag gets a reference to the given NullableBool and assigns it to the IncludeSalesTaxFlag field.
func (o *AccountingPackageSetup) SetIncludeSalesTaxFlag(v bool) {
	o.IncludeSalesTaxFlag.Set(&v)
}
// SetIncludeSalesTaxFlagNil sets the value for IncludeSalesTaxFlag to be an explicit nil
func (o *AccountingPackageSetup) SetIncludeSalesTaxFlagNil() {
	o.IncludeSalesTaxFlag.Set(nil)
}

// UnsetIncludeSalesTaxFlag ensures that no value is present for IncludeSalesTaxFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetIncludeSalesTaxFlag() {
	o.IncludeSalesTaxFlag.Unset()
}

// GetEnableTaxGroupsFlag returns the EnableTaxGroupsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetEnableTaxGroupsFlag() bool {
	if o == nil || IsNil(o.EnableTaxGroupsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableTaxGroupsFlag.Get()
}

// GetEnableTaxGroupsFlagOk returns a tuple with the EnableTaxGroupsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetEnableTaxGroupsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableTaxGroupsFlag.Get(), o.EnableTaxGroupsFlag.IsSet()
}

// HasEnableTaxGroupsFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasEnableTaxGroupsFlag() bool {
	if o != nil && o.EnableTaxGroupsFlag.IsSet() {
		return true
	}

	return false
}

// SetEnableTaxGroupsFlag gets a reference to the given NullableBool and assigns it to the EnableTaxGroupsFlag field.
func (o *AccountingPackageSetup) SetEnableTaxGroupsFlag(v bool) {
	o.EnableTaxGroupsFlag.Set(&v)
}
// SetEnableTaxGroupsFlagNil sets the value for EnableTaxGroupsFlag to be an explicit nil
func (o *AccountingPackageSetup) SetEnableTaxGroupsFlagNil() {
	o.EnableTaxGroupsFlag.Set(nil)
}

// UnsetEnableTaxGroupsFlag ensures that no value is present for EnableTaxGroupsFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetEnableTaxGroupsFlag() {
	o.EnableTaxGroupsFlag.Unset()
}

// GetZeroDollarTaxAmountsFlag returns the ZeroDollarTaxAmountsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetZeroDollarTaxAmountsFlag() bool {
	if o == nil || IsNil(o.ZeroDollarTaxAmountsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ZeroDollarTaxAmountsFlag.Get()
}

// GetZeroDollarTaxAmountsFlagOk returns a tuple with the ZeroDollarTaxAmountsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetZeroDollarTaxAmountsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZeroDollarTaxAmountsFlag.Get(), o.ZeroDollarTaxAmountsFlag.IsSet()
}

// HasZeroDollarTaxAmountsFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasZeroDollarTaxAmountsFlag() bool {
	if o != nil && o.ZeroDollarTaxAmountsFlag.IsSet() {
		return true
	}

	return false
}

// SetZeroDollarTaxAmountsFlag gets a reference to the given NullableBool and assigns it to the ZeroDollarTaxAmountsFlag field.
func (o *AccountingPackageSetup) SetZeroDollarTaxAmountsFlag(v bool) {
	o.ZeroDollarTaxAmountsFlag.Set(&v)
}
// SetZeroDollarTaxAmountsFlagNil sets the value for ZeroDollarTaxAmountsFlag to be an explicit nil
func (o *AccountingPackageSetup) SetZeroDollarTaxAmountsFlagNil() {
	o.ZeroDollarTaxAmountsFlag.Set(nil)
}

// UnsetZeroDollarTaxAmountsFlag ensures that no value is present for ZeroDollarTaxAmountsFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetZeroDollarTaxAmountsFlag() {
	o.ZeroDollarTaxAmountsFlag.Unset()
}

// GetIncludeItemsFlag returns the IncludeItemsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetIncludeItemsFlag() bool {
	if o == nil || IsNil(o.IncludeItemsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeItemsFlag.Get()
}

// GetIncludeItemsFlagOk returns a tuple with the IncludeItemsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetIncludeItemsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeItemsFlag.Get(), o.IncludeItemsFlag.IsSet()
}

// HasIncludeItemsFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasIncludeItemsFlag() bool {
	if o != nil && o.IncludeItemsFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeItemsFlag gets a reference to the given NullableBool and assigns it to the IncludeItemsFlag field.
func (o *AccountingPackageSetup) SetIncludeItemsFlag(v bool) {
	o.IncludeItemsFlag.Set(&v)
}
// SetIncludeItemsFlagNil sets the value for IncludeItemsFlag to be an explicit nil
func (o *AccountingPackageSetup) SetIncludeItemsFlagNil() {
	o.IncludeItemsFlag.Set(nil)
}

// UnsetIncludeItemsFlag ensures that no value is present for IncludeItemsFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetIncludeItemsFlag() {
	o.IncludeItemsFlag.Unset()
}

// GetInventorySOHFlag returns the InventorySOHFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetInventorySOHFlag() bool {
	if o == nil || IsNil(o.InventorySOHFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InventorySOHFlag.Get()
}

// GetInventorySOHFlagOk returns a tuple with the InventorySOHFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetInventorySOHFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventorySOHFlag.Get(), o.InventorySOHFlag.IsSet()
}

// HasInventorySOHFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasInventorySOHFlag() bool {
	if o != nil && o.InventorySOHFlag.IsSet() {
		return true
	}

	return false
}

// SetInventorySOHFlag gets a reference to the given NullableBool and assigns it to the InventorySOHFlag field.
func (o *AccountingPackageSetup) SetInventorySOHFlag(v bool) {
	o.InventorySOHFlag.Set(&v)
}
// SetInventorySOHFlagNil sets the value for InventorySOHFlag to be an explicit nil
func (o *AccountingPackageSetup) SetInventorySOHFlagNil() {
	o.InventorySOHFlag.Set(nil)
}

// UnsetInventorySOHFlag ensures that no value is present for InventorySOHFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetInventorySOHFlag() {
	o.InventorySOHFlag.Unset()
}

// GetSendComponentAmountFlag returns the SendComponentAmountFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetSendComponentAmountFlag() bool {
	if o == nil || IsNil(o.SendComponentAmountFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendComponentAmountFlag.Get()
}

// GetSendComponentAmountFlagOk returns a tuple with the SendComponentAmountFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetSendComponentAmountFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendComponentAmountFlag.Get(), o.SendComponentAmountFlag.IsSet()
}

// HasSendComponentAmountFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasSendComponentAmountFlag() bool {
	if o != nil && o.SendComponentAmountFlag.IsSet() {
		return true
	}

	return false
}

// SetSendComponentAmountFlag gets a reference to the given NullableBool and assigns it to the SendComponentAmountFlag field.
func (o *AccountingPackageSetup) SetSendComponentAmountFlag(v bool) {
	o.SendComponentAmountFlag.Set(&v)
}
// SetSendComponentAmountFlagNil sets the value for SendComponentAmountFlag to be an explicit nil
func (o *AccountingPackageSetup) SetSendComponentAmountFlagNil() {
	o.SendComponentAmountFlag.Set(nil)
}

// UnsetSendComponentAmountFlag ensures that no value is present for SendComponentAmountFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetSendComponentAmountFlag() {
	o.SendComponentAmountFlag.Unset()
}

// GetSendUomFlag returns the SendUomFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetSendUomFlag() bool {
	if o == nil || IsNil(o.SendUomFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendUomFlag.Get()
}

// GetSendUomFlagOk returns a tuple with the SendUomFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetSendUomFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendUomFlag.Get(), o.SendUomFlag.IsSet()
}

// HasSendUomFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasSendUomFlag() bool {
	if o != nil && o.SendUomFlag.IsSet() {
		return true
	}

	return false
}

// SetSendUomFlag gets a reference to the given NullableBool and assigns it to the SendUomFlag field.
func (o *AccountingPackageSetup) SetSendUomFlag(v bool) {
	o.SendUomFlag.Set(&v)
}
// SetSendUomFlagNil sets the value for SendUomFlag to be an explicit nil
func (o *AccountingPackageSetup) SetSendUomFlagNil() {
	o.SendUomFlag.Set(nil)
}

// UnsetSendUomFlag ensures that no value is present for SendUomFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetSendUomFlag() {
	o.SendUomFlag.Unset()
}

// GetIncludeCogsEntriesFlag returns the IncludeCogsEntriesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetIncludeCogsEntriesFlag() bool {
	if o == nil || IsNil(o.IncludeCogsEntriesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeCogsEntriesFlag.Get()
}

// GetIncludeCogsEntriesFlagOk returns a tuple with the IncludeCogsEntriesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetIncludeCogsEntriesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeCogsEntriesFlag.Get(), o.IncludeCogsEntriesFlag.IsSet()
}

// HasIncludeCogsEntriesFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasIncludeCogsEntriesFlag() bool {
	if o != nil && o.IncludeCogsEntriesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeCogsEntriesFlag gets a reference to the given NullableBool and assigns it to the IncludeCogsEntriesFlag field.
func (o *AccountingPackageSetup) SetIncludeCogsEntriesFlag(v bool) {
	o.IncludeCogsEntriesFlag.Set(&v)
}
// SetIncludeCogsEntriesFlagNil sets the value for IncludeCogsEntriesFlag to be an explicit nil
func (o *AccountingPackageSetup) SetIncludeCogsEntriesFlagNil() {
	o.IncludeCogsEntriesFlag.Set(nil)
}

// UnsetIncludeCogsEntriesFlag ensures that no value is present for IncludeCogsEntriesFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetIncludeCogsEntriesFlag() {
	o.IncludeCogsEntriesFlag.Unset()
}

// GetIncludeCogsDropShipFlag returns the IncludeCogsDropShipFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountingPackageSetup) GetIncludeCogsDropShipFlag() bool {
	if o == nil || IsNil(o.IncludeCogsDropShipFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeCogsDropShipFlag.Get()
}

// GetIncludeCogsDropShipFlagOk returns a tuple with the IncludeCogsDropShipFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountingPackageSetup) GetIncludeCogsDropShipFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeCogsDropShipFlag.Get(), o.IncludeCogsDropShipFlag.IsSet()
}

// HasIncludeCogsDropShipFlag returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasIncludeCogsDropShipFlag() bool {
	if o != nil && o.IncludeCogsDropShipFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeCogsDropShipFlag gets a reference to the given NullableBool and assigns it to the IncludeCogsDropShipFlag field.
func (o *AccountingPackageSetup) SetIncludeCogsDropShipFlag(v bool) {
	o.IncludeCogsDropShipFlag.Set(&v)
}
// SetIncludeCogsDropShipFlagNil sets the value for IncludeCogsDropShipFlag to be an explicit nil
func (o *AccountingPackageSetup) SetIncludeCogsDropShipFlagNil() {
	o.IncludeCogsDropShipFlag.Set(nil)
}

// UnsetIncludeCogsDropShipFlag ensures that no value is present for IncludeCogsDropShipFlag, not even an explicit nil
func (o *AccountingPackageSetup) UnsetIncludeCogsDropShipFlag() {
	o.IncludeCogsDropShipFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AccountingPackageSetup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountingPackageSetup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AccountingPackageSetup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AccountingPackageSetup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AccountingPackageSetup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountingPackageSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["accountingPackage"] = o.AccountingPackage
	if o.DirectTransferFlag.IsSet() {
		toSerialize["directTransferFlag"] = o.DirectTransferFlag.Get()
	}
	if o.IncludeInvoicesFlag.IsSet() {
		toSerialize["includeInvoicesFlag"] = o.IncludeInvoicesFlag.Get()
	}
	if o.InvoiceFormat.IsSet() {
		toSerialize["invoiceFormat"] = o.InvoiceFormat.Get()
	}
	if o.IncludeExpensesFlag.IsSet() {
		toSerialize["includeExpensesFlag"] = o.IncludeExpensesFlag.Get()
	}
	if o.TransferExpensesAsBillFlag.IsSet() {
		toSerialize["transferExpensesAsBillFlag"] = o.TransferExpensesAsBillFlag.Get()
	}
	if o.ExpenseFormat.IsSet() {
		toSerialize["expenseFormat"] = o.ExpenseFormat.Get()
	}
	if o.SuppressMemoFlag.IsSet() {
		toSerialize["suppressMemoFlag"] = o.SuppressMemoFlag.Get()
	}
	if o.SyncPaymentInfoFlag.IsSet() {
		toSerialize["syncPaymentInfoFlag"] = o.SyncPaymentInfoFlag.Get()
	}
	if o.SyncWisePayPaymentInfoFlag.IsSet() {
		toSerialize["syncWisePayPaymentInfoFlag"] = o.SyncWisePayPaymentInfoFlag.Get()
	}
	if o.IncludeSalesTaxFlag.IsSet() {
		toSerialize["includeSalesTaxFlag"] = o.IncludeSalesTaxFlag.Get()
	}
	if o.EnableTaxGroupsFlag.IsSet() {
		toSerialize["enableTaxGroupsFlag"] = o.EnableTaxGroupsFlag.Get()
	}
	if o.ZeroDollarTaxAmountsFlag.IsSet() {
		toSerialize["zeroDollarTaxAmountsFlag"] = o.ZeroDollarTaxAmountsFlag.Get()
	}
	if o.IncludeItemsFlag.IsSet() {
		toSerialize["includeItemsFlag"] = o.IncludeItemsFlag.Get()
	}
	if o.InventorySOHFlag.IsSet() {
		toSerialize["inventorySOHFlag"] = o.InventorySOHFlag.Get()
	}
	if o.SendComponentAmountFlag.IsSet() {
		toSerialize["sendComponentAmountFlag"] = o.SendComponentAmountFlag.Get()
	}
	if o.SendUomFlag.IsSet() {
		toSerialize["sendUomFlag"] = o.SendUomFlag.Get()
	}
	if o.IncludeCogsEntriesFlag.IsSet() {
		toSerialize["includeCogsEntriesFlag"] = o.IncludeCogsEntriesFlag.Get()
	}
	if o.IncludeCogsDropShipFlag.IsSet() {
		toSerialize["includeCogsDropShipFlag"] = o.IncludeCogsDropShipFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AccountingPackageSetup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountingPackage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountingPackageSetup := _AccountingPackageSetup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountingPackageSetup)

	if err != nil {
		return err
	}

	*o = AccountingPackageSetup(varAccountingPackageSetup)

	return err
}

type NullableAccountingPackageSetup struct {
	value *AccountingPackageSetup
	isSet bool
}

func (v NullableAccountingPackageSetup) Get() *AccountingPackageSetup {
	return v.value
}

func (v *NullableAccountingPackageSetup) Set(val *AccountingPackageSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountingPackageSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountingPackageSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountingPackageSetup(val *AccountingPackageSetup) *NullableAccountingPackageSetup {
	return &NullableAccountingPackageSetup{value: val, isSet: true}
}

func (v NullableAccountingPackageSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountingPackageSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


