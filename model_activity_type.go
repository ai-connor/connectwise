/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityType{}

// ActivityType struct for ActivityType
type ActivityType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Points NullableInt32 `json:"points,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	EmailFlag NullableBool `json:"emailFlag,omitempty"`
	MemoFlag NullableBool `json:"memoFlag,omitempty"`
	HistoryFlag NullableBool `json:"historyFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ActivityType ActivityType

// NewActivityType instantiates a new ActivityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityType(name string) *ActivityType {
	this := ActivityType{}
	this.Name = name
	return &this
}

// NewActivityTypeWithDefaults instantiates a new ActivityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityTypeWithDefaults() *ActivityType {
	this := ActivityType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivityType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivityType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ActivityType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ActivityType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActivityType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActivityType) SetName(v string) {
	o.Name = v
}

// GetPoints returns the Points field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityType) GetPoints() int32 {
	if o == nil || IsNil(o.Points.Get()) {
		var ret int32
		return ret
	}
	return *o.Points.Get()
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityType) GetPointsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Points.Get(), o.Points.IsSet()
}

// HasPoints returns a boolean if a field has been set.
func (o *ActivityType) HasPoints() bool {
	if o != nil && o.Points.IsSet() {
		return true
	}

	return false
}

// SetPoints gets a reference to the given NullableInt32 and assigns it to the Points field.
func (o *ActivityType) SetPoints(v int32) {
	o.Points.Set(&v)
}
// SetPointsNil sets the value for Points to be an explicit nil
func (o *ActivityType) SetPointsNil() {
	o.Points.Set(nil)
}

// UnsetPoints ensures that no value is present for Points, not even an explicit nil
func (o *ActivityType) UnsetPoints() {
	o.Points.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *ActivityType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *ActivityType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *ActivityType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *ActivityType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityType) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityType) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ActivityType) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ActivityType) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ActivityType) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ActivityType) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetEmailFlag returns the EmailFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityType) GetEmailFlag() bool {
	if o == nil || IsNil(o.EmailFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailFlag.Get()
}

// GetEmailFlagOk returns a tuple with the EmailFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityType) GetEmailFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailFlag.Get(), o.EmailFlag.IsSet()
}

// HasEmailFlag returns a boolean if a field has been set.
func (o *ActivityType) HasEmailFlag() bool {
	if o != nil && o.EmailFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailFlag gets a reference to the given NullableBool and assigns it to the EmailFlag field.
func (o *ActivityType) SetEmailFlag(v bool) {
	o.EmailFlag.Set(&v)
}
// SetEmailFlagNil sets the value for EmailFlag to be an explicit nil
func (o *ActivityType) SetEmailFlagNil() {
	o.EmailFlag.Set(nil)
}

// UnsetEmailFlag ensures that no value is present for EmailFlag, not even an explicit nil
func (o *ActivityType) UnsetEmailFlag() {
	o.EmailFlag.Unset()
}

// GetMemoFlag returns the MemoFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityType) GetMemoFlag() bool {
	if o == nil || IsNil(o.MemoFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MemoFlag.Get()
}

// GetMemoFlagOk returns a tuple with the MemoFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityType) GetMemoFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemoFlag.Get(), o.MemoFlag.IsSet()
}

// HasMemoFlag returns a boolean if a field has been set.
func (o *ActivityType) HasMemoFlag() bool {
	if o != nil && o.MemoFlag.IsSet() {
		return true
	}

	return false
}

// SetMemoFlag gets a reference to the given NullableBool and assigns it to the MemoFlag field.
func (o *ActivityType) SetMemoFlag(v bool) {
	o.MemoFlag.Set(&v)
}
// SetMemoFlagNil sets the value for MemoFlag to be an explicit nil
func (o *ActivityType) SetMemoFlagNil() {
	o.MemoFlag.Set(nil)
}

// UnsetMemoFlag ensures that no value is present for MemoFlag, not even an explicit nil
func (o *ActivityType) UnsetMemoFlag() {
	o.MemoFlag.Unset()
}

// GetHistoryFlag returns the HistoryFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivityType) GetHistoryFlag() bool {
	if o == nil || IsNil(o.HistoryFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HistoryFlag.Get()
}

// GetHistoryFlagOk returns a tuple with the HistoryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivityType) GetHistoryFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistoryFlag.Get(), o.HistoryFlag.IsSet()
}

// HasHistoryFlag returns a boolean if a field has been set.
func (o *ActivityType) HasHistoryFlag() bool {
	if o != nil && o.HistoryFlag.IsSet() {
		return true
	}

	return false
}

// SetHistoryFlag gets a reference to the given NullableBool and assigns it to the HistoryFlag field.
func (o *ActivityType) SetHistoryFlag(v bool) {
	o.HistoryFlag.Set(&v)
}
// SetHistoryFlagNil sets the value for HistoryFlag to be an explicit nil
func (o *ActivityType) SetHistoryFlagNil() {
	o.HistoryFlag.Set(nil)
}

// UnsetHistoryFlag ensures that no value is present for HistoryFlag, not even an explicit nil
func (o *ActivityType) UnsetHistoryFlag() {
	o.HistoryFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ActivityType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ActivityType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ActivityType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ActivityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.Points.IsSet() {
		toSerialize["points"] = o.Points.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.EmailFlag.IsSet() {
		toSerialize["emailFlag"] = o.EmailFlag.Get()
	}
	if o.MemoFlag.IsSet() {
		toSerialize["memoFlag"] = o.MemoFlag.Get()
	}
	if o.HistoryFlag.IsSet() {
		toSerialize["historyFlag"] = o.HistoryFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ActivityType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityType := _ActivityType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityType)

	if err != nil {
		return err
	}

	*o = ActivityType(varActivityType)

	return err
}

type NullableActivityType struct {
	value *ActivityType
	isSet bool
}

func (v NullableActivityType) Get() *ActivityType {
	return v.value
}

func (v *NullableActivityType) Set(val *ActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityType(val *ActivityType) *NullableActivityType {
	return &NullableActivityType{value: val, isSet: true}
}

func (v NullableActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


