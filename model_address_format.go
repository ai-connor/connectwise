/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressFormat{}

// AddressFormat struct for AddressFormat
type AddressFormat struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	//  Max length: 250;
	Format string `json:"format"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	CountryIds []int32 `json:"countryIds,omitempty"`
	AddAllCountries NullableBool `json:"addAllCountries,omitempty"`
	RemoveAllCountries NullableBool `json:"removeAllCountries,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AddressFormat AddressFormat

// NewAddressFormat instantiates a new AddressFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressFormat(name string, format string) *AddressFormat {
	this := AddressFormat{}
	this.Name = name
	this.Format = format
	return &this
}

// NewAddressFormatWithDefaults instantiates a new AddressFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressFormatWithDefaults() *AddressFormat {
	this := AddressFormat{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddressFormat) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormat) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddressFormat) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AddressFormat) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AddressFormat) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddressFormat) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddressFormat) SetName(v string) {
	o.Name = v
}

// GetFormat returns the Format field value
func (o *AddressFormat) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *AddressFormat) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *AddressFormat) SetFormat(v string) {
	o.Format = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressFormat) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressFormat) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *AddressFormat) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *AddressFormat) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *AddressFormat) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *AddressFormat) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetCountryIds returns the CountryIds field value if set, zero value otherwise.
func (o *AddressFormat) GetCountryIds() []int32 {
	if o == nil || IsNil(o.CountryIds) {
		var ret []int32
		return ret
	}
	return o.CountryIds
}

// GetCountryIdsOk returns a tuple with the CountryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormat) GetCountryIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.CountryIds) {
		return nil, false
	}
	return o.CountryIds, true
}

// HasCountryIds returns a boolean if a field has been set.
func (o *AddressFormat) HasCountryIds() bool {
	if o != nil && !IsNil(o.CountryIds) {
		return true
	}

	return false
}

// SetCountryIds gets a reference to the given []int32 and assigns it to the CountryIds field.
func (o *AddressFormat) SetCountryIds(v []int32) {
	o.CountryIds = v
}

// GetAddAllCountries returns the AddAllCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressFormat) GetAddAllCountries() bool {
	if o == nil || IsNil(o.AddAllCountries.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllCountries.Get()
}

// GetAddAllCountriesOk returns a tuple with the AddAllCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressFormat) GetAddAllCountriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllCountries.Get(), o.AddAllCountries.IsSet()
}

// HasAddAllCountries returns a boolean if a field has been set.
func (o *AddressFormat) HasAddAllCountries() bool {
	if o != nil && o.AddAllCountries.IsSet() {
		return true
	}

	return false
}

// SetAddAllCountries gets a reference to the given NullableBool and assigns it to the AddAllCountries field.
func (o *AddressFormat) SetAddAllCountries(v bool) {
	o.AddAllCountries.Set(&v)
}
// SetAddAllCountriesNil sets the value for AddAllCountries to be an explicit nil
func (o *AddressFormat) SetAddAllCountriesNil() {
	o.AddAllCountries.Set(nil)
}

// UnsetAddAllCountries ensures that no value is present for AddAllCountries, not even an explicit nil
func (o *AddressFormat) UnsetAddAllCountries() {
	o.AddAllCountries.Unset()
}

// GetRemoveAllCountries returns the RemoveAllCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressFormat) GetRemoveAllCountries() bool {
	if o == nil || IsNil(o.RemoveAllCountries.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllCountries.Get()
}

// GetRemoveAllCountriesOk returns a tuple with the RemoveAllCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressFormat) GetRemoveAllCountriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllCountries.Get(), o.RemoveAllCountries.IsSet()
}

// HasRemoveAllCountries returns a boolean if a field has been set.
func (o *AddressFormat) HasRemoveAllCountries() bool {
	if o != nil && o.RemoveAllCountries.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllCountries gets a reference to the given NullableBool and assigns it to the RemoveAllCountries field.
func (o *AddressFormat) SetRemoveAllCountries(v bool) {
	o.RemoveAllCountries.Set(&v)
}
// SetRemoveAllCountriesNil sets the value for RemoveAllCountries to be an explicit nil
func (o *AddressFormat) SetRemoveAllCountriesNil() {
	o.RemoveAllCountries.Set(nil)
}

// UnsetRemoveAllCountries ensures that no value is present for RemoveAllCountries, not even an explicit nil
func (o *AddressFormat) UnsetRemoveAllCountries() {
	o.RemoveAllCountries.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AddressFormat) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressFormat) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AddressFormat) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AddressFormat) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AddressFormat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["format"] = o.Format
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.CountryIds) {
		toSerialize["countryIds"] = o.CountryIds
	}
	if o.AddAllCountries.IsSet() {
		toSerialize["addAllCountries"] = o.AddAllCountries.Get()
	}
	if o.RemoveAllCountries.IsSet() {
		toSerialize["removeAllCountries"] = o.RemoveAllCountries.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AddressFormat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"format",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressFormat := _AddressFormat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressFormat)

	if err != nil {
		return err
	}

	*o = AddressFormat(varAddressFormat)

	return err
}

type NullableAddressFormat struct {
	value *AddressFormat
	isSet bool
}

func (v NullableAddressFormat) Get() *AddressFormat {
	return v.value
}

func (v *NullableAddressFormat) Set(val *AddressFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressFormat(val *AddressFormat) *NullableAddressFormat {
	return &NullableAddressFormat{value: val, isSet: true}
}

func (v NullableAddressFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


