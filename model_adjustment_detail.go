/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdjustmentDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdjustmentDetail{}

// AdjustmentDetail struct for AdjustmentDetail
type AdjustmentDetail struct {
	Id *int32 `json:"id,omitempty"`
	CatalogItem CatalogItemReference `json:"catalogItem"`
	//  Max length: 50;
	Description *string `json:"description,omitempty"`
	QuantityOnHand NullableFloat64 `json:"quantityOnHand,omitempty"`
	UnitCost NullableFloat64 `json:"unitCost,omitempty"`
	Warehouse WarehouseReference `json:"warehouse"`
	WarehouseBin WarehouseBinReference `json:"warehouseBin"`
	QuantityAdjusted NullableInt32 `json:"quantityAdjusted"`
	//  Max length: 1000;
	SerialNumber *string `json:"serialNumber,omitempty"`
	Adjustment *AdjustmentReference `json:"adjustment,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AdjustmentDetail AdjustmentDetail

// NewAdjustmentDetail instantiates a new AdjustmentDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdjustmentDetail(catalogItem CatalogItemReference, warehouse WarehouseReference, warehouseBin WarehouseBinReference, quantityAdjusted NullableInt32) *AdjustmentDetail {
	this := AdjustmentDetail{}
	this.CatalogItem = catalogItem
	this.Warehouse = warehouse
	this.WarehouseBin = warehouseBin
	this.QuantityAdjusted = quantityAdjusted
	return &this
}

// NewAdjustmentDetailWithDefaults instantiates a new AdjustmentDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdjustmentDetailWithDefaults() *AdjustmentDetail {
	this := AdjustmentDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AdjustmentDetail) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AdjustmentDetail) SetId(v int32) {
	o.Id = &v
}

// GetCatalogItem returns the CatalogItem field value
func (o *AdjustmentDetail) GetCatalogItem() CatalogItemReference {
	if o == nil {
		var ret CatalogItemReference
		return ret
	}

	return o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogItem, true
}

// SetCatalogItem sets field value
func (o *AdjustmentDetail) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdjustmentDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdjustmentDetail) SetDescription(v string) {
	o.Description = &v
}

// GetQuantityOnHand returns the QuantityOnHand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdjustmentDetail) GetQuantityOnHand() float64 {
	if o == nil || IsNil(o.QuantityOnHand.Get()) {
		var ret float64
		return ret
	}
	return *o.QuantityOnHand.Get()
}

// GetQuantityOnHandOk returns a tuple with the QuantityOnHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdjustmentDetail) GetQuantityOnHandOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityOnHand.Get(), o.QuantityOnHand.IsSet()
}

// HasQuantityOnHand returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasQuantityOnHand() bool {
	if o != nil && o.QuantityOnHand.IsSet() {
		return true
	}

	return false
}

// SetQuantityOnHand gets a reference to the given NullableFloat64 and assigns it to the QuantityOnHand field.
func (o *AdjustmentDetail) SetQuantityOnHand(v float64) {
	o.QuantityOnHand.Set(&v)
}
// SetQuantityOnHandNil sets the value for QuantityOnHand to be an explicit nil
func (o *AdjustmentDetail) SetQuantityOnHandNil() {
	o.QuantityOnHand.Set(nil)
}

// UnsetQuantityOnHand ensures that no value is present for QuantityOnHand, not even an explicit nil
func (o *AdjustmentDetail) UnsetQuantityOnHand() {
	o.QuantityOnHand.Unset()
}

// GetUnitCost returns the UnitCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdjustmentDetail) GetUnitCost() float64 {
	if o == nil || IsNil(o.UnitCost.Get()) {
		var ret float64
		return ret
	}
	return *o.UnitCost.Get()
}

// GetUnitCostOk returns a tuple with the UnitCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdjustmentDetail) GetUnitCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitCost.Get(), o.UnitCost.IsSet()
}

// HasUnitCost returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasUnitCost() bool {
	if o != nil && o.UnitCost.IsSet() {
		return true
	}

	return false
}

// SetUnitCost gets a reference to the given NullableFloat64 and assigns it to the UnitCost field.
func (o *AdjustmentDetail) SetUnitCost(v float64) {
	o.UnitCost.Set(&v)
}
// SetUnitCostNil sets the value for UnitCost to be an explicit nil
func (o *AdjustmentDetail) SetUnitCostNil() {
	o.UnitCost.Set(nil)
}

// UnsetUnitCost ensures that no value is present for UnitCost, not even an explicit nil
func (o *AdjustmentDetail) UnsetUnitCost() {
	o.UnitCost.Unset()
}

// GetWarehouse returns the Warehouse field value
func (o *AdjustmentDetail) GetWarehouse() WarehouseReference {
	if o == nil {
		var ret WarehouseReference
		return ret
	}

	return o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warehouse, true
}

// SetWarehouse sets field value
func (o *AdjustmentDetail) SetWarehouse(v WarehouseReference) {
	o.Warehouse = v
}

// GetWarehouseBin returns the WarehouseBin field value
func (o *AdjustmentDetail) GetWarehouseBin() WarehouseBinReference {
	if o == nil {
		var ret WarehouseBinReference
		return ret
	}

	return o.WarehouseBin
}

// GetWarehouseBinOk returns a tuple with the WarehouseBin field value
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetWarehouseBinOk() (*WarehouseBinReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarehouseBin, true
}

// SetWarehouseBin sets field value
func (o *AdjustmentDetail) SetWarehouseBin(v WarehouseBinReference) {
	o.WarehouseBin = v
}

// GetQuantityAdjusted returns the QuantityAdjusted field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *AdjustmentDetail) GetQuantityAdjusted() int32 {
	if o == nil || o.QuantityAdjusted.Get() == nil {
		var ret int32
		return ret
	}

	return *o.QuantityAdjusted.Get()
}

// GetQuantityAdjustedOk returns a tuple with the QuantityAdjusted field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdjustmentDetail) GetQuantityAdjustedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityAdjusted.Get(), o.QuantityAdjusted.IsSet()
}

// SetQuantityAdjusted sets field value
func (o *AdjustmentDetail) SetQuantityAdjusted(v int32) {
	o.QuantityAdjusted.Set(&v)
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *AdjustmentDetail) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *AdjustmentDetail) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetAdjustment returns the Adjustment field value if set, zero value otherwise.
func (o *AdjustmentDetail) GetAdjustment() AdjustmentReference {
	if o == nil || IsNil(o.Adjustment) {
		var ret AdjustmentReference
		return ret
	}
	return *o.Adjustment
}

// GetAdjustmentOk returns a tuple with the Adjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetAdjustmentOk() (*AdjustmentReference, bool) {
	if o == nil || IsNil(o.Adjustment) {
		return nil, false
	}
	return o.Adjustment, true
}

// HasAdjustment returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasAdjustment() bool {
	if o != nil && !IsNil(o.Adjustment) {
		return true
	}

	return false
}

// SetAdjustment gets a reference to the given AdjustmentReference and assigns it to the Adjustment field.
func (o *AdjustmentDetail) SetAdjustment(v AdjustmentReference) {
	o.Adjustment = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AdjustmentDetail) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetail) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AdjustmentDetail) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AdjustmentDetail) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AdjustmentDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdjustmentDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["catalogItem"] = o.CatalogItem
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.QuantityOnHand.IsSet() {
		toSerialize["quantityOnHand"] = o.QuantityOnHand.Get()
	}
	if o.UnitCost.IsSet() {
		toSerialize["unitCost"] = o.UnitCost.Get()
	}
	toSerialize["warehouse"] = o.Warehouse
	toSerialize["warehouseBin"] = o.WarehouseBin
	toSerialize["quantityAdjusted"] = o.QuantityAdjusted.Get()
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Adjustment) {
		toSerialize["adjustment"] = o.Adjustment
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AdjustmentDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalogItem",
		"warehouse",
		"warehouseBin",
		"quantityAdjusted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdjustmentDetail := _AdjustmentDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdjustmentDetail)

	if err != nil {
		return err
	}

	*o = AdjustmentDetail(varAdjustmentDetail)

	return err
}

type NullableAdjustmentDetail struct {
	value *AdjustmentDetail
	isSet bool
}

func (v NullableAdjustmentDetail) Get() *AdjustmentDetail {
	return v.value
}

func (v *NullableAdjustmentDetail) Set(val *AdjustmentDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAdjustmentDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAdjustmentDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdjustmentDetail(val *AdjustmentDetail) *NullableAdjustmentDetail {
	return &NullableAdjustmentDetail{value: val, isSet: true}
}

func (v NullableAdjustmentDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdjustmentDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


