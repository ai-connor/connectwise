/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AgreementBatchSetup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementBatchSetup{}

// AgreementBatchSetup struct for AgreementBatchSetup
type AgreementBatchSetup struct {
	Id *int32 `json:"id,omitempty"`
	NextRunDate time.Time `json:"nextRunDate"`
	DaysInAdvance NullableInt32 `json:"daysInAdvance"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AgreementBatchSetup AgreementBatchSetup

// NewAgreementBatchSetup instantiates a new AgreementBatchSetup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementBatchSetup(nextRunDate time.Time, daysInAdvance NullableInt32) *AgreementBatchSetup {
	this := AgreementBatchSetup{}
	this.NextRunDate = nextRunDate
	this.DaysInAdvance = daysInAdvance
	return &this
}

// NewAgreementBatchSetupWithDefaults instantiates a new AgreementBatchSetup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementBatchSetupWithDefaults() *AgreementBatchSetup {
	this := AgreementBatchSetup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementBatchSetup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementBatchSetup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementBatchSetup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementBatchSetup) SetId(v int32) {
	o.Id = &v
}

// GetNextRunDate returns the NextRunDate field value
func (o *AgreementBatchSetup) GetNextRunDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NextRunDate
}

// GetNextRunDateOk returns a tuple with the NextRunDate field value
// and a boolean to check if the value has been set.
func (o *AgreementBatchSetup) GetNextRunDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextRunDate, true
}

// SetNextRunDate sets field value
func (o *AgreementBatchSetup) SetNextRunDate(v time.Time) {
	o.NextRunDate = v
}

// GetDaysInAdvance returns the DaysInAdvance field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *AgreementBatchSetup) GetDaysInAdvance() int32 {
	if o == nil || o.DaysInAdvance.Get() == nil {
		var ret int32
		return ret
	}

	return *o.DaysInAdvance.Get()
}

// GetDaysInAdvanceOk returns a tuple with the DaysInAdvance field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementBatchSetup) GetDaysInAdvanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysInAdvance.Get(), o.DaysInAdvance.IsSet()
}

// SetDaysInAdvance sets field value
func (o *AgreementBatchSetup) SetDaysInAdvance(v int32) {
	o.DaysInAdvance.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementBatchSetup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementBatchSetup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementBatchSetup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementBatchSetup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementBatchSetup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementBatchSetup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["nextRunDate"] = o.NextRunDate
	toSerialize["daysInAdvance"] = o.DaysInAdvance.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementBatchSetup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nextRunDate",
		"daysInAdvance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementBatchSetup := _AgreementBatchSetup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementBatchSetup)

	if err != nil {
		return err
	}

	*o = AgreementBatchSetup(varAgreementBatchSetup)

	return err
}

type NullableAgreementBatchSetup struct {
	value *AgreementBatchSetup
	isSet bool
}

func (v NullableAgreementBatchSetup) Get() *AgreementBatchSetup {
	return v.value
}

func (v *NullableAgreementBatchSetup) Set(val *AgreementBatchSetup) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementBatchSetup) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementBatchSetup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementBatchSetup(val *AgreementBatchSetup) *NullableAgreementBatchSetup {
	return &NullableAgreementBatchSetup{value: val, isSet: true}
}

func (v NullableAgreementBatchSetup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementBatchSetup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


