/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the AgreementRecap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementRecap{}

// AgreementRecap struct for AgreementRecap
type AgreementRecap struct {
	Id *int32 `json:"id,omitempty"`
	AdjustmentAmount *float64 `json:"adjustmentAmount,omitempty"`
	AgreementStatus *string `json:"agreementStatus,omitempty"`
	Name *string `json:"name,omitempty"`
	AvailableAmount *float64 `json:"availableAmount,omitempty"`
	CompanyName *string `json:"companyName,omitempty"`
	IsUnlimited *string `json:"isUnlimited,omitempty"`
	LastInvoiceAmount *string `json:"lastInvoiceAmount,omitempty"`
	LastInvoiceDate *string `json:"lastInvoiceDate,omitempty"`
	LastInvoiceNumber *string `json:"lastInvoiceNumber,omitempty"`
	NextInvoiceAmount *float64 `json:"nextInvoiceAmount,omitempty"`
	NextInvoiceDate *string `json:"nextInvoiceDate,omitempty"`
	OverrunAmount *float64 `json:"overrunAmount,omitempty"`
	RemainingAmount *float64 `json:"remainingAmount,omitempty"`
	StartingAmount *float64 `json:"startingAmount,omitempty"`
	UnbilledOverageAmount *float64 `json:"unbilledOverageAmount,omitempty"`
	UnbilledPeriods *int32 `json:"unbilledPeriods,omitempty"`
	UsedAmount *float64 `json:"usedAmount,omitempty"`
}

// NewAgreementRecap instantiates a new AgreementRecap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementRecap() *AgreementRecap {
	this := AgreementRecap{}
	return &this
}

// NewAgreementRecapWithDefaults instantiates a new AgreementRecap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementRecapWithDefaults() *AgreementRecap {
	this := AgreementRecap{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementRecap) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementRecap) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementRecap) SetId(v int32) {
	o.Id = &v
}

// GetAdjustmentAmount returns the AdjustmentAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetAdjustmentAmount() float64 {
	if o == nil || IsNil(o.AdjustmentAmount) {
		var ret float64
		return ret
	}
	return *o.AdjustmentAmount
}

// GetAdjustmentAmountOk returns a tuple with the AdjustmentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetAdjustmentAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.AdjustmentAmount) {
		return nil, false
	}
	return o.AdjustmentAmount, true
}

// HasAdjustmentAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasAdjustmentAmount() bool {
	if o != nil && !IsNil(o.AdjustmentAmount) {
		return true
	}

	return false
}

// SetAdjustmentAmount gets a reference to the given float64 and assigns it to the AdjustmentAmount field.
func (o *AgreementRecap) SetAdjustmentAmount(v float64) {
	o.AdjustmentAmount = &v
}

// GetAgreementStatus returns the AgreementStatus field value if set, zero value otherwise.
func (o *AgreementRecap) GetAgreementStatus() string {
	if o == nil || IsNil(o.AgreementStatus) {
		var ret string
		return ret
	}
	return *o.AgreementStatus
}

// GetAgreementStatusOk returns a tuple with the AgreementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetAgreementStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementStatus) {
		return nil, false
	}
	return o.AgreementStatus, true
}

// HasAgreementStatus returns a boolean if a field has been set.
func (o *AgreementRecap) HasAgreementStatus() bool {
	if o != nil && !IsNil(o.AgreementStatus) {
		return true
	}

	return false
}

// SetAgreementStatus gets a reference to the given string and assigns it to the AgreementStatus field.
func (o *AgreementRecap) SetAgreementStatus(v string) {
	o.AgreementStatus = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AgreementRecap) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AgreementRecap) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AgreementRecap) SetName(v string) {
	o.Name = &v
}

// GetAvailableAmount returns the AvailableAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetAvailableAmount() float64 {
	if o == nil || IsNil(o.AvailableAmount) {
		var ret float64
		return ret
	}
	return *o.AvailableAmount
}

// GetAvailableAmountOk returns a tuple with the AvailableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetAvailableAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.AvailableAmount) {
		return nil, false
	}
	return o.AvailableAmount, true
}

// HasAvailableAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasAvailableAmount() bool {
	if o != nil && !IsNil(o.AvailableAmount) {
		return true
	}

	return false
}

// SetAvailableAmount gets a reference to the given float64 and assigns it to the AvailableAmount field.
func (o *AgreementRecap) SetAvailableAmount(v float64) {
	o.AvailableAmount = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *AgreementRecap) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *AgreementRecap) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *AgreementRecap) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetIsUnlimited returns the IsUnlimited field value if set, zero value otherwise.
func (o *AgreementRecap) GetIsUnlimited() string {
	if o == nil || IsNil(o.IsUnlimited) {
		var ret string
		return ret
	}
	return *o.IsUnlimited
}

// GetIsUnlimitedOk returns a tuple with the IsUnlimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetIsUnlimitedOk() (*string, bool) {
	if o == nil || IsNil(o.IsUnlimited) {
		return nil, false
	}
	return o.IsUnlimited, true
}

// HasIsUnlimited returns a boolean if a field has been set.
func (o *AgreementRecap) HasIsUnlimited() bool {
	if o != nil && !IsNil(o.IsUnlimited) {
		return true
	}

	return false
}

// SetIsUnlimited gets a reference to the given string and assigns it to the IsUnlimited field.
func (o *AgreementRecap) SetIsUnlimited(v string) {
	o.IsUnlimited = &v
}

// GetLastInvoiceAmount returns the LastInvoiceAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetLastInvoiceAmount() string {
	if o == nil || IsNil(o.LastInvoiceAmount) {
		var ret string
		return ret
	}
	return *o.LastInvoiceAmount
}

// GetLastInvoiceAmountOk returns a tuple with the LastInvoiceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetLastInvoiceAmountOk() (*string, bool) {
	if o == nil || IsNil(o.LastInvoiceAmount) {
		return nil, false
	}
	return o.LastInvoiceAmount, true
}

// HasLastInvoiceAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasLastInvoiceAmount() bool {
	if o != nil && !IsNil(o.LastInvoiceAmount) {
		return true
	}

	return false
}

// SetLastInvoiceAmount gets a reference to the given string and assigns it to the LastInvoiceAmount field.
func (o *AgreementRecap) SetLastInvoiceAmount(v string) {
	o.LastInvoiceAmount = &v
}

// GetLastInvoiceDate returns the LastInvoiceDate field value if set, zero value otherwise.
func (o *AgreementRecap) GetLastInvoiceDate() string {
	if o == nil || IsNil(o.LastInvoiceDate) {
		var ret string
		return ret
	}
	return *o.LastInvoiceDate
}

// GetLastInvoiceDateOk returns a tuple with the LastInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetLastInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastInvoiceDate) {
		return nil, false
	}
	return o.LastInvoiceDate, true
}

// HasLastInvoiceDate returns a boolean if a field has been set.
func (o *AgreementRecap) HasLastInvoiceDate() bool {
	if o != nil && !IsNil(o.LastInvoiceDate) {
		return true
	}

	return false
}

// SetLastInvoiceDate gets a reference to the given string and assigns it to the LastInvoiceDate field.
func (o *AgreementRecap) SetLastInvoiceDate(v string) {
	o.LastInvoiceDate = &v
}

// GetLastInvoiceNumber returns the LastInvoiceNumber field value if set, zero value otherwise.
func (o *AgreementRecap) GetLastInvoiceNumber() string {
	if o == nil || IsNil(o.LastInvoiceNumber) {
		var ret string
		return ret
	}
	return *o.LastInvoiceNumber
}

// GetLastInvoiceNumberOk returns a tuple with the LastInvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetLastInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LastInvoiceNumber) {
		return nil, false
	}
	return o.LastInvoiceNumber, true
}

// HasLastInvoiceNumber returns a boolean if a field has been set.
func (o *AgreementRecap) HasLastInvoiceNumber() bool {
	if o != nil && !IsNil(o.LastInvoiceNumber) {
		return true
	}

	return false
}

// SetLastInvoiceNumber gets a reference to the given string and assigns it to the LastInvoiceNumber field.
func (o *AgreementRecap) SetLastInvoiceNumber(v string) {
	o.LastInvoiceNumber = &v
}

// GetNextInvoiceAmount returns the NextInvoiceAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetNextInvoiceAmount() float64 {
	if o == nil || IsNil(o.NextInvoiceAmount) {
		var ret float64
		return ret
	}
	return *o.NextInvoiceAmount
}

// GetNextInvoiceAmountOk returns a tuple with the NextInvoiceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetNextInvoiceAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.NextInvoiceAmount) {
		return nil, false
	}
	return o.NextInvoiceAmount, true
}

// HasNextInvoiceAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasNextInvoiceAmount() bool {
	if o != nil && !IsNil(o.NextInvoiceAmount) {
		return true
	}

	return false
}

// SetNextInvoiceAmount gets a reference to the given float64 and assigns it to the NextInvoiceAmount field.
func (o *AgreementRecap) SetNextInvoiceAmount(v float64) {
	o.NextInvoiceAmount = &v
}

// GetNextInvoiceDate returns the NextInvoiceDate field value if set, zero value otherwise.
func (o *AgreementRecap) GetNextInvoiceDate() string {
	if o == nil || IsNil(o.NextInvoiceDate) {
		var ret string
		return ret
	}
	return *o.NextInvoiceDate
}

// GetNextInvoiceDateOk returns a tuple with the NextInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetNextInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextInvoiceDate) {
		return nil, false
	}
	return o.NextInvoiceDate, true
}

// HasNextInvoiceDate returns a boolean if a field has been set.
func (o *AgreementRecap) HasNextInvoiceDate() bool {
	if o != nil && !IsNil(o.NextInvoiceDate) {
		return true
	}

	return false
}

// SetNextInvoiceDate gets a reference to the given string and assigns it to the NextInvoiceDate field.
func (o *AgreementRecap) SetNextInvoiceDate(v string) {
	o.NextInvoiceDate = &v
}

// GetOverrunAmount returns the OverrunAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetOverrunAmount() float64 {
	if o == nil || IsNil(o.OverrunAmount) {
		var ret float64
		return ret
	}
	return *o.OverrunAmount
}

// GetOverrunAmountOk returns a tuple with the OverrunAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetOverrunAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.OverrunAmount) {
		return nil, false
	}
	return o.OverrunAmount, true
}

// HasOverrunAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasOverrunAmount() bool {
	if o != nil && !IsNil(o.OverrunAmount) {
		return true
	}

	return false
}

// SetOverrunAmount gets a reference to the given float64 and assigns it to the OverrunAmount field.
func (o *AgreementRecap) SetOverrunAmount(v float64) {
	o.OverrunAmount = &v
}

// GetRemainingAmount returns the RemainingAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetRemainingAmount() float64 {
	if o == nil || IsNil(o.RemainingAmount) {
		var ret float64
		return ret
	}
	return *o.RemainingAmount
}

// GetRemainingAmountOk returns a tuple with the RemainingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetRemainingAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.RemainingAmount) {
		return nil, false
	}
	return o.RemainingAmount, true
}

// HasRemainingAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasRemainingAmount() bool {
	if o != nil && !IsNil(o.RemainingAmount) {
		return true
	}

	return false
}

// SetRemainingAmount gets a reference to the given float64 and assigns it to the RemainingAmount field.
func (o *AgreementRecap) SetRemainingAmount(v float64) {
	o.RemainingAmount = &v
}

// GetStartingAmount returns the StartingAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetStartingAmount() float64 {
	if o == nil || IsNil(o.StartingAmount) {
		var ret float64
		return ret
	}
	return *o.StartingAmount
}

// GetStartingAmountOk returns a tuple with the StartingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetStartingAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.StartingAmount) {
		return nil, false
	}
	return o.StartingAmount, true
}

// HasStartingAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasStartingAmount() bool {
	if o != nil && !IsNil(o.StartingAmount) {
		return true
	}

	return false
}

// SetStartingAmount gets a reference to the given float64 and assigns it to the StartingAmount field.
func (o *AgreementRecap) SetStartingAmount(v float64) {
	o.StartingAmount = &v
}

// GetUnbilledOverageAmount returns the UnbilledOverageAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetUnbilledOverageAmount() float64 {
	if o == nil || IsNil(o.UnbilledOverageAmount) {
		var ret float64
		return ret
	}
	return *o.UnbilledOverageAmount
}

// GetUnbilledOverageAmountOk returns a tuple with the UnbilledOverageAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetUnbilledOverageAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.UnbilledOverageAmount) {
		return nil, false
	}
	return o.UnbilledOverageAmount, true
}

// HasUnbilledOverageAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasUnbilledOverageAmount() bool {
	if o != nil && !IsNil(o.UnbilledOverageAmount) {
		return true
	}

	return false
}

// SetUnbilledOverageAmount gets a reference to the given float64 and assigns it to the UnbilledOverageAmount field.
func (o *AgreementRecap) SetUnbilledOverageAmount(v float64) {
	o.UnbilledOverageAmount = &v
}

// GetUnbilledPeriods returns the UnbilledPeriods field value if set, zero value otherwise.
func (o *AgreementRecap) GetUnbilledPeriods() int32 {
	if o == nil || IsNil(o.UnbilledPeriods) {
		var ret int32
		return ret
	}
	return *o.UnbilledPeriods
}

// GetUnbilledPeriodsOk returns a tuple with the UnbilledPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetUnbilledPeriodsOk() (*int32, bool) {
	if o == nil || IsNil(o.UnbilledPeriods) {
		return nil, false
	}
	return o.UnbilledPeriods, true
}

// HasUnbilledPeriods returns a boolean if a field has been set.
func (o *AgreementRecap) HasUnbilledPeriods() bool {
	if o != nil && !IsNil(o.UnbilledPeriods) {
		return true
	}

	return false
}

// SetUnbilledPeriods gets a reference to the given int32 and assigns it to the UnbilledPeriods field.
func (o *AgreementRecap) SetUnbilledPeriods(v int32) {
	o.UnbilledPeriods = &v
}

// GetUsedAmount returns the UsedAmount field value if set, zero value otherwise.
func (o *AgreementRecap) GetUsedAmount() float64 {
	if o == nil || IsNil(o.UsedAmount) {
		var ret float64
		return ret
	}
	return *o.UsedAmount
}

// GetUsedAmountOk returns a tuple with the UsedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecap) GetUsedAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.UsedAmount) {
		return nil, false
	}
	return o.UsedAmount, true
}

// HasUsedAmount returns a boolean if a field has been set.
func (o *AgreementRecap) HasUsedAmount() bool {
	if o != nil && !IsNil(o.UsedAmount) {
		return true
	}

	return false
}

// SetUsedAmount gets a reference to the given float64 and assigns it to the UsedAmount field.
func (o *AgreementRecap) SetUsedAmount(v float64) {
	o.UsedAmount = &v
}

func (o AgreementRecap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementRecap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AdjustmentAmount) {
		toSerialize["adjustmentAmount"] = o.AdjustmentAmount
	}
	if !IsNil(o.AgreementStatus) {
		toSerialize["agreementStatus"] = o.AgreementStatus
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AvailableAmount) {
		toSerialize["availableAmount"] = o.AvailableAmount
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if !IsNil(o.IsUnlimited) {
		toSerialize["isUnlimited"] = o.IsUnlimited
	}
	if !IsNil(o.LastInvoiceAmount) {
		toSerialize["lastInvoiceAmount"] = o.LastInvoiceAmount
	}
	if !IsNil(o.LastInvoiceDate) {
		toSerialize["lastInvoiceDate"] = o.LastInvoiceDate
	}
	if !IsNil(o.LastInvoiceNumber) {
		toSerialize["lastInvoiceNumber"] = o.LastInvoiceNumber
	}
	if !IsNil(o.NextInvoiceAmount) {
		toSerialize["nextInvoiceAmount"] = o.NextInvoiceAmount
	}
	if !IsNil(o.NextInvoiceDate) {
		toSerialize["nextInvoiceDate"] = o.NextInvoiceDate
	}
	if !IsNil(o.OverrunAmount) {
		toSerialize["overrunAmount"] = o.OverrunAmount
	}
	if !IsNil(o.RemainingAmount) {
		toSerialize["remainingAmount"] = o.RemainingAmount
	}
	if !IsNil(o.StartingAmount) {
		toSerialize["startingAmount"] = o.StartingAmount
	}
	if !IsNil(o.UnbilledOverageAmount) {
		toSerialize["unbilledOverageAmount"] = o.UnbilledOverageAmount
	}
	if !IsNil(o.UnbilledPeriods) {
		toSerialize["unbilledPeriods"] = o.UnbilledPeriods
	}
	if !IsNil(o.UsedAmount) {
		toSerialize["usedAmount"] = o.UsedAmount
	}
	return toSerialize, nil
}

type NullableAgreementRecap struct {
	value *AgreementRecap
	isSet bool
}

func (v NullableAgreementRecap) Get() *AgreementRecap {
	return v.value
}

func (v *NullableAgreementRecap) Set(val *AgreementRecap) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementRecap) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementRecap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementRecap(val *AgreementRecap) *NullableAgreementRecap {
	return &NullableAgreementRecap{value: val, isSet: true}
}

func (v NullableAgreementRecap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementRecap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


