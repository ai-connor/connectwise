/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the AgreementRecurringParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementRecurringParameters{}

// AgreementRecurringParameters struct for AgreementRecurringParameters
type AgreementRecurringParameters struct {
	BillingCycle *GenericNameIdDTO `json:"billingCycle,omitempty"`
	CycleBase *GenericNameIdDTO `json:"cycleBase,omitempty"`
	AGRAmount NullableFloat64 `json:"aGRAmount,omitempty"`
	Taxable *bool `json:"taxable,omitempty"`
	ChildrenAmount *float64 `json:"childrenAmount,omitempty"`
	AdditionsAmount *float64 `json:"additionsAmount,omitempty"`
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	AGRProrate NullableFloat64 `json:"aGRProrate,omitempty"`
	BillStartDate *string `json:"billStartDate,omitempty"`
	TaxCode *GenericNameIdDTO `json:"taxCode,omitempty"`
	Terms *GenericNameIdDTO `json:"terms,omitempty"`
	ProrateFlag *bool `json:"prorateFlag,omitempty"`
	InvoiceProratedAdditionsFlag *bool `json:"invoiceProratedAdditionsFlag,omitempty"`
	RestrictDownpayment *bool `json:"restrictDownpayment,omitempty"`
	Currency *GenericNameIdDTO `json:"currency,omitempty"`
	AutoInvoiceFlag *bool `json:"autoInvoiceFlag,omitempty"`
	UserDefinedFieldValues []UserDefinedFieldValueModel `json:"userDefinedFieldValues,omitempty"`
}

// NewAgreementRecurringParameters instantiates a new AgreementRecurringParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementRecurringParameters() *AgreementRecurringParameters {
	this := AgreementRecurringParameters{}
	return &this
}

// NewAgreementRecurringParametersWithDefaults instantiates a new AgreementRecurringParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementRecurringParametersWithDefaults() *AgreementRecurringParameters {
	this := AgreementRecurringParameters{}
	return &this
}

// GetBillingCycle returns the BillingCycle field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetBillingCycle() GenericNameIdDTO {
	if o == nil || IsNil(o.BillingCycle) {
		var ret GenericNameIdDTO
		return ret
	}
	return *o.BillingCycle
}

// GetBillingCycleOk returns a tuple with the BillingCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetBillingCycleOk() (*GenericNameIdDTO, bool) {
	if o == nil || IsNil(o.BillingCycle) {
		return nil, false
	}
	return o.BillingCycle, true
}

// HasBillingCycle returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasBillingCycle() bool {
	if o != nil && !IsNil(o.BillingCycle) {
		return true
	}

	return false
}

// SetBillingCycle gets a reference to the given GenericNameIdDTO and assigns it to the BillingCycle field.
func (o *AgreementRecurringParameters) SetBillingCycle(v GenericNameIdDTO) {
	o.BillingCycle = &v
}

// GetCycleBase returns the CycleBase field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetCycleBase() GenericNameIdDTO {
	if o == nil || IsNil(o.CycleBase) {
		var ret GenericNameIdDTO
		return ret
	}
	return *o.CycleBase
}

// GetCycleBaseOk returns a tuple with the CycleBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetCycleBaseOk() (*GenericNameIdDTO, bool) {
	if o == nil || IsNil(o.CycleBase) {
		return nil, false
	}
	return o.CycleBase, true
}

// HasCycleBase returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasCycleBase() bool {
	if o != nil && !IsNil(o.CycleBase) {
		return true
	}

	return false
}

// SetCycleBase gets a reference to the given GenericNameIdDTO and assigns it to the CycleBase field.
func (o *AgreementRecurringParameters) SetCycleBase(v GenericNameIdDTO) {
	o.CycleBase = &v
}

// GetAGRAmount returns the AGRAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementRecurringParameters) GetAGRAmount() float64 {
	if o == nil || IsNil(o.AGRAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.AGRAmount.Get()
}

// GetAGRAmountOk returns a tuple with the AGRAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementRecurringParameters) GetAGRAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AGRAmount.Get(), o.AGRAmount.IsSet()
}

// HasAGRAmount returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasAGRAmount() bool {
	if o != nil && o.AGRAmount.IsSet() {
		return true
	}

	return false
}

// SetAGRAmount gets a reference to the given NullableFloat64 and assigns it to the AGRAmount field.
func (o *AgreementRecurringParameters) SetAGRAmount(v float64) {
	o.AGRAmount.Set(&v)
}
// SetAGRAmountNil sets the value for AGRAmount to be an explicit nil
func (o *AgreementRecurringParameters) SetAGRAmountNil() {
	o.AGRAmount.Set(nil)
}

// UnsetAGRAmount ensures that no value is present for AGRAmount, not even an explicit nil
func (o *AgreementRecurringParameters) UnsetAGRAmount() {
	o.AGRAmount.Unset()
}

// GetTaxable returns the Taxable field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable) {
		var ret bool
		return ret
	}
	return *o.Taxable
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.Taxable) {
		return nil, false
	}
	return o.Taxable, true
}

// HasTaxable returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasTaxable() bool {
	if o != nil && !IsNil(o.Taxable) {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given bool and assigns it to the Taxable field.
func (o *AgreementRecurringParameters) SetTaxable(v bool) {
	o.Taxable = &v
}

// GetChildrenAmount returns the ChildrenAmount field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetChildrenAmount() float64 {
	if o == nil || IsNil(o.ChildrenAmount) {
		var ret float64
		return ret
	}
	return *o.ChildrenAmount
}

// GetChildrenAmountOk returns a tuple with the ChildrenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetChildrenAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.ChildrenAmount) {
		return nil, false
	}
	return o.ChildrenAmount, true
}

// HasChildrenAmount returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasChildrenAmount() bool {
	if o != nil && !IsNil(o.ChildrenAmount) {
		return true
	}

	return false
}

// SetChildrenAmount gets a reference to the given float64 and assigns it to the ChildrenAmount field.
func (o *AgreementRecurringParameters) SetChildrenAmount(v float64) {
	o.ChildrenAmount = &v
}

// GetAdditionsAmount returns the AdditionsAmount field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetAdditionsAmount() float64 {
	if o == nil || IsNil(o.AdditionsAmount) {
		var ret float64
		return ret
	}
	return *o.AdditionsAmount
}

// GetAdditionsAmountOk returns a tuple with the AdditionsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetAdditionsAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.AdditionsAmount) {
		return nil, false
	}
	return o.AdditionsAmount, true
}

// HasAdditionsAmount returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasAdditionsAmount() bool {
	if o != nil && !IsNil(o.AdditionsAmount) {
		return true
	}

	return false
}

// SetAdditionsAmount gets a reference to the given float64 and assigns it to the AdditionsAmount field.
func (o *AgreementRecurringParameters) SetAdditionsAmount(v float64) {
	o.AdditionsAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetTotalAmount() float64 {
	if o == nil || IsNil(o.TotalAmount) {
		var ret float64
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetTotalAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float64 and assigns it to the TotalAmount field.
func (o *AgreementRecurringParameters) SetTotalAmount(v float64) {
	o.TotalAmount = &v
}

// GetAGRProrate returns the AGRProrate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementRecurringParameters) GetAGRProrate() float64 {
	if o == nil || IsNil(o.AGRProrate.Get()) {
		var ret float64
		return ret
	}
	return *o.AGRProrate.Get()
}

// GetAGRProrateOk returns a tuple with the AGRProrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementRecurringParameters) GetAGRProrateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AGRProrate.Get(), o.AGRProrate.IsSet()
}

// HasAGRProrate returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasAGRProrate() bool {
	if o != nil && o.AGRProrate.IsSet() {
		return true
	}

	return false
}

// SetAGRProrate gets a reference to the given NullableFloat64 and assigns it to the AGRProrate field.
func (o *AgreementRecurringParameters) SetAGRProrate(v float64) {
	o.AGRProrate.Set(&v)
}
// SetAGRProrateNil sets the value for AGRProrate to be an explicit nil
func (o *AgreementRecurringParameters) SetAGRProrateNil() {
	o.AGRProrate.Set(nil)
}

// UnsetAGRProrate ensures that no value is present for AGRProrate, not even an explicit nil
func (o *AgreementRecurringParameters) UnsetAGRProrate() {
	o.AGRProrate.Unset()
}

// GetBillStartDate returns the BillStartDate field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetBillStartDate() string {
	if o == nil || IsNil(o.BillStartDate) {
		var ret string
		return ret
	}
	return *o.BillStartDate
}

// GetBillStartDateOk returns a tuple with the BillStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetBillStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.BillStartDate) {
		return nil, false
	}
	return o.BillStartDate, true
}

// HasBillStartDate returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasBillStartDate() bool {
	if o != nil && !IsNil(o.BillStartDate) {
		return true
	}

	return false
}

// SetBillStartDate gets a reference to the given string and assigns it to the BillStartDate field.
func (o *AgreementRecurringParameters) SetBillStartDate(v string) {
	o.BillStartDate = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetTaxCode() GenericNameIdDTO {
	if o == nil || IsNil(o.TaxCode) {
		var ret GenericNameIdDTO
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetTaxCodeOk() (*GenericNameIdDTO, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given GenericNameIdDTO and assigns it to the TaxCode field.
func (o *AgreementRecurringParameters) SetTaxCode(v GenericNameIdDTO) {
	o.TaxCode = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetTerms() GenericNameIdDTO {
	if o == nil || IsNil(o.Terms) {
		var ret GenericNameIdDTO
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetTermsOk() (*GenericNameIdDTO, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given GenericNameIdDTO and assigns it to the Terms field.
func (o *AgreementRecurringParameters) SetTerms(v GenericNameIdDTO) {
	o.Terms = &v
}

// GetProrateFlag returns the ProrateFlag field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetProrateFlag() bool {
	if o == nil || IsNil(o.ProrateFlag) {
		var ret bool
		return ret
	}
	return *o.ProrateFlag
}

// GetProrateFlagOk returns a tuple with the ProrateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetProrateFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ProrateFlag) {
		return nil, false
	}
	return o.ProrateFlag, true
}

// HasProrateFlag returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasProrateFlag() bool {
	if o != nil && !IsNil(o.ProrateFlag) {
		return true
	}

	return false
}

// SetProrateFlag gets a reference to the given bool and assigns it to the ProrateFlag field.
func (o *AgreementRecurringParameters) SetProrateFlag(v bool) {
	o.ProrateFlag = &v
}

// GetInvoiceProratedAdditionsFlag returns the InvoiceProratedAdditionsFlag field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetInvoiceProratedAdditionsFlag() bool {
	if o == nil || IsNil(o.InvoiceProratedAdditionsFlag) {
		var ret bool
		return ret
	}
	return *o.InvoiceProratedAdditionsFlag
}

// GetInvoiceProratedAdditionsFlagOk returns a tuple with the InvoiceProratedAdditionsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetInvoiceProratedAdditionsFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.InvoiceProratedAdditionsFlag) {
		return nil, false
	}
	return o.InvoiceProratedAdditionsFlag, true
}

// HasInvoiceProratedAdditionsFlag returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasInvoiceProratedAdditionsFlag() bool {
	if o != nil && !IsNil(o.InvoiceProratedAdditionsFlag) {
		return true
	}

	return false
}

// SetInvoiceProratedAdditionsFlag gets a reference to the given bool and assigns it to the InvoiceProratedAdditionsFlag field.
func (o *AgreementRecurringParameters) SetInvoiceProratedAdditionsFlag(v bool) {
	o.InvoiceProratedAdditionsFlag = &v
}

// GetRestrictDownpayment returns the RestrictDownpayment field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetRestrictDownpayment() bool {
	if o == nil || IsNil(o.RestrictDownpayment) {
		var ret bool
		return ret
	}
	return *o.RestrictDownpayment
}

// GetRestrictDownpaymentOk returns a tuple with the RestrictDownpayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetRestrictDownpaymentOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictDownpayment) {
		return nil, false
	}
	return o.RestrictDownpayment, true
}

// HasRestrictDownpayment returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasRestrictDownpayment() bool {
	if o != nil && !IsNil(o.RestrictDownpayment) {
		return true
	}

	return false
}

// SetRestrictDownpayment gets a reference to the given bool and assigns it to the RestrictDownpayment field.
func (o *AgreementRecurringParameters) SetRestrictDownpayment(v bool) {
	o.RestrictDownpayment = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetCurrency() GenericNameIdDTO {
	if o == nil || IsNil(o.Currency) {
		var ret GenericNameIdDTO
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetCurrencyOk() (*GenericNameIdDTO, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given GenericNameIdDTO and assigns it to the Currency field.
func (o *AgreementRecurringParameters) SetCurrency(v GenericNameIdDTO) {
	o.Currency = &v
}

// GetAutoInvoiceFlag returns the AutoInvoiceFlag field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetAutoInvoiceFlag() bool {
	if o == nil || IsNil(o.AutoInvoiceFlag) {
		var ret bool
		return ret
	}
	return *o.AutoInvoiceFlag
}

// GetAutoInvoiceFlagOk returns a tuple with the AutoInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetAutoInvoiceFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoInvoiceFlag) {
		return nil, false
	}
	return o.AutoInvoiceFlag, true
}

// HasAutoInvoiceFlag returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasAutoInvoiceFlag() bool {
	if o != nil && !IsNil(o.AutoInvoiceFlag) {
		return true
	}

	return false
}

// SetAutoInvoiceFlag gets a reference to the given bool and assigns it to the AutoInvoiceFlag field.
func (o *AgreementRecurringParameters) SetAutoInvoiceFlag(v bool) {
	o.AutoInvoiceFlag = &v
}

// GetUserDefinedFieldValues returns the UserDefinedFieldValues field value if set, zero value otherwise.
func (o *AgreementRecurringParameters) GetUserDefinedFieldValues() []UserDefinedFieldValueModel {
	if o == nil || IsNil(o.UserDefinedFieldValues) {
		var ret []UserDefinedFieldValueModel
		return ret
	}
	return o.UserDefinedFieldValues
}

// GetUserDefinedFieldValuesOk returns a tuple with the UserDefinedFieldValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementRecurringParameters) GetUserDefinedFieldValuesOk() ([]UserDefinedFieldValueModel, bool) {
	if o == nil || IsNil(o.UserDefinedFieldValues) {
		return nil, false
	}
	return o.UserDefinedFieldValues, true
}

// HasUserDefinedFieldValues returns a boolean if a field has been set.
func (o *AgreementRecurringParameters) HasUserDefinedFieldValues() bool {
	if o != nil && !IsNil(o.UserDefinedFieldValues) {
		return true
	}

	return false
}

// SetUserDefinedFieldValues gets a reference to the given []UserDefinedFieldValueModel and assigns it to the UserDefinedFieldValues field.
func (o *AgreementRecurringParameters) SetUserDefinedFieldValues(v []UserDefinedFieldValueModel) {
	o.UserDefinedFieldValues = v
}

func (o AgreementRecurringParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementRecurringParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingCycle) {
		toSerialize["billingCycle"] = o.BillingCycle
	}
	if !IsNil(o.CycleBase) {
		toSerialize["cycleBase"] = o.CycleBase
	}
	if o.AGRAmount.IsSet() {
		toSerialize["aGRAmount"] = o.AGRAmount.Get()
	}
	if !IsNil(o.Taxable) {
		toSerialize["taxable"] = o.Taxable
	}
	if !IsNil(o.ChildrenAmount) {
		toSerialize["childrenAmount"] = o.ChildrenAmount
	}
	if !IsNil(o.AdditionsAmount) {
		toSerialize["additionsAmount"] = o.AdditionsAmount
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if o.AGRProrate.IsSet() {
		toSerialize["aGRProrate"] = o.AGRProrate.Get()
	}
	if !IsNil(o.BillStartDate) {
		toSerialize["billStartDate"] = o.BillStartDate
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.ProrateFlag) {
		toSerialize["prorateFlag"] = o.ProrateFlag
	}
	if !IsNil(o.InvoiceProratedAdditionsFlag) {
		toSerialize["invoiceProratedAdditionsFlag"] = o.InvoiceProratedAdditionsFlag
	}
	if !IsNil(o.RestrictDownpayment) {
		toSerialize["restrictDownpayment"] = o.RestrictDownpayment
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.AutoInvoiceFlag) {
		toSerialize["autoInvoiceFlag"] = o.AutoInvoiceFlag
	}
	if !IsNil(o.UserDefinedFieldValues) {
		toSerialize["userDefinedFieldValues"] = o.UserDefinedFieldValues
	}
	return toSerialize, nil
}

type NullableAgreementRecurringParameters struct {
	value *AgreementRecurringParameters
	isSet bool
}

func (v NullableAgreementRecurringParameters) Get() *AgreementRecurringParameters {
	return v.value
}

func (v *NullableAgreementRecurringParameters) Set(val *AgreementRecurringParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementRecurringParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementRecurringParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementRecurringParameters(val *AgreementRecurringParameters) *NullableAgreementRecurringParameters {
	return &NullableAgreementRecurringParameters{value: val, isSet: true}
}

func (v NullableAgreementRecurringParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementRecurringParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


