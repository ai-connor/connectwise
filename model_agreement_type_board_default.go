/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AgreementTypeBoardDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementTypeBoardDefault{}

// AgreementTypeBoardDefault struct for AgreementTypeBoardDefault
type AgreementTypeBoardDefault struct {
	Id *int32 `json:"id,omitempty"`
	Type *AgreementTypeReference `json:"type,omitempty"`
	Location SystemLocationReference `json:"location"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	ServiceType *ServiceTypeReference `json:"serviceType,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AgreementTypeBoardDefault AgreementTypeBoardDefault

// NewAgreementTypeBoardDefault instantiates a new AgreementTypeBoardDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementTypeBoardDefault(location SystemLocationReference) *AgreementTypeBoardDefault {
	this := AgreementTypeBoardDefault{}
	this.Location = location
	return &this
}

// NewAgreementTypeBoardDefaultWithDefaults instantiates a new AgreementTypeBoardDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementTypeBoardDefaultWithDefaults() *AgreementTypeBoardDefault {
	this := AgreementTypeBoardDefault{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementTypeBoardDefault) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementTypeBoardDefault) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AgreementTypeBoardDefault) GetType() AgreementTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AgreementTypeReference and assigns it to the Type field.
func (o *AgreementTypeBoardDefault) SetType(v AgreementTypeReference) {
	o.Type = &v
}

// GetLocation returns the Location field value
func (o *AgreementTypeBoardDefault) GetLocation() SystemLocationReference {
	if o == nil {
		var ret SystemLocationReference
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *AgreementTypeBoardDefault) SetLocation(v SystemLocationReference) {
	o.Location = v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *AgreementTypeBoardDefault) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *AgreementTypeBoardDefault) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *AgreementTypeBoardDefault) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *AgreementTypeBoardDefault) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *AgreementTypeBoardDefault) GetServiceType() ServiceTypeReference {
	if o == nil || IsNil(o.ServiceType) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetServiceTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given ServiceTypeReference and assigns it to the ServiceType field.
func (o *AgreementTypeBoardDefault) SetServiceType(v ServiceTypeReference) {
	o.ServiceType = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeBoardDefault) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeBoardDefault) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *AgreementTypeBoardDefault) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *AgreementTypeBoardDefault) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *AgreementTypeBoardDefault) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementTypeBoardDefault) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeBoardDefault) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementTypeBoardDefault) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementTypeBoardDefault) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementTypeBoardDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementTypeBoardDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["location"] = o.Location
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementTypeBoardDefault) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementTypeBoardDefault := _AgreementTypeBoardDefault{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementTypeBoardDefault)

	if err != nil {
		return err
	}

	*o = AgreementTypeBoardDefault(varAgreementTypeBoardDefault)

	return err
}

type NullableAgreementTypeBoardDefault struct {
	value *AgreementTypeBoardDefault
	isSet bool
}

func (v NullableAgreementTypeBoardDefault) Get() *AgreementTypeBoardDefault {
	return v.value
}

func (v *NullableAgreementTypeBoardDefault) Set(val *AgreementTypeBoardDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementTypeBoardDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementTypeBoardDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementTypeBoardDefault(val *AgreementTypeBoardDefault) *NullableAgreementTypeBoardDefault {
	return &NullableAgreementTypeBoardDefault{value: val, isSet: true}
}

func (v NullableAgreementTypeBoardDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementTypeBoardDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


