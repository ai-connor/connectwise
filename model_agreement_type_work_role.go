/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AgreementTypeWorkRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgreementTypeWorkRole{}

// AgreementTypeWorkRole struct for AgreementTypeWorkRole
type AgreementTypeWorkRole struct {
	Id *int32 `json:"id,omitempty"`
	Type *AgreementTypeReference `json:"type,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
	EndingDate *time.Time `json:"endingDate,omitempty"`
	Rate NullableFloat64 `json:"rate,omitempty"`
	RateType NullableString `json:"rateType"`
	LimitTo NullableFloat64 `json:"limitTo,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AgreementTypeWorkRole AgreementTypeWorkRole

// NewAgreementTypeWorkRole instantiates a new AgreementTypeWorkRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreementTypeWorkRole(rateType NullableString) *AgreementTypeWorkRole {
	this := AgreementTypeWorkRole{}
	this.RateType = rateType
	return &this
}

// NewAgreementTypeWorkRoleWithDefaults instantiates a new AgreementTypeWorkRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementTypeWorkRoleWithDefaults() *AgreementTypeWorkRole {
	this := AgreementTypeWorkRole{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgreementTypeWorkRole) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRole) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AgreementTypeWorkRole) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AgreementTypeWorkRole) GetType() AgreementTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRole) GetTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AgreementTypeReference and assigns it to the Type field.
func (o *AgreementTypeWorkRole) SetType(v AgreementTypeReference) {
	o.Type = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *AgreementTypeWorkRole) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRole) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *AgreementTypeWorkRole) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *AgreementTypeWorkRole) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRole) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *AgreementTypeWorkRole) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetEndingDate returns the EndingDate field value if set, zero value otherwise.
func (o *AgreementTypeWorkRole) GetEndingDate() time.Time {
	if o == nil || IsNil(o.EndingDate) {
		var ret time.Time
		return ret
	}
	return *o.EndingDate
}

// GetEndingDateOk returns a tuple with the EndingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRole) GetEndingDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndingDate) {
		return nil, false
	}
	return o.EndingDate, true
}

// HasEndingDate returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasEndingDate() bool {
	if o != nil && !IsNil(o.EndingDate) {
		return true
	}

	return false
}

// SetEndingDate gets a reference to the given time.Time and assigns it to the EndingDate field.
func (o *AgreementTypeWorkRole) SetEndingDate(v time.Time) {
	o.EndingDate = &v
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkRole) GetRate() float64 {
	if o == nil || IsNil(o.Rate.Get()) {
		var ret float64
		return ret
	}
	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkRole) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// HasRate returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasRate() bool {
	if o != nil && o.Rate.IsSet() {
		return true
	}

	return false
}

// SetRate gets a reference to the given NullableFloat64 and assigns it to the Rate field.
func (o *AgreementTypeWorkRole) SetRate(v float64) {
	o.Rate.Set(&v)
}
// SetRateNil sets the value for Rate to be an explicit nil
func (o *AgreementTypeWorkRole) SetRateNil() {
	o.Rate.Set(nil)
}

// UnsetRate ensures that no value is present for Rate, not even an explicit nil
func (o *AgreementTypeWorkRole) UnsetRate() {
	o.Rate.Unset()
}

// GetRateType returns the RateType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AgreementTypeWorkRole) GetRateType() string {
	if o == nil || o.RateType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RateType.Get()
}

// GetRateTypeOk returns a tuple with the RateType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkRole) GetRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateType.Get(), o.RateType.IsSet()
}

// SetRateType sets field value
func (o *AgreementTypeWorkRole) SetRateType(v string) {
	o.RateType.Set(&v)
}

// GetLimitTo returns the LimitTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AgreementTypeWorkRole) GetLimitTo() float64 {
	if o == nil || IsNil(o.LimitTo.Get()) {
		var ret float64
		return ret
	}
	return *o.LimitTo.Get()
}

// GetLimitToOk returns a tuple with the LimitTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AgreementTypeWorkRole) GetLimitToOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LimitTo.Get(), o.LimitTo.IsSet()
}

// HasLimitTo returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasLimitTo() bool {
	if o != nil && o.LimitTo.IsSet() {
		return true
	}

	return false
}

// SetLimitTo gets a reference to the given NullableFloat64 and assigns it to the LimitTo field.
func (o *AgreementTypeWorkRole) SetLimitTo(v float64) {
	o.LimitTo.Set(&v)
}
// SetLimitToNil sets the value for LimitTo to be an explicit nil
func (o *AgreementTypeWorkRole) SetLimitToNil() {
	o.LimitTo.Set(nil)
}

// UnsetLimitTo ensures that no value is present for LimitTo, not even an explicit nil
func (o *AgreementTypeWorkRole) UnsetLimitTo() {
	o.LimitTo.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AgreementTypeWorkRole) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgreementTypeWorkRole) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AgreementTypeWorkRole) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AgreementTypeWorkRole) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AgreementTypeWorkRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgreementTypeWorkRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.EndingDate) {
		toSerialize["endingDate"] = o.EndingDate
	}
	if o.Rate.IsSet() {
		toSerialize["rate"] = o.Rate.Get()
	}
	toSerialize["rateType"] = o.RateType.Get()
	if o.LimitTo.IsSet() {
		toSerialize["limitTo"] = o.LimitTo.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AgreementTypeWorkRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rateType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgreementTypeWorkRole := _AgreementTypeWorkRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgreementTypeWorkRole)

	if err != nil {
		return err
	}

	*o = AgreementTypeWorkRole(varAgreementTypeWorkRole)

	return err
}

type NullableAgreementTypeWorkRole struct {
	value *AgreementTypeWorkRole
	isSet bool
}

func (v NullableAgreementTypeWorkRole) Get() *AgreementTypeWorkRole {
	return v.value
}

func (v *NullableAgreementTypeWorkRole) Set(val *AgreementTypeWorkRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreementTypeWorkRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreementTypeWorkRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreementTypeWorkRole(val *AgreementTypeWorkRole) *NullableAgreementTypeWorkRole {
	return &NullableAgreementTypeWorkRole{value: val, isSet: true}
}

func (v NullableAgreementTypeWorkRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreementTypeWorkRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


