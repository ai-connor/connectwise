/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AllowedOrigin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedOrigin{}

// AllowedOrigin struct for AllowedOrigin
type AllowedOrigin struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 2000;
	Origin string `json:"origin"`
	//  Max length: 2000;
	Description string `json:"description"`
	LastUpdateUtc *time.Time `json:"lastUpdateUtc,omitempty"`
	UpdatedBy *string `json:"updatedBy,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _AllowedOrigin AllowedOrigin

// NewAllowedOrigin instantiates a new AllowedOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedOrigin(origin string, description string) *AllowedOrigin {
	this := AllowedOrigin{}
	this.Origin = origin
	this.Description = description
	return &this
}

// NewAllowedOriginWithDefaults instantiates a new AllowedOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedOriginWithDefaults() *AllowedOrigin {
	this := AllowedOrigin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllowedOrigin) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllowedOrigin) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AllowedOrigin) SetId(v int32) {
	o.Id = &v
}

// GetOrigin returns the Origin field value
func (o *AllowedOrigin) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *AllowedOrigin) SetOrigin(v string) {
	o.Origin = v
}

// GetDescription returns the Description field value
func (o *AllowedOrigin) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AllowedOrigin) SetDescription(v string) {
	o.Description = v
}

// GetLastUpdateUtc returns the LastUpdateUtc field value if set, zero value otherwise.
func (o *AllowedOrigin) GetLastUpdateUtc() time.Time {
	if o == nil || IsNil(o.LastUpdateUtc) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdateUtc
}

// GetLastUpdateUtcOk returns a tuple with the LastUpdateUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetLastUpdateUtcOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdateUtc) {
		return nil, false
	}
	return o.LastUpdateUtc, true
}

// HasLastUpdateUtc returns a boolean if a field has been set.
func (o *AllowedOrigin) HasLastUpdateUtc() bool {
	if o != nil && !IsNil(o.LastUpdateUtc) {
		return true
	}

	return false
}

// SetLastUpdateUtc gets a reference to the given time.Time and assigns it to the LastUpdateUtc field.
func (o *AllowedOrigin) SetLastUpdateUtc(v time.Time) {
	o.LastUpdateUtc = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *AllowedOrigin) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *AllowedOrigin) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *AllowedOrigin) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *AllowedOrigin) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedOrigin) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *AllowedOrigin) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *AllowedOrigin) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o AllowedOrigin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedOrigin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["origin"] = o.Origin
	toSerialize["description"] = o.Description
	if !IsNil(o.LastUpdateUtc) {
		toSerialize["lastUpdateUtc"] = o.LastUpdateUtc
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *AllowedOrigin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"origin",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllowedOrigin := _AllowedOrigin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAllowedOrigin)

	if err != nil {
		return err
	}

	*o = AllowedOrigin(varAllowedOrigin)

	return err
}

type NullableAllowedOrigin struct {
	value *AllowedOrigin
	isSet bool
}

func (v NullableAllowedOrigin) Get() *AllowedOrigin {
	return v.value
}

func (v *NullableAllowedOrigin) Set(val *AllowedOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedOrigin(val *AllowedOrigin) *NullableAllowedOrigin {
	return &NullableAllowedOrigin{value: val, isSet: true}
}

func (v NullableAllowedOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


