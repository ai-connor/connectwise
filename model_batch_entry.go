/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the BatchEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchEntry{}

// BatchEntry struct for BatchEntry
type BatchEntry struct {
	Id *int32 `json:"id,omitempty"`
	AccountType *string `json:"accountType,omitempty"`
	Name *string `json:"name,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	Debit NullableFloat64 `json:"debit,omitempty"`
	Credit NullableFloat64 `json:"credit,omitempty"`
	Cost *float64 `json:"cost,omitempty"`
	Item *string `json:"item,omitempty"`
	SalesCode *string `json:"salesCode,omitempty"`
	CostOfGoodsSoldAccountNumber *string `json:"costOfGoodsSoldAccountNumber,omitempty"`
	Invoice *InvoiceReference `json:"invoice,omitempty"`
	PurchaseOrder *PurchaseOrderReference `json:"purchaseOrder,omitempty"`
	LineItem *PurchaseOrderLineItemReference `json:"lineItem,omitempty"`
	Transfer *string `json:"transfer,omitempty"`
	Expense *ExpenseDetailReference `json:"expense,omitempty"`
	AdjustmentDetail *AdjustmentDetailReference `json:"adjustmentDetail,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewBatchEntry instantiates a new BatchEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchEntry() *BatchEntry {
	this := BatchEntry{}
	return &this
}

// NewBatchEntryWithDefaults instantiates a new BatchEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchEntryWithDefaults() *BatchEntry {
	this := BatchEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BatchEntry) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BatchEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BatchEntry) SetId(v int32) {
	o.Id = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *BatchEntry) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *BatchEntry) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *BatchEntry) SetAccountType(v string) {
	o.AccountType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BatchEntry) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BatchEntry) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BatchEntry) SetName(v string) {
	o.Name = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *BatchEntry) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *BatchEntry) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *BatchEntry) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetDebit returns the Debit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchEntry) GetDebit() float64 {
	if o == nil || IsNil(o.Debit.Get()) {
		var ret float64
		return ret
	}
	return *o.Debit.Get()
}

// GetDebitOk returns a tuple with the Debit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchEntry) GetDebitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Debit.Get(), o.Debit.IsSet()
}

// HasDebit returns a boolean if a field has been set.
func (o *BatchEntry) HasDebit() bool {
	if o != nil && o.Debit.IsSet() {
		return true
	}

	return false
}

// SetDebit gets a reference to the given NullableFloat64 and assigns it to the Debit field.
func (o *BatchEntry) SetDebit(v float64) {
	o.Debit.Set(&v)
}
// SetDebitNil sets the value for Debit to be an explicit nil
func (o *BatchEntry) SetDebitNil() {
	o.Debit.Set(nil)
}

// UnsetDebit ensures that no value is present for Debit, not even an explicit nil
func (o *BatchEntry) UnsetDebit() {
	o.Debit.Unset()
}

// GetCredit returns the Credit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchEntry) GetCredit() float64 {
	if o == nil || IsNil(o.Credit.Get()) {
		var ret float64
		return ret
	}
	return *o.Credit.Get()
}

// GetCreditOk returns a tuple with the Credit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchEntry) GetCreditOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Credit.Get(), o.Credit.IsSet()
}

// HasCredit returns a boolean if a field has been set.
func (o *BatchEntry) HasCredit() bool {
	if o != nil && o.Credit.IsSet() {
		return true
	}

	return false
}

// SetCredit gets a reference to the given NullableFloat64 and assigns it to the Credit field.
func (o *BatchEntry) SetCredit(v float64) {
	o.Credit.Set(&v)
}
// SetCreditNil sets the value for Credit to be an explicit nil
func (o *BatchEntry) SetCreditNil() {
	o.Credit.Set(nil)
}

// UnsetCredit ensures that no value is present for Credit, not even an explicit nil
func (o *BatchEntry) UnsetCredit() {
	o.Credit.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *BatchEntry) GetCost() float64 {
	if o == nil || IsNil(o.Cost) {
		var ret float64
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetCostOk() (*float64, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *BatchEntry) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float64 and assigns it to the Cost field.
func (o *BatchEntry) SetCost(v float64) {
	o.Cost = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *BatchEntry) GetItem() string {
	if o == nil || IsNil(o.Item) {
		var ret string
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetItemOk() (*string, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *BatchEntry) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given string and assigns it to the Item field.
func (o *BatchEntry) SetItem(v string) {
	o.Item = &v
}

// GetSalesCode returns the SalesCode field value if set, zero value otherwise.
func (o *BatchEntry) GetSalesCode() string {
	if o == nil || IsNil(o.SalesCode) {
		var ret string
		return ret
	}
	return *o.SalesCode
}

// GetSalesCodeOk returns a tuple with the SalesCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetSalesCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalesCode) {
		return nil, false
	}
	return o.SalesCode, true
}

// HasSalesCode returns a boolean if a field has been set.
func (o *BatchEntry) HasSalesCode() bool {
	if o != nil && !IsNil(o.SalesCode) {
		return true
	}

	return false
}

// SetSalesCode gets a reference to the given string and assigns it to the SalesCode field.
func (o *BatchEntry) SetSalesCode(v string) {
	o.SalesCode = &v
}

// GetCostOfGoodsSoldAccountNumber returns the CostOfGoodsSoldAccountNumber field value if set, zero value otherwise.
func (o *BatchEntry) GetCostOfGoodsSoldAccountNumber() string {
	if o == nil || IsNil(o.CostOfGoodsSoldAccountNumber) {
		var ret string
		return ret
	}
	return *o.CostOfGoodsSoldAccountNumber
}

// GetCostOfGoodsSoldAccountNumberOk returns a tuple with the CostOfGoodsSoldAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetCostOfGoodsSoldAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CostOfGoodsSoldAccountNumber) {
		return nil, false
	}
	return o.CostOfGoodsSoldAccountNumber, true
}

// HasCostOfGoodsSoldAccountNumber returns a boolean if a field has been set.
func (o *BatchEntry) HasCostOfGoodsSoldAccountNumber() bool {
	if o != nil && !IsNil(o.CostOfGoodsSoldAccountNumber) {
		return true
	}

	return false
}

// SetCostOfGoodsSoldAccountNumber gets a reference to the given string and assigns it to the CostOfGoodsSoldAccountNumber field.
func (o *BatchEntry) SetCostOfGoodsSoldAccountNumber(v string) {
	o.CostOfGoodsSoldAccountNumber = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *BatchEntry) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *BatchEntry) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *BatchEntry) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *BatchEntry) GetPurchaseOrder() PurchaseOrderReference {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret PurchaseOrderReference
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetPurchaseOrderOk() (*PurchaseOrderReference, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *BatchEntry) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given PurchaseOrderReference and assigns it to the PurchaseOrder field.
func (o *BatchEntry) SetPurchaseOrder(v PurchaseOrderReference) {
	o.PurchaseOrder = &v
}

// GetLineItem returns the LineItem field value if set, zero value otherwise.
func (o *BatchEntry) GetLineItem() PurchaseOrderLineItemReference {
	if o == nil || IsNil(o.LineItem) {
		var ret PurchaseOrderLineItemReference
		return ret
	}
	return *o.LineItem
}

// GetLineItemOk returns a tuple with the LineItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetLineItemOk() (*PurchaseOrderLineItemReference, bool) {
	if o == nil || IsNil(o.LineItem) {
		return nil, false
	}
	return o.LineItem, true
}

// HasLineItem returns a boolean if a field has been set.
func (o *BatchEntry) HasLineItem() bool {
	if o != nil && !IsNil(o.LineItem) {
		return true
	}

	return false
}

// SetLineItem gets a reference to the given PurchaseOrderLineItemReference and assigns it to the LineItem field.
func (o *BatchEntry) SetLineItem(v PurchaseOrderLineItemReference) {
	o.LineItem = &v
}

// GetTransfer returns the Transfer field value if set, zero value otherwise.
func (o *BatchEntry) GetTransfer() string {
	if o == nil || IsNil(o.Transfer) {
		var ret string
		return ret
	}
	return *o.Transfer
}

// GetTransferOk returns a tuple with the Transfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetTransferOk() (*string, bool) {
	if o == nil || IsNil(o.Transfer) {
		return nil, false
	}
	return o.Transfer, true
}

// HasTransfer returns a boolean if a field has been set.
func (o *BatchEntry) HasTransfer() bool {
	if o != nil && !IsNil(o.Transfer) {
		return true
	}

	return false
}

// SetTransfer gets a reference to the given string and assigns it to the Transfer field.
func (o *BatchEntry) SetTransfer(v string) {
	o.Transfer = &v
}

// GetExpense returns the Expense field value if set, zero value otherwise.
func (o *BatchEntry) GetExpense() ExpenseDetailReference {
	if o == nil || IsNil(o.Expense) {
		var ret ExpenseDetailReference
		return ret
	}
	return *o.Expense
}

// GetExpenseOk returns a tuple with the Expense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetExpenseOk() (*ExpenseDetailReference, bool) {
	if o == nil || IsNil(o.Expense) {
		return nil, false
	}
	return o.Expense, true
}

// HasExpense returns a boolean if a field has been set.
func (o *BatchEntry) HasExpense() bool {
	if o != nil && !IsNil(o.Expense) {
		return true
	}

	return false
}

// SetExpense gets a reference to the given ExpenseDetailReference and assigns it to the Expense field.
func (o *BatchEntry) SetExpense(v ExpenseDetailReference) {
	o.Expense = &v
}

// GetAdjustmentDetail returns the AdjustmentDetail field value if set, zero value otherwise.
func (o *BatchEntry) GetAdjustmentDetail() AdjustmentDetailReference {
	if o == nil || IsNil(o.AdjustmentDetail) {
		var ret AdjustmentDetailReference
		return ret
	}
	return *o.AdjustmentDetail
}

// GetAdjustmentDetailOk returns a tuple with the AdjustmentDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetAdjustmentDetailOk() (*AdjustmentDetailReference, bool) {
	if o == nil || IsNil(o.AdjustmentDetail) {
		return nil, false
	}
	return o.AdjustmentDetail, true
}

// HasAdjustmentDetail returns a boolean if a field has been set.
func (o *BatchEntry) HasAdjustmentDetail() bool {
	if o != nil && !IsNil(o.AdjustmentDetail) {
		return true
	}

	return false
}

// SetAdjustmentDetail gets a reference to the given AdjustmentDetailReference and assigns it to the AdjustmentDetail field.
func (o *BatchEntry) SetAdjustmentDetail(v AdjustmentDetailReference) {
	o.AdjustmentDetail = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BatchEntry) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchEntry) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BatchEntry) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BatchEntry) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BatchEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if o.Debit.IsSet() {
		toSerialize["debit"] = o.Debit.Get()
	}
	if o.Credit.IsSet() {
		toSerialize["credit"] = o.Credit.Get()
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.SalesCode) {
		toSerialize["salesCode"] = o.SalesCode
	}
	if !IsNil(o.CostOfGoodsSoldAccountNumber) {
		toSerialize["costOfGoodsSoldAccountNumber"] = o.CostOfGoodsSoldAccountNumber
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchaseOrder"] = o.PurchaseOrder
	}
	if !IsNil(o.LineItem) {
		toSerialize["lineItem"] = o.LineItem
	}
	if !IsNil(o.Transfer) {
		toSerialize["transfer"] = o.Transfer
	}
	if !IsNil(o.Expense) {
		toSerialize["expense"] = o.Expense
	}
	if !IsNil(o.AdjustmentDetail) {
		toSerialize["adjustmentDetail"] = o.AdjustmentDetail
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableBatchEntry struct {
	value *BatchEntry
	isSet bool
}

func (v NullableBatchEntry) Get() *BatchEntry {
	return v.value
}

func (v *NullableBatchEntry) Set(val *BatchEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchEntry(val *BatchEntry) *NullableBatchEntry {
	return &NullableBatchEntry{value: val, isSet: true}
}

func (v NullableBatchEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


