/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Board type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Board{}

// Board struct for Board
type Board struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Location SystemLocationReference `json:"location"`
	Department SystemDepartmentReference `json:"department"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	SignOffTemplate *ServiceSignoffReference `json:"signOffTemplate,omitempty"`
	SendToContactFlag NullableBool `json:"sendToContactFlag,omitempty"`
	ContactTemplate *ServiceEmailTemplateReference `json:"contactTemplate,omitempty"`
	SendToResourceFlag NullableBool `json:"sendToResourceFlag,omitempty"`
	ResourceTemplate *ServiceEmailTemplateReference `json:"resourceTemplate,omitempty"`
	ProjectFlag NullableBool `json:"projectFlag,omitempty"`
	// This field only shows if it is Project Board.
	ShowDependenciesFlag NullableBool `json:"showDependenciesFlag,omitempty"`
	// This field only shows if it is Project Board.
	ShowEstimatesFlag NullableBool `json:"showEstimatesFlag,omitempty"`
	BoardIcon *DocumentReference `json:"boardIcon,omitempty"`
	BillTicketsAfterClosedFlag NullableBool `json:"billTicketsAfterClosedFlag,omitempty"`
	BillTicketSeparatelyFlag NullableBool `json:"billTicketSeparatelyFlag,omitempty"`
	BillUnapprovedTimeExpenseFlag NullableBool `json:"billUnapprovedTimeExpenseFlag,omitempty"`
	OverrideBillingSetupFlag NullableBool `json:"overrideBillingSetupFlag,omitempty"`
	DispatchMember *MemberReference `json:"dispatchMember,omitempty"`
	ServiceManagerMember *MemberReference `json:"serviceManagerMember,omitempty"`
	DutyManagerMember *MemberReference `json:"dutyManagerMember,omitempty"`
	OncallMember *MemberReference `json:"oncallMember,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	WorkType *WorkTypeReference `json:"workType,omitempty"`
	BillTime NullableString `json:"billTime,omitempty"`
	BillExpense NullableString `json:"billExpense,omitempty"`
	BillProduct NullableString `json:"billProduct,omitempty"`
	AutoCloseStatus *ServiceStatusReference `json:"autoCloseStatus,omitempty"`
	AutoAssignNewTicketsFlag NullableBool `json:"autoAssignNewTicketsFlag,omitempty"`
	AutoAssignNewECTicketsFlag NullableBool `json:"autoAssignNewECTicketsFlag,omitempty"`
	AutoAssignNewPortalTicketsFlag NullableBool `json:"autoAssignNewPortalTicketsFlag,omitempty"`
	DiscussionsLockedFlag NullableBool `json:"discussionsLockedFlag,omitempty"`
	TimeEntryLockedFlag NullableBool `json:"timeEntryLockedFlag,omitempty"`
	//  Max length: 50;
	NotifyEmailFrom *string `json:"notifyEmailFrom,omitempty"`
	//  Max length: 60;
	NotifyEmailFromName *string `json:"notifyEmailFromName,omitempty"`
	ClosedLoopDiscussionsFlag NullableBool `json:"closedLoopDiscussionsFlag,omitempty"`
	ClosedLoopResolutionFlag NullableBool `json:"closedLoopResolutionFlag,omitempty"`
	ClosedLoopInternalAnalysisFlag NullableBool `json:"closedLoopInternalAnalysisFlag,omitempty"`
	TimeEntryDiscussionFlag NullableBool `json:"timeEntryDiscussionFlag,omitempty"`
	TimeEntryResolutionFlag NullableBool `json:"timeEntryResolutionFlag,omitempty"`
	TimeEntryInternalAnalysisFlag NullableBool `json:"timeEntryInternalAnalysisFlag,omitempty"`
	ProblemSort NullableString `json:"problemSort,omitempty"`
	ResolutionSort NullableString `json:"resolutionSort,omitempty"`
	InternalAnalysisSort NullableString `json:"internalAnalysisSort,omitempty"`
	EmailConnectorAllowReopenClosedFlag NullableBool `json:"emailConnectorAllowReopenClosedFlag,omitempty"`
	EmailConnectorReopenStatus *ServiceStatusReference `json:"emailConnectorReopenStatus,omitempty"`
	// This field can only be set when emailConnectorAllowReopenClosed is true.
	EmailConnectorReopenResourcesFlag NullableBool `json:"emailConnectorReopenResourcesFlag,omitempty"`
	// This field can only be set when emailConnectorAllowReopenClosed is true.
	EmailConnectorNewTicketNoMatchFlag NullableBool `json:"emailConnectorNewTicketNoMatchFlag,omitempty"`
	// This field can only be set when emailConnectorAllowReopenClosed is true.
	EmailConnectorNeverReopenByDaysFlag NullableBool `json:"emailConnectorNeverReopenByDaysFlag,omitempty"`
	// This field can only be set when emailConnectorNeverReopenByDaysFlag and emailConnectorAllowReopenClosed are both true             This field is required when emailConnectorNeverReopenByDaysFlag is true.
	EmailConnectorReopenDaysLimit NullableInt32 `json:"emailConnectorReopenDaysLimit,omitempty"`
	// This field can only be set when emailConnectorAllowReopenClosed is true.
	EmailConnectorNeverReopenByDaysClosedFlag NullableBool `json:"emailConnectorNeverReopenByDaysClosedFlag,omitempty"`
	// This field can only be set when emailConnectorNeverReopenByDaysClosedFlag and emailConnectorAllowReopenClosed are both true             This field is required when emailConnectorNeverReopenByDaysClosedFlag is true.
	EmailConnectorReopenDaysClosedLimit NullableInt32 `json:"emailConnectorReopenDaysClosedLimit,omitempty"`
	UseMemberDisplayNameFlag NullableBool `json:"useMemberDisplayNameFlag,omitempty"`
	SendToCCFlag NullableBool `json:"sendToCCFlag,omitempty"`
	AutoAssignTicketOwnerFlag NullableBool `json:"autoAssignTicketOwnerFlag,omitempty"`
	AutoAssignLimitFlag NullableBool `json:"autoAssignLimitFlag,omitempty"`
	// This field can only be set when autoAssignLimitFlag is true
	AutoAssignLimitAmount NullableInt32 `json:"autoAssignLimitAmount,omitempty"`
	ClosedLoopAllFlag NullableBool `json:"closedLoopAllFlag,omitempty"`
	PercentageCalculation NullableString `json:"percentageCalculation,omitempty"`
	AllSort NullableString `json:"allSort,omitempty"`
	MarkFirstNoteIssueFlag NullableBool `json:"markFirstNoteIssueFlag,omitempty"`
	RestrictBoardByDefaultFlag NullableBool `json:"restrictBoardByDefaultFlag,omitempty"`
	SendToBundledFlag NullableBool `json:"sendToBundledFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Board Board

// NewBoard instantiates a new Board object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoard(name string, location SystemLocationReference, department SystemDepartmentReference) *Board {
	this := Board{}
	this.Name = name
	this.Location = location
	this.Department = department
	return &this
}

// NewBoardWithDefaults instantiates a new Board object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardWithDefaults() *Board {
	this := Board{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Board) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Board) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Board) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Board) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Board) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Board) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value
func (o *Board) GetLocation() SystemLocationReference {
	if o == nil {
		var ret SystemLocationReference
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *Board) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *Board) SetLocation(v SystemLocationReference) {
	o.Location = v
}

// GetDepartment returns the Department field value
func (o *Board) GetDepartment() SystemDepartmentReference {
	if o == nil {
		var ret SystemDepartmentReference
		return ret
	}

	return o.Department
}

// GetDepartmentOk returns a tuple with the Department field value
// and a boolean to check if the value has been set.
func (o *Board) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Department, true
}

// SetDepartment sets field value
func (o *Board) SetDepartment(v SystemDepartmentReference) {
	o.Department = v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *Board) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *Board) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *Board) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *Board) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetSignOffTemplate returns the SignOffTemplate field value if set, zero value otherwise.
func (o *Board) GetSignOffTemplate() ServiceSignoffReference {
	if o == nil || IsNil(o.SignOffTemplate) {
		var ret ServiceSignoffReference
		return ret
	}
	return *o.SignOffTemplate
}

// GetSignOffTemplateOk returns a tuple with the SignOffTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetSignOffTemplateOk() (*ServiceSignoffReference, bool) {
	if o == nil || IsNil(o.SignOffTemplate) {
		return nil, false
	}
	return o.SignOffTemplate, true
}

// HasSignOffTemplate returns a boolean if a field has been set.
func (o *Board) HasSignOffTemplate() bool {
	if o != nil && !IsNil(o.SignOffTemplate) {
		return true
	}

	return false
}

// SetSignOffTemplate gets a reference to the given ServiceSignoffReference and assigns it to the SignOffTemplate field.
func (o *Board) SetSignOffTemplate(v ServiceSignoffReference) {
	o.SignOffTemplate = &v
}

// GetSendToContactFlag returns the SendToContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetSendToContactFlag() bool {
	if o == nil || IsNil(o.SendToContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendToContactFlag.Get()
}

// GetSendToContactFlagOk returns a tuple with the SendToContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetSendToContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendToContactFlag.Get(), o.SendToContactFlag.IsSet()
}

// HasSendToContactFlag returns a boolean if a field has been set.
func (o *Board) HasSendToContactFlag() bool {
	if o != nil && o.SendToContactFlag.IsSet() {
		return true
	}

	return false
}

// SetSendToContactFlag gets a reference to the given NullableBool and assigns it to the SendToContactFlag field.
func (o *Board) SetSendToContactFlag(v bool) {
	o.SendToContactFlag.Set(&v)
}
// SetSendToContactFlagNil sets the value for SendToContactFlag to be an explicit nil
func (o *Board) SetSendToContactFlagNil() {
	o.SendToContactFlag.Set(nil)
}

// UnsetSendToContactFlag ensures that no value is present for SendToContactFlag, not even an explicit nil
func (o *Board) UnsetSendToContactFlag() {
	o.SendToContactFlag.Unset()
}

// GetContactTemplate returns the ContactTemplate field value if set, zero value otherwise.
func (o *Board) GetContactTemplate() ServiceEmailTemplateReference {
	if o == nil || IsNil(o.ContactTemplate) {
		var ret ServiceEmailTemplateReference
		return ret
	}
	return *o.ContactTemplate
}

// GetContactTemplateOk returns a tuple with the ContactTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetContactTemplateOk() (*ServiceEmailTemplateReference, bool) {
	if o == nil || IsNil(o.ContactTemplate) {
		return nil, false
	}
	return o.ContactTemplate, true
}

// HasContactTemplate returns a boolean if a field has been set.
func (o *Board) HasContactTemplate() bool {
	if o != nil && !IsNil(o.ContactTemplate) {
		return true
	}

	return false
}

// SetContactTemplate gets a reference to the given ServiceEmailTemplateReference and assigns it to the ContactTemplate field.
func (o *Board) SetContactTemplate(v ServiceEmailTemplateReference) {
	o.ContactTemplate = &v
}

// GetSendToResourceFlag returns the SendToResourceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetSendToResourceFlag() bool {
	if o == nil || IsNil(o.SendToResourceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendToResourceFlag.Get()
}

// GetSendToResourceFlagOk returns a tuple with the SendToResourceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetSendToResourceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendToResourceFlag.Get(), o.SendToResourceFlag.IsSet()
}

// HasSendToResourceFlag returns a boolean if a field has been set.
func (o *Board) HasSendToResourceFlag() bool {
	if o != nil && o.SendToResourceFlag.IsSet() {
		return true
	}

	return false
}

// SetSendToResourceFlag gets a reference to the given NullableBool and assigns it to the SendToResourceFlag field.
func (o *Board) SetSendToResourceFlag(v bool) {
	o.SendToResourceFlag.Set(&v)
}
// SetSendToResourceFlagNil sets the value for SendToResourceFlag to be an explicit nil
func (o *Board) SetSendToResourceFlagNil() {
	o.SendToResourceFlag.Set(nil)
}

// UnsetSendToResourceFlag ensures that no value is present for SendToResourceFlag, not even an explicit nil
func (o *Board) UnsetSendToResourceFlag() {
	o.SendToResourceFlag.Unset()
}

// GetResourceTemplate returns the ResourceTemplate field value if set, zero value otherwise.
func (o *Board) GetResourceTemplate() ServiceEmailTemplateReference {
	if o == nil || IsNil(o.ResourceTemplate) {
		var ret ServiceEmailTemplateReference
		return ret
	}
	return *o.ResourceTemplate
}

// GetResourceTemplateOk returns a tuple with the ResourceTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetResourceTemplateOk() (*ServiceEmailTemplateReference, bool) {
	if o == nil || IsNil(o.ResourceTemplate) {
		return nil, false
	}
	return o.ResourceTemplate, true
}

// HasResourceTemplate returns a boolean if a field has been set.
func (o *Board) HasResourceTemplate() bool {
	if o != nil && !IsNil(o.ResourceTemplate) {
		return true
	}

	return false
}

// SetResourceTemplate gets a reference to the given ServiceEmailTemplateReference and assigns it to the ResourceTemplate field.
func (o *Board) SetResourceTemplate(v ServiceEmailTemplateReference) {
	o.ResourceTemplate = &v
}

// GetProjectFlag returns the ProjectFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetProjectFlag() bool {
	if o == nil || IsNil(o.ProjectFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProjectFlag.Get()
}

// GetProjectFlagOk returns a tuple with the ProjectFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetProjectFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectFlag.Get(), o.ProjectFlag.IsSet()
}

// HasProjectFlag returns a boolean if a field has been set.
func (o *Board) HasProjectFlag() bool {
	if o != nil && o.ProjectFlag.IsSet() {
		return true
	}

	return false
}

// SetProjectFlag gets a reference to the given NullableBool and assigns it to the ProjectFlag field.
func (o *Board) SetProjectFlag(v bool) {
	o.ProjectFlag.Set(&v)
}
// SetProjectFlagNil sets the value for ProjectFlag to be an explicit nil
func (o *Board) SetProjectFlagNil() {
	o.ProjectFlag.Set(nil)
}

// UnsetProjectFlag ensures that no value is present for ProjectFlag, not even an explicit nil
func (o *Board) UnsetProjectFlag() {
	o.ProjectFlag.Unset()
}

// GetShowDependenciesFlag returns the ShowDependenciesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetShowDependenciesFlag() bool {
	if o == nil || IsNil(o.ShowDependenciesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowDependenciesFlag.Get()
}

// GetShowDependenciesFlagOk returns a tuple with the ShowDependenciesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetShowDependenciesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowDependenciesFlag.Get(), o.ShowDependenciesFlag.IsSet()
}

// HasShowDependenciesFlag returns a boolean if a field has been set.
func (o *Board) HasShowDependenciesFlag() bool {
	if o != nil && o.ShowDependenciesFlag.IsSet() {
		return true
	}

	return false
}

// SetShowDependenciesFlag gets a reference to the given NullableBool and assigns it to the ShowDependenciesFlag field.
func (o *Board) SetShowDependenciesFlag(v bool) {
	o.ShowDependenciesFlag.Set(&v)
}
// SetShowDependenciesFlagNil sets the value for ShowDependenciesFlag to be an explicit nil
func (o *Board) SetShowDependenciesFlagNil() {
	o.ShowDependenciesFlag.Set(nil)
}

// UnsetShowDependenciesFlag ensures that no value is present for ShowDependenciesFlag, not even an explicit nil
func (o *Board) UnsetShowDependenciesFlag() {
	o.ShowDependenciesFlag.Unset()
}

// GetShowEstimatesFlag returns the ShowEstimatesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetShowEstimatesFlag() bool {
	if o == nil || IsNil(o.ShowEstimatesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowEstimatesFlag.Get()
}

// GetShowEstimatesFlagOk returns a tuple with the ShowEstimatesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetShowEstimatesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowEstimatesFlag.Get(), o.ShowEstimatesFlag.IsSet()
}

// HasShowEstimatesFlag returns a boolean if a field has been set.
func (o *Board) HasShowEstimatesFlag() bool {
	if o != nil && o.ShowEstimatesFlag.IsSet() {
		return true
	}

	return false
}

// SetShowEstimatesFlag gets a reference to the given NullableBool and assigns it to the ShowEstimatesFlag field.
func (o *Board) SetShowEstimatesFlag(v bool) {
	o.ShowEstimatesFlag.Set(&v)
}
// SetShowEstimatesFlagNil sets the value for ShowEstimatesFlag to be an explicit nil
func (o *Board) SetShowEstimatesFlagNil() {
	o.ShowEstimatesFlag.Set(nil)
}

// UnsetShowEstimatesFlag ensures that no value is present for ShowEstimatesFlag, not even an explicit nil
func (o *Board) UnsetShowEstimatesFlag() {
	o.ShowEstimatesFlag.Unset()
}

// GetBoardIcon returns the BoardIcon field value if set, zero value otherwise.
func (o *Board) GetBoardIcon() DocumentReference {
	if o == nil || IsNil(o.BoardIcon) {
		var ret DocumentReference
		return ret
	}
	return *o.BoardIcon
}

// GetBoardIconOk returns a tuple with the BoardIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetBoardIconOk() (*DocumentReference, bool) {
	if o == nil || IsNil(o.BoardIcon) {
		return nil, false
	}
	return o.BoardIcon, true
}

// HasBoardIcon returns a boolean if a field has been set.
func (o *Board) HasBoardIcon() bool {
	if o != nil && !IsNil(o.BoardIcon) {
		return true
	}

	return false
}

// SetBoardIcon gets a reference to the given DocumentReference and assigns it to the BoardIcon field.
func (o *Board) SetBoardIcon(v DocumentReference) {
	o.BoardIcon = &v
}

// GetBillTicketsAfterClosedFlag returns the BillTicketsAfterClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetBillTicketsAfterClosedFlag() bool {
	if o == nil || IsNil(o.BillTicketsAfterClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillTicketsAfterClosedFlag.Get()
}

// GetBillTicketsAfterClosedFlagOk returns a tuple with the BillTicketsAfterClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetBillTicketsAfterClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTicketsAfterClosedFlag.Get(), o.BillTicketsAfterClosedFlag.IsSet()
}

// HasBillTicketsAfterClosedFlag returns a boolean if a field has been set.
func (o *Board) HasBillTicketsAfterClosedFlag() bool {
	if o != nil && o.BillTicketsAfterClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillTicketsAfterClosedFlag gets a reference to the given NullableBool and assigns it to the BillTicketsAfterClosedFlag field.
func (o *Board) SetBillTicketsAfterClosedFlag(v bool) {
	o.BillTicketsAfterClosedFlag.Set(&v)
}
// SetBillTicketsAfterClosedFlagNil sets the value for BillTicketsAfterClosedFlag to be an explicit nil
func (o *Board) SetBillTicketsAfterClosedFlagNil() {
	o.BillTicketsAfterClosedFlag.Set(nil)
}

// UnsetBillTicketsAfterClosedFlag ensures that no value is present for BillTicketsAfterClosedFlag, not even an explicit nil
func (o *Board) UnsetBillTicketsAfterClosedFlag() {
	o.BillTicketsAfterClosedFlag.Unset()
}

// GetBillTicketSeparatelyFlag returns the BillTicketSeparatelyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetBillTicketSeparatelyFlag() bool {
	if o == nil || IsNil(o.BillTicketSeparatelyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillTicketSeparatelyFlag.Get()
}

// GetBillTicketSeparatelyFlagOk returns a tuple with the BillTicketSeparatelyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetBillTicketSeparatelyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTicketSeparatelyFlag.Get(), o.BillTicketSeparatelyFlag.IsSet()
}

// HasBillTicketSeparatelyFlag returns a boolean if a field has been set.
func (o *Board) HasBillTicketSeparatelyFlag() bool {
	if o != nil && o.BillTicketSeparatelyFlag.IsSet() {
		return true
	}

	return false
}

// SetBillTicketSeparatelyFlag gets a reference to the given NullableBool and assigns it to the BillTicketSeparatelyFlag field.
func (o *Board) SetBillTicketSeparatelyFlag(v bool) {
	o.BillTicketSeparatelyFlag.Set(&v)
}
// SetBillTicketSeparatelyFlagNil sets the value for BillTicketSeparatelyFlag to be an explicit nil
func (o *Board) SetBillTicketSeparatelyFlagNil() {
	o.BillTicketSeparatelyFlag.Set(nil)
}

// UnsetBillTicketSeparatelyFlag ensures that no value is present for BillTicketSeparatelyFlag, not even an explicit nil
func (o *Board) UnsetBillTicketSeparatelyFlag() {
	o.BillTicketSeparatelyFlag.Unset()
}

// GetBillUnapprovedTimeExpenseFlag returns the BillUnapprovedTimeExpenseFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetBillUnapprovedTimeExpenseFlag() bool {
	if o == nil || IsNil(o.BillUnapprovedTimeExpenseFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillUnapprovedTimeExpenseFlag.Get()
}

// GetBillUnapprovedTimeExpenseFlagOk returns a tuple with the BillUnapprovedTimeExpenseFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetBillUnapprovedTimeExpenseFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillUnapprovedTimeExpenseFlag.Get(), o.BillUnapprovedTimeExpenseFlag.IsSet()
}

// HasBillUnapprovedTimeExpenseFlag returns a boolean if a field has been set.
func (o *Board) HasBillUnapprovedTimeExpenseFlag() bool {
	if o != nil && o.BillUnapprovedTimeExpenseFlag.IsSet() {
		return true
	}

	return false
}

// SetBillUnapprovedTimeExpenseFlag gets a reference to the given NullableBool and assigns it to the BillUnapprovedTimeExpenseFlag field.
func (o *Board) SetBillUnapprovedTimeExpenseFlag(v bool) {
	o.BillUnapprovedTimeExpenseFlag.Set(&v)
}
// SetBillUnapprovedTimeExpenseFlagNil sets the value for BillUnapprovedTimeExpenseFlag to be an explicit nil
func (o *Board) SetBillUnapprovedTimeExpenseFlagNil() {
	o.BillUnapprovedTimeExpenseFlag.Set(nil)
}

// UnsetBillUnapprovedTimeExpenseFlag ensures that no value is present for BillUnapprovedTimeExpenseFlag, not even an explicit nil
func (o *Board) UnsetBillUnapprovedTimeExpenseFlag() {
	o.BillUnapprovedTimeExpenseFlag.Unset()
}

// GetOverrideBillingSetupFlag returns the OverrideBillingSetupFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetOverrideBillingSetupFlag() bool {
	if o == nil || IsNil(o.OverrideBillingSetupFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideBillingSetupFlag.Get()
}

// GetOverrideBillingSetupFlagOk returns a tuple with the OverrideBillingSetupFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetOverrideBillingSetupFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideBillingSetupFlag.Get(), o.OverrideBillingSetupFlag.IsSet()
}

// HasOverrideBillingSetupFlag returns a boolean if a field has been set.
func (o *Board) HasOverrideBillingSetupFlag() bool {
	if o != nil && o.OverrideBillingSetupFlag.IsSet() {
		return true
	}

	return false
}

// SetOverrideBillingSetupFlag gets a reference to the given NullableBool and assigns it to the OverrideBillingSetupFlag field.
func (o *Board) SetOverrideBillingSetupFlag(v bool) {
	o.OverrideBillingSetupFlag.Set(&v)
}
// SetOverrideBillingSetupFlagNil sets the value for OverrideBillingSetupFlag to be an explicit nil
func (o *Board) SetOverrideBillingSetupFlagNil() {
	o.OverrideBillingSetupFlag.Set(nil)
}

// UnsetOverrideBillingSetupFlag ensures that no value is present for OverrideBillingSetupFlag, not even an explicit nil
func (o *Board) UnsetOverrideBillingSetupFlag() {
	o.OverrideBillingSetupFlag.Unset()
}

// GetDispatchMember returns the DispatchMember field value if set, zero value otherwise.
func (o *Board) GetDispatchMember() MemberReference {
	if o == nil || IsNil(o.DispatchMember) {
		var ret MemberReference
		return ret
	}
	return *o.DispatchMember
}

// GetDispatchMemberOk returns a tuple with the DispatchMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetDispatchMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.DispatchMember) {
		return nil, false
	}
	return o.DispatchMember, true
}

// HasDispatchMember returns a boolean if a field has been set.
func (o *Board) HasDispatchMember() bool {
	if o != nil && !IsNil(o.DispatchMember) {
		return true
	}

	return false
}

// SetDispatchMember gets a reference to the given MemberReference and assigns it to the DispatchMember field.
func (o *Board) SetDispatchMember(v MemberReference) {
	o.DispatchMember = &v
}

// GetServiceManagerMember returns the ServiceManagerMember field value if set, zero value otherwise.
func (o *Board) GetServiceManagerMember() MemberReference {
	if o == nil || IsNil(o.ServiceManagerMember) {
		var ret MemberReference
		return ret
	}
	return *o.ServiceManagerMember
}

// GetServiceManagerMemberOk returns a tuple with the ServiceManagerMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetServiceManagerMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.ServiceManagerMember) {
		return nil, false
	}
	return o.ServiceManagerMember, true
}

// HasServiceManagerMember returns a boolean if a field has been set.
func (o *Board) HasServiceManagerMember() bool {
	if o != nil && !IsNil(o.ServiceManagerMember) {
		return true
	}

	return false
}

// SetServiceManagerMember gets a reference to the given MemberReference and assigns it to the ServiceManagerMember field.
func (o *Board) SetServiceManagerMember(v MemberReference) {
	o.ServiceManagerMember = &v
}

// GetDutyManagerMember returns the DutyManagerMember field value if set, zero value otherwise.
func (o *Board) GetDutyManagerMember() MemberReference {
	if o == nil || IsNil(o.DutyManagerMember) {
		var ret MemberReference
		return ret
	}
	return *o.DutyManagerMember
}

// GetDutyManagerMemberOk returns a tuple with the DutyManagerMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetDutyManagerMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.DutyManagerMember) {
		return nil, false
	}
	return o.DutyManagerMember, true
}

// HasDutyManagerMember returns a boolean if a field has been set.
func (o *Board) HasDutyManagerMember() bool {
	if o != nil && !IsNil(o.DutyManagerMember) {
		return true
	}

	return false
}

// SetDutyManagerMember gets a reference to the given MemberReference and assigns it to the DutyManagerMember field.
func (o *Board) SetDutyManagerMember(v MemberReference) {
	o.DutyManagerMember = &v
}

// GetOncallMember returns the OncallMember field value if set, zero value otherwise.
func (o *Board) GetOncallMember() MemberReference {
	if o == nil || IsNil(o.OncallMember) {
		var ret MemberReference
		return ret
	}
	return *o.OncallMember
}

// GetOncallMemberOk returns a tuple with the OncallMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetOncallMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.OncallMember) {
		return nil, false
	}
	return o.OncallMember, true
}

// HasOncallMember returns a boolean if a field has been set.
func (o *Board) HasOncallMember() bool {
	if o != nil && !IsNil(o.OncallMember) {
		return true
	}

	return false
}

// SetOncallMember gets a reference to the given MemberReference and assigns it to the OncallMember field.
func (o *Board) SetOncallMember(v MemberReference) {
	o.OncallMember = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *Board) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *Board) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *Board) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *Board) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *Board) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *Board) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *Board) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *Board) SetBillTime(v string) {
	o.BillTime.Set(&v)
}
// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *Board) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *Board) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillExpense returns the BillExpense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetBillExpense() string {
	if o == nil || IsNil(o.BillExpense.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpense.Get()
}

// GetBillExpenseOk returns a tuple with the BillExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetBillExpenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpense.Get(), o.BillExpense.IsSet()
}

// HasBillExpense returns a boolean if a field has been set.
func (o *Board) HasBillExpense() bool {
	if o != nil && o.BillExpense.IsSet() {
		return true
	}

	return false
}

// SetBillExpense gets a reference to the given NullableString and assigns it to the BillExpense field.
func (o *Board) SetBillExpense(v string) {
	o.BillExpense.Set(&v)
}
// SetBillExpenseNil sets the value for BillExpense to be an explicit nil
func (o *Board) SetBillExpenseNil() {
	o.BillExpense.Set(nil)
}

// UnsetBillExpense ensures that no value is present for BillExpense, not even an explicit nil
func (o *Board) UnsetBillExpense() {
	o.BillExpense.Unset()
}

// GetBillProduct returns the BillProduct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetBillProduct() string {
	if o == nil || IsNil(o.BillProduct.Get()) {
		var ret string
		return ret
	}
	return *o.BillProduct.Get()
}

// GetBillProductOk returns a tuple with the BillProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetBillProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProduct.Get(), o.BillProduct.IsSet()
}

// HasBillProduct returns a boolean if a field has been set.
func (o *Board) HasBillProduct() bool {
	if o != nil && o.BillProduct.IsSet() {
		return true
	}

	return false
}

// SetBillProduct gets a reference to the given NullableString and assigns it to the BillProduct field.
func (o *Board) SetBillProduct(v string) {
	o.BillProduct.Set(&v)
}
// SetBillProductNil sets the value for BillProduct to be an explicit nil
func (o *Board) SetBillProductNil() {
	o.BillProduct.Set(nil)
}

// UnsetBillProduct ensures that no value is present for BillProduct, not even an explicit nil
func (o *Board) UnsetBillProduct() {
	o.BillProduct.Unset()
}

// GetAutoCloseStatus returns the AutoCloseStatus field value if set, zero value otherwise.
func (o *Board) GetAutoCloseStatus() ServiceStatusReference {
	if o == nil || IsNil(o.AutoCloseStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.AutoCloseStatus
}

// GetAutoCloseStatusOk returns a tuple with the AutoCloseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetAutoCloseStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.AutoCloseStatus) {
		return nil, false
	}
	return o.AutoCloseStatus, true
}

// HasAutoCloseStatus returns a boolean if a field has been set.
func (o *Board) HasAutoCloseStatus() bool {
	if o != nil && !IsNil(o.AutoCloseStatus) {
		return true
	}

	return false
}

// SetAutoCloseStatus gets a reference to the given ServiceStatusReference and assigns it to the AutoCloseStatus field.
func (o *Board) SetAutoCloseStatus(v ServiceStatusReference) {
	o.AutoCloseStatus = &v
}

// GetAutoAssignNewTicketsFlag returns the AutoAssignNewTicketsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAutoAssignNewTicketsFlag() bool {
	if o == nil || IsNil(o.AutoAssignNewTicketsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoAssignNewTicketsFlag.Get()
}

// GetAutoAssignNewTicketsFlagOk returns a tuple with the AutoAssignNewTicketsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAutoAssignNewTicketsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoAssignNewTicketsFlag.Get(), o.AutoAssignNewTicketsFlag.IsSet()
}

// HasAutoAssignNewTicketsFlag returns a boolean if a field has been set.
func (o *Board) HasAutoAssignNewTicketsFlag() bool {
	if o != nil && o.AutoAssignNewTicketsFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoAssignNewTicketsFlag gets a reference to the given NullableBool and assigns it to the AutoAssignNewTicketsFlag field.
func (o *Board) SetAutoAssignNewTicketsFlag(v bool) {
	o.AutoAssignNewTicketsFlag.Set(&v)
}
// SetAutoAssignNewTicketsFlagNil sets the value for AutoAssignNewTicketsFlag to be an explicit nil
func (o *Board) SetAutoAssignNewTicketsFlagNil() {
	o.AutoAssignNewTicketsFlag.Set(nil)
}

// UnsetAutoAssignNewTicketsFlag ensures that no value is present for AutoAssignNewTicketsFlag, not even an explicit nil
func (o *Board) UnsetAutoAssignNewTicketsFlag() {
	o.AutoAssignNewTicketsFlag.Unset()
}

// GetAutoAssignNewECTicketsFlag returns the AutoAssignNewECTicketsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAutoAssignNewECTicketsFlag() bool {
	if o == nil || IsNil(o.AutoAssignNewECTicketsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoAssignNewECTicketsFlag.Get()
}

// GetAutoAssignNewECTicketsFlagOk returns a tuple with the AutoAssignNewECTicketsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAutoAssignNewECTicketsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoAssignNewECTicketsFlag.Get(), o.AutoAssignNewECTicketsFlag.IsSet()
}

// HasAutoAssignNewECTicketsFlag returns a boolean if a field has been set.
func (o *Board) HasAutoAssignNewECTicketsFlag() bool {
	if o != nil && o.AutoAssignNewECTicketsFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoAssignNewECTicketsFlag gets a reference to the given NullableBool and assigns it to the AutoAssignNewECTicketsFlag field.
func (o *Board) SetAutoAssignNewECTicketsFlag(v bool) {
	o.AutoAssignNewECTicketsFlag.Set(&v)
}
// SetAutoAssignNewECTicketsFlagNil sets the value for AutoAssignNewECTicketsFlag to be an explicit nil
func (o *Board) SetAutoAssignNewECTicketsFlagNil() {
	o.AutoAssignNewECTicketsFlag.Set(nil)
}

// UnsetAutoAssignNewECTicketsFlag ensures that no value is present for AutoAssignNewECTicketsFlag, not even an explicit nil
func (o *Board) UnsetAutoAssignNewECTicketsFlag() {
	o.AutoAssignNewECTicketsFlag.Unset()
}

// GetAutoAssignNewPortalTicketsFlag returns the AutoAssignNewPortalTicketsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAutoAssignNewPortalTicketsFlag() bool {
	if o == nil || IsNil(o.AutoAssignNewPortalTicketsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoAssignNewPortalTicketsFlag.Get()
}

// GetAutoAssignNewPortalTicketsFlagOk returns a tuple with the AutoAssignNewPortalTicketsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAutoAssignNewPortalTicketsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoAssignNewPortalTicketsFlag.Get(), o.AutoAssignNewPortalTicketsFlag.IsSet()
}

// HasAutoAssignNewPortalTicketsFlag returns a boolean if a field has been set.
func (o *Board) HasAutoAssignNewPortalTicketsFlag() bool {
	if o != nil && o.AutoAssignNewPortalTicketsFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoAssignNewPortalTicketsFlag gets a reference to the given NullableBool and assigns it to the AutoAssignNewPortalTicketsFlag field.
func (o *Board) SetAutoAssignNewPortalTicketsFlag(v bool) {
	o.AutoAssignNewPortalTicketsFlag.Set(&v)
}
// SetAutoAssignNewPortalTicketsFlagNil sets the value for AutoAssignNewPortalTicketsFlag to be an explicit nil
func (o *Board) SetAutoAssignNewPortalTicketsFlagNil() {
	o.AutoAssignNewPortalTicketsFlag.Set(nil)
}

// UnsetAutoAssignNewPortalTicketsFlag ensures that no value is present for AutoAssignNewPortalTicketsFlag, not even an explicit nil
func (o *Board) UnsetAutoAssignNewPortalTicketsFlag() {
	o.AutoAssignNewPortalTicketsFlag.Unset()
}

// GetDiscussionsLockedFlag returns the DiscussionsLockedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetDiscussionsLockedFlag() bool {
	if o == nil || IsNil(o.DiscussionsLockedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DiscussionsLockedFlag.Get()
}

// GetDiscussionsLockedFlagOk returns a tuple with the DiscussionsLockedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetDiscussionsLockedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscussionsLockedFlag.Get(), o.DiscussionsLockedFlag.IsSet()
}

// HasDiscussionsLockedFlag returns a boolean if a field has been set.
func (o *Board) HasDiscussionsLockedFlag() bool {
	if o != nil && o.DiscussionsLockedFlag.IsSet() {
		return true
	}

	return false
}

// SetDiscussionsLockedFlag gets a reference to the given NullableBool and assigns it to the DiscussionsLockedFlag field.
func (o *Board) SetDiscussionsLockedFlag(v bool) {
	o.DiscussionsLockedFlag.Set(&v)
}
// SetDiscussionsLockedFlagNil sets the value for DiscussionsLockedFlag to be an explicit nil
func (o *Board) SetDiscussionsLockedFlagNil() {
	o.DiscussionsLockedFlag.Set(nil)
}

// UnsetDiscussionsLockedFlag ensures that no value is present for DiscussionsLockedFlag, not even an explicit nil
func (o *Board) UnsetDiscussionsLockedFlag() {
	o.DiscussionsLockedFlag.Unset()
}

// GetTimeEntryLockedFlag returns the TimeEntryLockedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetTimeEntryLockedFlag() bool {
	if o == nil || IsNil(o.TimeEntryLockedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryLockedFlag.Get()
}

// GetTimeEntryLockedFlagOk returns a tuple with the TimeEntryLockedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetTimeEntryLockedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryLockedFlag.Get(), o.TimeEntryLockedFlag.IsSet()
}

// HasTimeEntryLockedFlag returns a boolean if a field has been set.
func (o *Board) HasTimeEntryLockedFlag() bool {
	if o != nil && o.TimeEntryLockedFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryLockedFlag gets a reference to the given NullableBool and assigns it to the TimeEntryLockedFlag field.
func (o *Board) SetTimeEntryLockedFlag(v bool) {
	o.TimeEntryLockedFlag.Set(&v)
}
// SetTimeEntryLockedFlagNil sets the value for TimeEntryLockedFlag to be an explicit nil
func (o *Board) SetTimeEntryLockedFlagNil() {
	o.TimeEntryLockedFlag.Set(nil)
}

// UnsetTimeEntryLockedFlag ensures that no value is present for TimeEntryLockedFlag, not even an explicit nil
func (o *Board) UnsetTimeEntryLockedFlag() {
	o.TimeEntryLockedFlag.Unset()
}

// GetNotifyEmailFrom returns the NotifyEmailFrom field value if set, zero value otherwise.
func (o *Board) GetNotifyEmailFrom() string {
	if o == nil || IsNil(o.NotifyEmailFrom) {
		var ret string
		return ret
	}
	return *o.NotifyEmailFrom
}

// GetNotifyEmailFromOk returns a tuple with the NotifyEmailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetNotifyEmailFromOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyEmailFrom) {
		return nil, false
	}
	return o.NotifyEmailFrom, true
}

// HasNotifyEmailFrom returns a boolean if a field has been set.
func (o *Board) HasNotifyEmailFrom() bool {
	if o != nil && !IsNil(o.NotifyEmailFrom) {
		return true
	}

	return false
}

// SetNotifyEmailFrom gets a reference to the given string and assigns it to the NotifyEmailFrom field.
func (o *Board) SetNotifyEmailFrom(v string) {
	o.NotifyEmailFrom = &v
}

// GetNotifyEmailFromName returns the NotifyEmailFromName field value if set, zero value otherwise.
func (o *Board) GetNotifyEmailFromName() string {
	if o == nil || IsNil(o.NotifyEmailFromName) {
		var ret string
		return ret
	}
	return *o.NotifyEmailFromName
}

// GetNotifyEmailFromNameOk returns a tuple with the NotifyEmailFromName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetNotifyEmailFromNameOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyEmailFromName) {
		return nil, false
	}
	return o.NotifyEmailFromName, true
}

// HasNotifyEmailFromName returns a boolean if a field has been set.
func (o *Board) HasNotifyEmailFromName() bool {
	if o != nil && !IsNil(o.NotifyEmailFromName) {
		return true
	}

	return false
}

// SetNotifyEmailFromName gets a reference to the given string and assigns it to the NotifyEmailFromName field.
func (o *Board) SetNotifyEmailFromName(v string) {
	o.NotifyEmailFromName = &v
}

// GetClosedLoopDiscussionsFlag returns the ClosedLoopDiscussionsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetClosedLoopDiscussionsFlag() bool {
	if o == nil || IsNil(o.ClosedLoopDiscussionsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopDiscussionsFlag.Get()
}

// GetClosedLoopDiscussionsFlagOk returns a tuple with the ClosedLoopDiscussionsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetClosedLoopDiscussionsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopDiscussionsFlag.Get(), o.ClosedLoopDiscussionsFlag.IsSet()
}

// HasClosedLoopDiscussionsFlag returns a boolean if a field has been set.
func (o *Board) HasClosedLoopDiscussionsFlag() bool {
	if o != nil && o.ClosedLoopDiscussionsFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopDiscussionsFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopDiscussionsFlag field.
func (o *Board) SetClosedLoopDiscussionsFlag(v bool) {
	o.ClosedLoopDiscussionsFlag.Set(&v)
}
// SetClosedLoopDiscussionsFlagNil sets the value for ClosedLoopDiscussionsFlag to be an explicit nil
func (o *Board) SetClosedLoopDiscussionsFlagNil() {
	o.ClosedLoopDiscussionsFlag.Set(nil)
}

// UnsetClosedLoopDiscussionsFlag ensures that no value is present for ClosedLoopDiscussionsFlag, not even an explicit nil
func (o *Board) UnsetClosedLoopDiscussionsFlag() {
	o.ClosedLoopDiscussionsFlag.Unset()
}

// GetClosedLoopResolutionFlag returns the ClosedLoopResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetClosedLoopResolutionFlag() bool {
	if o == nil || IsNil(o.ClosedLoopResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopResolutionFlag.Get()
}

// GetClosedLoopResolutionFlagOk returns a tuple with the ClosedLoopResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetClosedLoopResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopResolutionFlag.Get(), o.ClosedLoopResolutionFlag.IsSet()
}

// HasClosedLoopResolutionFlag returns a boolean if a field has been set.
func (o *Board) HasClosedLoopResolutionFlag() bool {
	if o != nil && o.ClosedLoopResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopResolutionFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopResolutionFlag field.
func (o *Board) SetClosedLoopResolutionFlag(v bool) {
	o.ClosedLoopResolutionFlag.Set(&v)
}
// SetClosedLoopResolutionFlagNil sets the value for ClosedLoopResolutionFlag to be an explicit nil
func (o *Board) SetClosedLoopResolutionFlagNil() {
	o.ClosedLoopResolutionFlag.Set(nil)
}

// UnsetClosedLoopResolutionFlag ensures that no value is present for ClosedLoopResolutionFlag, not even an explicit nil
func (o *Board) UnsetClosedLoopResolutionFlag() {
	o.ClosedLoopResolutionFlag.Unset()
}

// GetClosedLoopInternalAnalysisFlag returns the ClosedLoopInternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetClosedLoopInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.ClosedLoopInternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopInternalAnalysisFlag.Get()
}

// GetClosedLoopInternalAnalysisFlagOk returns a tuple with the ClosedLoopInternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetClosedLoopInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopInternalAnalysisFlag.Get(), o.ClosedLoopInternalAnalysisFlag.IsSet()
}

// HasClosedLoopInternalAnalysisFlag returns a boolean if a field has been set.
func (o *Board) HasClosedLoopInternalAnalysisFlag() bool {
	if o != nil && o.ClosedLoopInternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopInternalAnalysisFlag field.
func (o *Board) SetClosedLoopInternalAnalysisFlag(v bool) {
	o.ClosedLoopInternalAnalysisFlag.Set(&v)
}
// SetClosedLoopInternalAnalysisFlagNil sets the value for ClosedLoopInternalAnalysisFlag to be an explicit nil
func (o *Board) SetClosedLoopInternalAnalysisFlagNil() {
	o.ClosedLoopInternalAnalysisFlag.Set(nil)
}

// UnsetClosedLoopInternalAnalysisFlag ensures that no value is present for ClosedLoopInternalAnalysisFlag, not even an explicit nil
func (o *Board) UnsetClosedLoopInternalAnalysisFlag() {
	o.ClosedLoopInternalAnalysisFlag.Unset()
}

// GetTimeEntryDiscussionFlag returns the TimeEntryDiscussionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetTimeEntryDiscussionFlag() bool {
	if o == nil || IsNil(o.TimeEntryDiscussionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryDiscussionFlag.Get()
}

// GetTimeEntryDiscussionFlagOk returns a tuple with the TimeEntryDiscussionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetTimeEntryDiscussionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryDiscussionFlag.Get(), o.TimeEntryDiscussionFlag.IsSet()
}

// HasTimeEntryDiscussionFlag returns a boolean if a field has been set.
func (o *Board) HasTimeEntryDiscussionFlag() bool {
	if o != nil && o.TimeEntryDiscussionFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryDiscussionFlag gets a reference to the given NullableBool and assigns it to the TimeEntryDiscussionFlag field.
func (o *Board) SetTimeEntryDiscussionFlag(v bool) {
	o.TimeEntryDiscussionFlag.Set(&v)
}
// SetTimeEntryDiscussionFlagNil sets the value for TimeEntryDiscussionFlag to be an explicit nil
func (o *Board) SetTimeEntryDiscussionFlagNil() {
	o.TimeEntryDiscussionFlag.Set(nil)
}

// UnsetTimeEntryDiscussionFlag ensures that no value is present for TimeEntryDiscussionFlag, not even an explicit nil
func (o *Board) UnsetTimeEntryDiscussionFlag() {
	o.TimeEntryDiscussionFlag.Unset()
}

// GetTimeEntryResolutionFlag returns the TimeEntryResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetTimeEntryResolutionFlag() bool {
	if o == nil || IsNil(o.TimeEntryResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryResolutionFlag.Get()
}

// GetTimeEntryResolutionFlagOk returns a tuple with the TimeEntryResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetTimeEntryResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryResolutionFlag.Get(), o.TimeEntryResolutionFlag.IsSet()
}

// HasTimeEntryResolutionFlag returns a boolean if a field has been set.
func (o *Board) HasTimeEntryResolutionFlag() bool {
	if o != nil && o.TimeEntryResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryResolutionFlag gets a reference to the given NullableBool and assigns it to the TimeEntryResolutionFlag field.
func (o *Board) SetTimeEntryResolutionFlag(v bool) {
	o.TimeEntryResolutionFlag.Set(&v)
}
// SetTimeEntryResolutionFlagNil sets the value for TimeEntryResolutionFlag to be an explicit nil
func (o *Board) SetTimeEntryResolutionFlagNil() {
	o.TimeEntryResolutionFlag.Set(nil)
}

// UnsetTimeEntryResolutionFlag ensures that no value is present for TimeEntryResolutionFlag, not even an explicit nil
func (o *Board) UnsetTimeEntryResolutionFlag() {
	o.TimeEntryResolutionFlag.Unset()
}

// GetTimeEntryInternalAnalysisFlag returns the TimeEntryInternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetTimeEntryInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.TimeEntryInternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryInternalAnalysisFlag.Get()
}

// GetTimeEntryInternalAnalysisFlagOk returns a tuple with the TimeEntryInternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetTimeEntryInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryInternalAnalysisFlag.Get(), o.TimeEntryInternalAnalysisFlag.IsSet()
}

// HasTimeEntryInternalAnalysisFlag returns a boolean if a field has been set.
func (o *Board) HasTimeEntryInternalAnalysisFlag() bool {
	if o != nil && o.TimeEntryInternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the TimeEntryInternalAnalysisFlag field.
func (o *Board) SetTimeEntryInternalAnalysisFlag(v bool) {
	o.TimeEntryInternalAnalysisFlag.Set(&v)
}
// SetTimeEntryInternalAnalysisFlagNil sets the value for TimeEntryInternalAnalysisFlag to be an explicit nil
func (o *Board) SetTimeEntryInternalAnalysisFlagNil() {
	o.TimeEntryInternalAnalysisFlag.Set(nil)
}

// UnsetTimeEntryInternalAnalysisFlag ensures that no value is present for TimeEntryInternalAnalysisFlag, not even an explicit nil
func (o *Board) UnsetTimeEntryInternalAnalysisFlag() {
	o.TimeEntryInternalAnalysisFlag.Unset()
}

// GetProblemSort returns the ProblemSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetProblemSort() string {
	if o == nil || IsNil(o.ProblemSort.Get()) {
		var ret string
		return ret
	}
	return *o.ProblemSort.Get()
}

// GetProblemSortOk returns a tuple with the ProblemSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetProblemSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProblemSort.Get(), o.ProblemSort.IsSet()
}

// HasProblemSort returns a boolean if a field has been set.
func (o *Board) HasProblemSort() bool {
	if o != nil && o.ProblemSort.IsSet() {
		return true
	}

	return false
}

// SetProblemSort gets a reference to the given NullableString and assigns it to the ProblemSort field.
func (o *Board) SetProblemSort(v string) {
	o.ProblemSort.Set(&v)
}
// SetProblemSortNil sets the value for ProblemSort to be an explicit nil
func (o *Board) SetProblemSortNil() {
	o.ProblemSort.Set(nil)
}

// UnsetProblemSort ensures that no value is present for ProblemSort, not even an explicit nil
func (o *Board) UnsetProblemSort() {
	o.ProblemSort.Unset()
}

// GetResolutionSort returns the ResolutionSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetResolutionSort() string {
	if o == nil || IsNil(o.ResolutionSort.Get()) {
		var ret string
		return ret
	}
	return *o.ResolutionSort.Get()
}

// GetResolutionSortOk returns a tuple with the ResolutionSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetResolutionSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionSort.Get(), o.ResolutionSort.IsSet()
}

// HasResolutionSort returns a boolean if a field has been set.
func (o *Board) HasResolutionSort() bool {
	if o != nil && o.ResolutionSort.IsSet() {
		return true
	}

	return false
}

// SetResolutionSort gets a reference to the given NullableString and assigns it to the ResolutionSort field.
func (o *Board) SetResolutionSort(v string) {
	o.ResolutionSort.Set(&v)
}
// SetResolutionSortNil sets the value for ResolutionSort to be an explicit nil
func (o *Board) SetResolutionSortNil() {
	o.ResolutionSort.Set(nil)
}

// UnsetResolutionSort ensures that no value is present for ResolutionSort, not even an explicit nil
func (o *Board) UnsetResolutionSort() {
	o.ResolutionSort.Unset()
}

// GetInternalAnalysisSort returns the InternalAnalysisSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetInternalAnalysisSort() string {
	if o == nil || IsNil(o.InternalAnalysisSort.Get()) {
		var ret string
		return ret
	}
	return *o.InternalAnalysisSort.Get()
}

// GetInternalAnalysisSortOk returns a tuple with the InternalAnalysisSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetInternalAnalysisSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalAnalysisSort.Get(), o.InternalAnalysisSort.IsSet()
}

// HasInternalAnalysisSort returns a boolean if a field has been set.
func (o *Board) HasInternalAnalysisSort() bool {
	if o != nil && o.InternalAnalysisSort.IsSet() {
		return true
	}

	return false
}

// SetInternalAnalysisSort gets a reference to the given NullableString and assigns it to the InternalAnalysisSort field.
func (o *Board) SetInternalAnalysisSort(v string) {
	o.InternalAnalysisSort.Set(&v)
}
// SetInternalAnalysisSortNil sets the value for InternalAnalysisSort to be an explicit nil
func (o *Board) SetInternalAnalysisSortNil() {
	o.InternalAnalysisSort.Set(nil)
}

// UnsetInternalAnalysisSort ensures that no value is present for InternalAnalysisSort, not even an explicit nil
func (o *Board) UnsetInternalAnalysisSort() {
	o.InternalAnalysisSort.Unset()
}

// GetEmailConnectorAllowReopenClosedFlag returns the EmailConnectorAllowReopenClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorAllowReopenClosedFlag() bool {
	if o == nil || IsNil(o.EmailConnectorAllowReopenClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailConnectorAllowReopenClosedFlag.Get()
}

// GetEmailConnectorAllowReopenClosedFlagOk returns a tuple with the EmailConnectorAllowReopenClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorAllowReopenClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorAllowReopenClosedFlag.Get(), o.EmailConnectorAllowReopenClosedFlag.IsSet()
}

// HasEmailConnectorAllowReopenClosedFlag returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorAllowReopenClosedFlag() bool {
	if o != nil && o.EmailConnectorAllowReopenClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorAllowReopenClosedFlag gets a reference to the given NullableBool and assigns it to the EmailConnectorAllowReopenClosedFlag field.
func (o *Board) SetEmailConnectorAllowReopenClosedFlag(v bool) {
	o.EmailConnectorAllowReopenClosedFlag.Set(&v)
}
// SetEmailConnectorAllowReopenClosedFlagNil sets the value for EmailConnectorAllowReopenClosedFlag to be an explicit nil
func (o *Board) SetEmailConnectorAllowReopenClosedFlagNil() {
	o.EmailConnectorAllowReopenClosedFlag.Set(nil)
}

// UnsetEmailConnectorAllowReopenClosedFlag ensures that no value is present for EmailConnectorAllowReopenClosedFlag, not even an explicit nil
func (o *Board) UnsetEmailConnectorAllowReopenClosedFlag() {
	o.EmailConnectorAllowReopenClosedFlag.Unset()
}

// GetEmailConnectorReopenStatus returns the EmailConnectorReopenStatus field value if set, zero value otherwise.
func (o *Board) GetEmailConnectorReopenStatus() ServiceStatusReference {
	if o == nil || IsNil(o.EmailConnectorReopenStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.EmailConnectorReopenStatus
}

// GetEmailConnectorReopenStatusOk returns a tuple with the EmailConnectorReopenStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetEmailConnectorReopenStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.EmailConnectorReopenStatus) {
		return nil, false
	}
	return o.EmailConnectorReopenStatus, true
}

// HasEmailConnectorReopenStatus returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorReopenStatus() bool {
	if o != nil && !IsNil(o.EmailConnectorReopenStatus) {
		return true
	}

	return false
}

// SetEmailConnectorReopenStatus gets a reference to the given ServiceStatusReference and assigns it to the EmailConnectorReopenStatus field.
func (o *Board) SetEmailConnectorReopenStatus(v ServiceStatusReference) {
	o.EmailConnectorReopenStatus = &v
}

// GetEmailConnectorReopenResourcesFlag returns the EmailConnectorReopenResourcesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorReopenResourcesFlag() bool {
	if o == nil || IsNil(o.EmailConnectorReopenResourcesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailConnectorReopenResourcesFlag.Get()
}

// GetEmailConnectorReopenResourcesFlagOk returns a tuple with the EmailConnectorReopenResourcesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorReopenResourcesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorReopenResourcesFlag.Get(), o.EmailConnectorReopenResourcesFlag.IsSet()
}

// HasEmailConnectorReopenResourcesFlag returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorReopenResourcesFlag() bool {
	if o != nil && o.EmailConnectorReopenResourcesFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorReopenResourcesFlag gets a reference to the given NullableBool and assigns it to the EmailConnectorReopenResourcesFlag field.
func (o *Board) SetEmailConnectorReopenResourcesFlag(v bool) {
	o.EmailConnectorReopenResourcesFlag.Set(&v)
}
// SetEmailConnectorReopenResourcesFlagNil sets the value for EmailConnectorReopenResourcesFlag to be an explicit nil
func (o *Board) SetEmailConnectorReopenResourcesFlagNil() {
	o.EmailConnectorReopenResourcesFlag.Set(nil)
}

// UnsetEmailConnectorReopenResourcesFlag ensures that no value is present for EmailConnectorReopenResourcesFlag, not even an explicit nil
func (o *Board) UnsetEmailConnectorReopenResourcesFlag() {
	o.EmailConnectorReopenResourcesFlag.Unset()
}

// GetEmailConnectorNewTicketNoMatchFlag returns the EmailConnectorNewTicketNoMatchFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorNewTicketNoMatchFlag() bool {
	if o == nil || IsNil(o.EmailConnectorNewTicketNoMatchFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailConnectorNewTicketNoMatchFlag.Get()
}

// GetEmailConnectorNewTicketNoMatchFlagOk returns a tuple with the EmailConnectorNewTicketNoMatchFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorNewTicketNoMatchFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorNewTicketNoMatchFlag.Get(), o.EmailConnectorNewTicketNoMatchFlag.IsSet()
}

// HasEmailConnectorNewTicketNoMatchFlag returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorNewTicketNoMatchFlag() bool {
	if o != nil && o.EmailConnectorNewTicketNoMatchFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorNewTicketNoMatchFlag gets a reference to the given NullableBool and assigns it to the EmailConnectorNewTicketNoMatchFlag field.
func (o *Board) SetEmailConnectorNewTicketNoMatchFlag(v bool) {
	o.EmailConnectorNewTicketNoMatchFlag.Set(&v)
}
// SetEmailConnectorNewTicketNoMatchFlagNil sets the value for EmailConnectorNewTicketNoMatchFlag to be an explicit nil
func (o *Board) SetEmailConnectorNewTicketNoMatchFlagNil() {
	o.EmailConnectorNewTicketNoMatchFlag.Set(nil)
}

// UnsetEmailConnectorNewTicketNoMatchFlag ensures that no value is present for EmailConnectorNewTicketNoMatchFlag, not even an explicit nil
func (o *Board) UnsetEmailConnectorNewTicketNoMatchFlag() {
	o.EmailConnectorNewTicketNoMatchFlag.Unset()
}

// GetEmailConnectorNeverReopenByDaysFlag returns the EmailConnectorNeverReopenByDaysFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorNeverReopenByDaysFlag() bool {
	if o == nil || IsNil(o.EmailConnectorNeverReopenByDaysFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailConnectorNeverReopenByDaysFlag.Get()
}

// GetEmailConnectorNeverReopenByDaysFlagOk returns a tuple with the EmailConnectorNeverReopenByDaysFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorNeverReopenByDaysFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorNeverReopenByDaysFlag.Get(), o.EmailConnectorNeverReopenByDaysFlag.IsSet()
}

// HasEmailConnectorNeverReopenByDaysFlag returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorNeverReopenByDaysFlag() bool {
	if o != nil && o.EmailConnectorNeverReopenByDaysFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorNeverReopenByDaysFlag gets a reference to the given NullableBool and assigns it to the EmailConnectorNeverReopenByDaysFlag field.
func (o *Board) SetEmailConnectorNeverReopenByDaysFlag(v bool) {
	o.EmailConnectorNeverReopenByDaysFlag.Set(&v)
}
// SetEmailConnectorNeverReopenByDaysFlagNil sets the value for EmailConnectorNeverReopenByDaysFlag to be an explicit nil
func (o *Board) SetEmailConnectorNeverReopenByDaysFlagNil() {
	o.EmailConnectorNeverReopenByDaysFlag.Set(nil)
}

// UnsetEmailConnectorNeverReopenByDaysFlag ensures that no value is present for EmailConnectorNeverReopenByDaysFlag, not even an explicit nil
func (o *Board) UnsetEmailConnectorNeverReopenByDaysFlag() {
	o.EmailConnectorNeverReopenByDaysFlag.Unset()
}

// GetEmailConnectorReopenDaysLimit returns the EmailConnectorReopenDaysLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorReopenDaysLimit() int32 {
	if o == nil || IsNil(o.EmailConnectorReopenDaysLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.EmailConnectorReopenDaysLimit.Get()
}

// GetEmailConnectorReopenDaysLimitOk returns a tuple with the EmailConnectorReopenDaysLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorReopenDaysLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorReopenDaysLimit.Get(), o.EmailConnectorReopenDaysLimit.IsSet()
}

// HasEmailConnectorReopenDaysLimit returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorReopenDaysLimit() bool {
	if o != nil && o.EmailConnectorReopenDaysLimit.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorReopenDaysLimit gets a reference to the given NullableInt32 and assigns it to the EmailConnectorReopenDaysLimit field.
func (o *Board) SetEmailConnectorReopenDaysLimit(v int32) {
	o.EmailConnectorReopenDaysLimit.Set(&v)
}
// SetEmailConnectorReopenDaysLimitNil sets the value for EmailConnectorReopenDaysLimit to be an explicit nil
func (o *Board) SetEmailConnectorReopenDaysLimitNil() {
	o.EmailConnectorReopenDaysLimit.Set(nil)
}

// UnsetEmailConnectorReopenDaysLimit ensures that no value is present for EmailConnectorReopenDaysLimit, not even an explicit nil
func (o *Board) UnsetEmailConnectorReopenDaysLimit() {
	o.EmailConnectorReopenDaysLimit.Unset()
}

// GetEmailConnectorNeverReopenByDaysClosedFlag returns the EmailConnectorNeverReopenByDaysClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorNeverReopenByDaysClosedFlag() bool {
	if o == nil || IsNil(o.EmailConnectorNeverReopenByDaysClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailConnectorNeverReopenByDaysClosedFlag.Get()
}

// GetEmailConnectorNeverReopenByDaysClosedFlagOk returns a tuple with the EmailConnectorNeverReopenByDaysClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorNeverReopenByDaysClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorNeverReopenByDaysClosedFlag.Get(), o.EmailConnectorNeverReopenByDaysClosedFlag.IsSet()
}

// HasEmailConnectorNeverReopenByDaysClosedFlag returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorNeverReopenByDaysClosedFlag() bool {
	if o != nil && o.EmailConnectorNeverReopenByDaysClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorNeverReopenByDaysClosedFlag gets a reference to the given NullableBool and assigns it to the EmailConnectorNeverReopenByDaysClosedFlag field.
func (o *Board) SetEmailConnectorNeverReopenByDaysClosedFlag(v bool) {
	o.EmailConnectorNeverReopenByDaysClosedFlag.Set(&v)
}
// SetEmailConnectorNeverReopenByDaysClosedFlagNil sets the value for EmailConnectorNeverReopenByDaysClosedFlag to be an explicit nil
func (o *Board) SetEmailConnectorNeverReopenByDaysClosedFlagNil() {
	o.EmailConnectorNeverReopenByDaysClosedFlag.Set(nil)
}

// UnsetEmailConnectorNeverReopenByDaysClosedFlag ensures that no value is present for EmailConnectorNeverReopenByDaysClosedFlag, not even an explicit nil
func (o *Board) UnsetEmailConnectorNeverReopenByDaysClosedFlag() {
	o.EmailConnectorNeverReopenByDaysClosedFlag.Unset()
}

// GetEmailConnectorReopenDaysClosedLimit returns the EmailConnectorReopenDaysClosedLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetEmailConnectorReopenDaysClosedLimit() int32 {
	if o == nil || IsNil(o.EmailConnectorReopenDaysClosedLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.EmailConnectorReopenDaysClosedLimit.Get()
}

// GetEmailConnectorReopenDaysClosedLimitOk returns a tuple with the EmailConnectorReopenDaysClosedLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetEmailConnectorReopenDaysClosedLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConnectorReopenDaysClosedLimit.Get(), o.EmailConnectorReopenDaysClosedLimit.IsSet()
}

// HasEmailConnectorReopenDaysClosedLimit returns a boolean if a field has been set.
func (o *Board) HasEmailConnectorReopenDaysClosedLimit() bool {
	if o != nil && o.EmailConnectorReopenDaysClosedLimit.IsSet() {
		return true
	}

	return false
}

// SetEmailConnectorReopenDaysClosedLimit gets a reference to the given NullableInt32 and assigns it to the EmailConnectorReopenDaysClosedLimit field.
func (o *Board) SetEmailConnectorReopenDaysClosedLimit(v int32) {
	o.EmailConnectorReopenDaysClosedLimit.Set(&v)
}
// SetEmailConnectorReopenDaysClosedLimitNil sets the value for EmailConnectorReopenDaysClosedLimit to be an explicit nil
func (o *Board) SetEmailConnectorReopenDaysClosedLimitNil() {
	o.EmailConnectorReopenDaysClosedLimit.Set(nil)
}

// UnsetEmailConnectorReopenDaysClosedLimit ensures that no value is present for EmailConnectorReopenDaysClosedLimit, not even an explicit nil
func (o *Board) UnsetEmailConnectorReopenDaysClosedLimit() {
	o.EmailConnectorReopenDaysClosedLimit.Unset()
}

// GetUseMemberDisplayNameFlag returns the UseMemberDisplayNameFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetUseMemberDisplayNameFlag() bool {
	if o == nil || IsNil(o.UseMemberDisplayNameFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseMemberDisplayNameFlag.Get()
}

// GetUseMemberDisplayNameFlagOk returns a tuple with the UseMemberDisplayNameFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetUseMemberDisplayNameFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseMemberDisplayNameFlag.Get(), o.UseMemberDisplayNameFlag.IsSet()
}

// HasUseMemberDisplayNameFlag returns a boolean if a field has been set.
func (o *Board) HasUseMemberDisplayNameFlag() bool {
	if o != nil && o.UseMemberDisplayNameFlag.IsSet() {
		return true
	}

	return false
}

// SetUseMemberDisplayNameFlag gets a reference to the given NullableBool and assigns it to the UseMemberDisplayNameFlag field.
func (o *Board) SetUseMemberDisplayNameFlag(v bool) {
	o.UseMemberDisplayNameFlag.Set(&v)
}
// SetUseMemberDisplayNameFlagNil sets the value for UseMemberDisplayNameFlag to be an explicit nil
func (o *Board) SetUseMemberDisplayNameFlagNil() {
	o.UseMemberDisplayNameFlag.Set(nil)
}

// UnsetUseMemberDisplayNameFlag ensures that no value is present for UseMemberDisplayNameFlag, not even an explicit nil
func (o *Board) UnsetUseMemberDisplayNameFlag() {
	o.UseMemberDisplayNameFlag.Unset()
}

// GetSendToCCFlag returns the SendToCCFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetSendToCCFlag() bool {
	if o == nil || IsNil(o.SendToCCFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendToCCFlag.Get()
}

// GetSendToCCFlagOk returns a tuple with the SendToCCFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetSendToCCFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendToCCFlag.Get(), o.SendToCCFlag.IsSet()
}

// HasSendToCCFlag returns a boolean if a field has been set.
func (o *Board) HasSendToCCFlag() bool {
	if o != nil && o.SendToCCFlag.IsSet() {
		return true
	}

	return false
}

// SetSendToCCFlag gets a reference to the given NullableBool and assigns it to the SendToCCFlag field.
func (o *Board) SetSendToCCFlag(v bool) {
	o.SendToCCFlag.Set(&v)
}
// SetSendToCCFlagNil sets the value for SendToCCFlag to be an explicit nil
func (o *Board) SetSendToCCFlagNil() {
	o.SendToCCFlag.Set(nil)
}

// UnsetSendToCCFlag ensures that no value is present for SendToCCFlag, not even an explicit nil
func (o *Board) UnsetSendToCCFlag() {
	o.SendToCCFlag.Unset()
}

// GetAutoAssignTicketOwnerFlag returns the AutoAssignTicketOwnerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAutoAssignTicketOwnerFlag() bool {
	if o == nil || IsNil(o.AutoAssignTicketOwnerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoAssignTicketOwnerFlag.Get()
}

// GetAutoAssignTicketOwnerFlagOk returns a tuple with the AutoAssignTicketOwnerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAutoAssignTicketOwnerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoAssignTicketOwnerFlag.Get(), o.AutoAssignTicketOwnerFlag.IsSet()
}

// HasAutoAssignTicketOwnerFlag returns a boolean if a field has been set.
func (o *Board) HasAutoAssignTicketOwnerFlag() bool {
	if o != nil && o.AutoAssignTicketOwnerFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoAssignTicketOwnerFlag gets a reference to the given NullableBool and assigns it to the AutoAssignTicketOwnerFlag field.
func (o *Board) SetAutoAssignTicketOwnerFlag(v bool) {
	o.AutoAssignTicketOwnerFlag.Set(&v)
}
// SetAutoAssignTicketOwnerFlagNil sets the value for AutoAssignTicketOwnerFlag to be an explicit nil
func (o *Board) SetAutoAssignTicketOwnerFlagNil() {
	o.AutoAssignTicketOwnerFlag.Set(nil)
}

// UnsetAutoAssignTicketOwnerFlag ensures that no value is present for AutoAssignTicketOwnerFlag, not even an explicit nil
func (o *Board) UnsetAutoAssignTicketOwnerFlag() {
	o.AutoAssignTicketOwnerFlag.Unset()
}

// GetAutoAssignLimitFlag returns the AutoAssignLimitFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAutoAssignLimitFlag() bool {
	if o == nil || IsNil(o.AutoAssignLimitFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoAssignLimitFlag.Get()
}

// GetAutoAssignLimitFlagOk returns a tuple with the AutoAssignLimitFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAutoAssignLimitFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoAssignLimitFlag.Get(), o.AutoAssignLimitFlag.IsSet()
}

// HasAutoAssignLimitFlag returns a boolean if a field has been set.
func (o *Board) HasAutoAssignLimitFlag() bool {
	if o != nil && o.AutoAssignLimitFlag.IsSet() {
		return true
	}

	return false
}

// SetAutoAssignLimitFlag gets a reference to the given NullableBool and assigns it to the AutoAssignLimitFlag field.
func (o *Board) SetAutoAssignLimitFlag(v bool) {
	o.AutoAssignLimitFlag.Set(&v)
}
// SetAutoAssignLimitFlagNil sets the value for AutoAssignLimitFlag to be an explicit nil
func (o *Board) SetAutoAssignLimitFlagNil() {
	o.AutoAssignLimitFlag.Set(nil)
}

// UnsetAutoAssignLimitFlag ensures that no value is present for AutoAssignLimitFlag, not even an explicit nil
func (o *Board) UnsetAutoAssignLimitFlag() {
	o.AutoAssignLimitFlag.Unset()
}

// GetAutoAssignLimitAmount returns the AutoAssignLimitAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAutoAssignLimitAmount() int32 {
	if o == nil || IsNil(o.AutoAssignLimitAmount.Get()) {
		var ret int32
		return ret
	}
	return *o.AutoAssignLimitAmount.Get()
}

// GetAutoAssignLimitAmountOk returns a tuple with the AutoAssignLimitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAutoAssignLimitAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoAssignLimitAmount.Get(), o.AutoAssignLimitAmount.IsSet()
}

// HasAutoAssignLimitAmount returns a boolean if a field has been set.
func (o *Board) HasAutoAssignLimitAmount() bool {
	if o != nil && o.AutoAssignLimitAmount.IsSet() {
		return true
	}

	return false
}

// SetAutoAssignLimitAmount gets a reference to the given NullableInt32 and assigns it to the AutoAssignLimitAmount field.
func (o *Board) SetAutoAssignLimitAmount(v int32) {
	o.AutoAssignLimitAmount.Set(&v)
}
// SetAutoAssignLimitAmountNil sets the value for AutoAssignLimitAmount to be an explicit nil
func (o *Board) SetAutoAssignLimitAmountNil() {
	o.AutoAssignLimitAmount.Set(nil)
}

// UnsetAutoAssignLimitAmount ensures that no value is present for AutoAssignLimitAmount, not even an explicit nil
func (o *Board) UnsetAutoAssignLimitAmount() {
	o.AutoAssignLimitAmount.Unset()
}

// GetClosedLoopAllFlag returns the ClosedLoopAllFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetClosedLoopAllFlag() bool {
	if o == nil || IsNil(o.ClosedLoopAllFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedLoopAllFlag.Get()
}

// GetClosedLoopAllFlagOk returns a tuple with the ClosedLoopAllFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetClosedLoopAllFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedLoopAllFlag.Get(), o.ClosedLoopAllFlag.IsSet()
}

// HasClosedLoopAllFlag returns a boolean if a field has been set.
func (o *Board) HasClosedLoopAllFlag() bool {
	if o != nil && o.ClosedLoopAllFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedLoopAllFlag gets a reference to the given NullableBool and assigns it to the ClosedLoopAllFlag field.
func (o *Board) SetClosedLoopAllFlag(v bool) {
	o.ClosedLoopAllFlag.Set(&v)
}
// SetClosedLoopAllFlagNil sets the value for ClosedLoopAllFlag to be an explicit nil
func (o *Board) SetClosedLoopAllFlagNil() {
	o.ClosedLoopAllFlag.Set(nil)
}

// UnsetClosedLoopAllFlag ensures that no value is present for ClosedLoopAllFlag, not even an explicit nil
func (o *Board) UnsetClosedLoopAllFlag() {
	o.ClosedLoopAllFlag.Unset()
}

// GetPercentageCalculation returns the PercentageCalculation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetPercentageCalculation() string {
	if o == nil || IsNil(o.PercentageCalculation.Get()) {
		var ret string
		return ret
	}
	return *o.PercentageCalculation.Get()
}

// GetPercentageCalculationOk returns a tuple with the PercentageCalculation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetPercentageCalculationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PercentageCalculation.Get(), o.PercentageCalculation.IsSet()
}

// HasPercentageCalculation returns a boolean if a field has been set.
func (o *Board) HasPercentageCalculation() bool {
	if o != nil && o.PercentageCalculation.IsSet() {
		return true
	}

	return false
}

// SetPercentageCalculation gets a reference to the given NullableString and assigns it to the PercentageCalculation field.
func (o *Board) SetPercentageCalculation(v string) {
	o.PercentageCalculation.Set(&v)
}
// SetPercentageCalculationNil sets the value for PercentageCalculation to be an explicit nil
func (o *Board) SetPercentageCalculationNil() {
	o.PercentageCalculation.Set(nil)
}

// UnsetPercentageCalculation ensures that no value is present for PercentageCalculation, not even an explicit nil
func (o *Board) UnsetPercentageCalculation() {
	o.PercentageCalculation.Unset()
}

// GetAllSort returns the AllSort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetAllSort() string {
	if o == nil || IsNil(o.AllSort.Get()) {
		var ret string
		return ret
	}
	return *o.AllSort.Get()
}

// GetAllSortOk returns a tuple with the AllSort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetAllSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllSort.Get(), o.AllSort.IsSet()
}

// HasAllSort returns a boolean if a field has been set.
func (o *Board) HasAllSort() bool {
	if o != nil && o.AllSort.IsSet() {
		return true
	}

	return false
}

// SetAllSort gets a reference to the given NullableString and assigns it to the AllSort field.
func (o *Board) SetAllSort(v string) {
	o.AllSort.Set(&v)
}
// SetAllSortNil sets the value for AllSort to be an explicit nil
func (o *Board) SetAllSortNil() {
	o.AllSort.Set(nil)
}

// UnsetAllSort ensures that no value is present for AllSort, not even an explicit nil
func (o *Board) UnsetAllSort() {
	o.AllSort.Unset()
}

// GetMarkFirstNoteIssueFlag returns the MarkFirstNoteIssueFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetMarkFirstNoteIssueFlag() bool {
	if o == nil || IsNil(o.MarkFirstNoteIssueFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkFirstNoteIssueFlag.Get()
}

// GetMarkFirstNoteIssueFlagOk returns a tuple with the MarkFirstNoteIssueFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetMarkFirstNoteIssueFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkFirstNoteIssueFlag.Get(), o.MarkFirstNoteIssueFlag.IsSet()
}

// HasMarkFirstNoteIssueFlag returns a boolean if a field has been set.
func (o *Board) HasMarkFirstNoteIssueFlag() bool {
	if o != nil && o.MarkFirstNoteIssueFlag.IsSet() {
		return true
	}

	return false
}

// SetMarkFirstNoteIssueFlag gets a reference to the given NullableBool and assigns it to the MarkFirstNoteIssueFlag field.
func (o *Board) SetMarkFirstNoteIssueFlag(v bool) {
	o.MarkFirstNoteIssueFlag.Set(&v)
}
// SetMarkFirstNoteIssueFlagNil sets the value for MarkFirstNoteIssueFlag to be an explicit nil
func (o *Board) SetMarkFirstNoteIssueFlagNil() {
	o.MarkFirstNoteIssueFlag.Set(nil)
}

// UnsetMarkFirstNoteIssueFlag ensures that no value is present for MarkFirstNoteIssueFlag, not even an explicit nil
func (o *Board) UnsetMarkFirstNoteIssueFlag() {
	o.MarkFirstNoteIssueFlag.Unset()
}

// GetRestrictBoardByDefaultFlag returns the RestrictBoardByDefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetRestrictBoardByDefaultFlag() bool {
	if o == nil || IsNil(o.RestrictBoardByDefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictBoardByDefaultFlag.Get()
}

// GetRestrictBoardByDefaultFlagOk returns a tuple with the RestrictBoardByDefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetRestrictBoardByDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictBoardByDefaultFlag.Get(), o.RestrictBoardByDefaultFlag.IsSet()
}

// HasRestrictBoardByDefaultFlag returns a boolean if a field has been set.
func (o *Board) HasRestrictBoardByDefaultFlag() bool {
	if o != nil && o.RestrictBoardByDefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictBoardByDefaultFlag gets a reference to the given NullableBool and assigns it to the RestrictBoardByDefaultFlag field.
func (o *Board) SetRestrictBoardByDefaultFlag(v bool) {
	o.RestrictBoardByDefaultFlag.Set(&v)
}
// SetRestrictBoardByDefaultFlagNil sets the value for RestrictBoardByDefaultFlag to be an explicit nil
func (o *Board) SetRestrictBoardByDefaultFlagNil() {
	o.RestrictBoardByDefaultFlag.Set(nil)
}

// UnsetRestrictBoardByDefaultFlag ensures that no value is present for RestrictBoardByDefaultFlag, not even an explicit nil
func (o *Board) UnsetRestrictBoardByDefaultFlag() {
	o.RestrictBoardByDefaultFlag.Unset()
}

// GetSendToBundledFlag returns the SendToBundledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Board) GetSendToBundledFlag() bool {
	if o == nil || IsNil(o.SendToBundledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendToBundledFlag.Get()
}

// GetSendToBundledFlagOk returns a tuple with the SendToBundledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Board) GetSendToBundledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendToBundledFlag.Get(), o.SendToBundledFlag.IsSet()
}

// HasSendToBundledFlag returns a boolean if a field has been set.
func (o *Board) HasSendToBundledFlag() bool {
	if o != nil && o.SendToBundledFlag.IsSet() {
		return true
	}

	return false
}

// SetSendToBundledFlag gets a reference to the given NullableBool and assigns it to the SendToBundledFlag field.
func (o *Board) SetSendToBundledFlag(v bool) {
	o.SendToBundledFlag.Set(&v)
}
// SetSendToBundledFlagNil sets the value for SendToBundledFlag to be an explicit nil
func (o *Board) SetSendToBundledFlagNil() {
	o.SendToBundledFlag.Set(nil)
}

// UnsetSendToBundledFlag ensures that no value is present for SendToBundledFlag, not even an explicit nil
func (o *Board) UnsetSendToBundledFlag() {
	o.SendToBundledFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Board) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Board) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Board) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Board) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Board) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Board) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["location"] = o.Location
	toSerialize["department"] = o.Department
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.SignOffTemplate) {
		toSerialize["signOffTemplate"] = o.SignOffTemplate
	}
	if o.SendToContactFlag.IsSet() {
		toSerialize["sendToContactFlag"] = o.SendToContactFlag.Get()
	}
	if !IsNil(o.ContactTemplate) {
		toSerialize["contactTemplate"] = o.ContactTemplate
	}
	if o.SendToResourceFlag.IsSet() {
		toSerialize["sendToResourceFlag"] = o.SendToResourceFlag.Get()
	}
	if !IsNil(o.ResourceTemplate) {
		toSerialize["resourceTemplate"] = o.ResourceTemplate
	}
	if o.ProjectFlag.IsSet() {
		toSerialize["projectFlag"] = o.ProjectFlag.Get()
	}
	if o.ShowDependenciesFlag.IsSet() {
		toSerialize["showDependenciesFlag"] = o.ShowDependenciesFlag.Get()
	}
	if o.ShowEstimatesFlag.IsSet() {
		toSerialize["showEstimatesFlag"] = o.ShowEstimatesFlag.Get()
	}
	if !IsNil(o.BoardIcon) {
		toSerialize["boardIcon"] = o.BoardIcon
	}
	if o.BillTicketsAfterClosedFlag.IsSet() {
		toSerialize["billTicketsAfterClosedFlag"] = o.BillTicketsAfterClosedFlag.Get()
	}
	if o.BillTicketSeparatelyFlag.IsSet() {
		toSerialize["billTicketSeparatelyFlag"] = o.BillTicketSeparatelyFlag.Get()
	}
	if o.BillUnapprovedTimeExpenseFlag.IsSet() {
		toSerialize["billUnapprovedTimeExpenseFlag"] = o.BillUnapprovedTimeExpenseFlag.Get()
	}
	if o.OverrideBillingSetupFlag.IsSet() {
		toSerialize["overrideBillingSetupFlag"] = o.OverrideBillingSetupFlag.Get()
	}
	if !IsNil(o.DispatchMember) {
		toSerialize["dispatchMember"] = o.DispatchMember
	}
	if !IsNil(o.ServiceManagerMember) {
		toSerialize["serviceManagerMember"] = o.ServiceManagerMember
	}
	if !IsNil(o.DutyManagerMember) {
		toSerialize["dutyManagerMember"] = o.DutyManagerMember
	}
	if !IsNil(o.OncallMember) {
		toSerialize["oncallMember"] = o.OncallMember
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.BillExpense.IsSet() {
		toSerialize["billExpense"] = o.BillExpense.Get()
	}
	if o.BillProduct.IsSet() {
		toSerialize["billProduct"] = o.BillProduct.Get()
	}
	if !IsNil(o.AutoCloseStatus) {
		toSerialize["autoCloseStatus"] = o.AutoCloseStatus
	}
	if o.AutoAssignNewTicketsFlag.IsSet() {
		toSerialize["autoAssignNewTicketsFlag"] = o.AutoAssignNewTicketsFlag.Get()
	}
	if o.AutoAssignNewECTicketsFlag.IsSet() {
		toSerialize["autoAssignNewECTicketsFlag"] = o.AutoAssignNewECTicketsFlag.Get()
	}
	if o.AutoAssignNewPortalTicketsFlag.IsSet() {
		toSerialize["autoAssignNewPortalTicketsFlag"] = o.AutoAssignNewPortalTicketsFlag.Get()
	}
	if o.DiscussionsLockedFlag.IsSet() {
		toSerialize["discussionsLockedFlag"] = o.DiscussionsLockedFlag.Get()
	}
	if o.TimeEntryLockedFlag.IsSet() {
		toSerialize["timeEntryLockedFlag"] = o.TimeEntryLockedFlag.Get()
	}
	if !IsNil(o.NotifyEmailFrom) {
		toSerialize["notifyEmailFrom"] = o.NotifyEmailFrom
	}
	if !IsNil(o.NotifyEmailFromName) {
		toSerialize["notifyEmailFromName"] = o.NotifyEmailFromName
	}
	if o.ClosedLoopDiscussionsFlag.IsSet() {
		toSerialize["closedLoopDiscussionsFlag"] = o.ClosedLoopDiscussionsFlag.Get()
	}
	if o.ClosedLoopResolutionFlag.IsSet() {
		toSerialize["closedLoopResolutionFlag"] = o.ClosedLoopResolutionFlag.Get()
	}
	if o.ClosedLoopInternalAnalysisFlag.IsSet() {
		toSerialize["closedLoopInternalAnalysisFlag"] = o.ClosedLoopInternalAnalysisFlag.Get()
	}
	if o.TimeEntryDiscussionFlag.IsSet() {
		toSerialize["timeEntryDiscussionFlag"] = o.TimeEntryDiscussionFlag.Get()
	}
	if o.TimeEntryResolutionFlag.IsSet() {
		toSerialize["timeEntryResolutionFlag"] = o.TimeEntryResolutionFlag.Get()
	}
	if o.TimeEntryInternalAnalysisFlag.IsSet() {
		toSerialize["timeEntryInternalAnalysisFlag"] = o.TimeEntryInternalAnalysisFlag.Get()
	}
	if o.ProblemSort.IsSet() {
		toSerialize["problemSort"] = o.ProblemSort.Get()
	}
	if o.ResolutionSort.IsSet() {
		toSerialize["resolutionSort"] = o.ResolutionSort.Get()
	}
	if o.InternalAnalysisSort.IsSet() {
		toSerialize["internalAnalysisSort"] = o.InternalAnalysisSort.Get()
	}
	if o.EmailConnectorAllowReopenClosedFlag.IsSet() {
		toSerialize["emailConnectorAllowReopenClosedFlag"] = o.EmailConnectorAllowReopenClosedFlag.Get()
	}
	if !IsNil(o.EmailConnectorReopenStatus) {
		toSerialize["emailConnectorReopenStatus"] = o.EmailConnectorReopenStatus
	}
	if o.EmailConnectorReopenResourcesFlag.IsSet() {
		toSerialize["emailConnectorReopenResourcesFlag"] = o.EmailConnectorReopenResourcesFlag.Get()
	}
	if o.EmailConnectorNewTicketNoMatchFlag.IsSet() {
		toSerialize["emailConnectorNewTicketNoMatchFlag"] = o.EmailConnectorNewTicketNoMatchFlag.Get()
	}
	if o.EmailConnectorNeverReopenByDaysFlag.IsSet() {
		toSerialize["emailConnectorNeverReopenByDaysFlag"] = o.EmailConnectorNeverReopenByDaysFlag.Get()
	}
	if o.EmailConnectorReopenDaysLimit.IsSet() {
		toSerialize["emailConnectorReopenDaysLimit"] = o.EmailConnectorReopenDaysLimit.Get()
	}
	if o.EmailConnectorNeverReopenByDaysClosedFlag.IsSet() {
		toSerialize["emailConnectorNeverReopenByDaysClosedFlag"] = o.EmailConnectorNeverReopenByDaysClosedFlag.Get()
	}
	if o.EmailConnectorReopenDaysClosedLimit.IsSet() {
		toSerialize["emailConnectorReopenDaysClosedLimit"] = o.EmailConnectorReopenDaysClosedLimit.Get()
	}
	if o.UseMemberDisplayNameFlag.IsSet() {
		toSerialize["useMemberDisplayNameFlag"] = o.UseMemberDisplayNameFlag.Get()
	}
	if o.SendToCCFlag.IsSet() {
		toSerialize["sendToCCFlag"] = o.SendToCCFlag.Get()
	}
	if o.AutoAssignTicketOwnerFlag.IsSet() {
		toSerialize["autoAssignTicketOwnerFlag"] = o.AutoAssignTicketOwnerFlag.Get()
	}
	if o.AutoAssignLimitFlag.IsSet() {
		toSerialize["autoAssignLimitFlag"] = o.AutoAssignLimitFlag.Get()
	}
	if o.AutoAssignLimitAmount.IsSet() {
		toSerialize["autoAssignLimitAmount"] = o.AutoAssignLimitAmount.Get()
	}
	if o.ClosedLoopAllFlag.IsSet() {
		toSerialize["closedLoopAllFlag"] = o.ClosedLoopAllFlag.Get()
	}
	if o.PercentageCalculation.IsSet() {
		toSerialize["percentageCalculation"] = o.PercentageCalculation.Get()
	}
	if o.AllSort.IsSet() {
		toSerialize["allSort"] = o.AllSort.Get()
	}
	if o.MarkFirstNoteIssueFlag.IsSet() {
		toSerialize["markFirstNoteIssueFlag"] = o.MarkFirstNoteIssueFlag.Get()
	}
	if o.RestrictBoardByDefaultFlag.IsSet() {
		toSerialize["restrictBoardByDefaultFlag"] = o.RestrictBoardByDefaultFlag.Get()
	}
	if o.SendToBundledFlag.IsSet() {
		toSerialize["sendToBundledFlag"] = o.SendToBundledFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Board) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"location",
		"department",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoard := _Board{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoard)

	if err != nil {
		return err
	}

	*o = Board(varBoard)

	return err
}

type NullableBoard struct {
	value *Board
	isSet bool
}

func (v NullableBoard) Get() *Board {
	return v.value
}

func (v *NullableBoard) Set(val *Board) {
	v.value = val
	v.isSet = true
}

func (v NullableBoard) IsSet() bool {
	return v.isSet
}

func (v *NullableBoard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoard(val *Board) *NullableBoard {
	return &NullableBoard{value: val, isSet: true}
}

func (v NullableBoard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


