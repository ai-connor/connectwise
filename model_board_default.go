/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BoardDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardDefault{}

// BoardDefault struct for BoardDefault
type BoardDefault struct {
	Id *int32 `json:"id,omitempty"`
	Board BoardReference `json:"board"`
	ServiceType *ServiceTypeReference `json:"serviceType,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	AgreementId NullableInt32 `json:"agreementId,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _BoardDefault BoardDefault

// NewBoardDefault instantiates a new BoardDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardDefault(board BoardReference) *BoardDefault {
	this := BoardDefault{}
	this.Board = board
	return &this
}

// NewBoardDefaultWithDefaults instantiates a new BoardDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardDefaultWithDefaults() *BoardDefault {
	this := BoardDefault{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardDefault) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardDefault) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardDefault) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardDefault) SetId(v int32) {
	o.Id = &v
}

// GetBoard returns the Board field value
func (o *BoardDefault) GetBoard() BoardReference {
	if o == nil {
		var ret BoardReference
		return ret
	}

	return o.Board
}

// GetBoardOk returns a tuple with the Board field value
// and a boolean to check if the value has been set.
func (o *BoardDefault) GetBoardOk() (*BoardReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Board, true
}

// SetBoard sets field value
func (o *BoardDefault) SetBoard(v BoardReference) {
	o.Board = v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *BoardDefault) GetServiceType() ServiceTypeReference {
	if o == nil || IsNil(o.ServiceType) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardDefault) GetServiceTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *BoardDefault) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given ServiceTypeReference and assigns it to the ServiceType field.
func (o *BoardDefault) SetServiceType(v ServiceTypeReference) {
	o.ServiceType = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardDefault) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardDefault) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *BoardDefault) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *BoardDefault) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *BoardDefault) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *BoardDefault) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetAgreementId returns the AgreementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardDefault) GetAgreementId() int32 {
	if o == nil || IsNil(o.AgreementId.Get()) {
		var ret int32
		return ret
	}
	return *o.AgreementId.Get()
}

// GetAgreementIdOk returns a tuple with the AgreementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardDefault) GetAgreementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementId.Get(), o.AgreementId.IsSet()
}

// HasAgreementId returns a boolean if a field has been set.
func (o *BoardDefault) HasAgreementId() bool {
	if o != nil && o.AgreementId.IsSet() {
		return true
	}

	return false
}

// SetAgreementId gets a reference to the given NullableInt32 and assigns it to the AgreementId field.
func (o *BoardDefault) SetAgreementId(v int32) {
	o.AgreementId.Set(&v)
}
// SetAgreementIdNil sets the value for AgreementId to be an explicit nil
func (o *BoardDefault) SetAgreementIdNil() {
	o.AgreementId.Set(nil)
}

// UnsetAgreementId ensures that no value is present for AgreementId, not even an explicit nil
func (o *BoardDefault) UnsetAgreementId() {
	o.AgreementId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardDefault) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardDefault) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardDefault) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardDefault) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["board"] = o.Board
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.AgreementId.IsSet() {
		toSerialize["agreementId"] = o.AgreementId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *BoardDefault) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"board",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardDefault := _BoardDefault{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoardDefault)

	if err != nil {
		return err
	}

	*o = BoardDefault(varBoardDefault)

	return err
}

type NullableBoardDefault struct {
	value *BoardDefault
	isSet bool
}

func (v NullableBoardDefault) Get() *BoardDefault {
	return v.value
}

func (v *NullableBoardDefault) Set(val *BoardDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardDefault(val *BoardDefault) *NullableBoardDefault {
	return &NullableBoardDefault{value: val, isSet: true}
}

func (v NullableBoardDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


