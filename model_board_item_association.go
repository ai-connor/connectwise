/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BoardItemAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardItemAssociation{}

// BoardItemAssociation struct for BoardItemAssociation
type BoardItemAssociation struct {
	Id int32 `json:"id"`
	// If addAllSubTypesFlag and removeAllSubTypesFlag are both false, this field is required.
	SubTypeAssociationIds []int32 `json:"subTypeAssociationIds,omitempty"`
	AddAllSubTypesFlag NullableBool `json:"addAllSubTypesFlag,omitempty"`
	RemoveAllSubTypesFlag NullableBool `json:"removeAllSubTypesFlag,omitempty"`
	Item *ServiceItemReference `json:"item,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _BoardItemAssociation BoardItemAssociation

// NewBoardItemAssociation instantiates a new BoardItemAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardItemAssociation(id int32) *BoardItemAssociation {
	this := BoardItemAssociation{}
	this.Id = id
	return &this
}

// NewBoardItemAssociationWithDefaults instantiates a new BoardItemAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardItemAssociationWithDefaults() *BoardItemAssociation {
	this := BoardItemAssociation{}
	return &this
}

// GetId returns the Id field value
func (o *BoardItemAssociation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BoardItemAssociation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BoardItemAssociation) SetId(v int32) {
	o.Id = v
}

// GetSubTypeAssociationIds returns the SubTypeAssociationIds field value if set, zero value otherwise.
func (o *BoardItemAssociation) GetSubTypeAssociationIds() []int32 {
	if o == nil || IsNil(o.SubTypeAssociationIds) {
		var ret []int32
		return ret
	}
	return o.SubTypeAssociationIds
}

// GetSubTypeAssociationIdsOk returns a tuple with the SubTypeAssociationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemAssociation) GetSubTypeAssociationIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.SubTypeAssociationIds) {
		return nil, false
	}
	return o.SubTypeAssociationIds, true
}

// HasSubTypeAssociationIds returns a boolean if a field has been set.
func (o *BoardItemAssociation) HasSubTypeAssociationIds() bool {
	if o != nil && !IsNil(o.SubTypeAssociationIds) {
		return true
	}

	return false
}

// SetSubTypeAssociationIds gets a reference to the given []int32 and assigns it to the SubTypeAssociationIds field.
func (o *BoardItemAssociation) SetSubTypeAssociationIds(v []int32) {
	o.SubTypeAssociationIds = v
}

// GetAddAllSubTypesFlag returns the AddAllSubTypesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardItemAssociation) GetAddAllSubTypesFlag() bool {
	if o == nil || IsNil(o.AddAllSubTypesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllSubTypesFlag.Get()
}

// GetAddAllSubTypesFlagOk returns a tuple with the AddAllSubTypesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardItemAssociation) GetAddAllSubTypesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllSubTypesFlag.Get(), o.AddAllSubTypesFlag.IsSet()
}

// HasAddAllSubTypesFlag returns a boolean if a field has been set.
func (o *BoardItemAssociation) HasAddAllSubTypesFlag() bool {
	if o != nil && o.AddAllSubTypesFlag.IsSet() {
		return true
	}

	return false
}

// SetAddAllSubTypesFlag gets a reference to the given NullableBool and assigns it to the AddAllSubTypesFlag field.
func (o *BoardItemAssociation) SetAddAllSubTypesFlag(v bool) {
	o.AddAllSubTypesFlag.Set(&v)
}
// SetAddAllSubTypesFlagNil sets the value for AddAllSubTypesFlag to be an explicit nil
func (o *BoardItemAssociation) SetAddAllSubTypesFlagNil() {
	o.AddAllSubTypesFlag.Set(nil)
}

// UnsetAddAllSubTypesFlag ensures that no value is present for AddAllSubTypesFlag, not even an explicit nil
func (o *BoardItemAssociation) UnsetAddAllSubTypesFlag() {
	o.AddAllSubTypesFlag.Unset()
}

// GetRemoveAllSubTypesFlag returns the RemoveAllSubTypesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardItemAssociation) GetRemoveAllSubTypesFlag() bool {
	if o == nil || IsNil(o.RemoveAllSubTypesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllSubTypesFlag.Get()
}

// GetRemoveAllSubTypesFlagOk returns a tuple with the RemoveAllSubTypesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardItemAssociation) GetRemoveAllSubTypesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllSubTypesFlag.Get(), o.RemoveAllSubTypesFlag.IsSet()
}

// HasRemoveAllSubTypesFlag returns a boolean if a field has been set.
func (o *BoardItemAssociation) HasRemoveAllSubTypesFlag() bool {
	if o != nil && o.RemoveAllSubTypesFlag.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllSubTypesFlag gets a reference to the given NullableBool and assigns it to the RemoveAllSubTypesFlag field.
func (o *BoardItemAssociation) SetRemoveAllSubTypesFlag(v bool) {
	o.RemoveAllSubTypesFlag.Set(&v)
}
// SetRemoveAllSubTypesFlagNil sets the value for RemoveAllSubTypesFlag to be an explicit nil
func (o *BoardItemAssociation) SetRemoveAllSubTypesFlagNil() {
	o.RemoveAllSubTypesFlag.Set(nil)
}

// UnsetRemoveAllSubTypesFlag ensures that no value is present for RemoveAllSubTypesFlag, not even an explicit nil
func (o *BoardItemAssociation) UnsetRemoveAllSubTypesFlag() {
	o.RemoveAllSubTypesFlag.Unset()
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *BoardItemAssociation) GetItem() ServiceItemReference {
	if o == nil || IsNil(o.Item) {
		var ret ServiceItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemAssociation) GetItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *BoardItemAssociation) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given ServiceItemReference and assigns it to the Item field.
func (o *BoardItemAssociation) SetItem(v ServiceItemReference) {
	o.Item = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *BoardItemAssociation) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemAssociation) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *BoardItemAssociation) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *BoardItemAssociation) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardItemAssociation) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemAssociation) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardItemAssociation) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardItemAssociation) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardItemAssociation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardItemAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.SubTypeAssociationIds) {
		toSerialize["subTypeAssociationIds"] = o.SubTypeAssociationIds
	}
	if o.AddAllSubTypesFlag.IsSet() {
		toSerialize["addAllSubTypesFlag"] = o.AddAllSubTypesFlag.Get()
	}
	if o.RemoveAllSubTypesFlag.IsSet() {
		toSerialize["removeAllSubTypesFlag"] = o.RemoveAllSubTypesFlag.Get()
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *BoardItemAssociation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardItemAssociation := _BoardItemAssociation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoardItemAssociation)

	if err != nil {
		return err
	}

	*o = BoardItemAssociation(varBoardItemAssociation)

	return err
}

type NullableBoardItemAssociation struct {
	value *BoardItemAssociation
	isSet bool
}

func (v NullableBoardItemAssociation) Get() *BoardItemAssociation {
	return v.value
}

func (v *NullableBoardItemAssociation) Set(val *BoardItemAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardItemAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardItemAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardItemAssociation(val *BoardItemAssociation) *NullableBoardItemAssociation {
	return &NullableBoardItemAssociation{value: val, isSet: true}
}

func (v NullableBoardItemAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardItemAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


