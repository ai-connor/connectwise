/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BoardStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardStatus{}

// BoardStatus struct for BoardStatus
type BoardStatus struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Board *BoardReference `json:"board,omitempty"`
	SortOrder NullableInt32 `json:"sortOrder,omitempty"`
	DisplayOnBoard NullableBool `json:"displayOnBoard,omitempty"`
	Inactive NullableBool `json:"inactive,omitempty"`
	ClosedStatus NullableBool `json:"closedStatus,omitempty"`
	TimeEntryNotAllowed NullableBool `json:"timeEntryNotAllowed,omitempty"`
	RoundRobinCatchall NullableBool `json:"roundRobinCatchall,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	EscalationStatus NullableString `json:"escalationStatus,omitempty"`
	//  Max length: 500;
	CustomerPortalDescription *string `json:"customerPortalDescription,omitempty"`
	CustomerPortalFlag NullableBool `json:"customerPortalFlag,omitempty"`
	EmailTemplate *ServiceEmailTemplateReference `json:"emailTemplate,omitempty"`
	StatusIndicator *StatusIndicatorReference `json:"statusIndicator,omitempty"`
	//  Max length: 30;
	CustomStatusIndicatorName *string `json:"customStatusIndicatorName,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	SaveTimeAsNote NullableBool `json:"saveTimeAsNote,omitempty"`
}

type _BoardStatus BoardStatus

// NewBoardStatus instantiates a new BoardStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardStatus(name string) *BoardStatus {
	this := BoardStatus{}
	this.Name = name
	return &this
}

// NewBoardStatusWithDefaults instantiates a new BoardStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardStatusWithDefaults() *BoardStatus {
	this := BoardStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardStatus) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardStatus) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *BoardStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BoardStatus) SetName(v string) {
	o.Name = v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *BoardStatus) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *BoardStatus) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *BoardStatus) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder.Get()) {
		var ret int32
		return ret
	}
	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// HasSortOrder returns a boolean if a field has been set.
func (o *BoardStatus) HasSortOrder() bool {
	if o != nil && o.SortOrder.IsSet() {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given NullableInt32 and assigns it to the SortOrder field.
func (o *BoardStatus) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}
// SetSortOrderNil sets the value for SortOrder to be an explicit nil
func (o *BoardStatus) SetSortOrderNil() {
	o.SortOrder.Set(nil)
}

// UnsetSortOrder ensures that no value is present for SortOrder, not even an explicit nil
func (o *BoardStatus) UnsetSortOrder() {
	o.SortOrder.Unset()
}

// GetDisplayOnBoard returns the DisplayOnBoard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetDisplayOnBoard() bool {
	if o == nil || IsNil(o.DisplayOnBoard.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplayOnBoard.Get()
}

// GetDisplayOnBoardOk returns a tuple with the DisplayOnBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetDisplayOnBoardOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayOnBoard.Get(), o.DisplayOnBoard.IsSet()
}

// HasDisplayOnBoard returns a boolean if a field has been set.
func (o *BoardStatus) HasDisplayOnBoard() bool {
	if o != nil && o.DisplayOnBoard.IsSet() {
		return true
	}

	return false
}

// SetDisplayOnBoard gets a reference to the given NullableBool and assigns it to the DisplayOnBoard field.
func (o *BoardStatus) SetDisplayOnBoard(v bool) {
	o.DisplayOnBoard.Set(&v)
}
// SetDisplayOnBoardNil sets the value for DisplayOnBoard to be an explicit nil
func (o *BoardStatus) SetDisplayOnBoardNil() {
	o.DisplayOnBoard.Set(nil)
}

// UnsetDisplayOnBoard ensures that no value is present for DisplayOnBoard, not even an explicit nil
func (o *BoardStatus) UnsetDisplayOnBoard() {
	o.DisplayOnBoard.Unset()
}

// GetInactive returns the Inactive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetInactive() bool {
	if o == nil || IsNil(o.Inactive.Get()) {
		var ret bool
		return ret
	}
	return *o.Inactive.Get()
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetInactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inactive.Get(), o.Inactive.IsSet()
}

// HasInactive returns a boolean if a field has been set.
func (o *BoardStatus) HasInactive() bool {
	if o != nil && o.Inactive.IsSet() {
		return true
	}

	return false
}

// SetInactive gets a reference to the given NullableBool and assigns it to the Inactive field.
func (o *BoardStatus) SetInactive(v bool) {
	o.Inactive.Set(&v)
}
// SetInactiveNil sets the value for Inactive to be an explicit nil
func (o *BoardStatus) SetInactiveNil() {
	o.Inactive.Set(nil)
}

// UnsetInactive ensures that no value is present for Inactive, not even an explicit nil
func (o *BoardStatus) UnsetInactive() {
	o.Inactive.Unset()
}

// GetClosedStatus returns the ClosedStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetClosedStatus() bool {
	if o == nil || IsNil(o.ClosedStatus.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedStatus.Get()
}

// GetClosedStatusOk returns a tuple with the ClosedStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetClosedStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedStatus.Get(), o.ClosedStatus.IsSet()
}

// HasClosedStatus returns a boolean if a field has been set.
func (o *BoardStatus) HasClosedStatus() bool {
	if o != nil && o.ClosedStatus.IsSet() {
		return true
	}

	return false
}

// SetClosedStatus gets a reference to the given NullableBool and assigns it to the ClosedStatus field.
func (o *BoardStatus) SetClosedStatus(v bool) {
	o.ClosedStatus.Set(&v)
}
// SetClosedStatusNil sets the value for ClosedStatus to be an explicit nil
func (o *BoardStatus) SetClosedStatusNil() {
	o.ClosedStatus.Set(nil)
}

// UnsetClosedStatus ensures that no value is present for ClosedStatus, not even an explicit nil
func (o *BoardStatus) UnsetClosedStatus() {
	o.ClosedStatus.Unset()
}

// GetTimeEntryNotAllowed returns the TimeEntryNotAllowed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetTimeEntryNotAllowed() bool {
	if o == nil || IsNil(o.TimeEntryNotAllowed.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryNotAllowed.Get()
}

// GetTimeEntryNotAllowedOk returns a tuple with the TimeEntryNotAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetTimeEntryNotAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryNotAllowed.Get(), o.TimeEntryNotAllowed.IsSet()
}

// HasTimeEntryNotAllowed returns a boolean if a field has been set.
func (o *BoardStatus) HasTimeEntryNotAllowed() bool {
	if o != nil && o.TimeEntryNotAllowed.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryNotAllowed gets a reference to the given NullableBool and assigns it to the TimeEntryNotAllowed field.
func (o *BoardStatus) SetTimeEntryNotAllowed(v bool) {
	o.TimeEntryNotAllowed.Set(&v)
}
// SetTimeEntryNotAllowedNil sets the value for TimeEntryNotAllowed to be an explicit nil
func (o *BoardStatus) SetTimeEntryNotAllowedNil() {
	o.TimeEntryNotAllowed.Set(nil)
}

// UnsetTimeEntryNotAllowed ensures that no value is present for TimeEntryNotAllowed, not even an explicit nil
func (o *BoardStatus) UnsetTimeEntryNotAllowed() {
	o.TimeEntryNotAllowed.Unset()
}

// GetRoundRobinCatchall returns the RoundRobinCatchall field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetRoundRobinCatchall() bool {
	if o == nil || IsNil(o.RoundRobinCatchall.Get()) {
		var ret bool
		return ret
	}
	return *o.RoundRobinCatchall.Get()
}

// GetRoundRobinCatchallOk returns a tuple with the RoundRobinCatchall field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetRoundRobinCatchallOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundRobinCatchall.Get(), o.RoundRobinCatchall.IsSet()
}

// HasRoundRobinCatchall returns a boolean if a field has been set.
func (o *BoardStatus) HasRoundRobinCatchall() bool {
	if o != nil && o.RoundRobinCatchall.IsSet() {
		return true
	}

	return false
}

// SetRoundRobinCatchall gets a reference to the given NullableBool and assigns it to the RoundRobinCatchall field.
func (o *BoardStatus) SetRoundRobinCatchall(v bool) {
	o.RoundRobinCatchall.Set(&v)
}
// SetRoundRobinCatchallNil sets the value for RoundRobinCatchall to be an explicit nil
func (o *BoardStatus) SetRoundRobinCatchallNil() {
	o.RoundRobinCatchall.Set(nil)
}

// UnsetRoundRobinCatchall ensures that no value is present for RoundRobinCatchall, not even an explicit nil
func (o *BoardStatus) UnsetRoundRobinCatchall() {
	o.RoundRobinCatchall.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *BoardStatus) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *BoardStatus) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *BoardStatus) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *BoardStatus) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetEscalationStatus returns the EscalationStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetEscalationStatus() string {
	if o == nil || IsNil(o.EscalationStatus.Get()) {
		var ret string
		return ret
	}
	return *o.EscalationStatus.Get()
}

// GetEscalationStatusOk returns a tuple with the EscalationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetEscalationStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EscalationStatus.Get(), o.EscalationStatus.IsSet()
}

// HasEscalationStatus returns a boolean if a field has been set.
func (o *BoardStatus) HasEscalationStatus() bool {
	if o != nil && o.EscalationStatus.IsSet() {
		return true
	}

	return false
}

// SetEscalationStatus gets a reference to the given NullableString and assigns it to the EscalationStatus field.
func (o *BoardStatus) SetEscalationStatus(v string) {
	o.EscalationStatus.Set(&v)
}
// SetEscalationStatusNil sets the value for EscalationStatus to be an explicit nil
func (o *BoardStatus) SetEscalationStatusNil() {
	o.EscalationStatus.Set(nil)
}

// UnsetEscalationStatus ensures that no value is present for EscalationStatus, not even an explicit nil
func (o *BoardStatus) UnsetEscalationStatus() {
	o.EscalationStatus.Unset()
}

// GetCustomerPortalDescription returns the CustomerPortalDescription field value if set, zero value otherwise.
func (o *BoardStatus) GetCustomerPortalDescription() string {
	if o == nil || IsNil(o.CustomerPortalDescription) {
		var ret string
		return ret
	}
	return *o.CustomerPortalDescription
}

// GetCustomerPortalDescriptionOk returns a tuple with the CustomerPortalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetCustomerPortalDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPortalDescription) {
		return nil, false
	}
	return o.CustomerPortalDescription, true
}

// HasCustomerPortalDescription returns a boolean if a field has been set.
func (o *BoardStatus) HasCustomerPortalDescription() bool {
	if o != nil && !IsNil(o.CustomerPortalDescription) {
		return true
	}

	return false
}

// SetCustomerPortalDescription gets a reference to the given string and assigns it to the CustomerPortalDescription field.
func (o *BoardStatus) SetCustomerPortalDescription(v string) {
	o.CustomerPortalDescription = &v
}

// GetCustomerPortalFlag returns the CustomerPortalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetCustomerPortalFlag() bool {
	if o == nil || IsNil(o.CustomerPortalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomerPortalFlag.Get()
}

// GetCustomerPortalFlagOk returns a tuple with the CustomerPortalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetCustomerPortalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerPortalFlag.Get(), o.CustomerPortalFlag.IsSet()
}

// HasCustomerPortalFlag returns a boolean if a field has been set.
func (o *BoardStatus) HasCustomerPortalFlag() bool {
	if o != nil && o.CustomerPortalFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomerPortalFlag gets a reference to the given NullableBool and assigns it to the CustomerPortalFlag field.
func (o *BoardStatus) SetCustomerPortalFlag(v bool) {
	o.CustomerPortalFlag.Set(&v)
}
// SetCustomerPortalFlagNil sets the value for CustomerPortalFlag to be an explicit nil
func (o *BoardStatus) SetCustomerPortalFlagNil() {
	o.CustomerPortalFlag.Set(nil)
}

// UnsetCustomerPortalFlag ensures that no value is present for CustomerPortalFlag, not even an explicit nil
func (o *BoardStatus) UnsetCustomerPortalFlag() {
	o.CustomerPortalFlag.Unset()
}

// GetEmailTemplate returns the EmailTemplate field value if set, zero value otherwise.
func (o *BoardStatus) GetEmailTemplate() ServiceEmailTemplateReference {
	if o == nil || IsNil(o.EmailTemplate) {
		var ret ServiceEmailTemplateReference
		return ret
	}
	return *o.EmailTemplate
}

// GetEmailTemplateOk returns a tuple with the EmailTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetEmailTemplateOk() (*ServiceEmailTemplateReference, bool) {
	if o == nil || IsNil(o.EmailTemplate) {
		return nil, false
	}
	return o.EmailTemplate, true
}

// HasEmailTemplate returns a boolean if a field has been set.
func (o *BoardStatus) HasEmailTemplate() bool {
	if o != nil && !IsNil(o.EmailTemplate) {
		return true
	}

	return false
}

// SetEmailTemplate gets a reference to the given ServiceEmailTemplateReference and assigns it to the EmailTemplate field.
func (o *BoardStatus) SetEmailTemplate(v ServiceEmailTemplateReference) {
	o.EmailTemplate = &v
}

// GetStatusIndicator returns the StatusIndicator field value if set, zero value otherwise.
func (o *BoardStatus) GetStatusIndicator() StatusIndicatorReference {
	if o == nil || IsNil(o.StatusIndicator) {
		var ret StatusIndicatorReference
		return ret
	}
	return *o.StatusIndicator
}

// GetStatusIndicatorOk returns a tuple with the StatusIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetStatusIndicatorOk() (*StatusIndicatorReference, bool) {
	if o == nil || IsNil(o.StatusIndicator) {
		return nil, false
	}
	return o.StatusIndicator, true
}

// HasStatusIndicator returns a boolean if a field has been set.
func (o *BoardStatus) HasStatusIndicator() bool {
	if o != nil && !IsNil(o.StatusIndicator) {
		return true
	}

	return false
}

// SetStatusIndicator gets a reference to the given StatusIndicatorReference and assigns it to the StatusIndicator field.
func (o *BoardStatus) SetStatusIndicator(v StatusIndicatorReference) {
	o.StatusIndicator = &v
}

// GetCustomStatusIndicatorName returns the CustomStatusIndicatorName field value if set, zero value otherwise.
func (o *BoardStatus) GetCustomStatusIndicatorName() string {
	if o == nil || IsNil(o.CustomStatusIndicatorName) {
		var ret string
		return ret
	}
	return *o.CustomStatusIndicatorName
}

// GetCustomStatusIndicatorNameOk returns a tuple with the CustomStatusIndicatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetCustomStatusIndicatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomStatusIndicatorName) {
		return nil, false
	}
	return o.CustomStatusIndicatorName, true
}

// HasCustomStatusIndicatorName returns a boolean if a field has been set.
func (o *BoardStatus) HasCustomStatusIndicatorName() bool {
	if o != nil && !IsNil(o.CustomStatusIndicatorName) {
		return true
	}

	return false
}

// SetCustomStatusIndicatorName gets a reference to the given string and assigns it to the CustomStatusIndicatorName field.
func (o *BoardStatus) SetCustomStatusIndicatorName(v string) {
	o.CustomStatusIndicatorName = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardStatus) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardStatus) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardStatus) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardStatus) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetSaveTimeAsNote returns the SaveTimeAsNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardStatus) GetSaveTimeAsNote() bool {
	if o == nil || IsNil(o.SaveTimeAsNote.Get()) {
		var ret bool
		return ret
	}
	return *o.SaveTimeAsNote.Get()
}

// GetSaveTimeAsNoteOk returns a tuple with the SaveTimeAsNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardStatus) GetSaveTimeAsNoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaveTimeAsNote.Get(), o.SaveTimeAsNote.IsSet()
}

// HasSaveTimeAsNote returns a boolean if a field has been set.
func (o *BoardStatus) HasSaveTimeAsNote() bool {
	if o != nil && o.SaveTimeAsNote.IsSet() {
		return true
	}

	return false
}

// SetSaveTimeAsNote gets a reference to the given NullableBool and assigns it to the SaveTimeAsNote field.
func (o *BoardStatus) SetSaveTimeAsNote(v bool) {
	o.SaveTimeAsNote.Set(&v)
}
// SetSaveTimeAsNoteNil sets the value for SaveTimeAsNote to be an explicit nil
func (o *BoardStatus) SetSaveTimeAsNoteNil() {
	o.SaveTimeAsNote.Set(nil)
}

// UnsetSaveTimeAsNote ensures that no value is present for SaveTimeAsNote, not even an explicit nil
func (o *BoardStatus) UnsetSaveTimeAsNote() {
	o.SaveTimeAsNote.Unset()
}

func (o BoardStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if o.SortOrder.IsSet() {
		toSerialize["sortOrder"] = o.SortOrder.Get()
	}
	if o.DisplayOnBoard.IsSet() {
		toSerialize["displayOnBoard"] = o.DisplayOnBoard.Get()
	}
	if o.Inactive.IsSet() {
		toSerialize["inactive"] = o.Inactive.Get()
	}
	if o.ClosedStatus.IsSet() {
		toSerialize["closedStatus"] = o.ClosedStatus.Get()
	}
	if o.TimeEntryNotAllowed.IsSet() {
		toSerialize["timeEntryNotAllowed"] = o.TimeEntryNotAllowed.Get()
	}
	if o.RoundRobinCatchall.IsSet() {
		toSerialize["roundRobinCatchall"] = o.RoundRobinCatchall.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.EscalationStatus.IsSet() {
		toSerialize["escalationStatus"] = o.EscalationStatus.Get()
	}
	if !IsNil(o.CustomerPortalDescription) {
		toSerialize["customerPortalDescription"] = o.CustomerPortalDescription
	}
	if o.CustomerPortalFlag.IsSet() {
		toSerialize["customerPortalFlag"] = o.CustomerPortalFlag.Get()
	}
	if !IsNil(o.EmailTemplate) {
		toSerialize["emailTemplate"] = o.EmailTemplate
	}
	if !IsNil(o.StatusIndicator) {
		toSerialize["statusIndicator"] = o.StatusIndicator
	}
	if !IsNil(o.CustomStatusIndicatorName) {
		toSerialize["customStatusIndicatorName"] = o.CustomStatusIndicatorName
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if o.SaveTimeAsNote.IsSet() {
		toSerialize["saveTimeAsNote"] = o.SaveTimeAsNote.Get()
	}
	return toSerialize, nil
}

func (o *BoardStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardStatus := _BoardStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoardStatus)

	if err != nil {
		return err
	}

	*o = BoardStatus(varBoardStatus)

	return err
}

type NullableBoardStatus struct {
	value *BoardStatus
	isSet bool
}

func (v NullableBoardStatus) Get() *BoardStatus {
	return v.value
}

func (v *NullableBoardStatus) Set(val *BoardStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardStatus(val *BoardStatus) *NullableBoardStatus {
	return &NullableBoardStatus{value: val, isSet: true}
}

func (v NullableBoardStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


