/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BoardSubType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardSubType{}

// BoardSubType struct for BoardSubType
type BoardSubType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	TypeAssociationIds []int32 `json:"typeAssociationIds,omitempty"`
	AddAllTypesFlag NullableBool `json:"addAllTypesFlag,omitempty"`
	RemoveAllTypesFlag NullableBool `json:"removeAllTypesFlag,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _BoardSubType BoardSubType

// NewBoardSubType instantiates a new BoardSubType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardSubType(name string) *BoardSubType {
	this := BoardSubType{}
	this.Name = name
	return &this
}

// NewBoardSubTypeWithDefaults instantiates a new BoardSubType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardSubTypeWithDefaults() *BoardSubType {
	this := BoardSubType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardSubType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardSubType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardSubType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardSubType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *BoardSubType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BoardSubType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BoardSubType) SetName(v string) {
	o.Name = v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardSubType) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardSubType) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *BoardSubType) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *BoardSubType) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *BoardSubType) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *BoardSubType) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetTypeAssociationIds returns the TypeAssociationIds field value if set, zero value otherwise.
func (o *BoardSubType) GetTypeAssociationIds() []int32 {
	if o == nil || IsNil(o.TypeAssociationIds) {
		var ret []int32
		return ret
	}
	return o.TypeAssociationIds
}

// GetTypeAssociationIdsOk returns a tuple with the TypeAssociationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardSubType) GetTypeAssociationIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.TypeAssociationIds) {
		return nil, false
	}
	return o.TypeAssociationIds, true
}

// HasTypeAssociationIds returns a boolean if a field has been set.
func (o *BoardSubType) HasTypeAssociationIds() bool {
	if o != nil && !IsNil(o.TypeAssociationIds) {
		return true
	}

	return false
}

// SetTypeAssociationIds gets a reference to the given []int32 and assigns it to the TypeAssociationIds field.
func (o *BoardSubType) SetTypeAssociationIds(v []int32) {
	o.TypeAssociationIds = v
}

// GetAddAllTypesFlag returns the AddAllTypesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardSubType) GetAddAllTypesFlag() bool {
	if o == nil || IsNil(o.AddAllTypesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllTypesFlag.Get()
}

// GetAddAllTypesFlagOk returns a tuple with the AddAllTypesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardSubType) GetAddAllTypesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllTypesFlag.Get(), o.AddAllTypesFlag.IsSet()
}

// HasAddAllTypesFlag returns a boolean if a field has been set.
func (o *BoardSubType) HasAddAllTypesFlag() bool {
	if o != nil && o.AddAllTypesFlag.IsSet() {
		return true
	}

	return false
}

// SetAddAllTypesFlag gets a reference to the given NullableBool and assigns it to the AddAllTypesFlag field.
func (o *BoardSubType) SetAddAllTypesFlag(v bool) {
	o.AddAllTypesFlag.Set(&v)
}
// SetAddAllTypesFlagNil sets the value for AddAllTypesFlag to be an explicit nil
func (o *BoardSubType) SetAddAllTypesFlagNil() {
	o.AddAllTypesFlag.Set(nil)
}

// UnsetAddAllTypesFlag ensures that no value is present for AddAllTypesFlag, not even an explicit nil
func (o *BoardSubType) UnsetAddAllTypesFlag() {
	o.AddAllTypesFlag.Unset()
}

// GetRemoveAllTypesFlag returns the RemoveAllTypesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardSubType) GetRemoveAllTypesFlag() bool {
	if o == nil || IsNil(o.RemoveAllTypesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllTypesFlag.Get()
}

// GetRemoveAllTypesFlagOk returns a tuple with the RemoveAllTypesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardSubType) GetRemoveAllTypesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllTypesFlag.Get(), o.RemoveAllTypesFlag.IsSet()
}

// HasRemoveAllTypesFlag returns a boolean if a field has been set.
func (o *BoardSubType) HasRemoveAllTypesFlag() bool {
	if o != nil && o.RemoveAllTypesFlag.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllTypesFlag gets a reference to the given NullableBool and assigns it to the RemoveAllTypesFlag field.
func (o *BoardSubType) SetRemoveAllTypesFlag(v bool) {
	o.RemoveAllTypesFlag.Set(&v)
}
// SetRemoveAllTypesFlagNil sets the value for RemoveAllTypesFlag to be an explicit nil
func (o *BoardSubType) SetRemoveAllTypesFlagNil() {
	o.RemoveAllTypesFlag.Set(nil)
}

// UnsetRemoveAllTypesFlag ensures that no value is present for RemoveAllTypesFlag, not even an explicit nil
func (o *BoardSubType) UnsetRemoveAllTypesFlag() {
	o.RemoveAllTypesFlag.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *BoardSubType) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardSubType) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *BoardSubType) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *BoardSubType) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardSubType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardSubType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardSubType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardSubType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardSubType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardSubType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.TypeAssociationIds) {
		toSerialize["typeAssociationIds"] = o.TypeAssociationIds
	}
	if o.AddAllTypesFlag.IsSet() {
		toSerialize["addAllTypesFlag"] = o.AddAllTypesFlag.Get()
	}
	if o.RemoveAllTypesFlag.IsSet() {
		toSerialize["removeAllTypesFlag"] = o.RemoveAllTypesFlag.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *BoardSubType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardSubType := _BoardSubType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoardSubType)

	if err != nil {
		return err
	}

	*o = BoardSubType(varBoardSubType)

	return err
}

type NullableBoardSubType struct {
	value *BoardSubType
	isSet bool
}

func (v NullableBoardSubType) Get() *BoardSubType {
	return v.value
}

func (v *NullableBoardSubType) Set(val *BoardSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardSubType(val *BoardSubType) *NullableBoardSubType {
	return &NullableBoardSubType{value: val, isSet: true}
}

func (v NullableBoardSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


