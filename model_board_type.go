/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BoardType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardType{}

// BoardType struct for BoardType
type BoardType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Category NullableString `json:"category,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	RequestForChangeFlag NullableBool `json:"requestForChangeFlag,omitempty"`
	//  Max length: 50;
	IntegrationXref *string `json:"integrationXref,omitempty"`
	SkillCategory *SkillCategoryReference `json:"skillCategory,omitempty"`
	Skill *SkillReference `json:"skill,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _BoardType BoardType

// NewBoardType instantiates a new BoardType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardType(name string) *BoardType {
	this := BoardType{}
	this.Name = name
	return &this
}

// NewBoardTypeWithDefaults instantiates a new BoardType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardTypeWithDefaults() *BoardType {
	this := BoardType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BoardType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BoardType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BoardType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *BoardType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BoardType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BoardType) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardType) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardType) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *BoardType) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *BoardType) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *BoardType) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *BoardType) UnsetCategory() {
	o.Category.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *BoardType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *BoardType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *BoardType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *BoardType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardType) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardType) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *BoardType) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *BoardType) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *BoardType) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *BoardType) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetRequestForChangeFlag returns the RequestForChangeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BoardType) GetRequestForChangeFlag() bool {
	if o == nil || IsNil(o.RequestForChangeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequestForChangeFlag.Get()
}

// GetRequestForChangeFlagOk returns a tuple with the RequestForChangeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BoardType) GetRequestForChangeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestForChangeFlag.Get(), o.RequestForChangeFlag.IsSet()
}

// HasRequestForChangeFlag returns a boolean if a field has been set.
func (o *BoardType) HasRequestForChangeFlag() bool {
	if o != nil && o.RequestForChangeFlag.IsSet() {
		return true
	}

	return false
}

// SetRequestForChangeFlag gets a reference to the given NullableBool and assigns it to the RequestForChangeFlag field.
func (o *BoardType) SetRequestForChangeFlag(v bool) {
	o.RequestForChangeFlag.Set(&v)
}
// SetRequestForChangeFlagNil sets the value for RequestForChangeFlag to be an explicit nil
func (o *BoardType) SetRequestForChangeFlagNil() {
	o.RequestForChangeFlag.Set(nil)
}

// UnsetRequestForChangeFlag ensures that no value is present for RequestForChangeFlag, not even an explicit nil
func (o *BoardType) UnsetRequestForChangeFlag() {
	o.RequestForChangeFlag.Unset()
}

// GetIntegrationXref returns the IntegrationXref field value if set, zero value otherwise.
func (o *BoardType) GetIntegrationXref() string {
	if o == nil || IsNil(o.IntegrationXref) {
		var ret string
		return ret
	}
	return *o.IntegrationXref
}

// GetIntegrationXrefOk returns a tuple with the IntegrationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetIntegrationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXref) {
		return nil, false
	}
	return o.IntegrationXref, true
}

// HasIntegrationXref returns a boolean if a field has been set.
func (o *BoardType) HasIntegrationXref() bool {
	if o != nil && !IsNil(o.IntegrationXref) {
		return true
	}

	return false
}

// SetIntegrationXref gets a reference to the given string and assigns it to the IntegrationXref field.
func (o *BoardType) SetIntegrationXref(v string) {
	o.IntegrationXref = &v
}

// GetSkillCategory returns the SkillCategory field value if set, zero value otherwise.
func (o *BoardType) GetSkillCategory() SkillCategoryReference {
	if o == nil || IsNil(o.SkillCategory) {
		var ret SkillCategoryReference
		return ret
	}
	return *o.SkillCategory
}

// GetSkillCategoryOk returns a tuple with the SkillCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetSkillCategoryOk() (*SkillCategoryReference, bool) {
	if o == nil || IsNil(o.SkillCategory) {
		return nil, false
	}
	return o.SkillCategory, true
}

// HasSkillCategory returns a boolean if a field has been set.
func (o *BoardType) HasSkillCategory() bool {
	if o != nil && !IsNil(o.SkillCategory) {
		return true
	}

	return false
}

// SetSkillCategory gets a reference to the given SkillCategoryReference and assigns it to the SkillCategory field.
func (o *BoardType) SetSkillCategory(v SkillCategoryReference) {
	o.SkillCategory = &v
}

// GetSkill returns the Skill field value if set, zero value otherwise.
func (o *BoardType) GetSkill() SkillReference {
	if o == nil || IsNil(o.Skill) {
		var ret SkillReference
		return ret
	}
	return *o.Skill
}

// GetSkillOk returns a tuple with the Skill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetSkillOk() (*SkillReference, bool) {
	if o == nil || IsNil(o.Skill) {
		return nil, false
	}
	return o.Skill, true
}

// HasSkill returns a boolean if a field has been set.
func (o *BoardType) HasSkill() bool {
	if o != nil && !IsNil(o.Skill) {
		return true
	}

	return false
}

// SetSkill gets a reference to the given SkillReference and assigns it to the Skill field.
func (o *BoardType) SetSkill(v SkillReference) {
	o.Skill = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *BoardType) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *BoardType) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *BoardType) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *BoardType) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *BoardType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *BoardType) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *BoardType) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *BoardType) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *BoardType) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *BoardType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *BoardType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *BoardType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o BoardType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.RequestForChangeFlag.IsSet() {
		toSerialize["requestForChangeFlag"] = o.RequestForChangeFlag.Get()
	}
	if !IsNil(o.IntegrationXref) {
		toSerialize["integrationXref"] = o.IntegrationXref
	}
	if !IsNil(o.SkillCategory) {
		toSerialize["skillCategory"] = o.SkillCategory
	}
	if !IsNil(o.Skill) {
		toSerialize["skill"] = o.Skill
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *BoardType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardType := _BoardType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBoardType)

	if err != nil {
		return err
	}

	*o = BoardType(varBoardType)

	return err
}

type NullableBoardType struct {
	value *BoardType
	isSet bool
}

func (v NullableBoardType) Get() *BoardType {
	return v.value
}

func (v *NullableBoardType) Set(val *BoardType) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardType) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardType(val *BoardType) *NullableBoardType {
	return &NullableBoardType{value: val, isSet: true}
}

func (v NullableBoardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


