/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CallbackEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallbackEntry{}

// CallbackEntry struct for CallbackEntry
type CallbackEntry struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Description *string `json:"description,omitempty"`
	//  Required Reference
	Url string `json:"url"`
	//  Required Reference
	ObjectId NullableInt32 `json:"objectId"`
	//  Required Reference
	Type string `json:"type"`
	//  Required Reference
	Level string `json:"level"`
	MemberId NullableInt32 `json:"memberId,omitempty"`
	PayloadVersion *string `json:"payloadVersion,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	IsSoapCallbackFlag NullableBool `json:"isSoapCallbackFlag,omitempty"`
	IsSelfSuppressedFlag NullableBool `json:"isSelfSuppressedFlag,omitempty"`
	ConnectWiseID *string `json:"connectWiseID,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _CallbackEntry CallbackEntry

// NewCallbackEntry instantiates a new CallbackEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallbackEntry(url string, objectId NullableInt32, type_ string, level string) *CallbackEntry {
	this := CallbackEntry{}
	this.Url = url
	this.ObjectId = objectId
	this.Type = type_
	this.Level = level
	return &this
}

// NewCallbackEntryWithDefaults instantiates a new CallbackEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallbackEntryWithDefaults() *CallbackEntry {
	this := CallbackEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CallbackEntry) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CallbackEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CallbackEntry) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CallbackEntry) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CallbackEntry) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CallbackEntry) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value
func (o *CallbackEntry) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CallbackEntry) SetUrl(v string) {
	o.Url = v
}

// GetObjectId returns the ObjectId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CallbackEntry) GetObjectId() int32 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallbackEntry) GetObjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// SetObjectId sets field value
func (o *CallbackEntry) SetObjectId(v int32) {
	o.ObjectId.Set(&v)
}

// GetType returns the Type field value
func (o *CallbackEntry) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CallbackEntry) SetType(v string) {
	o.Type = v
}

// GetLevel returns the Level field value
func (o *CallbackEntry) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *CallbackEntry) SetLevel(v string) {
	o.Level = v
}

// GetMemberId returns the MemberId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallbackEntry) GetMemberId() int32 {
	if o == nil || IsNil(o.MemberId.Get()) {
		var ret int32
		return ret
	}
	return *o.MemberId.Get()
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallbackEntry) GetMemberIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberId.Get(), o.MemberId.IsSet()
}

// HasMemberId returns a boolean if a field has been set.
func (o *CallbackEntry) HasMemberId() bool {
	if o != nil && o.MemberId.IsSet() {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given NullableInt32 and assigns it to the MemberId field.
func (o *CallbackEntry) SetMemberId(v int32) {
	o.MemberId.Set(&v)
}
// SetMemberIdNil sets the value for MemberId to be an explicit nil
func (o *CallbackEntry) SetMemberIdNil() {
	o.MemberId.Set(nil)
}

// UnsetMemberId ensures that no value is present for MemberId, not even an explicit nil
func (o *CallbackEntry) UnsetMemberId() {
	o.MemberId.Unset()
}

// GetPayloadVersion returns the PayloadVersion field value if set, zero value otherwise.
func (o *CallbackEntry) GetPayloadVersion() string {
	if o == nil || IsNil(o.PayloadVersion) {
		var ret string
		return ret
	}
	return *o.PayloadVersion
}

// GetPayloadVersionOk returns a tuple with the PayloadVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetPayloadVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadVersion) {
		return nil, false
	}
	return o.PayloadVersion, true
}

// HasPayloadVersion returns a boolean if a field has been set.
func (o *CallbackEntry) HasPayloadVersion() bool {
	if o != nil && !IsNil(o.PayloadVersion) {
		return true
	}

	return false
}

// SetPayloadVersion gets a reference to the given string and assigns it to the PayloadVersion field.
func (o *CallbackEntry) SetPayloadVersion(v string) {
	o.PayloadVersion = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallbackEntry) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallbackEntry) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *CallbackEntry) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *CallbackEntry) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *CallbackEntry) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *CallbackEntry) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetIsSoapCallbackFlag returns the IsSoapCallbackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallbackEntry) GetIsSoapCallbackFlag() bool {
	if o == nil || IsNil(o.IsSoapCallbackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSoapCallbackFlag.Get()
}

// GetIsSoapCallbackFlagOk returns a tuple with the IsSoapCallbackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallbackEntry) GetIsSoapCallbackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSoapCallbackFlag.Get(), o.IsSoapCallbackFlag.IsSet()
}

// HasIsSoapCallbackFlag returns a boolean if a field has been set.
func (o *CallbackEntry) HasIsSoapCallbackFlag() bool {
	if o != nil && o.IsSoapCallbackFlag.IsSet() {
		return true
	}

	return false
}

// SetIsSoapCallbackFlag gets a reference to the given NullableBool and assigns it to the IsSoapCallbackFlag field.
func (o *CallbackEntry) SetIsSoapCallbackFlag(v bool) {
	o.IsSoapCallbackFlag.Set(&v)
}
// SetIsSoapCallbackFlagNil sets the value for IsSoapCallbackFlag to be an explicit nil
func (o *CallbackEntry) SetIsSoapCallbackFlagNil() {
	o.IsSoapCallbackFlag.Set(nil)
}

// UnsetIsSoapCallbackFlag ensures that no value is present for IsSoapCallbackFlag, not even an explicit nil
func (o *CallbackEntry) UnsetIsSoapCallbackFlag() {
	o.IsSoapCallbackFlag.Unset()
}

// GetIsSelfSuppressedFlag returns the IsSelfSuppressedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallbackEntry) GetIsSelfSuppressedFlag() bool {
	if o == nil || IsNil(o.IsSelfSuppressedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSelfSuppressedFlag.Get()
}

// GetIsSelfSuppressedFlagOk returns a tuple with the IsSelfSuppressedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallbackEntry) GetIsSelfSuppressedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSelfSuppressedFlag.Get(), o.IsSelfSuppressedFlag.IsSet()
}

// HasIsSelfSuppressedFlag returns a boolean if a field has been set.
func (o *CallbackEntry) HasIsSelfSuppressedFlag() bool {
	if o != nil && o.IsSelfSuppressedFlag.IsSet() {
		return true
	}

	return false
}

// SetIsSelfSuppressedFlag gets a reference to the given NullableBool and assigns it to the IsSelfSuppressedFlag field.
func (o *CallbackEntry) SetIsSelfSuppressedFlag(v bool) {
	o.IsSelfSuppressedFlag.Set(&v)
}
// SetIsSelfSuppressedFlagNil sets the value for IsSelfSuppressedFlag to be an explicit nil
func (o *CallbackEntry) SetIsSelfSuppressedFlagNil() {
	o.IsSelfSuppressedFlag.Set(nil)
}

// UnsetIsSelfSuppressedFlag ensures that no value is present for IsSelfSuppressedFlag, not even an explicit nil
func (o *CallbackEntry) UnsetIsSelfSuppressedFlag() {
	o.IsSelfSuppressedFlag.Unset()
}

// GetConnectWiseID returns the ConnectWiseID field value if set, zero value otherwise.
func (o *CallbackEntry) GetConnectWiseID() string {
	if o == nil || IsNil(o.ConnectWiseID) {
		var ret string
		return ret
	}
	return *o.ConnectWiseID
}

// GetConnectWiseIDOk returns a tuple with the ConnectWiseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetConnectWiseIDOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectWiseID) {
		return nil, false
	}
	return o.ConnectWiseID, true
}

// HasConnectWiseID returns a boolean if a field has been set.
func (o *CallbackEntry) HasConnectWiseID() bool {
	if o != nil && !IsNil(o.ConnectWiseID) {
		return true
	}

	return false
}

// SetConnectWiseID gets a reference to the given string and assigns it to the ConnectWiseID field.
func (o *CallbackEntry) SetConnectWiseID(v string) {
	o.ConnectWiseID = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CallbackEntry) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallbackEntry) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CallbackEntry) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CallbackEntry) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CallbackEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallbackEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["url"] = o.Url
	toSerialize["objectId"] = o.ObjectId.Get()
	toSerialize["type"] = o.Type
	toSerialize["level"] = o.Level
	if o.MemberId.IsSet() {
		toSerialize["memberId"] = o.MemberId.Get()
	}
	if !IsNil(o.PayloadVersion) {
		toSerialize["payloadVersion"] = o.PayloadVersion
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.IsSoapCallbackFlag.IsSet() {
		toSerialize["isSoapCallbackFlag"] = o.IsSoapCallbackFlag.Get()
	}
	if o.IsSelfSuppressedFlag.IsSet() {
		toSerialize["isSelfSuppressedFlag"] = o.IsSelfSuppressedFlag.Get()
	}
	if !IsNil(o.ConnectWiseID) {
		toSerialize["connectWiseID"] = o.ConnectWiseID
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CallbackEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"objectId",
		"type",
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCallbackEntry := _CallbackEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCallbackEntry)

	if err != nil {
		return err
	}

	*o = CallbackEntry(varCallbackEntry)

	return err
}

type NullableCallbackEntry struct {
	value *CallbackEntry
	isSet bool
}

func (v NullableCallbackEntry) Get() *CallbackEntry {
	return v.value
}

func (v *NullableCallbackEntry) Set(val *CallbackEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableCallbackEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableCallbackEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallbackEntry(val *CallbackEntry) *NullableCallbackEntry {
	return &NullableCallbackEntry{value: val, isSet: true}
}

func (v NullableCallbackEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallbackEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


