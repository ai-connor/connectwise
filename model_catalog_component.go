/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogComponent{}

// CatalogComponent struct for CatalogComponent
type CatalogComponent struct {
	Id *int32 `json:"id,omitempty"`
	SequenceNumber NullableInt32 `json:"sequenceNumber,omitempty"`
	Quantity NullableFloat64 `json:"quantity"`
	CatalogItem CatalogItemReference `json:"catalogItem"`
	HidePriceFlag NullableBool `json:"hidePriceFlag,omitempty"`
	HideItemIdentifierFlag NullableBool `json:"hideItemIdentifierFlag,omitempty"`
	HideDescriptionFlag NullableBool `json:"hideDescriptionFlag,omitempty"`
	HideQuantityFlag NullableBool `json:"hideQuantityFlag,omitempty"`
	HideExtendedPriceFlag NullableBool `json:"hideExtendedPriceFlag,omitempty"`
	ParentCatalogItem *CatalogItemReference `json:"parentCatalogItem,omitempty"`
	Price NullableFloat64 `json:"price,omitempty"`
	Cost NullableFloat64 `json:"cost,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _CatalogComponent CatalogComponent

// NewCatalogComponent instantiates a new CatalogComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogComponent(quantity NullableFloat64, catalogItem CatalogItemReference) *CatalogComponent {
	this := CatalogComponent{}
	this.Quantity = quantity
	this.CatalogItem = catalogItem
	return &this
}

// NewCatalogComponentWithDefaults instantiates a new CatalogComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogComponentWithDefaults() *CatalogComponent {
	this := CatalogComponent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogComponent) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogComponent) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogComponent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogComponent) SetId(v int32) {
	o.Id = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetSequenceNumber() int32 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetSequenceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *CatalogComponent) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableInt32 and assigns it to the SequenceNumber field.
func (o *CatalogComponent) SetSequenceNumber(v int32) {
	o.SequenceNumber.Set(&v)
}
// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *CatalogComponent) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *CatalogComponent) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetQuantity returns the Quantity field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *CatalogComponent) GetQuantity() float64 {
	if o == nil || o.Quantity.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// SetQuantity sets field value
func (o *CatalogComponent) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}

// GetCatalogItem returns the CatalogItem field value
func (o *CatalogComponent) GetCatalogItem() CatalogItemReference {
	if o == nil {
		var ret CatalogItemReference
		return ret
	}

	return o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value
// and a boolean to check if the value has been set.
func (o *CatalogComponent) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogItem, true
}

// SetCatalogItem sets field value
func (o *CatalogComponent) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = v
}

// GetHidePriceFlag returns the HidePriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetHidePriceFlag() bool {
	if o == nil || IsNil(o.HidePriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HidePriceFlag.Get()
}

// GetHidePriceFlagOk returns a tuple with the HidePriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetHidePriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HidePriceFlag.Get(), o.HidePriceFlag.IsSet()
}

// HasHidePriceFlag returns a boolean if a field has been set.
func (o *CatalogComponent) HasHidePriceFlag() bool {
	if o != nil && o.HidePriceFlag.IsSet() {
		return true
	}

	return false
}

// SetHidePriceFlag gets a reference to the given NullableBool and assigns it to the HidePriceFlag field.
func (o *CatalogComponent) SetHidePriceFlag(v bool) {
	o.HidePriceFlag.Set(&v)
}
// SetHidePriceFlagNil sets the value for HidePriceFlag to be an explicit nil
func (o *CatalogComponent) SetHidePriceFlagNil() {
	o.HidePriceFlag.Set(nil)
}

// UnsetHidePriceFlag ensures that no value is present for HidePriceFlag, not even an explicit nil
func (o *CatalogComponent) UnsetHidePriceFlag() {
	o.HidePriceFlag.Unset()
}

// GetHideItemIdentifierFlag returns the HideItemIdentifierFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetHideItemIdentifierFlag() bool {
	if o == nil || IsNil(o.HideItemIdentifierFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideItemIdentifierFlag.Get()
}

// GetHideItemIdentifierFlagOk returns a tuple with the HideItemIdentifierFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetHideItemIdentifierFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideItemIdentifierFlag.Get(), o.HideItemIdentifierFlag.IsSet()
}

// HasHideItemIdentifierFlag returns a boolean if a field has been set.
func (o *CatalogComponent) HasHideItemIdentifierFlag() bool {
	if o != nil && o.HideItemIdentifierFlag.IsSet() {
		return true
	}

	return false
}

// SetHideItemIdentifierFlag gets a reference to the given NullableBool and assigns it to the HideItemIdentifierFlag field.
func (o *CatalogComponent) SetHideItemIdentifierFlag(v bool) {
	o.HideItemIdentifierFlag.Set(&v)
}
// SetHideItemIdentifierFlagNil sets the value for HideItemIdentifierFlag to be an explicit nil
func (o *CatalogComponent) SetHideItemIdentifierFlagNil() {
	o.HideItemIdentifierFlag.Set(nil)
}

// UnsetHideItemIdentifierFlag ensures that no value is present for HideItemIdentifierFlag, not even an explicit nil
func (o *CatalogComponent) UnsetHideItemIdentifierFlag() {
	o.HideItemIdentifierFlag.Unset()
}

// GetHideDescriptionFlag returns the HideDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetHideDescriptionFlag() bool {
	if o == nil || IsNil(o.HideDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideDescriptionFlag.Get()
}

// GetHideDescriptionFlagOk returns a tuple with the HideDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetHideDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideDescriptionFlag.Get(), o.HideDescriptionFlag.IsSet()
}

// HasHideDescriptionFlag returns a boolean if a field has been set.
func (o *CatalogComponent) HasHideDescriptionFlag() bool {
	if o != nil && o.HideDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetHideDescriptionFlag gets a reference to the given NullableBool and assigns it to the HideDescriptionFlag field.
func (o *CatalogComponent) SetHideDescriptionFlag(v bool) {
	o.HideDescriptionFlag.Set(&v)
}
// SetHideDescriptionFlagNil sets the value for HideDescriptionFlag to be an explicit nil
func (o *CatalogComponent) SetHideDescriptionFlagNil() {
	o.HideDescriptionFlag.Set(nil)
}

// UnsetHideDescriptionFlag ensures that no value is present for HideDescriptionFlag, not even an explicit nil
func (o *CatalogComponent) UnsetHideDescriptionFlag() {
	o.HideDescriptionFlag.Unset()
}

// GetHideQuantityFlag returns the HideQuantityFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetHideQuantityFlag() bool {
	if o == nil || IsNil(o.HideQuantityFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideQuantityFlag.Get()
}

// GetHideQuantityFlagOk returns a tuple with the HideQuantityFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetHideQuantityFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideQuantityFlag.Get(), o.HideQuantityFlag.IsSet()
}

// HasHideQuantityFlag returns a boolean if a field has been set.
func (o *CatalogComponent) HasHideQuantityFlag() bool {
	if o != nil && o.HideQuantityFlag.IsSet() {
		return true
	}

	return false
}

// SetHideQuantityFlag gets a reference to the given NullableBool and assigns it to the HideQuantityFlag field.
func (o *CatalogComponent) SetHideQuantityFlag(v bool) {
	o.HideQuantityFlag.Set(&v)
}
// SetHideQuantityFlagNil sets the value for HideQuantityFlag to be an explicit nil
func (o *CatalogComponent) SetHideQuantityFlagNil() {
	o.HideQuantityFlag.Set(nil)
}

// UnsetHideQuantityFlag ensures that no value is present for HideQuantityFlag, not even an explicit nil
func (o *CatalogComponent) UnsetHideQuantityFlag() {
	o.HideQuantityFlag.Unset()
}

// GetHideExtendedPriceFlag returns the HideExtendedPriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetHideExtendedPriceFlag() bool {
	if o == nil || IsNil(o.HideExtendedPriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideExtendedPriceFlag.Get()
}

// GetHideExtendedPriceFlagOk returns a tuple with the HideExtendedPriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetHideExtendedPriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideExtendedPriceFlag.Get(), o.HideExtendedPriceFlag.IsSet()
}

// HasHideExtendedPriceFlag returns a boolean if a field has been set.
func (o *CatalogComponent) HasHideExtendedPriceFlag() bool {
	if o != nil && o.HideExtendedPriceFlag.IsSet() {
		return true
	}

	return false
}

// SetHideExtendedPriceFlag gets a reference to the given NullableBool and assigns it to the HideExtendedPriceFlag field.
func (o *CatalogComponent) SetHideExtendedPriceFlag(v bool) {
	o.HideExtendedPriceFlag.Set(&v)
}
// SetHideExtendedPriceFlagNil sets the value for HideExtendedPriceFlag to be an explicit nil
func (o *CatalogComponent) SetHideExtendedPriceFlagNil() {
	o.HideExtendedPriceFlag.Set(nil)
}

// UnsetHideExtendedPriceFlag ensures that no value is present for HideExtendedPriceFlag, not even an explicit nil
func (o *CatalogComponent) UnsetHideExtendedPriceFlag() {
	o.HideExtendedPriceFlag.Unset()
}

// GetParentCatalogItem returns the ParentCatalogItem field value if set, zero value otherwise.
func (o *CatalogComponent) GetParentCatalogItem() CatalogItemReference {
	if o == nil || IsNil(o.ParentCatalogItem) {
		var ret CatalogItemReference
		return ret
	}
	return *o.ParentCatalogItem
}

// GetParentCatalogItemOk returns a tuple with the ParentCatalogItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogComponent) GetParentCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil || IsNil(o.ParentCatalogItem) {
		return nil, false
	}
	return o.ParentCatalogItem, true
}

// HasParentCatalogItem returns a boolean if a field has been set.
func (o *CatalogComponent) HasParentCatalogItem() bool {
	if o != nil && !IsNil(o.ParentCatalogItem) {
		return true
	}

	return false
}

// SetParentCatalogItem gets a reference to the given CatalogItemReference and assigns it to the ParentCatalogItem field.
func (o *CatalogComponent) SetParentCatalogItem(v CatalogItemReference) {
	o.ParentCatalogItem = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *CatalogComponent) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *CatalogComponent) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *CatalogComponent) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *CatalogComponent) UnsetPrice() {
	o.Price.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogComponent) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogComponent) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *CatalogComponent) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *CatalogComponent) SetCost(v float64) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *CatalogComponent) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *CatalogComponent) UnsetCost() {
	o.Cost.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CatalogComponent) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogComponent) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CatalogComponent) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CatalogComponent) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CatalogComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	toSerialize["quantity"] = o.Quantity.Get()
	toSerialize["catalogItem"] = o.CatalogItem
	if o.HidePriceFlag.IsSet() {
		toSerialize["hidePriceFlag"] = o.HidePriceFlag.Get()
	}
	if o.HideItemIdentifierFlag.IsSet() {
		toSerialize["hideItemIdentifierFlag"] = o.HideItemIdentifierFlag.Get()
	}
	if o.HideDescriptionFlag.IsSet() {
		toSerialize["hideDescriptionFlag"] = o.HideDescriptionFlag.Get()
	}
	if o.HideQuantityFlag.IsSet() {
		toSerialize["hideQuantityFlag"] = o.HideQuantityFlag.Get()
	}
	if o.HideExtendedPriceFlag.IsSet() {
		toSerialize["hideExtendedPriceFlag"] = o.HideExtendedPriceFlag.Get()
	}
	if !IsNil(o.ParentCatalogItem) {
		toSerialize["parentCatalogItem"] = o.ParentCatalogItem
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CatalogComponent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"catalogItem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogComponent := _CatalogComponent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogComponent)

	if err != nil {
		return err
	}

	*o = CatalogComponent(varCatalogComponent)

	return err
}

type NullableCatalogComponent struct {
	value *CatalogComponent
	isSet bool
}

func (v NullableCatalogComponent) Get() *CatalogComponent {
	return v.value
}

func (v *NullableCatalogComponent) Set(val *CatalogComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogComponent(val *CatalogComponent) *NullableCatalogComponent {
	return &NullableCatalogComponent{value: val, isSet: true}
}

func (v NullableCatalogComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


