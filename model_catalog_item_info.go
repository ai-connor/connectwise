/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CatalogItemInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogItemInfo{}

// CatalogItemInfo struct for CatalogItemInfo
type CatalogItemInfo struct {
	Id *int32 `json:"id,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Description *string `json:"description,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	ProductClass NullableString `json:"productClass,omitempty"`
	SerializedCostFlag NullableBool `json:"serializedCostFlag,omitempty"`
	Price NullableFloat64 `json:"price,omitempty"`
	Cost NullableFloat64 `json:"cost,omitempty"`
	TaxableFlag NullableBool `json:"taxableFlag,omitempty"`
	DropShipFlag NullableBool `json:"dropShipFlag,omitempty"`
	SpecialOrderFlag NullableBool `json:"specialOrderFlag,omitempty"`
	CustomerDescription *string `json:"customerDescription,omitempty"`
	ManufacturerPartNumber *string `json:"manufacturerPartNumber,omitempty"`
	VendorSku *string `json:"vendorSku,omitempty"`
	BillableOption NullableString `json:"billableOption,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewCatalogItemInfo instantiates a new CatalogItemInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItemInfo() *CatalogItemInfo {
	this := CatalogItemInfo{}
	return &this
}

// NewCatalogItemInfoWithDefaults instantiates a new CatalogItemInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItemInfoWithDefaults() *CatalogItemInfo {
	this := CatalogItemInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CatalogItemInfo) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *CatalogItemInfo) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CatalogItemInfo) SetDescription(v string) {
	o.Description = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *CatalogItemInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *CatalogItemInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *CatalogItemInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetProductClass returns the ProductClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetProductClass() string {
	if o == nil || IsNil(o.ProductClass.Get()) {
		var ret string
		return ret
	}
	return *o.ProductClass.Get()
}

// GetProductClassOk returns a tuple with the ProductClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetProductClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductClass.Get(), o.ProductClass.IsSet()
}

// HasProductClass returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasProductClass() bool {
	if o != nil && o.ProductClass.IsSet() {
		return true
	}

	return false
}

// SetProductClass gets a reference to the given NullableString and assigns it to the ProductClass field.
func (o *CatalogItemInfo) SetProductClass(v string) {
	o.ProductClass.Set(&v)
}
// SetProductClassNil sets the value for ProductClass to be an explicit nil
func (o *CatalogItemInfo) SetProductClassNil() {
	o.ProductClass.Set(nil)
}

// UnsetProductClass ensures that no value is present for ProductClass, not even an explicit nil
func (o *CatalogItemInfo) UnsetProductClass() {
	o.ProductClass.Unset()
}

// GetSerializedCostFlag returns the SerializedCostFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetSerializedCostFlag() bool {
	if o == nil || IsNil(o.SerializedCostFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SerializedCostFlag.Get()
}

// GetSerializedCostFlagOk returns a tuple with the SerializedCostFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetSerializedCostFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerializedCostFlag.Get(), o.SerializedCostFlag.IsSet()
}

// HasSerializedCostFlag returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasSerializedCostFlag() bool {
	if o != nil && o.SerializedCostFlag.IsSet() {
		return true
	}

	return false
}

// SetSerializedCostFlag gets a reference to the given NullableBool and assigns it to the SerializedCostFlag field.
func (o *CatalogItemInfo) SetSerializedCostFlag(v bool) {
	o.SerializedCostFlag.Set(&v)
}
// SetSerializedCostFlagNil sets the value for SerializedCostFlag to be an explicit nil
func (o *CatalogItemInfo) SetSerializedCostFlagNil() {
	o.SerializedCostFlag.Set(nil)
}

// UnsetSerializedCostFlag ensures that no value is present for SerializedCostFlag, not even an explicit nil
func (o *CatalogItemInfo) UnsetSerializedCostFlag() {
	o.SerializedCostFlag.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *CatalogItemInfo) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *CatalogItemInfo) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *CatalogItemInfo) UnsetPrice() {
	o.Price.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *CatalogItemInfo) SetCost(v float64) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *CatalogItemInfo) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *CatalogItemInfo) UnsetCost() {
	o.Cost.Unset()
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *CatalogItemInfo) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}
// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *CatalogItemInfo) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *CatalogItemInfo) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetDropShipFlag returns the DropShipFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetDropShipFlag() bool {
	if o == nil || IsNil(o.DropShipFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropShipFlag.Get()
}

// GetDropShipFlagOk returns a tuple with the DropShipFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetDropShipFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropShipFlag.Get(), o.DropShipFlag.IsSet()
}

// HasDropShipFlag returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasDropShipFlag() bool {
	if o != nil && o.DropShipFlag.IsSet() {
		return true
	}

	return false
}

// SetDropShipFlag gets a reference to the given NullableBool and assigns it to the DropShipFlag field.
func (o *CatalogItemInfo) SetDropShipFlag(v bool) {
	o.DropShipFlag.Set(&v)
}
// SetDropShipFlagNil sets the value for DropShipFlag to be an explicit nil
func (o *CatalogItemInfo) SetDropShipFlagNil() {
	o.DropShipFlag.Set(nil)
}

// UnsetDropShipFlag ensures that no value is present for DropShipFlag, not even an explicit nil
func (o *CatalogItemInfo) UnsetDropShipFlag() {
	o.DropShipFlag.Unset()
}

// GetSpecialOrderFlag returns the SpecialOrderFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetSpecialOrderFlag() bool {
	if o == nil || IsNil(o.SpecialOrderFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SpecialOrderFlag.Get()
}

// GetSpecialOrderFlagOk returns a tuple with the SpecialOrderFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetSpecialOrderFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecialOrderFlag.Get(), o.SpecialOrderFlag.IsSet()
}

// HasSpecialOrderFlag returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasSpecialOrderFlag() bool {
	if o != nil && o.SpecialOrderFlag.IsSet() {
		return true
	}

	return false
}

// SetSpecialOrderFlag gets a reference to the given NullableBool and assigns it to the SpecialOrderFlag field.
func (o *CatalogItemInfo) SetSpecialOrderFlag(v bool) {
	o.SpecialOrderFlag.Set(&v)
}
// SetSpecialOrderFlagNil sets the value for SpecialOrderFlag to be an explicit nil
func (o *CatalogItemInfo) SetSpecialOrderFlagNil() {
	o.SpecialOrderFlag.Set(nil)
}

// UnsetSpecialOrderFlag ensures that no value is present for SpecialOrderFlag, not even an explicit nil
func (o *CatalogItemInfo) UnsetSpecialOrderFlag() {
	o.SpecialOrderFlag.Unset()
}

// GetCustomerDescription returns the CustomerDescription field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetCustomerDescription() string {
	if o == nil || IsNil(o.CustomerDescription) {
		var ret string
		return ret
	}
	return *o.CustomerDescription
}

// GetCustomerDescriptionOk returns a tuple with the CustomerDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetCustomerDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerDescription) {
		return nil, false
	}
	return o.CustomerDescription, true
}

// HasCustomerDescription returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasCustomerDescription() bool {
	if o != nil && !IsNil(o.CustomerDescription) {
		return true
	}

	return false
}

// SetCustomerDescription gets a reference to the given string and assigns it to the CustomerDescription field.
func (o *CatalogItemInfo) SetCustomerDescription(v string) {
	o.CustomerDescription = &v
}

// GetManufacturerPartNumber returns the ManufacturerPartNumber field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetManufacturerPartNumber() string {
	if o == nil || IsNil(o.ManufacturerPartNumber) {
		var ret string
		return ret
	}
	return *o.ManufacturerPartNumber
}

// GetManufacturerPartNumberOk returns a tuple with the ManufacturerPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetManufacturerPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ManufacturerPartNumber) {
		return nil, false
	}
	return o.ManufacturerPartNumber, true
}

// HasManufacturerPartNumber returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasManufacturerPartNumber() bool {
	if o != nil && !IsNil(o.ManufacturerPartNumber) {
		return true
	}

	return false
}

// SetManufacturerPartNumber gets a reference to the given string and assigns it to the ManufacturerPartNumber field.
func (o *CatalogItemInfo) SetManufacturerPartNumber(v string) {
	o.ManufacturerPartNumber = &v
}

// GetVendorSku returns the VendorSku field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetVendorSku() string {
	if o == nil || IsNil(o.VendorSku) {
		var ret string
		return ret
	}
	return *o.VendorSku
}

// GetVendorSkuOk returns a tuple with the VendorSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetVendorSkuOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSku) {
		return nil, false
	}
	return o.VendorSku, true
}

// HasVendorSku returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasVendorSku() bool {
	if o != nil && !IsNil(o.VendorSku) {
		return true
	}

	return false
}

// SetVendorSku gets a reference to the given string and assigns it to the VendorSku field.
func (o *CatalogItemInfo) SetVendorSku(v string) {
	o.VendorSku = &v
}

// GetBillableOption returns the BillableOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogItemInfo) GetBillableOption() string {
	if o == nil || IsNil(o.BillableOption.Get()) {
		var ret string
		return ret
	}
	return *o.BillableOption.Get()
}

// GetBillableOptionOk returns a tuple with the BillableOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogItemInfo) GetBillableOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableOption.Get(), o.BillableOption.IsSet()
}

// HasBillableOption returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasBillableOption() bool {
	if o != nil && o.BillableOption.IsSet() {
		return true
	}

	return false
}

// SetBillableOption gets a reference to the given NullableString and assigns it to the BillableOption field.
func (o *CatalogItemInfo) SetBillableOption(v string) {
	o.BillableOption.Set(&v)
}
// SetBillableOptionNil sets the value for BillableOption to be an explicit nil
func (o *CatalogItemInfo) SetBillableOptionNil() {
	o.BillableOption.Set(nil)
}

// UnsetBillableOption ensures that no value is present for BillableOption, not even an explicit nil
func (o *CatalogItemInfo) UnsetBillableOption() {
	o.BillableOption.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CatalogItemInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItemInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CatalogItemInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CatalogItemInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CatalogItemInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogItemInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.ProductClass.IsSet() {
		toSerialize["productClass"] = o.ProductClass.Get()
	}
	if o.SerializedCostFlag.IsSet() {
		toSerialize["serializedCostFlag"] = o.SerializedCostFlag.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if o.DropShipFlag.IsSet() {
		toSerialize["dropShipFlag"] = o.DropShipFlag.Get()
	}
	if o.SpecialOrderFlag.IsSet() {
		toSerialize["specialOrderFlag"] = o.SpecialOrderFlag.Get()
	}
	if !IsNil(o.CustomerDescription) {
		toSerialize["customerDescription"] = o.CustomerDescription
	}
	if !IsNil(o.ManufacturerPartNumber) {
		toSerialize["manufacturerPartNumber"] = o.ManufacturerPartNumber
	}
	if !IsNil(o.VendorSku) {
		toSerialize["vendorSku"] = o.VendorSku
	}
	if o.BillableOption.IsSet() {
		toSerialize["billableOption"] = o.BillableOption.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableCatalogItemInfo struct {
	value *CatalogItemInfo
	isSet bool
}

func (v NullableCatalogItemInfo) Get() *CatalogItemInfo {
	return v.value
}

func (v *NullableCatalogItemInfo) Set(val *CatalogItemInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItemInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItemInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItemInfo(val *CatalogItemInfo) *NullableCatalogItemInfo {
	return &NullableCatalogItemInfo{value: val, isSet: true}
}

func (v NullableCatalogItemInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItemInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


