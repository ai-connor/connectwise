/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargeCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeCode{}

// ChargeCode struct for ChargeCode
type ChargeCode struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Company CompanyReference `json:"company"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	BillTime NullableString `json:"billTime,omitempty"`
	ExpenseEntryFlag NullableBool `json:"expenseEntryFlag,omitempty"`
	AllowAllExpenseTypeFlag NullableBool `json:"allowAllExpenseTypeFlag,omitempty"`
	TimeEntryFlag NullableBool `json:"timeEntryFlag,omitempty"`
	WorkType *WorkTypeReference `json:"workType,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	//  Max length: 50;
	IntegrationXref *string `json:"integrationXref,omitempty"`
	ExpenseTypeIds []int32 `json:"expenseTypeIds,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ChargeCode ChargeCode

// NewChargeCode instantiates a new ChargeCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeCode(name string, company CompanyReference) *ChargeCode {
	this := ChargeCode{}
	this.Name = name
	this.Company = company
	return &this
}

// NewChargeCodeWithDefaults instantiates a new ChargeCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeCodeWithDefaults() *ChargeCode {
	this := ChargeCode{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChargeCode) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChargeCode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ChargeCode) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ChargeCode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChargeCode) SetName(v string) {
	o.Name = v
}

// GetCompany returns the Company field value
func (o *ChargeCode) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *ChargeCode) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ChargeCode) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ChargeCode) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *ChargeCode) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *ChargeCode) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *ChargeCode) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *ChargeCode) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeCode) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeCode) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *ChargeCode) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *ChargeCode) SetBillTime(v string) {
	o.BillTime.Set(&v)
}
// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *ChargeCode) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *ChargeCode) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetExpenseEntryFlag returns the ExpenseEntryFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeCode) GetExpenseEntryFlag() bool {
	if o == nil || IsNil(o.ExpenseEntryFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExpenseEntryFlag.Get()
}

// GetExpenseEntryFlagOk returns a tuple with the ExpenseEntryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeCode) GetExpenseEntryFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseEntryFlag.Get(), o.ExpenseEntryFlag.IsSet()
}

// HasExpenseEntryFlag returns a boolean if a field has been set.
func (o *ChargeCode) HasExpenseEntryFlag() bool {
	if o != nil && o.ExpenseEntryFlag.IsSet() {
		return true
	}

	return false
}

// SetExpenseEntryFlag gets a reference to the given NullableBool and assigns it to the ExpenseEntryFlag field.
func (o *ChargeCode) SetExpenseEntryFlag(v bool) {
	o.ExpenseEntryFlag.Set(&v)
}
// SetExpenseEntryFlagNil sets the value for ExpenseEntryFlag to be an explicit nil
func (o *ChargeCode) SetExpenseEntryFlagNil() {
	o.ExpenseEntryFlag.Set(nil)
}

// UnsetExpenseEntryFlag ensures that no value is present for ExpenseEntryFlag, not even an explicit nil
func (o *ChargeCode) UnsetExpenseEntryFlag() {
	o.ExpenseEntryFlag.Unset()
}

// GetAllowAllExpenseTypeFlag returns the AllowAllExpenseTypeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeCode) GetAllowAllExpenseTypeFlag() bool {
	if o == nil || IsNil(o.AllowAllExpenseTypeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowAllExpenseTypeFlag.Get()
}

// GetAllowAllExpenseTypeFlagOk returns a tuple with the AllowAllExpenseTypeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeCode) GetAllowAllExpenseTypeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowAllExpenseTypeFlag.Get(), o.AllowAllExpenseTypeFlag.IsSet()
}

// HasAllowAllExpenseTypeFlag returns a boolean if a field has been set.
func (o *ChargeCode) HasAllowAllExpenseTypeFlag() bool {
	if o != nil && o.AllowAllExpenseTypeFlag.IsSet() {
		return true
	}

	return false
}

// SetAllowAllExpenseTypeFlag gets a reference to the given NullableBool and assigns it to the AllowAllExpenseTypeFlag field.
func (o *ChargeCode) SetAllowAllExpenseTypeFlag(v bool) {
	o.AllowAllExpenseTypeFlag.Set(&v)
}
// SetAllowAllExpenseTypeFlagNil sets the value for AllowAllExpenseTypeFlag to be an explicit nil
func (o *ChargeCode) SetAllowAllExpenseTypeFlagNil() {
	o.AllowAllExpenseTypeFlag.Set(nil)
}

// UnsetAllowAllExpenseTypeFlag ensures that no value is present for AllowAllExpenseTypeFlag, not even an explicit nil
func (o *ChargeCode) UnsetAllowAllExpenseTypeFlag() {
	o.AllowAllExpenseTypeFlag.Unset()
}

// GetTimeEntryFlag returns the TimeEntryFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeCode) GetTimeEntryFlag() bool {
	if o == nil || IsNil(o.TimeEntryFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeEntryFlag.Get()
}

// GetTimeEntryFlagOk returns a tuple with the TimeEntryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeCode) GetTimeEntryFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeEntryFlag.Get(), o.TimeEntryFlag.IsSet()
}

// HasTimeEntryFlag returns a boolean if a field has been set.
func (o *ChargeCode) HasTimeEntryFlag() bool {
	if o != nil && o.TimeEntryFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeEntryFlag gets a reference to the given NullableBool and assigns it to the TimeEntryFlag field.
func (o *ChargeCode) SetTimeEntryFlag(v bool) {
	o.TimeEntryFlag.Set(&v)
}
// SetTimeEntryFlagNil sets the value for TimeEntryFlag to be an explicit nil
func (o *ChargeCode) SetTimeEntryFlagNil() {
	o.TimeEntryFlag.Set(nil)
}

// UnsetTimeEntryFlag ensures that no value is present for TimeEntryFlag, not even an explicit nil
func (o *ChargeCode) UnsetTimeEntryFlag() {
	o.TimeEntryFlag.Unset()
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *ChargeCode) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *ChargeCode) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *ChargeCode) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *ChargeCode) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *ChargeCode) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *ChargeCode) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetIntegrationXref returns the IntegrationXref field value if set, zero value otherwise.
func (o *ChargeCode) GetIntegrationXref() string {
	if o == nil || IsNil(o.IntegrationXref) {
		var ret string
		return ret
	}
	return *o.IntegrationXref
}

// GetIntegrationXrefOk returns a tuple with the IntegrationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetIntegrationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXref) {
		return nil, false
	}
	return o.IntegrationXref, true
}

// HasIntegrationXref returns a boolean if a field has been set.
func (o *ChargeCode) HasIntegrationXref() bool {
	if o != nil && !IsNil(o.IntegrationXref) {
		return true
	}

	return false
}

// SetIntegrationXref gets a reference to the given string and assigns it to the IntegrationXref field.
func (o *ChargeCode) SetIntegrationXref(v string) {
	o.IntegrationXref = &v
}

// GetExpenseTypeIds returns the ExpenseTypeIds field value if set, zero value otherwise.
func (o *ChargeCode) GetExpenseTypeIds() []int32 {
	if o == nil || IsNil(o.ExpenseTypeIds) {
		var ret []int32
		return ret
	}
	return o.ExpenseTypeIds
}

// GetExpenseTypeIdsOk returns a tuple with the ExpenseTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetExpenseTypeIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExpenseTypeIds) {
		return nil, false
	}
	return o.ExpenseTypeIds, true
}

// HasExpenseTypeIds returns a boolean if a field has been set.
func (o *ChargeCode) HasExpenseTypeIds() bool {
	if o != nil && !IsNil(o.ExpenseTypeIds) {
		return true
	}

	return false
}

// SetExpenseTypeIds gets a reference to the given []int32 and assigns it to the ExpenseTypeIds field.
func (o *ChargeCode) SetExpenseTypeIds(v []int32) {
	o.ExpenseTypeIds = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ChargeCode) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeCode) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ChargeCode) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ChargeCode) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ChargeCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["company"] = o.Company
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.ExpenseEntryFlag.IsSet() {
		toSerialize["expenseEntryFlag"] = o.ExpenseEntryFlag.Get()
	}
	if o.AllowAllExpenseTypeFlag.IsSet() {
		toSerialize["allowAllExpenseTypeFlag"] = o.AllowAllExpenseTypeFlag.Get()
	}
	if o.TimeEntryFlag.IsSet() {
		toSerialize["timeEntryFlag"] = o.TimeEntryFlag.Get()
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.IntegrationXref) {
		toSerialize["integrationXref"] = o.IntegrationXref
	}
	if !IsNil(o.ExpenseTypeIds) {
		toSerialize["expenseTypeIds"] = o.ExpenseTypeIds
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ChargeCode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"company",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeCode := _ChargeCode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeCode)

	if err != nil {
		return err
	}

	*o = ChargeCode(varChargeCode)

	return err
}

type NullableChargeCode struct {
	value *ChargeCode
	isSet bool
}

func (v NullableChargeCode) Get() *ChargeCode {
	return v.value
}

func (v *NullableChargeCode) Set(val *ChargeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeCode(val *ChargeCode) *NullableChargeCode {
	return &NullableChargeCode{value: val, isSet: true}
}

func (v NullableChargeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


