/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommunicationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommunicationType{}

// CommunicationType struct for CommunicationType
type CommunicationType struct {
	Id *int32 `json:"id,omitempty"`
	Description string `json:"description"`
	// Gets or sets at least one flag is required to be true -- phone, fax, or email.
	PhoneFlag NullableBool `json:"phoneFlag,omitempty"`
	// Gets or sets at least one flag is required to be true -- phone, fax, or email.
	FaxFlag NullableBool `json:"faxFlag,omitempty"`
	// Gets or sets at least one flag is required to be true -- phone, fax, or email.
	EmailFlag NullableBool `json:"emailFlag,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	//  Max length: 50;
	ExchangeXref *string `json:"exchangeXref,omitempty"`
	//  Max length: 50;
	IphoneXref *string `json:"iphoneXref,omitempty"`
	//  Max length: 50;
	AndroidXref *string `json:"androidXref,omitempty"`
	//  Max length: 50;
	GoogleXref *string `json:"googleXref,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _CommunicationType CommunicationType

// NewCommunicationType instantiates a new CommunicationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunicationType(description string) *CommunicationType {
	this := CommunicationType{}
	this.Description = description
	return &this
}

// NewCommunicationTypeWithDefaults instantiates a new CommunicationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunicationTypeWithDefaults() *CommunicationType {
	this := CommunicationType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommunicationType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommunicationType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CommunicationType) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value
func (o *CommunicationType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CommunicationType) SetDescription(v string) {
	o.Description = v
}

// GetPhoneFlag returns the PhoneFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationType) GetPhoneFlag() bool {
	if o == nil || IsNil(o.PhoneFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PhoneFlag.Get()
}

// GetPhoneFlagOk returns a tuple with the PhoneFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationType) GetPhoneFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneFlag.Get(), o.PhoneFlag.IsSet()
}

// HasPhoneFlag returns a boolean if a field has been set.
func (o *CommunicationType) HasPhoneFlag() bool {
	if o != nil && o.PhoneFlag.IsSet() {
		return true
	}

	return false
}

// SetPhoneFlag gets a reference to the given NullableBool and assigns it to the PhoneFlag field.
func (o *CommunicationType) SetPhoneFlag(v bool) {
	o.PhoneFlag.Set(&v)
}
// SetPhoneFlagNil sets the value for PhoneFlag to be an explicit nil
func (o *CommunicationType) SetPhoneFlagNil() {
	o.PhoneFlag.Set(nil)
}

// UnsetPhoneFlag ensures that no value is present for PhoneFlag, not even an explicit nil
func (o *CommunicationType) UnsetPhoneFlag() {
	o.PhoneFlag.Unset()
}

// GetFaxFlag returns the FaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationType) GetFaxFlag() bool {
	if o == nil || IsNil(o.FaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.FaxFlag.Get()
}

// GetFaxFlagOk returns a tuple with the FaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationType) GetFaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FaxFlag.Get(), o.FaxFlag.IsSet()
}

// HasFaxFlag returns a boolean if a field has been set.
func (o *CommunicationType) HasFaxFlag() bool {
	if o != nil && o.FaxFlag.IsSet() {
		return true
	}

	return false
}

// SetFaxFlag gets a reference to the given NullableBool and assigns it to the FaxFlag field.
func (o *CommunicationType) SetFaxFlag(v bool) {
	o.FaxFlag.Set(&v)
}
// SetFaxFlagNil sets the value for FaxFlag to be an explicit nil
func (o *CommunicationType) SetFaxFlagNil() {
	o.FaxFlag.Set(nil)
}

// UnsetFaxFlag ensures that no value is present for FaxFlag, not even an explicit nil
func (o *CommunicationType) UnsetFaxFlag() {
	o.FaxFlag.Unset()
}

// GetEmailFlag returns the EmailFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationType) GetEmailFlag() bool {
	if o == nil || IsNil(o.EmailFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailFlag.Get()
}

// GetEmailFlagOk returns a tuple with the EmailFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationType) GetEmailFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailFlag.Get(), o.EmailFlag.IsSet()
}

// HasEmailFlag returns a boolean if a field has been set.
func (o *CommunicationType) HasEmailFlag() bool {
	if o != nil && o.EmailFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailFlag gets a reference to the given NullableBool and assigns it to the EmailFlag field.
func (o *CommunicationType) SetEmailFlag(v bool) {
	o.EmailFlag.Set(&v)
}
// SetEmailFlagNil sets the value for EmailFlag to be an explicit nil
func (o *CommunicationType) SetEmailFlagNil() {
	o.EmailFlag.Set(nil)
}

// UnsetEmailFlag ensures that no value is present for EmailFlag, not even an explicit nil
func (o *CommunicationType) UnsetEmailFlag() {
	o.EmailFlag.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommunicationType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommunicationType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *CommunicationType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *CommunicationType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *CommunicationType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *CommunicationType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetExchangeXref returns the ExchangeXref field value if set, zero value otherwise.
func (o *CommunicationType) GetExchangeXref() string {
	if o == nil || IsNil(o.ExchangeXref) {
		var ret string
		return ret
	}
	return *o.ExchangeXref
}

// GetExchangeXrefOk returns a tuple with the ExchangeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetExchangeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeXref) {
		return nil, false
	}
	return o.ExchangeXref, true
}

// HasExchangeXref returns a boolean if a field has been set.
func (o *CommunicationType) HasExchangeXref() bool {
	if o != nil && !IsNil(o.ExchangeXref) {
		return true
	}

	return false
}

// SetExchangeXref gets a reference to the given string and assigns it to the ExchangeXref field.
func (o *CommunicationType) SetExchangeXref(v string) {
	o.ExchangeXref = &v
}

// GetIphoneXref returns the IphoneXref field value if set, zero value otherwise.
func (o *CommunicationType) GetIphoneXref() string {
	if o == nil || IsNil(o.IphoneXref) {
		var ret string
		return ret
	}
	return *o.IphoneXref
}

// GetIphoneXrefOk returns a tuple with the IphoneXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetIphoneXrefOk() (*string, bool) {
	if o == nil || IsNil(o.IphoneXref) {
		return nil, false
	}
	return o.IphoneXref, true
}

// HasIphoneXref returns a boolean if a field has been set.
func (o *CommunicationType) HasIphoneXref() bool {
	if o != nil && !IsNil(o.IphoneXref) {
		return true
	}

	return false
}

// SetIphoneXref gets a reference to the given string and assigns it to the IphoneXref field.
func (o *CommunicationType) SetIphoneXref(v string) {
	o.IphoneXref = &v
}

// GetAndroidXref returns the AndroidXref field value if set, zero value otherwise.
func (o *CommunicationType) GetAndroidXref() string {
	if o == nil || IsNil(o.AndroidXref) {
		var ret string
		return ret
	}
	return *o.AndroidXref
}

// GetAndroidXrefOk returns a tuple with the AndroidXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetAndroidXrefOk() (*string, bool) {
	if o == nil || IsNil(o.AndroidXref) {
		return nil, false
	}
	return o.AndroidXref, true
}

// HasAndroidXref returns a boolean if a field has been set.
func (o *CommunicationType) HasAndroidXref() bool {
	if o != nil && !IsNil(o.AndroidXref) {
		return true
	}

	return false
}

// SetAndroidXref gets a reference to the given string and assigns it to the AndroidXref field.
func (o *CommunicationType) SetAndroidXref(v string) {
	o.AndroidXref = &v
}

// GetGoogleXref returns the GoogleXref field value if set, zero value otherwise.
func (o *CommunicationType) GetGoogleXref() string {
	if o == nil || IsNil(o.GoogleXref) {
		var ret string
		return ret
	}
	return *o.GoogleXref
}

// GetGoogleXrefOk returns a tuple with the GoogleXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetGoogleXrefOk() (*string, bool) {
	if o == nil || IsNil(o.GoogleXref) {
		return nil, false
	}
	return o.GoogleXref, true
}

// HasGoogleXref returns a boolean if a field has been set.
func (o *CommunicationType) HasGoogleXref() bool {
	if o != nil && !IsNil(o.GoogleXref) {
		return true
	}

	return false
}

// SetGoogleXref gets a reference to the given string and assigns it to the GoogleXref field.
func (o *CommunicationType) SetGoogleXref(v string) {
	o.GoogleXref = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CommunicationType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CommunicationType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CommunicationType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CommunicationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommunicationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["description"] = o.Description
	if o.PhoneFlag.IsSet() {
		toSerialize["phoneFlag"] = o.PhoneFlag.Get()
	}
	if o.FaxFlag.IsSet() {
		toSerialize["faxFlag"] = o.FaxFlag.Get()
	}
	if o.EmailFlag.IsSet() {
		toSerialize["emailFlag"] = o.EmailFlag.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.ExchangeXref) {
		toSerialize["exchangeXref"] = o.ExchangeXref
	}
	if !IsNil(o.IphoneXref) {
		toSerialize["iphoneXref"] = o.IphoneXref
	}
	if !IsNil(o.AndroidXref) {
		toSerialize["androidXref"] = o.AndroidXref
	}
	if !IsNil(o.GoogleXref) {
		toSerialize["googleXref"] = o.GoogleXref
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CommunicationType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommunicationType := _CommunicationType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommunicationType)

	if err != nil {
		return err
	}

	*o = CommunicationType(varCommunicationType)

	return err
}

type NullableCommunicationType struct {
	value *CommunicationType
	isSet bool
}

func (v NullableCommunicationType) Get() *CommunicationType {
	return v.value
}

func (v *NullableCommunicationType) Set(val *CommunicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationType(val *CommunicationType) *NullableCommunicationType {
	return &NullableCommunicationType{value: val, isSet: true}
}

func (v NullableCommunicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


