/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyGroup{}

// CompanyGroup struct for CompanyGroup
type CompanyGroup struct {
	//  Required On Updates;
	Id *int32 `json:"id,omitempty"`
	Group GroupReference `json:"group"`
	Company *CompanyReference `json:"company,omitempty"`
	DefaultContactFlag NullableBool `json:"defaultContactFlag,omitempty"`
	AllContactsFlag NullableBool `json:"allContactsFlag,omitempty"`
	RemoveAllContactsFlag NullableBool `json:"removeAllContactsFlag,omitempty"`
	UnsubscribeFlag NullableBool `json:"unsubscribeFlag,omitempty"`
	ContactIds []int32 `json:"contactIds,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _CompanyGroup CompanyGroup

// NewCompanyGroup instantiates a new CompanyGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyGroup(group GroupReference) *CompanyGroup {
	this := CompanyGroup{}
	this.Group = group
	return &this
}

// NewCompanyGroupWithDefaults instantiates a new CompanyGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyGroupWithDefaults() *CompanyGroup {
	this := CompanyGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyGroup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyGroup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyGroup) SetId(v int32) {
	o.Id = &v
}

// GetGroup returns the Group field value
func (o *CompanyGroup) GetGroup() GroupReference {
	if o == nil {
		var ret GroupReference
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *CompanyGroup) GetGroupOk() (*GroupReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *CompanyGroup) SetGroup(v GroupReference) {
	o.Group = v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *CompanyGroup) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyGroup) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *CompanyGroup) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *CompanyGroup) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetDefaultContactFlag returns the DefaultContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyGroup) GetDefaultContactFlag() bool {
	if o == nil || IsNil(o.DefaultContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultContactFlag.Get()
}

// GetDefaultContactFlagOk returns a tuple with the DefaultContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyGroup) GetDefaultContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultContactFlag.Get(), o.DefaultContactFlag.IsSet()
}

// HasDefaultContactFlag returns a boolean if a field has been set.
func (o *CompanyGroup) HasDefaultContactFlag() bool {
	if o != nil && o.DefaultContactFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultContactFlag gets a reference to the given NullableBool and assigns it to the DefaultContactFlag field.
func (o *CompanyGroup) SetDefaultContactFlag(v bool) {
	o.DefaultContactFlag.Set(&v)
}
// SetDefaultContactFlagNil sets the value for DefaultContactFlag to be an explicit nil
func (o *CompanyGroup) SetDefaultContactFlagNil() {
	o.DefaultContactFlag.Set(nil)
}

// UnsetDefaultContactFlag ensures that no value is present for DefaultContactFlag, not even an explicit nil
func (o *CompanyGroup) UnsetDefaultContactFlag() {
	o.DefaultContactFlag.Unset()
}

// GetAllContactsFlag returns the AllContactsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyGroup) GetAllContactsFlag() bool {
	if o == nil || IsNil(o.AllContactsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllContactsFlag.Get()
}

// GetAllContactsFlagOk returns a tuple with the AllContactsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyGroup) GetAllContactsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllContactsFlag.Get(), o.AllContactsFlag.IsSet()
}

// HasAllContactsFlag returns a boolean if a field has been set.
func (o *CompanyGroup) HasAllContactsFlag() bool {
	if o != nil && o.AllContactsFlag.IsSet() {
		return true
	}

	return false
}

// SetAllContactsFlag gets a reference to the given NullableBool and assigns it to the AllContactsFlag field.
func (o *CompanyGroup) SetAllContactsFlag(v bool) {
	o.AllContactsFlag.Set(&v)
}
// SetAllContactsFlagNil sets the value for AllContactsFlag to be an explicit nil
func (o *CompanyGroup) SetAllContactsFlagNil() {
	o.AllContactsFlag.Set(nil)
}

// UnsetAllContactsFlag ensures that no value is present for AllContactsFlag, not even an explicit nil
func (o *CompanyGroup) UnsetAllContactsFlag() {
	o.AllContactsFlag.Unset()
}

// GetRemoveAllContactsFlag returns the RemoveAllContactsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyGroup) GetRemoveAllContactsFlag() bool {
	if o == nil || IsNil(o.RemoveAllContactsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllContactsFlag.Get()
}

// GetRemoveAllContactsFlagOk returns a tuple with the RemoveAllContactsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyGroup) GetRemoveAllContactsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllContactsFlag.Get(), o.RemoveAllContactsFlag.IsSet()
}

// HasRemoveAllContactsFlag returns a boolean if a field has been set.
func (o *CompanyGroup) HasRemoveAllContactsFlag() bool {
	if o != nil && o.RemoveAllContactsFlag.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllContactsFlag gets a reference to the given NullableBool and assigns it to the RemoveAllContactsFlag field.
func (o *CompanyGroup) SetRemoveAllContactsFlag(v bool) {
	o.RemoveAllContactsFlag.Set(&v)
}
// SetRemoveAllContactsFlagNil sets the value for RemoveAllContactsFlag to be an explicit nil
func (o *CompanyGroup) SetRemoveAllContactsFlagNil() {
	o.RemoveAllContactsFlag.Set(nil)
}

// UnsetRemoveAllContactsFlag ensures that no value is present for RemoveAllContactsFlag, not even an explicit nil
func (o *CompanyGroup) UnsetRemoveAllContactsFlag() {
	o.RemoveAllContactsFlag.Unset()
}

// GetUnsubscribeFlag returns the UnsubscribeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyGroup) GetUnsubscribeFlag() bool {
	if o == nil || IsNil(o.UnsubscribeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UnsubscribeFlag.Get()
}

// GetUnsubscribeFlagOk returns a tuple with the UnsubscribeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyGroup) GetUnsubscribeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnsubscribeFlag.Get(), o.UnsubscribeFlag.IsSet()
}

// HasUnsubscribeFlag returns a boolean if a field has been set.
func (o *CompanyGroup) HasUnsubscribeFlag() bool {
	if o != nil && o.UnsubscribeFlag.IsSet() {
		return true
	}

	return false
}

// SetUnsubscribeFlag gets a reference to the given NullableBool and assigns it to the UnsubscribeFlag field.
func (o *CompanyGroup) SetUnsubscribeFlag(v bool) {
	o.UnsubscribeFlag.Set(&v)
}
// SetUnsubscribeFlagNil sets the value for UnsubscribeFlag to be an explicit nil
func (o *CompanyGroup) SetUnsubscribeFlagNil() {
	o.UnsubscribeFlag.Set(nil)
}

// UnsetUnsubscribeFlag ensures that no value is present for UnsubscribeFlag, not even an explicit nil
func (o *CompanyGroup) UnsetUnsubscribeFlag() {
	o.UnsubscribeFlag.Unset()
}

// GetContactIds returns the ContactIds field value if set, zero value otherwise.
func (o *CompanyGroup) GetContactIds() []int32 {
	if o == nil || IsNil(o.ContactIds) {
		var ret []int32
		return ret
	}
	return o.ContactIds
}

// GetContactIdsOk returns a tuple with the ContactIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyGroup) GetContactIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ContactIds) {
		return nil, false
	}
	return o.ContactIds, true
}

// HasContactIds returns a boolean if a field has been set.
func (o *CompanyGroup) HasContactIds() bool {
	if o != nil && !IsNil(o.ContactIds) {
		return true
	}

	return false
}

// SetContactIds gets a reference to the given []int32 and assigns it to the ContactIds field.
func (o *CompanyGroup) SetContactIds(v []int32) {
	o.ContactIds = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CompanyGroup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyGroup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CompanyGroup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CompanyGroup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CompanyGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["group"] = o.Group
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if o.DefaultContactFlag.IsSet() {
		toSerialize["defaultContactFlag"] = o.DefaultContactFlag.Get()
	}
	if o.AllContactsFlag.IsSet() {
		toSerialize["allContactsFlag"] = o.AllContactsFlag.Get()
	}
	if o.RemoveAllContactsFlag.IsSet() {
		toSerialize["removeAllContactsFlag"] = o.RemoveAllContactsFlag.Get()
	}
	if o.UnsubscribeFlag.IsSet() {
		toSerialize["unsubscribeFlag"] = o.UnsubscribeFlag.Get()
	}
	if !IsNil(o.ContactIds) {
		toSerialize["contactIds"] = o.ContactIds
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CompanyGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyGroup := _CompanyGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyGroup)

	if err != nil {
		return err
	}

	*o = CompanyGroup(varCompanyGroup)

	return err
}

type NullableCompanyGroup struct {
	value *CompanyGroup
	isSet bool
}

func (v NullableCompanyGroup) Get() *CompanyGroup {
	return v.value
}

func (v *NullableCompanyGroup) Set(val *CompanyGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyGroup(val *CompanyGroup) *NullableCompanyGroup {
	return &NullableCompanyGroup{value: val, isSet: true}
}

func (v NullableCompanyGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


