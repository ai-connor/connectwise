/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyNoteType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyNoteType{}

// CompanyNoteType struct for CompanyNoteType
type CompanyNoteType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 15;
	Identifier *string `json:"identifier,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	ImportFlag NullableBool `json:"importFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _CompanyNoteType CompanyNoteType

// NewCompanyNoteType instantiates a new CompanyNoteType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyNoteType(name string) *CompanyNoteType {
	this := CompanyNoteType{}
	this.Name = name
	return &this
}

// NewCompanyNoteTypeWithDefaults instantiates a new CompanyNoteType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyNoteTypeWithDefaults() *CompanyNoteType {
	this := CompanyNoteType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyNoteType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNoteType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyNoteType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyNoteType) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *CompanyNoteType) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNoteType) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *CompanyNoteType) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *CompanyNoteType) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value
func (o *CompanyNoteType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CompanyNoteType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CompanyNoteType) SetName(v string) {
	o.Name = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyNoteType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyNoteType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *CompanyNoteType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *CompanyNoteType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *CompanyNoteType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *CompanyNoteType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetImportFlag returns the ImportFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyNoteType) GetImportFlag() bool {
	if o == nil || IsNil(o.ImportFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ImportFlag.Get()
}

// GetImportFlagOk returns a tuple with the ImportFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyNoteType) GetImportFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImportFlag.Get(), o.ImportFlag.IsSet()
}

// HasImportFlag returns a boolean if a field has been set.
func (o *CompanyNoteType) HasImportFlag() bool {
	if o != nil && o.ImportFlag.IsSet() {
		return true
	}

	return false
}

// SetImportFlag gets a reference to the given NullableBool and assigns it to the ImportFlag field.
func (o *CompanyNoteType) SetImportFlag(v bool) {
	o.ImportFlag.Set(&v)
}
// SetImportFlagNil sets the value for ImportFlag to be an explicit nil
func (o *CompanyNoteType) SetImportFlagNil() {
	o.ImportFlag.Set(nil)
}

// UnsetImportFlag ensures that no value is present for ImportFlag, not even an explicit nil
func (o *CompanyNoteType) UnsetImportFlag() {
	o.ImportFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CompanyNoteType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNoteType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CompanyNoteType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CompanyNoteType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CompanyNoteType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyNoteType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["name"] = o.Name
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.ImportFlag.IsSet() {
		toSerialize["importFlag"] = o.ImportFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CompanyNoteType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyNoteType := _CompanyNoteType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyNoteType)

	if err != nil {
		return err
	}

	*o = CompanyNoteType(varCompanyNoteType)

	return err
}

type NullableCompanyNoteType struct {
	value *CompanyNoteType
	isSet bool
}

func (v NullableCompanyNoteType) Get() *CompanyNoteType {
	return v.value
}

func (v *NullableCompanyNoteType) Set(val *CompanyNoteType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyNoteType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyNoteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyNoteType(val *CompanyNoteType) *NullableCompanyNoteType {
	return &NullableCompanyNoteType{value: val, isSet: true}
}

func (v NullableCompanyNoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyNoteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


