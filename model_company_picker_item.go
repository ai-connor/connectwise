/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanyPickerItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyPickerItem{}

// CompanyPickerItem struct for CompanyPickerItem
type CompanyPickerItem struct {
	Id *int32 `json:"id,omitempty"`
	Member *MemberReference `json:"member,omitempty"`
	Company CompanyReference `json:"company"`
	CompanyStatus *CompanyStatusReference `json:"companyStatus,omitempty"`
	CompanyType *CompanyTypeReference `json:"companyType,omitempty"`
	CompanySite *SiteReference `json:"companySite,omitempty"`
	CompanyLocation *SystemLocationReference `json:"companyLocation,omitempty"`
	CompanyCountry *CountryReference `json:"companyCountry,omitempty"`
	// Gets or sets if true, this record was created by the vendor picker component. Otherwise, the record was created by the company picker component.
	VendorPickerFlag NullableBool `json:"vendorPickerFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _CompanyPickerItem CompanyPickerItem

// NewCompanyPickerItem instantiates a new CompanyPickerItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyPickerItem(company CompanyReference) *CompanyPickerItem {
	this := CompanyPickerItem{}
	this.Company = company
	return &this
}

// NewCompanyPickerItemWithDefaults instantiates a new CompanyPickerItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyPickerItemWithDefaults() *CompanyPickerItem {
	this := CompanyPickerItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanyPickerItem) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *CompanyPickerItem) SetMember(v MemberReference) {
	o.Member = &v
}

// GetCompany returns the Company field value
func (o *CompanyPickerItem) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *CompanyPickerItem) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetCompanyStatus returns the CompanyStatus field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetCompanyStatus() CompanyStatusReference {
	if o == nil || IsNil(o.CompanyStatus) {
		var ret CompanyStatusReference
		return ret
	}
	return *o.CompanyStatus
}

// GetCompanyStatusOk returns a tuple with the CompanyStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetCompanyStatusOk() (*CompanyStatusReference, bool) {
	if o == nil || IsNil(o.CompanyStatus) {
		return nil, false
	}
	return o.CompanyStatus, true
}

// HasCompanyStatus returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasCompanyStatus() bool {
	if o != nil && !IsNil(o.CompanyStatus) {
		return true
	}

	return false
}

// SetCompanyStatus gets a reference to the given CompanyStatusReference and assigns it to the CompanyStatus field.
func (o *CompanyPickerItem) SetCompanyStatus(v CompanyStatusReference) {
	o.CompanyStatus = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetCompanyType() CompanyTypeReference {
	if o == nil || IsNil(o.CompanyType) {
		var ret CompanyTypeReference
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetCompanyTypeOk() (*CompanyTypeReference, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given CompanyTypeReference and assigns it to the CompanyType field.
func (o *CompanyPickerItem) SetCompanyType(v CompanyTypeReference) {
	o.CompanyType = &v
}

// GetCompanySite returns the CompanySite field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetCompanySite() SiteReference {
	if o == nil || IsNil(o.CompanySite) {
		var ret SiteReference
		return ret
	}
	return *o.CompanySite
}

// GetCompanySiteOk returns a tuple with the CompanySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetCompanySiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.CompanySite) {
		return nil, false
	}
	return o.CompanySite, true
}

// HasCompanySite returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasCompanySite() bool {
	if o != nil && !IsNil(o.CompanySite) {
		return true
	}

	return false
}

// SetCompanySite gets a reference to the given SiteReference and assigns it to the CompanySite field.
func (o *CompanyPickerItem) SetCompanySite(v SiteReference) {
	o.CompanySite = &v
}

// GetCompanyLocation returns the CompanyLocation field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetCompanyLocation() SystemLocationReference {
	if o == nil || IsNil(o.CompanyLocation) {
		var ret SystemLocationReference
		return ret
	}
	return *o.CompanyLocation
}

// GetCompanyLocationOk returns a tuple with the CompanyLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetCompanyLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.CompanyLocation) {
		return nil, false
	}
	return o.CompanyLocation, true
}

// HasCompanyLocation returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasCompanyLocation() bool {
	if o != nil && !IsNil(o.CompanyLocation) {
		return true
	}

	return false
}

// SetCompanyLocation gets a reference to the given SystemLocationReference and assigns it to the CompanyLocation field.
func (o *CompanyPickerItem) SetCompanyLocation(v SystemLocationReference) {
	o.CompanyLocation = &v
}

// GetCompanyCountry returns the CompanyCountry field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetCompanyCountry() CountryReference {
	if o == nil || IsNil(o.CompanyCountry) {
		var ret CountryReference
		return ret
	}
	return *o.CompanyCountry
}

// GetCompanyCountryOk returns a tuple with the CompanyCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetCompanyCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.CompanyCountry) {
		return nil, false
	}
	return o.CompanyCountry, true
}

// HasCompanyCountry returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasCompanyCountry() bool {
	if o != nil && !IsNil(o.CompanyCountry) {
		return true
	}

	return false
}

// SetCompanyCountry gets a reference to the given CountryReference and assigns it to the CompanyCountry field.
func (o *CompanyPickerItem) SetCompanyCountry(v CountryReference) {
	o.CompanyCountry = &v
}

// GetVendorPickerFlag returns the VendorPickerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyPickerItem) GetVendorPickerFlag() bool {
	if o == nil || IsNil(o.VendorPickerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.VendorPickerFlag.Get()
}

// GetVendorPickerFlagOk returns a tuple with the VendorPickerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyPickerItem) GetVendorPickerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VendorPickerFlag.Get(), o.VendorPickerFlag.IsSet()
}

// HasVendorPickerFlag returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasVendorPickerFlag() bool {
	if o != nil && o.VendorPickerFlag.IsSet() {
		return true
	}

	return false
}

// SetVendorPickerFlag gets a reference to the given NullableBool and assigns it to the VendorPickerFlag field.
func (o *CompanyPickerItem) SetVendorPickerFlag(v bool) {
	o.VendorPickerFlag.Set(&v)
}
// SetVendorPickerFlagNil sets the value for VendorPickerFlag to be an explicit nil
func (o *CompanyPickerItem) SetVendorPickerFlagNil() {
	o.VendorPickerFlag.Set(nil)
}

// UnsetVendorPickerFlag ensures that no value is present for VendorPickerFlag, not even an explicit nil
func (o *CompanyPickerItem) UnsetVendorPickerFlag() {
	o.VendorPickerFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CompanyPickerItem) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPickerItem) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CompanyPickerItem) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CompanyPickerItem) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CompanyPickerItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyPickerItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	toSerialize["company"] = o.Company
	if !IsNil(o.CompanyStatus) {
		toSerialize["companyStatus"] = o.CompanyStatus
	}
	if !IsNil(o.CompanyType) {
		toSerialize["companyType"] = o.CompanyType
	}
	if !IsNil(o.CompanySite) {
		toSerialize["companySite"] = o.CompanySite
	}
	if !IsNil(o.CompanyLocation) {
		toSerialize["companyLocation"] = o.CompanyLocation
	}
	if !IsNil(o.CompanyCountry) {
		toSerialize["companyCountry"] = o.CompanyCountry
	}
	if o.VendorPickerFlag.IsSet() {
		toSerialize["vendorPickerFlag"] = o.VendorPickerFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *CompanyPickerItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyPickerItem := _CompanyPickerItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanyPickerItem)

	if err != nil {
		return err
	}

	*o = CompanyPickerItem(varCompanyPickerItem)

	return err
}

type NullableCompanyPickerItem struct {
	value *CompanyPickerItem
	isSet bool
}

func (v NullableCompanyPickerItem) Get() *CompanyPickerItem {
	return v.value
}

func (v *NullableCompanyPickerItem) Set(val *CompanyPickerItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyPickerItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyPickerItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyPickerItem(val *CompanyPickerItem) *NullableCompanyPickerItem {
	return &NullableCompanyPickerItem{value: val, isSet: true}
}

func (v NullableCompanyPickerItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyPickerItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


