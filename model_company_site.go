/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompanySite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanySite{}

// CompanySite struct for CompanySite
type CompanySite struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	//  Max length: 50;
	AddressLine1 *string `json:"addressLine1,omitempty"`
	//  Max length: 50;
	AddressLine2 *string `json:"addressLine2,omitempty"`
	//  Max length: 50;
	City *string `json:"city,omitempty"`
	StateReference *StateReference `json:"stateReference,omitempty"`
	//  Max length: 12;
	Zip *string `json:"zip,omitempty"`
	Country *CountryReference `json:"country,omitempty"`
	AddressFormat *string `json:"addressFormat,omitempty"`
	//  Max length: 30;
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	//  Max length: 30;
	PhoneNumberExt *string `json:"phoneNumberExt,omitempty"`
	//  Max length: 30;
	FaxNumber *string `json:"faxNumber,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	EntityType *EntityTypeReference `json:"entityType,omitempty"`
	ExpenseReimbursement NullableFloat64 `json:"expenseReimbursement,omitempty"`
	PrimaryAddressFlag NullableBool `json:"primaryAddressFlag,omitempty"`
	DefaultShippingFlag NullableBool `json:"defaultShippingFlag,omitempty"`
	DefaultBillingFlag NullableBool `json:"defaultBillingFlag,omitempty"`
	DefaultMailingFlag NullableBool `json:"defaultMailingFlag,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	BillSeparateFlag NullableBool `json:"billSeparateFlag,omitempty"`
	MobileGuid NullableString `json:"mobileGuid,omitempty"`
	Calendar *CalendarReference `json:"calendar,omitempty"`
	TimeZone *TimeZoneSetupReference `json:"timeZone,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _CompanySite CompanySite

// NewCompanySite instantiates a new CompanySite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanySite(name string) *CompanySite {
	this := CompanySite{}
	this.Name = name
	return &this
}

// NewCompanySiteWithDefaults instantiates a new CompanySite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanySiteWithDefaults() *CompanySite {
	this := CompanySite{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanySite) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanySite) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CompanySite) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *CompanySite) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CompanySite) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CompanySite) SetName(v string) {
	o.Name = v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *CompanySite) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *CompanySite) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *CompanySite) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *CompanySite) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *CompanySite) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *CompanySite) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CompanySite) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CompanySite) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CompanySite) SetCity(v string) {
	o.City = &v
}

// GetStateReference returns the StateReference field value if set, zero value otherwise.
func (o *CompanySite) GetStateReference() StateReference {
	if o == nil || IsNil(o.StateReference) {
		var ret StateReference
		return ret
	}
	return *o.StateReference
}

// GetStateReferenceOk returns a tuple with the StateReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetStateReferenceOk() (*StateReference, bool) {
	if o == nil || IsNil(o.StateReference) {
		return nil, false
	}
	return o.StateReference, true
}

// HasStateReference returns a boolean if a field has been set.
func (o *CompanySite) HasStateReference() bool {
	if o != nil && !IsNil(o.StateReference) {
		return true
	}

	return false
}

// SetStateReference gets a reference to the given StateReference and assigns it to the StateReference field.
func (o *CompanySite) SetStateReference(v StateReference) {
	o.StateReference = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *CompanySite) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *CompanySite) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *CompanySite) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CompanySite) GetCountry() CountryReference {
	if o == nil || IsNil(o.Country) {
		var ret CountryReference
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CompanySite) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given CountryReference and assigns it to the Country field.
func (o *CompanySite) SetCountry(v CountryReference) {
	o.Country = &v
}

// GetAddressFormat returns the AddressFormat field value if set, zero value otherwise.
func (o *CompanySite) GetAddressFormat() string {
	if o == nil || IsNil(o.AddressFormat) {
		var ret string
		return ret
	}
	return *o.AddressFormat
}

// GetAddressFormatOk returns a tuple with the AddressFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetAddressFormatOk() (*string, bool) {
	if o == nil || IsNil(o.AddressFormat) {
		return nil, false
	}
	return o.AddressFormat, true
}

// HasAddressFormat returns a boolean if a field has been set.
func (o *CompanySite) HasAddressFormat() bool {
	if o != nil && !IsNil(o.AddressFormat) {
		return true
	}

	return false
}

// SetAddressFormat gets a reference to the given string and assigns it to the AddressFormat field.
func (o *CompanySite) SetAddressFormat(v string) {
	o.AddressFormat = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *CompanySite) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *CompanySite) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *CompanySite) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhoneNumberExt returns the PhoneNumberExt field value if set, zero value otherwise.
func (o *CompanySite) GetPhoneNumberExt() string {
	if o == nil || IsNil(o.PhoneNumberExt) {
		var ret string
		return ret
	}
	return *o.PhoneNumberExt
}

// GetPhoneNumberExtOk returns a tuple with the PhoneNumberExt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetPhoneNumberExtOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumberExt) {
		return nil, false
	}
	return o.PhoneNumberExt, true
}

// HasPhoneNumberExt returns a boolean if a field has been set.
func (o *CompanySite) HasPhoneNumberExt() bool {
	if o != nil && !IsNil(o.PhoneNumberExt) {
		return true
	}

	return false
}

// SetPhoneNumberExt gets a reference to the given string and assigns it to the PhoneNumberExt field.
func (o *CompanySite) SetPhoneNumberExt(v string) {
	o.PhoneNumberExt = &v
}

// GetFaxNumber returns the FaxNumber field value if set, zero value otherwise.
func (o *CompanySite) GetFaxNumber() string {
	if o == nil || IsNil(o.FaxNumber) {
		var ret string
		return ret
	}
	return *o.FaxNumber
}

// GetFaxNumberOk returns a tuple with the FaxNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetFaxNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FaxNumber) {
		return nil, false
	}
	return o.FaxNumber, true
}

// HasFaxNumber returns a boolean if a field has been set.
func (o *CompanySite) HasFaxNumber() bool {
	if o != nil && !IsNil(o.FaxNumber) {
		return true
	}

	return false
}

// SetFaxNumber gets a reference to the given string and assigns it to the FaxNumber field.
func (o *CompanySite) SetFaxNumber(v string) {
	o.FaxNumber = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *CompanySite) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *CompanySite) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *CompanySite) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *CompanySite) GetEntityType() EntityTypeReference {
	if o == nil || IsNil(o.EntityType) {
		var ret EntityTypeReference
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetEntityTypeOk() (*EntityTypeReference, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *CompanySite) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityTypeReference and assigns it to the EntityType field.
func (o *CompanySite) SetEntityType(v EntityTypeReference) {
	o.EntityType = &v
}

// GetExpenseReimbursement returns the ExpenseReimbursement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetExpenseReimbursement() float64 {
	if o == nil || IsNil(o.ExpenseReimbursement.Get()) {
		var ret float64
		return ret
	}
	return *o.ExpenseReimbursement.Get()
}

// GetExpenseReimbursementOk returns a tuple with the ExpenseReimbursement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetExpenseReimbursementOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseReimbursement.Get(), o.ExpenseReimbursement.IsSet()
}

// HasExpenseReimbursement returns a boolean if a field has been set.
func (o *CompanySite) HasExpenseReimbursement() bool {
	if o != nil && o.ExpenseReimbursement.IsSet() {
		return true
	}

	return false
}

// SetExpenseReimbursement gets a reference to the given NullableFloat64 and assigns it to the ExpenseReimbursement field.
func (o *CompanySite) SetExpenseReimbursement(v float64) {
	o.ExpenseReimbursement.Set(&v)
}
// SetExpenseReimbursementNil sets the value for ExpenseReimbursement to be an explicit nil
func (o *CompanySite) SetExpenseReimbursementNil() {
	o.ExpenseReimbursement.Set(nil)
}

// UnsetExpenseReimbursement ensures that no value is present for ExpenseReimbursement, not even an explicit nil
func (o *CompanySite) UnsetExpenseReimbursement() {
	o.ExpenseReimbursement.Unset()
}

// GetPrimaryAddressFlag returns the PrimaryAddressFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetPrimaryAddressFlag() bool {
	if o == nil || IsNil(o.PrimaryAddressFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PrimaryAddressFlag.Get()
}

// GetPrimaryAddressFlagOk returns a tuple with the PrimaryAddressFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetPrimaryAddressFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryAddressFlag.Get(), o.PrimaryAddressFlag.IsSet()
}

// HasPrimaryAddressFlag returns a boolean if a field has been set.
func (o *CompanySite) HasPrimaryAddressFlag() bool {
	if o != nil && o.PrimaryAddressFlag.IsSet() {
		return true
	}

	return false
}

// SetPrimaryAddressFlag gets a reference to the given NullableBool and assigns it to the PrimaryAddressFlag field.
func (o *CompanySite) SetPrimaryAddressFlag(v bool) {
	o.PrimaryAddressFlag.Set(&v)
}
// SetPrimaryAddressFlagNil sets the value for PrimaryAddressFlag to be an explicit nil
func (o *CompanySite) SetPrimaryAddressFlagNil() {
	o.PrimaryAddressFlag.Set(nil)
}

// UnsetPrimaryAddressFlag ensures that no value is present for PrimaryAddressFlag, not even an explicit nil
func (o *CompanySite) UnsetPrimaryAddressFlag() {
	o.PrimaryAddressFlag.Unset()
}

// GetDefaultShippingFlag returns the DefaultShippingFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetDefaultShippingFlag() bool {
	if o == nil || IsNil(o.DefaultShippingFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultShippingFlag.Get()
}

// GetDefaultShippingFlagOk returns a tuple with the DefaultShippingFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetDefaultShippingFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultShippingFlag.Get(), o.DefaultShippingFlag.IsSet()
}

// HasDefaultShippingFlag returns a boolean if a field has been set.
func (o *CompanySite) HasDefaultShippingFlag() bool {
	if o != nil && o.DefaultShippingFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultShippingFlag gets a reference to the given NullableBool and assigns it to the DefaultShippingFlag field.
func (o *CompanySite) SetDefaultShippingFlag(v bool) {
	o.DefaultShippingFlag.Set(&v)
}
// SetDefaultShippingFlagNil sets the value for DefaultShippingFlag to be an explicit nil
func (o *CompanySite) SetDefaultShippingFlagNil() {
	o.DefaultShippingFlag.Set(nil)
}

// UnsetDefaultShippingFlag ensures that no value is present for DefaultShippingFlag, not even an explicit nil
func (o *CompanySite) UnsetDefaultShippingFlag() {
	o.DefaultShippingFlag.Unset()
}

// GetDefaultBillingFlag returns the DefaultBillingFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetDefaultBillingFlag() bool {
	if o == nil || IsNil(o.DefaultBillingFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultBillingFlag.Get()
}

// GetDefaultBillingFlagOk returns a tuple with the DefaultBillingFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetDefaultBillingFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultBillingFlag.Get(), o.DefaultBillingFlag.IsSet()
}

// HasDefaultBillingFlag returns a boolean if a field has been set.
func (o *CompanySite) HasDefaultBillingFlag() bool {
	if o != nil && o.DefaultBillingFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultBillingFlag gets a reference to the given NullableBool and assigns it to the DefaultBillingFlag field.
func (o *CompanySite) SetDefaultBillingFlag(v bool) {
	o.DefaultBillingFlag.Set(&v)
}
// SetDefaultBillingFlagNil sets the value for DefaultBillingFlag to be an explicit nil
func (o *CompanySite) SetDefaultBillingFlagNil() {
	o.DefaultBillingFlag.Set(nil)
}

// UnsetDefaultBillingFlag ensures that no value is present for DefaultBillingFlag, not even an explicit nil
func (o *CompanySite) UnsetDefaultBillingFlag() {
	o.DefaultBillingFlag.Unset()
}

// GetDefaultMailingFlag returns the DefaultMailingFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetDefaultMailingFlag() bool {
	if o == nil || IsNil(o.DefaultMailingFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultMailingFlag.Get()
}

// GetDefaultMailingFlagOk returns a tuple with the DefaultMailingFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetDefaultMailingFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultMailingFlag.Get(), o.DefaultMailingFlag.IsSet()
}

// HasDefaultMailingFlag returns a boolean if a field has been set.
func (o *CompanySite) HasDefaultMailingFlag() bool {
	if o != nil && o.DefaultMailingFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultMailingFlag gets a reference to the given NullableBool and assigns it to the DefaultMailingFlag field.
func (o *CompanySite) SetDefaultMailingFlag(v bool) {
	o.DefaultMailingFlag.Set(&v)
}
// SetDefaultMailingFlagNil sets the value for DefaultMailingFlag to be an explicit nil
func (o *CompanySite) SetDefaultMailingFlagNil() {
	o.DefaultMailingFlag.Set(nil)
}

// UnsetDefaultMailingFlag ensures that no value is present for DefaultMailingFlag, not even an explicit nil
func (o *CompanySite) UnsetDefaultMailingFlag() {
	o.DefaultMailingFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *CompanySite) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *CompanySite) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *CompanySite) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *CompanySite) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetBillSeparateFlag returns the BillSeparateFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetBillSeparateFlag() bool {
	if o == nil || IsNil(o.BillSeparateFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillSeparateFlag.Get()
}

// GetBillSeparateFlagOk returns a tuple with the BillSeparateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetBillSeparateFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillSeparateFlag.Get(), o.BillSeparateFlag.IsSet()
}

// HasBillSeparateFlag returns a boolean if a field has been set.
func (o *CompanySite) HasBillSeparateFlag() bool {
	if o != nil && o.BillSeparateFlag.IsSet() {
		return true
	}

	return false
}

// SetBillSeparateFlag gets a reference to the given NullableBool and assigns it to the BillSeparateFlag field.
func (o *CompanySite) SetBillSeparateFlag(v bool) {
	o.BillSeparateFlag.Set(&v)
}
// SetBillSeparateFlagNil sets the value for BillSeparateFlag to be an explicit nil
func (o *CompanySite) SetBillSeparateFlagNil() {
	o.BillSeparateFlag.Set(nil)
}

// UnsetBillSeparateFlag ensures that no value is present for BillSeparateFlag, not even an explicit nil
func (o *CompanySite) UnsetBillSeparateFlag() {
	o.BillSeparateFlag.Unset()
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanySite) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanySite) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *CompanySite) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *CompanySite) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}
// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *CompanySite) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *CompanySite) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetCalendar returns the Calendar field value if set, zero value otherwise.
func (o *CompanySite) GetCalendar() CalendarReference {
	if o == nil || IsNil(o.Calendar) {
		var ret CalendarReference
		return ret
	}
	return *o.Calendar
}

// GetCalendarOk returns a tuple with the Calendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetCalendarOk() (*CalendarReference, bool) {
	if o == nil || IsNil(o.Calendar) {
		return nil, false
	}
	return o.Calendar, true
}

// HasCalendar returns a boolean if a field has been set.
func (o *CompanySite) HasCalendar() bool {
	if o != nil && !IsNil(o.Calendar) {
		return true
	}

	return false
}

// SetCalendar gets a reference to the given CalendarReference and assigns it to the Calendar field.
func (o *CompanySite) SetCalendar(v CalendarReference) {
	o.Calendar = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *CompanySite) GetTimeZone() TimeZoneSetupReference {
	if o == nil || IsNil(o.TimeZone) {
		var ret TimeZoneSetupReference
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetTimeZoneOk() (*TimeZoneSetupReference, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *CompanySite) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given TimeZoneSetupReference and assigns it to the TimeZone field.
func (o *CompanySite) SetTimeZone(v TimeZoneSetupReference) {
	o.TimeZone = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *CompanySite) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *CompanySite) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *CompanySite) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CompanySite) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CompanySite) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CompanySite) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *CompanySite) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanySite) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *CompanySite) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *CompanySite) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o CompanySite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanySite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.AddressLine1) {
		toSerialize["addressLine1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["addressLine2"] = o.AddressLine2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.StateReference) {
		toSerialize["stateReference"] = o.StateReference
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.AddressFormat) {
		toSerialize["addressFormat"] = o.AddressFormat
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.PhoneNumberExt) {
		toSerialize["phoneNumberExt"] = o.PhoneNumberExt
	}
	if !IsNil(o.FaxNumber) {
		toSerialize["faxNumber"] = o.FaxNumber
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if o.ExpenseReimbursement.IsSet() {
		toSerialize["expenseReimbursement"] = o.ExpenseReimbursement.Get()
	}
	if o.PrimaryAddressFlag.IsSet() {
		toSerialize["primaryAddressFlag"] = o.PrimaryAddressFlag.Get()
	}
	if o.DefaultShippingFlag.IsSet() {
		toSerialize["defaultShippingFlag"] = o.DefaultShippingFlag.Get()
	}
	if o.DefaultBillingFlag.IsSet() {
		toSerialize["defaultBillingFlag"] = o.DefaultBillingFlag.Get()
	}
	if o.DefaultMailingFlag.IsSet() {
		toSerialize["defaultMailingFlag"] = o.DefaultMailingFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.BillSeparateFlag.IsSet() {
		toSerialize["billSeparateFlag"] = o.BillSeparateFlag.Get()
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.Calendar) {
		toSerialize["calendar"] = o.Calendar
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *CompanySite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanySite := _CompanySite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanySite)

	if err != nil {
		return err
	}

	*o = CompanySite(varCompanySite)

	return err
}

type NullableCompanySite struct {
	value *CompanySite
	isSet bool
}

func (v NullableCompanySite) Get() *CompanySite {
	return v.value
}

func (v *NullableCompanySite) Set(val *CompanySite) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanySite) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanySite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanySite(val *CompanySite) *NullableCompanySite {
	return &NullableCompanySite{value: val, isSet: true}
}

func (v NullableCompanySite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanySite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


