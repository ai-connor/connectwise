/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ConfigurationTypeQuestionValueInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationTypeQuestionValueInfo{}

// ConfigurationTypeQuestionValueInfo struct for ConfigurationTypeQuestionValueInfo
type ConfigurationTypeQuestionValueInfo struct {
	Id *int32 `json:"id,omitempty"`
	ConfigurationType *ConfigurationTypeReference `json:"configurationType,omitempty"`
	Question *ConfigurationTypeQuestionReference `json:"question,omitempty"`
	Value *string `json:"value,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewConfigurationTypeQuestionValueInfo instantiates a new ConfigurationTypeQuestionValueInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationTypeQuestionValueInfo() *ConfigurationTypeQuestionValueInfo {
	this := ConfigurationTypeQuestionValueInfo{}
	return &this
}

// NewConfigurationTypeQuestionValueInfoWithDefaults instantiates a new ConfigurationTypeQuestionValueInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationTypeQuestionValueInfoWithDefaults() *ConfigurationTypeQuestionValueInfo {
	this := ConfigurationTypeQuestionValueInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionValueInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionValueInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ConfigurationTypeQuestionValueInfo) SetId(v int32) {
	o.Id = &v
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionValueInfo) GetConfigurationType() ConfigurationTypeReference {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret ConfigurationTypeReference
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionValueInfo) GetConfigurationTypeOk() (*ConfigurationTypeReference, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given ConfigurationTypeReference and assigns it to the ConfigurationType field.
func (o *ConfigurationTypeQuestionValueInfo) SetConfigurationType(v ConfigurationTypeReference) {
	o.ConfigurationType = &v
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionValueInfo) GetQuestion() ConfigurationTypeQuestionReference {
	if o == nil || IsNil(o.Question) {
		var ret ConfigurationTypeQuestionReference
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionValueInfo) GetQuestionOk() (*ConfigurationTypeQuestionReference, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given ConfigurationTypeQuestionReference and assigns it to the Question field.
func (o *ConfigurationTypeQuestionValueInfo) SetQuestion(v ConfigurationTypeQuestionReference) {
	o.Question = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionValueInfo) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionValueInfo) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConfigurationTypeQuestionValueInfo) SetValue(v string) {
	o.Value = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionValueInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionValueInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *ConfigurationTypeQuestionValueInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *ConfigurationTypeQuestionValueInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *ConfigurationTypeQuestionValueInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfigurationTypeQuestionValueInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfigurationTypeQuestionValueInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ConfigurationTypeQuestionValueInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ConfigurationTypeQuestionValueInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ConfigurationTypeQuestionValueInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ConfigurationTypeQuestionValueInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationTypeQuestionValueInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ConfigurationTypeQuestionValueInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ConfigurationTypeQuestionValueInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ConfigurationTypeQuestionValueInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationTypeQuestionValueInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableConfigurationTypeQuestionValueInfo struct {
	value *ConfigurationTypeQuestionValueInfo
	isSet bool
}

func (v NullableConfigurationTypeQuestionValueInfo) Get() *ConfigurationTypeQuestionValueInfo {
	return v.value
}

func (v *NullableConfigurationTypeQuestionValueInfo) Set(val *ConfigurationTypeQuestionValueInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationTypeQuestionValueInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationTypeQuestionValueInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationTypeQuestionValueInfo(val *ConfigurationTypeQuestionValueInfo) *NullableConfigurationTypeQuestionValueInfo {
	return &NullableConfigurationTypeQuestionValueInfo{value: val, isSet: true}
}

func (v NullableConfigurationTypeQuestionValueInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationTypeQuestionValueInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


