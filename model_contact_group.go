/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactGroup{}

// ContactGroup struct for ContactGroup
type ContactGroup struct {
	Id *int32 `json:"id,omitempty"`
	Group GroupReference `json:"group"`
	Contact *ContactReference `json:"contact,omitempty"`
	//  Max length: 50;
	Description *string `json:"description,omitempty"`
	UnsubscribeFlag NullableBool `json:"unsubscribeFlag,omitempty"`
	CompanyUnsubcribedEmailMessage *string `json:"companyUnsubcribedEmailMessage,omitempty"`
	CompanyGroupUnsubscribedEmailMessage *string `json:"companyGroupUnsubscribedEmailMessage,omitempty"`
	ContactUnsubscribedEmailMessage *string `json:"contactUnsubscribedEmailMessage,omitempty"`
	ContactGroupUnsubscribedEmailMessage *string `json:"contactGroupUnsubscribedEmailMessage,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ContactGroup ContactGroup

// NewContactGroup instantiates a new ContactGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactGroup(group GroupReference) *ContactGroup {
	this := ContactGroup{}
	this.Group = group
	return &this
}

// NewContactGroupWithDefaults instantiates a new ContactGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactGroupWithDefaults() *ContactGroup {
	this := ContactGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContactGroup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContactGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ContactGroup) SetId(v int32) {
	o.Id = &v
}

// GetGroup returns the Group field value
func (o *ContactGroup) GetGroup() GroupReference {
	if o == nil {
		var ret GroupReference
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetGroupOk() (*GroupReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ContactGroup) SetGroup(v GroupReference) {
	o.Group = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ContactGroup) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ContactGroup) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ContactGroup) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ContactGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ContactGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ContactGroup) SetDescription(v string) {
	o.Description = &v
}

// GetUnsubscribeFlag returns the UnsubscribeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactGroup) GetUnsubscribeFlag() bool {
	if o == nil || IsNil(o.UnsubscribeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UnsubscribeFlag.Get()
}

// GetUnsubscribeFlagOk returns a tuple with the UnsubscribeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactGroup) GetUnsubscribeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnsubscribeFlag.Get(), o.UnsubscribeFlag.IsSet()
}

// HasUnsubscribeFlag returns a boolean if a field has been set.
func (o *ContactGroup) HasUnsubscribeFlag() bool {
	if o != nil && o.UnsubscribeFlag.IsSet() {
		return true
	}

	return false
}

// SetUnsubscribeFlag gets a reference to the given NullableBool and assigns it to the UnsubscribeFlag field.
func (o *ContactGroup) SetUnsubscribeFlag(v bool) {
	o.UnsubscribeFlag.Set(&v)
}
// SetUnsubscribeFlagNil sets the value for UnsubscribeFlag to be an explicit nil
func (o *ContactGroup) SetUnsubscribeFlagNil() {
	o.UnsubscribeFlag.Set(nil)
}

// UnsetUnsubscribeFlag ensures that no value is present for UnsubscribeFlag, not even an explicit nil
func (o *ContactGroup) UnsetUnsubscribeFlag() {
	o.UnsubscribeFlag.Unset()
}

// GetCompanyUnsubcribedEmailMessage returns the CompanyUnsubcribedEmailMessage field value if set, zero value otherwise.
func (o *ContactGroup) GetCompanyUnsubcribedEmailMessage() string {
	if o == nil || IsNil(o.CompanyUnsubcribedEmailMessage) {
		var ret string
		return ret
	}
	return *o.CompanyUnsubcribedEmailMessage
}

// GetCompanyUnsubcribedEmailMessageOk returns a tuple with the CompanyUnsubcribedEmailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetCompanyUnsubcribedEmailMessageOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyUnsubcribedEmailMessage) {
		return nil, false
	}
	return o.CompanyUnsubcribedEmailMessage, true
}

// HasCompanyUnsubcribedEmailMessage returns a boolean if a field has been set.
func (o *ContactGroup) HasCompanyUnsubcribedEmailMessage() bool {
	if o != nil && !IsNil(o.CompanyUnsubcribedEmailMessage) {
		return true
	}

	return false
}

// SetCompanyUnsubcribedEmailMessage gets a reference to the given string and assigns it to the CompanyUnsubcribedEmailMessage field.
func (o *ContactGroup) SetCompanyUnsubcribedEmailMessage(v string) {
	o.CompanyUnsubcribedEmailMessage = &v
}

// GetCompanyGroupUnsubscribedEmailMessage returns the CompanyGroupUnsubscribedEmailMessage field value if set, zero value otherwise.
func (o *ContactGroup) GetCompanyGroupUnsubscribedEmailMessage() string {
	if o == nil || IsNil(o.CompanyGroupUnsubscribedEmailMessage) {
		var ret string
		return ret
	}
	return *o.CompanyGroupUnsubscribedEmailMessage
}

// GetCompanyGroupUnsubscribedEmailMessageOk returns a tuple with the CompanyGroupUnsubscribedEmailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetCompanyGroupUnsubscribedEmailMessageOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyGroupUnsubscribedEmailMessage) {
		return nil, false
	}
	return o.CompanyGroupUnsubscribedEmailMessage, true
}

// HasCompanyGroupUnsubscribedEmailMessage returns a boolean if a field has been set.
func (o *ContactGroup) HasCompanyGroupUnsubscribedEmailMessage() bool {
	if o != nil && !IsNil(o.CompanyGroupUnsubscribedEmailMessage) {
		return true
	}

	return false
}

// SetCompanyGroupUnsubscribedEmailMessage gets a reference to the given string and assigns it to the CompanyGroupUnsubscribedEmailMessage field.
func (o *ContactGroup) SetCompanyGroupUnsubscribedEmailMessage(v string) {
	o.CompanyGroupUnsubscribedEmailMessage = &v
}

// GetContactUnsubscribedEmailMessage returns the ContactUnsubscribedEmailMessage field value if set, zero value otherwise.
func (o *ContactGroup) GetContactUnsubscribedEmailMessage() string {
	if o == nil || IsNil(o.ContactUnsubscribedEmailMessage) {
		var ret string
		return ret
	}
	return *o.ContactUnsubscribedEmailMessage
}

// GetContactUnsubscribedEmailMessageOk returns a tuple with the ContactUnsubscribedEmailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetContactUnsubscribedEmailMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ContactUnsubscribedEmailMessage) {
		return nil, false
	}
	return o.ContactUnsubscribedEmailMessage, true
}

// HasContactUnsubscribedEmailMessage returns a boolean if a field has been set.
func (o *ContactGroup) HasContactUnsubscribedEmailMessage() bool {
	if o != nil && !IsNil(o.ContactUnsubscribedEmailMessage) {
		return true
	}

	return false
}

// SetContactUnsubscribedEmailMessage gets a reference to the given string and assigns it to the ContactUnsubscribedEmailMessage field.
func (o *ContactGroup) SetContactUnsubscribedEmailMessage(v string) {
	o.ContactUnsubscribedEmailMessage = &v
}

// GetContactGroupUnsubscribedEmailMessage returns the ContactGroupUnsubscribedEmailMessage field value if set, zero value otherwise.
func (o *ContactGroup) GetContactGroupUnsubscribedEmailMessage() string {
	if o == nil || IsNil(o.ContactGroupUnsubscribedEmailMessage) {
		var ret string
		return ret
	}
	return *o.ContactGroupUnsubscribedEmailMessage
}

// GetContactGroupUnsubscribedEmailMessageOk returns a tuple with the ContactGroupUnsubscribedEmailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetContactGroupUnsubscribedEmailMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ContactGroupUnsubscribedEmailMessage) {
		return nil, false
	}
	return o.ContactGroupUnsubscribedEmailMessage, true
}

// HasContactGroupUnsubscribedEmailMessage returns a boolean if a field has been set.
func (o *ContactGroup) HasContactGroupUnsubscribedEmailMessage() bool {
	if o != nil && !IsNil(o.ContactGroupUnsubscribedEmailMessage) {
		return true
	}

	return false
}

// SetContactGroupUnsubscribedEmailMessage gets a reference to the given string and assigns it to the ContactGroupUnsubscribedEmailMessage field.
func (o *ContactGroup) SetContactGroupUnsubscribedEmailMessage(v string) {
	o.ContactGroupUnsubscribedEmailMessage = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ContactGroup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ContactGroup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ContactGroup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ContactGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["group"] = o.Group
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.UnsubscribeFlag.IsSet() {
		toSerialize["unsubscribeFlag"] = o.UnsubscribeFlag.Get()
	}
	if !IsNil(o.CompanyUnsubcribedEmailMessage) {
		toSerialize["companyUnsubcribedEmailMessage"] = o.CompanyUnsubcribedEmailMessage
	}
	if !IsNil(o.CompanyGroupUnsubscribedEmailMessage) {
		toSerialize["companyGroupUnsubscribedEmailMessage"] = o.CompanyGroupUnsubscribedEmailMessage
	}
	if !IsNil(o.ContactUnsubscribedEmailMessage) {
		toSerialize["contactUnsubscribedEmailMessage"] = o.ContactUnsubscribedEmailMessage
	}
	if !IsNil(o.ContactGroupUnsubscribedEmailMessage) {
		toSerialize["contactGroupUnsubscribedEmailMessage"] = o.ContactGroupUnsubscribedEmailMessage
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ContactGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactGroup := _ContactGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactGroup)

	if err != nil {
		return err
	}

	*o = ContactGroup(varContactGroup)

	return err
}

type NullableContactGroup struct {
	value *ContactGroup
	isSet bool
}

func (v NullableContactGroup) Get() *ContactGroup {
	return v.value
}

func (v *NullableContactGroup) Set(val *ContactGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableContactGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableContactGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactGroup(val *ContactGroup) *NullableContactGroup {
	return &NullableContactGroup{value: val, isSet: true}
}

func (v NullableContactGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


