/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ContactTrack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactTrack{}

// ContactTrack struct for ContactTrack
type ContactTrack struct {
	Id *int32 `json:"id,omitempty"`
	TrackId *int32 `json:"trackId,omitempty"`
	Name *string `json:"name,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	ActionTaken NullableInt32 `json:"actionTaken,omitempty"`
	ActionRemaining NullableInt32 `json:"actionRemaining,omitempty"`
	StartedBy *string `json:"startedBy,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewContactTrack instantiates a new ContactTrack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactTrack() *ContactTrack {
	this := ContactTrack{}
	return &this
}

// NewContactTrackWithDefaults instantiates a new ContactTrack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactTrackWithDefaults() *ContactTrack {
	this := ContactTrack{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContactTrack) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContactTrack) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ContactTrack) SetId(v int32) {
	o.Id = &v
}

// GetTrackId returns the TrackId field value if set, zero value otherwise.
func (o *ContactTrack) GetTrackId() int32 {
	if o == nil || IsNil(o.TrackId) {
		var ret int32
		return ret
	}
	return *o.TrackId
}

// GetTrackIdOk returns a tuple with the TrackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetTrackIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TrackId) {
		return nil, false
	}
	return o.TrackId, true
}

// HasTrackId returns a boolean if a field has been set.
func (o *ContactTrack) HasTrackId() bool {
	if o != nil && !IsNil(o.TrackId) {
		return true
	}

	return false
}

// SetTrackId gets a reference to the given int32 and assigns it to the TrackId field.
func (o *ContactTrack) SetTrackId(v int32) {
	o.TrackId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContactTrack) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContactTrack) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContactTrack) SetName(v string) {
	o.Name = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ContactTrack) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ContactTrack) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ContactTrack) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ContactTrack) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ContactTrack) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ContactTrack) SetEndDate(v string) {
	o.EndDate = &v
}

// GetActionTaken returns the ActionTaken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactTrack) GetActionTaken() int32 {
	if o == nil || IsNil(o.ActionTaken.Get()) {
		var ret int32
		return ret
	}
	return *o.ActionTaken.Get()
}

// GetActionTakenOk returns a tuple with the ActionTaken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactTrack) GetActionTakenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionTaken.Get(), o.ActionTaken.IsSet()
}

// HasActionTaken returns a boolean if a field has been set.
func (o *ContactTrack) HasActionTaken() bool {
	if o != nil && o.ActionTaken.IsSet() {
		return true
	}

	return false
}

// SetActionTaken gets a reference to the given NullableInt32 and assigns it to the ActionTaken field.
func (o *ContactTrack) SetActionTaken(v int32) {
	o.ActionTaken.Set(&v)
}
// SetActionTakenNil sets the value for ActionTaken to be an explicit nil
func (o *ContactTrack) SetActionTakenNil() {
	o.ActionTaken.Set(nil)
}

// UnsetActionTaken ensures that no value is present for ActionTaken, not even an explicit nil
func (o *ContactTrack) UnsetActionTaken() {
	o.ActionTaken.Unset()
}

// GetActionRemaining returns the ActionRemaining field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContactTrack) GetActionRemaining() int32 {
	if o == nil || IsNil(o.ActionRemaining.Get()) {
		var ret int32
		return ret
	}
	return *o.ActionRemaining.Get()
}

// GetActionRemainingOk returns a tuple with the ActionRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContactTrack) GetActionRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionRemaining.Get(), o.ActionRemaining.IsSet()
}

// HasActionRemaining returns a boolean if a field has been set.
func (o *ContactTrack) HasActionRemaining() bool {
	if o != nil && o.ActionRemaining.IsSet() {
		return true
	}

	return false
}

// SetActionRemaining gets a reference to the given NullableInt32 and assigns it to the ActionRemaining field.
func (o *ContactTrack) SetActionRemaining(v int32) {
	o.ActionRemaining.Set(&v)
}
// SetActionRemainingNil sets the value for ActionRemaining to be an explicit nil
func (o *ContactTrack) SetActionRemainingNil() {
	o.ActionRemaining.Set(nil)
}

// UnsetActionRemaining ensures that no value is present for ActionRemaining, not even an explicit nil
func (o *ContactTrack) UnsetActionRemaining() {
	o.ActionRemaining.Unset()
}

// GetStartedBy returns the StartedBy field value if set, zero value otherwise.
func (o *ContactTrack) GetStartedBy() string {
	if o == nil || IsNil(o.StartedBy) {
		var ret string
		return ret
	}
	return *o.StartedBy
}

// GetStartedByOk returns a tuple with the StartedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetStartedByOk() (*string, bool) {
	if o == nil || IsNil(o.StartedBy) {
		return nil, false
	}
	return o.StartedBy, true
}

// HasStartedBy returns a boolean if a field has been set.
func (o *ContactTrack) HasStartedBy() bool {
	if o != nil && !IsNil(o.StartedBy) {
		return true
	}

	return false
}

// SetStartedBy gets a reference to the given string and assigns it to the StartedBy field.
func (o *ContactTrack) SetStartedBy(v string) {
	o.StartedBy = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ContactTrack) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ContactTrack) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *ContactTrack) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ContactTrack) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ContactTrack) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ContactTrack) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ContactTrack) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactTrack) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ContactTrack) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ContactTrack) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ContactTrack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactTrack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TrackId) {
		toSerialize["trackId"] = o.TrackId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if o.ActionTaken.IsSet() {
		toSerialize["actionTaken"] = o.ActionTaken.Get()
	}
	if o.ActionRemaining.IsSet() {
		toSerialize["actionRemaining"] = o.ActionRemaining.Get()
	}
	if !IsNil(o.StartedBy) {
		toSerialize["startedBy"] = o.StartedBy
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableContactTrack struct {
	value *ContactTrack
	isSet bool
}

func (v NullableContactTrack) Get() *ContactTrack {
	return v.value
}

func (v *NullableContactTrack) Set(val *ContactTrack) {
	v.value = val
	v.isSet = true
}

func (v NullableContactTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableContactTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactTrack(val *ContactTrack) *NullableContactTrack {
	return &NullableContactTrack{value: val, isSet: true}
}

func (v NullableContactTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


