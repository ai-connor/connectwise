/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Conversion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conversion{}

// Conversion struct for Conversion
type Conversion struct {
	Id *int32 `json:"id,omitempty"`
	Quantity NullableFloat64 `json:"quantity,omitempty"`
	UomType UnitOfMeasureReference `json:"uomType"`
	ParentUOM *UnitOfMeasureReference `json:"parentUOM,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Conversion Conversion

// NewConversion instantiates a new Conversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversion(uomType UnitOfMeasureReference) *Conversion {
	this := Conversion{}
	this.UomType = uomType
	return &this
}

// NewConversionWithDefaults instantiates a new Conversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionWithDefaults() *Conversion {
	this := Conversion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Conversion) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversion) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Conversion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Conversion) SetId(v int32) {
	o.Id = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conversion) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float64
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conversion) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *Conversion) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat64 and assigns it to the Quantity field.
func (o *Conversion) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *Conversion) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *Conversion) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetUomType returns the UomType field value
func (o *Conversion) GetUomType() UnitOfMeasureReference {
	if o == nil {
		var ret UnitOfMeasureReference
		return ret
	}

	return o.UomType
}

// GetUomTypeOk returns a tuple with the UomType field value
// and a boolean to check if the value has been set.
func (o *Conversion) GetUomTypeOk() (*UnitOfMeasureReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UomType, true
}

// SetUomType sets field value
func (o *Conversion) SetUomType(v UnitOfMeasureReference) {
	o.UomType = v
}

// GetParentUOM returns the ParentUOM field value if set, zero value otherwise.
func (o *Conversion) GetParentUOM() UnitOfMeasureReference {
	if o == nil || IsNil(o.ParentUOM) {
		var ret UnitOfMeasureReference
		return ret
	}
	return *o.ParentUOM
}

// GetParentUOMOk returns a tuple with the ParentUOM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversion) GetParentUOMOk() (*UnitOfMeasureReference, bool) {
	if o == nil || IsNil(o.ParentUOM) {
		return nil, false
	}
	return o.ParentUOM, true
}

// HasParentUOM returns a boolean if a field has been set.
func (o *Conversion) HasParentUOM() bool {
	if o != nil && !IsNil(o.ParentUOM) {
		return true
	}

	return false
}

// SetParentUOM gets a reference to the given UnitOfMeasureReference and assigns it to the ParentUOM field.
func (o *Conversion) SetParentUOM(v UnitOfMeasureReference) {
	o.ParentUOM = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Conversion) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversion) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Conversion) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Conversion) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Conversion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	toSerialize["uomType"] = o.UomType
	if !IsNil(o.ParentUOM) {
		toSerialize["parentUOM"] = o.ParentUOM
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Conversion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uomType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversion := _Conversion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversion)

	if err != nil {
		return err
	}

	*o = Conversion(varConversion)

	return err
}

type NullableConversion struct {
	value *Conversion
	isSet bool
}

func (v NullableConversion) Get() *Conversion {
	return v.value
}

func (v *NullableConversion) Set(val *Conversion) {
	v.value = val
	v.isSet = true
}

func (v NullableConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversion(val *Conversion) *NullableConversion {
	return &NullableConversion{value: val, isSet: true}
}

func (v NullableConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


