/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConvertItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertItem{}

// ConvertItem struct for ConvertItem
type ConvertItem struct {
	Id *int32 `json:"id,omitempty"`
	RecordType NullableString `json:"recordType"`
	Project *ProjectReference `json:"project,omitempty"`
	Phase *ProjectPhaseReference `json:"phase,omitempty"`
	WbsCode *string `json:"wbsCode,omitempty"`
}

type _ConvertItem ConvertItem

// NewConvertItem instantiates a new ConvertItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertItem(recordType NullableString) *ConvertItem {
	this := ConvertItem{}
	this.RecordType = recordType
	return &this
}

// NewConvertItemWithDefaults instantiates a new ConvertItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertItemWithDefaults() *ConvertItem {
	this := ConvertItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConvertItem) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertItem) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConvertItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ConvertItem) SetId(v int32) {
	o.Id = &v
}

// GetRecordType returns the RecordType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConvertItem) GetRecordType() string {
	if o == nil || o.RecordType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RecordType.Get()
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConvertItem) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordType.Get(), o.RecordType.IsSet()
}

// SetRecordType sets field value
func (o *ConvertItem) SetRecordType(v string) {
	o.RecordType.Set(&v)
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ConvertItem) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertItem) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ConvertItem) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *ConvertItem) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *ConvertItem) GetPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.Phase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertItem) GetPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *ConvertItem) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given ProjectPhaseReference and assigns it to the Phase field.
func (o *ConvertItem) SetPhase(v ProjectPhaseReference) {
	o.Phase = &v
}

// GetWbsCode returns the WbsCode field value if set, zero value otherwise.
func (o *ConvertItem) GetWbsCode() string {
	if o == nil || IsNil(o.WbsCode) {
		var ret string
		return ret
	}
	return *o.WbsCode
}

// GetWbsCodeOk returns a tuple with the WbsCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertItem) GetWbsCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WbsCode) {
		return nil, false
	}
	return o.WbsCode, true
}

// HasWbsCode returns a boolean if a field has been set.
func (o *ConvertItem) HasWbsCode() bool {
	if o != nil && !IsNil(o.WbsCode) {
		return true
	}

	return false
}

// SetWbsCode gets a reference to the given string and assigns it to the WbsCode field.
func (o *ConvertItem) SetWbsCode(v string) {
	o.WbsCode = &v
}

func (o ConvertItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["recordType"] = o.RecordType.Get()
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.WbsCode) {
		toSerialize["wbsCode"] = o.WbsCode
	}
	return toSerialize, nil
}

func (o *ConvertItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recordType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConvertItem := _ConvertItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConvertItem)

	if err != nil {
		return err
	}

	*o = ConvertItem(varConvertItem)

	return err
}

type NullableConvertItem struct {
	value *ConvertItem
	isSet bool
}

func (v NullableConvertItem) Get() *ConvertItem {
	return v.value
}

func (v *NullableConvertItem) Set(val *ConvertItem) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertItem) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertItem(val *ConvertItem) *NullableConvertItem {
	return &NullableConvertItem{value: val, isSet: true}
}

func (v NullableConvertItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


