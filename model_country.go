/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Country type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Country{}

// Country struct for Country
type Country struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	Currency CurrencyReference `json:"currency"`
	//  Max length: 25;
	CityCaption *string `json:"cityCaption,omitempty"`
	//  Max length: 25;
	StateCaption *string `json:"stateCaption,omitempty"`
	//  Max length: 25;
	ZipCaption *string `json:"zipCaption,omitempty"`
	ZipMinimumLength NullableInt32 `json:"zipMinimumLength,omitempty"`
	//  Max length: 5;
	DialingPrefix *string `json:"dialingPrefix,omitempty"`
	AddressFormat *AddressFormatReference `json:"addressFormat,omitempty"`
	//  Max length: 2;
	CountryCode *string `json:"countryCode,omitempty"`
	CoreEntityCountryCode NullableString `json:"coreEntityCountryCode,omitempty"`
	//  Max length: 25;
	LocalizationCaptionOne *string `json:"localizationCaptionOne,omitempty"`
	//  Max length: 50;
	LocalizationValueOne *string `json:"localizationValueOne,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Country Country

// NewCountry instantiates a new Country object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountry(name string, currency CurrencyReference) *Country {
	this := Country{}
	this.Name = name
	this.Currency = currency
	return &this
}

// NewCountryWithDefaults instantiates a new Country object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryWithDefaults() *Country {
	this := Country{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Country) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Country) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Country) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Country) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Country) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Country) SetName(v string) {
	o.Name = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *Country) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *Country) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *Country) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *Country) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetCurrency returns the Currency field value
func (o *Country) GetCurrency() CurrencyReference {
	if o == nil {
		var ret CurrencyReference
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Country) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Country) SetCurrency(v CurrencyReference) {
	o.Currency = v
}

// GetCityCaption returns the CityCaption field value if set, zero value otherwise.
func (o *Country) GetCityCaption() string {
	if o == nil || IsNil(o.CityCaption) {
		var ret string
		return ret
	}
	return *o.CityCaption
}

// GetCityCaptionOk returns a tuple with the CityCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetCityCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.CityCaption) {
		return nil, false
	}
	return o.CityCaption, true
}

// HasCityCaption returns a boolean if a field has been set.
func (o *Country) HasCityCaption() bool {
	if o != nil && !IsNil(o.CityCaption) {
		return true
	}

	return false
}

// SetCityCaption gets a reference to the given string and assigns it to the CityCaption field.
func (o *Country) SetCityCaption(v string) {
	o.CityCaption = &v
}

// GetStateCaption returns the StateCaption field value if set, zero value otherwise.
func (o *Country) GetStateCaption() string {
	if o == nil || IsNil(o.StateCaption) {
		var ret string
		return ret
	}
	return *o.StateCaption
}

// GetStateCaptionOk returns a tuple with the StateCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetStateCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.StateCaption) {
		return nil, false
	}
	return o.StateCaption, true
}

// HasStateCaption returns a boolean if a field has been set.
func (o *Country) HasStateCaption() bool {
	if o != nil && !IsNil(o.StateCaption) {
		return true
	}

	return false
}

// SetStateCaption gets a reference to the given string and assigns it to the StateCaption field.
func (o *Country) SetStateCaption(v string) {
	o.StateCaption = &v
}

// GetZipCaption returns the ZipCaption field value if set, zero value otherwise.
func (o *Country) GetZipCaption() string {
	if o == nil || IsNil(o.ZipCaption) {
		var ret string
		return ret
	}
	return *o.ZipCaption
}

// GetZipCaptionOk returns a tuple with the ZipCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetZipCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCaption) {
		return nil, false
	}
	return o.ZipCaption, true
}

// HasZipCaption returns a boolean if a field has been set.
func (o *Country) HasZipCaption() bool {
	if o != nil && !IsNil(o.ZipCaption) {
		return true
	}

	return false
}

// SetZipCaption gets a reference to the given string and assigns it to the ZipCaption field.
func (o *Country) SetZipCaption(v string) {
	o.ZipCaption = &v
}

// GetZipMinimumLength returns the ZipMinimumLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetZipMinimumLength() int32 {
	if o == nil || IsNil(o.ZipMinimumLength.Get()) {
		var ret int32
		return ret
	}
	return *o.ZipMinimumLength.Get()
}

// GetZipMinimumLengthOk returns a tuple with the ZipMinimumLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetZipMinimumLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZipMinimumLength.Get(), o.ZipMinimumLength.IsSet()
}

// HasZipMinimumLength returns a boolean if a field has been set.
func (o *Country) HasZipMinimumLength() bool {
	if o != nil && o.ZipMinimumLength.IsSet() {
		return true
	}

	return false
}

// SetZipMinimumLength gets a reference to the given NullableInt32 and assigns it to the ZipMinimumLength field.
func (o *Country) SetZipMinimumLength(v int32) {
	o.ZipMinimumLength.Set(&v)
}
// SetZipMinimumLengthNil sets the value for ZipMinimumLength to be an explicit nil
func (o *Country) SetZipMinimumLengthNil() {
	o.ZipMinimumLength.Set(nil)
}

// UnsetZipMinimumLength ensures that no value is present for ZipMinimumLength, not even an explicit nil
func (o *Country) UnsetZipMinimumLength() {
	o.ZipMinimumLength.Unset()
}

// GetDialingPrefix returns the DialingPrefix field value if set, zero value otherwise.
func (o *Country) GetDialingPrefix() string {
	if o == nil || IsNil(o.DialingPrefix) {
		var ret string
		return ret
	}
	return *o.DialingPrefix
}

// GetDialingPrefixOk returns a tuple with the DialingPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetDialingPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DialingPrefix) {
		return nil, false
	}
	return o.DialingPrefix, true
}

// HasDialingPrefix returns a boolean if a field has been set.
func (o *Country) HasDialingPrefix() bool {
	if o != nil && !IsNil(o.DialingPrefix) {
		return true
	}

	return false
}

// SetDialingPrefix gets a reference to the given string and assigns it to the DialingPrefix field.
func (o *Country) SetDialingPrefix(v string) {
	o.DialingPrefix = &v
}

// GetAddressFormat returns the AddressFormat field value if set, zero value otherwise.
func (o *Country) GetAddressFormat() AddressFormatReference {
	if o == nil || IsNil(o.AddressFormat) {
		var ret AddressFormatReference
		return ret
	}
	return *o.AddressFormat
}

// GetAddressFormatOk returns a tuple with the AddressFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetAddressFormatOk() (*AddressFormatReference, bool) {
	if o == nil || IsNil(o.AddressFormat) {
		return nil, false
	}
	return o.AddressFormat, true
}

// HasAddressFormat returns a boolean if a field has been set.
func (o *Country) HasAddressFormat() bool {
	if o != nil && !IsNil(o.AddressFormat) {
		return true
	}

	return false
}

// SetAddressFormat gets a reference to the given AddressFormatReference and assigns it to the AddressFormat field.
func (o *Country) SetAddressFormat(v AddressFormatReference) {
	o.AddressFormat = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Country) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Country) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Country) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCoreEntityCountryCode returns the CoreEntityCountryCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetCoreEntityCountryCode() string {
	if o == nil || IsNil(o.CoreEntityCountryCode.Get()) {
		var ret string
		return ret
	}
	return *o.CoreEntityCountryCode.Get()
}

// GetCoreEntityCountryCodeOk returns a tuple with the CoreEntityCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetCoreEntityCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoreEntityCountryCode.Get(), o.CoreEntityCountryCode.IsSet()
}

// HasCoreEntityCountryCode returns a boolean if a field has been set.
func (o *Country) HasCoreEntityCountryCode() bool {
	if o != nil && o.CoreEntityCountryCode.IsSet() {
		return true
	}

	return false
}

// SetCoreEntityCountryCode gets a reference to the given NullableString and assigns it to the CoreEntityCountryCode field.
func (o *Country) SetCoreEntityCountryCode(v string) {
	o.CoreEntityCountryCode.Set(&v)
}
// SetCoreEntityCountryCodeNil sets the value for CoreEntityCountryCode to be an explicit nil
func (o *Country) SetCoreEntityCountryCodeNil() {
	o.CoreEntityCountryCode.Set(nil)
}

// UnsetCoreEntityCountryCode ensures that no value is present for CoreEntityCountryCode, not even an explicit nil
func (o *Country) UnsetCoreEntityCountryCode() {
	o.CoreEntityCountryCode.Unset()
}

// GetLocalizationCaptionOne returns the LocalizationCaptionOne field value if set, zero value otherwise.
func (o *Country) GetLocalizationCaptionOne() string {
	if o == nil || IsNil(o.LocalizationCaptionOne) {
		var ret string
		return ret
	}
	return *o.LocalizationCaptionOne
}

// GetLocalizationCaptionOneOk returns a tuple with the LocalizationCaptionOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetLocalizationCaptionOneOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizationCaptionOne) {
		return nil, false
	}
	return o.LocalizationCaptionOne, true
}

// HasLocalizationCaptionOne returns a boolean if a field has been set.
func (o *Country) HasLocalizationCaptionOne() bool {
	if o != nil && !IsNil(o.LocalizationCaptionOne) {
		return true
	}

	return false
}

// SetLocalizationCaptionOne gets a reference to the given string and assigns it to the LocalizationCaptionOne field.
func (o *Country) SetLocalizationCaptionOne(v string) {
	o.LocalizationCaptionOne = &v
}

// GetLocalizationValueOne returns the LocalizationValueOne field value if set, zero value otherwise.
func (o *Country) GetLocalizationValueOne() string {
	if o == nil || IsNil(o.LocalizationValueOne) {
		var ret string
		return ret
	}
	return *o.LocalizationValueOne
}

// GetLocalizationValueOneOk returns a tuple with the LocalizationValueOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetLocalizationValueOneOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizationValueOne) {
		return nil, false
	}
	return o.LocalizationValueOne, true
}

// HasLocalizationValueOne returns a boolean if a field has been set.
func (o *Country) HasLocalizationValueOne() bool {
	if o != nil && !IsNil(o.LocalizationValueOne) {
		return true
	}

	return false
}

// SetLocalizationValueOne gets a reference to the given string and assigns it to the LocalizationValueOne field.
func (o *Country) SetLocalizationValueOne(v string) {
	o.LocalizationValueOne = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Country) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Country) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Country) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Country) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Country) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	toSerialize["currency"] = o.Currency
	if !IsNil(o.CityCaption) {
		toSerialize["cityCaption"] = o.CityCaption
	}
	if !IsNil(o.StateCaption) {
		toSerialize["stateCaption"] = o.StateCaption
	}
	if !IsNil(o.ZipCaption) {
		toSerialize["zipCaption"] = o.ZipCaption
	}
	if o.ZipMinimumLength.IsSet() {
		toSerialize["zipMinimumLength"] = o.ZipMinimumLength.Get()
	}
	if !IsNil(o.DialingPrefix) {
		toSerialize["dialingPrefix"] = o.DialingPrefix
	}
	if !IsNil(o.AddressFormat) {
		toSerialize["addressFormat"] = o.AddressFormat
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.CoreEntityCountryCode.IsSet() {
		toSerialize["coreEntityCountryCode"] = o.CoreEntityCountryCode.Get()
	}
	if !IsNil(o.LocalizationCaptionOne) {
		toSerialize["localizationCaptionOne"] = o.LocalizationCaptionOne
	}
	if !IsNil(o.LocalizationValueOne) {
		toSerialize["localizationValueOne"] = o.LocalizationValueOne
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Country) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountry := _Country{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountry)

	if err != nil {
		return err
	}

	*o = Country(varCountry)

	return err
}

type NullableCountry struct {
	value *Country
	isSet bool
}

func (v NullableCountry) Get() *Country {
	return v.value
}

func (v *NullableCountry) Set(val *Country) {
	v.value = val
	v.isSet = true
}

func (v NullableCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountry(val *Country) *NullableCountry {
	return &NullableCountry{value: val, isSet: true}
}

func (v NullableCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


