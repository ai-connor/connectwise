/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CountryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryInfo{}

// CountryInfo struct for CountryInfo
type CountryInfo struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	CityCaption *string `json:"cityCaption,omitempty"`
	StateCaption *string `json:"stateCaption,omitempty"`
	ZipCaption *string `json:"zipCaption,omitempty"`
	DialingPrefix *string `json:"dialingPrefix,omitempty"`
	LocalizationCaptionOne *string `json:"localizationCaptionOne,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewCountryInfo instantiates a new CountryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryInfo() *CountryInfo {
	this := CountryInfo{}
	return &this
}

// NewCountryInfoWithDefaults instantiates a new CountryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryInfoWithDefaults() *CountryInfo {
	this := CountryInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CountryInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CountryInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CountryInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CountryInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CountryInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CountryInfo) SetName(v string) {
	o.Name = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryInfo) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryInfo) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *CountryInfo) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *CountryInfo) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *CountryInfo) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *CountryInfo) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetCityCaption returns the CityCaption field value if set, zero value otherwise.
func (o *CountryInfo) GetCityCaption() string {
	if o == nil || IsNil(o.CityCaption) {
		var ret string
		return ret
	}
	return *o.CityCaption
}

// GetCityCaptionOk returns a tuple with the CityCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetCityCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.CityCaption) {
		return nil, false
	}
	return o.CityCaption, true
}

// HasCityCaption returns a boolean if a field has been set.
func (o *CountryInfo) HasCityCaption() bool {
	if o != nil && !IsNil(o.CityCaption) {
		return true
	}

	return false
}

// SetCityCaption gets a reference to the given string and assigns it to the CityCaption field.
func (o *CountryInfo) SetCityCaption(v string) {
	o.CityCaption = &v
}

// GetStateCaption returns the StateCaption field value if set, zero value otherwise.
func (o *CountryInfo) GetStateCaption() string {
	if o == nil || IsNil(o.StateCaption) {
		var ret string
		return ret
	}
	return *o.StateCaption
}

// GetStateCaptionOk returns a tuple with the StateCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetStateCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.StateCaption) {
		return nil, false
	}
	return o.StateCaption, true
}

// HasStateCaption returns a boolean if a field has been set.
func (o *CountryInfo) HasStateCaption() bool {
	if o != nil && !IsNil(o.StateCaption) {
		return true
	}

	return false
}

// SetStateCaption gets a reference to the given string and assigns it to the StateCaption field.
func (o *CountryInfo) SetStateCaption(v string) {
	o.StateCaption = &v
}

// GetZipCaption returns the ZipCaption field value if set, zero value otherwise.
func (o *CountryInfo) GetZipCaption() string {
	if o == nil || IsNil(o.ZipCaption) {
		var ret string
		return ret
	}
	return *o.ZipCaption
}

// GetZipCaptionOk returns a tuple with the ZipCaption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetZipCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCaption) {
		return nil, false
	}
	return o.ZipCaption, true
}

// HasZipCaption returns a boolean if a field has been set.
func (o *CountryInfo) HasZipCaption() bool {
	if o != nil && !IsNil(o.ZipCaption) {
		return true
	}

	return false
}

// SetZipCaption gets a reference to the given string and assigns it to the ZipCaption field.
func (o *CountryInfo) SetZipCaption(v string) {
	o.ZipCaption = &v
}

// GetDialingPrefix returns the DialingPrefix field value if set, zero value otherwise.
func (o *CountryInfo) GetDialingPrefix() string {
	if o == nil || IsNil(o.DialingPrefix) {
		var ret string
		return ret
	}
	return *o.DialingPrefix
}

// GetDialingPrefixOk returns a tuple with the DialingPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetDialingPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DialingPrefix) {
		return nil, false
	}
	return o.DialingPrefix, true
}

// HasDialingPrefix returns a boolean if a field has been set.
func (o *CountryInfo) HasDialingPrefix() bool {
	if o != nil && !IsNil(o.DialingPrefix) {
		return true
	}

	return false
}

// SetDialingPrefix gets a reference to the given string and assigns it to the DialingPrefix field.
func (o *CountryInfo) SetDialingPrefix(v string) {
	o.DialingPrefix = &v
}

// GetLocalizationCaptionOne returns the LocalizationCaptionOne field value if set, zero value otherwise.
func (o *CountryInfo) GetLocalizationCaptionOne() string {
	if o == nil || IsNil(o.LocalizationCaptionOne) {
		var ret string
		return ret
	}
	return *o.LocalizationCaptionOne
}

// GetLocalizationCaptionOneOk returns a tuple with the LocalizationCaptionOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetLocalizationCaptionOneOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizationCaptionOne) {
		return nil, false
	}
	return o.LocalizationCaptionOne, true
}

// HasLocalizationCaptionOne returns a boolean if a field has been set.
func (o *CountryInfo) HasLocalizationCaptionOne() bool {
	if o != nil && !IsNil(o.LocalizationCaptionOne) {
		return true
	}

	return false
}

// SetLocalizationCaptionOne gets a reference to the given string and assigns it to the LocalizationCaptionOne field.
func (o *CountryInfo) SetLocalizationCaptionOne(v string) {
	o.LocalizationCaptionOne = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CountryInfo) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CountryInfo) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *CountryInfo) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CountryInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CountryInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CountryInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CountryInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.CityCaption) {
		toSerialize["cityCaption"] = o.CityCaption
	}
	if !IsNil(o.StateCaption) {
		toSerialize["stateCaption"] = o.StateCaption
	}
	if !IsNil(o.ZipCaption) {
		toSerialize["zipCaption"] = o.ZipCaption
	}
	if !IsNil(o.DialingPrefix) {
		toSerialize["dialingPrefix"] = o.DialingPrefix
	}
	if !IsNil(o.LocalizationCaptionOne) {
		toSerialize["localizationCaptionOne"] = o.LocalizationCaptionOne
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableCountryInfo struct {
	value *CountryInfo
	isSet bool
}

func (v NullableCountryInfo) Get() *CountryInfo {
	return v.value
}

func (v *NullableCountryInfo) Set(val *CountryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryInfo(val *CountryInfo) *NullableCountryInfo {
	return &NullableCountryInfo{value: val, isSet: true}
}

func (v NullableCountryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


