/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CurrencyReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyReference{}

// CurrencyReference struct for CurrencyReference
type CurrencyReference struct {
	Id NullableInt32 `json:"id,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	CurrencyCode *string `json:"currencyCode,omitempty"`
	DecimalSeparator *string `json:"decimalSeparator,omitempty"`
	NumberOfDecimals *int32 `json:"numberOfDecimals,omitempty"`
	ThousandsSeparator *string `json:"thousandsSeparator,omitempty"`
	NegativeParenthesesFlag *bool `json:"negativeParenthesesFlag,omitempty"`
	DisplaySymbolFlag *bool `json:"displaySymbolFlag,omitempty"`
	CurrencyIdentifier *string `json:"currencyIdentifier,omitempty"`
	DisplayIdFlag *bool `json:"displayIdFlag,omitempty"`
	RightAlign *bool `json:"rightAlign,omitempty"`
	Name *string `json:"name,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewCurrencyReference instantiates a new CurrencyReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyReference() *CurrencyReference {
	this := CurrencyReference{}
	return &this
}

// NewCurrencyReferenceWithDefaults instantiates a new CurrencyReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyReferenceWithDefaults() *CurrencyReference {
	this := CurrencyReference{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyReference) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyReference) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CurrencyReference) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *CurrencyReference) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CurrencyReference) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CurrencyReference) UnsetId() {
	o.Id.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CurrencyReference) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CurrencyReference) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CurrencyReference) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CurrencyReference) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CurrencyReference) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CurrencyReference) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDecimalSeparator returns the DecimalSeparator field value if set, zero value otherwise.
func (o *CurrencyReference) GetDecimalSeparator() string {
	if o == nil || IsNil(o.DecimalSeparator) {
		var ret string
		return ret
	}
	return *o.DecimalSeparator
}

// GetDecimalSeparatorOk returns a tuple with the DecimalSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetDecimalSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.DecimalSeparator) {
		return nil, false
	}
	return o.DecimalSeparator, true
}

// HasDecimalSeparator returns a boolean if a field has been set.
func (o *CurrencyReference) HasDecimalSeparator() bool {
	if o != nil && !IsNil(o.DecimalSeparator) {
		return true
	}

	return false
}

// SetDecimalSeparator gets a reference to the given string and assigns it to the DecimalSeparator field.
func (o *CurrencyReference) SetDecimalSeparator(v string) {
	o.DecimalSeparator = &v
}

// GetNumberOfDecimals returns the NumberOfDecimals field value if set, zero value otherwise.
func (o *CurrencyReference) GetNumberOfDecimals() int32 {
	if o == nil || IsNil(o.NumberOfDecimals) {
		var ret int32
		return ret
	}
	return *o.NumberOfDecimals
}

// GetNumberOfDecimalsOk returns a tuple with the NumberOfDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetNumberOfDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDecimals) {
		return nil, false
	}
	return o.NumberOfDecimals, true
}

// HasNumberOfDecimals returns a boolean if a field has been set.
func (o *CurrencyReference) HasNumberOfDecimals() bool {
	if o != nil && !IsNil(o.NumberOfDecimals) {
		return true
	}

	return false
}

// SetNumberOfDecimals gets a reference to the given int32 and assigns it to the NumberOfDecimals field.
func (o *CurrencyReference) SetNumberOfDecimals(v int32) {
	o.NumberOfDecimals = &v
}

// GetThousandsSeparator returns the ThousandsSeparator field value if set, zero value otherwise.
func (o *CurrencyReference) GetThousandsSeparator() string {
	if o == nil || IsNil(o.ThousandsSeparator) {
		var ret string
		return ret
	}
	return *o.ThousandsSeparator
}

// GetThousandsSeparatorOk returns a tuple with the ThousandsSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetThousandsSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.ThousandsSeparator) {
		return nil, false
	}
	return o.ThousandsSeparator, true
}

// HasThousandsSeparator returns a boolean if a field has been set.
func (o *CurrencyReference) HasThousandsSeparator() bool {
	if o != nil && !IsNil(o.ThousandsSeparator) {
		return true
	}

	return false
}

// SetThousandsSeparator gets a reference to the given string and assigns it to the ThousandsSeparator field.
func (o *CurrencyReference) SetThousandsSeparator(v string) {
	o.ThousandsSeparator = &v
}

// GetNegativeParenthesesFlag returns the NegativeParenthesesFlag field value if set, zero value otherwise.
func (o *CurrencyReference) GetNegativeParenthesesFlag() bool {
	if o == nil || IsNil(o.NegativeParenthesesFlag) {
		var ret bool
		return ret
	}
	return *o.NegativeParenthesesFlag
}

// GetNegativeParenthesesFlagOk returns a tuple with the NegativeParenthesesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetNegativeParenthesesFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.NegativeParenthesesFlag) {
		return nil, false
	}
	return o.NegativeParenthesesFlag, true
}

// HasNegativeParenthesesFlag returns a boolean if a field has been set.
func (o *CurrencyReference) HasNegativeParenthesesFlag() bool {
	if o != nil && !IsNil(o.NegativeParenthesesFlag) {
		return true
	}

	return false
}

// SetNegativeParenthesesFlag gets a reference to the given bool and assigns it to the NegativeParenthesesFlag field.
func (o *CurrencyReference) SetNegativeParenthesesFlag(v bool) {
	o.NegativeParenthesesFlag = &v
}

// GetDisplaySymbolFlag returns the DisplaySymbolFlag field value if set, zero value otherwise.
func (o *CurrencyReference) GetDisplaySymbolFlag() bool {
	if o == nil || IsNil(o.DisplaySymbolFlag) {
		var ret bool
		return ret
	}
	return *o.DisplaySymbolFlag
}

// GetDisplaySymbolFlagOk returns a tuple with the DisplaySymbolFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetDisplaySymbolFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplaySymbolFlag) {
		return nil, false
	}
	return o.DisplaySymbolFlag, true
}

// HasDisplaySymbolFlag returns a boolean if a field has been set.
func (o *CurrencyReference) HasDisplaySymbolFlag() bool {
	if o != nil && !IsNil(o.DisplaySymbolFlag) {
		return true
	}

	return false
}

// SetDisplaySymbolFlag gets a reference to the given bool and assigns it to the DisplaySymbolFlag field.
func (o *CurrencyReference) SetDisplaySymbolFlag(v bool) {
	o.DisplaySymbolFlag = &v
}

// GetCurrencyIdentifier returns the CurrencyIdentifier field value if set, zero value otherwise.
func (o *CurrencyReference) GetCurrencyIdentifier() string {
	if o == nil || IsNil(o.CurrencyIdentifier) {
		var ret string
		return ret
	}
	return *o.CurrencyIdentifier
}

// GetCurrencyIdentifierOk returns a tuple with the CurrencyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetCurrencyIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyIdentifier) {
		return nil, false
	}
	return o.CurrencyIdentifier, true
}

// HasCurrencyIdentifier returns a boolean if a field has been set.
func (o *CurrencyReference) HasCurrencyIdentifier() bool {
	if o != nil && !IsNil(o.CurrencyIdentifier) {
		return true
	}

	return false
}

// SetCurrencyIdentifier gets a reference to the given string and assigns it to the CurrencyIdentifier field.
func (o *CurrencyReference) SetCurrencyIdentifier(v string) {
	o.CurrencyIdentifier = &v
}

// GetDisplayIdFlag returns the DisplayIdFlag field value if set, zero value otherwise.
func (o *CurrencyReference) GetDisplayIdFlag() bool {
	if o == nil || IsNil(o.DisplayIdFlag) {
		var ret bool
		return ret
	}
	return *o.DisplayIdFlag
}

// GetDisplayIdFlagOk returns a tuple with the DisplayIdFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetDisplayIdFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayIdFlag) {
		return nil, false
	}
	return o.DisplayIdFlag, true
}

// HasDisplayIdFlag returns a boolean if a field has been set.
func (o *CurrencyReference) HasDisplayIdFlag() bool {
	if o != nil && !IsNil(o.DisplayIdFlag) {
		return true
	}

	return false
}

// SetDisplayIdFlag gets a reference to the given bool and assigns it to the DisplayIdFlag field.
func (o *CurrencyReference) SetDisplayIdFlag(v bool) {
	o.DisplayIdFlag = &v
}

// GetRightAlign returns the RightAlign field value if set, zero value otherwise.
func (o *CurrencyReference) GetRightAlign() bool {
	if o == nil || IsNil(o.RightAlign) {
		var ret bool
		return ret
	}
	return *o.RightAlign
}

// GetRightAlignOk returns a tuple with the RightAlign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetRightAlignOk() (*bool, bool) {
	if o == nil || IsNil(o.RightAlign) {
		return nil, false
	}
	return o.RightAlign, true
}

// HasRightAlign returns a boolean if a field has been set.
func (o *CurrencyReference) HasRightAlign() bool {
	if o != nil && !IsNil(o.RightAlign) {
		return true
	}

	return false
}

// SetRightAlign gets a reference to the given bool and assigns it to the RightAlign field.
func (o *CurrencyReference) SetRightAlign(v bool) {
	o.RightAlign = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CurrencyReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CurrencyReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CurrencyReference) SetName(v string) {
	o.Name = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CurrencyReference) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyReference) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CurrencyReference) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CurrencyReference) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CurrencyReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.DecimalSeparator) {
		toSerialize["decimalSeparator"] = o.DecimalSeparator
	}
	if !IsNil(o.NumberOfDecimals) {
		toSerialize["numberOfDecimals"] = o.NumberOfDecimals
	}
	if !IsNil(o.ThousandsSeparator) {
		toSerialize["thousandsSeparator"] = o.ThousandsSeparator
	}
	if !IsNil(o.NegativeParenthesesFlag) {
		toSerialize["negativeParenthesesFlag"] = o.NegativeParenthesesFlag
	}
	if !IsNil(o.DisplaySymbolFlag) {
		toSerialize["displaySymbolFlag"] = o.DisplaySymbolFlag
	}
	if !IsNil(o.CurrencyIdentifier) {
		toSerialize["currencyIdentifier"] = o.CurrencyIdentifier
	}
	if !IsNil(o.DisplayIdFlag) {
		toSerialize["displayIdFlag"] = o.DisplayIdFlag
	}
	if !IsNil(o.RightAlign) {
		toSerialize["rightAlign"] = o.RightAlign
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableCurrencyReference struct {
	value *CurrencyReference
	isSet bool
}

func (v NullableCurrencyReference) Get() *CurrencyReference {
	return v.value
}

func (v *NullableCurrencyReference) Set(val *CurrencyReference) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyReference) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyReference(val *CurrencyReference) *NullableCurrencyReference {
	return &NullableCurrencyReference{value: val, isSet: true}
}

func (v NullableCurrencyReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


