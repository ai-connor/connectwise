/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the CwTimeZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CwTimeZone{}

// CwTimeZone struct for CwTimeZone
type CwTimeZone struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	// The hours offset (+/-).
	Offset *float64 `json:"offset,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	// Determined based on system library value for specified timeZone.             Not able to be used in query params at this time.
	DaylightSavingsFlag NullableBool `json:"daylightSavingsFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewCwTimeZone instantiates a new CwTimeZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCwTimeZone() *CwTimeZone {
	this := CwTimeZone{}
	return &this
}

// NewCwTimeZoneWithDefaults instantiates a new CwTimeZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCwTimeZoneWithDefaults() *CwTimeZone {
	this := CwTimeZone{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CwTimeZone) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CwTimeZone) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CwTimeZone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CwTimeZone) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CwTimeZone) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CwTimeZone) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CwTimeZone) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CwTimeZone) SetName(v string) {
	o.Name = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CwTimeZone) GetOffset() float64 {
	if o == nil || IsNil(o.Offset) {
		var ret float64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CwTimeZone) GetOffsetOk() (*float64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CwTimeZone) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given float64 and assigns it to the Offset field.
func (o *CwTimeZone) SetOffset(v float64) {
	o.Offset = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CwTimeZone) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CwTimeZone) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CwTimeZone) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CwTimeZone) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CwTimeZone) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CwTimeZone) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CwTimeZone) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CwTimeZone) SetEndDate(v string) {
	o.EndDate = &v
}

// GetDaylightSavingsFlag returns the DaylightSavingsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CwTimeZone) GetDaylightSavingsFlag() bool {
	if o == nil || IsNil(o.DaylightSavingsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DaylightSavingsFlag.Get()
}

// GetDaylightSavingsFlagOk returns a tuple with the DaylightSavingsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CwTimeZone) GetDaylightSavingsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaylightSavingsFlag.Get(), o.DaylightSavingsFlag.IsSet()
}

// HasDaylightSavingsFlag returns a boolean if a field has been set.
func (o *CwTimeZone) HasDaylightSavingsFlag() bool {
	if o != nil && o.DaylightSavingsFlag.IsSet() {
		return true
	}

	return false
}

// SetDaylightSavingsFlag gets a reference to the given NullableBool and assigns it to the DaylightSavingsFlag field.
func (o *CwTimeZone) SetDaylightSavingsFlag(v bool) {
	o.DaylightSavingsFlag.Set(&v)
}
// SetDaylightSavingsFlagNil sets the value for DaylightSavingsFlag to be an explicit nil
func (o *CwTimeZone) SetDaylightSavingsFlagNil() {
	o.DaylightSavingsFlag.Set(nil)
}

// UnsetDaylightSavingsFlag ensures that no value is present for DaylightSavingsFlag, not even an explicit nil
func (o *CwTimeZone) UnsetDaylightSavingsFlag() {
	o.DaylightSavingsFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CwTimeZone) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CwTimeZone) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CwTimeZone) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *CwTimeZone) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o CwTimeZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CwTimeZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if o.DaylightSavingsFlag.IsSet() {
		toSerialize["daylightSavingsFlag"] = o.DaylightSavingsFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableCwTimeZone struct {
	value *CwTimeZone
	isSet bool
}

func (v NullableCwTimeZone) Get() *CwTimeZone {
	return v.value
}

func (v *NullableCwTimeZone) Set(val *CwTimeZone) {
	v.value = val
	v.isSet = true
}

func (v NullableCwTimeZone) IsSet() bool {
	return v.isSet
}

func (v *NullableCwTimeZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCwTimeZone(val *CwTimeZone) *NullableCwTimeZone {
	return &NullableCwTimeZone{value: val, isSet: true}
}

func (v NullableCwTimeZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCwTimeZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


