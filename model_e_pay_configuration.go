/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EPayConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EPayConfiguration{}

// EPayConfiguration struct for EPayConfiguration
type EPayConfiguration struct {
	Id *int32 `json:"id,omitempty"`
	Location SystemLocationReference `json:"location"`
	Currency CurrencyReference `json:"currency"`
	//  Max length: 400;
	Url string `json:"url"`
	//  Max length: 500;
	StoreIdentifier string `json:"storeIdentifier"`
	//  Max length: 500;
	EncryptionKey *string `json:"encryptionKey,omitempty"`
	//  Max length: 500;
	InitializationVector *string `json:"initializationVector,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _EPayConfiguration EPayConfiguration

// NewEPayConfiguration instantiates a new EPayConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEPayConfiguration(location SystemLocationReference, currency CurrencyReference, url string, storeIdentifier string) *EPayConfiguration {
	this := EPayConfiguration{}
	this.Location = location
	this.Currency = currency
	this.Url = url
	this.StoreIdentifier = storeIdentifier
	return &this
}

// NewEPayConfigurationWithDefaults instantiates a new EPayConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEPayConfigurationWithDefaults() *EPayConfiguration {
	this := EPayConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EPayConfiguration) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EPayConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EPayConfiguration) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value
func (o *EPayConfiguration) GetLocation() SystemLocationReference {
	if o == nil {
		var ret SystemLocationReference
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *EPayConfiguration) SetLocation(v SystemLocationReference) {
	o.Location = v
}

// GetCurrency returns the Currency field value
func (o *EPayConfiguration) GetCurrency() CurrencyReference {
	if o == nil {
		var ret CurrencyReference
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *EPayConfiguration) SetCurrency(v CurrencyReference) {
	o.Currency = v
}

// GetUrl returns the Url field value
func (o *EPayConfiguration) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *EPayConfiguration) SetUrl(v string) {
	o.Url = v
}

// GetStoreIdentifier returns the StoreIdentifier field value
func (o *EPayConfiguration) GetStoreIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreIdentifier
}

// GetStoreIdentifierOk returns a tuple with the StoreIdentifier field value
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetStoreIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreIdentifier, true
}

// SetStoreIdentifier sets field value
func (o *EPayConfiguration) SetStoreIdentifier(v string) {
	o.StoreIdentifier = v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *EPayConfiguration) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *EPayConfiguration) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *EPayConfiguration) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetInitializationVector returns the InitializationVector field value if set, zero value otherwise.
func (o *EPayConfiguration) GetInitializationVector() string {
	if o == nil || IsNil(o.InitializationVector) {
		var ret string
		return ret
	}
	return *o.InitializationVector
}

// GetInitializationVectorOk returns a tuple with the InitializationVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetInitializationVectorOk() (*string, bool) {
	if o == nil || IsNil(o.InitializationVector) {
		return nil, false
	}
	return o.InitializationVector, true
}

// HasInitializationVector returns a boolean if a field has been set.
func (o *EPayConfiguration) HasInitializationVector() bool {
	if o != nil && !IsNil(o.InitializationVector) {
		return true
	}

	return false
}

// SetInitializationVector gets a reference to the given string and assigns it to the InitializationVector field.
func (o *EPayConfiguration) SetInitializationVector(v string) {
	o.InitializationVector = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *EPayConfiguration) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EPayConfiguration) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *EPayConfiguration) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *EPayConfiguration) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o EPayConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EPayConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["location"] = o.Location
	toSerialize["currency"] = o.Currency
	toSerialize["url"] = o.Url
	toSerialize["storeIdentifier"] = o.StoreIdentifier
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	if !IsNil(o.InitializationVector) {
		toSerialize["initializationVector"] = o.InitializationVector
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *EPayConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
		"currency",
		"url",
		"storeIdentifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEPayConfiguration := _EPayConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEPayConfiguration)

	if err != nil {
		return err
	}

	*o = EPayConfiguration(varEPayConfiguration)

	return err
}

type NullableEPayConfiguration struct {
	value *EPayConfiguration
	isSet bool
}

func (v NullableEPayConfiguration) Get() *EPayConfiguration {
	return v.value
}

func (v *NullableEPayConfiguration) Set(val *EPayConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEPayConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEPayConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEPayConfiguration(val *EPayConfiguration) *NullableEPayConfiguration {
	return &NullableEPayConfiguration{value: val, isSet: true}
}

func (v NullableEPayConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEPayConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


