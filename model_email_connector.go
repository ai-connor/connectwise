/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailConnector{}

// EmailConnector struct for EmailConnector
type EmailConnector struct {
	Id *int32 `json:"id,omitempty"`
	EmailServerType NullableString `json:"emailServerType,omitempty"`
	ImapSetup *ImapSetupReference `json:"imapSetup,omitempty"`
	Office365EmailSetup *Office365EmailSetupReference `json:"office365EmailSetup,omitempty"`
	Asio365EmailSetup *Office365EmailSetupReference `json:"asio365EmailSetup,omitempty"`
	GoogleEmailSetup *GoogleEmailSetupReference `json:"googleEmailSetup,omitempty"`
	ServiceBoard BoardReference `json:"serviceBoard"`
	DefaultCompany CompanyReference `json:"defaultCompany"`
	DefaultMember *MemberReference `json:"defaultMember,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	//  Max length: 50;
	EmailNotifyFrom *string `json:"emailNotifyFrom,omitempty"`
	//  Max length: 250;
	BccEmailTo *string `json:"bccEmailTo,omitempty"`
	//  Max length: 50;
	EmailErrorsTo string `json:"emailErrorsTo"`
	SetEmailToDefaultContactFlag NullableBool `json:"setEmailToDefaultContactFlag,omitempty"`
	NoResponseFlag NullableBool `json:"noResponseFlag,omitempty"`
	NeverRespondFlag NullableBool `json:"neverRespondFlag,omitempty"`
	DiscardDuplicatesFlag NullableBool `json:"discardDuplicatesFlag,omitempty"`
	PostRepliesToTicketFlag NullableBool `json:"postRepliesToTicketFlag,omitempty"`
	CreateContactFlag NullableBool `json:"createContactFlag,omitempty"`
	ResponseEmailForNew *string `json:"responseEmailForNew,omitempty"`
	ResponseEmailForExisting *string `json:"responseEmailForExisting,omitempty"`
	SourceOverride *ServiceSourceReference `json:"sourceOverride,omitempty"`
	PriorityOverride *PriorityReference `json:"priorityOverride,omitempty"`
	TypeOverride *ServiceTypeReference `json:"typeOverride,omitempty"`
	SubTypeOverride *ServiceSubTypeReference `json:"subTypeOverride,omitempty"`
	ItemOverride *ServiceItemReference `json:"itemOverride,omitempty"`
	StatusOverride *ServiceStatusReference `json:"statusOverride,omitempty"`
	AddCcFlag NullableBool `json:"addCcFlag,omitempty"`
	InboundTicketMailboxId *string `json:"inboundTicketMailboxId,omitempty"`
	UseEmailMessageIdFlag NullableBool `json:"useEmailMessageIdFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _EmailConnector EmailConnector

// NewEmailConnector instantiates a new EmailConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailConnector(serviceBoard BoardReference, defaultCompany CompanyReference, emailErrorsTo string) *EmailConnector {
	this := EmailConnector{}
	this.ServiceBoard = serviceBoard
	this.DefaultCompany = defaultCompany
	this.EmailErrorsTo = emailErrorsTo
	return &this
}

// NewEmailConnectorWithDefaults instantiates a new EmailConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailConnectorWithDefaults() *EmailConnector {
	this := EmailConnector{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailConnector) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailConnector) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EmailConnector) SetId(v int32) {
	o.Id = &v
}

// GetEmailServerType returns the EmailServerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetEmailServerType() string {
	if o == nil || IsNil(o.EmailServerType.Get()) {
		var ret string
		return ret
	}
	return *o.EmailServerType.Get()
}

// GetEmailServerTypeOk returns a tuple with the EmailServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetEmailServerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailServerType.Get(), o.EmailServerType.IsSet()
}

// HasEmailServerType returns a boolean if a field has been set.
func (o *EmailConnector) HasEmailServerType() bool {
	if o != nil && o.EmailServerType.IsSet() {
		return true
	}

	return false
}

// SetEmailServerType gets a reference to the given NullableString and assigns it to the EmailServerType field.
func (o *EmailConnector) SetEmailServerType(v string) {
	o.EmailServerType.Set(&v)
}
// SetEmailServerTypeNil sets the value for EmailServerType to be an explicit nil
func (o *EmailConnector) SetEmailServerTypeNil() {
	o.EmailServerType.Set(nil)
}

// UnsetEmailServerType ensures that no value is present for EmailServerType, not even an explicit nil
func (o *EmailConnector) UnsetEmailServerType() {
	o.EmailServerType.Unset()
}

// GetImapSetup returns the ImapSetup field value if set, zero value otherwise.
func (o *EmailConnector) GetImapSetup() ImapSetupReference {
	if o == nil || IsNil(o.ImapSetup) {
		var ret ImapSetupReference
		return ret
	}
	return *o.ImapSetup
}

// GetImapSetupOk returns a tuple with the ImapSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetImapSetupOk() (*ImapSetupReference, bool) {
	if o == nil || IsNil(o.ImapSetup) {
		return nil, false
	}
	return o.ImapSetup, true
}

// HasImapSetup returns a boolean if a field has been set.
func (o *EmailConnector) HasImapSetup() bool {
	if o != nil && !IsNil(o.ImapSetup) {
		return true
	}

	return false
}

// SetImapSetup gets a reference to the given ImapSetupReference and assigns it to the ImapSetup field.
func (o *EmailConnector) SetImapSetup(v ImapSetupReference) {
	o.ImapSetup = &v
}

// GetOffice365EmailSetup returns the Office365EmailSetup field value if set, zero value otherwise.
func (o *EmailConnector) GetOffice365EmailSetup() Office365EmailSetupReference {
	if o == nil || IsNil(o.Office365EmailSetup) {
		var ret Office365EmailSetupReference
		return ret
	}
	return *o.Office365EmailSetup
}

// GetOffice365EmailSetupOk returns a tuple with the Office365EmailSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetOffice365EmailSetupOk() (*Office365EmailSetupReference, bool) {
	if o == nil || IsNil(o.Office365EmailSetup) {
		return nil, false
	}
	return o.Office365EmailSetup, true
}

// HasOffice365EmailSetup returns a boolean if a field has been set.
func (o *EmailConnector) HasOffice365EmailSetup() bool {
	if o != nil && !IsNil(o.Office365EmailSetup) {
		return true
	}

	return false
}

// SetOffice365EmailSetup gets a reference to the given Office365EmailSetupReference and assigns it to the Office365EmailSetup field.
func (o *EmailConnector) SetOffice365EmailSetup(v Office365EmailSetupReference) {
	o.Office365EmailSetup = &v
}

// GetAsio365EmailSetup returns the Asio365EmailSetup field value if set, zero value otherwise.
func (o *EmailConnector) GetAsio365EmailSetup() Office365EmailSetupReference {
	if o == nil || IsNil(o.Asio365EmailSetup) {
		var ret Office365EmailSetupReference
		return ret
	}
	return *o.Asio365EmailSetup
}

// GetAsio365EmailSetupOk returns a tuple with the Asio365EmailSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetAsio365EmailSetupOk() (*Office365EmailSetupReference, bool) {
	if o == nil || IsNil(o.Asio365EmailSetup) {
		return nil, false
	}
	return o.Asio365EmailSetup, true
}

// HasAsio365EmailSetup returns a boolean if a field has been set.
func (o *EmailConnector) HasAsio365EmailSetup() bool {
	if o != nil && !IsNil(o.Asio365EmailSetup) {
		return true
	}

	return false
}

// SetAsio365EmailSetup gets a reference to the given Office365EmailSetupReference and assigns it to the Asio365EmailSetup field.
func (o *EmailConnector) SetAsio365EmailSetup(v Office365EmailSetupReference) {
	o.Asio365EmailSetup = &v
}

// GetGoogleEmailSetup returns the GoogleEmailSetup field value if set, zero value otherwise.
func (o *EmailConnector) GetGoogleEmailSetup() GoogleEmailSetupReference {
	if o == nil || IsNil(o.GoogleEmailSetup) {
		var ret GoogleEmailSetupReference
		return ret
	}
	return *o.GoogleEmailSetup
}

// GetGoogleEmailSetupOk returns a tuple with the GoogleEmailSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetGoogleEmailSetupOk() (*GoogleEmailSetupReference, bool) {
	if o == nil || IsNil(o.GoogleEmailSetup) {
		return nil, false
	}
	return o.GoogleEmailSetup, true
}

// HasGoogleEmailSetup returns a boolean if a field has been set.
func (o *EmailConnector) HasGoogleEmailSetup() bool {
	if o != nil && !IsNil(o.GoogleEmailSetup) {
		return true
	}

	return false
}

// SetGoogleEmailSetup gets a reference to the given GoogleEmailSetupReference and assigns it to the GoogleEmailSetup field.
func (o *EmailConnector) SetGoogleEmailSetup(v GoogleEmailSetupReference) {
	o.GoogleEmailSetup = &v
}

// GetServiceBoard returns the ServiceBoard field value
func (o *EmailConnector) GetServiceBoard() BoardReference {
	if o == nil {
		var ret BoardReference
		return ret
	}

	return o.ServiceBoard
}

// GetServiceBoardOk returns a tuple with the ServiceBoard field value
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetServiceBoardOk() (*BoardReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceBoard, true
}

// SetServiceBoard sets field value
func (o *EmailConnector) SetServiceBoard(v BoardReference) {
	o.ServiceBoard = v
}

// GetDefaultCompany returns the DefaultCompany field value
func (o *EmailConnector) GetDefaultCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.DefaultCompany
}

// GetDefaultCompanyOk returns a tuple with the DefaultCompany field value
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetDefaultCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultCompany, true
}

// SetDefaultCompany sets field value
func (o *EmailConnector) SetDefaultCompany(v CompanyReference) {
	o.DefaultCompany = v
}

// GetDefaultMember returns the DefaultMember field value if set, zero value otherwise.
func (o *EmailConnector) GetDefaultMember() MemberReference {
	if o == nil || IsNil(o.DefaultMember) {
		var ret MemberReference
		return ret
	}
	return *o.DefaultMember
}

// GetDefaultMemberOk returns a tuple with the DefaultMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetDefaultMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.DefaultMember) {
		return nil, false
	}
	return o.DefaultMember, true
}

// HasDefaultMember returns a boolean if a field has been set.
func (o *EmailConnector) HasDefaultMember() bool {
	if o != nil && !IsNil(o.DefaultMember) {
		return true
	}

	return false
}

// SetDefaultMember gets a reference to the given MemberReference and assigns it to the DefaultMember field.
func (o *EmailConnector) SetDefaultMember(v MemberReference) {
	o.DefaultMember = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *EmailConnector) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EmailConnector) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *EmailConnector) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *EmailConnector) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *EmailConnector) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *EmailConnector) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetEmailNotifyFrom returns the EmailNotifyFrom field value if set, zero value otherwise.
func (o *EmailConnector) GetEmailNotifyFrom() string {
	if o == nil || IsNil(o.EmailNotifyFrom) {
		var ret string
		return ret
	}
	return *o.EmailNotifyFrom
}

// GetEmailNotifyFromOk returns a tuple with the EmailNotifyFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetEmailNotifyFromOk() (*string, bool) {
	if o == nil || IsNil(o.EmailNotifyFrom) {
		return nil, false
	}
	return o.EmailNotifyFrom, true
}

// HasEmailNotifyFrom returns a boolean if a field has been set.
func (o *EmailConnector) HasEmailNotifyFrom() bool {
	if o != nil && !IsNil(o.EmailNotifyFrom) {
		return true
	}

	return false
}

// SetEmailNotifyFrom gets a reference to the given string and assigns it to the EmailNotifyFrom field.
func (o *EmailConnector) SetEmailNotifyFrom(v string) {
	o.EmailNotifyFrom = &v
}

// GetBccEmailTo returns the BccEmailTo field value if set, zero value otherwise.
func (o *EmailConnector) GetBccEmailTo() string {
	if o == nil || IsNil(o.BccEmailTo) {
		var ret string
		return ret
	}
	return *o.BccEmailTo
}

// GetBccEmailToOk returns a tuple with the BccEmailTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetBccEmailToOk() (*string, bool) {
	if o == nil || IsNil(o.BccEmailTo) {
		return nil, false
	}
	return o.BccEmailTo, true
}

// HasBccEmailTo returns a boolean if a field has been set.
func (o *EmailConnector) HasBccEmailTo() bool {
	if o != nil && !IsNil(o.BccEmailTo) {
		return true
	}

	return false
}

// SetBccEmailTo gets a reference to the given string and assigns it to the BccEmailTo field.
func (o *EmailConnector) SetBccEmailTo(v string) {
	o.BccEmailTo = &v
}

// GetEmailErrorsTo returns the EmailErrorsTo field value
func (o *EmailConnector) GetEmailErrorsTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailErrorsTo
}

// GetEmailErrorsToOk returns a tuple with the EmailErrorsTo field value
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetEmailErrorsToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailErrorsTo, true
}

// SetEmailErrorsTo sets field value
func (o *EmailConnector) SetEmailErrorsTo(v string) {
	o.EmailErrorsTo = v
}

// GetSetEmailToDefaultContactFlag returns the SetEmailToDefaultContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetSetEmailToDefaultContactFlag() bool {
	if o == nil || IsNil(o.SetEmailToDefaultContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SetEmailToDefaultContactFlag.Get()
}

// GetSetEmailToDefaultContactFlagOk returns a tuple with the SetEmailToDefaultContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetSetEmailToDefaultContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SetEmailToDefaultContactFlag.Get(), o.SetEmailToDefaultContactFlag.IsSet()
}

// HasSetEmailToDefaultContactFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasSetEmailToDefaultContactFlag() bool {
	if o != nil && o.SetEmailToDefaultContactFlag.IsSet() {
		return true
	}

	return false
}

// SetSetEmailToDefaultContactFlag gets a reference to the given NullableBool and assigns it to the SetEmailToDefaultContactFlag field.
func (o *EmailConnector) SetSetEmailToDefaultContactFlag(v bool) {
	o.SetEmailToDefaultContactFlag.Set(&v)
}
// SetSetEmailToDefaultContactFlagNil sets the value for SetEmailToDefaultContactFlag to be an explicit nil
func (o *EmailConnector) SetSetEmailToDefaultContactFlagNil() {
	o.SetEmailToDefaultContactFlag.Set(nil)
}

// UnsetSetEmailToDefaultContactFlag ensures that no value is present for SetEmailToDefaultContactFlag, not even an explicit nil
func (o *EmailConnector) UnsetSetEmailToDefaultContactFlag() {
	o.SetEmailToDefaultContactFlag.Unset()
}

// GetNoResponseFlag returns the NoResponseFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetNoResponseFlag() bool {
	if o == nil || IsNil(o.NoResponseFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NoResponseFlag.Get()
}

// GetNoResponseFlagOk returns a tuple with the NoResponseFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetNoResponseFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoResponseFlag.Get(), o.NoResponseFlag.IsSet()
}

// HasNoResponseFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasNoResponseFlag() bool {
	if o != nil && o.NoResponseFlag.IsSet() {
		return true
	}

	return false
}

// SetNoResponseFlag gets a reference to the given NullableBool and assigns it to the NoResponseFlag field.
func (o *EmailConnector) SetNoResponseFlag(v bool) {
	o.NoResponseFlag.Set(&v)
}
// SetNoResponseFlagNil sets the value for NoResponseFlag to be an explicit nil
func (o *EmailConnector) SetNoResponseFlagNil() {
	o.NoResponseFlag.Set(nil)
}

// UnsetNoResponseFlag ensures that no value is present for NoResponseFlag, not even an explicit nil
func (o *EmailConnector) UnsetNoResponseFlag() {
	o.NoResponseFlag.Unset()
}

// GetNeverRespondFlag returns the NeverRespondFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetNeverRespondFlag() bool {
	if o == nil || IsNil(o.NeverRespondFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NeverRespondFlag.Get()
}

// GetNeverRespondFlagOk returns a tuple with the NeverRespondFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetNeverRespondFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NeverRespondFlag.Get(), o.NeverRespondFlag.IsSet()
}

// HasNeverRespondFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasNeverRespondFlag() bool {
	if o != nil && o.NeverRespondFlag.IsSet() {
		return true
	}

	return false
}

// SetNeverRespondFlag gets a reference to the given NullableBool and assigns it to the NeverRespondFlag field.
func (o *EmailConnector) SetNeverRespondFlag(v bool) {
	o.NeverRespondFlag.Set(&v)
}
// SetNeverRespondFlagNil sets the value for NeverRespondFlag to be an explicit nil
func (o *EmailConnector) SetNeverRespondFlagNil() {
	o.NeverRespondFlag.Set(nil)
}

// UnsetNeverRespondFlag ensures that no value is present for NeverRespondFlag, not even an explicit nil
func (o *EmailConnector) UnsetNeverRespondFlag() {
	o.NeverRespondFlag.Unset()
}

// GetDiscardDuplicatesFlag returns the DiscardDuplicatesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetDiscardDuplicatesFlag() bool {
	if o == nil || IsNil(o.DiscardDuplicatesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DiscardDuplicatesFlag.Get()
}

// GetDiscardDuplicatesFlagOk returns a tuple with the DiscardDuplicatesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetDiscardDuplicatesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscardDuplicatesFlag.Get(), o.DiscardDuplicatesFlag.IsSet()
}

// HasDiscardDuplicatesFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasDiscardDuplicatesFlag() bool {
	if o != nil && o.DiscardDuplicatesFlag.IsSet() {
		return true
	}

	return false
}

// SetDiscardDuplicatesFlag gets a reference to the given NullableBool and assigns it to the DiscardDuplicatesFlag field.
func (o *EmailConnector) SetDiscardDuplicatesFlag(v bool) {
	o.DiscardDuplicatesFlag.Set(&v)
}
// SetDiscardDuplicatesFlagNil sets the value for DiscardDuplicatesFlag to be an explicit nil
func (o *EmailConnector) SetDiscardDuplicatesFlagNil() {
	o.DiscardDuplicatesFlag.Set(nil)
}

// UnsetDiscardDuplicatesFlag ensures that no value is present for DiscardDuplicatesFlag, not even an explicit nil
func (o *EmailConnector) UnsetDiscardDuplicatesFlag() {
	o.DiscardDuplicatesFlag.Unset()
}

// GetPostRepliesToTicketFlag returns the PostRepliesToTicketFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetPostRepliesToTicketFlag() bool {
	if o == nil || IsNil(o.PostRepliesToTicketFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PostRepliesToTicketFlag.Get()
}

// GetPostRepliesToTicketFlagOk returns a tuple with the PostRepliesToTicketFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetPostRepliesToTicketFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostRepliesToTicketFlag.Get(), o.PostRepliesToTicketFlag.IsSet()
}

// HasPostRepliesToTicketFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasPostRepliesToTicketFlag() bool {
	if o != nil && o.PostRepliesToTicketFlag.IsSet() {
		return true
	}

	return false
}

// SetPostRepliesToTicketFlag gets a reference to the given NullableBool and assigns it to the PostRepliesToTicketFlag field.
func (o *EmailConnector) SetPostRepliesToTicketFlag(v bool) {
	o.PostRepliesToTicketFlag.Set(&v)
}
// SetPostRepliesToTicketFlagNil sets the value for PostRepliesToTicketFlag to be an explicit nil
func (o *EmailConnector) SetPostRepliesToTicketFlagNil() {
	o.PostRepliesToTicketFlag.Set(nil)
}

// UnsetPostRepliesToTicketFlag ensures that no value is present for PostRepliesToTicketFlag, not even an explicit nil
func (o *EmailConnector) UnsetPostRepliesToTicketFlag() {
	o.PostRepliesToTicketFlag.Unset()
}

// GetCreateContactFlag returns the CreateContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetCreateContactFlag() bool {
	if o == nil || IsNil(o.CreateContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CreateContactFlag.Get()
}

// GetCreateContactFlagOk returns a tuple with the CreateContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetCreateContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateContactFlag.Get(), o.CreateContactFlag.IsSet()
}

// HasCreateContactFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasCreateContactFlag() bool {
	if o != nil && o.CreateContactFlag.IsSet() {
		return true
	}

	return false
}

// SetCreateContactFlag gets a reference to the given NullableBool and assigns it to the CreateContactFlag field.
func (o *EmailConnector) SetCreateContactFlag(v bool) {
	o.CreateContactFlag.Set(&v)
}
// SetCreateContactFlagNil sets the value for CreateContactFlag to be an explicit nil
func (o *EmailConnector) SetCreateContactFlagNil() {
	o.CreateContactFlag.Set(nil)
}

// UnsetCreateContactFlag ensures that no value is present for CreateContactFlag, not even an explicit nil
func (o *EmailConnector) UnsetCreateContactFlag() {
	o.CreateContactFlag.Unset()
}

// GetResponseEmailForNew returns the ResponseEmailForNew field value if set, zero value otherwise.
func (o *EmailConnector) GetResponseEmailForNew() string {
	if o == nil || IsNil(o.ResponseEmailForNew) {
		var ret string
		return ret
	}
	return *o.ResponseEmailForNew
}

// GetResponseEmailForNewOk returns a tuple with the ResponseEmailForNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetResponseEmailForNewOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseEmailForNew) {
		return nil, false
	}
	return o.ResponseEmailForNew, true
}

// HasResponseEmailForNew returns a boolean if a field has been set.
func (o *EmailConnector) HasResponseEmailForNew() bool {
	if o != nil && !IsNil(o.ResponseEmailForNew) {
		return true
	}

	return false
}

// SetResponseEmailForNew gets a reference to the given string and assigns it to the ResponseEmailForNew field.
func (o *EmailConnector) SetResponseEmailForNew(v string) {
	o.ResponseEmailForNew = &v
}

// GetResponseEmailForExisting returns the ResponseEmailForExisting field value if set, zero value otherwise.
func (o *EmailConnector) GetResponseEmailForExisting() string {
	if o == nil || IsNil(o.ResponseEmailForExisting) {
		var ret string
		return ret
	}
	return *o.ResponseEmailForExisting
}

// GetResponseEmailForExistingOk returns a tuple with the ResponseEmailForExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetResponseEmailForExistingOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseEmailForExisting) {
		return nil, false
	}
	return o.ResponseEmailForExisting, true
}

// HasResponseEmailForExisting returns a boolean if a field has been set.
func (o *EmailConnector) HasResponseEmailForExisting() bool {
	if o != nil && !IsNil(o.ResponseEmailForExisting) {
		return true
	}

	return false
}

// SetResponseEmailForExisting gets a reference to the given string and assigns it to the ResponseEmailForExisting field.
func (o *EmailConnector) SetResponseEmailForExisting(v string) {
	o.ResponseEmailForExisting = &v
}

// GetSourceOverride returns the SourceOverride field value if set, zero value otherwise.
func (o *EmailConnector) GetSourceOverride() ServiceSourceReference {
	if o == nil || IsNil(o.SourceOverride) {
		var ret ServiceSourceReference
		return ret
	}
	return *o.SourceOverride
}

// GetSourceOverrideOk returns a tuple with the SourceOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetSourceOverrideOk() (*ServiceSourceReference, bool) {
	if o == nil || IsNil(o.SourceOverride) {
		return nil, false
	}
	return o.SourceOverride, true
}

// HasSourceOverride returns a boolean if a field has been set.
func (o *EmailConnector) HasSourceOverride() bool {
	if o != nil && !IsNil(o.SourceOverride) {
		return true
	}

	return false
}

// SetSourceOverride gets a reference to the given ServiceSourceReference and assigns it to the SourceOverride field.
func (o *EmailConnector) SetSourceOverride(v ServiceSourceReference) {
	o.SourceOverride = &v
}

// GetPriorityOverride returns the PriorityOverride field value if set, zero value otherwise.
func (o *EmailConnector) GetPriorityOverride() PriorityReference {
	if o == nil || IsNil(o.PriorityOverride) {
		var ret PriorityReference
		return ret
	}
	return *o.PriorityOverride
}

// GetPriorityOverrideOk returns a tuple with the PriorityOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetPriorityOverrideOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.PriorityOverride) {
		return nil, false
	}
	return o.PriorityOverride, true
}

// HasPriorityOverride returns a boolean if a field has been set.
func (o *EmailConnector) HasPriorityOverride() bool {
	if o != nil && !IsNil(o.PriorityOverride) {
		return true
	}

	return false
}

// SetPriorityOverride gets a reference to the given PriorityReference and assigns it to the PriorityOverride field.
func (o *EmailConnector) SetPriorityOverride(v PriorityReference) {
	o.PriorityOverride = &v
}

// GetTypeOverride returns the TypeOverride field value if set, zero value otherwise.
func (o *EmailConnector) GetTypeOverride() ServiceTypeReference {
	if o == nil || IsNil(o.TypeOverride) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.TypeOverride
}

// GetTypeOverrideOk returns a tuple with the TypeOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetTypeOverrideOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.TypeOverride) {
		return nil, false
	}
	return o.TypeOverride, true
}

// HasTypeOverride returns a boolean if a field has been set.
func (o *EmailConnector) HasTypeOverride() bool {
	if o != nil && !IsNil(o.TypeOverride) {
		return true
	}

	return false
}

// SetTypeOverride gets a reference to the given ServiceTypeReference and assigns it to the TypeOverride field.
func (o *EmailConnector) SetTypeOverride(v ServiceTypeReference) {
	o.TypeOverride = &v
}

// GetSubTypeOverride returns the SubTypeOverride field value if set, zero value otherwise.
func (o *EmailConnector) GetSubTypeOverride() ServiceSubTypeReference {
	if o == nil || IsNil(o.SubTypeOverride) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.SubTypeOverride
}

// GetSubTypeOverrideOk returns a tuple with the SubTypeOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetSubTypeOverrideOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.SubTypeOverride) {
		return nil, false
	}
	return o.SubTypeOverride, true
}

// HasSubTypeOverride returns a boolean if a field has been set.
func (o *EmailConnector) HasSubTypeOverride() bool {
	if o != nil && !IsNil(o.SubTypeOverride) {
		return true
	}

	return false
}

// SetSubTypeOverride gets a reference to the given ServiceSubTypeReference and assigns it to the SubTypeOverride field.
func (o *EmailConnector) SetSubTypeOverride(v ServiceSubTypeReference) {
	o.SubTypeOverride = &v
}

// GetItemOverride returns the ItemOverride field value if set, zero value otherwise.
func (o *EmailConnector) GetItemOverride() ServiceItemReference {
	if o == nil || IsNil(o.ItemOverride) {
		var ret ServiceItemReference
		return ret
	}
	return *o.ItemOverride
}

// GetItemOverrideOk returns a tuple with the ItemOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetItemOverrideOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.ItemOverride) {
		return nil, false
	}
	return o.ItemOverride, true
}

// HasItemOverride returns a boolean if a field has been set.
func (o *EmailConnector) HasItemOverride() bool {
	if o != nil && !IsNil(o.ItemOverride) {
		return true
	}

	return false
}

// SetItemOverride gets a reference to the given ServiceItemReference and assigns it to the ItemOverride field.
func (o *EmailConnector) SetItemOverride(v ServiceItemReference) {
	o.ItemOverride = &v
}

// GetStatusOverride returns the StatusOverride field value if set, zero value otherwise.
func (o *EmailConnector) GetStatusOverride() ServiceStatusReference {
	if o == nil || IsNil(o.StatusOverride) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.StatusOverride
}

// GetStatusOverrideOk returns a tuple with the StatusOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetStatusOverrideOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.StatusOverride) {
		return nil, false
	}
	return o.StatusOverride, true
}

// HasStatusOverride returns a boolean if a field has been set.
func (o *EmailConnector) HasStatusOverride() bool {
	if o != nil && !IsNil(o.StatusOverride) {
		return true
	}

	return false
}

// SetStatusOverride gets a reference to the given ServiceStatusReference and assigns it to the StatusOverride field.
func (o *EmailConnector) SetStatusOverride(v ServiceStatusReference) {
	o.StatusOverride = &v
}

// GetAddCcFlag returns the AddCcFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetAddCcFlag() bool {
	if o == nil || IsNil(o.AddCcFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddCcFlag.Get()
}

// GetAddCcFlagOk returns a tuple with the AddCcFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetAddCcFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddCcFlag.Get(), o.AddCcFlag.IsSet()
}

// HasAddCcFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasAddCcFlag() bool {
	if o != nil && o.AddCcFlag.IsSet() {
		return true
	}

	return false
}

// SetAddCcFlag gets a reference to the given NullableBool and assigns it to the AddCcFlag field.
func (o *EmailConnector) SetAddCcFlag(v bool) {
	o.AddCcFlag.Set(&v)
}
// SetAddCcFlagNil sets the value for AddCcFlag to be an explicit nil
func (o *EmailConnector) SetAddCcFlagNil() {
	o.AddCcFlag.Set(nil)
}

// UnsetAddCcFlag ensures that no value is present for AddCcFlag, not even an explicit nil
func (o *EmailConnector) UnsetAddCcFlag() {
	o.AddCcFlag.Unset()
}

// GetInboundTicketMailboxId returns the InboundTicketMailboxId field value if set, zero value otherwise.
func (o *EmailConnector) GetInboundTicketMailboxId() string {
	if o == nil || IsNil(o.InboundTicketMailboxId) {
		var ret string
		return ret
	}
	return *o.InboundTicketMailboxId
}

// GetInboundTicketMailboxIdOk returns a tuple with the InboundTicketMailboxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetInboundTicketMailboxIdOk() (*string, bool) {
	if o == nil || IsNil(o.InboundTicketMailboxId) {
		return nil, false
	}
	return o.InboundTicketMailboxId, true
}

// HasInboundTicketMailboxId returns a boolean if a field has been set.
func (o *EmailConnector) HasInboundTicketMailboxId() bool {
	if o != nil && !IsNil(o.InboundTicketMailboxId) {
		return true
	}

	return false
}

// SetInboundTicketMailboxId gets a reference to the given string and assigns it to the InboundTicketMailboxId field.
func (o *EmailConnector) SetInboundTicketMailboxId(v string) {
	o.InboundTicketMailboxId = &v
}

// GetUseEmailMessageIdFlag returns the UseEmailMessageIdFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailConnector) GetUseEmailMessageIdFlag() bool {
	if o == nil || IsNil(o.UseEmailMessageIdFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseEmailMessageIdFlag.Get()
}

// GetUseEmailMessageIdFlagOk returns a tuple with the UseEmailMessageIdFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnector) GetUseEmailMessageIdFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseEmailMessageIdFlag.Get(), o.UseEmailMessageIdFlag.IsSet()
}

// HasUseEmailMessageIdFlag returns a boolean if a field has been set.
func (o *EmailConnector) HasUseEmailMessageIdFlag() bool {
	if o != nil && o.UseEmailMessageIdFlag.IsSet() {
		return true
	}

	return false
}

// SetUseEmailMessageIdFlag gets a reference to the given NullableBool and assigns it to the UseEmailMessageIdFlag field.
func (o *EmailConnector) SetUseEmailMessageIdFlag(v bool) {
	o.UseEmailMessageIdFlag.Set(&v)
}
// SetUseEmailMessageIdFlagNil sets the value for UseEmailMessageIdFlag to be an explicit nil
func (o *EmailConnector) SetUseEmailMessageIdFlagNil() {
	o.UseEmailMessageIdFlag.Set(nil)
}

// UnsetUseEmailMessageIdFlag ensures that no value is present for UseEmailMessageIdFlag, not even an explicit nil
func (o *EmailConnector) UnsetUseEmailMessageIdFlag() {
	o.UseEmailMessageIdFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *EmailConnector) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnector) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *EmailConnector) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *EmailConnector) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o EmailConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.EmailServerType.IsSet() {
		toSerialize["emailServerType"] = o.EmailServerType.Get()
	}
	if !IsNil(o.ImapSetup) {
		toSerialize["imapSetup"] = o.ImapSetup
	}
	if !IsNil(o.Office365EmailSetup) {
		toSerialize["office365EmailSetup"] = o.Office365EmailSetup
	}
	if !IsNil(o.Asio365EmailSetup) {
		toSerialize["asio365EmailSetup"] = o.Asio365EmailSetup
	}
	if !IsNil(o.GoogleEmailSetup) {
		toSerialize["googleEmailSetup"] = o.GoogleEmailSetup
	}
	toSerialize["serviceBoard"] = o.ServiceBoard
	toSerialize["defaultCompany"] = o.DefaultCompany
	if !IsNil(o.DefaultMember) {
		toSerialize["defaultMember"] = o.DefaultMember
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.EmailNotifyFrom) {
		toSerialize["emailNotifyFrom"] = o.EmailNotifyFrom
	}
	if !IsNil(o.BccEmailTo) {
		toSerialize["bccEmailTo"] = o.BccEmailTo
	}
	toSerialize["emailErrorsTo"] = o.EmailErrorsTo
	if o.SetEmailToDefaultContactFlag.IsSet() {
		toSerialize["setEmailToDefaultContactFlag"] = o.SetEmailToDefaultContactFlag.Get()
	}
	if o.NoResponseFlag.IsSet() {
		toSerialize["noResponseFlag"] = o.NoResponseFlag.Get()
	}
	if o.NeverRespondFlag.IsSet() {
		toSerialize["neverRespondFlag"] = o.NeverRespondFlag.Get()
	}
	if o.DiscardDuplicatesFlag.IsSet() {
		toSerialize["discardDuplicatesFlag"] = o.DiscardDuplicatesFlag.Get()
	}
	if o.PostRepliesToTicketFlag.IsSet() {
		toSerialize["postRepliesToTicketFlag"] = o.PostRepliesToTicketFlag.Get()
	}
	if o.CreateContactFlag.IsSet() {
		toSerialize["createContactFlag"] = o.CreateContactFlag.Get()
	}
	if !IsNil(o.ResponseEmailForNew) {
		toSerialize["responseEmailForNew"] = o.ResponseEmailForNew
	}
	if !IsNil(o.ResponseEmailForExisting) {
		toSerialize["responseEmailForExisting"] = o.ResponseEmailForExisting
	}
	if !IsNil(o.SourceOverride) {
		toSerialize["sourceOverride"] = o.SourceOverride
	}
	if !IsNil(o.PriorityOverride) {
		toSerialize["priorityOverride"] = o.PriorityOverride
	}
	if !IsNil(o.TypeOverride) {
		toSerialize["typeOverride"] = o.TypeOverride
	}
	if !IsNil(o.SubTypeOverride) {
		toSerialize["subTypeOverride"] = o.SubTypeOverride
	}
	if !IsNil(o.ItemOverride) {
		toSerialize["itemOverride"] = o.ItemOverride
	}
	if !IsNil(o.StatusOverride) {
		toSerialize["statusOverride"] = o.StatusOverride
	}
	if o.AddCcFlag.IsSet() {
		toSerialize["addCcFlag"] = o.AddCcFlag.Get()
	}
	if !IsNil(o.InboundTicketMailboxId) {
		toSerialize["inboundTicketMailboxId"] = o.InboundTicketMailboxId
	}
	if o.UseEmailMessageIdFlag.IsSet() {
		toSerialize["useEmailMessageIdFlag"] = o.UseEmailMessageIdFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *EmailConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceBoard",
		"defaultCompany",
		"emailErrorsTo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailConnector := _EmailConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailConnector)

	if err != nil {
		return err
	}

	*o = EmailConnector(varEmailConnector)

	return err
}

type NullableEmailConnector struct {
	value *EmailConnector
	isSet bool
}

func (v NullableEmailConnector) Get() *EmailConnector {
	return v.value
}

func (v *NullableEmailConnector) Set(val *EmailConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailConnector(val *EmailConnector) *NullableEmailConnector {
	return &NullableEmailConnector{value: val, isSet: true}
}

func (v NullableEmailConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


