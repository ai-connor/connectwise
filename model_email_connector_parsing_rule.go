/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailConnectorParsingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailConnectorParsingRule{}

// EmailConnectorParsingRule struct for EmailConnectorParsingRule
type EmailConnectorParsingRule struct {
	Id *int32 `json:"id,omitempty"`
	ParsingStyle *EmailConnectorParsingStyleReference `json:"parsingStyle,omitempty"`
	Priority NullableInt32 `json:"priority"`
	ParsingVariable EmailConnectorParsingVariableReference `json:"parsingVariable"`
	//  Max length: 250;
	SearchTerm string `json:"searchTerm"`
	ServicePriority *PriorityReference `json:"servicePriority,omitempty"`
	ServiceStatus *ServiceStatusReference `json:"serviceStatus,omitempty"`
	ServiceType *ServiceTypeReference `json:"serviceType,omitempty"`
	ServiceSubType *ServiceSubTypeReference `json:"serviceSubType,omitempty"`
	ServiceItem *ServiceItemReference `json:"serviceItem,omitempty"`
	ServiceBoard *BoardReference `json:"serviceBoard,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _EmailConnectorParsingRule EmailConnectorParsingRule

// NewEmailConnectorParsingRule instantiates a new EmailConnectorParsingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailConnectorParsingRule(priority NullableInt32, parsingVariable EmailConnectorParsingVariableReference, searchTerm string) *EmailConnectorParsingRule {
	this := EmailConnectorParsingRule{}
	this.Priority = priority
	this.ParsingVariable = parsingVariable
	this.SearchTerm = searchTerm
	return &this
}

// NewEmailConnectorParsingRuleWithDefaults instantiates a new EmailConnectorParsingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailConnectorParsingRuleWithDefaults() *EmailConnectorParsingRule {
	this := EmailConnectorParsingRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EmailConnectorParsingRule) SetId(v int32) {
	o.Id = &v
}

// GetParsingStyle returns the ParsingStyle field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetParsingStyle() EmailConnectorParsingStyleReference {
	if o == nil || IsNil(o.ParsingStyle) {
		var ret EmailConnectorParsingStyleReference
		return ret
	}
	return *o.ParsingStyle
}

// GetParsingStyleOk returns a tuple with the ParsingStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetParsingStyleOk() (*EmailConnectorParsingStyleReference, bool) {
	if o == nil || IsNil(o.ParsingStyle) {
		return nil, false
	}
	return o.ParsingStyle, true
}

// HasParsingStyle returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasParsingStyle() bool {
	if o != nil && !IsNil(o.ParsingStyle) {
		return true
	}

	return false
}

// SetParsingStyle gets a reference to the given EmailConnectorParsingStyleReference and assigns it to the ParsingStyle field.
func (o *EmailConnectorParsingRule) SetParsingStyle(v EmailConnectorParsingStyleReference) {
	o.ParsingStyle = &v
}

// GetPriority returns the Priority field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmailConnectorParsingRule) GetPriority() int32 {
	if o == nil || o.Priority.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnectorParsingRule) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// SetPriority sets field value
func (o *EmailConnectorParsingRule) SetPriority(v int32) {
	o.Priority.Set(&v)
}

// GetParsingVariable returns the ParsingVariable field value
func (o *EmailConnectorParsingRule) GetParsingVariable() EmailConnectorParsingVariableReference {
	if o == nil {
		var ret EmailConnectorParsingVariableReference
		return ret
	}

	return o.ParsingVariable
}

// GetParsingVariableOk returns a tuple with the ParsingVariable field value
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetParsingVariableOk() (*EmailConnectorParsingVariableReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParsingVariable, true
}

// SetParsingVariable sets field value
func (o *EmailConnectorParsingRule) SetParsingVariable(v EmailConnectorParsingVariableReference) {
	o.ParsingVariable = v
}

// GetSearchTerm returns the SearchTerm field value
func (o *EmailConnectorParsingRule) GetSearchTerm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchTerm
}

// GetSearchTermOk returns a tuple with the SearchTerm field value
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetSearchTermOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchTerm, true
}

// SetSearchTerm sets field value
func (o *EmailConnectorParsingRule) SetSearchTerm(v string) {
	o.SearchTerm = v
}

// GetServicePriority returns the ServicePriority field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetServicePriority() PriorityReference {
	if o == nil || IsNil(o.ServicePriority) {
		var ret PriorityReference
		return ret
	}
	return *o.ServicePriority
}

// GetServicePriorityOk returns a tuple with the ServicePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetServicePriorityOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.ServicePriority) {
		return nil, false
	}
	return o.ServicePriority, true
}

// HasServicePriority returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasServicePriority() bool {
	if o != nil && !IsNil(o.ServicePriority) {
		return true
	}

	return false
}

// SetServicePriority gets a reference to the given PriorityReference and assigns it to the ServicePriority field.
func (o *EmailConnectorParsingRule) SetServicePriority(v PriorityReference) {
	o.ServicePriority = &v
}

// GetServiceStatus returns the ServiceStatus field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetServiceStatus() ServiceStatusReference {
	if o == nil || IsNil(o.ServiceStatus) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetServiceStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.ServiceStatus) {
		return nil, false
	}
	return o.ServiceStatus, true
}

// HasServiceStatus returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasServiceStatus() bool {
	if o != nil && !IsNil(o.ServiceStatus) {
		return true
	}

	return false
}

// SetServiceStatus gets a reference to the given ServiceStatusReference and assigns it to the ServiceStatus field.
func (o *EmailConnectorParsingRule) SetServiceStatus(v ServiceStatusReference) {
	o.ServiceStatus = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetServiceType() ServiceTypeReference {
	if o == nil || IsNil(o.ServiceType) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetServiceTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given ServiceTypeReference and assigns it to the ServiceType field.
func (o *EmailConnectorParsingRule) SetServiceType(v ServiceTypeReference) {
	o.ServiceType = &v
}

// GetServiceSubType returns the ServiceSubType field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetServiceSubType() ServiceSubTypeReference {
	if o == nil || IsNil(o.ServiceSubType) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.ServiceSubType
}

// GetServiceSubTypeOk returns a tuple with the ServiceSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetServiceSubTypeOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.ServiceSubType) {
		return nil, false
	}
	return o.ServiceSubType, true
}

// HasServiceSubType returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasServiceSubType() bool {
	if o != nil && !IsNil(o.ServiceSubType) {
		return true
	}

	return false
}

// SetServiceSubType gets a reference to the given ServiceSubTypeReference and assigns it to the ServiceSubType field.
func (o *EmailConnectorParsingRule) SetServiceSubType(v ServiceSubTypeReference) {
	o.ServiceSubType = &v
}

// GetServiceItem returns the ServiceItem field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetServiceItem() ServiceItemReference {
	if o == nil || IsNil(o.ServiceItem) {
		var ret ServiceItemReference
		return ret
	}
	return *o.ServiceItem
}

// GetServiceItemOk returns a tuple with the ServiceItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetServiceItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.ServiceItem) {
		return nil, false
	}
	return o.ServiceItem, true
}

// HasServiceItem returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasServiceItem() bool {
	if o != nil && !IsNil(o.ServiceItem) {
		return true
	}

	return false
}

// SetServiceItem gets a reference to the given ServiceItemReference and assigns it to the ServiceItem field.
func (o *EmailConnectorParsingRule) SetServiceItem(v ServiceItemReference) {
	o.ServiceItem = &v
}

// GetServiceBoard returns the ServiceBoard field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetServiceBoard() BoardReference {
	if o == nil || IsNil(o.ServiceBoard) {
		var ret BoardReference
		return ret
	}
	return *o.ServiceBoard
}

// GetServiceBoardOk returns a tuple with the ServiceBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetServiceBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.ServiceBoard) {
		return nil, false
	}
	return o.ServiceBoard, true
}

// HasServiceBoard returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasServiceBoard() bool {
	if o != nil && !IsNil(o.ServiceBoard) {
		return true
	}

	return false
}

// SetServiceBoard gets a reference to the given BoardReference and assigns it to the ServiceBoard field.
func (o *EmailConnectorParsingRule) SetServiceBoard(v BoardReference) {
	o.ServiceBoard = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *EmailConnectorParsingRule) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingRule) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *EmailConnectorParsingRule) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *EmailConnectorParsingRule) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o EmailConnectorParsingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailConnectorParsingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParsingStyle) {
		toSerialize["parsingStyle"] = o.ParsingStyle
	}
	toSerialize["priority"] = o.Priority.Get()
	toSerialize["parsingVariable"] = o.ParsingVariable
	toSerialize["searchTerm"] = o.SearchTerm
	if !IsNil(o.ServicePriority) {
		toSerialize["servicePriority"] = o.ServicePriority
	}
	if !IsNil(o.ServiceStatus) {
		toSerialize["serviceStatus"] = o.ServiceStatus
	}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !IsNil(o.ServiceSubType) {
		toSerialize["serviceSubType"] = o.ServiceSubType
	}
	if !IsNil(o.ServiceItem) {
		toSerialize["serviceItem"] = o.ServiceItem
	}
	if !IsNil(o.ServiceBoard) {
		toSerialize["serviceBoard"] = o.ServiceBoard
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *EmailConnectorParsingRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"priority",
		"parsingVariable",
		"searchTerm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailConnectorParsingRule := _EmailConnectorParsingRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailConnectorParsingRule)

	if err != nil {
		return err
	}

	*o = EmailConnectorParsingRule(varEmailConnectorParsingRule)

	return err
}

type NullableEmailConnectorParsingRule struct {
	value *EmailConnectorParsingRule
	isSet bool
}

func (v NullableEmailConnectorParsingRule) Get() *EmailConnectorParsingRule {
	return v.value
}

func (v *NullableEmailConnectorParsingRule) Set(val *EmailConnectorParsingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailConnectorParsingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailConnectorParsingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailConnectorParsingRule(val *EmailConnectorParsingRule) *NullableEmailConnectorParsingRule {
	return &NullableEmailConnectorParsingRule{value: val, isSet: true}
}

func (v NullableEmailConnectorParsingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailConnectorParsingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


