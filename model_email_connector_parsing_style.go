/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailConnectorParsingStyle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailConnectorParsingStyle{}

// EmailConnectorParsingStyle struct for EmailConnectorParsingStyle
type EmailConnectorParsingStyle struct {
	Id *int32 `json:"id,omitempty"`
	ParsingType EmailConnectorParsingTypeReference `json:"parsingType"`
	//  Max length: 500;
	ParseRule string `json:"parseRule"`
	Priority NullableInt32 `json:"priority"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _EmailConnectorParsingStyle EmailConnectorParsingStyle

// NewEmailConnectorParsingStyle instantiates a new EmailConnectorParsingStyle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailConnectorParsingStyle(parsingType EmailConnectorParsingTypeReference, parseRule string, priority NullableInt32) *EmailConnectorParsingStyle {
	this := EmailConnectorParsingStyle{}
	this.ParsingType = parsingType
	this.ParseRule = parseRule
	this.Priority = priority
	return &this
}

// NewEmailConnectorParsingStyleWithDefaults instantiates a new EmailConnectorParsingStyle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailConnectorParsingStyleWithDefaults() *EmailConnectorParsingStyle {
	this := EmailConnectorParsingStyle{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmailConnectorParsingStyle) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingStyle) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmailConnectorParsingStyle) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EmailConnectorParsingStyle) SetId(v int32) {
	o.Id = &v
}

// GetParsingType returns the ParsingType field value
func (o *EmailConnectorParsingStyle) GetParsingType() EmailConnectorParsingTypeReference {
	if o == nil {
		var ret EmailConnectorParsingTypeReference
		return ret
	}

	return o.ParsingType
}

// GetParsingTypeOk returns a tuple with the ParsingType field value
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingStyle) GetParsingTypeOk() (*EmailConnectorParsingTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParsingType, true
}

// SetParsingType sets field value
func (o *EmailConnectorParsingStyle) SetParsingType(v EmailConnectorParsingTypeReference) {
	o.ParsingType = v
}

// GetParseRule returns the ParseRule field value
func (o *EmailConnectorParsingStyle) GetParseRule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParseRule
}

// GetParseRuleOk returns a tuple with the ParseRule field value
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingStyle) GetParseRuleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParseRule, true
}

// SetParseRule sets field value
func (o *EmailConnectorParsingStyle) SetParseRule(v string) {
	o.ParseRule = v
}

// GetPriority returns the Priority field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EmailConnectorParsingStyle) GetPriority() int32 {
	if o == nil || o.Priority.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailConnectorParsingStyle) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// SetPriority sets field value
func (o *EmailConnectorParsingStyle) SetPriority(v int32) {
	o.Priority.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *EmailConnectorParsingStyle) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailConnectorParsingStyle) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *EmailConnectorParsingStyle) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *EmailConnectorParsingStyle) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o EmailConnectorParsingStyle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailConnectorParsingStyle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["parsingType"] = o.ParsingType
	toSerialize["parseRule"] = o.ParseRule
	toSerialize["priority"] = o.Priority.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *EmailConnectorParsingStyle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parsingType",
		"parseRule",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailConnectorParsingStyle := _EmailConnectorParsingStyle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailConnectorParsingStyle)

	if err != nil {
		return err
	}

	*o = EmailConnectorParsingStyle(varEmailConnectorParsingStyle)

	return err
}

type NullableEmailConnectorParsingStyle struct {
	value *EmailConnectorParsingStyle
	isSet bool
}

func (v NullableEmailConnectorParsingStyle) Get() *EmailConnectorParsingStyle {
	return v.value
}

func (v *NullableEmailConnectorParsingStyle) Set(val *EmailConnectorParsingStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailConnectorParsingStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailConnectorParsingStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailConnectorParsingStyle(val *EmailConnectorParsingStyle) *NullableEmailConnectorParsingStyle {
	return &NullableEmailConnectorParsingStyle{value: val, isSet: true}
}

func (v NullableEmailConnectorParsingStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailConnectorParsingStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


