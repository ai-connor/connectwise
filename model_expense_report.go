/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ExpenseReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseReport{}

// ExpenseReport struct for ExpenseReport
type ExpenseReport struct {
	Id *int32 `json:"id,omitempty"`
	Member *MemberReference `json:"member,omitempty"`
	Year NullableInt32 `json:"year,omitempty"`
	Period NullableInt32 `json:"period,omitempty"`
	DateStart *string `json:"dateStart,omitempty"`
	DateEnd *string `json:"dateEnd,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewExpenseReport instantiates a new ExpenseReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseReport() *ExpenseReport {
	this := ExpenseReport{}
	return &this
}

// NewExpenseReportWithDefaults instantiates a new ExpenseReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseReportWithDefaults() *ExpenseReport {
	this := ExpenseReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExpenseReport) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseReport) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExpenseReport) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ExpenseReport) SetId(v int32) {
	o.Id = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ExpenseReport) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseReport) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ExpenseReport) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ExpenseReport) SetMember(v MemberReference) {
	o.Member = &v
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseReport) GetYear() int32 {
	if o == nil || IsNil(o.Year.Get()) {
		var ret int32
		return ret
	}
	return *o.Year.Get()
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseReport) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Year.Get(), o.Year.IsSet()
}

// HasYear returns a boolean if a field has been set.
func (o *ExpenseReport) HasYear() bool {
	if o != nil && o.Year.IsSet() {
		return true
	}

	return false
}

// SetYear gets a reference to the given NullableInt32 and assigns it to the Year field.
func (o *ExpenseReport) SetYear(v int32) {
	o.Year.Set(&v)
}
// SetYearNil sets the value for Year to be an explicit nil
func (o *ExpenseReport) SetYearNil() {
	o.Year.Set(nil)
}

// UnsetYear ensures that no value is present for Year, not even an explicit nil
func (o *ExpenseReport) UnsetYear() {
	o.Year.Unset()
}

// GetPeriod returns the Period field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseReport) GetPeriod() int32 {
	if o == nil || IsNil(o.Period.Get()) {
		var ret int32
		return ret
	}
	return *o.Period.Get()
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseReport) GetPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Period.Get(), o.Period.IsSet()
}

// HasPeriod returns a boolean if a field has been set.
func (o *ExpenseReport) HasPeriod() bool {
	if o != nil && o.Period.IsSet() {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given NullableInt32 and assigns it to the Period field.
func (o *ExpenseReport) SetPeriod(v int32) {
	o.Period.Set(&v)
}
// SetPeriodNil sets the value for Period to be an explicit nil
func (o *ExpenseReport) SetPeriodNil() {
	o.Period.Set(nil)
}

// UnsetPeriod ensures that no value is present for Period, not even an explicit nil
func (o *ExpenseReport) UnsetPeriod() {
	o.Period.Unset()
}

// GetDateStart returns the DateStart field value if set, zero value otherwise.
func (o *ExpenseReport) GetDateStart() string {
	if o == nil || IsNil(o.DateStart) {
		var ret string
		return ret
	}
	return *o.DateStart
}

// GetDateStartOk returns a tuple with the DateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseReport) GetDateStartOk() (*string, bool) {
	if o == nil || IsNil(o.DateStart) {
		return nil, false
	}
	return o.DateStart, true
}

// HasDateStart returns a boolean if a field has been set.
func (o *ExpenseReport) HasDateStart() bool {
	if o != nil && !IsNil(o.DateStart) {
		return true
	}

	return false
}

// SetDateStart gets a reference to the given string and assigns it to the DateStart field.
func (o *ExpenseReport) SetDateStart(v string) {
	o.DateStart = &v
}

// GetDateEnd returns the DateEnd field value if set, zero value otherwise.
func (o *ExpenseReport) GetDateEnd() string {
	if o == nil || IsNil(o.DateEnd) {
		var ret string
		return ret
	}
	return *o.DateEnd
}

// GetDateEndOk returns a tuple with the DateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseReport) GetDateEndOk() (*string, bool) {
	if o == nil || IsNil(o.DateEnd) {
		return nil, false
	}
	return o.DateEnd, true
}

// HasDateEnd returns a boolean if a field has been set.
func (o *ExpenseReport) HasDateEnd() bool {
	if o != nil && !IsNil(o.DateEnd) {
		return true
	}

	return false
}

// SetDateEnd gets a reference to the given string and assigns it to the DateEnd field.
func (o *ExpenseReport) SetDateEnd(v string) {
	o.DateEnd = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseReport) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseReport) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ExpenseReport) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ExpenseReport) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ExpenseReport) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ExpenseReport) UnsetStatus() {
	o.Status.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseReport) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseReport) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *ExpenseReport) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *ExpenseReport) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *ExpenseReport) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *ExpenseReport) UnsetTotal() {
	o.Total.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *ExpenseReport) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseReport) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *ExpenseReport) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *ExpenseReport) SetDueDate(v string) {
	o.DueDate = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ExpenseReport) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseReport) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ExpenseReport) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ExpenseReport) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ExpenseReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if o.Year.IsSet() {
		toSerialize["year"] = o.Year.Get()
	}
	if o.Period.IsSet() {
		toSerialize["period"] = o.Period.Get()
	}
	if !IsNil(o.DateStart) {
		toSerialize["dateStart"] = o.DateStart
	}
	if !IsNil(o.DateEnd) {
		toSerialize["dateEnd"] = o.DateEnd
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableExpenseReport struct {
	value *ExpenseReport
	isSet bool
}

func (v NullableExpenseReport) Get() *ExpenseReport {
	return v.value
}

func (v *NullableExpenseReport) Set(val *ExpenseReport) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseReport) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseReport(val *ExpenseReport) *NullableExpenseReport {
	return &NullableExpenseReport{value: val, isSet: true}
}

func (v NullableExpenseReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


