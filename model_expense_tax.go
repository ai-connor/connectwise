/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ExpenseTax type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseTax{}

// ExpenseTax struct for ExpenseTax
type ExpenseTax struct {
	Id *int32 `json:"id,omitempty"`
	Amount NullableFloat64 `json:"amount,omitempty"`
	Type *ExpenseTaxTypeReference `json:"type,omitempty"`
}

// NewExpenseTax instantiates a new ExpenseTax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseTax() *ExpenseTax {
	this := ExpenseTax{}
	return &this
}

// NewExpenseTaxWithDefaults instantiates a new ExpenseTax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseTaxWithDefaults() *ExpenseTax {
	this := ExpenseTax{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExpenseTax) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseTax) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExpenseTax) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ExpenseTax) SetId(v int32) {
	o.Id = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseTax) GetAmount() float64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret float64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseTax) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *ExpenseTax) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat64 and assigns it to the Amount field.
func (o *ExpenseTax) SetAmount(v float64) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *ExpenseTax) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *ExpenseTax) UnsetAmount() {
	o.Amount.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExpenseTax) GetType() ExpenseTaxTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ExpenseTaxTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseTax) GetTypeOk() (*ExpenseTaxTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExpenseTax) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ExpenseTaxTypeReference and assigns it to the Type field.
func (o *ExpenseTax) SetType(v ExpenseTaxTypeReference) {
	o.Type = &v
}

func (o ExpenseTax) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseTax) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableExpenseTax struct {
	value *ExpenseTax
	isSet bool
}

func (v NullableExpenseTax) Get() *ExpenseTax {
	return v.value
}

func (v *NullableExpenseTax) Set(val *ExpenseTax) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseTax) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseTax(val *ExpenseTax) *NullableExpenseTax {
	return &NullableExpenseTax{value: val, isSet: true}
}

func (v NullableExpenseTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


