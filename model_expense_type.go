/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExpenseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseType{}

// ExpenseType struct for ExpenseType
type ExpenseType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name string `json:"name"`
	AmountCaption string `json:"amountCaption"`
	ReimbursementRate NullableFloat64 `json:"reimbursementRate,omitempty"`
	BillExpenses NullableString `json:"billExpenses"`
	InvoiceMarkupOption NullableString `json:"invoiceMarkupOption"`
	InvoiceMarkupAmount NullableFloat64 `json:"invoiceMarkupAmount,omitempty"`
	AdvancedAmountFlag NullableBool `json:"advancedAmountFlag,omitempty"`
	MileageFlag NullableBool `json:"mileageFlag,omitempty"`
	QuantityFlag NullableBool `json:"quantityFlag,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	MaxAmount NullableFloat64 `json:"maxAmount,omitempty"`
	//  Max length: 50;
	IntegrationXRef *string `json:"integrationXRef,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ExpenseType ExpenseType

// NewExpenseType instantiates a new ExpenseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseType(name string, amountCaption string, billExpenses NullableString, invoiceMarkupOption NullableString) *ExpenseType {
	this := ExpenseType{}
	this.Name = name
	this.AmountCaption = amountCaption
	this.BillExpenses = billExpenses
	this.InvoiceMarkupOption = invoiceMarkupOption
	return &this
}

// NewExpenseTypeWithDefaults instantiates a new ExpenseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseTypeWithDefaults() *ExpenseType {
	this := ExpenseType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExpenseType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExpenseType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ExpenseType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ExpenseType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExpenseType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExpenseType) SetName(v string) {
	o.Name = v
}

// GetAmountCaption returns the AmountCaption field value
func (o *ExpenseType) GetAmountCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountCaption
}

// GetAmountCaptionOk returns a tuple with the AmountCaption field value
// and a boolean to check if the value has been set.
func (o *ExpenseType) GetAmountCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCaption, true
}

// SetAmountCaption sets field value
func (o *ExpenseType) SetAmountCaption(v string) {
	o.AmountCaption = v
}

// GetReimbursementRate returns the ReimbursementRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetReimbursementRate() float64 {
	if o == nil || IsNil(o.ReimbursementRate.Get()) {
		var ret float64
		return ret
	}
	return *o.ReimbursementRate.Get()
}

// GetReimbursementRateOk returns a tuple with the ReimbursementRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetReimbursementRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReimbursementRate.Get(), o.ReimbursementRate.IsSet()
}

// HasReimbursementRate returns a boolean if a field has been set.
func (o *ExpenseType) HasReimbursementRate() bool {
	if o != nil && o.ReimbursementRate.IsSet() {
		return true
	}

	return false
}

// SetReimbursementRate gets a reference to the given NullableFloat64 and assigns it to the ReimbursementRate field.
func (o *ExpenseType) SetReimbursementRate(v float64) {
	o.ReimbursementRate.Set(&v)
}
// SetReimbursementRateNil sets the value for ReimbursementRate to be an explicit nil
func (o *ExpenseType) SetReimbursementRateNil() {
	o.ReimbursementRate.Set(nil)
}

// UnsetReimbursementRate ensures that no value is present for ReimbursementRate, not even an explicit nil
func (o *ExpenseType) UnsetReimbursementRate() {
	o.ReimbursementRate.Unset()
}

// GetBillExpenses returns the BillExpenses field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExpenseType) GetBillExpenses() string {
	if o == nil || o.BillExpenses.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// SetBillExpenses sets field value
func (o *ExpenseType) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}

// GetInvoiceMarkupOption returns the InvoiceMarkupOption field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExpenseType) GetInvoiceMarkupOption() string {
	if o == nil || o.InvoiceMarkupOption.Get() == nil {
		var ret string
		return ret
	}

	return *o.InvoiceMarkupOption.Get()
}

// GetInvoiceMarkupOptionOk returns a tuple with the InvoiceMarkupOption field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetInvoiceMarkupOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceMarkupOption.Get(), o.InvoiceMarkupOption.IsSet()
}

// SetInvoiceMarkupOption sets field value
func (o *ExpenseType) SetInvoiceMarkupOption(v string) {
	o.InvoiceMarkupOption.Set(&v)
}

// GetInvoiceMarkupAmount returns the InvoiceMarkupAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetInvoiceMarkupAmount() float64 {
	if o == nil || IsNil(o.InvoiceMarkupAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.InvoiceMarkupAmount.Get()
}

// GetInvoiceMarkupAmountOk returns a tuple with the InvoiceMarkupAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetInvoiceMarkupAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceMarkupAmount.Get(), o.InvoiceMarkupAmount.IsSet()
}

// HasInvoiceMarkupAmount returns a boolean if a field has been set.
func (o *ExpenseType) HasInvoiceMarkupAmount() bool {
	if o != nil && o.InvoiceMarkupAmount.IsSet() {
		return true
	}

	return false
}

// SetInvoiceMarkupAmount gets a reference to the given NullableFloat64 and assigns it to the InvoiceMarkupAmount field.
func (o *ExpenseType) SetInvoiceMarkupAmount(v float64) {
	o.InvoiceMarkupAmount.Set(&v)
}
// SetInvoiceMarkupAmountNil sets the value for InvoiceMarkupAmount to be an explicit nil
func (o *ExpenseType) SetInvoiceMarkupAmountNil() {
	o.InvoiceMarkupAmount.Set(nil)
}

// UnsetInvoiceMarkupAmount ensures that no value is present for InvoiceMarkupAmount, not even an explicit nil
func (o *ExpenseType) UnsetInvoiceMarkupAmount() {
	o.InvoiceMarkupAmount.Unset()
}

// GetAdvancedAmountFlag returns the AdvancedAmountFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetAdvancedAmountFlag() bool {
	if o == nil || IsNil(o.AdvancedAmountFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AdvancedAmountFlag.Get()
}

// GetAdvancedAmountFlagOk returns a tuple with the AdvancedAmountFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetAdvancedAmountFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdvancedAmountFlag.Get(), o.AdvancedAmountFlag.IsSet()
}

// HasAdvancedAmountFlag returns a boolean if a field has been set.
func (o *ExpenseType) HasAdvancedAmountFlag() bool {
	if o != nil && o.AdvancedAmountFlag.IsSet() {
		return true
	}

	return false
}

// SetAdvancedAmountFlag gets a reference to the given NullableBool and assigns it to the AdvancedAmountFlag field.
func (o *ExpenseType) SetAdvancedAmountFlag(v bool) {
	o.AdvancedAmountFlag.Set(&v)
}
// SetAdvancedAmountFlagNil sets the value for AdvancedAmountFlag to be an explicit nil
func (o *ExpenseType) SetAdvancedAmountFlagNil() {
	o.AdvancedAmountFlag.Set(nil)
}

// UnsetAdvancedAmountFlag ensures that no value is present for AdvancedAmountFlag, not even an explicit nil
func (o *ExpenseType) UnsetAdvancedAmountFlag() {
	o.AdvancedAmountFlag.Unset()
}

// GetMileageFlag returns the MileageFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetMileageFlag() bool {
	if o == nil || IsNil(o.MileageFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MileageFlag.Get()
}

// GetMileageFlagOk returns a tuple with the MileageFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetMileageFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MileageFlag.Get(), o.MileageFlag.IsSet()
}

// HasMileageFlag returns a boolean if a field has been set.
func (o *ExpenseType) HasMileageFlag() bool {
	if o != nil && o.MileageFlag.IsSet() {
		return true
	}

	return false
}

// SetMileageFlag gets a reference to the given NullableBool and assigns it to the MileageFlag field.
func (o *ExpenseType) SetMileageFlag(v bool) {
	o.MileageFlag.Set(&v)
}
// SetMileageFlagNil sets the value for MileageFlag to be an explicit nil
func (o *ExpenseType) SetMileageFlagNil() {
	o.MileageFlag.Set(nil)
}

// UnsetMileageFlag ensures that no value is present for MileageFlag, not even an explicit nil
func (o *ExpenseType) UnsetMileageFlag() {
	o.MileageFlag.Unset()
}

// GetQuantityFlag returns the QuantityFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetQuantityFlag() bool {
	if o == nil || IsNil(o.QuantityFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.QuantityFlag.Get()
}

// GetQuantityFlagOk returns a tuple with the QuantityFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetQuantityFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityFlag.Get(), o.QuantityFlag.IsSet()
}

// HasQuantityFlag returns a boolean if a field has been set.
func (o *ExpenseType) HasQuantityFlag() bool {
	if o != nil && o.QuantityFlag.IsSet() {
		return true
	}

	return false
}

// SetQuantityFlag gets a reference to the given NullableBool and assigns it to the QuantityFlag field.
func (o *ExpenseType) SetQuantityFlag(v bool) {
	o.QuantityFlag.Set(&v)
}
// SetQuantityFlagNil sets the value for QuantityFlag to be an explicit nil
func (o *ExpenseType) SetQuantityFlagNil() {
	o.QuantityFlag.Set(nil)
}

// UnsetQuantityFlag ensures that no value is present for QuantityFlag, not even an explicit nil
func (o *ExpenseType) UnsetQuantityFlag() {
	o.QuantityFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ExpenseType) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ExpenseType) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ExpenseType) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ExpenseType) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetMaxAmount() float64 {
	if o == nil || IsNil(o.MaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.MaxAmount.Get()
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetMaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxAmount.Get(), o.MaxAmount.IsSet()
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *ExpenseType) HasMaxAmount() bool {
	if o != nil && o.MaxAmount.IsSet() {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given NullableFloat64 and assigns it to the MaxAmount field.
func (o *ExpenseType) SetMaxAmount(v float64) {
	o.MaxAmount.Set(&v)
}
// SetMaxAmountNil sets the value for MaxAmount to be an explicit nil
func (o *ExpenseType) SetMaxAmountNil() {
	o.MaxAmount.Set(nil)
}

// UnsetMaxAmount ensures that no value is present for MaxAmount, not even an explicit nil
func (o *ExpenseType) UnsetMaxAmount() {
	o.MaxAmount.Unset()
}

// GetIntegrationXRef returns the IntegrationXRef field value if set, zero value otherwise.
func (o *ExpenseType) GetIntegrationXRef() string {
	if o == nil || IsNil(o.IntegrationXRef) {
		var ret string
		return ret
	}
	return *o.IntegrationXRef
}

// GetIntegrationXRefOk returns a tuple with the IntegrationXRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseType) GetIntegrationXRefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXRef) {
		return nil, false
	}
	return o.IntegrationXRef, true
}

// HasIntegrationXRef returns a boolean if a field has been set.
func (o *ExpenseType) HasIntegrationXRef() bool {
	if o != nil && !IsNil(o.IntegrationXRef) {
		return true
	}

	return false
}

// SetIntegrationXRef gets a reference to the given string and assigns it to the IntegrationXRef field.
func (o *ExpenseType) SetIntegrationXRef(v string) {
	o.IntegrationXRef = &v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpenseType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpenseType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *ExpenseType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *ExpenseType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *ExpenseType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *ExpenseType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ExpenseType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ExpenseType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ExpenseType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ExpenseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["amountCaption"] = o.AmountCaption
	if o.ReimbursementRate.IsSet() {
		toSerialize["reimbursementRate"] = o.ReimbursementRate.Get()
	}
	toSerialize["billExpenses"] = o.BillExpenses.Get()
	toSerialize["invoiceMarkupOption"] = o.InvoiceMarkupOption.Get()
	if o.InvoiceMarkupAmount.IsSet() {
		toSerialize["invoiceMarkupAmount"] = o.InvoiceMarkupAmount.Get()
	}
	if o.AdvancedAmountFlag.IsSet() {
		toSerialize["advancedAmountFlag"] = o.AdvancedAmountFlag.Get()
	}
	if o.MileageFlag.IsSet() {
		toSerialize["mileageFlag"] = o.MileageFlag.Get()
	}
	if o.QuantityFlag.IsSet() {
		toSerialize["quantityFlag"] = o.QuantityFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.MaxAmount.IsSet() {
		toSerialize["maxAmount"] = o.MaxAmount.Get()
	}
	if !IsNil(o.IntegrationXRef) {
		toSerialize["integrationXRef"] = o.IntegrationXRef
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ExpenseType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"amountCaption",
		"billExpenses",
		"invoiceMarkupOption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpenseType := _ExpenseType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExpenseType)

	if err != nil {
		return err
	}

	*o = ExpenseType(varExpenseType)

	return err
}

type NullableExpenseType struct {
	value *ExpenseType
	isSet bool
}

func (v NullableExpenseType) Get() *ExpenseType {
	return v.value
}

func (v *NullableExpenseType) Set(val *ExpenseType) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseType) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseType(val *ExpenseType) *NullableExpenseType {
	return &NullableExpenseType{value: val, isSet: true}
}

func (v NullableExpenseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


