/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the Experiment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Experiment{}

// Experiment struct for Experiment
type Experiment struct {
	Id *int32 `json:"id,omitempty"`
	ExperimentId *string `json:"experimentId,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Properties *string `json:"properties,omitempty"`
	InactiveFlag *bool `json:"inactiveFlag,omitempty"`
	MemberInactiveFlag *bool `json:"memberInactiveFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewExperiment instantiates a new Experiment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperiment() *Experiment {
	this := Experiment{}
	return &this
}

// NewExperimentWithDefaults instantiates a new Experiment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentWithDefaults() *Experiment {
	this := Experiment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Experiment) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Experiment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Experiment) SetId(v int32) {
	o.Id = &v
}

// GetExperimentId returns the ExperimentId field value if set, zero value otherwise.
func (o *Experiment) GetExperimentId() string {
	if o == nil || IsNil(o.ExperimentId) {
		var ret string
		return ret
	}
	return *o.ExperimentId
}

// GetExperimentIdOk returns a tuple with the ExperimentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetExperimentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExperimentId) {
		return nil, false
	}
	return o.ExperimentId, true
}

// HasExperimentId returns a boolean if a field has been set.
func (o *Experiment) HasExperimentId() bool {
	if o != nil && !IsNil(o.ExperimentId) {
		return true
	}

	return false
}

// SetExperimentId gets a reference to the given string and assigns it to the ExperimentId field.
func (o *Experiment) SetExperimentId(v string) {
	o.ExperimentId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Experiment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Experiment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Experiment) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Experiment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Experiment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Experiment) SetDescription(v string) {
	o.Description = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Experiment) GetProperties() string {
	if o == nil || IsNil(o.Properties) {
		var ret string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetPropertiesOk() (*string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Experiment) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given string and assigns it to the Properties field.
func (o *Experiment) SetProperties(v string) {
	o.Properties = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise.
func (o *Experiment) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetInactiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.InactiveFlag) {
		return nil, false
	}
	return o.InactiveFlag, true
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *Experiment) HasInactiveFlag() bool {
	if o != nil && !IsNil(o.InactiveFlag) {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given bool and assigns it to the InactiveFlag field.
func (o *Experiment) SetInactiveFlag(v bool) {
	o.InactiveFlag = &v
}

// GetMemberInactiveFlag returns the MemberInactiveFlag field value if set, zero value otherwise.
func (o *Experiment) GetMemberInactiveFlag() bool {
	if o == nil || IsNil(o.MemberInactiveFlag) {
		var ret bool
		return ret
	}
	return *o.MemberInactiveFlag
}

// GetMemberInactiveFlagOk returns a tuple with the MemberInactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetMemberInactiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.MemberInactiveFlag) {
		return nil, false
	}
	return o.MemberInactiveFlag, true
}

// HasMemberInactiveFlag returns a boolean if a field has been set.
func (o *Experiment) HasMemberInactiveFlag() bool {
	if o != nil && !IsNil(o.MemberInactiveFlag) {
		return true
	}

	return false
}

// SetMemberInactiveFlag gets a reference to the given bool and assigns it to the MemberInactiveFlag field.
func (o *Experiment) SetMemberInactiveFlag(v bool) {
	o.MemberInactiveFlag = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Experiment) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Experiment) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Experiment) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Experiment) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Experiment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Experiment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExperimentId) {
		toSerialize["experimentId"] = o.ExperimentId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.InactiveFlag) {
		toSerialize["inactiveFlag"] = o.InactiveFlag
	}
	if !IsNil(o.MemberInactiveFlag) {
		toSerialize["memberInactiveFlag"] = o.MemberInactiveFlag
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableExperiment struct {
	value *Experiment
	isSet bool
}

func (v NullableExperiment) Get() *Experiment {
	return v.value
}

func (v *NullableExperiment) Set(val *Experiment) {
	v.value = val
	v.isSet = true
}

func (v NullableExperiment) IsSet() bool {
	return v.isSet
}

func (v *NullableExperiment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperiment(val *Experiment) *NullableExperiment {
	return &NullableExperiment{value: val, isSet: true}
}

func (v NullableExperiment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperiment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


