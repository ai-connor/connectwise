/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FinanceCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinanceCurrency{}

// FinanceCurrency struct for FinanceCurrency
type FinanceCurrency struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 10;
	CurrencyIdentifier string `json:"currencyIdentifier"`
	//  Max length: 50;
	Name string `json:"name"`
	//  Max length: 10;
	Symbol *string `json:"symbol,omitempty"`
	DisplayIdFlag NullableBool `json:"displayIdFlag,omitempty"`
	DisplaySymbolFlag NullableBool `json:"displaySymbolFlag,omitempty"`
	CurrencyCode *CurrencyCodeReference `json:"currencyCode,omitempty"`
	//  Max length: 1;
	ThousandsSeparator *string `json:"thousandsSeparator,omitempty"`
	//  Max length: 1;
	DecimalSeparator *string `json:"decimalSeparator,omitempty"`
	NegativeParenthesesFlag NullableBool `json:"negativeParenthesesFlag,omitempty"`
	RightAlign NullableBool `json:"rightAlign,omitempty"`
	NumberOfDecimals NullableInt32 `json:"numberOfDecimals,omitempty"`
	ReportFormat *string `json:"reportFormat,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _FinanceCurrency FinanceCurrency

// NewFinanceCurrency instantiates a new FinanceCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinanceCurrency(currencyIdentifier string, name string) *FinanceCurrency {
	this := FinanceCurrency{}
	this.CurrencyIdentifier = currencyIdentifier
	this.Name = name
	return &this
}

// NewFinanceCurrencyWithDefaults instantiates a new FinanceCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinanceCurrencyWithDefaults() *FinanceCurrency {
	this := FinanceCurrency{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FinanceCurrency) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FinanceCurrency) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FinanceCurrency) SetId(v int32) {
	o.Id = &v
}

// GetCurrencyIdentifier returns the CurrencyIdentifier field value
func (o *FinanceCurrency) GetCurrencyIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyIdentifier
}

// GetCurrencyIdentifierOk returns a tuple with the CurrencyIdentifier field value
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetCurrencyIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyIdentifier, true
}

// SetCurrencyIdentifier sets field value
func (o *FinanceCurrency) SetCurrencyIdentifier(v string) {
	o.CurrencyIdentifier = v
}

// GetName returns the Name field value
func (o *FinanceCurrency) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FinanceCurrency) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *FinanceCurrency) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *FinanceCurrency) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *FinanceCurrency) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDisplayIdFlag returns the DisplayIdFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinanceCurrency) GetDisplayIdFlag() bool {
	if o == nil || IsNil(o.DisplayIdFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplayIdFlag.Get()
}

// GetDisplayIdFlagOk returns a tuple with the DisplayIdFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinanceCurrency) GetDisplayIdFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayIdFlag.Get(), o.DisplayIdFlag.IsSet()
}

// HasDisplayIdFlag returns a boolean if a field has been set.
func (o *FinanceCurrency) HasDisplayIdFlag() bool {
	if o != nil && o.DisplayIdFlag.IsSet() {
		return true
	}

	return false
}

// SetDisplayIdFlag gets a reference to the given NullableBool and assigns it to the DisplayIdFlag field.
func (o *FinanceCurrency) SetDisplayIdFlag(v bool) {
	o.DisplayIdFlag.Set(&v)
}
// SetDisplayIdFlagNil sets the value for DisplayIdFlag to be an explicit nil
func (o *FinanceCurrency) SetDisplayIdFlagNil() {
	o.DisplayIdFlag.Set(nil)
}

// UnsetDisplayIdFlag ensures that no value is present for DisplayIdFlag, not even an explicit nil
func (o *FinanceCurrency) UnsetDisplayIdFlag() {
	o.DisplayIdFlag.Unset()
}

// GetDisplaySymbolFlag returns the DisplaySymbolFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinanceCurrency) GetDisplaySymbolFlag() bool {
	if o == nil || IsNil(o.DisplaySymbolFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplaySymbolFlag.Get()
}

// GetDisplaySymbolFlagOk returns a tuple with the DisplaySymbolFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinanceCurrency) GetDisplaySymbolFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplaySymbolFlag.Get(), o.DisplaySymbolFlag.IsSet()
}

// HasDisplaySymbolFlag returns a boolean if a field has been set.
func (o *FinanceCurrency) HasDisplaySymbolFlag() bool {
	if o != nil && o.DisplaySymbolFlag.IsSet() {
		return true
	}

	return false
}

// SetDisplaySymbolFlag gets a reference to the given NullableBool and assigns it to the DisplaySymbolFlag field.
func (o *FinanceCurrency) SetDisplaySymbolFlag(v bool) {
	o.DisplaySymbolFlag.Set(&v)
}
// SetDisplaySymbolFlagNil sets the value for DisplaySymbolFlag to be an explicit nil
func (o *FinanceCurrency) SetDisplaySymbolFlagNil() {
	o.DisplaySymbolFlag.Set(nil)
}

// UnsetDisplaySymbolFlag ensures that no value is present for DisplaySymbolFlag, not even an explicit nil
func (o *FinanceCurrency) UnsetDisplaySymbolFlag() {
	o.DisplaySymbolFlag.Unset()
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *FinanceCurrency) GetCurrencyCode() CurrencyCodeReference {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCodeReference
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetCurrencyCodeOk() (*CurrencyCodeReference, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *FinanceCurrency) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCodeReference and assigns it to the CurrencyCode field.
func (o *FinanceCurrency) SetCurrencyCode(v CurrencyCodeReference) {
	o.CurrencyCode = &v
}

// GetThousandsSeparator returns the ThousandsSeparator field value if set, zero value otherwise.
func (o *FinanceCurrency) GetThousandsSeparator() string {
	if o == nil || IsNil(o.ThousandsSeparator) {
		var ret string
		return ret
	}
	return *o.ThousandsSeparator
}

// GetThousandsSeparatorOk returns a tuple with the ThousandsSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetThousandsSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.ThousandsSeparator) {
		return nil, false
	}
	return o.ThousandsSeparator, true
}

// HasThousandsSeparator returns a boolean if a field has been set.
func (o *FinanceCurrency) HasThousandsSeparator() bool {
	if o != nil && !IsNil(o.ThousandsSeparator) {
		return true
	}

	return false
}

// SetThousandsSeparator gets a reference to the given string and assigns it to the ThousandsSeparator field.
func (o *FinanceCurrency) SetThousandsSeparator(v string) {
	o.ThousandsSeparator = &v
}

// GetDecimalSeparator returns the DecimalSeparator field value if set, zero value otherwise.
func (o *FinanceCurrency) GetDecimalSeparator() string {
	if o == nil || IsNil(o.DecimalSeparator) {
		var ret string
		return ret
	}
	return *o.DecimalSeparator
}

// GetDecimalSeparatorOk returns a tuple with the DecimalSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetDecimalSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.DecimalSeparator) {
		return nil, false
	}
	return o.DecimalSeparator, true
}

// HasDecimalSeparator returns a boolean if a field has been set.
func (o *FinanceCurrency) HasDecimalSeparator() bool {
	if o != nil && !IsNil(o.DecimalSeparator) {
		return true
	}

	return false
}

// SetDecimalSeparator gets a reference to the given string and assigns it to the DecimalSeparator field.
func (o *FinanceCurrency) SetDecimalSeparator(v string) {
	o.DecimalSeparator = &v
}

// GetNegativeParenthesesFlag returns the NegativeParenthesesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinanceCurrency) GetNegativeParenthesesFlag() bool {
	if o == nil || IsNil(o.NegativeParenthesesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NegativeParenthesesFlag.Get()
}

// GetNegativeParenthesesFlagOk returns a tuple with the NegativeParenthesesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinanceCurrency) GetNegativeParenthesesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NegativeParenthesesFlag.Get(), o.NegativeParenthesesFlag.IsSet()
}

// HasNegativeParenthesesFlag returns a boolean if a field has been set.
func (o *FinanceCurrency) HasNegativeParenthesesFlag() bool {
	if o != nil && o.NegativeParenthesesFlag.IsSet() {
		return true
	}

	return false
}

// SetNegativeParenthesesFlag gets a reference to the given NullableBool and assigns it to the NegativeParenthesesFlag field.
func (o *FinanceCurrency) SetNegativeParenthesesFlag(v bool) {
	o.NegativeParenthesesFlag.Set(&v)
}
// SetNegativeParenthesesFlagNil sets the value for NegativeParenthesesFlag to be an explicit nil
func (o *FinanceCurrency) SetNegativeParenthesesFlagNil() {
	o.NegativeParenthesesFlag.Set(nil)
}

// UnsetNegativeParenthesesFlag ensures that no value is present for NegativeParenthesesFlag, not even an explicit nil
func (o *FinanceCurrency) UnsetNegativeParenthesesFlag() {
	o.NegativeParenthesesFlag.Unset()
}

// GetRightAlign returns the RightAlign field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinanceCurrency) GetRightAlign() bool {
	if o == nil || IsNil(o.RightAlign.Get()) {
		var ret bool
		return ret
	}
	return *o.RightAlign.Get()
}

// GetRightAlignOk returns a tuple with the RightAlign field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinanceCurrency) GetRightAlignOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RightAlign.Get(), o.RightAlign.IsSet()
}

// HasRightAlign returns a boolean if a field has been set.
func (o *FinanceCurrency) HasRightAlign() bool {
	if o != nil && o.RightAlign.IsSet() {
		return true
	}

	return false
}

// SetRightAlign gets a reference to the given NullableBool and assigns it to the RightAlign field.
func (o *FinanceCurrency) SetRightAlign(v bool) {
	o.RightAlign.Set(&v)
}
// SetRightAlignNil sets the value for RightAlign to be an explicit nil
func (o *FinanceCurrency) SetRightAlignNil() {
	o.RightAlign.Set(nil)
}

// UnsetRightAlign ensures that no value is present for RightAlign, not even an explicit nil
func (o *FinanceCurrency) UnsetRightAlign() {
	o.RightAlign.Unset()
}

// GetNumberOfDecimals returns the NumberOfDecimals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinanceCurrency) GetNumberOfDecimals() int32 {
	if o == nil || IsNil(o.NumberOfDecimals.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfDecimals.Get()
}

// GetNumberOfDecimalsOk returns a tuple with the NumberOfDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinanceCurrency) GetNumberOfDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfDecimals.Get(), o.NumberOfDecimals.IsSet()
}

// HasNumberOfDecimals returns a boolean if a field has been set.
func (o *FinanceCurrency) HasNumberOfDecimals() bool {
	if o != nil && o.NumberOfDecimals.IsSet() {
		return true
	}

	return false
}

// SetNumberOfDecimals gets a reference to the given NullableInt32 and assigns it to the NumberOfDecimals field.
func (o *FinanceCurrency) SetNumberOfDecimals(v int32) {
	o.NumberOfDecimals.Set(&v)
}
// SetNumberOfDecimalsNil sets the value for NumberOfDecimals to be an explicit nil
func (o *FinanceCurrency) SetNumberOfDecimalsNil() {
	o.NumberOfDecimals.Set(nil)
}

// UnsetNumberOfDecimals ensures that no value is present for NumberOfDecimals, not even an explicit nil
func (o *FinanceCurrency) UnsetNumberOfDecimals() {
	o.NumberOfDecimals.Unset()
}

// GetReportFormat returns the ReportFormat field value if set, zero value otherwise.
func (o *FinanceCurrency) GetReportFormat() string {
	if o == nil || IsNil(o.ReportFormat) {
		var ret string
		return ret
	}
	return *o.ReportFormat
}

// GetReportFormatOk returns a tuple with the ReportFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetReportFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ReportFormat) {
		return nil, false
	}
	return o.ReportFormat, true
}

// HasReportFormat returns a boolean if a field has been set.
func (o *FinanceCurrency) HasReportFormat() bool {
	if o != nil && !IsNil(o.ReportFormat) {
		return true
	}

	return false
}

// SetReportFormat gets a reference to the given string and assigns it to the ReportFormat field.
func (o *FinanceCurrency) SetReportFormat(v string) {
	o.ReportFormat = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *FinanceCurrency) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinanceCurrency) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *FinanceCurrency) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *FinanceCurrency) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o FinanceCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinanceCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["currencyIdentifier"] = o.CurrencyIdentifier
	toSerialize["name"] = o.Name
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.DisplayIdFlag.IsSet() {
		toSerialize["displayIdFlag"] = o.DisplayIdFlag.Get()
	}
	if o.DisplaySymbolFlag.IsSet() {
		toSerialize["displaySymbolFlag"] = o.DisplaySymbolFlag.Get()
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.ThousandsSeparator) {
		toSerialize["thousandsSeparator"] = o.ThousandsSeparator
	}
	if !IsNil(o.DecimalSeparator) {
		toSerialize["decimalSeparator"] = o.DecimalSeparator
	}
	if o.NegativeParenthesesFlag.IsSet() {
		toSerialize["negativeParenthesesFlag"] = o.NegativeParenthesesFlag.Get()
	}
	if o.RightAlign.IsSet() {
		toSerialize["rightAlign"] = o.RightAlign.Get()
	}
	if o.NumberOfDecimals.IsSet() {
		toSerialize["numberOfDecimals"] = o.NumberOfDecimals.Get()
	}
	if !IsNil(o.ReportFormat) {
		toSerialize["reportFormat"] = o.ReportFormat
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *FinanceCurrency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currencyIdentifier",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinanceCurrency := _FinanceCurrency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinanceCurrency)

	if err != nil {
		return err
	}

	*o = FinanceCurrency(varFinanceCurrency)

	return err
}

type NullableFinanceCurrency struct {
	value *FinanceCurrency
	isSet bool
}

func (v NullableFinanceCurrency) Get() *FinanceCurrency {
	return v.value
}

func (v *NullableFinanceCurrency) Set(val *FinanceCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableFinanceCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableFinanceCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinanceCurrency(val *FinanceCurrency) *NullableFinanceCurrency {
	return &NullableFinanceCurrency{value: val, isSet: true}
}

func (v NullableFinanceCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinanceCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


