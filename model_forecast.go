/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the Forecast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Forecast{}

// Forecast struct for Forecast
type Forecast struct {
	Id *int32 `json:"id,omitempty"`
	ForecastItems []ForecastItem `json:"forecastItems,omitempty"`
	ProductRevenue *ProductRevenueReference `json:"productRevenue,omitempty"`
	ServiceRevenue *ServiceRevenueReference `json:"serviceRevenue,omitempty"`
	AgreementRevenue *AgreementRevenueReference `json:"agreementRevenue,omitempty"`
	TimeRevenue *TimeRevenueReference `json:"timeRevenue,omitempty"`
	ExpenseRevenue *ExpenseRevenueReference `json:"expenseRevenue,omitempty"`
	ForecastRevenueTotals *ForecastRevenueReference `json:"forecastRevenueTotals,omitempty"`
	InclusiveRevenueTotals *InclusiveRevenueReference `json:"inclusiveRevenueTotals,omitempty"`
	RecurringTotal NullableFloat64 `json:"recurringTotal,omitempty"`
	WonRevenue *WonRevenueReference `json:"wonRevenue,omitempty"`
	LostRevenue *LostRevenueReference `json:"lostRevenue,omitempty"`
	OpenRevenue *OpenRevenueReference `json:"openRevenue,omitempty"`
	OtherRevenue1 *Other1RevenueReference `json:"otherRevenue1,omitempty"`
	OtherRevenue2 *Other2RevenueReference `json:"otherRevenue2,omitempty"`
	SalesTaxRevenue NullableFloat64 `json:"salesTaxRevenue,omitempty"`
	ForecastTotalWithTaxes NullableFloat64 `json:"forecastTotalWithTaxes,omitempty"`
	ExpectedProbability *int32 `json:"expectedProbability,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewForecast instantiates a new Forecast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForecast() *Forecast {
	this := Forecast{}
	return &this
}

// NewForecastWithDefaults instantiates a new Forecast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForecastWithDefaults() *Forecast {
	this := Forecast{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Forecast) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Forecast) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Forecast) SetId(v int32) {
	o.Id = &v
}

// GetForecastItems returns the ForecastItems field value if set, zero value otherwise.
func (o *Forecast) GetForecastItems() []ForecastItem {
	if o == nil || IsNil(o.ForecastItems) {
		var ret []ForecastItem
		return ret
	}
	return o.ForecastItems
}

// GetForecastItemsOk returns a tuple with the ForecastItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetForecastItemsOk() ([]ForecastItem, bool) {
	if o == nil || IsNil(o.ForecastItems) {
		return nil, false
	}
	return o.ForecastItems, true
}

// HasForecastItems returns a boolean if a field has been set.
func (o *Forecast) HasForecastItems() bool {
	if o != nil && !IsNil(o.ForecastItems) {
		return true
	}

	return false
}

// SetForecastItems gets a reference to the given []ForecastItem and assigns it to the ForecastItems field.
func (o *Forecast) SetForecastItems(v []ForecastItem) {
	o.ForecastItems = v
}

// GetProductRevenue returns the ProductRevenue field value if set, zero value otherwise.
func (o *Forecast) GetProductRevenue() ProductRevenueReference {
	if o == nil || IsNil(o.ProductRevenue) {
		var ret ProductRevenueReference
		return ret
	}
	return *o.ProductRevenue
}

// GetProductRevenueOk returns a tuple with the ProductRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetProductRevenueOk() (*ProductRevenueReference, bool) {
	if o == nil || IsNil(o.ProductRevenue) {
		return nil, false
	}
	return o.ProductRevenue, true
}

// HasProductRevenue returns a boolean if a field has been set.
func (o *Forecast) HasProductRevenue() bool {
	if o != nil && !IsNil(o.ProductRevenue) {
		return true
	}

	return false
}

// SetProductRevenue gets a reference to the given ProductRevenueReference and assigns it to the ProductRevenue field.
func (o *Forecast) SetProductRevenue(v ProductRevenueReference) {
	o.ProductRevenue = &v
}

// GetServiceRevenue returns the ServiceRevenue field value if set, zero value otherwise.
func (o *Forecast) GetServiceRevenue() ServiceRevenueReference {
	if o == nil || IsNil(o.ServiceRevenue) {
		var ret ServiceRevenueReference
		return ret
	}
	return *o.ServiceRevenue
}

// GetServiceRevenueOk returns a tuple with the ServiceRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetServiceRevenueOk() (*ServiceRevenueReference, bool) {
	if o == nil || IsNil(o.ServiceRevenue) {
		return nil, false
	}
	return o.ServiceRevenue, true
}

// HasServiceRevenue returns a boolean if a field has been set.
func (o *Forecast) HasServiceRevenue() bool {
	if o != nil && !IsNil(o.ServiceRevenue) {
		return true
	}

	return false
}

// SetServiceRevenue gets a reference to the given ServiceRevenueReference and assigns it to the ServiceRevenue field.
func (o *Forecast) SetServiceRevenue(v ServiceRevenueReference) {
	o.ServiceRevenue = &v
}

// GetAgreementRevenue returns the AgreementRevenue field value if set, zero value otherwise.
func (o *Forecast) GetAgreementRevenue() AgreementRevenueReference {
	if o == nil || IsNil(o.AgreementRevenue) {
		var ret AgreementRevenueReference
		return ret
	}
	return *o.AgreementRevenue
}

// GetAgreementRevenueOk returns a tuple with the AgreementRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetAgreementRevenueOk() (*AgreementRevenueReference, bool) {
	if o == nil || IsNil(o.AgreementRevenue) {
		return nil, false
	}
	return o.AgreementRevenue, true
}

// HasAgreementRevenue returns a boolean if a field has been set.
func (o *Forecast) HasAgreementRevenue() bool {
	if o != nil && !IsNil(o.AgreementRevenue) {
		return true
	}

	return false
}

// SetAgreementRevenue gets a reference to the given AgreementRevenueReference and assigns it to the AgreementRevenue field.
func (o *Forecast) SetAgreementRevenue(v AgreementRevenueReference) {
	o.AgreementRevenue = &v
}

// GetTimeRevenue returns the TimeRevenue field value if set, zero value otherwise.
func (o *Forecast) GetTimeRevenue() TimeRevenueReference {
	if o == nil || IsNil(o.TimeRevenue) {
		var ret TimeRevenueReference
		return ret
	}
	return *o.TimeRevenue
}

// GetTimeRevenueOk returns a tuple with the TimeRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetTimeRevenueOk() (*TimeRevenueReference, bool) {
	if o == nil || IsNil(o.TimeRevenue) {
		return nil, false
	}
	return o.TimeRevenue, true
}

// HasTimeRevenue returns a boolean if a field has been set.
func (o *Forecast) HasTimeRevenue() bool {
	if o != nil && !IsNil(o.TimeRevenue) {
		return true
	}

	return false
}

// SetTimeRevenue gets a reference to the given TimeRevenueReference and assigns it to the TimeRevenue field.
func (o *Forecast) SetTimeRevenue(v TimeRevenueReference) {
	o.TimeRevenue = &v
}

// GetExpenseRevenue returns the ExpenseRevenue field value if set, zero value otherwise.
func (o *Forecast) GetExpenseRevenue() ExpenseRevenueReference {
	if o == nil || IsNil(o.ExpenseRevenue) {
		var ret ExpenseRevenueReference
		return ret
	}
	return *o.ExpenseRevenue
}

// GetExpenseRevenueOk returns a tuple with the ExpenseRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetExpenseRevenueOk() (*ExpenseRevenueReference, bool) {
	if o == nil || IsNil(o.ExpenseRevenue) {
		return nil, false
	}
	return o.ExpenseRevenue, true
}

// HasExpenseRevenue returns a boolean if a field has been set.
func (o *Forecast) HasExpenseRevenue() bool {
	if o != nil && !IsNil(o.ExpenseRevenue) {
		return true
	}

	return false
}

// SetExpenseRevenue gets a reference to the given ExpenseRevenueReference and assigns it to the ExpenseRevenue field.
func (o *Forecast) SetExpenseRevenue(v ExpenseRevenueReference) {
	o.ExpenseRevenue = &v
}

// GetForecastRevenueTotals returns the ForecastRevenueTotals field value if set, zero value otherwise.
func (o *Forecast) GetForecastRevenueTotals() ForecastRevenueReference {
	if o == nil || IsNil(o.ForecastRevenueTotals) {
		var ret ForecastRevenueReference
		return ret
	}
	return *o.ForecastRevenueTotals
}

// GetForecastRevenueTotalsOk returns a tuple with the ForecastRevenueTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetForecastRevenueTotalsOk() (*ForecastRevenueReference, bool) {
	if o == nil || IsNil(o.ForecastRevenueTotals) {
		return nil, false
	}
	return o.ForecastRevenueTotals, true
}

// HasForecastRevenueTotals returns a boolean if a field has been set.
func (o *Forecast) HasForecastRevenueTotals() bool {
	if o != nil && !IsNil(o.ForecastRevenueTotals) {
		return true
	}

	return false
}

// SetForecastRevenueTotals gets a reference to the given ForecastRevenueReference and assigns it to the ForecastRevenueTotals field.
func (o *Forecast) SetForecastRevenueTotals(v ForecastRevenueReference) {
	o.ForecastRevenueTotals = &v
}

// GetInclusiveRevenueTotals returns the InclusiveRevenueTotals field value if set, zero value otherwise.
func (o *Forecast) GetInclusiveRevenueTotals() InclusiveRevenueReference {
	if o == nil || IsNil(o.InclusiveRevenueTotals) {
		var ret InclusiveRevenueReference
		return ret
	}
	return *o.InclusiveRevenueTotals
}

// GetInclusiveRevenueTotalsOk returns a tuple with the InclusiveRevenueTotals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetInclusiveRevenueTotalsOk() (*InclusiveRevenueReference, bool) {
	if o == nil || IsNil(o.InclusiveRevenueTotals) {
		return nil, false
	}
	return o.InclusiveRevenueTotals, true
}

// HasInclusiveRevenueTotals returns a boolean if a field has been set.
func (o *Forecast) HasInclusiveRevenueTotals() bool {
	if o != nil && !IsNil(o.InclusiveRevenueTotals) {
		return true
	}

	return false
}

// SetInclusiveRevenueTotals gets a reference to the given InclusiveRevenueReference and assigns it to the InclusiveRevenueTotals field.
func (o *Forecast) SetInclusiveRevenueTotals(v InclusiveRevenueReference) {
	o.InclusiveRevenueTotals = &v
}

// GetRecurringTotal returns the RecurringTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Forecast) GetRecurringTotal() float64 {
	if o == nil || IsNil(o.RecurringTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.RecurringTotal.Get()
}

// GetRecurringTotalOk returns a tuple with the RecurringTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Forecast) GetRecurringTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringTotal.Get(), o.RecurringTotal.IsSet()
}

// HasRecurringTotal returns a boolean if a field has been set.
func (o *Forecast) HasRecurringTotal() bool {
	if o != nil && o.RecurringTotal.IsSet() {
		return true
	}

	return false
}

// SetRecurringTotal gets a reference to the given NullableFloat64 and assigns it to the RecurringTotal field.
func (o *Forecast) SetRecurringTotal(v float64) {
	o.RecurringTotal.Set(&v)
}
// SetRecurringTotalNil sets the value for RecurringTotal to be an explicit nil
func (o *Forecast) SetRecurringTotalNil() {
	o.RecurringTotal.Set(nil)
}

// UnsetRecurringTotal ensures that no value is present for RecurringTotal, not even an explicit nil
func (o *Forecast) UnsetRecurringTotal() {
	o.RecurringTotal.Unset()
}

// GetWonRevenue returns the WonRevenue field value if set, zero value otherwise.
func (o *Forecast) GetWonRevenue() WonRevenueReference {
	if o == nil || IsNil(o.WonRevenue) {
		var ret WonRevenueReference
		return ret
	}
	return *o.WonRevenue
}

// GetWonRevenueOk returns a tuple with the WonRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetWonRevenueOk() (*WonRevenueReference, bool) {
	if o == nil || IsNil(o.WonRevenue) {
		return nil, false
	}
	return o.WonRevenue, true
}

// HasWonRevenue returns a boolean if a field has been set.
func (o *Forecast) HasWonRevenue() bool {
	if o != nil && !IsNil(o.WonRevenue) {
		return true
	}

	return false
}

// SetWonRevenue gets a reference to the given WonRevenueReference and assigns it to the WonRevenue field.
func (o *Forecast) SetWonRevenue(v WonRevenueReference) {
	o.WonRevenue = &v
}

// GetLostRevenue returns the LostRevenue field value if set, zero value otherwise.
func (o *Forecast) GetLostRevenue() LostRevenueReference {
	if o == nil || IsNil(o.LostRevenue) {
		var ret LostRevenueReference
		return ret
	}
	return *o.LostRevenue
}

// GetLostRevenueOk returns a tuple with the LostRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetLostRevenueOk() (*LostRevenueReference, bool) {
	if o == nil || IsNil(o.LostRevenue) {
		return nil, false
	}
	return o.LostRevenue, true
}

// HasLostRevenue returns a boolean if a field has been set.
func (o *Forecast) HasLostRevenue() bool {
	if o != nil && !IsNil(o.LostRevenue) {
		return true
	}

	return false
}

// SetLostRevenue gets a reference to the given LostRevenueReference and assigns it to the LostRevenue field.
func (o *Forecast) SetLostRevenue(v LostRevenueReference) {
	o.LostRevenue = &v
}

// GetOpenRevenue returns the OpenRevenue field value if set, zero value otherwise.
func (o *Forecast) GetOpenRevenue() OpenRevenueReference {
	if o == nil || IsNil(o.OpenRevenue) {
		var ret OpenRevenueReference
		return ret
	}
	return *o.OpenRevenue
}

// GetOpenRevenueOk returns a tuple with the OpenRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetOpenRevenueOk() (*OpenRevenueReference, bool) {
	if o == nil || IsNil(o.OpenRevenue) {
		return nil, false
	}
	return o.OpenRevenue, true
}

// HasOpenRevenue returns a boolean if a field has been set.
func (o *Forecast) HasOpenRevenue() bool {
	if o != nil && !IsNil(o.OpenRevenue) {
		return true
	}

	return false
}

// SetOpenRevenue gets a reference to the given OpenRevenueReference and assigns it to the OpenRevenue field.
func (o *Forecast) SetOpenRevenue(v OpenRevenueReference) {
	o.OpenRevenue = &v
}

// GetOtherRevenue1 returns the OtherRevenue1 field value if set, zero value otherwise.
func (o *Forecast) GetOtherRevenue1() Other1RevenueReference {
	if o == nil || IsNil(o.OtherRevenue1) {
		var ret Other1RevenueReference
		return ret
	}
	return *o.OtherRevenue1
}

// GetOtherRevenue1Ok returns a tuple with the OtherRevenue1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetOtherRevenue1Ok() (*Other1RevenueReference, bool) {
	if o == nil || IsNil(o.OtherRevenue1) {
		return nil, false
	}
	return o.OtherRevenue1, true
}

// HasOtherRevenue1 returns a boolean if a field has been set.
func (o *Forecast) HasOtherRevenue1() bool {
	if o != nil && !IsNil(o.OtherRevenue1) {
		return true
	}

	return false
}

// SetOtherRevenue1 gets a reference to the given Other1RevenueReference and assigns it to the OtherRevenue1 field.
func (o *Forecast) SetOtherRevenue1(v Other1RevenueReference) {
	o.OtherRevenue1 = &v
}

// GetOtherRevenue2 returns the OtherRevenue2 field value if set, zero value otherwise.
func (o *Forecast) GetOtherRevenue2() Other2RevenueReference {
	if o == nil || IsNil(o.OtherRevenue2) {
		var ret Other2RevenueReference
		return ret
	}
	return *o.OtherRevenue2
}

// GetOtherRevenue2Ok returns a tuple with the OtherRevenue2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetOtherRevenue2Ok() (*Other2RevenueReference, bool) {
	if o == nil || IsNil(o.OtherRevenue2) {
		return nil, false
	}
	return o.OtherRevenue2, true
}

// HasOtherRevenue2 returns a boolean if a field has been set.
func (o *Forecast) HasOtherRevenue2() bool {
	if o != nil && !IsNil(o.OtherRevenue2) {
		return true
	}

	return false
}

// SetOtherRevenue2 gets a reference to the given Other2RevenueReference and assigns it to the OtherRevenue2 field.
func (o *Forecast) SetOtherRevenue2(v Other2RevenueReference) {
	o.OtherRevenue2 = &v
}

// GetSalesTaxRevenue returns the SalesTaxRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Forecast) GetSalesTaxRevenue() float64 {
	if o == nil || IsNil(o.SalesTaxRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.SalesTaxRevenue.Get()
}

// GetSalesTaxRevenueOk returns a tuple with the SalesTaxRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Forecast) GetSalesTaxRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesTaxRevenue.Get(), o.SalesTaxRevenue.IsSet()
}

// HasSalesTaxRevenue returns a boolean if a field has been set.
func (o *Forecast) HasSalesTaxRevenue() bool {
	if o != nil && o.SalesTaxRevenue.IsSet() {
		return true
	}

	return false
}

// SetSalesTaxRevenue gets a reference to the given NullableFloat64 and assigns it to the SalesTaxRevenue field.
func (o *Forecast) SetSalesTaxRevenue(v float64) {
	o.SalesTaxRevenue.Set(&v)
}
// SetSalesTaxRevenueNil sets the value for SalesTaxRevenue to be an explicit nil
func (o *Forecast) SetSalesTaxRevenueNil() {
	o.SalesTaxRevenue.Set(nil)
}

// UnsetSalesTaxRevenue ensures that no value is present for SalesTaxRevenue, not even an explicit nil
func (o *Forecast) UnsetSalesTaxRevenue() {
	o.SalesTaxRevenue.Unset()
}

// GetForecastTotalWithTaxes returns the ForecastTotalWithTaxes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Forecast) GetForecastTotalWithTaxes() float64 {
	if o == nil || IsNil(o.ForecastTotalWithTaxes.Get()) {
		var ret float64
		return ret
	}
	return *o.ForecastTotalWithTaxes.Get()
}

// GetForecastTotalWithTaxesOk returns a tuple with the ForecastTotalWithTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Forecast) GetForecastTotalWithTaxesOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForecastTotalWithTaxes.Get(), o.ForecastTotalWithTaxes.IsSet()
}

// HasForecastTotalWithTaxes returns a boolean if a field has been set.
func (o *Forecast) HasForecastTotalWithTaxes() bool {
	if o != nil && o.ForecastTotalWithTaxes.IsSet() {
		return true
	}

	return false
}

// SetForecastTotalWithTaxes gets a reference to the given NullableFloat64 and assigns it to the ForecastTotalWithTaxes field.
func (o *Forecast) SetForecastTotalWithTaxes(v float64) {
	o.ForecastTotalWithTaxes.Set(&v)
}
// SetForecastTotalWithTaxesNil sets the value for ForecastTotalWithTaxes to be an explicit nil
func (o *Forecast) SetForecastTotalWithTaxesNil() {
	o.ForecastTotalWithTaxes.Set(nil)
}

// UnsetForecastTotalWithTaxes ensures that no value is present for ForecastTotalWithTaxes, not even an explicit nil
func (o *Forecast) UnsetForecastTotalWithTaxes() {
	o.ForecastTotalWithTaxes.Unset()
}

// GetExpectedProbability returns the ExpectedProbability field value if set, zero value otherwise.
func (o *Forecast) GetExpectedProbability() int32 {
	if o == nil || IsNil(o.ExpectedProbability) {
		var ret int32
		return ret
	}
	return *o.ExpectedProbability
}

// GetExpectedProbabilityOk returns a tuple with the ExpectedProbability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetExpectedProbabilityOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpectedProbability) {
		return nil, false
	}
	return o.ExpectedProbability, true
}

// HasExpectedProbability returns a boolean if a field has been set.
func (o *Forecast) HasExpectedProbability() bool {
	if o != nil && !IsNil(o.ExpectedProbability) {
		return true
	}

	return false
}

// SetExpectedProbability gets a reference to the given int32 and assigns it to the ExpectedProbability field.
func (o *Forecast) SetExpectedProbability(v int32) {
	o.ExpectedProbability = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *Forecast) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *Forecast) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *Forecast) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *Forecast) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *Forecast) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *Forecast) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Forecast) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Forecast) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Forecast) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Forecast) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forecast) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Forecast) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Forecast) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Forecast) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Forecast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ForecastItems) {
		toSerialize["forecastItems"] = o.ForecastItems
	}
	if !IsNil(o.ProductRevenue) {
		toSerialize["productRevenue"] = o.ProductRevenue
	}
	if !IsNil(o.ServiceRevenue) {
		toSerialize["serviceRevenue"] = o.ServiceRevenue
	}
	if !IsNil(o.AgreementRevenue) {
		toSerialize["agreementRevenue"] = o.AgreementRevenue
	}
	if !IsNil(o.TimeRevenue) {
		toSerialize["timeRevenue"] = o.TimeRevenue
	}
	if !IsNil(o.ExpenseRevenue) {
		toSerialize["expenseRevenue"] = o.ExpenseRevenue
	}
	if !IsNil(o.ForecastRevenueTotals) {
		toSerialize["forecastRevenueTotals"] = o.ForecastRevenueTotals
	}
	if !IsNil(o.InclusiveRevenueTotals) {
		toSerialize["inclusiveRevenueTotals"] = o.InclusiveRevenueTotals
	}
	if o.RecurringTotal.IsSet() {
		toSerialize["recurringTotal"] = o.RecurringTotal.Get()
	}
	if !IsNil(o.WonRevenue) {
		toSerialize["wonRevenue"] = o.WonRevenue
	}
	if !IsNil(o.LostRevenue) {
		toSerialize["lostRevenue"] = o.LostRevenue
	}
	if !IsNil(o.OpenRevenue) {
		toSerialize["openRevenue"] = o.OpenRevenue
	}
	if !IsNil(o.OtherRevenue1) {
		toSerialize["otherRevenue1"] = o.OtherRevenue1
	}
	if !IsNil(o.OtherRevenue2) {
		toSerialize["otherRevenue2"] = o.OtherRevenue2
	}
	if o.SalesTaxRevenue.IsSet() {
		toSerialize["salesTaxRevenue"] = o.SalesTaxRevenue.Get()
	}
	if o.ForecastTotalWithTaxes.IsSet() {
		toSerialize["forecastTotalWithTaxes"] = o.ForecastTotalWithTaxes.Get()
	}
	if !IsNil(o.ExpectedProbability) {
		toSerialize["expectedProbability"] = o.ExpectedProbability
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableForecast struct {
	value *Forecast
	isSet bool
}

func (v NullableForecast) Get() *Forecast {
	return v.value
}

func (v *NullableForecast) Set(val *Forecast) {
	v.value = val
	v.isSet = true
}

func (v NullableForecast) IsSet() bool {
	return v.isSet
}

func (v *NullableForecast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForecast(val *Forecast) *NullableForecast {
	return &NullableForecast{value: val, isSet: true}
}

func (v NullableForecast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForecast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


