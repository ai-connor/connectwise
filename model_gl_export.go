/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExport{}

// GLExport struct for GLExport
type GLExport struct {
	ExportSettings map[string]interface{} `json:"exportSettings,omitempty"`
	Vendors []GLExportVendor `json:"vendors,omitempty"`
	Customers []GLExportCustomer `json:"customers,omitempty"`
	Transactions []GLExportTransaction `json:"transactions,omitempty"`
	Expenses []GLExportExpense `json:"expenses,omitempty"`
	ExpenseBills []GLExportExpenseBill `json:"expenseBills,omitempty"`
	PurchaseTransactions []GLExportPurchaseTransaction `json:"purchaseTransactions,omitempty"`
	AdjustmentTransactions []GLExportAdjustmentTransaction `json:"adjustmentTransactions,omitempty"`
	InventoryTransfers []GLExportInventoryTransfer `json:"inventoryTransfers,omitempty"`
}

// NewGLExport instantiates a new GLExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExport() *GLExport {
	this := GLExport{}
	return &this
}

// NewGLExportWithDefaults instantiates a new GLExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportWithDefaults() *GLExport {
	this := GLExport{}
	return &this
}

// GetExportSettings returns the ExportSettings field value if set, zero value otherwise.
func (o *GLExport) GetExportSettings() map[string]interface{} {
	if o == nil || IsNil(o.ExportSettings) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExportSettings
}

// GetExportSettingsOk returns a tuple with the ExportSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetExportSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExportSettings) {
		return map[string]interface{}{}, false
	}
	return o.ExportSettings, true
}

// HasExportSettings returns a boolean if a field has been set.
func (o *GLExport) HasExportSettings() bool {
	if o != nil && !IsNil(o.ExportSettings) {
		return true
	}

	return false
}

// SetExportSettings gets a reference to the given map[string]interface{} and assigns it to the ExportSettings field.
func (o *GLExport) SetExportSettings(v map[string]interface{}) {
	o.ExportSettings = v
}

// GetVendors returns the Vendors field value if set, zero value otherwise.
func (o *GLExport) GetVendors() []GLExportVendor {
	if o == nil || IsNil(o.Vendors) {
		var ret []GLExportVendor
		return ret
	}
	return o.Vendors
}

// GetVendorsOk returns a tuple with the Vendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetVendorsOk() ([]GLExportVendor, bool) {
	if o == nil || IsNil(o.Vendors) {
		return nil, false
	}
	return o.Vendors, true
}

// HasVendors returns a boolean if a field has been set.
func (o *GLExport) HasVendors() bool {
	if o != nil && !IsNil(o.Vendors) {
		return true
	}

	return false
}

// SetVendors gets a reference to the given []GLExportVendor and assigns it to the Vendors field.
func (o *GLExport) SetVendors(v []GLExportVendor) {
	o.Vendors = v
}

// GetCustomers returns the Customers field value if set, zero value otherwise.
func (o *GLExport) GetCustomers() []GLExportCustomer {
	if o == nil || IsNil(o.Customers) {
		var ret []GLExportCustomer
		return ret
	}
	return o.Customers
}

// GetCustomersOk returns a tuple with the Customers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetCustomersOk() ([]GLExportCustomer, bool) {
	if o == nil || IsNil(o.Customers) {
		return nil, false
	}
	return o.Customers, true
}

// HasCustomers returns a boolean if a field has been set.
func (o *GLExport) HasCustomers() bool {
	if o != nil && !IsNil(o.Customers) {
		return true
	}

	return false
}

// SetCustomers gets a reference to the given []GLExportCustomer and assigns it to the Customers field.
func (o *GLExport) SetCustomers(v []GLExportCustomer) {
	o.Customers = v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *GLExport) GetTransactions() []GLExportTransaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []GLExportTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetTransactionsOk() ([]GLExportTransaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *GLExport) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []GLExportTransaction and assigns it to the Transactions field.
func (o *GLExport) SetTransactions(v []GLExportTransaction) {
	o.Transactions = v
}

// GetExpenses returns the Expenses field value if set, zero value otherwise.
func (o *GLExport) GetExpenses() []GLExportExpense {
	if o == nil || IsNil(o.Expenses) {
		var ret []GLExportExpense
		return ret
	}
	return o.Expenses
}

// GetExpensesOk returns a tuple with the Expenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetExpensesOk() ([]GLExportExpense, bool) {
	if o == nil || IsNil(o.Expenses) {
		return nil, false
	}
	return o.Expenses, true
}

// HasExpenses returns a boolean if a field has been set.
func (o *GLExport) HasExpenses() bool {
	if o != nil && !IsNil(o.Expenses) {
		return true
	}

	return false
}

// SetExpenses gets a reference to the given []GLExportExpense and assigns it to the Expenses field.
func (o *GLExport) SetExpenses(v []GLExportExpense) {
	o.Expenses = v
}

// GetExpenseBills returns the ExpenseBills field value if set, zero value otherwise.
func (o *GLExport) GetExpenseBills() []GLExportExpenseBill {
	if o == nil || IsNil(o.ExpenseBills) {
		var ret []GLExportExpenseBill
		return ret
	}
	return o.ExpenseBills
}

// GetExpenseBillsOk returns a tuple with the ExpenseBills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetExpenseBillsOk() ([]GLExportExpenseBill, bool) {
	if o == nil || IsNil(o.ExpenseBills) {
		return nil, false
	}
	return o.ExpenseBills, true
}

// HasExpenseBills returns a boolean if a field has been set.
func (o *GLExport) HasExpenseBills() bool {
	if o != nil && !IsNil(o.ExpenseBills) {
		return true
	}

	return false
}

// SetExpenseBills gets a reference to the given []GLExportExpenseBill and assigns it to the ExpenseBills field.
func (o *GLExport) SetExpenseBills(v []GLExportExpenseBill) {
	o.ExpenseBills = v
}

// GetPurchaseTransactions returns the PurchaseTransactions field value if set, zero value otherwise.
func (o *GLExport) GetPurchaseTransactions() []GLExportPurchaseTransaction {
	if o == nil || IsNil(o.PurchaseTransactions) {
		var ret []GLExportPurchaseTransaction
		return ret
	}
	return o.PurchaseTransactions
}

// GetPurchaseTransactionsOk returns a tuple with the PurchaseTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetPurchaseTransactionsOk() ([]GLExportPurchaseTransaction, bool) {
	if o == nil || IsNil(o.PurchaseTransactions) {
		return nil, false
	}
	return o.PurchaseTransactions, true
}

// HasPurchaseTransactions returns a boolean if a field has been set.
func (o *GLExport) HasPurchaseTransactions() bool {
	if o != nil && !IsNil(o.PurchaseTransactions) {
		return true
	}

	return false
}

// SetPurchaseTransactions gets a reference to the given []GLExportPurchaseTransaction and assigns it to the PurchaseTransactions field.
func (o *GLExport) SetPurchaseTransactions(v []GLExportPurchaseTransaction) {
	o.PurchaseTransactions = v
}

// GetAdjustmentTransactions returns the AdjustmentTransactions field value if set, zero value otherwise.
func (o *GLExport) GetAdjustmentTransactions() []GLExportAdjustmentTransaction {
	if o == nil || IsNil(o.AdjustmentTransactions) {
		var ret []GLExportAdjustmentTransaction
		return ret
	}
	return o.AdjustmentTransactions
}

// GetAdjustmentTransactionsOk returns a tuple with the AdjustmentTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetAdjustmentTransactionsOk() ([]GLExportAdjustmentTransaction, bool) {
	if o == nil || IsNil(o.AdjustmentTransactions) {
		return nil, false
	}
	return o.AdjustmentTransactions, true
}

// HasAdjustmentTransactions returns a boolean if a field has been set.
func (o *GLExport) HasAdjustmentTransactions() bool {
	if o != nil && !IsNil(o.AdjustmentTransactions) {
		return true
	}

	return false
}

// SetAdjustmentTransactions gets a reference to the given []GLExportAdjustmentTransaction and assigns it to the AdjustmentTransactions field.
func (o *GLExport) SetAdjustmentTransactions(v []GLExportAdjustmentTransaction) {
	o.AdjustmentTransactions = v
}

// GetInventoryTransfers returns the InventoryTransfers field value if set, zero value otherwise.
func (o *GLExport) GetInventoryTransfers() []GLExportInventoryTransfer {
	if o == nil || IsNil(o.InventoryTransfers) {
		var ret []GLExportInventoryTransfer
		return ret
	}
	return o.InventoryTransfers
}

// GetInventoryTransfersOk returns a tuple with the InventoryTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExport) GetInventoryTransfersOk() ([]GLExportInventoryTransfer, bool) {
	if o == nil || IsNil(o.InventoryTransfers) {
		return nil, false
	}
	return o.InventoryTransfers, true
}

// HasInventoryTransfers returns a boolean if a field has been set.
func (o *GLExport) HasInventoryTransfers() bool {
	if o != nil && !IsNil(o.InventoryTransfers) {
		return true
	}

	return false
}

// SetInventoryTransfers gets a reference to the given []GLExportInventoryTransfer and assigns it to the InventoryTransfers field.
func (o *GLExport) SetInventoryTransfers(v []GLExportInventoryTransfer) {
	o.InventoryTransfers = v
}

func (o GLExport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportSettings) {
		toSerialize["exportSettings"] = o.ExportSettings
	}
	if !IsNil(o.Vendors) {
		toSerialize["vendors"] = o.Vendors
	}
	if !IsNil(o.Customers) {
		toSerialize["customers"] = o.Customers
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	if !IsNil(o.Expenses) {
		toSerialize["expenses"] = o.Expenses
	}
	if !IsNil(o.ExpenseBills) {
		toSerialize["expenseBills"] = o.ExpenseBills
	}
	if !IsNil(o.PurchaseTransactions) {
		toSerialize["purchaseTransactions"] = o.PurchaseTransactions
	}
	if !IsNil(o.AdjustmentTransactions) {
		toSerialize["adjustmentTransactions"] = o.AdjustmentTransactions
	}
	if !IsNil(o.InventoryTransfers) {
		toSerialize["inventoryTransfers"] = o.InventoryTransfers
	}
	return toSerialize, nil
}

type NullableGLExport struct {
	value *GLExport
	isSet bool
}

func (v NullableGLExport) Get() *GLExport {
	return v.value
}

func (v *NullableGLExport) Set(val *GLExport) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExport) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExport(val *GLExport) *NullableGLExport {
	return &NullableGLExport{value: val, isSet: true}
}

func (v NullableGLExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


