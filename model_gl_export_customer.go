/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportCustomer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportCustomer{}

// GLExportCustomer struct for GLExportCustomer
type GLExportCustomer struct {
	Company *CompanyReference `json:"company,omitempty"`
	CompanyType *CompanyTypeReference `json:"companyType,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	Site *SiteReference `json:"site,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	BillingTermsXref *string `json:"billingTermsXref,omitempty"`
	DueDays NullableInt32 `json:"dueDays,omitempty"`
	Taxable NullableBool `json:"taxable,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	StateTaxXref *string `json:"stateTaxXref,omitempty"`
	CountyTaxXref *string `json:"countyTaxXref,omitempty"`
	CityTaxXref *string `json:"cityTaxXref,omitempty"`
	CountryTaxXref *string `json:"countryTaxXref,omitempty"`
	CompositeTaxXref *string `json:"compositeTaxXref,omitempty"`
	StateTaxRate NullableFloat64 `json:"stateTaxRate,omitempty"`
	CountyTaxRate NullableFloat64 `json:"countyTaxRate,omitempty"`
	CityTaxRate NullableFloat64 `json:"cityTaxRate,omitempty"`
	CountryTaxRate NullableFloat64 `json:"countryTaxRate,omitempty"`
	CompositeTaxRate NullableFloat64 `json:"compositeTaxRate,omitempty"`
	TaxGroupRate NullableFloat64 `json:"taxGroupRate,omitempty"`
	TaxAgencyXref *string `json:"taxAgencyXref,omitempty"`
	StateTaxAgencyXref *string `json:"stateTaxAgencyXref,omitempty"`
	CountyTaxAgencyXref *string `json:"countyTaxAgencyXref,omitempty"`
	CityTaxAgencyXref *string `json:"cityTaxAgencyXref,omitempty"`
	CountryTaxAgencyXref *string `json:"countryTaxAgencyXref,omitempty"`
	CompositeTaxAgencyXref *string `json:"compositeTaxAgencyXref,omitempty"`
	TaxLevels []GLExportCustomerTaxLevel `json:"taxLevels,omitempty"`
}

// NewGLExportCustomer instantiates a new GLExportCustomer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportCustomer() *GLExportCustomer {
	this := GLExportCustomer{}
	return &this
}

// NewGLExportCustomerWithDefaults instantiates a new GLExportCustomer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportCustomerWithDefaults() *GLExportCustomer {
	this := GLExportCustomer{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *GLExportCustomer) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCompanyType() CompanyTypeReference {
	if o == nil || IsNil(o.CompanyType) {
		var ret CompanyTypeReference
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCompanyTypeOk() (*CompanyTypeReference, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given CompanyTypeReference and assigns it to the CompanyType field.
func (o *GLExportCustomer) SetCompanyType(v CompanyTypeReference) {
	o.CompanyType = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *GLExportCustomer) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *GLExportCustomer) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *GLExportCustomer) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *GLExportCustomer) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *GLExportCustomer) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *GLExportCustomer) SetSite(v SiteReference) {
	o.Site = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportCustomer) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportCustomer) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportCustomer) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *GLExportCustomer) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *GLExportCustomer) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *GLExportCustomer) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetBillingTermsXref returns the BillingTermsXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetBillingTermsXref() string {
	if o == nil || IsNil(o.BillingTermsXref) {
		var ret string
		return ret
	}
	return *o.BillingTermsXref
}

// GetBillingTermsXrefOk returns a tuple with the BillingTermsXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetBillingTermsXrefOk() (*string, bool) {
	if o == nil || IsNil(o.BillingTermsXref) {
		return nil, false
	}
	return o.BillingTermsXref, true
}

// HasBillingTermsXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasBillingTermsXref() bool {
	if o != nil && !IsNil(o.BillingTermsXref) {
		return true
	}

	return false
}

// SetBillingTermsXref gets a reference to the given string and assigns it to the BillingTermsXref field.
func (o *GLExportCustomer) SetBillingTermsXref(v string) {
	o.BillingTermsXref = &v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetDueDays() int32 {
	if o == nil || IsNil(o.DueDays.Get()) {
		var ret int32
		return ret
	}
	return *o.DueDays.Get()
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetDueDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDays.Get(), o.DueDays.IsSet()
}

// HasDueDays returns a boolean if a field has been set.
func (o *GLExportCustomer) HasDueDays() bool {
	if o != nil && o.DueDays.IsSet() {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given NullableInt32 and assigns it to the DueDays field.
func (o *GLExportCustomer) SetDueDays(v int32) {
	o.DueDays.Set(&v)
}
// SetDueDaysNil sets the value for DueDays to be an explicit nil
func (o *GLExportCustomer) SetDueDaysNil() {
	o.DueDays.Set(nil)
}

// UnsetDueDays ensures that no value is present for DueDays, not even an explicit nil
func (o *GLExportCustomer) UnsetDueDays() {
	o.DueDays.Unset()
}

// GetTaxable returns the Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable.Get()
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetTaxableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable.Get(), o.Taxable.IsSet()
}

// HasTaxable returns a boolean if a field has been set.
func (o *GLExportCustomer) HasTaxable() bool {
	if o != nil && o.Taxable.IsSet() {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given NullableBool and assigns it to the Taxable field.
func (o *GLExportCustomer) SetTaxable(v bool) {
	o.Taxable.Set(&v)
}
// SetTaxableNil sets the value for Taxable to be an explicit nil
func (o *GLExportCustomer) SetTaxableNil() {
	o.Taxable.Set(nil)
}

// UnsetTaxable ensures that no value is present for Taxable, not even an explicit nil
func (o *GLExportCustomer) UnsetTaxable() {
	o.Taxable.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *GLExportCustomer) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *GLExportCustomer) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *GLExportCustomer) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportCustomer) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetStateTaxXref returns the StateTaxXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetStateTaxXref() string {
	if o == nil || IsNil(o.StateTaxXref) {
		var ret string
		return ret
	}
	return *o.StateTaxXref
}

// GetStateTaxXrefOk returns a tuple with the StateTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetStateTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxXref) {
		return nil, false
	}
	return o.StateTaxXref, true
}

// HasStateTaxXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasStateTaxXref() bool {
	if o != nil && !IsNil(o.StateTaxXref) {
		return true
	}

	return false
}

// SetStateTaxXref gets a reference to the given string and assigns it to the StateTaxXref field.
func (o *GLExportCustomer) SetStateTaxXref(v string) {
	o.StateTaxXref = &v
}

// GetCountyTaxXref returns the CountyTaxXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCountyTaxXref() string {
	if o == nil || IsNil(o.CountyTaxXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxXref
}

// GetCountyTaxXrefOk returns a tuple with the CountyTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCountyTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxXref) {
		return nil, false
	}
	return o.CountyTaxXref, true
}

// HasCountyTaxXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCountyTaxXref() bool {
	if o != nil && !IsNil(o.CountyTaxXref) {
		return true
	}

	return false
}

// SetCountyTaxXref gets a reference to the given string and assigns it to the CountyTaxXref field.
func (o *GLExportCustomer) SetCountyTaxXref(v string) {
	o.CountyTaxXref = &v
}

// GetCityTaxXref returns the CityTaxXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCityTaxXref() string {
	if o == nil || IsNil(o.CityTaxXref) {
		var ret string
		return ret
	}
	return *o.CityTaxXref
}

// GetCityTaxXrefOk returns a tuple with the CityTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCityTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CityTaxXref) {
		return nil, false
	}
	return o.CityTaxXref, true
}

// HasCityTaxXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCityTaxXref() bool {
	if o != nil && !IsNil(o.CityTaxXref) {
		return true
	}

	return false
}

// SetCityTaxXref gets a reference to the given string and assigns it to the CityTaxXref field.
func (o *GLExportCustomer) SetCityTaxXref(v string) {
	o.CityTaxXref = &v
}

// GetCountryTaxXref returns the CountryTaxXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCountryTaxXref() string {
	if o == nil || IsNil(o.CountryTaxXref) {
		var ret string
		return ret
	}
	return *o.CountryTaxXref
}

// GetCountryTaxXrefOk returns a tuple with the CountryTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCountryTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountryTaxXref) {
		return nil, false
	}
	return o.CountryTaxXref, true
}

// HasCountryTaxXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCountryTaxXref() bool {
	if o != nil && !IsNil(o.CountryTaxXref) {
		return true
	}

	return false
}

// SetCountryTaxXref gets a reference to the given string and assigns it to the CountryTaxXref field.
func (o *GLExportCustomer) SetCountryTaxXref(v string) {
	o.CountryTaxXref = &v
}

// GetCompositeTaxXref returns the CompositeTaxXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCompositeTaxXref() string {
	if o == nil || IsNil(o.CompositeTaxXref) {
		var ret string
		return ret
	}
	return *o.CompositeTaxXref
}

// GetCompositeTaxXrefOk returns a tuple with the CompositeTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCompositeTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeTaxXref) {
		return nil, false
	}
	return o.CompositeTaxXref, true
}

// HasCompositeTaxXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCompositeTaxXref() bool {
	if o != nil && !IsNil(o.CompositeTaxXref) {
		return true
	}

	return false
}

// SetCompositeTaxXref gets a reference to the given string and assigns it to the CompositeTaxXref field.
func (o *GLExportCustomer) SetCompositeTaxXref(v string) {
	o.CompositeTaxXref = &v
}

// GetStateTaxRate returns the StateTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetStateTaxRate() float64 {
	if o == nil || IsNil(o.StateTaxRate.Get()) {
		var ret float64
		return ret
	}
	return *o.StateTaxRate.Get()
}

// GetStateTaxRateOk returns a tuple with the StateTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetStateTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxRate.Get(), o.StateTaxRate.IsSet()
}

// HasStateTaxRate returns a boolean if a field has been set.
func (o *GLExportCustomer) HasStateTaxRate() bool {
	if o != nil && o.StateTaxRate.IsSet() {
		return true
	}

	return false
}

// SetStateTaxRate gets a reference to the given NullableFloat64 and assigns it to the StateTaxRate field.
func (o *GLExportCustomer) SetStateTaxRate(v float64) {
	o.StateTaxRate.Set(&v)
}
// SetStateTaxRateNil sets the value for StateTaxRate to be an explicit nil
func (o *GLExportCustomer) SetStateTaxRateNil() {
	o.StateTaxRate.Set(nil)
}

// UnsetStateTaxRate ensures that no value is present for StateTaxRate, not even an explicit nil
func (o *GLExportCustomer) UnsetStateTaxRate() {
	o.StateTaxRate.Unset()
}

// GetCountyTaxRate returns the CountyTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetCountyTaxRate() float64 {
	if o == nil || IsNil(o.CountyTaxRate.Get()) {
		var ret float64
		return ret
	}
	return *o.CountyTaxRate.Get()
}

// GetCountyTaxRateOk returns a tuple with the CountyTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetCountyTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxRate.Get(), o.CountyTaxRate.IsSet()
}

// HasCountyTaxRate returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCountyTaxRate() bool {
	if o != nil && o.CountyTaxRate.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxRate gets a reference to the given NullableFloat64 and assigns it to the CountyTaxRate field.
func (o *GLExportCustomer) SetCountyTaxRate(v float64) {
	o.CountyTaxRate.Set(&v)
}
// SetCountyTaxRateNil sets the value for CountyTaxRate to be an explicit nil
func (o *GLExportCustomer) SetCountyTaxRateNil() {
	o.CountyTaxRate.Set(nil)
}

// UnsetCountyTaxRate ensures that no value is present for CountyTaxRate, not even an explicit nil
func (o *GLExportCustomer) UnsetCountyTaxRate() {
	o.CountyTaxRate.Unset()
}

// GetCityTaxRate returns the CityTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetCityTaxRate() float64 {
	if o == nil || IsNil(o.CityTaxRate.Get()) {
		var ret float64
		return ret
	}
	return *o.CityTaxRate.Get()
}

// GetCityTaxRateOk returns a tuple with the CityTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetCityTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxRate.Get(), o.CityTaxRate.IsSet()
}

// HasCityTaxRate returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCityTaxRate() bool {
	if o != nil && o.CityTaxRate.IsSet() {
		return true
	}

	return false
}

// SetCityTaxRate gets a reference to the given NullableFloat64 and assigns it to the CityTaxRate field.
func (o *GLExportCustomer) SetCityTaxRate(v float64) {
	o.CityTaxRate.Set(&v)
}
// SetCityTaxRateNil sets the value for CityTaxRate to be an explicit nil
func (o *GLExportCustomer) SetCityTaxRateNil() {
	o.CityTaxRate.Set(nil)
}

// UnsetCityTaxRate ensures that no value is present for CityTaxRate, not even an explicit nil
func (o *GLExportCustomer) UnsetCityTaxRate() {
	o.CityTaxRate.Unset()
}

// GetCountryTaxRate returns the CountryTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetCountryTaxRate() float64 {
	if o == nil || IsNil(o.CountryTaxRate.Get()) {
		var ret float64
		return ret
	}
	return *o.CountryTaxRate.Get()
}

// GetCountryTaxRateOk returns a tuple with the CountryTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetCountryTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxRate.Get(), o.CountryTaxRate.IsSet()
}

// HasCountryTaxRate returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCountryTaxRate() bool {
	if o != nil && o.CountryTaxRate.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxRate gets a reference to the given NullableFloat64 and assigns it to the CountryTaxRate field.
func (o *GLExportCustomer) SetCountryTaxRate(v float64) {
	o.CountryTaxRate.Set(&v)
}
// SetCountryTaxRateNil sets the value for CountryTaxRate to be an explicit nil
func (o *GLExportCustomer) SetCountryTaxRateNil() {
	o.CountryTaxRate.Set(nil)
}

// UnsetCountryTaxRate ensures that no value is present for CountryTaxRate, not even an explicit nil
func (o *GLExportCustomer) UnsetCountryTaxRate() {
	o.CountryTaxRate.Unset()
}

// GetCompositeTaxRate returns the CompositeTaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetCompositeTaxRate() float64 {
	if o == nil || IsNil(o.CompositeTaxRate.Get()) {
		var ret float64
		return ret
	}
	return *o.CompositeTaxRate.Get()
}

// GetCompositeTaxRateOk returns a tuple with the CompositeTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetCompositeTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxRate.Get(), o.CompositeTaxRate.IsSet()
}

// HasCompositeTaxRate returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCompositeTaxRate() bool {
	if o != nil && o.CompositeTaxRate.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxRate gets a reference to the given NullableFloat64 and assigns it to the CompositeTaxRate field.
func (o *GLExportCustomer) SetCompositeTaxRate(v float64) {
	o.CompositeTaxRate.Set(&v)
}
// SetCompositeTaxRateNil sets the value for CompositeTaxRate to be an explicit nil
func (o *GLExportCustomer) SetCompositeTaxRateNil() {
	o.CompositeTaxRate.Set(nil)
}

// UnsetCompositeTaxRate ensures that no value is present for CompositeTaxRate, not even an explicit nil
func (o *GLExportCustomer) UnsetCompositeTaxRate() {
	o.CompositeTaxRate.Unset()
}

// GetTaxGroupRate returns the TaxGroupRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportCustomer) GetTaxGroupRate() float64 {
	if o == nil || IsNil(o.TaxGroupRate.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxGroupRate.Get()
}

// GetTaxGroupRateOk returns a tuple with the TaxGroupRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportCustomer) GetTaxGroupRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxGroupRate.Get(), o.TaxGroupRate.IsSet()
}

// HasTaxGroupRate returns a boolean if a field has been set.
func (o *GLExportCustomer) HasTaxGroupRate() bool {
	if o != nil && o.TaxGroupRate.IsSet() {
		return true
	}

	return false
}

// SetTaxGroupRate gets a reference to the given NullableFloat64 and assigns it to the TaxGroupRate field.
func (o *GLExportCustomer) SetTaxGroupRate(v float64) {
	o.TaxGroupRate.Set(&v)
}
// SetTaxGroupRateNil sets the value for TaxGroupRate to be an explicit nil
func (o *GLExportCustomer) SetTaxGroupRateNil() {
	o.TaxGroupRate.Set(nil)
}

// UnsetTaxGroupRate ensures that no value is present for TaxGroupRate, not even an explicit nil
func (o *GLExportCustomer) UnsetTaxGroupRate() {
	o.TaxGroupRate.Unset()
}

// GetTaxAgencyXref returns the TaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetTaxAgencyXref() string {
	if o == nil || IsNil(o.TaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.TaxAgencyXref
}

// GetTaxAgencyXrefOk returns a tuple with the TaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAgencyXref) {
		return nil, false
	}
	return o.TaxAgencyXref, true
}

// HasTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasTaxAgencyXref() bool {
	if o != nil && !IsNil(o.TaxAgencyXref) {
		return true
	}

	return false
}

// SetTaxAgencyXref gets a reference to the given string and assigns it to the TaxAgencyXref field.
func (o *GLExportCustomer) SetTaxAgencyXref(v string) {
	o.TaxAgencyXref = &v
}

// GetStateTaxAgencyXref returns the StateTaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetStateTaxAgencyXref() string {
	if o == nil || IsNil(o.StateTaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.StateTaxAgencyXref
}

// GetStateTaxAgencyXrefOk returns a tuple with the StateTaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetStateTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxAgencyXref) {
		return nil, false
	}
	return o.StateTaxAgencyXref, true
}

// HasStateTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasStateTaxAgencyXref() bool {
	if o != nil && !IsNil(o.StateTaxAgencyXref) {
		return true
	}

	return false
}

// SetStateTaxAgencyXref gets a reference to the given string and assigns it to the StateTaxAgencyXref field.
func (o *GLExportCustomer) SetStateTaxAgencyXref(v string) {
	o.StateTaxAgencyXref = &v
}

// GetCountyTaxAgencyXref returns the CountyTaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCountyTaxAgencyXref() string {
	if o == nil || IsNil(o.CountyTaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxAgencyXref
}

// GetCountyTaxAgencyXrefOk returns a tuple with the CountyTaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCountyTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxAgencyXref) {
		return nil, false
	}
	return o.CountyTaxAgencyXref, true
}

// HasCountyTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCountyTaxAgencyXref() bool {
	if o != nil && !IsNil(o.CountyTaxAgencyXref) {
		return true
	}

	return false
}

// SetCountyTaxAgencyXref gets a reference to the given string and assigns it to the CountyTaxAgencyXref field.
func (o *GLExportCustomer) SetCountyTaxAgencyXref(v string) {
	o.CountyTaxAgencyXref = &v
}

// GetCityTaxAgencyXref returns the CityTaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCityTaxAgencyXref() string {
	if o == nil || IsNil(o.CityTaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.CityTaxAgencyXref
}

// GetCityTaxAgencyXrefOk returns a tuple with the CityTaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCityTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CityTaxAgencyXref) {
		return nil, false
	}
	return o.CityTaxAgencyXref, true
}

// HasCityTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCityTaxAgencyXref() bool {
	if o != nil && !IsNil(o.CityTaxAgencyXref) {
		return true
	}

	return false
}

// SetCityTaxAgencyXref gets a reference to the given string and assigns it to the CityTaxAgencyXref field.
func (o *GLExportCustomer) SetCityTaxAgencyXref(v string) {
	o.CityTaxAgencyXref = &v
}

// GetCountryTaxAgencyXref returns the CountryTaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCountryTaxAgencyXref() string {
	if o == nil || IsNil(o.CountryTaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.CountryTaxAgencyXref
}

// GetCountryTaxAgencyXrefOk returns a tuple with the CountryTaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCountryTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountryTaxAgencyXref) {
		return nil, false
	}
	return o.CountryTaxAgencyXref, true
}

// HasCountryTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCountryTaxAgencyXref() bool {
	if o != nil && !IsNil(o.CountryTaxAgencyXref) {
		return true
	}

	return false
}

// SetCountryTaxAgencyXref gets a reference to the given string and assigns it to the CountryTaxAgencyXref field.
func (o *GLExportCustomer) SetCountryTaxAgencyXref(v string) {
	o.CountryTaxAgencyXref = &v
}

// GetCompositeTaxAgencyXref returns the CompositeTaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportCustomer) GetCompositeTaxAgencyXref() string {
	if o == nil || IsNil(o.CompositeTaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.CompositeTaxAgencyXref
}

// GetCompositeTaxAgencyXrefOk returns a tuple with the CompositeTaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetCompositeTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeTaxAgencyXref) {
		return nil, false
	}
	return o.CompositeTaxAgencyXref, true
}

// HasCompositeTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportCustomer) HasCompositeTaxAgencyXref() bool {
	if o != nil && !IsNil(o.CompositeTaxAgencyXref) {
		return true
	}

	return false
}

// SetCompositeTaxAgencyXref gets a reference to the given string and assigns it to the CompositeTaxAgencyXref field.
func (o *GLExportCustomer) SetCompositeTaxAgencyXref(v string) {
	o.CompositeTaxAgencyXref = &v
}

// GetTaxLevels returns the TaxLevels field value if set, zero value otherwise.
func (o *GLExportCustomer) GetTaxLevels() []GLExportCustomerTaxLevel {
	if o == nil || IsNil(o.TaxLevels) {
		var ret []GLExportCustomerTaxLevel
		return ret
	}
	return o.TaxLevels
}

// GetTaxLevelsOk returns a tuple with the TaxLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportCustomer) GetTaxLevelsOk() ([]GLExportCustomerTaxLevel, bool) {
	if o == nil || IsNil(o.TaxLevels) {
		return nil, false
	}
	return o.TaxLevels, true
}

// HasTaxLevels returns a boolean if a field has been set.
func (o *GLExportCustomer) HasTaxLevels() bool {
	if o != nil && !IsNil(o.TaxLevels) {
		return true
	}

	return false
}

// SetTaxLevels gets a reference to the given []GLExportCustomerTaxLevel and assigns it to the TaxLevels field.
func (o *GLExportCustomer) SetTaxLevels(v []GLExportCustomerTaxLevel) {
	o.TaxLevels = v
}

func (o GLExportCustomer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportCustomer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CompanyType) {
		toSerialize["companyType"] = o.CompanyType
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.BillingTermsXref) {
		toSerialize["billingTermsXref"] = o.BillingTermsXref
	}
	if o.DueDays.IsSet() {
		toSerialize["dueDays"] = o.DueDays.Get()
	}
	if o.Taxable.IsSet() {
		toSerialize["taxable"] = o.Taxable.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.StateTaxXref) {
		toSerialize["stateTaxXref"] = o.StateTaxXref
	}
	if !IsNil(o.CountyTaxXref) {
		toSerialize["countyTaxXref"] = o.CountyTaxXref
	}
	if !IsNil(o.CityTaxXref) {
		toSerialize["cityTaxXref"] = o.CityTaxXref
	}
	if !IsNil(o.CountryTaxXref) {
		toSerialize["countryTaxXref"] = o.CountryTaxXref
	}
	if !IsNil(o.CompositeTaxXref) {
		toSerialize["compositeTaxXref"] = o.CompositeTaxXref
	}
	if o.StateTaxRate.IsSet() {
		toSerialize["stateTaxRate"] = o.StateTaxRate.Get()
	}
	if o.CountyTaxRate.IsSet() {
		toSerialize["countyTaxRate"] = o.CountyTaxRate.Get()
	}
	if o.CityTaxRate.IsSet() {
		toSerialize["cityTaxRate"] = o.CityTaxRate.Get()
	}
	if o.CountryTaxRate.IsSet() {
		toSerialize["countryTaxRate"] = o.CountryTaxRate.Get()
	}
	if o.CompositeTaxRate.IsSet() {
		toSerialize["compositeTaxRate"] = o.CompositeTaxRate.Get()
	}
	if o.TaxGroupRate.IsSet() {
		toSerialize["taxGroupRate"] = o.TaxGroupRate.Get()
	}
	if !IsNil(o.TaxAgencyXref) {
		toSerialize["taxAgencyXref"] = o.TaxAgencyXref
	}
	if !IsNil(o.StateTaxAgencyXref) {
		toSerialize["stateTaxAgencyXref"] = o.StateTaxAgencyXref
	}
	if !IsNil(o.CountyTaxAgencyXref) {
		toSerialize["countyTaxAgencyXref"] = o.CountyTaxAgencyXref
	}
	if !IsNil(o.CityTaxAgencyXref) {
		toSerialize["cityTaxAgencyXref"] = o.CityTaxAgencyXref
	}
	if !IsNil(o.CountryTaxAgencyXref) {
		toSerialize["countryTaxAgencyXref"] = o.CountryTaxAgencyXref
	}
	if !IsNil(o.CompositeTaxAgencyXref) {
		toSerialize["compositeTaxAgencyXref"] = o.CompositeTaxAgencyXref
	}
	if !IsNil(o.TaxLevels) {
		toSerialize["taxLevels"] = o.TaxLevels
	}
	return toSerialize, nil
}

type NullableGLExportCustomer struct {
	value *GLExportCustomer
	isSet bool
}

func (v NullableGLExportCustomer) Get() *GLExportCustomer {
	return v.value
}

func (v *NullableGLExportCustomer) Set(val *GLExportCustomer) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportCustomer) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportCustomer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportCustomer(val *GLExportCustomer) *NullableGLExportCustomer {
	return &NullableGLExportCustomer{value: val, isSet: true}
}

func (v NullableGLExportCustomer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportCustomer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


