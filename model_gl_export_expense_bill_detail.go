/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportExpenseBillDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportExpenseBillDetail{}

// GLExportExpenseBillDetail struct for GLExportExpenseBillDetail
type GLExportExpenseBillDetail struct {
	Id []int32 `json:"id,omitempty"`
	DocumentDate *string `json:"documentDate,omitempty"`
	GlTypeId *string `json:"glTypeId,omitempty"`
	Memo *string `json:"memo,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	ExpenseClass *ClassificationReference `json:"expenseClass,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	Billable NullableBool `json:"billable,omitempty"`
	Reimbursable NullableBool `json:"reimbursable,omitempty"`
	CompanyAdvance NullableBool `json:"companyAdvance,omitempty"`
}

// NewGLExportExpenseBillDetail instantiates a new GLExportExpenseBillDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportExpenseBillDetail() *GLExportExpenseBillDetail {
	this := GLExportExpenseBillDetail{}
	return &this
}

// NewGLExportExpenseBillDetailWithDefaults instantiates a new GLExportExpenseBillDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportExpenseBillDetailWithDefaults() *GLExportExpenseBillDetail {
	this := GLExportExpenseBillDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetId() []int32 {
	if o == nil || IsNil(o.Id) {
		var ret []int32
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetIdOk() ([]int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given []int32 and assigns it to the Id field.
func (o *GLExportExpenseBillDetail) SetId(v []int32) {
	o.Id = v
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportExpenseBillDetail) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetGlTypeId returns the GlTypeId field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetGlTypeId() string {
	if o == nil || IsNil(o.GlTypeId) {
		var ret string
		return ret
	}
	return *o.GlTypeId
}

// GetGlTypeIdOk returns a tuple with the GlTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetGlTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlTypeId) {
		return nil, false
	}
	return o.GlTypeId, true
}

// HasGlTypeId returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasGlTypeId() bool {
	if o != nil && !IsNil(o.GlTypeId) {
		return true
	}

	return false
}

// SetGlTypeId gets a reference to the given string and assigns it to the GlTypeId field.
func (o *GLExportExpenseBillDetail) SetGlTypeId(v string) {
	o.GlTypeId = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportExpenseBillDetail) SetMemo(v string) {
	o.Memo = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *GLExportExpenseBillDetail) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportExpenseBillDetail) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetExpenseClass returns the ExpenseClass field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetExpenseClass() ClassificationReference {
	if o == nil || IsNil(o.ExpenseClass) {
		var ret ClassificationReference
		return ret
	}
	return *o.ExpenseClass
}

// GetExpenseClassOk returns a tuple with the ExpenseClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetExpenseClassOk() (*ClassificationReference, bool) {
	if o == nil || IsNil(o.ExpenseClass) {
		return nil, false
	}
	return o.ExpenseClass, true
}

// HasExpenseClass returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasExpenseClass() bool {
	if o != nil && !IsNil(o.ExpenseClass) {
		return true
	}

	return false
}

// SetExpenseClass gets a reference to the given ClassificationReference and assigns it to the ExpenseClass field.
func (o *GLExportExpenseBillDetail) SetExpenseClass(v ClassificationReference) {
	o.ExpenseClass = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportExpenseBillDetail) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportExpenseBillDetail) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportExpenseBillDetail) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportExpenseBillDetail) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportExpenseBillDetail) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportExpenseBillDetail) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportExpenseBillDetail) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportExpenseBillDetail) UnsetTotal() {
	o.Total.Unset()
}

// GetBillable returns the Billable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportExpenseBillDetail) GetBillable() bool {
	if o == nil || IsNil(o.Billable.Get()) {
		var ret bool
		return ret
	}
	return *o.Billable.Get()
}

// GetBillableOk returns a tuple with the Billable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportExpenseBillDetail) GetBillableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Billable.Get(), o.Billable.IsSet()
}

// HasBillable returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasBillable() bool {
	if o != nil && o.Billable.IsSet() {
		return true
	}

	return false
}

// SetBillable gets a reference to the given NullableBool and assigns it to the Billable field.
func (o *GLExportExpenseBillDetail) SetBillable(v bool) {
	o.Billable.Set(&v)
}
// SetBillableNil sets the value for Billable to be an explicit nil
func (o *GLExportExpenseBillDetail) SetBillableNil() {
	o.Billable.Set(nil)
}

// UnsetBillable ensures that no value is present for Billable, not even an explicit nil
func (o *GLExportExpenseBillDetail) UnsetBillable() {
	o.Billable.Unset()
}

// GetReimbursable returns the Reimbursable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportExpenseBillDetail) GetReimbursable() bool {
	if o == nil || IsNil(o.Reimbursable.Get()) {
		var ret bool
		return ret
	}
	return *o.Reimbursable.Get()
}

// GetReimbursableOk returns a tuple with the Reimbursable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportExpenseBillDetail) GetReimbursableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reimbursable.Get(), o.Reimbursable.IsSet()
}

// HasReimbursable returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasReimbursable() bool {
	if o != nil && o.Reimbursable.IsSet() {
		return true
	}

	return false
}

// SetReimbursable gets a reference to the given NullableBool and assigns it to the Reimbursable field.
func (o *GLExportExpenseBillDetail) SetReimbursable(v bool) {
	o.Reimbursable.Set(&v)
}
// SetReimbursableNil sets the value for Reimbursable to be an explicit nil
func (o *GLExportExpenseBillDetail) SetReimbursableNil() {
	o.Reimbursable.Set(nil)
}

// UnsetReimbursable ensures that no value is present for Reimbursable, not even an explicit nil
func (o *GLExportExpenseBillDetail) UnsetReimbursable() {
	o.Reimbursable.Unset()
}

// GetCompanyAdvance returns the CompanyAdvance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportExpenseBillDetail) GetCompanyAdvance() bool {
	if o == nil || IsNil(o.CompanyAdvance.Get()) {
		var ret bool
		return ret
	}
	return *o.CompanyAdvance.Get()
}

// GetCompanyAdvanceOk returns a tuple with the CompanyAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportExpenseBillDetail) GetCompanyAdvanceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyAdvance.Get(), o.CompanyAdvance.IsSet()
}

// HasCompanyAdvance returns a boolean if a field has been set.
func (o *GLExportExpenseBillDetail) HasCompanyAdvance() bool {
	if o != nil && o.CompanyAdvance.IsSet() {
		return true
	}

	return false
}

// SetCompanyAdvance gets a reference to the given NullableBool and assigns it to the CompanyAdvance field.
func (o *GLExportExpenseBillDetail) SetCompanyAdvance(v bool) {
	o.CompanyAdvance.Set(&v)
}
// SetCompanyAdvanceNil sets the value for CompanyAdvance to be an explicit nil
func (o *GLExportExpenseBillDetail) SetCompanyAdvanceNil() {
	o.CompanyAdvance.Set(nil)
}

// UnsetCompanyAdvance ensures that no value is present for CompanyAdvance, not even an explicit nil
func (o *GLExportExpenseBillDetail) UnsetCompanyAdvance() {
	o.CompanyAdvance.Unset()
}

func (o GLExportExpenseBillDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportExpenseBillDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.GlTypeId) {
		toSerialize["glTypeId"] = o.GlTypeId
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.ExpenseClass) {
		toSerialize["expenseClass"] = o.ExpenseClass
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.Billable.IsSet() {
		toSerialize["billable"] = o.Billable.Get()
	}
	if o.Reimbursable.IsSet() {
		toSerialize["reimbursable"] = o.Reimbursable.Get()
	}
	if o.CompanyAdvance.IsSet() {
		toSerialize["companyAdvance"] = o.CompanyAdvance.Get()
	}
	return toSerialize, nil
}

type NullableGLExportExpenseBillDetail struct {
	value *GLExportExpenseBillDetail
	isSet bool
}

func (v NullableGLExportExpenseBillDetail) Get() *GLExportExpenseBillDetail {
	return v.value
}

func (v *NullableGLExportExpenseBillDetail) Set(val *GLExportExpenseBillDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportExpenseBillDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportExpenseBillDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportExpenseBillDetail(val *GLExportExpenseBillDetail) *NullableGLExportExpenseBillDetail {
	return &NullableGLExportExpenseBillDetail{value: val, isSet: true}
}

func (v NullableGLExportExpenseBillDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportExpenseBillDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


