/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportInventoryTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportInventoryTransfer{}

// GLExportInventoryTransfer struct for GLExportInventoryTransfer
type GLExportInventoryTransfer struct {
	Id *string `json:"id,omitempty"`
	DocumentType *string `json:"documentType,omitempty"`
	DocumentDate *string `json:"documentDate,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	GlClass *string `json:"glClass,omitempty"`
	GlTypeId *string `json:"glTypeId,omitempty"`
	Description *string `json:"description,omitempty"`
	SalesCode *string `json:"salesCode,omitempty"`
	Memo *string `json:"memo,omitempty"`
	CostAccountNumber *string `json:"costAccountNumber,omitempty"`
	InventoryAccountNumber *string `json:"inventoryAccountNumber,omitempty"`
	TransferId NullableInt32 `json:"transferId,omitempty"`
	Item *IvItemReference `json:"item,omitempty"`
	GlItemId *string `json:"glItemId,omitempty"`
	SalesDescription *string `json:"salesDescription,omitempty"`
	ItemDescription *string `json:"itemDescription,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	ItemPrice NullableFloat64 `json:"itemPrice,omitempty"`
	Taxable NullableBool `json:"taxable,omitempty"`
	UnitOfMeasure *UnitOfMeasureReference `json:"unitOfMeasure,omitempty"`
	Quantity NullableFloat64 `json:"quantity,omitempty"`
	Cost NullableFloat64 `json:"cost,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	SubCategory *ProductSubCategoryReference `json:"subCategory,omitempty"`
	SerializedFlag NullableBool `json:"serializedFlag,omitempty"`
	SerialNumbers *string `json:"serialNumbers,omitempty"`
	Bin *WarehouseBinReference `json:"bin,omitempty"`
	Warehouse *WarehouseReference `json:"warehouse,omitempty"`
	TransferFromBin *WarehouseBinReference `json:"transferFromBin,omitempty"`
	TransferFromLocationXref *string `json:"transferFromLocationXref,omitempty"`
	TransferToBin *WarehouseBinReference `json:"transferToBin,omitempty"`
	TransferToLocationXref *string `json:"transferToLocationXref,omitempty"`
	LocationXref *string `json:"locationXref,omitempty"`
	PriceLevelXref *string `json:"priceLevelXref,omitempty"`
	UomScheduleXref *string `json:"uomScheduleXref,omitempty"`
	ItemTypeXref *string `json:"itemTypeXref,omitempty"`
	InventoryXref *string `json:"inventoryXref,omitempty"`
	CogsXref *string `json:"cogsXref,omitempty"`
	TaxNote *string `json:"taxNote,omitempty"`
	Offset *GLExportInventoryTransferOffset `json:"offset,omitempty"`
}

// NewGLExportInventoryTransfer instantiates a new GLExportInventoryTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportInventoryTransfer() *GLExportInventoryTransfer {
	this := GLExportInventoryTransfer{}
	return &this
}

// NewGLExportInventoryTransferWithDefaults instantiates a new GLExportInventoryTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportInventoryTransferWithDefaults() *GLExportInventoryTransfer {
	this := GLExportInventoryTransfer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GLExportInventoryTransfer) SetId(v string) {
	o.Id = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetDocumentType() string {
	if o == nil || IsNil(o.DocumentType) {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetDocumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *GLExportInventoryTransfer) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportInventoryTransfer) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportInventoryTransfer) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetGlClass returns the GlClass field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetGlClass() string {
	if o == nil || IsNil(o.GlClass) {
		var ret string
		return ret
	}
	return *o.GlClass
}

// GetGlClassOk returns a tuple with the GlClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetGlClassOk() (*string, bool) {
	if o == nil || IsNil(o.GlClass) {
		return nil, false
	}
	return o.GlClass, true
}

// HasGlClass returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasGlClass() bool {
	if o != nil && !IsNil(o.GlClass) {
		return true
	}

	return false
}

// SetGlClass gets a reference to the given string and assigns it to the GlClass field.
func (o *GLExportInventoryTransfer) SetGlClass(v string) {
	o.GlClass = &v
}

// GetGlTypeId returns the GlTypeId field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetGlTypeId() string {
	if o == nil || IsNil(o.GlTypeId) {
		var ret string
		return ret
	}
	return *o.GlTypeId
}

// GetGlTypeIdOk returns a tuple with the GlTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetGlTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlTypeId) {
		return nil, false
	}
	return o.GlTypeId, true
}

// HasGlTypeId returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasGlTypeId() bool {
	if o != nil && !IsNil(o.GlTypeId) {
		return true
	}

	return false
}

// SetGlTypeId gets a reference to the given string and assigns it to the GlTypeId field.
func (o *GLExportInventoryTransfer) SetGlTypeId(v string) {
	o.GlTypeId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GLExportInventoryTransfer) SetDescription(v string) {
	o.Description = &v
}

// GetSalesCode returns the SalesCode field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetSalesCode() string {
	if o == nil || IsNil(o.SalesCode) {
		var ret string
		return ret
	}
	return *o.SalesCode
}

// GetSalesCodeOk returns a tuple with the SalesCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetSalesCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalesCode) {
		return nil, false
	}
	return o.SalesCode, true
}

// HasSalesCode returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasSalesCode() bool {
	if o != nil && !IsNil(o.SalesCode) {
		return true
	}

	return false
}

// SetSalesCode gets a reference to the given string and assigns it to the SalesCode field.
func (o *GLExportInventoryTransfer) SetSalesCode(v string) {
	o.SalesCode = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportInventoryTransfer) SetMemo(v string) {
	o.Memo = &v
}

// GetCostAccountNumber returns the CostAccountNumber field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetCostAccountNumber() string {
	if o == nil || IsNil(o.CostAccountNumber) {
		var ret string
		return ret
	}
	return *o.CostAccountNumber
}

// GetCostAccountNumberOk returns a tuple with the CostAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetCostAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CostAccountNumber) {
		return nil, false
	}
	return o.CostAccountNumber, true
}

// HasCostAccountNumber returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasCostAccountNumber() bool {
	if o != nil && !IsNil(o.CostAccountNumber) {
		return true
	}

	return false
}

// SetCostAccountNumber gets a reference to the given string and assigns it to the CostAccountNumber field.
func (o *GLExportInventoryTransfer) SetCostAccountNumber(v string) {
	o.CostAccountNumber = &v
}

// GetInventoryAccountNumber returns the InventoryAccountNumber field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetInventoryAccountNumber() string {
	if o == nil || IsNil(o.InventoryAccountNumber) {
		var ret string
		return ret
	}
	return *o.InventoryAccountNumber
}

// GetInventoryAccountNumberOk returns a tuple with the InventoryAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetInventoryAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryAccountNumber) {
		return nil, false
	}
	return o.InventoryAccountNumber, true
}

// HasInventoryAccountNumber returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasInventoryAccountNumber() bool {
	if o != nil && !IsNil(o.InventoryAccountNumber) {
		return true
	}

	return false
}

// SetInventoryAccountNumber gets a reference to the given string and assigns it to the InventoryAccountNumber field.
func (o *GLExportInventoryTransfer) SetInventoryAccountNumber(v string) {
	o.InventoryAccountNumber = &v
}

// GetTransferId returns the TransferId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetTransferId() int32 {
	if o == nil || IsNil(o.TransferId.Get()) {
		var ret int32
		return ret
	}
	return *o.TransferId.Get()
}

// GetTransferIdOk returns a tuple with the TransferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetTransferIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransferId.Get(), o.TransferId.IsSet()
}

// HasTransferId returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTransferId() bool {
	if o != nil && o.TransferId.IsSet() {
		return true
	}

	return false
}

// SetTransferId gets a reference to the given NullableInt32 and assigns it to the TransferId field.
func (o *GLExportInventoryTransfer) SetTransferId(v int32) {
	o.TransferId.Set(&v)
}
// SetTransferIdNil sets the value for TransferId to be an explicit nil
func (o *GLExportInventoryTransfer) SetTransferIdNil() {
	o.TransferId.Set(nil)
}

// UnsetTransferId ensures that no value is present for TransferId, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetTransferId() {
	o.TransferId.Unset()
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetItem() IvItemReference {
	if o == nil || IsNil(o.Item) {
		var ret IvItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetItemOk() (*IvItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given IvItemReference and assigns it to the Item field.
func (o *GLExportInventoryTransfer) SetItem(v IvItemReference) {
	o.Item = &v
}

// GetGlItemId returns the GlItemId field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetGlItemId() string {
	if o == nil || IsNil(o.GlItemId) {
		var ret string
		return ret
	}
	return *o.GlItemId
}

// GetGlItemIdOk returns a tuple with the GlItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetGlItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlItemId) {
		return nil, false
	}
	return o.GlItemId, true
}

// HasGlItemId returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasGlItemId() bool {
	if o != nil && !IsNil(o.GlItemId) {
		return true
	}

	return false
}

// SetGlItemId gets a reference to the given string and assigns it to the GlItemId field.
func (o *GLExportInventoryTransfer) SetGlItemId(v string) {
	o.GlItemId = &v
}

// GetSalesDescription returns the SalesDescription field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetSalesDescription() string {
	if o == nil || IsNil(o.SalesDescription) {
		var ret string
		return ret
	}
	return *o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetSalesDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesDescription) {
		return nil, false
	}
	return o.SalesDescription, true
}

// HasSalesDescription returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasSalesDescription() bool {
	if o != nil && !IsNil(o.SalesDescription) {
		return true
	}

	return false
}

// SetSalesDescription gets a reference to the given string and assigns it to the SalesDescription field.
func (o *GLExportInventoryTransfer) SetSalesDescription(v string) {
	o.SalesDescription = &v
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetItemDescription() string {
	if o == nil || IsNil(o.ItemDescription) {
		var ret string
		return ret
	}
	return *o.ItemDescription
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDescription) {
		return nil, false
	}
	return o.ItemDescription, true
}

// HasItemDescription returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasItemDescription() bool {
	if o != nil && !IsNil(o.ItemDescription) {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given string and assigns it to the ItemDescription field.
func (o *GLExportInventoryTransfer) SetItemDescription(v string) {
	o.ItemDescription = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportInventoryTransfer) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetItemPrice returns the ItemPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetItemPrice() float64 {
	if o == nil || IsNil(o.ItemPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ItemPrice.Get()
}

// GetItemPriceOk returns a tuple with the ItemPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetItemPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemPrice.Get(), o.ItemPrice.IsSet()
}

// HasItemPrice returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasItemPrice() bool {
	if o != nil && o.ItemPrice.IsSet() {
		return true
	}

	return false
}

// SetItemPrice gets a reference to the given NullableFloat64 and assigns it to the ItemPrice field.
func (o *GLExportInventoryTransfer) SetItemPrice(v float64) {
	o.ItemPrice.Set(&v)
}
// SetItemPriceNil sets the value for ItemPrice to be an explicit nil
func (o *GLExportInventoryTransfer) SetItemPriceNil() {
	o.ItemPrice.Set(nil)
}

// UnsetItemPrice ensures that no value is present for ItemPrice, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetItemPrice() {
	o.ItemPrice.Unset()
}

// GetTaxable returns the Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable.Get()
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetTaxableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable.Get(), o.Taxable.IsSet()
}

// HasTaxable returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTaxable() bool {
	if o != nil && o.Taxable.IsSet() {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given NullableBool and assigns it to the Taxable field.
func (o *GLExportInventoryTransfer) SetTaxable(v bool) {
	o.Taxable.Set(&v)
}
// SetTaxableNil sets the value for Taxable to be an explicit nil
func (o *GLExportInventoryTransfer) SetTaxableNil() {
	o.Taxable.Set(nil)
}

// UnsetTaxable ensures that no value is present for Taxable, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetTaxable() {
	o.Taxable.Unset()
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetUnitOfMeasure() UnitOfMeasureReference {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret UnitOfMeasureReference
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetUnitOfMeasureOk() (*UnitOfMeasureReference, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given UnitOfMeasureReference and assigns it to the UnitOfMeasure field.
func (o *GLExportInventoryTransfer) SetUnitOfMeasure(v UnitOfMeasureReference) {
	o.UnitOfMeasure = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float64
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat64 and assigns it to the Quantity field.
func (o *GLExportInventoryTransfer) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *GLExportInventoryTransfer) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *GLExportInventoryTransfer) SetCost(v float64) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *GLExportInventoryTransfer) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetCost() {
	o.Cost.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportInventoryTransfer) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportInventoryTransfer) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetTotal() {
	o.Total.Unset()
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetSubCategory() ProductSubCategoryReference {
	if o == nil || IsNil(o.SubCategory) {
		var ret ProductSubCategoryReference
		return ret
	}
	return *o.SubCategory
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetSubCategoryOk() (*ProductSubCategoryReference, bool) {
	if o == nil || IsNil(o.SubCategory) {
		return nil, false
	}
	return o.SubCategory, true
}

// HasSubCategory returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasSubCategory() bool {
	if o != nil && !IsNil(o.SubCategory) {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given ProductSubCategoryReference and assigns it to the SubCategory field.
func (o *GLExportInventoryTransfer) SetSubCategory(v ProductSubCategoryReference) {
	o.SubCategory = &v
}

// GetSerializedFlag returns the SerializedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportInventoryTransfer) GetSerializedFlag() bool {
	if o == nil || IsNil(o.SerializedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SerializedFlag.Get()
}

// GetSerializedFlagOk returns a tuple with the SerializedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportInventoryTransfer) GetSerializedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerializedFlag.Get(), o.SerializedFlag.IsSet()
}

// HasSerializedFlag returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasSerializedFlag() bool {
	if o != nil && o.SerializedFlag.IsSet() {
		return true
	}

	return false
}

// SetSerializedFlag gets a reference to the given NullableBool and assigns it to the SerializedFlag field.
func (o *GLExportInventoryTransfer) SetSerializedFlag(v bool) {
	o.SerializedFlag.Set(&v)
}
// SetSerializedFlagNil sets the value for SerializedFlag to be an explicit nil
func (o *GLExportInventoryTransfer) SetSerializedFlagNil() {
	o.SerializedFlag.Set(nil)
}

// UnsetSerializedFlag ensures that no value is present for SerializedFlag, not even an explicit nil
func (o *GLExportInventoryTransfer) UnsetSerializedFlag() {
	o.SerializedFlag.Unset()
}

// GetSerialNumbers returns the SerialNumbers field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetSerialNumbers() string {
	if o == nil || IsNil(o.SerialNumbers) {
		var ret string
		return ret
	}
	return *o.SerialNumbers
}

// GetSerialNumbersOk returns a tuple with the SerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetSerialNumbersOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumbers) {
		return nil, false
	}
	return o.SerialNumbers, true
}

// HasSerialNumbers returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasSerialNumbers() bool {
	if o != nil && !IsNil(o.SerialNumbers) {
		return true
	}

	return false
}

// SetSerialNumbers gets a reference to the given string and assigns it to the SerialNumbers field.
func (o *GLExportInventoryTransfer) SetSerialNumbers(v string) {
	o.SerialNumbers = &v
}

// GetBin returns the Bin field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetBin() WarehouseBinReference {
	if o == nil || IsNil(o.Bin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.Bin
}

// GetBinOk returns a tuple with the Bin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.Bin) {
		return nil, false
	}
	return o.Bin, true
}

// HasBin returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasBin() bool {
	if o != nil && !IsNil(o.Bin) {
		return true
	}

	return false
}

// SetBin gets a reference to the given WarehouseBinReference and assigns it to the Bin field.
func (o *GLExportInventoryTransfer) SetBin(v WarehouseBinReference) {
	o.Bin = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetWarehouse() WarehouseReference {
	if o == nil || IsNil(o.Warehouse) {
		var ret WarehouseReference
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given WarehouseReference and assigns it to the Warehouse field.
func (o *GLExportInventoryTransfer) SetWarehouse(v WarehouseReference) {
	o.Warehouse = &v
}

// GetTransferFromBin returns the TransferFromBin field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetTransferFromBin() WarehouseBinReference {
	if o == nil || IsNil(o.TransferFromBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.TransferFromBin
}

// GetTransferFromBinOk returns a tuple with the TransferFromBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetTransferFromBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.TransferFromBin) {
		return nil, false
	}
	return o.TransferFromBin, true
}

// HasTransferFromBin returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTransferFromBin() bool {
	if o != nil && !IsNil(o.TransferFromBin) {
		return true
	}

	return false
}

// SetTransferFromBin gets a reference to the given WarehouseBinReference and assigns it to the TransferFromBin field.
func (o *GLExportInventoryTransfer) SetTransferFromBin(v WarehouseBinReference) {
	o.TransferFromBin = &v
}

// GetTransferFromLocationXref returns the TransferFromLocationXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetTransferFromLocationXref() string {
	if o == nil || IsNil(o.TransferFromLocationXref) {
		var ret string
		return ret
	}
	return *o.TransferFromLocationXref
}

// GetTransferFromLocationXrefOk returns a tuple with the TransferFromLocationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetTransferFromLocationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TransferFromLocationXref) {
		return nil, false
	}
	return o.TransferFromLocationXref, true
}

// HasTransferFromLocationXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTransferFromLocationXref() bool {
	if o != nil && !IsNil(o.TransferFromLocationXref) {
		return true
	}

	return false
}

// SetTransferFromLocationXref gets a reference to the given string and assigns it to the TransferFromLocationXref field.
func (o *GLExportInventoryTransfer) SetTransferFromLocationXref(v string) {
	o.TransferFromLocationXref = &v
}

// GetTransferToBin returns the TransferToBin field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetTransferToBin() WarehouseBinReference {
	if o == nil || IsNil(o.TransferToBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.TransferToBin
}

// GetTransferToBinOk returns a tuple with the TransferToBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetTransferToBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.TransferToBin) {
		return nil, false
	}
	return o.TransferToBin, true
}

// HasTransferToBin returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTransferToBin() bool {
	if o != nil && !IsNil(o.TransferToBin) {
		return true
	}

	return false
}

// SetTransferToBin gets a reference to the given WarehouseBinReference and assigns it to the TransferToBin field.
func (o *GLExportInventoryTransfer) SetTransferToBin(v WarehouseBinReference) {
	o.TransferToBin = &v
}

// GetTransferToLocationXref returns the TransferToLocationXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetTransferToLocationXref() string {
	if o == nil || IsNil(o.TransferToLocationXref) {
		var ret string
		return ret
	}
	return *o.TransferToLocationXref
}

// GetTransferToLocationXrefOk returns a tuple with the TransferToLocationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetTransferToLocationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TransferToLocationXref) {
		return nil, false
	}
	return o.TransferToLocationXref, true
}

// HasTransferToLocationXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTransferToLocationXref() bool {
	if o != nil && !IsNil(o.TransferToLocationXref) {
		return true
	}

	return false
}

// SetTransferToLocationXref gets a reference to the given string and assigns it to the TransferToLocationXref field.
func (o *GLExportInventoryTransfer) SetTransferToLocationXref(v string) {
	o.TransferToLocationXref = &v
}

// GetLocationXref returns the LocationXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetLocationXref() string {
	if o == nil || IsNil(o.LocationXref) {
		var ret string
		return ret
	}
	return *o.LocationXref
}

// GetLocationXrefOk returns a tuple with the LocationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetLocationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LocationXref) {
		return nil, false
	}
	return o.LocationXref, true
}

// HasLocationXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasLocationXref() bool {
	if o != nil && !IsNil(o.LocationXref) {
		return true
	}

	return false
}

// SetLocationXref gets a reference to the given string and assigns it to the LocationXref field.
func (o *GLExportInventoryTransfer) SetLocationXref(v string) {
	o.LocationXref = &v
}

// GetPriceLevelXref returns the PriceLevelXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetPriceLevelXref() string {
	if o == nil || IsNil(o.PriceLevelXref) {
		var ret string
		return ret
	}
	return *o.PriceLevelXref
}

// GetPriceLevelXrefOk returns a tuple with the PriceLevelXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetPriceLevelXrefOk() (*string, bool) {
	if o == nil || IsNil(o.PriceLevelXref) {
		return nil, false
	}
	return o.PriceLevelXref, true
}

// HasPriceLevelXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasPriceLevelXref() bool {
	if o != nil && !IsNil(o.PriceLevelXref) {
		return true
	}

	return false
}

// SetPriceLevelXref gets a reference to the given string and assigns it to the PriceLevelXref field.
func (o *GLExportInventoryTransfer) SetPriceLevelXref(v string) {
	o.PriceLevelXref = &v
}

// GetUomScheduleXref returns the UomScheduleXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetUomScheduleXref() string {
	if o == nil || IsNil(o.UomScheduleXref) {
		var ret string
		return ret
	}
	return *o.UomScheduleXref
}

// GetUomScheduleXrefOk returns a tuple with the UomScheduleXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetUomScheduleXrefOk() (*string, bool) {
	if o == nil || IsNil(o.UomScheduleXref) {
		return nil, false
	}
	return o.UomScheduleXref, true
}

// HasUomScheduleXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasUomScheduleXref() bool {
	if o != nil && !IsNil(o.UomScheduleXref) {
		return true
	}

	return false
}

// SetUomScheduleXref gets a reference to the given string and assigns it to the UomScheduleXref field.
func (o *GLExportInventoryTransfer) SetUomScheduleXref(v string) {
	o.UomScheduleXref = &v
}

// GetItemTypeXref returns the ItemTypeXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetItemTypeXref() string {
	if o == nil || IsNil(o.ItemTypeXref) {
		var ret string
		return ret
	}
	return *o.ItemTypeXref
}

// GetItemTypeXrefOk returns a tuple with the ItemTypeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetItemTypeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.ItemTypeXref) {
		return nil, false
	}
	return o.ItemTypeXref, true
}

// HasItemTypeXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasItemTypeXref() bool {
	if o != nil && !IsNil(o.ItemTypeXref) {
		return true
	}

	return false
}

// SetItemTypeXref gets a reference to the given string and assigns it to the ItemTypeXref field.
func (o *GLExportInventoryTransfer) SetItemTypeXref(v string) {
	o.ItemTypeXref = &v
}

// GetInventoryXref returns the InventoryXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetInventoryXref() string {
	if o == nil || IsNil(o.InventoryXref) {
		var ret string
		return ret
	}
	return *o.InventoryXref
}

// GetInventoryXrefOk returns a tuple with the InventoryXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetInventoryXrefOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryXref) {
		return nil, false
	}
	return o.InventoryXref, true
}

// HasInventoryXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasInventoryXref() bool {
	if o != nil && !IsNil(o.InventoryXref) {
		return true
	}

	return false
}

// SetInventoryXref gets a reference to the given string and assigns it to the InventoryXref field.
func (o *GLExportInventoryTransfer) SetInventoryXref(v string) {
	o.InventoryXref = &v
}

// GetCogsXref returns the CogsXref field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetCogsXref() string {
	if o == nil || IsNil(o.CogsXref) {
		var ret string
		return ret
	}
	return *o.CogsXref
}

// GetCogsXrefOk returns a tuple with the CogsXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetCogsXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CogsXref) {
		return nil, false
	}
	return o.CogsXref, true
}

// HasCogsXref returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasCogsXref() bool {
	if o != nil && !IsNil(o.CogsXref) {
		return true
	}

	return false
}

// SetCogsXref gets a reference to the given string and assigns it to the CogsXref field.
func (o *GLExportInventoryTransfer) SetCogsXref(v string) {
	o.CogsXref = &v
}

// GetTaxNote returns the TaxNote field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetTaxNote() string {
	if o == nil || IsNil(o.TaxNote) {
		var ret string
		return ret
	}
	return *o.TaxNote
}

// GetTaxNoteOk returns a tuple with the TaxNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetTaxNoteOk() (*string, bool) {
	if o == nil || IsNil(o.TaxNote) {
		return nil, false
	}
	return o.TaxNote, true
}

// HasTaxNote returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasTaxNote() bool {
	if o != nil && !IsNil(o.TaxNote) {
		return true
	}

	return false
}

// SetTaxNote gets a reference to the given string and assigns it to the TaxNote field.
func (o *GLExportInventoryTransfer) SetTaxNote(v string) {
	o.TaxNote = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *GLExportInventoryTransfer) GetOffset() GLExportInventoryTransferOffset {
	if o == nil || IsNil(o.Offset) {
		var ret GLExportInventoryTransferOffset
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportInventoryTransfer) GetOffsetOk() (*GLExportInventoryTransferOffset, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *GLExportInventoryTransfer) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given GLExportInventoryTransferOffset and assigns it to the Offset field.
func (o *GLExportInventoryTransfer) SetOffset(v GLExportInventoryTransferOffset) {
	o.Offset = &v
}

func (o GLExportInventoryTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportInventoryTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DocumentType) {
		toSerialize["documentType"] = o.DocumentType
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.GlClass) {
		toSerialize["glClass"] = o.GlClass
	}
	if !IsNil(o.GlTypeId) {
		toSerialize["glTypeId"] = o.GlTypeId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SalesCode) {
		toSerialize["salesCode"] = o.SalesCode
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.CostAccountNumber) {
		toSerialize["costAccountNumber"] = o.CostAccountNumber
	}
	if !IsNil(o.InventoryAccountNumber) {
		toSerialize["inventoryAccountNumber"] = o.InventoryAccountNumber
	}
	if o.TransferId.IsSet() {
		toSerialize["transferId"] = o.TransferId.Get()
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.GlItemId) {
		toSerialize["glItemId"] = o.GlItemId
	}
	if !IsNil(o.SalesDescription) {
		toSerialize["salesDescription"] = o.SalesDescription
	}
	if !IsNil(o.ItemDescription) {
		toSerialize["itemDescription"] = o.ItemDescription
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.ItemPrice.IsSet() {
		toSerialize["itemPrice"] = o.ItemPrice.Get()
	}
	if o.Taxable.IsSet() {
		toSerialize["taxable"] = o.Taxable.Get()
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.SubCategory) {
		toSerialize["subCategory"] = o.SubCategory
	}
	if o.SerializedFlag.IsSet() {
		toSerialize["serializedFlag"] = o.SerializedFlag.Get()
	}
	if !IsNil(o.SerialNumbers) {
		toSerialize["serialNumbers"] = o.SerialNumbers
	}
	if !IsNil(o.Bin) {
		toSerialize["bin"] = o.Bin
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.TransferFromBin) {
		toSerialize["transferFromBin"] = o.TransferFromBin
	}
	if !IsNil(o.TransferFromLocationXref) {
		toSerialize["transferFromLocationXref"] = o.TransferFromLocationXref
	}
	if !IsNil(o.TransferToBin) {
		toSerialize["transferToBin"] = o.TransferToBin
	}
	if !IsNil(o.TransferToLocationXref) {
		toSerialize["transferToLocationXref"] = o.TransferToLocationXref
	}
	if !IsNil(o.LocationXref) {
		toSerialize["locationXref"] = o.LocationXref
	}
	if !IsNil(o.PriceLevelXref) {
		toSerialize["priceLevelXref"] = o.PriceLevelXref
	}
	if !IsNil(o.UomScheduleXref) {
		toSerialize["uomScheduleXref"] = o.UomScheduleXref
	}
	if !IsNil(o.ItemTypeXref) {
		toSerialize["itemTypeXref"] = o.ItemTypeXref
	}
	if !IsNil(o.InventoryXref) {
		toSerialize["inventoryXref"] = o.InventoryXref
	}
	if !IsNil(o.CogsXref) {
		toSerialize["cogsXref"] = o.CogsXref
	}
	if !IsNil(o.TaxNote) {
		toSerialize["taxNote"] = o.TaxNote
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableGLExportInventoryTransfer struct {
	value *GLExportInventoryTransfer
	isSet bool
}

func (v NullableGLExportInventoryTransfer) Get() *GLExportInventoryTransfer {
	return v.value
}

func (v *NullableGLExportInventoryTransfer) Set(val *GLExportInventoryTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportInventoryTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportInventoryTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportInventoryTransfer(val *GLExportInventoryTransfer) *NullableGLExportInventoryTransfer {
	return &NullableGLExportInventoryTransfer{value: val, isSet: true}
}

func (v NullableGLExportInventoryTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportInventoryTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


