/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportTransaction{}

// GLExportTransaction struct for GLExportTransaction
type GLExportTransaction struct {
	Id NullableInt32 `json:"id,omitempty"`
	GlClass *string `json:"glClass,omitempty"`
	GlTypeId *string `json:"glTypeId,omitempty"`
	DocumentDate *string `json:"documentDate,omitempty"`
	DocumentNumber *string `json:"documentNumber,omitempty"`
	DocumentType *string `json:"documentType,omitempty"`
	Memo *string `json:"memo,omitempty"`
	Description *string `json:"description,omitempty"`
	Attention *string `json:"attention,omitempty"`
	SalesTerritory *string `json:"salesTerritory,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	CompanyType *CompanyTypeReference `json:"companyType,omitempty"`
	CompanyAccountNumber *string `json:"companyAccountNumber,omitempty"`
	Site *SiteReference `json:"site,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	BillingTermsXref *string `json:"billingTermsXref,omitempty"`
	DueDays NullableInt32 `json:"dueDays,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	EmailDeliveryFlag NullableBool `json:"emailDeliveryFlag,omitempty"`
	PrintDeliveryFlag NullableBool `json:"printDeliveryFlag,omitempty"`
	AgreementPrePaymentFlag NullableBool `json:"agreementPrePaymentFlag,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	BillingType *string `json:"billingType,omitempty"`
	GlEntryIds *string `json:"glEntryIds,omitempty"`
	PurchaseOrder *PurchaseOrderReference `json:"purchaseOrder,omitempty"`
	Project *ProjectReference `json:"project,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	SalesRepId *string `json:"salesRepId,omitempty"`
	SalesRepName *string `json:"salesRepName,omitempty"`
	Taxable NullableBool `json:"taxable,omitempty"`
	TaxableTotal NullableFloat64 `json:"taxableTotal,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	TaxGroupRate NullableFloat64 `json:"taxGroupRate,omitempty"`
	PiggyBackFlag NullableBool `json:"piggyBackFlag,omitempty"`
	TaxAccountNumber *string `json:"taxAccountNumber,omitempty"`
	SalesTax NullableFloat64 `json:"salesTax,omitempty"`
	StateTax NullableFloat64 `json:"stateTax,omitempty"`
	CountyTax NullableFloat64 `json:"countyTax,omitempty"`
	CityTax NullableFloat64 `json:"cityTax,omitempty"`
	TaxableAmount1 NullableFloat64 `json:"taxableAmount1,omitempty"`
	TaxableAmount2 NullableFloat64 `json:"taxableAmount2,omitempty"`
	TaxableAmount3 NullableFloat64 `json:"taxableAmount3,omitempty"`
	TaxableAmount4 NullableFloat64 `json:"taxableAmount4,omitempty"`
	TaxableAmount5 NullableFloat64 `json:"taxableAmount5,omitempty"`
	TaxAgencyXref *string `json:"taxAgencyXref,omitempty"`
	StateTaxXref *string `json:"stateTaxXref,omitempty"`
	CountyTaxXref *string `json:"countyTaxXref,omitempty"`
	TaxId *string `json:"taxId,omitempty"`
	TaxDpAppliedFlag NullableBool `json:"taxDpAppliedFlag,omitempty"`
	UseAvalaraFlag NullableBool `json:"useAvalaraFlag,omitempty"`
	SendAvalaraTaxFlag NullableBool `json:"sendAvalaraTaxFlag,omitempty"`
	ShipToCompany *CompanyReference `json:"shipToCompany,omitempty"`
	ShipToCompanyAccountNumber *string `json:"shipToCompanyAccountNumber,omitempty"`
	ShipToCompanyType *CompanyTypeReference `json:"shipToCompanyType,omitempty"`
	ShipToTaxId *string `json:"shipToTaxId,omitempty"`
	ShipSite *SiteReference `json:"shipSite,omitempty"`
	ShipContact *string `json:"shipContact,omitempty"`
	Detail []GLExportTransactionDetail `json:"detail,omitempty"`
	TaxLevels []GLExportTransactionTaxLevel `json:"taxLevels,omitempty"`
}

// NewGLExportTransaction instantiates a new GLExportTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportTransaction() *GLExportTransaction {
	this := GLExportTransaction{}
	return &this
}

// NewGLExportTransactionWithDefaults instantiates a new GLExportTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportTransactionWithDefaults() *GLExportTransaction {
	this := GLExportTransaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *GLExportTransaction) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *GLExportTransaction) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *GLExportTransaction) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *GLExportTransaction) UnsetId() {
	o.Id.Unset()
}

// GetGlClass returns the GlClass field value if set, zero value otherwise.
func (o *GLExportTransaction) GetGlClass() string {
	if o == nil || IsNil(o.GlClass) {
		var ret string
		return ret
	}
	return *o.GlClass
}

// GetGlClassOk returns a tuple with the GlClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetGlClassOk() (*string, bool) {
	if o == nil || IsNil(o.GlClass) {
		return nil, false
	}
	return o.GlClass, true
}

// HasGlClass returns a boolean if a field has been set.
func (o *GLExportTransaction) HasGlClass() bool {
	if o != nil && !IsNil(o.GlClass) {
		return true
	}

	return false
}

// SetGlClass gets a reference to the given string and assigns it to the GlClass field.
func (o *GLExportTransaction) SetGlClass(v string) {
	o.GlClass = &v
}

// GetGlTypeId returns the GlTypeId field value if set, zero value otherwise.
func (o *GLExportTransaction) GetGlTypeId() string {
	if o == nil || IsNil(o.GlTypeId) {
		var ret string
		return ret
	}
	return *o.GlTypeId
}

// GetGlTypeIdOk returns a tuple with the GlTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetGlTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlTypeId) {
		return nil, false
	}
	return o.GlTypeId, true
}

// HasGlTypeId returns a boolean if a field has been set.
func (o *GLExportTransaction) HasGlTypeId() bool {
	if o != nil && !IsNil(o.GlTypeId) {
		return true
	}

	return false
}

// SetGlTypeId gets a reference to the given string and assigns it to the GlTypeId field.
func (o *GLExportTransaction) SetGlTypeId(v string) {
	o.GlTypeId = &v
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportTransaction) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportTransaction) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetDocumentNumber returns the DocumentNumber field value if set, zero value otherwise.
func (o *GLExportTransaction) GetDocumentNumber() string {
	if o == nil || IsNil(o.DocumentNumber) {
		var ret string
		return ret
	}
	return *o.DocumentNumber
}

// GetDocumentNumberOk returns a tuple with the DocumentNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetDocumentNumberOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentNumber) {
		return nil, false
	}
	return o.DocumentNumber, true
}

// HasDocumentNumber returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDocumentNumber() bool {
	if o != nil && !IsNil(o.DocumentNumber) {
		return true
	}

	return false
}

// SetDocumentNumber gets a reference to the given string and assigns it to the DocumentNumber field.
func (o *GLExportTransaction) SetDocumentNumber(v string) {
	o.DocumentNumber = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *GLExportTransaction) GetDocumentType() string {
	if o == nil || IsNil(o.DocumentType) {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetDocumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *GLExportTransaction) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportTransaction) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportTransaction) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportTransaction) SetMemo(v string) {
	o.Memo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GLExportTransaction) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GLExportTransaction) SetDescription(v string) {
	o.Description = &v
}

// GetAttention returns the Attention field value if set, zero value otherwise.
func (o *GLExportTransaction) GetAttention() string {
	if o == nil || IsNil(o.Attention) {
		var ret string
		return ret
	}
	return *o.Attention
}

// GetAttentionOk returns a tuple with the Attention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetAttentionOk() (*string, bool) {
	if o == nil || IsNil(o.Attention) {
		return nil, false
	}
	return o.Attention, true
}

// HasAttention returns a boolean if a field has been set.
func (o *GLExportTransaction) HasAttention() bool {
	if o != nil && !IsNil(o.Attention) {
		return true
	}

	return false
}

// SetAttention gets a reference to the given string and assigns it to the Attention field.
func (o *GLExportTransaction) SetAttention(v string) {
	o.Attention = &v
}

// GetSalesTerritory returns the SalesTerritory field value if set, zero value otherwise.
func (o *GLExportTransaction) GetSalesTerritory() string {
	if o == nil || IsNil(o.SalesTerritory) {
		var ret string
		return ret
	}
	return *o.SalesTerritory
}

// GetSalesTerritoryOk returns a tuple with the SalesTerritory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetSalesTerritoryOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTerritory) {
		return nil, false
	}
	return o.SalesTerritory, true
}

// HasSalesTerritory returns a boolean if a field has been set.
func (o *GLExportTransaction) HasSalesTerritory() bool {
	if o != nil && !IsNil(o.SalesTerritory) {
		return true
	}

	return false
}

// SetSalesTerritory gets a reference to the given string and assigns it to the SalesTerritory field.
func (o *GLExportTransaction) SetSalesTerritory(v string) {
	o.SalesTerritory = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GLExportTransaction) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *GLExportTransaction) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *GLExportTransaction) GetCompanyType() CompanyTypeReference {
	if o == nil || IsNil(o.CompanyType) {
		var ret CompanyTypeReference
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetCompanyTypeOk() (*CompanyTypeReference, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given CompanyTypeReference and assigns it to the CompanyType field.
func (o *GLExportTransaction) SetCompanyType(v CompanyTypeReference) {
	o.CompanyType = &v
}

// GetCompanyAccountNumber returns the CompanyAccountNumber field value if set, zero value otherwise.
func (o *GLExportTransaction) GetCompanyAccountNumber() string {
	if o == nil || IsNil(o.CompanyAccountNumber) {
		var ret string
		return ret
	}
	return *o.CompanyAccountNumber
}

// GetCompanyAccountNumberOk returns a tuple with the CompanyAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetCompanyAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyAccountNumber) {
		return nil, false
	}
	return o.CompanyAccountNumber, true
}

// HasCompanyAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCompanyAccountNumber() bool {
	if o != nil && !IsNil(o.CompanyAccountNumber) {
		return true
	}

	return false
}

// SetCompanyAccountNumber gets a reference to the given string and assigns it to the CompanyAccountNumber field.
func (o *GLExportTransaction) SetCompanyAccountNumber(v string) {
	o.CompanyAccountNumber = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *GLExportTransaction) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *GLExportTransaction) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *GLExportTransaction) SetSite(v SiteReference) {
	o.Site = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *GLExportTransaction) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *GLExportTransaction) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *GLExportTransaction) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetBillingTermsXref returns the BillingTermsXref field value if set, zero value otherwise.
func (o *GLExportTransaction) GetBillingTermsXref() string {
	if o == nil || IsNil(o.BillingTermsXref) {
		var ret string
		return ret
	}
	return *o.BillingTermsXref
}

// GetBillingTermsXrefOk returns a tuple with the BillingTermsXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetBillingTermsXrefOk() (*string, bool) {
	if o == nil || IsNil(o.BillingTermsXref) {
		return nil, false
	}
	return o.BillingTermsXref, true
}

// HasBillingTermsXref returns a boolean if a field has been set.
func (o *GLExportTransaction) HasBillingTermsXref() bool {
	if o != nil && !IsNil(o.BillingTermsXref) {
		return true
	}

	return false
}

// SetBillingTermsXref gets a reference to the given string and assigns it to the BillingTermsXref field.
func (o *GLExportTransaction) SetBillingTermsXref(v string) {
	o.BillingTermsXref = &v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetDueDays() int32 {
	if o == nil || IsNil(o.DueDays.Get()) {
		var ret int32
		return ret
	}
	return *o.DueDays.Get()
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetDueDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDays.Get(), o.DueDays.IsSet()
}

// HasDueDays returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDueDays() bool {
	if o != nil && o.DueDays.IsSet() {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given NullableInt32 and assigns it to the DueDays field.
func (o *GLExportTransaction) SetDueDays(v int32) {
	o.DueDays.Set(&v)
}
// SetDueDaysNil sets the value for DueDays to be an explicit nil
func (o *GLExportTransaction) SetDueDaysNil() {
	o.DueDays.Set(nil)
}

// UnsetDueDays ensures that no value is present for DueDays, not even an explicit nil
func (o *GLExportTransaction) UnsetDueDays() {
	o.DueDays.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *GLExportTransaction) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *GLExportTransaction) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEmailDeliveryFlag returns the EmailDeliveryFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetEmailDeliveryFlag() bool {
	if o == nil || IsNil(o.EmailDeliveryFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailDeliveryFlag.Get()
}

// GetEmailDeliveryFlagOk returns a tuple with the EmailDeliveryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetEmailDeliveryFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailDeliveryFlag.Get(), o.EmailDeliveryFlag.IsSet()
}

// HasEmailDeliveryFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasEmailDeliveryFlag() bool {
	if o != nil && o.EmailDeliveryFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailDeliveryFlag gets a reference to the given NullableBool and assigns it to the EmailDeliveryFlag field.
func (o *GLExportTransaction) SetEmailDeliveryFlag(v bool) {
	o.EmailDeliveryFlag.Set(&v)
}
// SetEmailDeliveryFlagNil sets the value for EmailDeliveryFlag to be an explicit nil
func (o *GLExportTransaction) SetEmailDeliveryFlagNil() {
	o.EmailDeliveryFlag.Set(nil)
}

// UnsetEmailDeliveryFlag ensures that no value is present for EmailDeliveryFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetEmailDeliveryFlag() {
	o.EmailDeliveryFlag.Unset()
}

// GetPrintDeliveryFlag returns the PrintDeliveryFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetPrintDeliveryFlag() bool {
	if o == nil || IsNil(o.PrintDeliveryFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PrintDeliveryFlag.Get()
}

// GetPrintDeliveryFlagOk returns a tuple with the PrintDeliveryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetPrintDeliveryFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrintDeliveryFlag.Get(), o.PrintDeliveryFlag.IsSet()
}

// HasPrintDeliveryFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasPrintDeliveryFlag() bool {
	if o != nil && o.PrintDeliveryFlag.IsSet() {
		return true
	}

	return false
}

// SetPrintDeliveryFlag gets a reference to the given NullableBool and assigns it to the PrintDeliveryFlag field.
func (o *GLExportTransaction) SetPrintDeliveryFlag(v bool) {
	o.PrintDeliveryFlag.Set(&v)
}
// SetPrintDeliveryFlagNil sets the value for PrintDeliveryFlag to be an explicit nil
func (o *GLExportTransaction) SetPrintDeliveryFlagNil() {
	o.PrintDeliveryFlag.Set(nil)
}

// UnsetPrintDeliveryFlag ensures that no value is present for PrintDeliveryFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetPrintDeliveryFlag() {
	o.PrintDeliveryFlag.Unset()
}

// GetAgreementPrePaymentFlag returns the AgreementPrePaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetAgreementPrePaymentFlag() bool {
	if o == nil || IsNil(o.AgreementPrePaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AgreementPrePaymentFlag.Get()
}

// GetAgreementPrePaymentFlagOk returns a tuple with the AgreementPrePaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetAgreementPrePaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementPrePaymentFlag.Get(), o.AgreementPrePaymentFlag.IsSet()
}

// HasAgreementPrePaymentFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasAgreementPrePaymentFlag() bool {
	if o != nil && o.AgreementPrePaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetAgreementPrePaymentFlag gets a reference to the given NullableBool and assigns it to the AgreementPrePaymentFlag field.
func (o *GLExportTransaction) SetAgreementPrePaymentFlag(v bool) {
	o.AgreementPrePaymentFlag.Set(&v)
}
// SetAgreementPrePaymentFlagNil sets the value for AgreementPrePaymentFlag to be an explicit nil
func (o *GLExportTransaction) SetAgreementPrePaymentFlagNil() {
	o.AgreementPrePaymentFlag.Set(nil)
}

// UnsetAgreementPrePaymentFlag ensures that no value is present for AgreementPrePaymentFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetAgreementPrePaymentFlag() {
	o.AgreementPrePaymentFlag.Unset()
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportTransaction) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransaction) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportTransaction) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetBillingType returns the BillingType field value if set, zero value otherwise.
func (o *GLExportTransaction) GetBillingType() string {
	if o == nil || IsNil(o.BillingType) {
		var ret string
		return ret
	}
	return *o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetBillingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingType) {
		return nil, false
	}
	return o.BillingType, true
}

// HasBillingType returns a boolean if a field has been set.
func (o *GLExportTransaction) HasBillingType() bool {
	if o != nil && !IsNil(o.BillingType) {
		return true
	}

	return false
}

// SetBillingType gets a reference to the given string and assigns it to the BillingType field.
func (o *GLExportTransaction) SetBillingType(v string) {
	o.BillingType = &v
}

// GetGlEntryIds returns the GlEntryIds field value if set, zero value otherwise.
func (o *GLExportTransaction) GetGlEntryIds() string {
	if o == nil || IsNil(o.GlEntryIds) {
		var ret string
		return ret
	}
	return *o.GlEntryIds
}

// GetGlEntryIdsOk returns a tuple with the GlEntryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetGlEntryIdsOk() (*string, bool) {
	if o == nil || IsNil(o.GlEntryIds) {
		return nil, false
	}
	return o.GlEntryIds, true
}

// HasGlEntryIds returns a boolean if a field has been set.
func (o *GLExportTransaction) HasGlEntryIds() bool {
	if o != nil && !IsNil(o.GlEntryIds) {
		return true
	}

	return false
}

// SetGlEntryIds gets a reference to the given string and assigns it to the GlEntryIds field.
func (o *GLExportTransaction) SetGlEntryIds(v string) {
	o.GlEntryIds = &v
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *GLExportTransaction) GetPurchaseOrder() PurchaseOrderReference {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret PurchaseOrderReference
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetPurchaseOrderOk() (*PurchaseOrderReference, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *GLExportTransaction) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given PurchaseOrderReference and assigns it to the PurchaseOrder field.
func (o *GLExportTransaction) SetPurchaseOrder(v PurchaseOrderReference) {
	o.PurchaseOrder = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *GLExportTransaction) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *GLExportTransaction) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *GLExportTransaction) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportTransaction) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportTransaction) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportTransaction) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportTransaction) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportTransaction) UnsetTotal() {
	o.Total.Unset()
}

// GetSalesRepId returns the SalesRepId field value if set, zero value otherwise.
func (o *GLExportTransaction) GetSalesRepId() string {
	if o == nil || IsNil(o.SalesRepId) {
		var ret string
		return ret
	}
	return *o.SalesRepId
}

// GetSalesRepIdOk returns a tuple with the SalesRepId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetSalesRepIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesRepId) {
		return nil, false
	}
	return o.SalesRepId, true
}

// HasSalesRepId returns a boolean if a field has been set.
func (o *GLExportTransaction) HasSalesRepId() bool {
	if o != nil && !IsNil(o.SalesRepId) {
		return true
	}

	return false
}

// SetSalesRepId gets a reference to the given string and assigns it to the SalesRepId field.
func (o *GLExportTransaction) SetSalesRepId(v string) {
	o.SalesRepId = &v
}

// GetSalesRepName returns the SalesRepName field value if set, zero value otherwise.
func (o *GLExportTransaction) GetSalesRepName() string {
	if o == nil || IsNil(o.SalesRepName) {
		var ret string
		return ret
	}
	return *o.SalesRepName
}

// GetSalesRepNameOk returns a tuple with the SalesRepName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetSalesRepNameOk() (*string, bool) {
	if o == nil || IsNil(o.SalesRepName) {
		return nil, false
	}
	return o.SalesRepName, true
}

// HasSalesRepName returns a boolean if a field has been set.
func (o *GLExportTransaction) HasSalesRepName() bool {
	if o != nil && !IsNil(o.SalesRepName) {
		return true
	}

	return false
}

// SetSalesRepName gets a reference to the given string and assigns it to the SalesRepName field.
func (o *GLExportTransaction) SetSalesRepName(v string) {
	o.SalesRepName = &v
}

// GetTaxable returns the Taxable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable.Get()
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable.Get(), o.Taxable.IsSet()
}

// HasTaxable returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxable() bool {
	if o != nil && o.Taxable.IsSet() {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given NullableBool and assigns it to the Taxable field.
func (o *GLExportTransaction) SetTaxable(v bool) {
	o.Taxable.Set(&v)
}
// SetTaxableNil sets the value for Taxable to be an explicit nil
func (o *GLExportTransaction) SetTaxableNil() {
	o.Taxable.Set(nil)
}

// UnsetTaxable ensures that no value is present for Taxable, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxable() {
	o.Taxable.Unset()
}

// GetTaxableTotal returns the TaxableTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxableTotal() float64 {
	if o == nil || IsNil(o.TaxableTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableTotal.Get()
}

// GetTaxableTotalOk returns a tuple with the TaxableTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableTotal.Get(), o.TaxableTotal.IsSet()
}

// HasTaxableTotal returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxableTotal() bool {
	if o != nil && o.TaxableTotal.IsSet() {
		return true
	}

	return false
}

// SetTaxableTotal gets a reference to the given NullableFloat64 and assigns it to the TaxableTotal field.
func (o *GLExportTransaction) SetTaxableTotal(v float64) {
	o.TaxableTotal.Set(&v)
}
// SetTaxableTotalNil sets the value for TaxableTotal to be an explicit nil
func (o *GLExportTransaction) SetTaxableTotalNil() {
	o.TaxableTotal.Set(nil)
}

// UnsetTaxableTotal ensures that no value is present for TaxableTotal, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxableTotal() {
	o.TaxableTotal.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *GLExportTransaction) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *GLExportTransaction) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetTaxGroupRate returns the TaxGroupRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxGroupRate() float64 {
	if o == nil || IsNil(o.TaxGroupRate.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxGroupRate.Get()
}

// GetTaxGroupRateOk returns a tuple with the TaxGroupRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxGroupRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxGroupRate.Get(), o.TaxGroupRate.IsSet()
}

// HasTaxGroupRate returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxGroupRate() bool {
	if o != nil && o.TaxGroupRate.IsSet() {
		return true
	}

	return false
}

// SetTaxGroupRate gets a reference to the given NullableFloat64 and assigns it to the TaxGroupRate field.
func (o *GLExportTransaction) SetTaxGroupRate(v float64) {
	o.TaxGroupRate.Set(&v)
}
// SetTaxGroupRateNil sets the value for TaxGroupRate to be an explicit nil
func (o *GLExportTransaction) SetTaxGroupRateNil() {
	o.TaxGroupRate.Set(nil)
}

// UnsetTaxGroupRate ensures that no value is present for TaxGroupRate, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxGroupRate() {
	o.TaxGroupRate.Unset()
}

// GetPiggyBackFlag returns the PiggyBackFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetPiggyBackFlag() bool {
	if o == nil || IsNil(o.PiggyBackFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PiggyBackFlag.Get()
}

// GetPiggyBackFlagOk returns a tuple with the PiggyBackFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetPiggyBackFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PiggyBackFlag.Get(), o.PiggyBackFlag.IsSet()
}

// HasPiggyBackFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasPiggyBackFlag() bool {
	if o != nil && o.PiggyBackFlag.IsSet() {
		return true
	}

	return false
}

// SetPiggyBackFlag gets a reference to the given NullableBool and assigns it to the PiggyBackFlag field.
func (o *GLExportTransaction) SetPiggyBackFlag(v bool) {
	o.PiggyBackFlag.Set(&v)
}
// SetPiggyBackFlagNil sets the value for PiggyBackFlag to be an explicit nil
func (o *GLExportTransaction) SetPiggyBackFlagNil() {
	o.PiggyBackFlag.Set(nil)
}

// UnsetPiggyBackFlag ensures that no value is present for PiggyBackFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetPiggyBackFlag() {
	o.PiggyBackFlag.Unset()
}

// GetTaxAccountNumber returns the TaxAccountNumber field value if set, zero value otherwise.
func (o *GLExportTransaction) GetTaxAccountNumber() string {
	if o == nil || IsNil(o.TaxAccountNumber) {
		var ret string
		return ret
	}
	return *o.TaxAccountNumber
}

// GetTaxAccountNumberOk returns a tuple with the TaxAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetTaxAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAccountNumber) {
		return nil, false
	}
	return o.TaxAccountNumber, true
}

// HasTaxAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxAccountNumber() bool {
	if o != nil && !IsNil(o.TaxAccountNumber) {
		return true
	}

	return false
}

// SetTaxAccountNumber gets a reference to the given string and assigns it to the TaxAccountNumber field.
func (o *GLExportTransaction) SetTaxAccountNumber(v string) {
	o.TaxAccountNumber = &v
}

// GetSalesTax returns the SalesTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetSalesTax() float64 {
	if o == nil || IsNil(o.SalesTax.Get()) {
		var ret float64
		return ret
	}
	return *o.SalesTax.Get()
}

// GetSalesTaxOk returns a tuple with the SalesTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetSalesTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesTax.Get(), o.SalesTax.IsSet()
}

// HasSalesTax returns a boolean if a field has been set.
func (o *GLExportTransaction) HasSalesTax() bool {
	if o != nil && o.SalesTax.IsSet() {
		return true
	}

	return false
}

// SetSalesTax gets a reference to the given NullableFloat64 and assigns it to the SalesTax field.
func (o *GLExportTransaction) SetSalesTax(v float64) {
	o.SalesTax.Set(&v)
}
// SetSalesTaxNil sets the value for SalesTax to be an explicit nil
func (o *GLExportTransaction) SetSalesTaxNil() {
	o.SalesTax.Set(nil)
}

// UnsetSalesTax ensures that no value is present for SalesTax, not even an explicit nil
func (o *GLExportTransaction) UnsetSalesTax() {
	o.SalesTax.Unset()
}

// GetStateTax returns the StateTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetStateTax() float64 {
	if o == nil || IsNil(o.StateTax.Get()) {
		var ret float64
		return ret
	}
	return *o.StateTax.Get()
}

// GetStateTaxOk returns a tuple with the StateTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetStateTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTax.Get(), o.StateTax.IsSet()
}

// HasStateTax returns a boolean if a field has been set.
func (o *GLExportTransaction) HasStateTax() bool {
	if o != nil && o.StateTax.IsSet() {
		return true
	}

	return false
}

// SetStateTax gets a reference to the given NullableFloat64 and assigns it to the StateTax field.
func (o *GLExportTransaction) SetStateTax(v float64) {
	o.StateTax.Set(&v)
}
// SetStateTaxNil sets the value for StateTax to be an explicit nil
func (o *GLExportTransaction) SetStateTaxNil() {
	o.StateTax.Set(nil)
}

// UnsetStateTax ensures that no value is present for StateTax, not even an explicit nil
func (o *GLExportTransaction) UnsetStateTax() {
	o.StateTax.Unset()
}

// GetCountyTax returns the CountyTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetCountyTax() float64 {
	if o == nil || IsNil(o.CountyTax.Get()) {
		var ret float64
		return ret
	}
	return *o.CountyTax.Get()
}

// GetCountyTaxOk returns a tuple with the CountyTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetCountyTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTax.Get(), o.CountyTax.IsSet()
}

// HasCountyTax returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCountyTax() bool {
	if o != nil && o.CountyTax.IsSet() {
		return true
	}

	return false
}

// SetCountyTax gets a reference to the given NullableFloat64 and assigns it to the CountyTax field.
func (o *GLExportTransaction) SetCountyTax(v float64) {
	o.CountyTax.Set(&v)
}
// SetCountyTaxNil sets the value for CountyTax to be an explicit nil
func (o *GLExportTransaction) SetCountyTaxNil() {
	o.CountyTax.Set(nil)
}

// UnsetCountyTax ensures that no value is present for CountyTax, not even an explicit nil
func (o *GLExportTransaction) UnsetCountyTax() {
	o.CountyTax.Unset()
}

// GetCityTax returns the CityTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetCityTax() float64 {
	if o == nil || IsNil(o.CityTax.Get()) {
		var ret float64
		return ret
	}
	return *o.CityTax.Get()
}

// GetCityTaxOk returns a tuple with the CityTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetCityTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTax.Get(), o.CityTax.IsSet()
}

// HasCityTax returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCityTax() bool {
	if o != nil && o.CityTax.IsSet() {
		return true
	}

	return false
}

// SetCityTax gets a reference to the given NullableFloat64 and assigns it to the CityTax field.
func (o *GLExportTransaction) SetCityTax(v float64) {
	o.CityTax.Set(&v)
}
// SetCityTaxNil sets the value for CityTax to be an explicit nil
func (o *GLExportTransaction) SetCityTaxNil() {
	o.CityTax.Set(nil)
}

// UnsetCityTax ensures that no value is present for CityTax, not even an explicit nil
func (o *GLExportTransaction) UnsetCityTax() {
	o.CityTax.Unset()
}

// GetTaxableAmount1 returns the TaxableAmount1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxableAmount1() float64 {
	if o == nil || IsNil(o.TaxableAmount1.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableAmount1.Get()
}

// GetTaxableAmount1Ok returns a tuple with the TaxableAmount1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableAmount1Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableAmount1.Get(), o.TaxableAmount1.IsSet()
}

// HasTaxableAmount1 returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxableAmount1() bool {
	if o != nil && o.TaxableAmount1.IsSet() {
		return true
	}

	return false
}

// SetTaxableAmount1 gets a reference to the given NullableFloat64 and assigns it to the TaxableAmount1 field.
func (o *GLExportTransaction) SetTaxableAmount1(v float64) {
	o.TaxableAmount1.Set(&v)
}
// SetTaxableAmount1Nil sets the value for TaxableAmount1 to be an explicit nil
func (o *GLExportTransaction) SetTaxableAmount1Nil() {
	o.TaxableAmount1.Set(nil)
}

// UnsetTaxableAmount1 ensures that no value is present for TaxableAmount1, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxableAmount1() {
	o.TaxableAmount1.Unset()
}

// GetTaxableAmount2 returns the TaxableAmount2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxableAmount2() float64 {
	if o == nil || IsNil(o.TaxableAmount2.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableAmount2.Get()
}

// GetTaxableAmount2Ok returns a tuple with the TaxableAmount2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableAmount2Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableAmount2.Get(), o.TaxableAmount2.IsSet()
}

// HasTaxableAmount2 returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxableAmount2() bool {
	if o != nil && o.TaxableAmount2.IsSet() {
		return true
	}

	return false
}

// SetTaxableAmount2 gets a reference to the given NullableFloat64 and assigns it to the TaxableAmount2 field.
func (o *GLExportTransaction) SetTaxableAmount2(v float64) {
	o.TaxableAmount2.Set(&v)
}
// SetTaxableAmount2Nil sets the value for TaxableAmount2 to be an explicit nil
func (o *GLExportTransaction) SetTaxableAmount2Nil() {
	o.TaxableAmount2.Set(nil)
}

// UnsetTaxableAmount2 ensures that no value is present for TaxableAmount2, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxableAmount2() {
	o.TaxableAmount2.Unset()
}

// GetTaxableAmount3 returns the TaxableAmount3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxableAmount3() float64 {
	if o == nil || IsNil(o.TaxableAmount3.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableAmount3.Get()
}

// GetTaxableAmount3Ok returns a tuple with the TaxableAmount3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableAmount3Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableAmount3.Get(), o.TaxableAmount3.IsSet()
}

// HasTaxableAmount3 returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxableAmount3() bool {
	if o != nil && o.TaxableAmount3.IsSet() {
		return true
	}

	return false
}

// SetTaxableAmount3 gets a reference to the given NullableFloat64 and assigns it to the TaxableAmount3 field.
func (o *GLExportTransaction) SetTaxableAmount3(v float64) {
	o.TaxableAmount3.Set(&v)
}
// SetTaxableAmount3Nil sets the value for TaxableAmount3 to be an explicit nil
func (o *GLExportTransaction) SetTaxableAmount3Nil() {
	o.TaxableAmount3.Set(nil)
}

// UnsetTaxableAmount3 ensures that no value is present for TaxableAmount3, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxableAmount3() {
	o.TaxableAmount3.Unset()
}

// GetTaxableAmount4 returns the TaxableAmount4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxableAmount4() float64 {
	if o == nil || IsNil(o.TaxableAmount4.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableAmount4.Get()
}

// GetTaxableAmount4Ok returns a tuple with the TaxableAmount4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableAmount4Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableAmount4.Get(), o.TaxableAmount4.IsSet()
}

// HasTaxableAmount4 returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxableAmount4() bool {
	if o != nil && o.TaxableAmount4.IsSet() {
		return true
	}

	return false
}

// SetTaxableAmount4 gets a reference to the given NullableFloat64 and assigns it to the TaxableAmount4 field.
func (o *GLExportTransaction) SetTaxableAmount4(v float64) {
	o.TaxableAmount4.Set(&v)
}
// SetTaxableAmount4Nil sets the value for TaxableAmount4 to be an explicit nil
func (o *GLExportTransaction) SetTaxableAmount4Nil() {
	o.TaxableAmount4.Set(nil)
}

// UnsetTaxableAmount4 ensures that no value is present for TaxableAmount4, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxableAmount4() {
	o.TaxableAmount4.Unset()
}

// GetTaxableAmount5 returns the TaxableAmount5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxableAmount5() float64 {
	if o == nil || IsNil(o.TaxableAmount5.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxableAmount5.Get()
}

// GetTaxableAmount5Ok returns a tuple with the TaxableAmount5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxableAmount5Ok() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableAmount5.Get(), o.TaxableAmount5.IsSet()
}

// HasTaxableAmount5 returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxableAmount5() bool {
	if o != nil && o.TaxableAmount5.IsSet() {
		return true
	}

	return false
}

// SetTaxableAmount5 gets a reference to the given NullableFloat64 and assigns it to the TaxableAmount5 field.
func (o *GLExportTransaction) SetTaxableAmount5(v float64) {
	o.TaxableAmount5.Set(&v)
}
// SetTaxableAmount5Nil sets the value for TaxableAmount5 to be an explicit nil
func (o *GLExportTransaction) SetTaxableAmount5Nil() {
	o.TaxableAmount5.Set(nil)
}

// UnsetTaxableAmount5 ensures that no value is present for TaxableAmount5, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxableAmount5() {
	o.TaxableAmount5.Unset()
}

// GetTaxAgencyXref returns the TaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportTransaction) GetTaxAgencyXref() string {
	if o == nil || IsNil(o.TaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.TaxAgencyXref
}

// GetTaxAgencyXrefOk returns a tuple with the TaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAgencyXref) {
		return nil, false
	}
	return o.TaxAgencyXref, true
}

// HasTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxAgencyXref() bool {
	if o != nil && !IsNil(o.TaxAgencyXref) {
		return true
	}

	return false
}

// SetTaxAgencyXref gets a reference to the given string and assigns it to the TaxAgencyXref field.
func (o *GLExportTransaction) SetTaxAgencyXref(v string) {
	o.TaxAgencyXref = &v
}

// GetStateTaxXref returns the StateTaxXref field value if set, zero value otherwise.
func (o *GLExportTransaction) GetStateTaxXref() string {
	if o == nil || IsNil(o.StateTaxXref) {
		var ret string
		return ret
	}
	return *o.StateTaxXref
}

// GetStateTaxXrefOk returns a tuple with the StateTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetStateTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxXref) {
		return nil, false
	}
	return o.StateTaxXref, true
}

// HasStateTaxXref returns a boolean if a field has been set.
func (o *GLExportTransaction) HasStateTaxXref() bool {
	if o != nil && !IsNil(o.StateTaxXref) {
		return true
	}

	return false
}

// SetStateTaxXref gets a reference to the given string and assigns it to the StateTaxXref field.
func (o *GLExportTransaction) SetStateTaxXref(v string) {
	o.StateTaxXref = &v
}

// GetCountyTaxXref returns the CountyTaxXref field value if set, zero value otherwise.
func (o *GLExportTransaction) GetCountyTaxXref() string {
	if o == nil || IsNil(o.CountyTaxXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxXref
}

// GetCountyTaxXrefOk returns a tuple with the CountyTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetCountyTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxXref) {
		return nil, false
	}
	return o.CountyTaxXref, true
}

// HasCountyTaxXref returns a boolean if a field has been set.
func (o *GLExportTransaction) HasCountyTaxXref() bool {
	if o != nil && !IsNil(o.CountyTaxXref) {
		return true
	}

	return false
}

// SetCountyTaxXref gets a reference to the given string and assigns it to the CountyTaxXref field.
func (o *GLExportTransaction) SetCountyTaxXref(v string) {
	o.CountyTaxXref = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *GLExportTransaction) GetTaxId() string {
	if o == nil || IsNil(o.TaxId) {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetTaxIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxId) {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxId() bool {
	if o != nil && !IsNil(o.TaxId) {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *GLExportTransaction) SetTaxId(v string) {
	o.TaxId = &v
}

// GetTaxDpAppliedFlag returns the TaxDpAppliedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetTaxDpAppliedFlag() bool {
	if o == nil || IsNil(o.TaxDpAppliedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxDpAppliedFlag.Get()
}

// GetTaxDpAppliedFlagOk returns a tuple with the TaxDpAppliedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetTaxDpAppliedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxDpAppliedFlag.Get(), o.TaxDpAppliedFlag.IsSet()
}

// HasTaxDpAppliedFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxDpAppliedFlag() bool {
	if o != nil && o.TaxDpAppliedFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxDpAppliedFlag gets a reference to the given NullableBool and assigns it to the TaxDpAppliedFlag field.
func (o *GLExportTransaction) SetTaxDpAppliedFlag(v bool) {
	o.TaxDpAppliedFlag.Set(&v)
}
// SetTaxDpAppliedFlagNil sets the value for TaxDpAppliedFlag to be an explicit nil
func (o *GLExportTransaction) SetTaxDpAppliedFlagNil() {
	o.TaxDpAppliedFlag.Set(nil)
}

// UnsetTaxDpAppliedFlag ensures that no value is present for TaxDpAppliedFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetTaxDpAppliedFlag() {
	o.TaxDpAppliedFlag.Unset()
}

// GetUseAvalaraFlag returns the UseAvalaraFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetUseAvalaraFlag() bool {
	if o == nil || IsNil(o.UseAvalaraFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UseAvalaraFlag.Get()
}

// GetUseAvalaraFlagOk returns a tuple with the UseAvalaraFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetUseAvalaraFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseAvalaraFlag.Get(), o.UseAvalaraFlag.IsSet()
}

// HasUseAvalaraFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasUseAvalaraFlag() bool {
	if o != nil && o.UseAvalaraFlag.IsSet() {
		return true
	}

	return false
}

// SetUseAvalaraFlag gets a reference to the given NullableBool and assigns it to the UseAvalaraFlag field.
func (o *GLExportTransaction) SetUseAvalaraFlag(v bool) {
	o.UseAvalaraFlag.Set(&v)
}
// SetUseAvalaraFlagNil sets the value for UseAvalaraFlag to be an explicit nil
func (o *GLExportTransaction) SetUseAvalaraFlagNil() {
	o.UseAvalaraFlag.Set(nil)
}

// UnsetUseAvalaraFlag ensures that no value is present for UseAvalaraFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetUseAvalaraFlag() {
	o.UseAvalaraFlag.Unset()
}

// GetSendAvalaraTaxFlag returns the SendAvalaraTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransaction) GetSendAvalaraTaxFlag() bool {
	if o == nil || IsNil(o.SendAvalaraTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SendAvalaraTaxFlag.Get()
}

// GetSendAvalaraTaxFlagOk returns a tuple with the SendAvalaraTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransaction) GetSendAvalaraTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendAvalaraTaxFlag.Get(), o.SendAvalaraTaxFlag.IsSet()
}

// HasSendAvalaraTaxFlag returns a boolean if a field has been set.
func (o *GLExportTransaction) HasSendAvalaraTaxFlag() bool {
	if o != nil && o.SendAvalaraTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetSendAvalaraTaxFlag gets a reference to the given NullableBool and assigns it to the SendAvalaraTaxFlag field.
func (o *GLExportTransaction) SetSendAvalaraTaxFlag(v bool) {
	o.SendAvalaraTaxFlag.Set(&v)
}
// SetSendAvalaraTaxFlagNil sets the value for SendAvalaraTaxFlag to be an explicit nil
func (o *GLExportTransaction) SetSendAvalaraTaxFlagNil() {
	o.SendAvalaraTaxFlag.Set(nil)
}

// UnsetSendAvalaraTaxFlag ensures that no value is present for SendAvalaraTaxFlag, not even an explicit nil
func (o *GLExportTransaction) UnsetSendAvalaraTaxFlag() {
	o.SendAvalaraTaxFlag.Unset()
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *GLExportTransaction) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *GLExportTransaction) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *GLExportTransaction) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToCompanyAccountNumber returns the ShipToCompanyAccountNumber field value if set, zero value otherwise.
func (o *GLExportTransaction) GetShipToCompanyAccountNumber() string {
	if o == nil || IsNil(o.ShipToCompanyAccountNumber) {
		var ret string
		return ret
	}
	return *o.ShipToCompanyAccountNumber
}

// GetShipToCompanyAccountNumberOk returns a tuple with the ShipToCompanyAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetShipToCompanyAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToCompanyAccountNumber) {
		return nil, false
	}
	return o.ShipToCompanyAccountNumber, true
}

// HasShipToCompanyAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransaction) HasShipToCompanyAccountNumber() bool {
	if o != nil && !IsNil(o.ShipToCompanyAccountNumber) {
		return true
	}

	return false
}

// SetShipToCompanyAccountNumber gets a reference to the given string and assigns it to the ShipToCompanyAccountNumber field.
func (o *GLExportTransaction) SetShipToCompanyAccountNumber(v string) {
	o.ShipToCompanyAccountNumber = &v
}

// GetShipToCompanyType returns the ShipToCompanyType field value if set, zero value otherwise.
func (o *GLExportTransaction) GetShipToCompanyType() CompanyTypeReference {
	if o == nil || IsNil(o.ShipToCompanyType) {
		var ret CompanyTypeReference
		return ret
	}
	return *o.ShipToCompanyType
}

// GetShipToCompanyTypeOk returns a tuple with the ShipToCompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetShipToCompanyTypeOk() (*CompanyTypeReference, bool) {
	if o == nil || IsNil(o.ShipToCompanyType) {
		return nil, false
	}
	return o.ShipToCompanyType, true
}

// HasShipToCompanyType returns a boolean if a field has been set.
func (o *GLExportTransaction) HasShipToCompanyType() bool {
	if o != nil && !IsNil(o.ShipToCompanyType) {
		return true
	}

	return false
}

// SetShipToCompanyType gets a reference to the given CompanyTypeReference and assigns it to the ShipToCompanyType field.
func (o *GLExportTransaction) SetShipToCompanyType(v CompanyTypeReference) {
	o.ShipToCompanyType = &v
}

// GetShipToTaxId returns the ShipToTaxId field value if set, zero value otherwise.
func (o *GLExportTransaction) GetShipToTaxId() string {
	if o == nil || IsNil(o.ShipToTaxId) {
		var ret string
		return ret
	}
	return *o.ShipToTaxId
}

// GetShipToTaxIdOk returns a tuple with the ShipToTaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetShipToTaxIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToTaxId) {
		return nil, false
	}
	return o.ShipToTaxId, true
}

// HasShipToTaxId returns a boolean if a field has been set.
func (o *GLExportTransaction) HasShipToTaxId() bool {
	if o != nil && !IsNil(o.ShipToTaxId) {
		return true
	}

	return false
}

// SetShipToTaxId gets a reference to the given string and assigns it to the ShipToTaxId field.
func (o *GLExportTransaction) SetShipToTaxId(v string) {
	o.ShipToTaxId = &v
}

// GetShipSite returns the ShipSite field value if set, zero value otherwise.
func (o *GLExportTransaction) GetShipSite() SiteReference {
	if o == nil || IsNil(o.ShipSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipSite
}

// GetShipSiteOk returns a tuple with the ShipSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetShipSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipSite) {
		return nil, false
	}
	return o.ShipSite, true
}

// HasShipSite returns a boolean if a field has been set.
func (o *GLExportTransaction) HasShipSite() bool {
	if o != nil && !IsNil(o.ShipSite) {
		return true
	}

	return false
}

// SetShipSite gets a reference to the given SiteReference and assigns it to the ShipSite field.
func (o *GLExportTransaction) SetShipSite(v SiteReference) {
	o.ShipSite = &v
}

// GetShipContact returns the ShipContact field value if set, zero value otherwise.
func (o *GLExportTransaction) GetShipContact() string {
	if o == nil || IsNil(o.ShipContact) {
		var ret string
		return ret
	}
	return *o.ShipContact
}

// GetShipContactOk returns a tuple with the ShipContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetShipContactOk() (*string, bool) {
	if o == nil || IsNil(o.ShipContact) {
		return nil, false
	}
	return o.ShipContact, true
}

// HasShipContact returns a boolean if a field has been set.
func (o *GLExportTransaction) HasShipContact() bool {
	if o != nil && !IsNil(o.ShipContact) {
		return true
	}

	return false
}

// SetShipContact gets a reference to the given string and assigns it to the ShipContact field.
func (o *GLExportTransaction) SetShipContact(v string) {
	o.ShipContact = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *GLExportTransaction) GetDetail() []GLExportTransactionDetail {
	if o == nil || IsNil(o.Detail) {
		var ret []GLExportTransactionDetail
		return ret
	}
	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetDetailOk() ([]GLExportTransactionDetail, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *GLExportTransaction) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given []GLExportTransactionDetail and assigns it to the Detail field.
func (o *GLExportTransaction) SetDetail(v []GLExportTransactionDetail) {
	o.Detail = v
}

// GetTaxLevels returns the TaxLevels field value if set, zero value otherwise.
func (o *GLExportTransaction) GetTaxLevels() []GLExportTransactionTaxLevel {
	if o == nil || IsNil(o.TaxLevels) {
		var ret []GLExportTransactionTaxLevel
		return ret
	}
	return o.TaxLevels
}

// GetTaxLevelsOk returns a tuple with the TaxLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransaction) GetTaxLevelsOk() ([]GLExportTransactionTaxLevel, bool) {
	if o == nil || IsNil(o.TaxLevels) {
		return nil, false
	}
	return o.TaxLevels, true
}

// HasTaxLevels returns a boolean if a field has been set.
func (o *GLExportTransaction) HasTaxLevels() bool {
	if o != nil && !IsNil(o.TaxLevels) {
		return true
	}

	return false
}

// SetTaxLevels gets a reference to the given []GLExportTransactionTaxLevel and assigns it to the TaxLevels field.
func (o *GLExportTransaction) SetTaxLevels(v []GLExportTransactionTaxLevel) {
	o.TaxLevels = v
}

func (o GLExportTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.GlClass) {
		toSerialize["glClass"] = o.GlClass
	}
	if !IsNil(o.GlTypeId) {
		toSerialize["glTypeId"] = o.GlTypeId
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.DocumentNumber) {
		toSerialize["documentNumber"] = o.DocumentNumber
	}
	if !IsNil(o.DocumentType) {
		toSerialize["documentType"] = o.DocumentType
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Attention) {
		toSerialize["attention"] = o.Attention
	}
	if !IsNil(o.SalesTerritory) {
		toSerialize["salesTerritory"] = o.SalesTerritory
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CompanyType) {
		toSerialize["companyType"] = o.CompanyType
	}
	if !IsNil(o.CompanyAccountNumber) {
		toSerialize["companyAccountNumber"] = o.CompanyAccountNumber
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.BillingTermsXref) {
		toSerialize["billingTermsXref"] = o.BillingTermsXref
	}
	if o.DueDays.IsSet() {
		toSerialize["dueDays"] = o.DueDays.Get()
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.EmailDeliveryFlag.IsSet() {
		toSerialize["emailDeliveryFlag"] = o.EmailDeliveryFlag.Get()
	}
	if o.PrintDeliveryFlag.IsSet() {
		toSerialize["printDeliveryFlag"] = o.PrintDeliveryFlag.Get()
	}
	if o.AgreementPrePaymentFlag.IsSet() {
		toSerialize["agreementPrePaymentFlag"] = o.AgreementPrePaymentFlag.Get()
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.BillingType) {
		toSerialize["billingType"] = o.BillingType
	}
	if !IsNil(o.GlEntryIds) {
		toSerialize["glEntryIds"] = o.GlEntryIds
	}
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchaseOrder"] = o.PurchaseOrder
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.SalesRepId) {
		toSerialize["salesRepId"] = o.SalesRepId
	}
	if !IsNil(o.SalesRepName) {
		toSerialize["salesRepName"] = o.SalesRepName
	}
	if o.Taxable.IsSet() {
		toSerialize["taxable"] = o.Taxable.Get()
	}
	if o.TaxableTotal.IsSet() {
		toSerialize["taxableTotal"] = o.TaxableTotal.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.TaxGroupRate.IsSet() {
		toSerialize["taxGroupRate"] = o.TaxGroupRate.Get()
	}
	if o.PiggyBackFlag.IsSet() {
		toSerialize["piggyBackFlag"] = o.PiggyBackFlag.Get()
	}
	if !IsNil(o.TaxAccountNumber) {
		toSerialize["taxAccountNumber"] = o.TaxAccountNumber
	}
	if o.SalesTax.IsSet() {
		toSerialize["salesTax"] = o.SalesTax.Get()
	}
	if o.StateTax.IsSet() {
		toSerialize["stateTax"] = o.StateTax.Get()
	}
	if o.CountyTax.IsSet() {
		toSerialize["countyTax"] = o.CountyTax.Get()
	}
	if o.CityTax.IsSet() {
		toSerialize["cityTax"] = o.CityTax.Get()
	}
	if o.TaxableAmount1.IsSet() {
		toSerialize["taxableAmount1"] = o.TaxableAmount1.Get()
	}
	if o.TaxableAmount2.IsSet() {
		toSerialize["taxableAmount2"] = o.TaxableAmount2.Get()
	}
	if o.TaxableAmount3.IsSet() {
		toSerialize["taxableAmount3"] = o.TaxableAmount3.Get()
	}
	if o.TaxableAmount4.IsSet() {
		toSerialize["taxableAmount4"] = o.TaxableAmount4.Get()
	}
	if o.TaxableAmount5.IsSet() {
		toSerialize["taxableAmount5"] = o.TaxableAmount5.Get()
	}
	if !IsNil(o.TaxAgencyXref) {
		toSerialize["taxAgencyXref"] = o.TaxAgencyXref
	}
	if !IsNil(o.StateTaxXref) {
		toSerialize["stateTaxXref"] = o.StateTaxXref
	}
	if !IsNil(o.CountyTaxXref) {
		toSerialize["countyTaxXref"] = o.CountyTaxXref
	}
	if !IsNil(o.TaxId) {
		toSerialize["taxId"] = o.TaxId
	}
	if o.TaxDpAppliedFlag.IsSet() {
		toSerialize["taxDpAppliedFlag"] = o.TaxDpAppliedFlag.Get()
	}
	if o.UseAvalaraFlag.IsSet() {
		toSerialize["useAvalaraFlag"] = o.UseAvalaraFlag.Get()
	}
	if o.SendAvalaraTaxFlag.IsSet() {
		toSerialize["sendAvalaraTaxFlag"] = o.SendAvalaraTaxFlag.Get()
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToCompanyAccountNumber) {
		toSerialize["shipToCompanyAccountNumber"] = o.ShipToCompanyAccountNumber
	}
	if !IsNil(o.ShipToCompanyType) {
		toSerialize["shipToCompanyType"] = o.ShipToCompanyType
	}
	if !IsNil(o.ShipToTaxId) {
		toSerialize["shipToTaxId"] = o.ShipToTaxId
	}
	if !IsNil(o.ShipSite) {
		toSerialize["shipSite"] = o.ShipSite
	}
	if !IsNil(o.ShipContact) {
		toSerialize["shipContact"] = o.ShipContact
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.TaxLevels) {
		toSerialize["taxLevels"] = o.TaxLevels
	}
	return toSerialize, nil
}

type NullableGLExportTransaction struct {
	value *GLExportTransaction
	isSet bool
}

func (v NullableGLExportTransaction) Get() *GLExportTransaction {
	return v.value
}

func (v *NullableGLExportTransaction) Set(val *GLExportTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportTransaction(val *GLExportTransaction) *NullableGLExportTransaction {
	return &NullableGLExportTransaction{value: val, isSet: true}
}

func (v NullableGLExportTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


