/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the GLExportTransactionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLExportTransactionDetail{}

// GLExportTransactionDetail struct for GLExportTransactionDetail
type GLExportTransactionDetail struct {
	Id NullableInt32 `json:"id,omitempty"`
	DocumentDate *string `json:"documentDate,omitempty"`
	DocumentType *string `json:"documentType,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	GlClass *string `json:"glClass,omitempty"`
	GlTypeId *string `json:"glTypeId,omitempty"`
	GlItemId *string `json:"glItemId,omitempty"`
	InvoiceSummaryOption *string `json:"invoiceSummaryOption,omitempty"`
	Cost NullableFloat64 `json:"cost,omitempty"`
	SalesCode *string `json:"salesCode,omitempty"`
	Memo *string `json:"memo,omitempty"`
	Description *string `json:"description,omitempty"`
	Quantity NullableFloat64 `json:"quantity,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	TimeEntry *TimeEntryReference `json:"timeEntry,omitempty"`
	CostAccountNumber *string `json:"costAccountNumber,omitempty"`
	InventoryAccountNumber *string `json:"inventoryAccountNumber,omitempty"`
	ProductAccountNumber *string `json:"productAccountNumber,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	TaxCodeXref *string `json:"taxCodeXref,omitempty"`
	TaxAgencyXref *string `json:"taxAgencyXref,omitempty"`
	TaxNote *string `json:"taxNote,omitempty"`
	TaxRate NullableFloat64 `json:"taxRate,omitempty"`
	TaxRatePercent NullableFloat64 `json:"taxRatePercent,omitempty"`
	TaxableFlag NullableBool `json:"taxableFlag,omitempty"`
	Taxable2Flag NullableBool `json:"taxable2Flag,omitempty"`
	Taxable3Flag NullableBool `json:"taxable3Flag,omitempty"`
	Taxable4Flag NullableBool `json:"taxable4Flag,omitempty"`
	Taxable5Flag NullableBool `json:"taxable5Flag,omitempty"`
	Item *IvItemReference `json:"item,omitempty"`
	Product *ProductReference `json:"product,omitempty"`
	ItemTaxableFlag NullableBool `json:"itemTaxableFlag,omitempty"`
	ItemPrice NullableFloat64 `json:"itemPrice,omitempty"`
	ItemCost NullableFloat64 `json:"itemCost,omitempty"`
	ItemDescription *string `json:"itemDescription,omitempty"`
	SalesDescription *string `json:"salesDescription,omitempty"`
	UnitOfMeasure *UnitOfMeasureReference `json:"unitOfMeasure,omitempty"`
	SubCategory *ProductSubCategoryReference `json:"subCategory,omitempty"`
	SerializedFlag NullableBool `json:"serializedFlag,omitempty"`
	SerialNumbers *string `json:"serialNumbers,omitempty"`
	WarehouseSite *SiteReference `json:"warehouseSite,omitempty"`
	WarehouseBin *WarehouseBinReference `json:"warehouseBin,omitempty"`
	ShipmentMethod *ShipmentMethodReference `json:"shipmentMethod,omitempty"`
	DropShippedFlag NullableBool `json:"dropShippedFlag,omitempty"`
	ItemTypeXref *string `json:"itemTypeXref,omitempty"`
	InventoryXref *string `json:"inventoryXref,omitempty"`
	CogsXref *string `json:"cogsXref,omitempty"`
	UomScheduleXref *string `json:"uomScheduleXref,omitempty"`
	PriceLevelXref *string `json:"priceLevelXref,omitempty"`
	LocationXref *string `json:"locationXref,omitempty"`
	TaxLevels []GLExportTransactionDetailTaxLevel `json:"taxLevels,omitempty"`
}

// NewGLExportTransactionDetail instantiates a new GLExportTransactionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLExportTransactionDetail() *GLExportTransactionDetail {
	this := GLExportTransactionDetail{}
	return &this
}

// NewGLExportTransactionDetailWithDefaults instantiates a new GLExportTransactionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLExportTransactionDetailWithDefaults() *GLExportTransactionDetail {
	this := GLExportTransactionDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *GLExportTransactionDetail) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *GLExportTransactionDetail) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetId() {
	o.Id.Unset()
}

// GetDocumentDate returns the DocumentDate field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetDocumentDate() string {
	if o == nil || IsNil(o.DocumentDate) {
		var ret string
		return ret
	}
	return *o.DocumentDate
}

// GetDocumentDateOk returns a tuple with the DocumentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetDocumentDateOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentDate) {
		return nil, false
	}
	return o.DocumentDate, true
}

// HasDocumentDate returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasDocumentDate() bool {
	if o != nil && !IsNil(o.DocumentDate) {
		return true
	}

	return false
}

// SetDocumentDate gets a reference to the given string and assigns it to the DocumentDate field.
func (o *GLExportTransactionDetail) SetDocumentDate(v string) {
	o.DocumentDate = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetDocumentType() string {
	if o == nil || IsNil(o.DocumentType) {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetDocumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *GLExportTransactionDetail) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *GLExportTransactionDetail) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetGlClass returns the GlClass field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetGlClass() string {
	if o == nil || IsNil(o.GlClass) {
		var ret string
		return ret
	}
	return *o.GlClass
}

// GetGlClassOk returns a tuple with the GlClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetGlClassOk() (*string, bool) {
	if o == nil || IsNil(o.GlClass) {
		return nil, false
	}
	return o.GlClass, true
}

// HasGlClass returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasGlClass() bool {
	if o != nil && !IsNil(o.GlClass) {
		return true
	}

	return false
}

// SetGlClass gets a reference to the given string and assigns it to the GlClass field.
func (o *GLExportTransactionDetail) SetGlClass(v string) {
	o.GlClass = &v
}

// GetGlTypeId returns the GlTypeId field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetGlTypeId() string {
	if o == nil || IsNil(o.GlTypeId) {
		var ret string
		return ret
	}
	return *o.GlTypeId
}

// GetGlTypeIdOk returns a tuple with the GlTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetGlTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlTypeId) {
		return nil, false
	}
	return o.GlTypeId, true
}

// HasGlTypeId returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasGlTypeId() bool {
	if o != nil && !IsNil(o.GlTypeId) {
		return true
	}

	return false
}

// SetGlTypeId gets a reference to the given string and assigns it to the GlTypeId field.
func (o *GLExportTransactionDetail) SetGlTypeId(v string) {
	o.GlTypeId = &v
}

// GetGlItemId returns the GlItemId field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetGlItemId() string {
	if o == nil || IsNil(o.GlItemId) {
		var ret string
		return ret
	}
	return *o.GlItemId
}

// GetGlItemIdOk returns a tuple with the GlItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetGlItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlItemId) {
		return nil, false
	}
	return o.GlItemId, true
}

// HasGlItemId returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasGlItemId() bool {
	if o != nil && !IsNil(o.GlItemId) {
		return true
	}

	return false
}

// SetGlItemId gets a reference to the given string and assigns it to the GlItemId field.
func (o *GLExportTransactionDetail) SetGlItemId(v string) {
	o.GlItemId = &v
}

// GetInvoiceSummaryOption returns the InvoiceSummaryOption field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetInvoiceSummaryOption() string {
	if o == nil || IsNil(o.InvoiceSummaryOption) {
		var ret string
		return ret
	}
	return *o.InvoiceSummaryOption
}

// GetInvoiceSummaryOptionOk returns a tuple with the InvoiceSummaryOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetInvoiceSummaryOptionOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceSummaryOption) {
		return nil, false
	}
	return o.InvoiceSummaryOption, true
}

// HasInvoiceSummaryOption returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasInvoiceSummaryOption() bool {
	if o != nil && !IsNil(o.InvoiceSummaryOption) {
		return true
	}

	return false
}

// SetInvoiceSummaryOption gets a reference to the given string and assigns it to the InvoiceSummaryOption field.
func (o *GLExportTransactionDetail) SetInvoiceSummaryOption(v string) {
	o.InvoiceSummaryOption = &v
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *GLExportTransactionDetail) SetCost(v float64) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *GLExportTransactionDetail) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetCost() {
	o.Cost.Unset()
}

// GetSalesCode returns the SalesCode field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetSalesCode() string {
	if o == nil || IsNil(o.SalesCode) {
		var ret string
		return ret
	}
	return *o.SalesCode
}

// GetSalesCodeOk returns a tuple with the SalesCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetSalesCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalesCode) {
		return nil, false
	}
	return o.SalesCode, true
}

// HasSalesCode returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasSalesCode() bool {
	if o != nil && !IsNil(o.SalesCode) {
		return true
	}

	return false
}

// SetSalesCode gets a reference to the given string and assigns it to the SalesCode field.
func (o *GLExportTransactionDetail) SetSalesCode(v string) {
	o.SalesCode = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *GLExportTransactionDetail) SetMemo(v string) {
	o.Memo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GLExportTransactionDetail) SetDescription(v string) {
	o.Description = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float64
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat64 and assigns it to the Quantity field.
func (o *GLExportTransactionDetail) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *GLExportTransactionDetail) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *GLExportTransactionDetail) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *GLExportTransactionDetail) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTotal() {
	o.Total.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *GLExportTransactionDetail) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTimeEntry returns the TimeEntry field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetTimeEntry() TimeEntryReference {
	if o == nil || IsNil(o.TimeEntry) {
		var ret TimeEntryReference
		return ret
	}
	return *o.TimeEntry
}

// GetTimeEntryOk returns a tuple with the TimeEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetTimeEntryOk() (*TimeEntryReference, bool) {
	if o == nil || IsNil(o.TimeEntry) {
		return nil, false
	}
	return o.TimeEntry, true
}

// HasTimeEntry returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTimeEntry() bool {
	if o != nil && !IsNil(o.TimeEntry) {
		return true
	}

	return false
}

// SetTimeEntry gets a reference to the given TimeEntryReference and assigns it to the TimeEntry field.
func (o *GLExportTransactionDetail) SetTimeEntry(v TimeEntryReference) {
	o.TimeEntry = &v
}

// GetCostAccountNumber returns the CostAccountNumber field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetCostAccountNumber() string {
	if o == nil || IsNil(o.CostAccountNumber) {
		var ret string
		return ret
	}
	return *o.CostAccountNumber
}

// GetCostAccountNumberOk returns a tuple with the CostAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetCostAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CostAccountNumber) {
		return nil, false
	}
	return o.CostAccountNumber, true
}

// HasCostAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasCostAccountNumber() bool {
	if o != nil && !IsNil(o.CostAccountNumber) {
		return true
	}

	return false
}

// SetCostAccountNumber gets a reference to the given string and assigns it to the CostAccountNumber field.
func (o *GLExportTransactionDetail) SetCostAccountNumber(v string) {
	o.CostAccountNumber = &v
}

// GetInventoryAccountNumber returns the InventoryAccountNumber field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetInventoryAccountNumber() string {
	if o == nil || IsNil(o.InventoryAccountNumber) {
		var ret string
		return ret
	}
	return *o.InventoryAccountNumber
}

// GetInventoryAccountNumberOk returns a tuple with the InventoryAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetInventoryAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryAccountNumber) {
		return nil, false
	}
	return o.InventoryAccountNumber, true
}

// HasInventoryAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasInventoryAccountNumber() bool {
	if o != nil && !IsNil(o.InventoryAccountNumber) {
		return true
	}

	return false
}

// SetInventoryAccountNumber gets a reference to the given string and assigns it to the InventoryAccountNumber field.
func (o *GLExportTransactionDetail) SetInventoryAccountNumber(v string) {
	o.InventoryAccountNumber = &v
}

// GetProductAccountNumber returns the ProductAccountNumber field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetProductAccountNumber() string {
	if o == nil || IsNil(o.ProductAccountNumber) {
		var ret string
		return ret
	}
	return *o.ProductAccountNumber
}

// GetProductAccountNumberOk returns a tuple with the ProductAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetProductAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ProductAccountNumber) {
		return nil, false
	}
	return o.ProductAccountNumber, true
}

// HasProductAccountNumber returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasProductAccountNumber() bool {
	if o != nil && !IsNil(o.ProductAccountNumber) {
		return true
	}

	return false
}

// SetProductAccountNumber gets a reference to the given string and assigns it to the ProductAccountNumber field.
func (o *GLExportTransactionDetail) SetProductAccountNumber(v string) {
	o.ProductAccountNumber = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *GLExportTransactionDetail) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetTaxCodeXref returns the TaxCodeXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetTaxCodeXref() string {
	if o == nil || IsNil(o.TaxCodeXref) {
		var ret string
		return ret
	}
	return *o.TaxCodeXref
}

// GetTaxCodeXrefOk returns a tuple with the TaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxCodeXref) {
		return nil, false
	}
	return o.TaxCodeXref, true
}

// HasTaxCodeXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxCodeXref() bool {
	if o != nil && !IsNil(o.TaxCodeXref) {
		return true
	}

	return false
}

// SetTaxCodeXref gets a reference to the given string and assigns it to the TaxCodeXref field.
func (o *GLExportTransactionDetail) SetTaxCodeXref(v string) {
	o.TaxCodeXref = &v
}

// GetTaxAgencyXref returns the TaxAgencyXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetTaxAgencyXref() string {
	if o == nil || IsNil(o.TaxAgencyXref) {
		var ret string
		return ret
	}
	return *o.TaxAgencyXref
}

// GetTaxAgencyXrefOk returns a tuple with the TaxAgencyXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetTaxAgencyXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxAgencyXref) {
		return nil, false
	}
	return o.TaxAgencyXref, true
}

// HasTaxAgencyXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxAgencyXref() bool {
	if o != nil && !IsNil(o.TaxAgencyXref) {
		return true
	}

	return false
}

// SetTaxAgencyXref gets a reference to the given string and assigns it to the TaxAgencyXref field.
func (o *GLExportTransactionDetail) SetTaxAgencyXref(v string) {
	o.TaxAgencyXref = &v
}

// GetTaxNote returns the TaxNote field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetTaxNote() string {
	if o == nil || IsNil(o.TaxNote) {
		var ret string
		return ret
	}
	return *o.TaxNote
}

// GetTaxNoteOk returns a tuple with the TaxNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetTaxNoteOk() (*string, bool) {
	if o == nil || IsNil(o.TaxNote) {
		return nil, false
	}
	return o.TaxNote, true
}

// HasTaxNote returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxNote() bool {
	if o != nil && !IsNil(o.TaxNote) {
		return true
	}

	return false
}

// SetTaxNote gets a reference to the given string and assigns it to the TaxNote field.
func (o *GLExportTransactionDetail) SetTaxNote(v string) {
	o.TaxNote = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxRate() float64 {
	if o == nil || IsNil(o.TaxRate.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxRate.Get()
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRate.Get(), o.TaxRate.IsSet()
}

// HasTaxRate returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxRate() bool {
	if o != nil && o.TaxRate.IsSet() {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given NullableFloat64 and assigns it to the TaxRate field.
func (o *GLExportTransactionDetail) SetTaxRate(v float64) {
	o.TaxRate.Set(&v)
}
// SetTaxRateNil sets the value for TaxRate to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxRateNil() {
	o.TaxRate.Set(nil)
}

// UnsetTaxRate ensures that no value is present for TaxRate, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxRate() {
	o.TaxRate.Unset()
}

// GetTaxRatePercent returns the TaxRatePercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxRatePercent() float64 {
	if o == nil || IsNil(o.TaxRatePercent.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxRatePercent.Get()
}

// GetTaxRatePercentOk returns a tuple with the TaxRatePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxRatePercentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRatePercent.Get(), o.TaxRatePercent.IsSet()
}

// HasTaxRatePercent returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxRatePercent() bool {
	if o != nil && o.TaxRatePercent.IsSet() {
		return true
	}

	return false
}

// SetTaxRatePercent gets a reference to the given NullableFloat64 and assigns it to the TaxRatePercent field.
func (o *GLExportTransactionDetail) SetTaxRatePercent(v float64) {
	o.TaxRatePercent.Set(&v)
}
// SetTaxRatePercentNil sets the value for TaxRatePercent to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxRatePercentNil() {
	o.TaxRatePercent.Set(nil)
}

// UnsetTaxRatePercent ensures that no value is present for TaxRatePercent, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxRatePercent() {
	o.TaxRatePercent.Unset()
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *GLExportTransactionDetail) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}
// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetTaxable2Flag returns the Taxable2Flag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxable2Flag() bool {
	if o == nil || IsNil(o.Taxable2Flag.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable2Flag.Get()
}

// GetTaxable2FlagOk returns a tuple with the Taxable2Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxable2FlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable2Flag.Get(), o.Taxable2Flag.IsSet()
}

// HasTaxable2Flag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxable2Flag() bool {
	if o != nil && o.Taxable2Flag.IsSet() {
		return true
	}

	return false
}

// SetTaxable2Flag gets a reference to the given NullableBool and assigns it to the Taxable2Flag field.
func (o *GLExportTransactionDetail) SetTaxable2Flag(v bool) {
	o.Taxable2Flag.Set(&v)
}
// SetTaxable2FlagNil sets the value for Taxable2Flag to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxable2FlagNil() {
	o.Taxable2Flag.Set(nil)
}

// UnsetTaxable2Flag ensures that no value is present for Taxable2Flag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxable2Flag() {
	o.Taxable2Flag.Unset()
}

// GetTaxable3Flag returns the Taxable3Flag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxable3Flag() bool {
	if o == nil || IsNil(o.Taxable3Flag.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable3Flag.Get()
}

// GetTaxable3FlagOk returns a tuple with the Taxable3Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxable3FlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable3Flag.Get(), o.Taxable3Flag.IsSet()
}

// HasTaxable3Flag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxable3Flag() bool {
	if o != nil && o.Taxable3Flag.IsSet() {
		return true
	}

	return false
}

// SetTaxable3Flag gets a reference to the given NullableBool and assigns it to the Taxable3Flag field.
func (o *GLExportTransactionDetail) SetTaxable3Flag(v bool) {
	o.Taxable3Flag.Set(&v)
}
// SetTaxable3FlagNil sets the value for Taxable3Flag to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxable3FlagNil() {
	o.Taxable3Flag.Set(nil)
}

// UnsetTaxable3Flag ensures that no value is present for Taxable3Flag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxable3Flag() {
	o.Taxable3Flag.Unset()
}

// GetTaxable4Flag returns the Taxable4Flag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxable4Flag() bool {
	if o == nil || IsNil(o.Taxable4Flag.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable4Flag.Get()
}

// GetTaxable4FlagOk returns a tuple with the Taxable4Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxable4FlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable4Flag.Get(), o.Taxable4Flag.IsSet()
}

// HasTaxable4Flag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxable4Flag() bool {
	if o != nil && o.Taxable4Flag.IsSet() {
		return true
	}

	return false
}

// SetTaxable4Flag gets a reference to the given NullableBool and assigns it to the Taxable4Flag field.
func (o *GLExportTransactionDetail) SetTaxable4Flag(v bool) {
	o.Taxable4Flag.Set(&v)
}
// SetTaxable4FlagNil sets the value for Taxable4Flag to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxable4FlagNil() {
	o.Taxable4Flag.Set(nil)
}

// UnsetTaxable4Flag ensures that no value is present for Taxable4Flag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxable4Flag() {
	o.Taxable4Flag.Unset()
}

// GetTaxable5Flag returns the Taxable5Flag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetTaxable5Flag() bool {
	if o == nil || IsNil(o.Taxable5Flag.Get()) {
		var ret bool
		return ret
	}
	return *o.Taxable5Flag.Get()
}

// GetTaxable5FlagOk returns a tuple with the Taxable5Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetTaxable5FlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taxable5Flag.Get(), o.Taxable5Flag.IsSet()
}

// HasTaxable5Flag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxable5Flag() bool {
	if o != nil && o.Taxable5Flag.IsSet() {
		return true
	}

	return false
}

// SetTaxable5Flag gets a reference to the given NullableBool and assigns it to the Taxable5Flag field.
func (o *GLExportTransactionDetail) SetTaxable5Flag(v bool) {
	o.Taxable5Flag.Set(&v)
}
// SetTaxable5FlagNil sets the value for Taxable5Flag to be an explicit nil
func (o *GLExportTransactionDetail) SetTaxable5FlagNil() {
	o.Taxable5Flag.Set(nil)
}

// UnsetTaxable5Flag ensures that no value is present for Taxable5Flag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetTaxable5Flag() {
	o.Taxable5Flag.Unset()
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetItem() IvItemReference {
	if o == nil || IsNil(o.Item) {
		var ret IvItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetItemOk() (*IvItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given IvItemReference and assigns it to the Item field.
func (o *GLExportTransactionDetail) SetItem(v IvItemReference) {
	o.Item = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetProduct() ProductReference {
	if o == nil || IsNil(o.Product) {
		var ret ProductReference
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetProductOk() (*ProductReference, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given ProductReference and assigns it to the Product field.
func (o *GLExportTransactionDetail) SetProduct(v ProductReference) {
	o.Product = &v
}

// GetItemTaxableFlag returns the ItemTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetItemTaxableFlag() bool {
	if o == nil || IsNil(o.ItemTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ItemTaxableFlag.Get()
}

// GetItemTaxableFlagOk returns a tuple with the ItemTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetItemTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemTaxableFlag.Get(), o.ItemTaxableFlag.IsSet()
}

// HasItemTaxableFlag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasItemTaxableFlag() bool {
	if o != nil && o.ItemTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetItemTaxableFlag gets a reference to the given NullableBool and assigns it to the ItemTaxableFlag field.
func (o *GLExportTransactionDetail) SetItemTaxableFlag(v bool) {
	o.ItemTaxableFlag.Set(&v)
}
// SetItemTaxableFlagNil sets the value for ItemTaxableFlag to be an explicit nil
func (o *GLExportTransactionDetail) SetItemTaxableFlagNil() {
	o.ItemTaxableFlag.Set(nil)
}

// UnsetItemTaxableFlag ensures that no value is present for ItemTaxableFlag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetItemTaxableFlag() {
	o.ItemTaxableFlag.Unset()
}

// GetItemPrice returns the ItemPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetItemPrice() float64 {
	if o == nil || IsNil(o.ItemPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ItemPrice.Get()
}

// GetItemPriceOk returns a tuple with the ItemPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetItemPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemPrice.Get(), o.ItemPrice.IsSet()
}

// HasItemPrice returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasItemPrice() bool {
	if o != nil && o.ItemPrice.IsSet() {
		return true
	}

	return false
}

// SetItemPrice gets a reference to the given NullableFloat64 and assigns it to the ItemPrice field.
func (o *GLExportTransactionDetail) SetItemPrice(v float64) {
	o.ItemPrice.Set(&v)
}
// SetItemPriceNil sets the value for ItemPrice to be an explicit nil
func (o *GLExportTransactionDetail) SetItemPriceNil() {
	o.ItemPrice.Set(nil)
}

// UnsetItemPrice ensures that no value is present for ItemPrice, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetItemPrice() {
	o.ItemPrice.Unset()
}

// GetItemCost returns the ItemCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetItemCost() float64 {
	if o == nil || IsNil(o.ItemCost.Get()) {
		var ret float64
		return ret
	}
	return *o.ItemCost.Get()
}

// GetItemCostOk returns a tuple with the ItemCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetItemCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemCost.Get(), o.ItemCost.IsSet()
}

// HasItemCost returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasItemCost() bool {
	if o != nil && o.ItemCost.IsSet() {
		return true
	}

	return false
}

// SetItemCost gets a reference to the given NullableFloat64 and assigns it to the ItemCost field.
func (o *GLExportTransactionDetail) SetItemCost(v float64) {
	o.ItemCost.Set(&v)
}
// SetItemCostNil sets the value for ItemCost to be an explicit nil
func (o *GLExportTransactionDetail) SetItemCostNil() {
	o.ItemCost.Set(nil)
}

// UnsetItemCost ensures that no value is present for ItemCost, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetItemCost() {
	o.ItemCost.Unset()
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetItemDescription() string {
	if o == nil || IsNil(o.ItemDescription) {
		var ret string
		return ret
	}
	return *o.ItemDescription
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDescription) {
		return nil, false
	}
	return o.ItemDescription, true
}

// HasItemDescription returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasItemDescription() bool {
	if o != nil && !IsNil(o.ItemDescription) {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given string and assigns it to the ItemDescription field.
func (o *GLExportTransactionDetail) SetItemDescription(v string) {
	o.ItemDescription = &v
}

// GetSalesDescription returns the SalesDescription field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetSalesDescription() string {
	if o == nil || IsNil(o.SalesDescription) {
		var ret string
		return ret
	}
	return *o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetSalesDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesDescription) {
		return nil, false
	}
	return o.SalesDescription, true
}

// HasSalesDescription returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasSalesDescription() bool {
	if o != nil && !IsNil(o.SalesDescription) {
		return true
	}

	return false
}

// SetSalesDescription gets a reference to the given string and assigns it to the SalesDescription field.
func (o *GLExportTransactionDetail) SetSalesDescription(v string) {
	o.SalesDescription = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetUnitOfMeasure() UnitOfMeasureReference {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret UnitOfMeasureReference
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetUnitOfMeasureOk() (*UnitOfMeasureReference, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given UnitOfMeasureReference and assigns it to the UnitOfMeasure field.
func (o *GLExportTransactionDetail) SetUnitOfMeasure(v UnitOfMeasureReference) {
	o.UnitOfMeasure = &v
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetSubCategory() ProductSubCategoryReference {
	if o == nil || IsNil(o.SubCategory) {
		var ret ProductSubCategoryReference
		return ret
	}
	return *o.SubCategory
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetSubCategoryOk() (*ProductSubCategoryReference, bool) {
	if o == nil || IsNil(o.SubCategory) {
		return nil, false
	}
	return o.SubCategory, true
}

// HasSubCategory returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasSubCategory() bool {
	if o != nil && !IsNil(o.SubCategory) {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given ProductSubCategoryReference and assigns it to the SubCategory field.
func (o *GLExportTransactionDetail) SetSubCategory(v ProductSubCategoryReference) {
	o.SubCategory = &v
}

// GetSerializedFlag returns the SerializedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetSerializedFlag() bool {
	if o == nil || IsNil(o.SerializedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SerializedFlag.Get()
}

// GetSerializedFlagOk returns a tuple with the SerializedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetSerializedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerializedFlag.Get(), o.SerializedFlag.IsSet()
}

// HasSerializedFlag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasSerializedFlag() bool {
	if o != nil && o.SerializedFlag.IsSet() {
		return true
	}

	return false
}

// SetSerializedFlag gets a reference to the given NullableBool and assigns it to the SerializedFlag field.
func (o *GLExportTransactionDetail) SetSerializedFlag(v bool) {
	o.SerializedFlag.Set(&v)
}
// SetSerializedFlagNil sets the value for SerializedFlag to be an explicit nil
func (o *GLExportTransactionDetail) SetSerializedFlagNil() {
	o.SerializedFlag.Set(nil)
}

// UnsetSerializedFlag ensures that no value is present for SerializedFlag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetSerializedFlag() {
	o.SerializedFlag.Unset()
}

// GetSerialNumbers returns the SerialNumbers field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetSerialNumbers() string {
	if o == nil || IsNil(o.SerialNumbers) {
		var ret string
		return ret
	}
	return *o.SerialNumbers
}

// GetSerialNumbersOk returns a tuple with the SerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetSerialNumbersOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumbers) {
		return nil, false
	}
	return o.SerialNumbers, true
}

// HasSerialNumbers returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasSerialNumbers() bool {
	if o != nil && !IsNil(o.SerialNumbers) {
		return true
	}

	return false
}

// SetSerialNumbers gets a reference to the given string and assigns it to the SerialNumbers field.
func (o *GLExportTransactionDetail) SetSerialNumbers(v string) {
	o.SerialNumbers = &v
}

// GetWarehouseSite returns the WarehouseSite field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetWarehouseSite() SiteReference {
	if o == nil || IsNil(o.WarehouseSite) {
		var ret SiteReference
		return ret
	}
	return *o.WarehouseSite
}

// GetWarehouseSiteOk returns a tuple with the WarehouseSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetWarehouseSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.WarehouseSite) {
		return nil, false
	}
	return o.WarehouseSite, true
}

// HasWarehouseSite returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasWarehouseSite() bool {
	if o != nil && !IsNil(o.WarehouseSite) {
		return true
	}

	return false
}

// SetWarehouseSite gets a reference to the given SiteReference and assigns it to the WarehouseSite field.
func (o *GLExportTransactionDetail) SetWarehouseSite(v SiteReference) {
	o.WarehouseSite = &v
}

// GetWarehouseBin returns the WarehouseBin field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetWarehouseBin() WarehouseBinReference {
	if o == nil || IsNil(o.WarehouseBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.WarehouseBin
}

// GetWarehouseBinOk returns a tuple with the WarehouseBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetWarehouseBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.WarehouseBin) {
		return nil, false
	}
	return o.WarehouseBin, true
}

// HasWarehouseBin returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasWarehouseBin() bool {
	if o != nil && !IsNil(o.WarehouseBin) {
		return true
	}

	return false
}

// SetWarehouseBin gets a reference to the given WarehouseBinReference and assigns it to the WarehouseBin field.
func (o *GLExportTransactionDetail) SetWarehouseBin(v WarehouseBinReference) {
	o.WarehouseBin = &v
}

// GetShipmentMethod returns the ShipmentMethod field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetShipmentMethod() ShipmentMethodReference {
	if o == nil || IsNil(o.ShipmentMethod) {
		var ret ShipmentMethodReference
		return ret
	}
	return *o.ShipmentMethod
}

// GetShipmentMethodOk returns a tuple with the ShipmentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetShipmentMethodOk() (*ShipmentMethodReference, bool) {
	if o == nil || IsNil(o.ShipmentMethod) {
		return nil, false
	}
	return o.ShipmentMethod, true
}

// HasShipmentMethod returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasShipmentMethod() bool {
	if o != nil && !IsNil(o.ShipmentMethod) {
		return true
	}

	return false
}

// SetShipmentMethod gets a reference to the given ShipmentMethodReference and assigns it to the ShipmentMethod field.
func (o *GLExportTransactionDetail) SetShipmentMethod(v ShipmentMethodReference) {
	o.ShipmentMethod = &v
}

// GetDropShippedFlag returns the DropShippedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GLExportTransactionDetail) GetDropShippedFlag() bool {
	if o == nil || IsNil(o.DropShippedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropShippedFlag.Get()
}

// GetDropShippedFlagOk returns a tuple with the DropShippedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GLExportTransactionDetail) GetDropShippedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropShippedFlag.Get(), o.DropShippedFlag.IsSet()
}

// HasDropShippedFlag returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasDropShippedFlag() bool {
	if o != nil && o.DropShippedFlag.IsSet() {
		return true
	}

	return false
}

// SetDropShippedFlag gets a reference to the given NullableBool and assigns it to the DropShippedFlag field.
func (o *GLExportTransactionDetail) SetDropShippedFlag(v bool) {
	o.DropShippedFlag.Set(&v)
}
// SetDropShippedFlagNil sets the value for DropShippedFlag to be an explicit nil
func (o *GLExportTransactionDetail) SetDropShippedFlagNil() {
	o.DropShippedFlag.Set(nil)
}

// UnsetDropShippedFlag ensures that no value is present for DropShippedFlag, not even an explicit nil
func (o *GLExportTransactionDetail) UnsetDropShippedFlag() {
	o.DropShippedFlag.Unset()
}

// GetItemTypeXref returns the ItemTypeXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetItemTypeXref() string {
	if o == nil || IsNil(o.ItemTypeXref) {
		var ret string
		return ret
	}
	return *o.ItemTypeXref
}

// GetItemTypeXrefOk returns a tuple with the ItemTypeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetItemTypeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.ItemTypeXref) {
		return nil, false
	}
	return o.ItemTypeXref, true
}

// HasItemTypeXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasItemTypeXref() bool {
	if o != nil && !IsNil(o.ItemTypeXref) {
		return true
	}

	return false
}

// SetItemTypeXref gets a reference to the given string and assigns it to the ItemTypeXref field.
func (o *GLExportTransactionDetail) SetItemTypeXref(v string) {
	o.ItemTypeXref = &v
}

// GetInventoryXref returns the InventoryXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetInventoryXref() string {
	if o == nil || IsNil(o.InventoryXref) {
		var ret string
		return ret
	}
	return *o.InventoryXref
}

// GetInventoryXrefOk returns a tuple with the InventoryXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetInventoryXrefOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryXref) {
		return nil, false
	}
	return o.InventoryXref, true
}

// HasInventoryXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasInventoryXref() bool {
	if o != nil && !IsNil(o.InventoryXref) {
		return true
	}

	return false
}

// SetInventoryXref gets a reference to the given string and assigns it to the InventoryXref field.
func (o *GLExportTransactionDetail) SetInventoryXref(v string) {
	o.InventoryXref = &v
}

// GetCogsXref returns the CogsXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetCogsXref() string {
	if o == nil || IsNil(o.CogsXref) {
		var ret string
		return ret
	}
	return *o.CogsXref
}

// GetCogsXrefOk returns a tuple with the CogsXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetCogsXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CogsXref) {
		return nil, false
	}
	return o.CogsXref, true
}

// HasCogsXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasCogsXref() bool {
	if o != nil && !IsNil(o.CogsXref) {
		return true
	}

	return false
}

// SetCogsXref gets a reference to the given string and assigns it to the CogsXref field.
func (o *GLExportTransactionDetail) SetCogsXref(v string) {
	o.CogsXref = &v
}

// GetUomScheduleXref returns the UomScheduleXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetUomScheduleXref() string {
	if o == nil || IsNil(o.UomScheduleXref) {
		var ret string
		return ret
	}
	return *o.UomScheduleXref
}

// GetUomScheduleXrefOk returns a tuple with the UomScheduleXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetUomScheduleXrefOk() (*string, bool) {
	if o == nil || IsNil(o.UomScheduleXref) {
		return nil, false
	}
	return o.UomScheduleXref, true
}

// HasUomScheduleXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasUomScheduleXref() bool {
	if o != nil && !IsNil(o.UomScheduleXref) {
		return true
	}

	return false
}

// SetUomScheduleXref gets a reference to the given string and assigns it to the UomScheduleXref field.
func (o *GLExportTransactionDetail) SetUomScheduleXref(v string) {
	o.UomScheduleXref = &v
}

// GetPriceLevelXref returns the PriceLevelXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetPriceLevelXref() string {
	if o == nil || IsNil(o.PriceLevelXref) {
		var ret string
		return ret
	}
	return *o.PriceLevelXref
}

// GetPriceLevelXrefOk returns a tuple with the PriceLevelXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetPriceLevelXrefOk() (*string, bool) {
	if o == nil || IsNil(o.PriceLevelXref) {
		return nil, false
	}
	return o.PriceLevelXref, true
}

// HasPriceLevelXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasPriceLevelXref() bool {
	if o != nil && !IsNil(o.PriceLevelXref) {
		return true
	}

	return false
}

// SetPriceLevelXref gets a reference to the given string and assigns it to the PriceLevelXref field.
func (o *GLExportTransactionDetail) SetPriceLevelXref(v string) {
	o.PriceLevelXref = &v
}

// GetLocationXref returns the LocationXref field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetLocationXref() string {
	if o == nil || IsNil(o.LocationXref) {
		var ret string
		return ret
	}
	return *o.LocationXref
}

// GetLocationXrefOk returns a tuple with the LocationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetLocationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LocationXref) {
		return nil, false
	}
	return o.LocationXref, true
}

// HasLocationXref returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasLocationXref() bool {
	if o != nil && !IsNil(o.LocationXref) {
		return true
	}

	return false
}

// SetLocationXref gets a reference to the given string and assigns it to the LocationXref field.
func (o *GLExportTransactionDetail) SetLocationXref(v string) {
	o.LocationXref = &v
}

// GetTaxLevels returns the TaxLevels field value if set, zero value otherwise.
func (o *GLExportTransactionDetail) GetTaxLevels() []GLExportTransactionDetailTaxLevel {
	if o == nil || IsNil(o.TaxLevels) {
		var ret []GLExportTransactionDetailTaxLevel
		return ret
	}
	return o.TaxLevels
}

// GetTaxLevelsOk returns a tuple with the TaxLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLExportTransactionDetail) GetTaxLevelsOk() ([]GLExportTransactionDetailTaxLevel, bool) {
	if o == nil || IsNil(o.TaxLevels) {
		return nil, false
	}
	return o.TaxLevels, true
}

// HasTaxLevels returns a boolean if a field has been set.
func (o *GLExportTransactionDetail) HasTaxLevels() bool {
	if o != nil && !IsNil(o.TaxLevels) {
		return true
	}

	return false
}

// SetTaxLevels gets a reference to the given []GLExportTransactionDetailTaxLevel and assigns it to the TaxLevels field.
func (o *GLExportTransactionDetail) SetTaxLevels(v []GLExportTransactionDetailTaxLevel) {
	o.TaxLevels = v
}

func (o GLExportTransactionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLExportTransactionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.DocumentDate) {
		toSerialize["documentDate"] = o.DocumentDate
	}
	if !IsNil(o.DocumentType) {
		toSerialize["documentType"] = o.DocumentType
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.GlClass) {
		toSerialize["glClass"] = o.GlClass
	}
	if !IsNil(o.GlTypeId) {
		toSerialize["glTypeId"] = o.GlTypeId
	}
	if !IsNil(o.GlItemId) {
		toSerialize["glItemId"] = o.GlItemId
	}
	if !IsNil(o.InvoiceSummaryOption) {
		toSerialize["invoiceSummaryOption"] = o.InvoiceSummaryOption
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if !IsNil(o.SalesCode) {
		toSerialize["salesCode"] = o.SalesCode
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.TimeEntry) {
		toSerialize["timeEntry"] = o.TimeEntry
	}
	if !IsNil(o.CostAccountNumber) {
		toSerialize["costAccountNumber"] = o.CostAccountNumber
	}
	if !IsNil(o.InventoryAccountNumber) {
		toSerialize["inventoryAccountNumber"] = o.InventoryAccountNumber
	}
	if !IsNil(o.ProductAccountNumber) {
		toSerialize["productAccountNumber"] = o.ProductAccountNumber
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.TaxCodeXref) {
		toSerialize["taxCodeXref"] = o.TaxCodeXref
	}
	if !IsNil(o.TaxAgencyXref) {
		toSerialize["taxAgencyXref"] = o.TaxAgencyXref
	}
	if !IsNil(o.TaxNote) {
		toSerialize["taxNote"] = o.TaxNote
	}
	if o.TaxRate.IsSet() {
		toSerialize["taxRate"] = o.TaxRate.Get()
	}
	if o.TaxRatePercent.IsSet() {
		toSerialize["taxRatePercent"] = o.TaxRatePercent.Get()
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if o.Taxable2Flag.IsSet() {
		toSerialize["taxable2Flag"] = o.Taxable2Flag.Get()
	}
	if o.Taxable3Flag.IsSet() {
		toSerialize["taxable3Flag"] = o.Taxable3Flag.Get()
	}
	if o.Taxable4Flag.IsSet() {
		toSerialize["taxable4Flag"] = o.Taxable4Flag.Get()
	}
	if o.Taxable5Flag.IsSet() {
		toSerialize["taxable5Flag"] = o.Taxable5Flag.Get()
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if o.ItemTaxableFlag.IsSet() {
		toSerialize["itemTaxableFlag"] = o.ItemTaxableFlag.Get()
	}
	if o.ItemPrice.IsSet() {
		toSerialize["itemPrice"] = o.ItemPrice.Get()
	}
	if o.ItemCost.IsSet() {
		toSerialize["itemCost"] = o.ItemCost.Get()
	}
	if !IsNil(o.ItemDescription) {
		toSerialize["itemDescription"] = o.ItemDescription
	}
	if !IsNil(o.SalesDescription) {
		toSerialize["salesDescription"] = o.SalesDescription
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if !IsNil(o.SubCategory) {
		toSerialize["subCategory"] = o.SubCategory
	}
	if o.SerializedFlag.IsSet() {
		toSerialize["serializedFlag"] = o.SerializedFlag.Get()
	}
	if !IsNil(o.SerialNumbers) {
		toSerialize["serialNumbers"] = o.SerialNumbers
	}
	if !IsNil(o.WarehouseSite) {
		toSerialize["warehouseSite"] = o.WarehouseSite
	}
	if !IsNil(o.WarehouseBin) {
		toSerialize["warehouseBin"] = o.WarehouseBin
	}
	if !IsNil(o.ShipmentMethod) {
		toSerialize["shipmentMethod"] = o.ShipmentMethod
	}
	if o.DropShippedFlag.IsSet() {
		toSerialize["dropShippedFlag"] = o.DropShippedFlag.Get()
	}
	if !IsNil(o.ItemTypeXref) {
		toSerialize["itemTypeXref"] = o.ItemTypeXref
	}
	if !IsNil(o.InventoryXref) {
		toSerialize["inventoryXref"] = o.InventoryXref
	}
	if !IsNil(o.CogsXref) {
		toSerialize["cogsXref"] = o.CogsXref
	}
	if !IsNil(o.UomScheduleXref) {
		toSerialize["uomScheduleXref"] = o.UomScheduleXref
	}
	if !IsNil(o.PriceLevelXref) {
		toSerialize["priceLevelXref"] = o.PriceLevelXref
	}
	if !IsNil(o.LocationXref) {
		toSerialize["locationXref"] = o.LocationXref
	}
	if !IsNil(o.TaxLevels) {
		toSerialize["taxLevels"] = o.TaxLevels
	}
	return toSerialize, nil
}

type NullableGLExportTransactionDetail struct {
	value *GLExportTransactionDetail
	isSet bool
}

func (v NullableGLExportTransactionDetail) Get() *GLExportTransactionDetail {
	return v.value
}

func (v *NullableGLExportTransactionDetail) Set(val *GLExportTransactionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableGLExportTransactionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableGLExportTransactionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLExportTransactionDetail(val *GLExportTransactionDetail) *NullableGLExportTransactionDetail {
	return &NullableGLExportTransactionDetail{value: val, isSet: true}
}

func (v NullableGLExportTransactionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLExportTransactionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


