/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the HolidayInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HolidayInfo{}

// HolidayInfo struct for HolidayInfo
type HolidayInfo struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	// Can be set to false to set a holiday for specific hours (Defaults to True).
	AllDayFlag NullableBool `json:"allDayFlag,omitempty"`
	Date *string `json:"date,omitempty"`
	TimeStart *string `json:"timeStart,omitempty"`
	TimeEnd *string `json:"timeEnd,omitempty"`
	HolidayList *HolidayListReference `json:"holidayList,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewHolidayInfo instantiates a new HolidayInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHolidayInfo() *HolidayInfo {
	this := HolidayInfo{}
	return &this
}

// NewHolidayInfoWithDefaults instantiates a new HolidayInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHolidayInfoWithDefaults() *HolidayInfo {
	this := HolidayInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HolidayInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HolidayInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *HolidayInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HolidayInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HolidayInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HolidayInfo) SetName(v string) {
	o.Name = &v
}

// GetAllDayFlag returns the AllDayFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HolidayInfo) GetAllDayFlag() bool {
	if o == nil || IsNil(o.AllDayFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllDayFlag.Get()
}

// GetAllDayFlagOk returns a tuple with the AllDayFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HolidayInfo) GetAllDayFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllDayFlag.Get(), o.AllDayFlag.IsSet()
}

// HasAllDayFlag returns a boolean if a field has been set.
func (o *HolidayInfo) HasAllDayFlag() bool {
	if o != nil && o.AllDayFlag.IsSet() {
		return true
	}

	return false
}

// SetAllDayFlag gets a reference to the given NullableBool and assigns it to the AllDayFlag field.
func (o *HolidayInfo) SetAllDayFlag(v bool) {
	o.AllDayFlag.Set(&v)
}
// SetAllDayFlagNil sets the value for AllDayFlag to be an explicit nil
func (o *HolidayInfo) SetAllDayFlagNil() {
	o.AllDayFlag.Set(nil)
}

// UnsetAllDayFlag ensures that no value is present for AllDayFlag, not even an explicit nil
func (o *HolidayInfo) UnsetAllDayFlag() {
	o.AllDayFlag.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HolidayInfo) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HolidayInfo) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *HolidayInfo) SetDate(v string) {
	o.Date = &v
}

// GetTimeStart returns the TimeStart field value if set, zero value otherwise.
func (o *HolidayInfo) GetTimeStart() string {
	if o == nil || IsNil(o.TimeStart) {
		var ret string
		return ret
	}
	return *o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetTimeStartOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStart) {
		return nil, false
	}
	return o.TimeStart, true
}

// HasTimeStart returns a boolean if a field has been set.
func (o *HolidayInfo) HasTimeStart() bool {
	if o != nil && !IsNil(o.TimeStart) {
		return true
	}

	return false
}

// SetTimeStart gets a reference to the given string and assigns it to the TimeStart field.
func (o *HolidayInfo) SetTimeStart(v string) {
	o.TimeStart = &v
}

// GetTimeEnd returns the TimeEnd field value if set, zero value otherwise.
func (o *HolidayInfo) GetTimeEnd() string {
	if o == nil || IsNil(o.TimeEnd) {
		var ret string
		return ret
	}
	return *o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetTimeEndOk() (*string, bool) {
	if o == nil || IsNil(o.TimeEnd) {
		return nil, false
	}
	return o.TimeEnd, true
}

// HasTimeEnd returns a boolean if a field has been set.
func (o *HolidayInfo) HasTimeEnd() bool {
	if o != nil && !IsNil(o.TimeEnd) {
		return true
	}

	return false
}

// SetTimeEnd gets a reference to the given string and assigns it to the TimeEnd field.
func (o *HolidayInfo) SetTimeEnd(v string) {
	o.TimeEnd = &v
}

// GetHolidayList returns the HolidayList field value if set, zero value otherwise.
func (o *HolidayInfo) GetHolidayList() HolidayListReference {
	if o == nil || IsNil(o.HolidayList) {
		var ret HolidayListReference
		return ret
	}
	return *o.HolidayList
}

// GetHolidayListOk returns a tuple with the HolidayList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetHolidayListOk() (*HolidayListReference, bool) {
	if o == nil || IsNil(o.HolidayList) {
		return nil, false
	}
	return o.HolidayList, true
}

// HasHolidayList returns a boolean if a field has been set.
func (o *HolidayInfo) HasHolidayList() bool {
	if o != nil && !IsNil(o.HolidayList) {
		return true
	}

	return false
}

// SetHolidayList gets a reference to the given HolidayListReference and assigns it to the HolidayList field.
func (o *HolidayInfo) SetHolidayList(v HolidayListReference) {
	o.HolidayList = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *HolidayInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HolidayInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *HolidayInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *HolidayInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o HolidayInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HolidayInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.AllDayFlag.IsSet() {
		toSerialize["allDayFlag"] = o.AllDayFlag.Get()
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.TimeStart) {
		toSerialize["timeStart"] = o.TimeStart
	}
	if !IsNil(o.TimeEnd) {
		toSerialize["timeEnd"] = o.TimeEnd
	}
	if !IsNil(o.HolidayList) {
		toSerialize["holidayList"] = o.HolidayList
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableHolidayInfo struct {
	value *HolidayInfo
	isSet bool
}

func (v NullableHolidayInfo) Get() *HolidayInfo {
	return v.value
}

func (v *NullableHolidayInfo) Set(val *HolidayInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHolidayInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHolidayInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHolidayInfo(val *HolidayInfo) *NullableHolidayInfo {
	return &NullableHolidayInfo{value: val, isSet: true}
}

func (v NullableHolidayInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHolidayInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


