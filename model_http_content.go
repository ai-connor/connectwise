/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the HttpContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpContent{}

// HttpContent struct for HttpContent
type HttpContent struct {
	Headers []interface{} `json:"headers,omitempty"`
}

// NewHttpContent instantiates a new HttpContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpContent() *HttpContent {
	this := HttpContent{}
	return &this
}

// NewHttpContentWithDefaults instantiates a new HttpContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpContentWithDefaults() *HttpContent {
	this := HttpContent{}
	return &this
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpContent) GetHeaders() []interface{} {
	if o == nil || IsNil(o.Headers) {
		var ret []interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpContent) GetHeadersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpContent) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []interface{} and assigns it to the Headers field.
func (o *HttpContent) SetHeaders(v []interface{}) {
	o.Headers = v
}

func (o HttpContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

type NullableHttpContent struct {
	value *HttpContent
	isSet bool
}

func (v NullableHttpContent) Get() *HttpContent {
	return v.value
}

func (v *NullableHttpContent) Set(val *HttpContent) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpContent) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpContent(val *HttpContent) *NullableHttpContent {
	return &NullableHttpContent{value: val, isSet: true}
}

func (v NullableHttpContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


