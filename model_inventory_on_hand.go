/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the InventoryOnHand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryOnHand{}

// InventoryOnHand struct for InventoryOnHand
type InventoryOnHand struct {
	Id *int32 `json:"id,omitempty"`
	CatalogItem *CatalogItemReference `json:"catalogItem,omitempty"`
	Warehouse *WarehouseReference `json:"warehouse,omitempty"`
	WarehouseBin *WarehouseBinReference `json:"warehouseBin,omitempty"`
	OnHand NullableInt32 `json:"onHand,omitempty"`
	SerialNumbers []OnHandSerialNumberReference `json:"serialNumbers,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewInventoryOnHand instantiates a new InventoryOnHand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryOnHand() *InventoryOnHand {
	this := InventoryOnHand{}
	return &this
}

// NewInventoryOnHandWithDefaults instantiates a new InventoryOnHand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryOnHandWithDefaults() *InventoryOnHand {
	this := InventoryOnHand{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InventoryOnHand) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryOnHand) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InventoryOnHand) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InventoryOnHand) SetId(v int32) {
	o.Id = &v
}

// GetCatalogItem returns the CatalogItem field value if set, zero value otherwise.
func (o *InventoryOnHand) GetCatalogItem() CatalogItemReference {
	if o == nil || IsNil(o.CatalogItem) {
		var ret CatalogItemReference
		return ret
	}
	return *o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryOnHand) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil || IsNil(o.CatalogItem) {
		return nil, false
	}
	return o.CatalogItem, true
}

// HasCatalogItem returns a boolean if a field has been set.
func (o *InventoryOnHand) HasCatalogItem() bool {
	if o != nil && !IsNil(o.CatalogItem) {
		return true
	}

	return false
}

// SetCatalogItem gets a reference to the given CatalogItemReference and assigns it to the CatalogItem field.
func (o *InventoryOnHand) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *InventoryOnHand) GetWarehouse() WarehouseReference {
	if o == nil || IsNil(o.Warehouse) {
		var ret WarehouseReference
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryOnHand) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *InventoryOnHand) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given WarehouseReference and assigns it to the Warehouse field.
func (o *InventoryOnHand) SetWarehouse(v WarehouseReference) {
	o.Warehouse = &v
}

// GetWarehouseBin returns the WarehouseBin field value if set, zero value otherwise.
func (o *InventoryOnHand) GetWarehouseBin() WarehouseBinReference {
	if o == nil || IsNil(o.WarehouseBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.WarehouseBin
}

// GetWarehouseBinOk returns a tuple with the WarehouseBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryOnHand) GetWarehouseBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.WarehouseBin) {
		return nil, false
	}
	return o.WarehouseBin, true
}

// HasWarehouseBin returns a boolean if a field has been set.
func (o *InventoryOnHand) HasWarehouseBin() bool {
	if o != nil && !IsNil(o.WarehouseBin) {
		return true
	}

	return false
}

// SetWarehouseBin gets a reference to the given WarehouseBinReference and assigns it to the WarehouseBin field.
func (o *InventoryOnHand) SetWarehouseBin(v WarehouseBinReference) {
	o.WarehouseBin = &v
}

// GetOnHand returns the OnHand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InventoryOnHand) GetOnHand() int32 {
	if o == nil || IsNil(o.OnHand.Get()) {
		var ret int32
		return ret
	}
	return *o.OnHand.Get()
}

// GetOnHandOk returns a tuple with the OnHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InventoryOnHand) GetOnHandOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnHand.Get(), o.OnHand.IsSet()
}

// HasOnHand returns a boolean if a field has been set.
func (o *InventoryOnHand) HasOnHand() bool {
	if o != nil && o.OnHand.IsSet() {
		return true
	}

	return false
}

// SetOnHand gets a reference to the given NullableInt32 and assigns it to the OnHand field.
func (o *InventoryOnHand) SetOnHand(v int32) {
	o.OnHand.Set(&v)
}
// SetOnHandNil sets the value for OnHand to be an explicit nil
func (o *InventoryOnHand) SetOnHandNil() {
	o.OnHand.Set(nil)
}

// UnsetOnHand ensures that no value is present for OnHand, not even an explicit nil
func (o *InventoryOnHand) UnsetOnHand() {
	o.OnHand.Unset()
}

// GetSerialNumbers returns the SerialNumbers field value if set, zero value otherwise.
func (o *InventoryOnHand) GetSerialNumbers() []OnHandSerialNumberReference {
	if o == nil || IsNil(o.SerialNumbers) {
		var ret []OnHandSerialNumberReference
		return ret
	}
	return o.SerialNumbers
}

// GetSerialNumbersOk returns a tuple with the SerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryOnHand) GetSerialNumbersOk() ([]OnHandSerialNumberReference, bool) {
	if o == nil || IsNil(o.SerialNumbers) {
		return nil, false
	}
	return o.SerialNumbers, true
}

// HasSerialNumbers returns a boolean if a field has been set.
func (o *InventoryOnHand) HasSerialNumbers() bool {
	if o != nil && !IsNil(o.SerialNumbers) {
		return true
	}

	return false
}

// SetSerialNumbers gets a reference to the given []OnHandSerialNumberReference and assigns it to the SerialNumbers field.
func (o *InventoryOnHand) SetSerialNumbers(v []OnHandSerialNumberReference) {
	o.SerialNumbers = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *InventoryOnHand) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryOnHand) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *InventoryOnHand) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *InventoryOnHand) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o InventoryOnHand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryOnHand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CatalogItem) {
		toSerialize["catalogItem"] = o.CatalogItem
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.WarehouseBin) {
		toSerialize["warehouseBin"] = o.WarehouseBin
	}
	if o.OnHand.IsSet() {
		toSerialize["onHand"] = o.OnHand.Get()
	}
	if !IsNil(o.SerialNumbers) {
		toSerialize["serialNumbers"] = o.SerialNumbers
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableInventoryOnHand struct {
	value *InventoryOnHand
	isSet bool
}

func (v NullableInventoryOnHand) Get() *InventoryOnHand {
	return v.value
}

func (v *NullableInventoryOnHand) Set(val *InventoryOnHand) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryOnHand) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryOnHand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryOnHand(val *InventoryOnHand) *NullableInventoryOnHand {
	return &NullableInventoryOnHand{value: val, isSet: true}
}

func (v NullableInventoryOnHand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryOnHand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


