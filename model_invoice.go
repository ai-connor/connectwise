/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Invoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invoice{}

// Invoice struct for Invoice
type Invoice struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 15; Required On Updates;
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	Type NullableString `json:"type"`
	Status *BillingStatusReference `json:"status,omitempty"`
	Company CompanyReference `json:"company"`
	BillToCompany *CompanyReference `json:"billToCompany,omitempty"`
	ShipToCompany *CompanyReference `json:"shipToCompany,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	ApplyToType NullableString `json:"applyToType,omitempty"`
	ApplyToId NullableInt32 `json:"applyToId,omitempty"`
	//  Max length: 60;
	Attention *string `json:"attention,omitempty"`
	//  Max length: 60;
	ShipToAttention *string `json:"shipToAttention,omitempty"`
	BillingSite *SiteReference `json:"billingSite,omitempty"`
	BillingSiteAddressLine1 *string `json:"billingSiteAddressLine1,omitempty"`
	BillingSiteAddressLine2 *string `json:"billingSiteAddressLine2,omitempty"`
	BillingSiteCity *string `json:"billingSiteCity,omitempty"`
	BillingSiteState *string `json:"billingSiteState,omitempty"`
	BillingSiteZip *string `json:"billingSiteZip,omitempty"`
	BillingSiteCountry *string `json:"billingSiteCountry,omitempty"`
	ShippingSite *SiteReference `json:"shippingSite,omitempty"`
	ShippingSiteAddressLine1 *string `json:"shippingSiteAddressLine1,omitempty"`
	ShippingSiteAddressLine2 *string `json:"shippingSiteAddressLine2,omitempty"`
	ShippingSiteCity *string `json:"shippingSiteCity,omitempty"`
	ShippingSiteState *string `json:"shippingSiteState,omitempty"`
	ShippingSiteZip *string `json:"shippingSiteZip,omitempty"`
	ShippingSiteCountry *string `json:"shippingSiteCountry,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	//  Max length: 50;
	Reference *string `json:"reference,omitempty"`
	//  Max length: 50;
	CustomerPO *string `json:"customerPO,omitempty"`
	// Can be obtained via InvoiceTemplate report.
	TemplateSetupId NullableInt32 `json:"templateSetupId,omitempty"`
	InvoiceTemplate *InvoiceTemplateDetailReference `json:"invoiceTemplate,omitempty"`
	// Can be obtained via InvoiceEmailTemplate report.
	EmailTemplateId NullableInt32 `json:"emailTemplateId,omitempty"`
	AddToBatchEmailList NullableBool `json:"addToBatchEmailList,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	RestrictDownpaymentFlag NullableBool `json:"restrictDownpaymentFlag,omitempty"`
	//  Required On Updates;
	LocationId NullableInt32 `json:"locationId,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	// departmentId is only required for special invoices.
	DepartmentId NullableInt32 `json:"departmentId,omitempty"`
	Department *BillingUnitReference `json:"department,omitempty"`
	TerritoryId NullableInt32 `json:"territoryId,omitempty"`
	Territory *SystemLocationReference `json:"territory,omitempty"`
	TopComment *string `json:"topComment,omitempty"`
	BottomComment *string `json:"bottomComment,omitempty"`
	TaxableFlag NullableBool `json:"taxableFlag,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	InternalNotes *string `json:"internalNotes,omitempty"`
	DownpaymentPreviouslyTaxedFlag NullableBool `json:"downpaymentPreviouslyTaxedFlag,omitempty"`
	ServiceTotal NullableFloat64 `json:"serviceTotal,omitempty"`
	OverrideDownPaymentAmountFlag NullableBool `json:"overrideDownPaymentAmountFlag,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	DueDate *time.Time `json:"dueDate,omitempty"`
	ExpenseTotal NullableFloat64 `json:"expenseTotal,omitempty"`
	ProductTotal NullableFloat64 `json:"productTotal,omitempty"`
	PreviousProgressApplied NullableFloat64 `json:"previousProgressApplied,omitempty"`
	ServiceAdjustmentAmount NullableFloat64 `json:"serviceAdjustmentAmount,omitempty"`
	AgreementAmount NullableFloat64 `json:"agreementAmount,omitempty"`
	DownpaymentApplied NullableFloat64 `json:"downpaymentApplied,omitempty"`
	Subtotal NullableFloat64 `json:"subtotal,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	RemainingDownpayment NullableFloat64 `json:"remainingDownpayment,omitempty"`
	SalesTax NullableFloat64 `json:"salesTax,omitempty"`
	AdjustmentReason *string `json:"adjustmentReason,omitempty"`
	AdjustedBy *string `json:"adjustedBy,omitempty"`
	ClosedBy *string `json:"closedBy,omitempty"`
	Payments NullableFloat64 `json:"payments,omitempty"`
	Credits NullableFloat64 `json:"credits,omitempty"`
	Balance NullableFloat64 `json:"balance,omitempty"`
	SpecialInvoiceFlag NullableBool `json:"specialInvoiceFlag,omitempty"`
	BillingSetupReference *BillingSetupReference `json:"billingSetupReference,omitempty"`
	Ticket *TicketReference `json:"ticket,omitempty"`
	Project *ProjectReference `json:"project,omitempty"`
	Phase *ProjectPhaseReference `json:"phase,omitempty"`
	SalesOrder *SalesOrderReference `json:"salesOrder,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	GlBatch *BatchReference `json:"glBatch,omitempty"`
	UnbatchedBatch *BatchReference `json:"unbatchedBatch,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _Invoice Invoice

// NewInvoice instantiates a new Invoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice(type_ NullableString, company CompanyReference) *Invoice {
	this := Invoice{}
	this.Type = type_
	this.Company = company
	return &this
}

// NewInvoiceWithDefaults instantiates a new Invoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	this := Invoice{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Invoice) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Invoice) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Invoice) SetId(v int32) {
	o.Id = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *Invoice) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *Invoice) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Invoice) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *Invoice) SetType(v string) {
	o.Type.Set(&v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Invoice) GetStatus() BillingStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret BillingStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStatusOk() (*BillingStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Invoice) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given BillingStatusReference and assigns it to the Status field.
func (o *Invoice) SetStatus(v BillingStatusReference) {
	o.Status = &v
}

// GetCompany returns the Company field value
func (o *Invoice) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Invoice) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Invoice) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *Invoice) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *Invoice) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *Invoice) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *Invoice) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *Invoice) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *Invoice) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *Invoice) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *Invoice) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *Invoice) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetApplyToType returns the ApplyToType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetApplyToType() string {
	if o == nil || IsNil(o.ApplyToType.Get()) {
		var ret string
		return ret
	}
	return *o.ApplyToType.Get()
}

// GetApplyToTypeOk returns a tuple with the ApplyToType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetApplyToTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplyToType.Get(), o.ApplyToType.IsSet()
}

// HasApplyToType returns a boolean if a field has been set.
func (o *Invoice) HasApplyToType() bool {
	if o != nil && o.ApplyToType.IsSet() {
		return true
	}

	return false
}

// SetApplyToType gets a reference to the given NullableString and assigns it to the ApplyToType field.
func (o *Invoice) SetApplyToType(v string) {
	o.ApplyToType.Set(&v)
}
// SetApplyToTypeNil sets the value for ApplyToType to be an explicit nil
func (o *Invoice) SetApplyToTypeNil() {
	o.ApplyToType.Set(nil)
}

// UnsetApplyToType ensures that no value is present for ApplyToType, not even an explicit nil
func (o *Invoice) UnsetApplyToType() {
	o.ApplyToType.Unset()
}

// GetApplyToId returns the ApplyToId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetApplyToId() int32 {
	if o == nil || IsNil(o.ApplyToId.Get()) {
		var ret int32
		return ret
	}
	return *o.ApplyToId.Get()
}

// GetApplyToIdOk returns a tuple with the ApplyToId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetApplyToIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplyToId.Get(), o.ApplyToId.IsSet()
}

// HasApplyToId returns a boolean if a field has been set.
func (o *Invoice) HasApplyToId() bool {
	if o != nil && o.ApplyToId.IsSet() {
		return true
	}

	return false
}

// SetApplyToId gets a reference to the given NullableInt32 and assigns it to the ApplyToId field.
func (o *Invoice) SetApplyToId(v int32) {
	o.ApplyToId.Set(&v)
}
// SetApplyToIdNil sets the value for ApplyToId to be an explicit nil
func (o *Invoice) SetApplyToIdNil() {
	o.ApplyToId.Set(nil)
}

// UnsetApplyToId ensures that no value is present for ApplyToId, not even an explicit nil
func (o *Invoice) UnsetApplyToId() {
	o.ApplyToId.Unset()
}

// GetAttention returns the Attention field value if set, zero value otherwise.
func (o *Invoice) GetAttention() string {
	if o == nil || IsNil(o.Attention) {
		var ret string
		return ret
	}
	return *o.Attention
}

// GetAttentionOk returns a tuple with the Attention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAttentionOk() (*string, bool) {
	if o == nil || IsNil(o.Attention) {
		return nil, false
	}
	return o.Attention, true
}

// HasAttention returns a boolean if a field has been set.
func (o *Invoice) HasAttention() bool {
	if o != nil && !IsNil(o.Attention) {
		return true
	}

	return false
}

// SetAttention gets a reference to the given string and assigns it to the Attention field.
func (o *Invoice) SetAttention(v string) {
	o.Attention = &v
}

// GetShipToAttention returns the ShipToAttention field value if set, zero value otherwise.
func (o *Invoice) GetShipToAttention() string {
	if o == nil || IsNil(o.ShipToAttention) {
		var ret string
		return ret
	}
	return *o.ShipToAttention
}

// GetShipToAttentionOk returns a tuple with the ShipToAttention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShipToAttentionOk() (*string, bool) {
	if o == nil || IsNil(o.ShipToAttention) {
		return nil, false
	}
	return o.ShipToAttention, true
}

// HasShipToAttention returns a boolean if a field has been set.
func (o *Invoice) HasShipToAttention() bool {
	if o != nil && !IsNil(o.ShipToAttention) {
		return true
	}

	return false
}

// SetShipToAttention gets a reference to the given string and assigns it to the ShipToAttention field.
func (o *Invoice) SetShipToAttention(v string) {
	o.ShipToAttention = &v
}

// GetBillingSite returns the BillingSite field value if set, zero value otherwise.
func (o *Invoice) GetBillingSite() SiteReference {
	if o == nil || IsNil(o.BillingSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillingSite
}

// GetBillingSiteOk returns a tuple with the BillingSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillingSite) {
		return nil, false
	}
	return o.BillingSite, true
}

// HasBillingSite returns a boolean if a field has been set.
func (o *Invoice) HasBillingSite() bool {
	if o != nil && !IsNil(o.BillingSite) {
		return true
	}

	return false
}

// SetBillingSite gets a reference to the given SiteReference and assigns it to the BillingSite field.
func (o *Invoice) SetBillingSite(v SiteReference) {
	o.BillingSite = &v
}

// GetBillingSiteAddressLine1 returns the BillingSiteAddressLine1 field value if set, zero value otherwise.
func (o *Invoice) GetBillingSiteAddressLine1() string {
	if o == nil || IsNil(o.BillingSiteAddressLine1) {
		var ret string
		return ret
	}
	return *o.BillingSiteAddressLine1
}

// GetBillingSiteAddressLine1Ok returns a tuple with the BillingSiteAddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.BillingSiteAddressLine1) {
		return nil, false
	}
	return o.BillingSiteAddressLine1, true
}

// HasBillingSiteAddressLine1 returns a boolean if a field has been set.
func (o *Invoice) HasBillingSiteAddressLine1() bool {
	if o != nil && !IsNil(o.BillingSiteAddressLine1) {
		return true
	}

	return false
}

// SetBillingSiteAddressLine1 gets a reference to the given string and assigns it to the BillingSiteAddressLine1 field.
func (o *Invoice) SetBillingSiteAddressLine1(v string) {
	o.BillingSiteAddressLine1 = &v
}

// GetBillingSiteAddressLine2 returns the BillingSiteAddressLine2 field value if set, zero value otherwise.
func (o *Invoice) GetBillingSiteAddressLine2() string {
	if o == nil || IsNil(o.BillingSiteAddressLine2) {
		var ret string
		return ret
	}
	return *o.BillingSiteAddressLine2
}

// GetBillingSiteAddressLine2Ok returns a tuple with the BillingSiteAddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.BillingSiteAddressLine2) {
		return nil, false
	}
	return o.BillingSiteAddressLine2, true
}

// HasBillingSiteAddressLine2 returns a boolean if a field has been set.
func (o *Invoice) HasBillingSiteAddressLine2() bool {
	if o != nil && !IsNil(o.BillingSiteAddressLine2) {
		return true
	}

	return false
}

// SetBillingSiteAddressLine2 gets a reference to the given string and assigns it to the BillingSiteAddressLine2 field.
func (o *Invoice) SetBillingSiteAddressLine2(v string) {
	o.BillingSiteAddressLine2 = &v
}

// GetBillingSiteCity returns the BillingSiteCity field value if set, zero value otherwise.
func (o *Invoice) GetBillingSiteCity() string {
	if o == nil || IsNil(o.BillingSiteCity) {
		var ret string
		return ret
	}
	return *o.BillingSiteCity
}

// GetBillingSiteCityOk returns a tuple with the BillingSiteCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteCityOk() (*string, bool) {
	if o == nil || IsNil(o.BillingSiteCity) {
		return nil, false
	}
	return o.BillingSiteCity, true
}

// HasBillingSiteCity returns a boolean if a field has been set.
func (o *Invoice) HasBillingSiteCity() bool {
	if o != nil && !IsNil(o.BillingSiteCity) {
		return true
	}

	return false
}

// SetBillingSiteCity gets a reference to the given string and assigns it to the BillingSiteCity field.
func (o *Invoice) SetBillingSiteCity(v string) {
	o.BillingSiteCity = &v
}

// GetBillingSiteState returns the BillingSiteState field value if set, zero value otherwise.
func (o *Invoice) GetBillingSiteState() string {
	if o == nil || IsNil(o.BillingSiteState) {
		var ret string
		return ret
	}
	return *o.BillingSiteState
}

// GetBillingSiteStateOk returns a tuple with the BillingSiteState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteStateOk() (*string, bool) {
	if o == nil || IsNil(o.BillingSiteState) {
		return nil, false
	}
	return o.BillingSiteState, true
}

// HasBillingSiteState returns a boolean if a field has been set.
func (o *Invoice) HasBillingSiteState() bool {
	if o != nil && !IsNil(o.BillingSiteState) {
		return true
	}

	return false
}

// SetBillingSiteState gets a reference to the given string and assigns it to the BillingSiteState field.
func (o *Invoice) SetBillingSiteState(v string) {
	o.BillingSiteState = &v
}

// GetBillingSiteZip returns the BillingSiteZip field value if set, zero value otherwise.
func (o *Invoice) GetBillingSiteZip() string {
	if o == nil || IsNil(o.BillingSiteZip) {
		var ret string
		return ret
	}
	return *o.BillingSiteZip
}

// GetBillingSiteZipOk returns a tuple with the BillingSiteZip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteZipOk() (*string, bool) {
	if o == nil || IsNil(o.BillingSiteZip) {
		return nil, false
	}
	return o.BillingSiteZip, true
}

// HasBillingSiteZip returns a boolean if a field has been set.
func (o *Invoice) HasBillingSiteZip() bool {
	if o != nil && !IsNil(o.BillingSiteZip) {
		return true
	}

	return false
}

// SetBillingSiteZip gets a reference to the given string and assigns it to the BillingSiteZip field.
func (o *Invoice) SetBillingSiteZip(v string) {
	o.BillingSiteZip = &v
}

// GetBillingSiteCountry returns the BillingSiteCountry field value if set, zero value otherwise.
func (o *Invoice) GetBillingSiteCountry() string {
	if o == nil || IsNil(o.BillingSiteCountry) {
		var ret string
		return ret
	}
	return *o.BillingSiteCountry
}

// GetBillingSiteCountryOk returns a tuple with the BillingSiteCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSiteCountryOk() (*string, bool) {
	if o == nil || IsNil(o.BillingSiteCountry) {
		return nil, false
	}
	return o.BillingSiteCountry, true
}

// HasBillingSiteCountry returns a boolean if a field has been set.
func (o *Invoice) HasBillingSiteCountry() bool {
	if o != nil && !IsNil(o.BillingSiteCountry) {
		return true
	}

	return false
}

// SetBillingSiteCountry gets a reference to the given string and assigns it to the BillingSiteCountry field.
func (o *Invoice) SetBillingSiteCountry(v string) {
	o.BillingSiteCountry = &v
}

// GetShippingSite returns the ShippingSite field value if set, zero value otherwise.
func (o *Invoice) GetShippingSite() SiteReference {
	if o == nil || IsNil(o.ShippingSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShippingSite
}

// GetShippingSiteOk returns a tuple with the ShippingSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShippingSite) {
		return nil, false
	}
	return o.ShippingSite, true
}

// HasShippingSite returns a boolean if a field has been set.
func (o *Invoice) HasShippingSite() bool {
	if o != nil && !IsNil(o.ShippingSite) {
		return true
	}

	return false
}

// SetShippingSite gets a reference to the given SiteReference and assigns it to the ShippingSite field.
func (o *Invoice) SetShippingSite(v SiteReference) {
	o.ShippingSite = &v
}

// GetShippingSiteAddressLine1 returns the ShippingSiteAddressLine1 field value if set, zero value otherwise.
func (o *Invoice) GetShippingSiteAddressLine1() string {
	if o == nil || IsNil(o.ShippingSiteAddressLine1) {
		var ret string
		return ret
	}
	return *o.ShippingSiteAddressLine1
}

// GetShippingSiteAddressLine1Ok returns a tuple with the ShippingSiteAddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.ShippingSiteAddressLine1) {
		return nil, false
	}
	return o.ShippingSiteAddressLine1, true
}

// HasShippingSiteAddressLine1 returns a boolean if a field has been set.
func (o *Invoice) HasShippingSiteAddressLine1() bool {
	if o != nil && !IsNil(o.ShippingSiteAddressLine1) {
		return true
	}

	return false
}

// SetShippingSiteAddressLine1 gets a reference to the given string and assigns it to the ShippingSiteAddressLine1 field.
func (o *Invoice) SetShippingSiteAddressLine1(v string) {
	o.ShippingSiteAddressLine1 = &v
}

// GetShippingSiteAddressLine2 returns the ShippingSiteAddressLine2 field value if set, zero value otherwise.
func (o *Invoice) GetShippingSiteAddressLine2() string {
	if o == nil || IsNil(o.ShippingSiteAddressLine2) {
		var ret string
		return ret
	}
	return *o.ShippingSiteAddressLine2
}

// GetShippingSiteAddressLine2Ok returns a tuple with the ShippingSiteAddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.ShippingSiteAddressLine2) {
		return nil, false
	}
	return o.ShippingSiteAddressLine2, true
}

// HasShippingSiteAddressLine2 returns a boolean if a field has been set.
func (o *Invoice) HasShippingSiteAddressLine2() bool {
	if o != nil && !IsNil(o.ShippingSiteAddressLine2) {
		return true
	}

	return false
}

// SetShippingSiteAddressLine2 gets a reference to the given string and assigns it to the ShippingSiteAddressLine2 field.
func (o *Invoice) SetShippingSiteAddressLine2(v string) {
	o.ShippingSiteAddressLine2 = &v
}

// GetShippingSiteCity returns the ShippingSiteCity field value if set, zero value otherwise.
func (o *Invoice) GetShippingSiteCity() string {
	if o == nil || IsNil(o.ShippingSiteCity) {
		var ret string
		return ret
	}
	return *o.ShippingSiteCity
}

// GetShippingSiteCityOk returns a tuple with the ShippingSiteCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteCityOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingSiteCity) {
		return nil, false
	}
	return o.ShippingSiteCity, true
}

// HasShippingSiteCity returns a boolean if a field has been set.
func (o *Invoice) HasShippingSiteCity() bool {
	if o != nil && !IsNil(o.ShippingSiteCity) {
		return true
	}

	return false
}

// SetShippingSiteCity gets a reference to the given string and assigns it to the ShippingSiteCity field.
func (o *Invoice) SetShippingSiteCity(v string) {
	o.ShippingSiteCity = &v
}

// GetShippingSiteState returns the ShippingSiteState field value if set, zero value otherwise.
func (o *Invoice) GetShippingSiteState() string {
	if o == nil || IsNil(o.ShippingSiteState) {
		var ret string
		return ret
	}
	return *o.ShippingSiteState
}

// GetShippingSiteStateOk returns a tuple with the ShippingSiteState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteStateOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingSiteState) {
		return nil, false
	}
	return o.ShippingSiteState, true
}

// HasShippingSiteState returns a boolean if a field has been set.
func (o *Invoice) HasShippingSiteState() bool {
	if o != nil && !IsNil(o.ShippingSiteState) {
		return true
	}

	return false
}

// SetShippingSiteState gets a reference to the given string and assigns it to the ShippingSiteState field.
func (o *Invoice) SetShippingSiteState(v string) {
	o.ShippingSiteState = &v
}

// GetShippingSiteZip returns the ShippingSiteZip field value if set, zero value otherwise.
func (o *Invoice) GetShippingSiteZip() string {
	if o == nil || IsNil(o.ShippingSiteZip) {
		var ret string
		return ret
	}
	return *o.ShippingSiteZip
}

// GetShippingSiteZipOk returns a tuple with the ShippingSiteZip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteZipOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingSiteZip) {
		return nil, false
	}
	return o.ShippingSiteZip, true
}

// HasShippingSiteZip returns a boolean if a field has been set.
func (o *Invoice) HasShippingSiteZip() bool {
	if o != nil && !IsNil(o.ShippingSiteZip) {
		return true
	}

	return false
}

// SetShippingSiteZip gets a reference to the given string and assigns it to the ShippingSiteZip field.
func (o *Invoice) SetShippingSiteZip(v string) {
	o.ShippingSiteZip = &v
}

// GetShippingSiteCountry returns the ShippingSiteCountry field value if set, zero value otherwise.
func (o *Invoice) GetShippingSiteCountry() string {
	if o == nil || IsNil(o.ShippingSiteCountry) {
		var ret string
		return ret
	}
	return *o.ShippingSiteCountry
}

// GetShippingSiteCountryOk returns a tuple with the ShippingSiteCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetShippingSiteCountryOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingSiteCountry) {
		return nil, false
	}
	return o.ShippingSiteCountry, true
}

// HasShippingSiteCountry returns a boolean if a field has been set.
func (o *Invoice) HasShippingSiteCountry() bool {
	if o != nil && !IsNil(o.ShippingSiteCountry) {
		return true
	}

	return false
}

// SetShippingSiteCountry gets a reference to the given string and assigns it to the ShippingSiteCountry field.
func (o *Invoice) SetShippingSiteCountry(v string) {
	o.ShippingSiteCountry = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *Invoice) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *Invoice) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *Invoice) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Invoice) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Invoice) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Invoice) SetReference(v string) {
	o.Reference = &v
}

// GetCustomerPO returns the CustomerPO field value if set, zero value otherwise.
func (o *Invoice) GetCustomerPO() string {
	if o == nil || IsNil(o.CustomerPO) {
		var ret string
		return ret
	}
	return *o.CustomerPO
}

// GetCustomerPOOk returns a tuple with the CustomerPO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCustomerPOOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPO) {
		return nil, false
	}
	return o.CustomerPO, true
}

// HasCustomerPO returns a boolean if a field has been set.
func (o *Invoice) HasCustomerPO() bool {
	if o != nil && !IsNil(o.CustomerPO) {
		return true
	}

	return false
}

// SetCustomerPO gets a reference to the given string and assigns it to the CustomerPO field.
func (o *Invoice) SetCustomerPO(v string) {
	o.CustomerPO = &v
}

// GetTemplateSetupId returns the TemplateSetupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetTemplateSetupId() int32 {
	if o == nil || IsNil(o.TemplateSetupId.Get()) {
		var ret int32
		return ret
	}
	return *o.TemplateSetupId.Get()
}

// GetTemplateSetupIdOk returns a tuple with the TemplateSetupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetTemplateSetupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateSetupId.Get(), o.TemplateSetupId.IsSet()
}

// HasTemplateSetupId returns a boolean if a field has been set.
func (o *Invoice) HasTemplateSetupId() bool {
	if o != nil && o.TemplateSetupId.IsSet() {
		return true
	}

	return false
}

// SetTemplateSetupId gets a reference to the given NullableInt32 and assigns it to the TemplateSetupId field.
func (o *Invoice) SetTemplateSetupId(v int32) {
	o.TemplateSetupId.Set(&v)
}
// SetTemplateSetupIdNil sets the value for TemplateSetupId to be an explicit nil
func (o *Invoice) SetTemplateSetupIdNil() {
	o.TemplateSetupId.Set(nil)
}

// UnsetTemplateSetupId ensures that no value is present for TemplateSetupId, not even an explicit nil
func (o *Invoice) UnsetTemplateSetupId() {
	o.TemplateSetupId.Unset()
}

// GetInvoiceTemplate returns the InvoiceTemplate field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceTemplate() InvoiceTemplateDetailReference {
	if o == nil || IsNil(o.InvoiceTemplate) {
		var ret InvoiceTemplateDetailReference
		return ret
	}
	return *o.InvoiceTemplate
}

// GetInvoiceTemplateOk returns a tuple with the InvoiceTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceTemplateOk() (*InvoiceTemplateDetailReference, bool) {
	if o == nil || IsNil(o.InvoiceTemplate) {
		return nil, false
	}
	return o.InvoiceTemplate, true
}

// HasInvoiceTemplate returns a boolean if a field has been set.
func (o *Invoice) HasInvoiceTemplate() bool {
	if o != nil && !IsNil(o.InvoiceTemplate) {
		return true
	}

	return false
}

// SetInvoiceTemplate gets a reference to the given InvoiceTemplateDetailReference and assigns it to the InvoiceTemplate field.
func (o *Invoice) SetInvoiceTemplate(v InvoiceTemplateDetailReference) {
	o.InvoiceTemplate = &v
}

// GetEmailTemplateId returns the EmailTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetEmailTemplateId() int32 {
	if o == nil || IsNil(o.EmailTemplateId.Get()) {
		var ret int32
		return ret
	}
	return *o.EmailTemplateId.Get()
}

// GetEmailTemplateIdOk returns a tuple with the EmailTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetEmailTemplateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailTemplateId.Get(), o.EmailTemplateId.IsSet()
}

// HasEmailTemplateId returns a boolean if a field has been set.
func (o *Invoice) HasEmailTemplateId() bool {
	if o != nil && o.EmailTemplateId.IsSet() {
		return true
	}

	return false
}

// SetEmailTemplateId gets a reference to the given NullableInt32 and assigns it to the EmailTemplateId field.
func (o *Invoice) SetEmailTemplateId(v int32) {
	o.EmailTemplateId.Set(&v)
}
// SetEmailTemplateIdNil sets the value for EmailTemplateId to be an explicit nil
func (o *Invoice) SetEmailTemplateIdNil() {
	o.EmailTemplateId.Set(nil)
}

// UnsetEmailTemplateId ensures that no value is present for EmailTemplateId, not even an explicit nil
func (o *Invoice) UnsetEmailTemplateId() {
	o.EmailTemplateId.Unset()
}

// GetAddToBatchEmailList returns the AddToBatchEmailList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetAddToBatchEmailList() bool {
	if o == nil || IsNil(o.AddToBatchEmailList.Get()) {
		var ret bool
		return ret
	}
	return *o.AddToBatchEmailList.Get()
}

// GetAddToBatchEmailListOk returns a tuple with the AddToBatchEmailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetAddToBatchEmailListOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddToBatchEmailList.Get(), o.AddToBatchEmailList.IsSet()
}

// HasAddToBatchEmailList returns a boolean if a field has been set.
func (o *Invoice) HasAddToBatchEmailList() bool {
	if o != nil && o.AddToBatchEmailList.IsSet() {
		return true
	}

	return false
}

// SetAddToBatchEmailList gets a reference to the given NullableBool and assigns it to the AddToBatchEmailList field.
func (o *Invoice) SetAddToBatchEmailList(v bool) {
	o.AddToBatchEmailList.Set(&v)
}
// SetAddToBatchEmailListNil sets the value for AddToBatchEmailList to be an explicit nil
func (o *Invoice) SetAddToBatchEmailListNil() {
	o.AddToBatchEmailList.Set(nil)
}

// UnsetAddToBatchEmailList ensures that no value is present for AddToBatchEmailList, not even an explicit nil
func (o *Invoice) UnsetAddToBatchEmailList() {
	o.AddToBatchEmailList.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Invoice) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Invoice) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *Invoice) SetDate(v time.Time) {
	o.Date = &v
}

// GetRestrictDownpaymentFlag returns the RestrictDownpaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetRestrictDownpaymentFlag() bool {
	if o == nil || IsNil(o.RestrictDownpaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDownpaymentFlag.Get()
}

// GetRestrictDownpaymentFlagOk returns a tuple with the RestrictDownpaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetRestrictDownpaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDownpaymentFlag.Get(), o.RestrictDownpaymentFlag.IsSet()
}

// HasRestrictDownpaymentFlag returns a boolean if a field has been set.
func (o *Invoice) HasRestrictDownpaymentFlag() bool {
	if o != nil && o.RestrictDownpaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDownpaymentFlag gets a reference to the given NullableBool and assigns it to the RestrictDownpaymentFlag field.
func (o *Invoice) SetRestrictDownpaymentFlag(v bool) {
	o.RestrictDownpaymentFlag.Set(&v)
}
// SetRestrictDownpaymentFlagNil sets the value for RestrictDownpaymentFlag to be an explicit nil
func (o *Invoice) SetRestrictDownpaymentFlagNil() {
	o.RestrictDownpaymentFlag.Set(nil)
}

// UnsetRestrictDownpaymentFlag ensures that no value is present for RestrictDownpaymentFlag, not even an explicit nil
func (o *Invoice) UnsetRestrictDownpaymentFlag() {
	o.RestrictDownpaymentFlag.Unset()
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *Invoice) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *Invoice) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *Invoice) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *Invoice) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Invoice) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Invoice) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Invoice) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartmentId returns the DepartmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetDepartmentId() int32 {
	if o == nil || IsNil(o.DepartmentId.Get()) {
		var ret int32
		return ret
	}
	return *o.DepartmentId.Get()
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetDepartmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentId.Get(), o.DepartmentId.IsSet()
}

// HasDepartmentId returns a boolean if a field has been set.
func (o *Invoice) HasDepartmentId() bool {
	if o != nil && o.DepartmentId.IsSet() {
		return true
	}

	return false
}

// SetDepartmentId gets a reference to the given NullableInt32 and assigns it to the DepartmentId field.
func (o *Invoice) SetDepartmentId(v int32) {
	o.DepartmentId.Set(&v)
}
// SetDepartmentIdNil sets the value for DepartmentId to be an explicit nil
func (o *Invoice) SetDepartmentIdNil() {
	o.DepartmentId.Set(nil)
}

// UnsetDepartmentId ensures that no value is present for DepartmentId, not even an explicit nil
func (o *Invoice) UnsetDepartmentId() {
	o.DepartmentId.Unset()
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Invoice) GetDepartment() BillingUnitReference {
	if o == nil || IsNil(o.Department) {
		var ret BillingUnitReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetDepartmentOk() (*BillingUnitReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Invoice) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given BillingUnitReference and assigns it to the Department field.
func (o *Invoice) SetDepartment(v BillingUnitReference) {
	o.Department = &v
}

// GetTerritoryId returns the TerritoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetTerritoryId() int32 {
	if o == nil || IsNil(o.TerritoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.TerritoryId.Get()
}

// GetTerritoryIdOk returns a tuple with the TerritoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetTerritoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TerritoryId.Get(), o.TerritoryId.IsSet()
}

// HasTerritoryId returns a boolean if a field has been set.
func (o *Invoice) HasTerritoryId() bool {
	if o != nil && o.TerritoryId.IsSet() {
		return true
	}

	return false
}

// SetTerritoryId gets a reference to the given NullableInt32 and assigns it to the TerritoryId field.
func (o *Invoice) SetTerritoryId(v int32) {
	o.TerritoryId.Set(&v)
}
// SetTerritoryIdNil sets the value for TerritoryId to be an explicit nil
func (o *Invoice) SetTerritoryIdNil() {
	o.TerritoryId.Set(nil)
}

// UnsetTerritoryId ensures that no value is present for TerritoryId, not even an explicit nil
func (o *Invoice) UnsetTerritoryId() {
	o.TerritoryId.Unset()
}

// GetTerritory returns the Territory field value if set, zero value otherwise.
func (o *Invoice) GetTerritory() SystemLocationReference {
	if o == nil || IsNil(o.Territory) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Territory
}

// GetTerritoryOk returns a tuple with the Territory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTerritoryOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Territory) {
		return nil, false
	}
	return o.Territory, true
}

// HasTerritory returns a boolean if a field has been set.
func (o *Invoice) HasTerritory() bool {
	if o != nil && !IsNil(o.Territory) {
		return true
	}

	return false
}

// SetTerritory gets a reference to the given SystemLocationReference and assigns it to the Territory field.
func (o *Invoice) SetTerritory(v SystemLocationReference) {
	o.Territory = &v
}

// GetTopComment returns the TopComment field value if set, zero value otherwise.
func (o *Invoice) GetTopComment() string {
	if o == nil || IsNil(o.TopComment) {
		var ret string
		return ret
	}
	return *o.TopComment
}

// GetTopCommentOk returns a tuple with the TopComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTopCommentOk() (*string, bool) {
	if o == nil || IsNil(o.TopComment) {
		return nil, false
	}
	return o.TopComment, true
}

// HasTopComment returns a boolean if a field has been set.
func (o *Invoice) HasTopComment() bool {
	if o != nil && !IsNil(o.TopComment) {
		return true
	}

	return false
}

// SetTopComment gets a reference to the given string and assigns it to the TopComment field.
func (o *Invoice) SetTopComment(v string) {
	o.TopComment = &v
}

// GetBottomComment returns the BottomComment field value if set, zero value otherwise.
func (o *Invoice) GetBottomComment() string {
	if o == nil || IsNil(o.BottomComment) {
		var ret string
		return ret
	}
	return *o.BottomComment
}

// GetBottomCommentOk returns a tuple with the BottomComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBottomCommentOk() (*string, bool) {
	if o == nil || IsNil(o.BottomComment) {
		return nil, false
	}
	return o.BottomComment, true
}

// HasBottomComment returns a boolean if a field has been set.
func (o *Invoice) HasBottomComment() bool {
	if o != nil && !IsNil(o.BottomComment) {
		return true
	}

	return false
}

// SetBottomComment gets a reference to the given string and assigns it to the BottomComment field.
func (o *Invoice) SetBottomComment(v string) {
	o.BottomComment = &v
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *Invoice) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *Invoice) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}
// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *Invoice) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *Invoice) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *Invoice) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *Invoice) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *Invoice) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *Invoice) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *Invoice) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *Invoice) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetDownpaymentPreviouslyTaxedFlag returns the DownpaymentPreviouslyTaxedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetDownpaymentPreviouslyTaxedFlag() bool {
	if o == nil || IsNil(o.DownpaymentPreviouslyTaxedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DownpaymentPreviouslyTaxedFlag.Get()
}

// GetDownpaymentPreviouslyTaxedFlagOk returns a tuple with the DownpaymentPreviouslyTaxedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetDownpaymentPreviouslyTaxedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownpaymentPreviouslyTaxedFlag.Get(), o.DownpaymentPreviouslyTaxedFlag.IsSet()
}

// HasDownpaymentPreviouslyTaxedFlag returns a boolean if a field has been set.
func (o *Invoice) HasDownpaymentPreviouslyTaxedFlag() bool {
	if o != nil && o.DownpaymentPreviouslyTaxedFlag.IsSet() {
		return true
	}

	return false
}

// SetDownpaymentPreviouslyTaxedFlag gets a reference to the given NullableBool and assigns it to the DownpaymentPreviouslyTaxedFlag field.
func (o *Invoice) SetDownpaymentPreviouslyTaxedFlag(v bool) {
	o.DownpaymentPreviouslyTaxedFlag.Set(&v)
}
// SetDownpaymentPreviouslyTaxedFlagNil sets the value for DownpaymentPreviouslyTaxedFlag to be an explicit nil
func (o *Invoice) SetDownpaymentPreviouslyTaxedFlagNil() {
	o.DownpaymentPreviouslyTaxedFlag.Set(nil)
}

// UnsetDownpaymentPreviouslyTaxedFlag ensures that no value is present for DownpaymentPreviouslyTaxedFlag, not even an explicit nil
func (o *Invoice) UnsetDownpaymentPreviouslyTaxedFlag() {
	o.DownpaymentPreviouslyTaxedFlag.Unset()
}

// GetServiceTotal returns the ServiceTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetServiceTotal() float64 {
	if o == nil || IsNil(o.ServiceTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.ServiceTotal.Get()
}

// GetServiceTotalOk returns a tuple with the ServiceTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetServiceTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceTotal.Get(), o.ServiceTotal.IsSet()
}

// HasServiceTotal returns a boolean if a field has been set.
func (o *Invoice) HasServiceTotal() bool {
	if o != nil && o.ServiceTotal.IsSet() {
		return true
	}

	return false
}

// SetServiceTotal gets a reference to the given NullableFloat64 and assigns it to the ServiceTotal field.
func (o *Invoice) SetServiceTotal(v float64) {
	o.ServiceTotal.Set(&v)
}
// SetServiceTotalNil sets the value for ServiceTotal to be an explicit nil
func (o *Invoice) SetServiceTotalNil() {
	o.ServiceTotal.Set(nil)
}

// UnsetServiceTotal ensures that no value is present for ServiceTotal, not even an explicit nil
func (o *Invoice) UnsetServiceTotal() {
	o.ServiceTotal.Unset()
}

// GetOverrideDownPaymentAmountFlag returns the OverrideDownPaymentAmountFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetOverrideDownPaymentAmountFlag() bool {
	if o == nil || IsNil(o.OverrideDownPaymentAmountFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideDownPaymentAmountFlag.Get()
}

// GetOverrideDownPaymentAmountFlagOk returns a tuple with the OverrideDownPaymentAmountFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetOverrideDownPaymentAmountFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideDownPaymentAmountFlag.Get(), o.OverrideDownPaymentAmountFlag.IsSet()
}

// HasOverrideDownPaymentAmountFlag returns a boolean if a field has been set.
func (o *Invoice) HasOverrideDownPaymentAmountFlag() bool {
	if o != nil && o.OverrideDownPaymentAmountFlag.IsSet() {
		return true
	}

	return false
}

// SetOverrideDownPaymentAmountFlag gets a reference to the given NullableBool and assigns it to the OverrideDownPaymentAmountFlag field.
func (o *Invoice) SetOverrideDownPaymentAmountFlag(v bool) {
	o.OverrideDownPaymentAmountFlag.Set(&v)
}
// SetOverrideDownPaymentAmountFlagNil sets the value for OverrideDownPaymentAmountFlag to be an explicit nil
func (o *Invoice) SetOverrideDownPaymentAmountFlagNil() {
	o.OverrideDownPaymentAmountFlag.Set(nil)
}

// UnsetOverrideDownPaymentAmountFlag ensures that no value is present for OverrideDownPaymentAmountFlag, not even an explicit nil
func (o *Invoice) UnsetOverrideDownPaymentAmountFlag() {
	o.OverrideDownPaymentAmountFlag.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Invoice) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Invoice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Invoice) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Invoice) GetDueDate() time.Time {
	if o == nil || IsNil(o.DueDate) {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Invoice) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *Invoice) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetExpenseTotal returns the ExpenseTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetExpenseTotal() float64 {
	if o == nil || IsNil(o.ExpenseTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.ExpenseTotal.Get()
}

// GetExpenseTotalOk returns a tuple with the ExpenseTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetExpenseTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseTotal.Get(), o.ExpenseTotal.IsSet()
}

// HasExpenseTotal returns a boolean if a field has been set.
func (o *Invoice) HasExpenseTotal() bool {
	if o != nil && o.ExpenseTotal.IsSet() {
		return true
	}

	return false
}

// SetExpenseTotal gets a reference to the given NullableFloat64 and assigns it to the ExpenseTotal field.
func (o *Invoice) SetExpenseTotal(v float64) {
	o.ExpenseTotal.Set(&v)
}
// SetExpenseTotalNil sets the value for ExpenseTotal to be an explicit nil
func (o *Invoice) SetExpenseTotalNil() {
	o.ExpenseTotal.Set(nil)
}

// UnsetExpenseTotal ensures that no value is present for ExpenseTotal, not even an explicit nil
func (o *Invoice) UnsetExpenseTotal() {
	o.ExpenseTotal.Unset()
}

// GetProductTotal returns the ProductTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetProductTotal() float64 {
	if o == nil || IsNil(o.ProductTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.ProductTotal.Get()
}

// GetProductTotalOk returns a tuple with the ProductTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetProductTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductTotal.Get(), o.ProductTotal.IsSet()
}

// HasProductTotal returns a boolean if a field has been set.
func (o *Invoice) HasProductTotal() bool {
	if o != nil && o.ProductTotal.IsSet() {
		return true
	}

	return false
}

// SetProductTotal gets a reference to the given NullableFloat64 and assigns it to the ProductTotal field.
func (o *Invoice) SetProductTotal(v float64) {
	o.ProductTotal.Set(&v)
}
// SetProductTotalNil sets the value for ProductTotal to be an explicit nil
func (o *Invoice) SetProductTotalNil() {
	o.ProductTotal.Set(nil)
}

// UnsetProductTotal ensures that no value is present for ProductTotal, not even an explicit nil
func (o *Invoice) UnsetProductTotal() {
	o.ProductTotal.Unset()
}

// GetPreviousProgressApplied returns the PreviousProgressApplied field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetPreviousProgressApplied() float64 {
	if o == nil || IsNil(o.PreviousProgressApplied.Get()) {
		var ret float64
		return ret
	}
	return *o.PreviousProgressApplied.Get()
}

// GetPreviousProgressAppliedOk returns a tuple with the PreviousProgressApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetPreviousProgressAppliedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreviousProgressApplied.Get(), o.PreviousProgressApplied.IsSet()
}

// HasPreviousProgressApplied returns a boolean if a field has been set.
func (o *Invoice) HasPreviousProgressApplied() bool {
	if o != nil && o.PreviousProgressApplied.IsSet() {
		return true
	}

	return false
}

// SetPreviousProgressApplied gets a reference to the given NullableFloat64 and assigns it to the PreviousProgressApplied field.
func (o *Invoice) SetPreviousProgressApplied(v float64) {
	o.PreviousProgressApplied.Set(&v)
}
// SetPreviousProgressAppliedNil sets the value for PreviousProgressApplied to be an explicit nil
func (o *Invoice) SetPreviousProgressAppliedNil() {
	o.PreviousProgressApplied.Set(nil)
}

// UnsetPreviousProgressApplied ensures that no value is present for PreviousProgressApplied, not even an explicit nil
func (o *Invoice) UnsetPreviousProgressApplied() {
	o.PreviousProgressApplied.Unset()
}

// GetServiceAdjustmentAmount returns the ServiceAdjustmentAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetServiceAdjustmentAmount() float64 {
	if o == nil || IsNil(o.ServiceAdjustmentAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.ServiceAdjustmentAmount.Get()
}

// GetServiceAdjustmentAmountOk returns a tuple with the ServiceAdjustmentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetServiceAdjustmentAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceAdjustmentAmount.Get(), o.ServiceAdjustmentAmount.IsSet()
}

// HasServiceAdjustmentAmount returns a boolean if a field has been set.
func (o *Invoice) HasServiceAdjustmentAmount() bool {
	if o != nil && o.ServiceAdjustmentAmount.IsSet() {
		return true
	}

	return false
}

// SetServiceAdjustmentAmount gets a reference to the given NullableFloat64 and assigns it to the ServiceAdjustmentAmount field.
func (o *Invoice) SetServiceAdjustmentAmount(v float64) {
	o.ServiceAdjustmentAmount.Set(&v)
}
// SetServiceAdjustmentAmountNil sets the value for ServiceAdjustmentAmount to be an explicit nil
func (o *Invoice) SetServiceAdjustmentAmountNil() {
	o.ServiceAdjustmentAmount.Set(nil)
}

// UnsetServiceAdjustmentAmount ensures that no value is present for ServiceAdjustmentAmount, not even an explicit nil
func (o *Invoice) UnsetServiceAdjustmentAmount() {
	o.ServiceAdjustmentAmount.Unset()
}

// GetAgreementAmount returns the AgreementAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetAgreementAmount() float64 {
	if o == nil || IsNil(o.AgreementAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAmount.Get()
}

// GetAgreementAmountOk returns a tuple with the AgreementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetAgreementAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAmount.Get(), o.AgreementAmount.IsSet()
}

// HasAgreementAmount returns a boolean if a field has been set.
func (o *Invoice) HasAgreementAmount() bool {
	if o != nil && o.AgreementAmount.IsSet() {
		return true
	}

	return false
}

// SetAgreementAmount gets a reference to the given NullableFloat64 and assigns it to the AgreementAmount field.
func (o *Invoice) SetAgreementAmount(v float64) {
	o.AgreementAmount.Set(&v)
}
// SetAgreementAmountNil sets the value for AgreementAmount to be an explicit nil
func (o *Invoice) SetAgreementAmountNil() {
	o.AgreementAmount.Set(nil)
}

// UnsetAgreementAmount ensures that no value is present for AgreementAmount, not even an explicit nil
func (o *Invoice) UnsetAgreementAmount() {
	o.AgreementAmount.Unset()
}

// GetDownpaymentApplied returns the DownpaymentApplied field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetDownpaymentApplied() float64 {
	if o == nil || IsNil(o.DownpaymentApplied.Get()) {
		var ret float64
		return ret
	}
	return *o.DownpaymentApplied.Get()
}

// GetDownpaymentAppliedOk returns a tuple with the DownpaymentApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetDownpaymentAppliedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownpaymentApplied.Get(), o.DownpaymentApplied.IsSet()
}

// HasDownpaymentApplied returns a boolean if a field has been set.
func (o *Invoice) HasDownpaymentApplied() bool {
	if o != nil && o.DownpaymentApplied.IsSet() {
		return true
	}

	return false
}

// SetDownpaymentApplied gets a reference to the given NullableFloat64 and assigns it to the DownpaymentApplied field.
func (o *Invoice) SetDownpaymentApplied(v float64) {
	o.DownpaymentApplied.Set(&v)
}
// SetDownpaymentAppliedNil sets the value for DownpaymentApplied to be an explicit nil
func (o *Invoice) SetDownpaymentAppliedNil() {
	o.DownpaymentApplied.Set(nil)
}

// UnsetDownpaymentApplied ensures that no value is present for DownpaymentApplied, not even an explicit nil
func (o *Invoice) UnsetDownpaymentApplied() {
	o.DownpaymentApplied.Unset()
}

// GetSubtotal returns the Subtotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetSubtotal() float64 {
	if o == nil || IsNil(o.Subtotal.Get()) {
		var ret float64
		return ret
	}
	return *o.Subtotal.Get()
}

// GetSubtotalOk returns a tuple with the Subtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetSubtotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subtotal.Get(), o.Subtotal.IsSet()
}

// HasSubtotal returns a boolean if a field has been set.
func (o *Invoice) HasSubtotal() bool {
	if o != nil && o.Subtotal.IsSet() {
		return true
	}

	return false
}

// SetSubtotal gets a reference to the given NullableFloat64 and assigns it to the Subtotal field.
func (o *Invoice) SetSubtotal(v float64) {
	o.Subtotal.Set(&v)
}
// SetSubtotalNil sets the value for Subtotal to be an explicit nil
func (o *Invoice) SetSubtotalNil() {
	o.Subtotal.Set(nil)
}

// UnsetSubtotal ensures that no value is present for Subtotal, not even an explicit nil
func (o *Invoice) UnsetSubtotal() {
	o.Subtotal.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *Invoice) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *Invoice) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *Invoice) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *Invoice) UnsetTotal() {
	o.Total.Unset()
}

// GetRemainingDownpayment returns the RemainingDownpayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetRemainingDownpayment() float64 {
	if o == nil || IsNil(o.RemainingDownpayment.Get()) {
		var ret float64
		return ret
	}
	return *o.RemainingDownpayment.Get()
}

// GetRemainingDownpaymentOk returns a tuple with the RemainingDownpayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetRemainingDownpaymentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemainingDownpayment.Get(), o.RemainingDownpayment.IsSet()
}

// HasRemainingDownpayment returns a boolean if a field has been set.
func (o *Invoice) HasRemainingDownpayment() bool {
	if o != nil && o.RemainingDownpayment.IsSet() {
		return true
	}

	return false
}

// SetRemainingDownpayment gets a reference to the given NullableFloat64 and assigns it to the RemainingDownpayment field.
func (o *Invoice) SetRemainingDownpayment(v float64) {
	o.RemainingDownpayment.Set(&v)
}
// SetRemainingDownpaymentNil sets the value for RemainingDownpayment to be an explicit nil
func (o *Invoice) SetRemainingDownpaymentNil() {
	o.RemainingDownpayment.Set(nil)
}

// UnsetRemainingDownpayment ensures that no value is present for RemainingDownpayment, not even an explicit nil
func (o *Invoice) UnsetRemainingDownpayment() {
	o.RemainingDownpayment.Unset()
}

// GetSalesTax returns the SalesTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetSalesTax() float64 {
	if o == nil || IsNil(o.SalesTax.Get()) {
		var ret float64
		return ret
	}
	return *o.SalesTax.Get()
}

// GetSalesTaxOk returns a tuple with the SalesTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetSalesTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesTax.Get(), o.SalesTax.IsSet()
}

// HasSalesTax returns a boolean if a field has been set.
func (o *Invoice) HasSalesTax() bool {
	if o != nil && o.SalesTax.IsSet() {
		return true
	}

	return false
}

// SetSalesTax gets a reference to the given NullableFloat64 and assigns it to the SalesTax field.
func (o *Invoice) SetSalesTax(v float64) {
	o.SalesTax.Set(&v)
}
// SetSalesTaxNil sets the value for SalesTax to be an explicit nil
func (o *Invoice) SetSalesTaxNil() {
	o.SalesTax.Set(nil)
}

// UnsetSalesTax ensures that no value is present for SalesTax, not even an explicit nil
func (o *Invoice) UnsetSalesTax() {
	o.SalesTax.Unset()
}

// GetAdjustmentReason returns the AdjustmentReason field value if set, zero value otherwise.
func (o *Invoice) GetAdjustmentReason() string {
	if o == nil || IsNil(o.AdjustmentReason) {
		var ret string
		return ret
	}
	return *o.AdjustmentReason
}

// GetAdjustmentReasonOk returns a tuple with the AdjustmentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAdjustmentReasonOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustmentReason) {
		return nil, false
	}
	return o.AdjustmentReason, true
}

// HasAdjustmentReason returns a boolean if a field has been set.
func (o *Invoice) HasAdjustmentReason() bool {
	if o != nil && !IsNil(o.AdjustmentReason) {
		return true
	}

	return false
}

// SetAdjustmentReason gets a reference to the given string and assigns it to the AdjustmentReason field.
func (o *Invoice) SetAdjustmentReason(v string) {
	o.AdjustmentReason = &v
}

// GetAdjustedBy returns the AdjustedBy field value if set, zero value otherwise.
func (o *Invoice) GetAdjustedBy() string {
	if o == nil || IsNil(o.AdjustedBy) {
		var ret string
		return ret
	}
	return *o.AdjustedBy
}

// GetAdjustedByOk returns a tuple with the AdjustedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAdjustedByOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedBy) {
		return nil, false
	}
	return o.AdjustedBy, true
}

// HasAdjustedBy returns a boolean if a field has been set.
func (o *Invoice) HasAdjustedBy() bool {
	if o != nil && !IsNil(o.AdjustedBy) {
		return true
	}

	return false
}

// SetAdjustedBy gets a reference to the given string and assigns it to the AdjustedBy field.
func (o *Invoice) SetAdjustedBy(v string) {
	o.AdjustedBy = &v
}

// GetClosedBy returns the ClosedBy field value if set, zero value otherwise.
func (o *Invoice) GetClosedBy() string {
	if o == nil || IsNil(o.ClosedBy) {
		var ret string
		return ret
	}
	return *o.ClosedBy
}

// GetClosedByOk returns a tuple with the ClosedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetClosedByOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedBy) {
		return nil, false
	}
	return o.ClosedBy, true
}

// HasClosedBy returns a boolean if a field has been set.
func (o *Invoice) HasClosedBy() bool {
	if o != nil && !IsNil(o.ClosedBy) {
		return true
	}

	return false
}

// SetClosedBy gets a reference to the given string and assigns it to the ClosedBy field.
func (o *Invoice) SetClosedBy(v string) {
	o.ClosedBy = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetPayments() float64 {
	if o == nil || IsNil(o.Payments.Get()) {
		var ret float64
		return ret
	}
	return *o.Payments.Get()
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetPaymentsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payments.Get(), o.Payments.IsSet()
}

// HasPayments returns a boolean if a field has been set.
func (o *Invoice) HasPayments() bool {
	if o != nil && o.Payments.IsSet() {
		return true
	}

	return false
}

// SetPayments gets a reference to the given NullableFloat64 and assigns it to the Payments field.
func (o *Invoice) SetPayments(v float64) {
	o.Payments.Set(&v)
}
// SetPaymentsNil sets the value for Payments to be an explicit nil
func (o *Invoice) SetPaymentsNil() {
	o.Payments.Set(nil)
}

// UnsetPayments ensures that no value is present for Payments, not even an explicit nil
func (o *Invoice) UnsetPayments() {
	o.Payments.Unset()
}

// GetCredits returns the Credits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetCredits() float64 {
	if o == nil || IsNil(o.Credits.Get()) {
		var ret float64
		return ret
	}
	return *o.Credits.Get()
}

// GetCreditsOk returns a tuple with the Credits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetCreditsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Credits.Get(), o.Credits.IsSet()
}

// HasCredits returns a boolean if a field has been set.
func (o *Invoice) HasCredits() bool {
	if o != nil && o.Credits.IsSet() {
		return true
	}

	return false
}

// SetCredits gets a reference to the given NullableFloat64 and assigns it to the Credits field.
func (o *Invoice) SetCredits(v float64) {
	o.Credits.Set(&v)
}
// SetCreditsNil sets the value for Credits to be an explicit nil
func (o *Invoice) SetCreditsNil() {
	o.Credits.Set(nil)
}

// UnsetCredits ensures that no value is present for Credits, not even an explicit nil
func (o *Invoice) UnsetCredits() {
	o.Credits.Unset()
}

// GetBalance returns the Balance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetBalance() float64 {
	if o == nil || IsNil(o.Balance.Get()) {
		var ret float64
		return ret
	}
	return *o.Balance.Get()
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balance.Get(), o.Balance.IsSet()
}

// HasBalance returns a boolean if a field has been set.
func (o *Invoice) HasBalance() bool {
	if o != nil && o.Balance.IsSet() {
		return true
	}

	return false
}

// SetBalance gets a reference to the given NullableFloat64 and assigns it to the Balance field.
func (o *Invoice) SetBalance(v float64) {
	o.Balance.Set(&v)
}
// SetBalanceNil sets the value for Balance to be an explicit nil
func (o *Invoice) SetBalanceNil() {
	o.Balance.Set(nil)
}

// UnsetBalance ensures that no value is present for Balance, not even an explicit nil
func (o *Invoice) UnsetBalance() {
	o.Balance.Unset()
}

// GetSpecialInvoiceFlag returns the SpecialInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Invoice) GetSpecialInvoiceFlag() bool {
	if o == nil || IsNil(o.SpecialInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SpecialInvoiceFlag.Get()
}

// GetSpecialInvoiceFlagOk returns a tuple with the SpecialInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Invoice) GetSpecialInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecialInvoiceFlag.Get(), o.SpecialInvoiceFlag.IsSet()
}

// HasSpecialInvoiceFlag returns a boolean if a field has been set.
func (o *Invoice) HasSpecialInvoiceFlag() bool {
	if o != nil && o.SpecialInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetSpecialInvoiceFlag gets a reference to the given NullableBool and assigns it to the SpecialInvoiceFlag field.
func (o *Invoice) SetSpecialInvoiceFlag(v bool) {
	o.SpecialInvoiceFlag.Set(&v)
}
// SetSpecialInvoiceFlagNil sets the value for SpecialInvoiceFlag to be an explicit nil
func (o *Invoice) SetSpecialInvoiceFlagNil() {
	o.SpecialInvoiceFlag.Set(nil)
}

// UnsetSpecialInvoiceFlag ensures that no value is present for SpecialInvoiceFlag, not even an explicit nil
func (o *Invoice) UnsetSpecialInvoiceFlag() {
	o.SpecialInvoiceFlag.Unset()
}

// GetBillingSetupReference returns the BillingSetupReference field value if set, zero value otherwise.
func (o *Invoice) GetBillingSetupReference() BillingSetupReference {
	if o == nil || IsNil(o.BillingSetupReference) {
		var ret BillingSetupReference
		return ret
	}
	return *o.BillingSetupReference
}

// GetBillingSetupReferenceOk returns a tuple with the BillingSetupReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBillingSetupReferenceOk() (*BillingSetupReference, bool) {
	if o == nil || IsNil(o.BillingSetupReference) {
		return nil, false
	}
	return o.BillingSetupReference, true
}

// HasBillingSetupReference returns a boolean if a field has been set.
func (o *Invoice) HasBillingSetupReference() bool {
	if o != nil && !IsNil(o.BillingSetupReference) {
		return true
	}

	return false
}

// SetBillingSetupReference gets a reference to the given BillingSetupReference and assigns it to the BillingSetupReference field.
func (o *Invoice) SetBillingSetupReference(v BillingSetupReference) {
	o.BillingSetupReference = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *Invoice) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *Invoice) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *Invoice) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Invoice) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Invoice) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *Invoice) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *Invoice) GetPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.Phase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *Invoice) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given ProjectPhaseReference and assigns it to the Phase field.
func (o *Invoice) SetPhase(v ProjectPhaseReference) {
	o.Phase = &v
}

// GetSalesOrder returns the SalesOrder field value if set, zero value otherwise.
func (o *Invoice) GetSalesOrder() SalesOrderReference {
	if o == nil || IsNil(o.SalesOrder) {
		var ret SalesOrderReference
		return ret
	}
	return *o.SalesOrder
}

// GetSalesOrderOk returns a tuple with the SalesOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetSalesOrderOk() (*SalesOrderReference, bool) {
	if o == nil || IsNil(o.SalesOrder) {
		return nil, false
	}
	return o.SalesOrder, true
}

// HasSalesOrder returns a boolean if a field has been set.
func (o *Invoice) HasSalesOrder() bool {
	if o != nil && !IsNil(o.SalesOrder) {
		return true
	}

	return false
}

// SetSalesOrder gets a reference to the given SalesOrderReference and assigns it to the SalesOrder field.
func (o *Invoice) SetSalesOrder(v SalesOrderReference) {
	o.SalesOrder = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *Invoice) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *Invoice) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *Invoice) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetGlBatch returns the GlBatch field value if set, zero value otherwise.
func (o *Invoice) GetGlBatch() BatchReference {
	if o == nil || IsNil(o.GlBatch) {
		var ret BatchReference
		return ret
	}
	return *o.GlBatch
}

// GetGlBatchOk returns a tuple with the GlBatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetGlBatchOk() (*BatchReference, bool) {
	if o == nil || IsNil(o.GlBatch) {
		return nil, false
	}
	return o.GlBatch, true
}

// HasGlBatch returns a boolean if a field has been set.
func (o *Invoice) HasGlBatch() bool {
	if o != nil && !IsNil(o.GlBatch) {
		return true
	}

	return false
}

// SetGlBatch gets a reference to the given BatchReference and assigns it to the GlBatch field.
func (o *Invoice) SetGlBatch(v BatchReference) {
	o.GlBatch = &v
}

// GetUnbatchedBatch returns the UnbatchedBatch field value if set, zero value otherwise.
func (o *Invoice) GetUnbatchedBatch() BatchReference {
	if o == nil || IsNil(o.UnbatchedBatch) {
		var ret BatchReference
		return ret
	}
	return *o.UnbatchedBatch
}

// GetUnbatchedBatchOk returns a tuple with the UnbatchedBatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetUnbatchedBatchOk() (*BatchReference, bool) {
	if o == nil || IsNil(o.UnbatchedBatch) {
		return nil, false
	}
	return o.UnbatchedBatch, true
}

// HasUnbatchedBatch returns a boolean if a field has been set.
func (o *Invoice) HasUnbatchedBatch() bool {
	if o != nil && !IsNil(o.UnbatchedBatch) {
		return true
	}

	return false
}

// SetUnbatchedBatch gets a reference to the given BatchReference and assigns it to the UnbatchedBatch field.
func (o *Invoice) SetUnbatchedBatch(v BatchReference) {
	o.UnbatchedBatch = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Invoice) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Invoice) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Invoice) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Invoice) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Invoice) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Invoice) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["invoiceNumber"] = o.InvoiceNumber
	}
	toSerialize["type"] = o.Type.Get()
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["company"] = o.Company
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if o.ApplyToType.IsSet() {
		toSerialize["applyToType"] = o.ApplyToType.Get()
	}
	if o.ApplyToId.IsSet() {
		toSerialize["applyToId"] = o.ApplyToId.Get()
	}
	if !IsNil(o.Attention) {
		toSerialize["attention"] = o.Attention
	}
	if !IsNil(o.ShipToAttention) {
		toSerialize["shipToAttention"] = o.ShipToAttention
	}
	if !IsNil(o.BillingSite) {
		toSerialize["billingSite"] = o.BillingSite
	}
	if !IsNil(o.BillingSiteAddressLine1) {
		toSerialize["billingSiteAddressLine1"] = o.BillingSiteAddressLine1
	}
	if !IsNil(o.BillingSiteAddressLine2) {
		toSerialize["billingSiteAddressLine2"] = o.BillingSiteAddressLine2
	}
	if !IsNil(o.BillingSiteCity) {
		toSerialize["billingSiteCity"] = o.BillingSiteCity
	}
	if !IsNil(o.BillingSiteState) {
		toSerialize["billingSiteState"] = o.BillingSiteState
	}
	if !IsNil(o.BillingSiteZip) {
		toSerialize["billingSiteZip"] = o.BillingSiteZip
	}
	if !IsNil(o.BillingSiteCountry) {
		toSerialize["billingSiteCountry"] = o.BillingSiteCountry
	}
	if !IsNil(o.ShippingSite) {
		toSerialize["shippingSite"] = o.ShippingSite
	}
	if !IsNil(o.ShippingSiteAddressLine1) {
		toSerialize["shippingSiteAddressLine1"] = o.ShippingSiteAddressLine1
	}
	if !IsNil(o.ShippingSiteAddressLine2) {
		toSerialize["shippingSiteAddressLine2"] = o.ShippingSiteAddressLine2
	}
	if !IsNil(o.ShippingSiteCity) {
		toSerialize["shippingSiteCity"] = o.ShippingSiteCity
	}
	if !IsNil(o.ShippingSiteState) {
		toSerialize["shippingSiteState"] = o.ShippingSiteState
	}
	if !IsNil(o.ShippingSiteZip) {
		toSerialize["shippingSiteZip"] = o.ShippingSiteZip
	}
	if !IsNil(o.ShippingSiteCountry) {
		toSerialize["shippingSiteCountry"] = o.ShippingSiteCountry
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.CustomerPO) {
		toSerialize["customerPO"] = o.CustomerPO
	}
	if o.TemplateSetupId.IsSet() {
		toSerialize["templateSetupId"] = o.TemplateSetupId.Get()
	}
	if !IsNil(o.InvoiceTemplate) {
		toSerialize["invoiceTemplate"] = o.InvoiceTemplate
	}
	if o.EmailTemplateId.IsSet() {
		toSerialize["emailTemplateId"] = o.EmailTemplateId.Get()
	}
	if o.AddToBatchEmailList.IsSet() {
		toSerialize["addToBatchEmailList"] = o.AddToBatchEmailList.Get()
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.RestrictDownpaymentFlag.IsSet() {
		toSerialize["restrictDownpaymentFlag"] = o.RestrictDownpaymentFlag.Get()
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if o.DepartmentId.IsSet() {
		toSerialize["departmentId"] = o.DepartmentId.Get()
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.TerritoryId.IsSet() {
		toSerialize["territoryId"] = o.TerritoryId.Get()
	}
	if !IsNil(o.Territory) {
		toSerialize["territory"] = o.Territory
	}
	if !IsNil(o.TopComment) {
		toSerialize["topComment"] = o.TopComment
	}
	if !IsNil(o.BottomComment) {
		toSerialize["bottomComment"] = o.BottomComment
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if o.DownpaymentPreviouslyTaxedFlag.IsSet() {
		toSerialize["downpaymentPreviouslyTaxedFlag"] = o.DownpaymentPreviouslyTaxedFlag.Get()
	}
	if o.ServiceTotal.IsSet() {
		toSerialize["serviceTotal"] = o.ServiceTotal.Get()
	}
	if o.OverrideDownPaymentAmountFlag.IsSet() {
		toSerialize["overrideDownPaymentAmountFlag"] = o.OverrideDownPaymentAmountFlag.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if o.ExpenseTotal.IsSet() {
		toSerialize["expenseTotal"] = o.ExpenseTotal.Get()
	}
	if o.ProductTotal.IsSet() {
		toSerialize["productTotal"] = o.ProductTotal.Get()
	}
	if o.PreviousProgressApplied.IsSet() {
		toSerialize["previousProgressApplied"] = o.PreviousProgressApplied.Get()
	}
	if o.ServiceAdjustmentAmount.IsSet() {
		toSerialize["serviceAdjustmentAmount"] = o.ServiceAdjustmentAmount.Get()
	}
	if o.AgreementAmount.IsSet() {
		toSerialize["agreementAmount"] = o.AgreementAmount.Get()
	}
	if o.DownpaymentApplied.IsSet() {
		toSerialize["downpaymentApplied"] = o.DownpaymentApplied.Get()
	}
	if o.Subtotal.IsSet() {
		toSerialize["subtotal"] = o.Subtotal.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.RemainingDownpayment.IsSet() {
		toSerialize["remainingDownpayment"] = o.RemainingDownpayment.Get()
	}
	if o.SalesTax.IsSet() {
		toSerialize["salesTax"] = o.SalesTax.Get()
	}
	if !IsNil(o.AdjustmentReason) {
		toSerialize["adjustmentReason"] = o.AdjustmentReason
	}
	if !IsNil(o.AdjustedBy) {
		toSerialize["adjustedBy"] = o.AdjustedBy
	}
	if !IsNil(o.ClosedBy) {
		toSerialize["closedBy"] = o.ClosedBy
	}
	if o.Payments.IsSet() {
		toSerialize["payments"] = o.Payments.Get()
	}
	if o.Credits.IsSet() {
		toSerialize["credits"] = o.Credits.Get()
	}
	if o.Balance.IsSet() {
		toSerialize["balance"] = o.Balance.Get()
	}
	if o.SpecialInvoiceFlag.IsSet() {
		toSerialize["specialInvoiceFlag"] = o.SpecialInvoiceFlag.Get()
	}
	if !IsNil(o.BillingSetupReference) {
		toSerialize["billingSetupReference"] = o.BillingSetupReference
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.SalesOrder) {
		toSerialize["salesOrder"] = o.SalesOrder
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.GlBatch) {
		toSerialize["glBatch"] = o.GlBatch
	}
	if !IsNil(o.UnbatchedBatch) {
		toSerialize["unbatchedBatch"] = o.UnbatchedBatch
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Invoice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"company",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoice := _Invoice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvoice)

	if err != nil {
		return err
	}

	*o = Invoice(varInvoice)

	return err
}

type NullableInvoice struct {
	value *Invoice
	isSet bool
}

func (v NullableInvoice) Get() *Invoice {
	return v.value
}

func (v *NullableInvoice) Set(val *Invoice) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoice(val *Invoice) *NullableInvoice {
	return &NullableInvoice{value: val, isSet: true}
}

func (v NullableInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


