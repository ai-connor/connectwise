/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
)

// checks if the InvoicePayment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoicePayment{}

// InvoicePayment struct for InvoicePayment
type InvoicePayment struct {
	Id *int32 `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Source *string `json:"source,omitempty"`
	Invoice *InvoiceReference `json:"invoice,omitempty"`
	Credit *InvoiceReference `json:"credit,omitempty"`
	Amount NullableFloat64 `json:"amount,omitempty"`
	Balance NullableFloat64 `json:"balance,omitempty"`
	InvoiceBalance NullableFloat64 `json:"invoiceBalance,omitempty"`
	InvoiceTotal NullableFloat64 `json:"invoiceTotal,omitempty"`
	PaymentDate *time.Time `json:"paymentDate,omitempty"`
	AppliedBy *string `json:"appliedBy,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	WisePayPayment *WisePayPayment `json:"wisePayPayment,omitempty"`
	PaymentSyncStatus *string `json:"paymentSyncStatus,omitempty"`
	//  Max length: 50;
	GlBatchID *string `json:"glBatchID,omitempty"`
	PaymentSyncDate *time.Time `json:"paymentSyncDate,omitempty"`
	PaymentAccount *string `json:"paymentAccount,omitempty"`
	ARPaymentAccount *string `json:"aRPaymentAccount,omitempty"`
}

// NewInvoicePayment instantiates a new InvoicePayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoicePayment() *InvoicePayment {
	this := InvoicePayment{}
	return &this
}

// NewInvoicePaymentWithDefaults instantiates a new InvoicePayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoicePaymentWithDefaults() *InvoicePayment {
	this := InvoicePayment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InvoicePayment) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InvoicePayment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InvoicePayment) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InvoicePayment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InvoicePayment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InvoicePayment) SetType(v string) {
	o.Type = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *InvoicePayment) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *InvoicePayment) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *InvoicePayment) SetSource(v string) {
	o.Source = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *InvoicePayment) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *InvoicePayment) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *InvoicePayment) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetCredit returns the Credit field value if set, zero value otherwise.
func (o *InvoicePayment) GetCredit() InvoiceReference {
	if o == nil || IsNil(o.Credit) {
		var ret InvoiceReference
		return ret
	}
	return *o.Credit
}

// GetCreditOk returns a tuple with the Credit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetCreditOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Credit) {
		return nil, false
	}
	return o.Credit, true
}

// HasCredit returns a boolean if a field has been set.
func (o *InvoicePayment) HasCredit() bool {
	if o != nil && !IsNil(o.Credit) {
		return true
	}

	return false
}

// SetCredit gets a reference to the given InvoiceReference and assigns it to the Credit field.
func (o *InvoicePayment) SetCredit(v InvoiceReference) {
	o.Credit = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePayment) GetAmount() float64 {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret float64
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePayment) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *InvoicePayment) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat64 and assigns it to the Amount field.
func (o *InvoicePayment) SetAmount(v float64) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *InvoicePayment) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *InvoicePayment) UnsetAmount() {
	o.Amount.Unset()
}

// GetBalance returns the Balance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePayment) GetBalance() float64 {
	if o == nil || IsNil(o.Balance.Get()) {
		var ret float64
		return ret
	}
	return *o.Balance.Get()
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePayment) GetBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balance.Get(), o.Balance.IsSet()
}

// HasBalance returns a boolean if a field has been set.
func (o *InvoicePayment) HasBalance() bool {
	if o != nil && o.Balance.IsSet() {
		return true
	}

	return false
}

// SetBalance gets a reference to the given NullableFloat64 and assigns it to the Balance field.
func (o *InvoicePayment) SetBalance(v float64) {
	o.Balance.Set(&v)
}
// SetBalanceNil sets the value for Balance to be an explicit nil
func (o *InvoicePayment) SetBalanceNil() {
	o.Balance.Set(nil)
}

// UnsetBalance ensures that no value is present for Balance, not even an explicit nil
func (o *InvoicePayment) UnsetBalance() {
	o.Balance.Unset()
}

// GetInvoiceBalance returns the InvoiceBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePayment) GetInvoiceBalance() float64 {
	if o == nil || IsNil(o.InvoiceBalance.Get()) {
		var ret float64
		return ret
	}
	return *o.InvoiceBalance.Get()
}

// GetInvoiceBalanceOk returns a tuple with the InvoiceBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePayment) GetInvoiceBalanceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceBalance.Get(), o.InvoiceBalance.IsSet()
}

// HasInvoiceBalance returns a boolean if a field has been set.
func (o *InvoicePayment) HasInvoiceBalance() bool {
	if o != nil && o.InvoiceBalance.IsSet() {
		return true
	}

	return false
}

// SetInvoiceBalance gets a reference to the given NullableFloat64 and assigns it to the InvoiceBalance field.
func (o *InvoicePayment) SetInvoiceBalance(v float64) {
	o.InvoiceBalance.Set(&v)
}
// SetInvoiceBalanceNil sets the value for InvoiceBalance to be an explicit nil
func (o *InvoicePayment) SetInvoiceBalanceNil() {
	o.InvoiceBalance.Set(nil)
}

// UnsetInvoiceBalance ensures that no value is present for InvoiceBalance, not even an explicit nil
func (o *InvoicePayment) UnsetInvoiceBalance() {
	o.InvoiceBalance.Unset()
}

// GetInvoiceTotal returns the InvoiceTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoicePayment) GetInvoiceTotal() float64 {
	if o == nil || IsNil(o.InvoiceTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.InvoiceTotal.Get()
}

// GetInvoiceTotalOk returns a tuple with the InvoiceTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoicePayment) GetInvoiceTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceTotal.Get(), o.InvoiceTotal.IsSet()
}

// HasInvoiceTotal returns a boolean if a field has been set.
func (o *InvoicePayment) HasInvoiceTotal() bool {
	if o != nil && o.InvoiceTotal.IsSet() {
		return true
	}

	return false
}

// SetInvoiceTotal gets a reference to the given NullableFloat64 and assigns it to the InvoiceTotal field.
func (o *InvoicePayment) SetInvoiceTotal(v float64) {
	o.InvoiceTotal.Set(&v)
}
// SetInvoiceTotalNil sets the value for InvoiceTotal to be an explicit nil
func (o *InvoicePayment) SetInvoiceTotalNil() {
	o.InvoiceTotal.Set(nil)
}

// UnsetInvoiceTotal ensures that no value is present for InvoiceTotal, not even an explicit nil
func (o *InvoicePayment) UnsetInvoiceTotal() {
	o.InvoiceTotal.Unset()
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *InvoicePayment) GetPaymentDate() time.Time {
	if o == nil || IsNil(o.PaymentDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetPaymentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *InvoicePayment) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given time.Time and assigns it to the PaymentDate field.
func (o *InvoicePayment) SetPaymentDate(v time.Time) {
	o.PaymentDate = &v
}

// GetAppliedBy returns the AppliedBy field value if set, zero value otherwise.
func (o *InvoicePayment) GetAppliedBy() string {
	if o == nil || IsNil(o.AppliedBy) {
		var ret string
		return ret
	}
	return *o.AppliedBy
}

// GetAppliedByOk returns a tuple with the AppliedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetAppliedByOk() (*string, bool) {
	if o == nil || IsNil(o.AppliedBy) {
		return nil, false
	}
	return o.AppliedBy, true
}

// HasAppliedBy returns a boolean if a field has been set.
func (o *InvoicePayment) HasAppliedBy() bool {
	if o != nil && !IsNil(o.AppliedBy) {
		return true
	}

	return false
}

// SetAppliedBy gets a reference to the given string and assigns it to the AppliedBy field.
func (o *InvoicePayment) SetAppliedBy(v string) {
	o.AppliedBy = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *InvoicePayment) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *InvoicePayment) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *InvoicePayment) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetWisePayPayment returns the WisePayPayment field value if set, zero value otherwise.
func (o *InvoicePayment) GetWisePayPayment() WisePayPayment {
	if o == nil || IsNil(o.WisePayPayment) {
		var ret WisePayPayment
		return ret
	}
	return *o.WisePayPayment
}

// GetWisePayPaymentOk returns a tuple with the WisePayPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetWisePayPaymentOk() (*WisePayPayment, bool) {
	if o == nil || IsNil(o.WisePayPayment) {
		return nil, false
	}
	return o.WisePayPayment, true
}

// HasWisePayPayment returns a boolean if a field has been set.
func (o *InvoicePayment) HasWisePayPayment() bool {
	if o != nil && !IsNil(o.WisePayPayment) {
		return true
	}

	return false
}

// SetWisePayPayment gets a reference to the given WisePayPayment and assigns it to the WisePayPayment field.
func (o *InvoicePayment) SetWisePayPayment(v WisePayPayment) {
	o.WisePayPayment = &v
}

// GetPaymentSyncStatus returns the PaymentSyncStatus field value if set, zero value otherwise.
func (o *InvoicePayment) GetPaymentSyncStatus() string {
	if o == nil || IsNil(o.PaymentSyncStatus) {
		var ret string
		return ret
	}
	return *o.PaymentSyncStatus
}

// GetPaymentSyncStatusOk returns a tuple with the PaymentSyncStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetPaymentSyncStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentSyncStatus) {
		return nil, false
	}
	return o.PaymentSyncStatus, true
}

// HasPaymentSyncStatus returns a boolean if a field has been set.
func (o *InvoicePayment) HasPaymentSyncStatus() bool {
	if o != nil && !IsNil(o.PaymentSyncStatus) {
		return true
	}

	return false
}

// SetPaymentSyncStatus gets a reference to the given string and assigns it to the PaymentSyncStatus field.
func (o *InvoicePayment) SetPaymentSyncStatus(v string) {
	o.PaymentSyncStatus = &v
}

// GetGlBatchID returns the GlBatchID field value if set, zero value otherwise.
func (o *InvoicePayment) GetGlBatchID() string {
	if o == nil || IsNil(o.GlBatchID) {
		var ret string
		return ret
	}
	return *o.GlBatchID
}

// GetGlBatchIDOk returns a tuple with the GlBatchID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetGlBatchIDOk() (*string, bool) {
	if o == nil || IsNil(o.GlBatchID) {
		return nil, false
	}
	return o.GlBatchID, true
}

// HasGlBatchID returns a boolean if a field has been set.
func (o *InvoicePayment) HasGlBatchID() bool {
	if o != nil && !IsNil(o.GlBatchID) {
		return true
	}

	return false
}

// SetGlBatchID gets a reference to the given string and assigns it to the GlBatchID field.
func (o *InvoicePayment) SetGlBatchID(v string) {
	o.GlBatchID = &v
}

// GetPaymentSyncDate returns the PaymentSyncDate field value if set, zero value otherwise.
func (o *InvoicePayment) GetPaymentSyncDate() time.Time {
	if o == nil || IsNil(o.PaymentSyncDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentSyncDate
}

// GetPaymentSyncDateOk returns a tuple with the PaymentSyncDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetPaymentSyncDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentSyncDate) {
		return nil, false
	}
	return o.PaymentSyncDate, true
}

// HasPaymentSyncDate returns a boolean if a field has been set.
func (o *InvoicePayment) HasPaymentSyncDate() bool {
	if o != nil && !IsNil(o.PaymentSyncDate) {
		return true
	}

	return false
}

// SetPaymentSyncDate gets a reference to the given time.Time and assigns it to the PaymentSyncDate field.
func (o *InvoicePayment) SetPaymentSyncDate(v time.Time) {
	o.PaymentSyncDate = &v
}

// GetPaymentAccount returns the PaymentAccount field value if set, zero value otherwise.
func (o *InvoicePayment) GetPaymentAccount() string {
	if o == nil || IsNil(o.PaymentAccount) {
		var ret string
		return ret
	}
	return *o.PaymentAccount
}

// GetPaymentAccountOk returns a tuple with the PaymentAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetPaymentAccountOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentAccount) {
		return nil, false
	}
	return o.PaymentAccount, true
}

// HasPaymentAccount returns a boolean if a field has been set.
func (o *InvoicePayment) HasPaymentAccount() bool {
	if o != nil && !IsNil(o.PaymentAccount) {
		return true
	}

	return false
}

// SetPaymentAccount gets a reference to the given string and assigns it to the PaymentAccount field.
func (o *InvoicePayment) SetPaymentAccount(v string) {
	o.PaymentAccount = &v
}

// GetARPaymentAccount returns the ARPaymentAccount field value if set, zero value otherwise.
func (o *InvoicePayment) GetARPaymentAccount() string {
	if o == nil || IsNil(o.ARPaymentAccount) {
		var ret string
		return ret
	}
	return *o.ARPaymentAccount
}

// GetARPaymentAccountOk returns a tuple with the ARPaymentAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicePayment) GetARPaymentAccountOk() (*string, bool) {
	if o == nil || IsNil(o.ARPaymentAccount) {
		return nil, false
	}
	return o.ARPaymentAccount, true
}

// HasARPaymentAccount returns a boolean if a field has been set.
func (o *InvoicePayment) HasARPaymentAccount() bool {
	if o != nil && !IsNil(o.ARPaymentAccount) {
		return true
	}

	return false
}

// SetARPaymentAccount gets a reference to the given string and assigns it to the ARPaymentAccount field.
func (o *InvoicePayment) SetARPaymentAccount(v string) {
	o.ARPaymentAccount = &v
}

func (o InvoicePayment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoicePayment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if !IsNil(o.Credit) {
		toSerialize["credit"] = o.Credit
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.Balance.IsSet() {
		toSerialize["balance"] = o.Balance.Get()
	}
	if o.InvoiceBalance.IsSet() {
		toSerialize["invoiceBalance"] = o.InvoiceBalance.Get()
	}
	if o.InvoiceTotal.IsSet() {
		toSerialize["invoiceTotal"] = o.InvoiceTotal.Get()
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if !IsNil(o.AppliedBy) {
		toSerialize["appliedBy"] = o.AppliedBy
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.WisePayPayment) {
		toSerialize["wisePayPayment"] = o.WisePayPayment
	}
	if !IsNil(o.PaymentSyncStatus) {
		toSerialize["paymentSyncStatus"] = o.PaymentSyncStatus
	}
	if !IsNil(o.GlBatchID) {
		toSerialize["glBatchID"] = o.GlBatchID
	}
	if !IsNil(o.PaymentSyncDate) {
		toSerialize["paymentSyncDate"] = o.PaymentSyncDate
	}
	if !IsNil(o.PaymentAccount) {
		toSerialize["paymentAccount"] = o.PaymentAccount
	}
	if !IsNil(o.ARPaymentAccount) {
		toSerialize["aRPaymentAccount"] = o.ARPaymentAccount
	}
	return toSerialize, nil
}

type NullableInvoicePayment struct {
	value *InvoicePayment
	isSet bool
}

func (v NullableInvoicePayment) Get() *InvoicePayment {
	return v.value
}

func (v *NullableInvoicePayment) Set(val *InvoicePayment) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoicePayment) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoicePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoicePayment(val *InvoicePayment) *NullableInvoicePayment {
	return &NullableInvoicePayment{value: val, isSet: true}
}

func (v NullableInvoicePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoicePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


