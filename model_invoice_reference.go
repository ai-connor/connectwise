/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the InvoiceReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceReference{}

// InvoiceReference struct for InvoiceReference
type InvoiceReference struct {
	Id NullableInt32 `json:"id,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	BillingType *string `json:"billingType,omitempty"`
	ApplyToType *string `json:"applyToType,omitempty"`
	InvoiceDate *string `json:"invoiceDate,omitempty"`
	ChargeFirmFlag NullableBool `json:"chargeFirmFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewInvoiceReference instantiates a new InvoiceReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceReference() *InvoiceReference {
	this := InvoiceReference{}
	return &this
}

// NewInvoiceReferenceWithDefaults instantiates a new InvoiceReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceReferenceWithDefaults() *InvoiceReference {
	this := InvoiceReference{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceReference) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceReference) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *InvoiceReference) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *InvoiceReference) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *InvoiceReference) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *InvoiceReference) UnsetId() {
	o.Id.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *InvoiceReference) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceReference) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *InvoiceReference) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *InvoiceReference) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetBillingType returns the BillingType field value if set, zero value otherwise.
func (o *InvoiceReference) GetBillingType() string {
	if o == nil || IsNil(o.BillingType) {
		var ret string
		return ret
	}
	return *o.BillingType
}

// GetBillingTypeOk returns a tuple with the BillingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceReference) GetBillingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingType) {
		return nil, false
	}
	return o.BillingType, true
}

// HasBillingType returns a boolean if a field has been set.
func (o *InvoiceReference) HasBillingType() bool {
	if o != nil && !IsNil(o.BillingType) {
		return true
	}

	return false
}

// SetBillingType gets a reference to the given string and assigns it to the BillingType field.
func (o *InvoiceReference) SetBillingType(v string) {
	o.BillingType = &v
}

// GetApplyToType returns the ApplyToType field value if set, zero value otherwise.
func (o *InvoiceReference) GetApplyToType() string {
	if o == nil || IsNil(o.ApplyToType) {
		var ret string
		return ret
	}
	return *o.ApplyToType
}

// GetApplyToTypeOk returns a tuple with the ApplyToType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceReference) GetApplyToTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ApplyToType) {
		return nil, false
	}
	return o.ApplyToType, true
}

// HasApplyToType returns a boolean if a field has been set.
func (o *InvoiceReference) HasApplyToType() bool {
	if o != nil && !IsNil(o.ApplyToType) {
		return true
	}

	return false
}

// SetApplyToType gets a reference to the given string and assigns it to the ApplyToType field.
func (o *InvoiceReference) SetApplyToType(v string) {
	o.ApplyToType = &v
}

// GetInvoiceDate returns the InvoiceDate field value if set, zero value otherwise.
func (o *InvoiceReference) GetInvoiceDate() string {
	if o == nil || IsNil(o.InvoiceDate) {
		var ret string
		return ret
	}
	return *o.InvoiceDate
}

// GetInvoiceDateOk returns a tuple with the InvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceReference) GetInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDate) {
		return nil, false
	}
	return o.InvoiceDate, true
}

// HasInvoiceDate returns a boolean if a field has been set.
func (o *InvoiceReference) HasInvoiceDate() bool {
	if o != nil && !IsNil(o.InvoiceDate) {
		return true
	}

	return false
}

// SetInvoiceDate gets a reference to the given string and assigns it to the InvoiceDate field.
func (o *InvoiceReference) SetInvoiceDate(v string) {
	o.InvoiceDate = &v
}

// GetChargeFirmFlag returns the ChargeFirmFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceReference) GetChargeFirmFlag() bool {
	if o == nil || IsNil(o.ChargeFirmFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ChargeFirmFlag.Get()
}

// GetChargeFirmFlagOk returns a tuple with the ChargeFirmFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceReference) GetChargeFirmFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeFirmFlag.Get(), o.ChargeFirmFlag.IsSet()
}

// HasChargeFirmFlag returns a boolean if a field has been set.
func (o *InvoiceReference) HasChargeFirmFlag() bool {
	if o != nil && o.ChargeFirmFlag.IsSet() {
		return true
	}

	return false
}

// SetChargeFirmFlag gets a reference to the given NullableBool and assigns it to the ChargeFirmFlag field.
func (o *InvoiceReference) SetChargeFirmFlag(v bool) {
	o.ChargeFirmFlag.Set(&v)
}
// SetChargeFirmFlagNil sets the value for ChargeFirmFlag to be an explicit nil
func (o *InvoiceReference) SetChargeFirmFlagNil() {
	o.ChargeFirmFlag.Set(nil)
}

// UnsetChargeFirmFlag ensures that no value is present for ChargeFirmFlag, not even an explicit nil
func (o *InvoiceReference) UnsetChargeFirmFlag() {
	o.ChargeFirmFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *InvoiceReference) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceReference) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *InvoiceReference) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *InvoiceReference) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o InvoiceReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.BillingType) {
		toSerialize["billingType"] = o.BillingType
	}
	if !IsNil(o.ApplyToType) {
		toSerialize["applyToType"] = o.ApplyToType
	}
	if !IsNil(o.InvoiceDate) {
		toSerialize["invoiceDate"] = o.InvoiceDate
	}
	if o.ChargeFirmFlag.IsSet() {
		toSerialize["chargeFirmFlag"] = o.ChargeFirmFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableInvoiceReference struct {
	value *InvoiceReference
	isSet bool
}

func (v NullableInvoiceReference) Get() *InvoiceReference {
	return v.value
}

func (v *NullableInvoiceReference) Set(val *InvoiceReference) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceReference) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceReference(val *InvoiceReference) *NullableInvoiceReference {
	return &NullableInvoiceReference{value: val, isSet: true}
}

func (v NullableInvoiceReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


