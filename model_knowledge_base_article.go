/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KnowledgeBaseArticle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KnowledgeBaseArticle{}

// KnowledgeBaseArticle struct for KnowledgeBaseArticle
type KnowledgeBaseArticle struct {
	Id *int32 `json:"id,omitempty"`
	Title string `json:"title"`
	Issue string `json:"issue"`
	Resolution string `json:"resolution"`
	LocationId NullableInt32 `json:"locationId,omitempty"`
	BusinessUnitId NullableInt32 `json:"businessUnitId,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	CategoryId NullableInt32 `json:"categoryId,omitempty"`
	SubCategoryId NullableInt32 `json:"subCategoryId,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _KnowledgeBaseArticle KnowledgeBaseArticle

// NewKnowledgeBaseArticle instantiates a new KnowledgeBaseArticle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnowledgeBaseArticle(title string, issue string, resolution string) *KnowledgeBaseArticle {
	this := KnowledgeBaseArticle{}
	this.Title = title
	this.Issue = issue
	this.Resolution = resolution
	return &this
}

// NewKnowledgeBaseArticleWithDefaults instantiates a new KnowledgeBaseArticle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnowledgeBaseArticleWithDefaults() *KnowledgeBaseArticle {
	this := KnowledgeBaseArticle{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KnowledgeBaseArticle) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KnowledgeBaseArticle) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *KnowledgeBaseArticle) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *KnowledgeBaseArticle) SetTitle(v string) {
	o.Title = v
}

// GetIssue returns the Issue field value
func (o *KnowledgeBaseArticle) GetIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issue, true
}

// SetIssue sets field value
func (o *KnowledgeBaseArticle) SetIssue(v string) {
	o.Issue = v
}

// GetResolution returns the Resolution field value
func (o *KnowledgeBaseArticle) GetResolution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolution, true
}

// SetResolution sets field value
func (o *KnowledgeBaseArticle) SetResolution(v string) {
	o.Resolution = v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KnowledgeBaseArticle) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KnowledgeBaseArticle) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *KnowledgeBaseArticle) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *KnowledgeBaseArticle) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *KnowledgeBaseArticle) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KnowledgeBaseArticle) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KnowledgeBaseArticle) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *KnowledgeBaseArticle) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}
// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *KnowledgeBaseArticle) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *KnowledgeBaseArticle) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *KnowledgeBaseArticle) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *KnowledgeBaseArticle) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KnowledgeBaseArticle) GetCategoryId() int32 {
	if o == nil || IsNil(o.CategoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.CategoryId.Get()
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KnowledgeBaseArticle) GetCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CategoryId.Get(), o.CategoryId.IsSet()
}

// HasCategoryId returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasCategoryId() bool {
	if o != nil && o.CategoryId.IsSet() {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given NullableInt32 and assigns it to the CategoryId field.
func (o *KnowledgeBaseArticle) SetCategoryId(v int32) {
	o.CategoryId.Set(&v)
}
// SetCategoryIdNil sets the value for CategoryId to be an explicit nil
func (o *KnowledgeBaseArticle) SetCategoryIdNil() {
	o.CategoryId.Set(nil)
}

// UnsetCategoryId ensures that no value is present for CategoryId, not even an explicit nil
func (o *KnowledgeBaseArticle) UnsetCategoryId() {
	o.CategoryId.Unset()
}

// GetSubCategoryId returns the SubCategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KnowledgeBaseArticle) GetSubCategoryId() int32 {
	if o == nil || IsNil(o.SubCategoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.SubCategoryId.Get()
}

// GetSubCategoryIdOk returns a tuple with the SubCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KnowledgeBaseArticle) GetSubCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubCategoryId.Get(), o.SubCategoryId.IsSet()
}

// HasSubCategoryId returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasSubCategoryId() bool {
	if o != nil && o.SubCategoryId.IsSet() {
		return true
	}

	return false
}

// SetSubCategoryId gets a reference to the given NullableInt32 and assigns it to the SubCategoryId field.
func (o *KnowledgeBaseArticle) SetSubCategoryId(v int32) {
	o.SubCategoryId.Set(&v)
}
// SetSubCategoryIdNil sets the value for SubCategoryId to be an explicit nil
func (o *KnowledgeBaseArticle) SetSubCategoryIdNil() {
	o.SubCategoryId.Set(nil)
}

// UnsetSubCategoryId ensures that no value is present for SubCategoryId, not even an explicit nil
func (o *KnowledgeBaseArticle) UnsetSubCategoryId() {
	o.SubCategoryId.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *KnowledgeBaseArticle) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *KnowledgeBaseArticle) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *KnowledgeBaseArticle) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *KnowledgeBaseArticle) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *KnowledgeBaseArticle) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnowledgeBaseArticle) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *KnowledgeBaseArticle) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *KnowledgeBaseArticle) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o KnowledgeBaseArticle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KnowledgeBaseArticle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	toSerialize["issue"] = o.Issue
	toSerialize["resolution"] = o.Resolution
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if o.CategoryId.IsSet() {
		toSerialize["categoryId"] = o.CategoryId.Get()
	}
	if o.SubCategoryId.IsSet() {
		toSerialize["subCategoryId"] = o.SubCategoryId.Get()
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *KnowledgeBaseArticle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"issue",
		"resolution",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKnowledgeBaseArticle := _KnowledgeBaseArticle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKnowledgeBaseArticle)

	if err != nil {
		return err
	}

	*o = KnowledgeBaseArticle(varKnowledgeBaseArticle)

	return err
}

type NullableKnowledgeBaseArticle struct {
	value *KnowledgeBaseArticle
	isSet bool
}

func (v NullableKnowledgeBaseArticle) Get() *KnowledgeBaseArticle {
	return v.value
}

func (v *NullableKnowledgeBaseArticle) Set(val *KnowledgeBaseArticle) {
	v.value = val
	v.isSet = true
}

func (v NullableKnowledgeBaseArticle) IsSet() bool {
	return v.isSet
}

func (v *NullableKnowledgeBaseArticle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnowledgeBaseArticle(val *KnowledgeBaseArticle) *NullableKnowledgeBaseArticle {
	return &NullableKnowledgeBaseArticle{value: val, isSet: true}
}

func (v NullableKnowledgeBaseArticle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnowledgeBaseArticle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


