/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LinkResolveUrlInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkResolveUrlInfo{}

// LinkResolveUrlInfo struct for LinkResolveUrlInfo
type LinkResolveUrlInfo struct {
	ReferenceId NullableInt32 `json:"referenceId"`
	Url *string `json:"url,omitempty"`
}

type _LinkResolveUrlInfo LinkResolveUrlInfo

// NewLinkResolveUrlInfo instantiates a new LinkResolveUrlInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkResolveUrlInfo(referenceId NullableInt32) *LinkResolveUrlInfo {
	this := LinkResolveUrlInfo{}
	this.ReferenceId = referenceId
	return &this
}

// NewLinkResolveUrlInfoWithDefaults instantiates a new LinkResolveUrlInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkResolveUrlInfoWithDefaults() *LinkResolveUrlInfo {
	this := LinkResolveUrlInfo{}
	return &this
}

// GetReferenceId returns the ReferenceId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *LinkResolveUrlInfo) GetReferenceId() int32 {
	if o == nil || o.ReferenceId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ReferenceId.Get()
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkResolveUrlInfo) GetReferenceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferenceId.Get(), o.ReferenceId.IsSet()
}

// SetReferenceId sets field value
func (o *LinkResolveUrlInfo) SetReferenceId(v int32) {
	o.ReferenceId.Set(&v)
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *LinkResolveUrlInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkResolveUrlInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *LinkResolveUrlInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *LinkResolveUrlInfo) SetUrl(v string) {
	o.Url = &v
}

func (o LinkResolveUrlInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkResolveUrlInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["referenceId"] = o.ReferenceId.Get()
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *LinkResolveUrlInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"referenceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkResolveUrlInfo := _LinkResolveUrlInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLinkResolveUrlInfo)

	if err != nil {
		return err
	}

	*o = LinkResolveUrlInfo(varLinkResolveUrlInfo)

	return err
}

type NullableLinkResolveUrlInfo struct {
	value *LinkResolveUrlInfo
	isSet bool
}

func (v NullableLinkResolveUrlInfo) Get() *LinkResolveUrlInfo {
	return v.value
}

func (v *NullableLinkResolveUrlInfo) Set(val *LinkResolveUrlInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkResolveUrlInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkResolveUrlInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkResolveUrlInfo(val *LinkResolveUrlInfo) *NullableLinkResolveUrlInfo {
	return &NullableLinkResolveUrlInfo{value: val, isSet: true}
}

func (v NullableLinkResolveUrlInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkResolveUrlInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


