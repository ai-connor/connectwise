/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the LocationDepartment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationDepartment{}

// LocationDepartment struct for LocationDepartment
type LocationDepartment struct {
	Id *int32 `json:"id,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewLocationDepartment instantiates a new LocationDepartment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationDepartment() *LocationDepartment {
	this := LocationDepartment{}
	return &this
}

// NewLocationDepartmentWithDefaults instantiates a new LocationDepartment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationDepartmentWithDefaults() *LocationDepartment {
	this := LocationDepartment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LocationDepartment) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDepartment) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LocationDepartment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *LocationDepartment) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *LocationDepartment) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDepartment) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *LocationDepartment) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *LocationDepartment) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *LocationDepartment) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDepartment) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *LocationDepartment) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *LocationDepartment) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *LocationDepartment) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDepartment) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *LocationDepartment) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *LocationDepartment) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o LocationDepartment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationDepartment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableLocationDepartment struct {
	value *LocationDepartment
	isSet bool
}

func (v NullableLocationDepartment) Get() *LocationDepartment {
	return v.value
}

func (v *NullableLocationDepartment) Set(val *LocationDepartment) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationDepartment) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationDepartment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationDepartment(val *LocationDepartment) *NullableLocationDepartment {
	return &NullableLocationDepartment{value: val, isSet: true}
}

func (v NullableLocationDepartment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationDepartment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


