/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ManagedDevicesIntegrationCrossReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedDevicesIntegrationCrossReference{}

// ManagedDevicesIntegrationCrossReference struct for ManagedDevicesIntegrationCrossReference
type ManagedDevicesIntegrationCrossReference struct {
	Id *int32 `json:"id,omitempty"`
	ManagedDevicesIntegration *ManagedDevicesIntegrationReference `json:"managedDevicesIntegration,omitempty"`
	//  Max length: 255;
	VendorType *string `json:"vendorType,omitempty"`
	//  Max length: 255;
	VendorLevel *string `json:"vendorLevel,omitempty"`
	AgreementType *AgreementTypeReference `json:"agreementType,omitempty"`
	Product *IvItemReference `json:"product,omitempty"`
	ConfigurationType *ConfigurationTypeReference `json:"configurationType,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewManagedDevicesIntegrationCrossReference instantiates a new ManagedDevicesIntegrationCrossReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedDevicesIntegrationCrossReference() *ManagedDevicesIntegrationCrossReference {
	this := ManagedDevicesIntegrationCrossReference{}
	return &this
}

// NewManagedDevicesIntegrationCrossReferenceWithDefaults instantiates a new ManagedDevicesIntegrationCrossReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedDevicesIntegrationCrossReferenceWithDefaults() *ManagedDevicesIntegrationCrossReference {
	this := ManagedDevicesIntegrationCrossReference{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ManagedDevicesIntegrationCrossReference) SetId(v int32) {
	o.Id = &v
}

// GetManagedDevicesIntegration returns the ManagedDevicesIntegration field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetManagedDevicesIntegration() ManagedDevicesIntegrationReference {
	if o == nil || IsNil(o.ManagedDevicesIntegration) {
		var ret ManagedDevicesIntegrationReference
		return ret
	}
	return *o.ManagedDevicesIntegration
}

// GetManagedDevicesIntegrationOk returns a tuple with the ManagedDevicesIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetManagedDevicesIntegrationOk() (*ManagedDevicesIntegrationReference, bool) {
	if o == nil || IsNil(o.ManagedDevicesIntegration) {
		return nil, false
	}
	return o.ManagedDevicesIntegration, true
}

// HasManagedDevicesIntegration returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasManagedDevicesIntegration() bool {
	if o != nil && !IsNil(o.ManagedDevicesIntegration) {
		return true
	}

	return false
}

// SetManagedDevicesIntegration gets a reference to the given ManagedDevicesIntegrationReference and assigns it to the ManagedDevicesIntegration field.
func (o *ManagedDevicesIntegrationCrossReference) SetManagedDevicesIntegration(v ManagedDevicesIntegrationReference) {
	o.ManagedDevicesIntegration = &v
}

// GetVendorType returns the VendorType field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetVendorType() string {
	if o == nil || IsNil(o.VendorType) {
		var ret string
		return ret
	}
	return *o.VendorType
}

// GetVendorTypeOk returns a tuple with the VendorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetVendorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorType) {
		return nil, false
	}
	return o.VendorType, true
}

// HasVendorType returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasVendorType() bool {
	if o != nil && !IsNil(o.VendorType) {
		return true
	}

	return false
}

// SetVendorType gets a reference to the given string and assigns it to the VendorType field.
func (o *ManagedDevicesIntegrationCrossReference) SetVendorType(v string) {
	o.VendorType = &v
}

// GetVendorLevel returns the VendorLevel field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetVendorLevel() string {
	if o == nil || IsNil(o.VendorLevel) {
		var ret string
		return ret
	}
	return *o.VendorLevel
}

// GetVendorLevelOk returns a tuple with the VendorLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetVendorLevelOk() (*string, bool) {
	if o == nil || IsNil(o.VendorLevel) {
		return nil, false
	}
	return o.VendorLevel, true
}

// HasVendorLevel returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasVendorLevel() bool {
	if o != nil && !IsNil(o.VendorLevel) {
		return true
	}

	return false
}

// SetVendorLevel gets a reference to the given string and assigns it to the VendorLevel field.
func (o *ManagedDevicesIntegrationCrossReference) SetVendorLevel(v string) {
	o.VendorLevel = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetAgreementType() AgreementTypeReference {
	if o == nil || IsNil(o.AgreementType) {
		var ret AgreementTypeReference
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetAgreementTypeOk() (*AgreementTypeReference, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given AgreementTypeReference and assigns it to the AgreementType field.
func (o *ManagedDevicesIntegrationCrossReference) SetAgreementType(v AgreementTypeReference) {
	o.AgreementType = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetProduct() IvItemReference {
	if o == nil || IsNil(o.Product) {
		var ret IvItemReference
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetProductOk() (*IvItemReference, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given IvItemReference and assigns it to the Product field.
func (o *ManagedDevicesIntegrationCrossReference) SetProduct(v IvItemReference) {
	o.Product = &v
}

// GetConfigurationType returns the ConfigurationType field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetConfigurationType() ConfigurationTypeReference {
	if o == nil || IsNil(o.ConfigurationType) {
		var ret ConfigurationTypeReference
		return ret
	}
	return *o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetConfigurationTypeOk() (*ConfigurationTypeReference, bool) {
	if o == nil || IsNil(o.ConfigurationType) {
		return nil, false
	}
	return o.ConfigurationType, true
}

// HasConfigurationType returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasConfigurationType() bool {
	if o != nil && !IsNil(o.ConfigurationType) {
		return true
	}

	return false
}

// SetConfigurationType gets a reference to the given ConfigurationTypeReference and assigns it to the ConfigurationType field.
func (o *ManagedDevicesIntegrationCrossReference) SetConfigurationType(v ConfigurationTypeReference) {
	o.ConfigurationType = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedDevicesIntegrationCrossReference) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedDevicesIntegrationCrossReference) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *ManagedDevicesIntegrationCrossReference) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *ManagedDevicesIntegrationCrossReference) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *ManagedDevicesIntegrationCrossReference) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ManagedDevicesIntegrationCrossReference) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDevicesIntegrationCrossReference) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ManagedDevicesIntegrationCrossReference) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ManagedDevicesIntegrationCrossReference) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ManagedDevicesIntegrationCrossReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedDevicesIntegrationCrossReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ManagedDevicesIntegration) {
		toSerialize["managedDevicesIntegration"] = o.ManagedDevicesIntegration
	}
	if !IsNil(o.VendorType) {
		toSerialize["vendorType"] = o.VendorType
	}
	if !IsNil(o.VendorLevel) {
		toSerialize["vendorLevel"] = o.VendorLevel
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.ConfigurationType) {
		toSerialize["configurationType"] = o.ConfigurationType
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableManagedDevicesIntegrationCrossReference struct {
	value *ManagedDevicesIntegrationCrossReference
	isSet bool
}

func (v NullableManagedDevicesIntegrationCrossReference) Get() *ManagedDevicesIntegrationCrossReference {
	return v.value
}

func (v *NullableManagedDevicesIntegrationCrossReference) Set(val *ManagedDevicesIntegrationCrossReference) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedDevicesIntegrationCrossReference) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedDevicesIntegrationCrossReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedDevicesIntegrationCrossReference(val *ManagedDevicesIntegrationCrossReference) *NullableManagedDevicesIntegrationCrossReference {
	return &NullableManagedDevicesIntegrationCrossReference{value: val, isSet: true}
}

func (v NullableManagedDevicesIntegrationCrossReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedDevicesIntegrationCrossReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


