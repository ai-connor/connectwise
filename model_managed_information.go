/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ManagedInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedInformation{}

// ManagedInformation struct for ManagedInformation
type ManagedInformation struct {
	ManagementSolutionName *string `json:"managementSolutionName,omitempty"`
	ManagedIdentifier *string `json:"managedIdentifier,omitempty"`
	Type *string `json:"type,omitempty"`
	Level *string `json:"level,omitempty"`
	ChildConfigurationsMatchingOn *string `json:"childConfigurationsMatchingOn,omitempty"`
	InactivateConfigurationsMatchingOn *string `json:"inactivateConfigurationsMatchingOn,omitempty"`
	InactiveConfigurationStatusId *int32 `json:"inactiveConfigurationStatusId,omitempty"`
}

// NewManagedInformation instantiates a new ManagedInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedInformation() *ManagedInformation {
	this := ManagedInformation{}
	return &this
}

// NewManagedInformationWithDefaults instantiates a new ManagedInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedInformationWithDefaults() *ManagedInformation {
	this := ManagedInformation{}
	return &this
}

// GetManagementSolutionName returns the ManagementSolutionName field value if set, zero value otherwise.
func (o *ManagedInformation) GetManagementSolutionName() string {
	if o == nil || IsNil(o.ManagementSolutionName) {
		var ret string
		return ret
	}
	return *o.ManagementSolutionName
}

// GetManagementSolutionNameOk returns a tuple with the ManagementSolutionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetManagementSolutionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementSolutionName) {
		return nil, false
	}
	return o.ManagementSolutionName, true
}

// HasManagementSolutionName returns a boolean if a field has been set.
func (o *ManagedInformation) HasManagementSolutionName() bool {
	if o != nil && !IsNil(o.ManagementSolutionName) {
		return true
	}

	return false
}

// SetManagementSolutionName gets a reference to the given string and assigns it to the ManagementSolutionName field.
func (o *ManagedInformation) SetManagementSolutionName(v string) {
	o.ManagementSolutionName = &v
}

// GetManagedIdentifier returns the ManagedIdentifier field value if set, zero value otherwise.
func (o *ManagedInformation) GetManagedIdentifier() string {
	if o == nil || IsNil(o.ManagedIdentifier) {
		var ret string
		return ret
	}
	return *o.ManagedIdentifier
}

// GetManagedIdentifierOk returns a tuple with the ManagedIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetManagedIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedIdentifier) {
		return nil, false
	}
	return o.ManagedIdentifier, true
}

// HasManagedIdentifier returns a boolean if a field has been set.
func (o *ManagedInformation) HasManagedIdentifier() bool {
	if o != nil && !IsNil(o.ManagedIdentifier) {
		return true
	}

	return false
}

// SetManagedIdentifier gets a reference to the given string and assigns it to the ManagedIdentifier field.
func (o *ManagedInformation) SetManagedIdentifier(v string) {
	o.ManagedIdentifier = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ManagedInformation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ManagedInformation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ManagedInformation) SetType(v string) {
	o.Type = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ManagedInformation) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ManagedInformation) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *ManagedInformation) SetLevel(v string) {
	o.Level = &v
}

// GetChildConfigurationsMatchingOn returns the ChildConfigurationsMatchingOn field value if set, zero value otherwise.
func (o *ManagedInformation) GetChildConfigurationsMatchingOn() string {
	if o == nil || IsNil(o.ChildConfigurationsMatchingOn) {
		var ret string
		return ret
	}
	return *o.ChildConfigurationsMatchingOn
}

// GetChildConfigurationsMatchingOnOk returns a tuple with the ChildConfigurationsMatchingOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetChildConfigurationsMatchingOnOk() (*string, bool) {
	if o == nil || IsNil(o.ChildConfigurationsMatchingOn) {
		return nil, false
	}
	return o.ChildConfigurationsMatchingOn, true
}

// HasChildConfigurationsMatchingOn returns a boolean if a field has been set.
func (o *ManagedInformation) HasChildConfigurationsMatchingOn() bool {
	if o != nil && !IsNil(o.ChildConfigurationsMatchingOn) {
		return true
	}

	return false
}

// SetChildConfigurationsMatchingOn gets a reference to the given string and assigns it to the ChildConfigurationsMatchingOn field.
func (o *ManagedInformation) SetChildConfigurationsMatchingOn(v string) {
	o.ChildConfigurationsMatchingOn = &v
}

// GetInactivateConfigurationsMatchingOn returns the InactivateConfigurationsMatchingOn field value if set, zero value otherwise.
func (o *ManagedInformation) GetInactivateConfigurationsMatchingOn() string {
	if o == nil || IsNil(o.InactivateConfigurationsMatchingOn) {
		var ret string
		return ret
	}
	return *o.InactivateConfigurationsMatchingOn
}

// GetInactivateConfigurationsMatchingOnOk returns a tuple with the InactivateConfigurationsMatchingOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetInactivateConfigurationsMatchingOnOk() (*string, bool) {
	if o == nil || IsNil(o.InactivateConfigurationsMatchingOn) {
		return nil, false
	}
	return o.InactivateConfigurationsMatchingOn, true
}

// HasInactivateConfigurationsMatchingOn returns a boolean if a field has been set.
func (o *ManagedInformation) HasInactivateConfigurationsMatchingOn() bool {
	if o != nil && !IsNil(o.InactivateConfigurationsMatchingOn) {
		return true
	}

	return false
}

// SetInactivateConfigurationsMatchingOn gets a reference to the given string and assigns it to the InactivateConfigurationsMatchingOn field.
func (o *ManagedInformation) SetInactivateConfigurationsMatchingOn(v string) {
	o.InactivateConfigurationsMatchingOn = &v
}

// GetInactiveConfigurationStatusId returns the InactiveConfigurationStatusId field value if set, zero value otherwise.
func (o *ManagedInformation) GetInactiveConfigurationStatusId() int32 {
	if o == nil || IsNil(o.InactiveConfigurationStatusId) {
		var ret int32
		return ret
	}
	return *o.InactiveConfigurationStatusId
}

// GetInactiveConfigurationStatusIdOk returns a tuple with the InactiveConfigurationStatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInformation) GetInactiveConfigurationStatusIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InactiveConfigurationStatusId) {
		return nil, false
	}
	return o.InactiveConfigurationStatusId, true
}

// HasInactiveConfigurationStatusId returns a boolean if a field has been set.
func (o *ManagedInformation) HasInactiveConfigurationStatusId() bool {
	if o != nil && !IsNil(o.InactiveConfigurationStatusId) {
		return true
	}

	return false
}

// SetInactiveConfigurationStatusId gets a reference to the given int32 and assigns it to the InactiveConfigurationStatusId field.
func (o *ManagedInformation) SetInactiveConfigurationStatusId(v int32) {
	o.InactiveConfigurationStatusId = &v
}

func (o ManagedInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ManagementSolutionName) {
		toSerialize["managementSolutionName"] = o.ManagementSolutionName
	}
	if !IsNil(o.ManagedIdentifier) {
		toSerialize["managedIdentifier"] = o.ManagedIdentifier
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.ChildConfigurationsMatchingOn) {
		toSerialize["childConfigurationsMatchingOn"] = o.ChildConfigurationsMatchingOn
	}
	if !IsNil(o.InactivateConfigurationsMatchingOn) {
		toSerialize["inactivateConfigurationsMatchingOn"] = o.InactivateConfigurationsMatchingOn
	}
	if !IsNil(o.InactiveConfigurationStatusId) {
		toSerialize["inactiveConfigurationStatusId"] = o.InactiveConfigurationStatusId
	}
	return toSerialize, nil
}

type NullableManagedInformation struct {
	value *ManagedInformation
	isSet bool
}

func (v NullableManagedInformation) Get() *ManagedInformation {
	return v.value
}

func (v *NullableManagedInformation) Set(val *ManagedInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedInformation(val *ManagedInformation) *NullableManagedInformation {
	return &NullableManagedInformation{value: val, isSet: true}
}

func (v NullableManagedInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


