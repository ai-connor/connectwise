/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Management type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Management{}

// Management struct for Management
type Management struct {
	Id *int32 `json:"id,omitempty"`
	RunTime *time.Time `json:"runTime,omitempty"`
	AddedConfigurationStatus ConfigurationStatusReference `json:"addedConfigurationStatus"`
	DeletedConfigurationStatus ConfigurationStatusReference `json:"deletedConfigurationStatus"`
	IntegratorLogin IntegratorLoginReference `json:"integratorLogin"`
	ScheduleExecutiveSummaryReportFlag NullableBool `json:"scheduleExecutiveSummaryReportFlag"`
	// Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true.
	ExecutiveSummaryReportScheduleDay NullableInt32 `json:"executiveSummaryReportScheduleDay,omitempty"`
	// Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true. Input should be in 24 hour format, ie 2pm is 14.
	ExecutiveSummaryReportScheduleHour NullableInt32 `json:"executiveSummaryReportScheduleHour,omitempty"`
	// Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true.
	ExecutiveSummaryReportScheduleMinute NullableInt32 `json:"executiveSummaryReportScheduleMinute,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Management Management

// NewManagement instantiates a new Management object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagement(addedConfigurationStatus ConfigurationStatusReference, deletedConfigurationStatus ConfigurationStatusReference, integratorLogin IntegratorLoginReference, scheduleExecutiveSummaryReportFlag NullableBool) *Management {
	this := Management{}
	this.AddedConfigurationStatus = addedConfigurationStatus
	this.DeletedConfigurationStatus = deletedConfigurationStatus
	this.IntegratorLogin = integratorLogin
	this.ScheduleExecutiveSummaryReportFlag = scheduleExecutiveSummaryReportFlag
	return &this
}

// NewManagementWithDefaults instantiates a new Management object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementWithDefaults() *Management {
	this := Management{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Management) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Management) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Management) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Management) SetId(v int32) {
	o.Id = &v
}

// GetRunTime returns the RunTime field value if set, zero value otherwise.
func (o *Management) GetRunTime() time.Time {
	if o == nil || IsNil(o.RunTime) {
		var ret time.Time
		return ret
	}
	return *o.RunTime
}

// GetRunTimeOk returns a tuple with the RunTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Management) GetRunTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RunTime) {
		return nil, false
	}
	return o.RunTime, true
}

// HasRunTime returns a boolean if a field has been set.
func (o *Management) HasRunTime() bool {
	if o != nil && !IsNil(o.RunTime) {
		return true
	}

	return false
}

// SetRunTime gets a reference to the given time.Time and assigns it to the RunTime field.
func (o *Management) SetRunTime(v time.Time) {
	o.RunTime = &v
}

// GetAddedConfigurationStatus returns the AddedConfigurationStatus field value
func (o *Management) GetAddedConfigurationStatus() ConfigurationStatusReference {
	if o == nil {
		var ret ConfigurationStatusReference
		return ret
	}

	return o.AddedConfigurationStatus
}

// GetAddedConfigurationStatusOk returns a tuple with the AddedConfigurationStatus field value
// and a boolean to check if the value has been set.
func (o *Management) GetAddedConfigurationStatusOk() (*ConfigurationStatusReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddedConfigurationStatus, true
}

// SetAddedConfigurationStatus sets field value
func (o *Management) SetAddedConfigurationStatus(v ConfigurationStatusReference) {
	o.AddedConfigurationStatus = v
}

// GetDeletedConfigurationStatus returns the DeletedConfigurationStatus field value
func (o *Management) GetDeletedConfigurationStatus() ConfigurationStatusReference {
	if o == nil {
		var ret ConfigurationStatusReference
		return ret
	}

	return o.DeletedConfigurationStatus
}

// GetDeletedConfigurationStatusOk returns a tuple with the DeletedConfigurationStatus field value
// and a boolean to check if the value has been set.
func (o *Management) GetDeletedConfigurationStatusOk() (*ConfigurationStatusReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeletedConfigurationStatus, true
}

// SetDeletedConfigurationStatus sets field value
func (o *Management) SetDeletedConfigurationStatus(v ConfigurationStatusReference) {
	o.DeletedConfigurationStatus = v
}

// GetIntegratorLogin returns the IntegratorLogin field value
func (o *Management) GetIntegratorLogin() IntegratorLoginReference {
	if o == nil {
		var ret IntegratorLoginReference
		return ret
	}

	return o.IntegratorLogin
}

// GetIntegratorLoginOk returns a tuple with the IntegratorLogin field value
// and a boolean to check if the value has been set.
func (o *Management) GetIntegratorLoginOk() (*IntegratorLoginReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegratorLogin, true
}

// SetIntegratorLogin sets field value
func (o *Management) SetIntegratorLogin(v IntegratorLoginReference) {
	o.IntegratorLogin = v
}

// GetScheduleExecutiveSummaryReportFlag returns the ScheduleExecutiveSummaryReportFlag field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *Management) GetScheduleExecutiveSummaryReportFlag() bool {
	if o == nil || o.ScheduleExecutiveSummaryReportFlag.Get() == nil {
		var ret bool
		return ret
	}

	return *o.ScheduleExecutiveSummaryReportFlag.Get()
}

// GetScheduleExecutiveSummaryReportFlagOk returns a tuple with the ScheduleExecutiveSummaryReportFlag field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Management) GetScheduleExecutiveSummaryReportFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleExecutiveSummaryReportFlag.Get(), o.ScheduleExecutiveSummaryReportFlag.IsSet()
}

// SetScheduleExecutiveSummaryReportFlag sets field value
func (o *Management) SetScheduleExecutiveSummaryReportFlag(v bool) {
	o.ScheduleExecutiveSummaryReportFlag.Set(&v)
}

// GetExecutiveSummaryReportScheduleDay returns the ExecutiveSummaryReportScheduleDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Management) GetExecutiveSummaryReportScheduleDay() int32 {
	if o == nil || IsNil(o.ExecutiveSummaryReportScheduleDay.Get()) {
		var ret int32
		return ret
	}
	return *o.ExecutiveSummaryReportScheduleDay.Get()
}

// GetExecutiveSummaryReportScheduleDayOk returns a tuple with the ExecutiveSummaryReportScheduleDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Management) GetExecutiveSummaryReportScheduleDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutiveSummaryReportScheduleDay.Get(), o.ExecutiveSummaryReportScheduleDay.IsSet()
}

// HasExecutiveSummaryReportScheduleDay returns a boolean if a field has been set.
func (o *Management) HasExecutiveSummaryReportScheduleDay() bool {
	if o != nil && o.ExecutiveSummaryReportScheduleDay.IsSet() {
		return true
	}

	return false
}

// SetExecutiveSummaryReportScheduleDay gets a reference to the given NullableInt32 and assigns it to the ExecutiveSummaryReportScheduleDay field.
func (o *Management) SetExecutiveSummaryReportScheduleDay(v int32) {
	o.ExecutiveSummaryReportScheduleDay.Set(&v)
}
// SetExecutiveSummaryReportScheduleDayNil sets the value for ExecutiveSummaryReportScheduleDay to be an explicit nil
func (o *Management) SetExecutiveSummaryReportScheduleDayNil() {
	o.ExecutiveSummaryReportScheduleDay.Set(nil)
}

// UnsetExecutiveSummaryReportScheduleDay ensures that no value is present for ExecutiveSummaryReportScheduleDay, not even an explicit nil
func (o *Management) UnsetExecutiveSummaryReportScheduleDay() {
	o.ExecutiveSummaryReportScheduleDay.Unset()
}

// GetExecutiveSummaryReportScheduleHour returns the ExecutiveSummaryReportScheduleHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Management) GetExecutiveSummaryReportScheduleHour() int32 {
	if o == nil || IsNil(o.ExecutiveSummaryReportScheduleHour.Get()) {
		var ret int32
		return ret
	}
	return *o.ExecutiveSummaryReportScheduleHour.Get()
}

// GetExecutiveSummaryReportScheduleHourOk returns a tuple with the ExecutiveSummaryReportScheduleHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Management) GetExecutiveSummaryReportScheduleHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutiveSummaryReportScheduleHour.Get(), o.ExecutiveSummaryReportScheduleHour.IsSet()
}

// HasExecutiveSummaryReportScheduleHour returns a boolean if a field has been set.
func (o *Management) HasExecutiveSummaryReportScheduleHour() bool {
	if o != nil && o.ExecutiveSummaryReportScheduleHour.IsSet() {
		return true
	}

	return false
}

// SetExecutiveSummaryReportScheduleHour gets a reference to the given NullableInt32 and assigns it to the ExecutiveSummaryReportScheduleHour field.
func (o *Management) SetExecutiveSummaryReportScheduleHour(v int32) {
	o.ExecutiveSummaryReportScheduleHour.Set(&v)
}
// SetExecutiveSummaryReportScheduleHourNil sets the value for ExecutiveSummaryReportScheduleHour to be an explicit nil
func (o *Management) SetExecutiveSummaryReportScheduleHourNil() {
	o.ExecutiveSummaryReportScheduleHour.Set(nil)
}

// UnsetExecutiveSummaryReportScheduleHour ensures that no value is present for ExecutiveSummaryReportScheduleHour, not even an explicit nil
func (o *Management) UnsetExecutiveSummaryReportScheduleHour() {
	o.ExecutiveSummaryReportScheduleHour.Unset()
}

// GetExecutiveSummaryReportScheduleMinute returns the ExecutiveSummaryReportScheduleMinute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Management) GetExecutiveSummaryReportScheduleMinute() int32 {
	if o == nil || IsNil(o.ExecutiveSummaryReportScheduleMinute.Get()) {
		var ret int32
		return ret
	}
	return *o.ExecutiveSummaryReportScheduleMinute.Get()
}

// GetExecutiveSummaryReportScheduleMinuteOk returns a tuple with the ExecutiveSummaryReportScheduleMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Management) GetExecutiveSummaryReportScheduleMinuteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutiveSummaryReportScheduleMinute.Get(), o.ExecutiveSummaryReportScheduleMinute.IsSet()
}

// HasExecutiveSummaryReportScheduleMinute returns a boolean if a field has been set.
func (o *Management) HasExecutiveSummaryReportScheduleMinute() bool {
	if o != nil && o.ExecutiveSummaryReportScheduleMinute.IsSet() {
		return true
	}

	return false
}

// SetExecutiveSummaryReportScheduleMinute gets a reference to the given NullableInt32 and assigns it to the ExecutiveSummaryReportScheduleMinute field.
func (o *Management) SetExecutiveSummaryReportScheduleMinute(v int32) {
	o.ExecutiveSummaryReportScheduleMinute.Set(&v)
}
// SetExecutiveSummaryReportScheduleMinuteNil sets the value for ExecutiveSummaryReportScheduleMinute to be an explicit nil
func (o *Management) SetExecutiveSummaryReportScheduleMinuteNil() {
	o.ExecutiveSummaryReportScheduleMinute.Set(nil)
}

// UnsetExecutiveSummaryReportScheduleMinute ensures that no value is present for ExecutiveSummaryReportScheduleMinute, not even an explicit nil
func (o *Management) UnsetExecutiveSummaryReportScheduleMinute() {
	o.ExecutiveSummaryReportScheduleMinute.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Management) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Management) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Management) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Management) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Management) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Management) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RunTime) {
		toSerialize["runTime"] = o.RunTime
	}
	toSerialize["addedConfigurationStatus"] = o.AddedConfigurationStatus
	toSerialize["deletedConfigurationStatus"] = o.DeletedConfigurationStatus
	toSerialize["integratorLogin"] = o.IntegratorLogin
	toSerialize["scheduleExecutiveSummaryReportFlag"] = o.ScheduleExecutiveSummaryReportFlag.Get()
	if o.ExecutiveSummaryReportScheduleDay.IsSet() {
		toSerialize["executiveSummaryReportScheduleDay"] = o.ExecutiveSummaryReportScheduleDay.Get()
	}
	if o.ExecutiveSummaryReportScheduleHour.IsSet() {
		toSerialize["executiveSummaryReportScheduleHour"] = o.ExecutiveSummaryReportScheduleHour.Get()
	}
	if o.ExecutiveSummaryReportScheduleMinute.IsSet() {
		toSerialize["executiveSummaryReportScheduleMinute"] = o.ExecutiveSummaryReportScheduleMinute.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Management) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addedConfigurationStatus",
		"deletedConfigurationStatus",
		"integratorLogin",
		"scheduleExecutiveSummaryReportFlag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagement := _Management{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagement)

	if err != nil {
		return err
	}

	*o = Management(varManagement)

	return err
}

type NullableManagement struct {
	value *Management
	isSet bool
}

func (v NullableManagement) Get() *Management {
	return v.value
}

func (v *NullableManagement) Set(val *Management) {
	v.value = val
	v.isSet = true
}

func (v NullableManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagement(val *Management) *NullableManagement {
	return &NullableManagement{value: val, isSet: true}
}

func (v NullableManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


