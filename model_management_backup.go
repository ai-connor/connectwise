/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagementBackup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagementBackup{}

// ManagementBackup struct for ManagementBackup
type ManagementBackup struct {
	Id *int32 `json:"id,omitempty"`
	Type AgreementTypeReference `json:"type"`
	Item CatalogItemReference `json:"item"`
	BillingLevel NullableString `json:"billingLevel"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ManagementBackup ManagementBackup

// NewManagementBackup instantiates a new ManagementBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementBackup(type_ AgreementTypeReference, item CatalogItemReference, billingLevel NullableString) *ManagementBackup {
	this := ManagementBackup{}
	this.Type = type_
	this.Item = item
	this.BillingLevel = billingLevel
	return &this
}

// NewManagementBackupWithDefaults instantiates a new ManagementBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementBackupWithDefaults() *ManagementBackup {
	this := ManagementBackup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagementBackup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementBackup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagementBackup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ManagementBackup) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *ManagementBackup) GetType() AgreementTypeReference {
	if o == nil {
		var ret AgreementTypeReference
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ManagementBackup) GetTypeOk() (*AgreementTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ManagementBackup) SetType(v AgreementTypeReference) {
	o.Type = v
}

// GetItem returns the Item field value
func (o *ManagementBackup) GetItem() CatalogItemReference {
	if o == nil {
		var ret CatalogItemReference
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *ManagementBackup) GetItemOk() (*CatalogItemReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *ManagementBackup) SetItem(v CatalogItemReference) {
	o.Item = v
}

// GetBillingLevel returns the BillingLevel field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ManagementBackup) GetBillingLevel() string {
	if o == nil || o.BillingLevel.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillingLevel.Get()
}

// GetBillingLevelOk returns a tuple with the BillingLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagementBackup) GetBillingLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingLevel.Get(), o.BillingLevel.IsSet()
}

// SetBillingLevel sets field value
func (o *ManagementBackup) SetBillingLevel(v string) {
	o.BillingLevel.Set(&v)
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ManagementBackup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementBackup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ManagementBackup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ManagementBackup) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ManagementBackup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagementBackup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["item"] = o.Item
	toSerialize["billingLevel"] = o.BillingLevel.Get()
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ManagementBackup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"item",
		"billingLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagementBackup := _ManagementBackup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagementBackup)

	if err != nil {
		return err
	}

	*o = ManagementBackup(varManagementBackup)

	return err
}

type NullableManagementBackup struct {
	value *ManagementBackup
	isSet bool
}

func (v NullableManagementBackup) Get() *ManagementBackup {
	return v.value
}

func (v *NullableManagementBackup) Set(val *ManagementBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementBackup(val *ManagementBackup) *NullableManagementBackup {
	return &NullableManagementBackup{value: val, isSet: true}
}

func (v NullableManagementBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


