/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the MappedType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappedType{}

// MappedType struct for MappedType
type MappedType struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Table *string `json:"table,omitempty"`
	RecIdField *string `json:"recIdField,omitempty"`
	GlType NullableString `json:"glType,omitempty"`
	SortOrder *int32 `json:"sortOrder,omitempty"`
}

// NewMappedType instantiates a new MappedType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappedType() *MappedType {
	this := MappedType{}
	return &this
}

// NewMappedTypeWithDefaults instantiates a new MappedType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappedTypeWithDefaults() *MappedType {
	this := MappedType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MappedType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MappedType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MappedType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MappedType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MappedType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MappedType) SetName(v string) {
	o.Name = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *MappedType) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedType) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *MappedType) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *MappedType) SetTable(v string) {
	o.Table = &v
}

// GetRecIdField returns the RecIdField field value if set, zero value otherwise.
func (o *MappedType) GetRecIdField() string {
	if o == nil || IsNil(o.RecIdField) {
		var ret string
		return ret
	}
	return *o.RecIdField
}

// GetRecIdFieldOk returns a tuple with the RecIdField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedType) GetRecIdFieldOk() (*string, bool) {
	if o == nil || IsNil(o.RecIdField) {
		return nil, false
	}
	return o.RecIdField, true
}

// HasRecIdField returns a boolean if a field has been set.
func (o *MappedType) HasRecIdField() bool {
	if o != nil && !IsNil(o.RecIdField) {
		return true
	}

	return false
}

// SetRecIdField gets a reference to the given string and assigns it to the RecIdField field.
func (o *MappedType) SetRecIdField(v string) {
	o.RecIdField = &v
}

// GetGlType returns the GlType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MappedType) GetGlType() string {
	if o == nil || IsNil(o.GlType.Get()) {
		var ret string
		return ret
	}
	return *o.GlType.Get()
}

// GetGlTypeOk returns a tuple with the GlType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MappedType) GetGlTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlType.Get(), o.GlType.IsSet()
}

// HasGlType returns a boolean if a field has been set.
func (o *MappedType) HasGlType() bool {
	if o != nil && o.GlType.IsSet() {
		return true
	}

	return false
}

// SetGlType gets a reference to the given NullableString and assigns it to the GlType field.
func (o *MappedType) SetGlType(v string) {
	o.GlType.Set(&v)
}
// SetGlTypeNil sets the value for GlType to be an explicit nil
func (o *MappedType) SetGlTypeNil() {
	o.GlType.Set(nil)
}

// UnsetGlType ensures that no value is present for GlType, not even an explicit nil
func (o *MappedType) UnsetGlType() {
	o.GlType.Unset()
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *MappedType) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedType) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *MappedType) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *MappedType) SetSortOrder(v int32) {
	o.SortOrder = &v
}

func (o MappedType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappedType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.RecIdField) {
		toSerialize["recIdField"] = o.RecIdField
	}
	if o.GlType.IsSet() {
		toSerialize["glType"] = o.GlType.Get()
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	return toSerialize, nil
}

type NullableMappedType struct {
	value *MappedType
	isSet bool
}

func (v NullableMappedType) Get() *MappedType {
	return v.value
}

func (v *NullableMappedType) Set(val *MappedType) {
	v.value = val
	v.isSet = true
}

func (v NullableMappedType) IsSet() bool {
	return v.isSet
}

func (v *NullableMappedType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappedType(val *MappedType) *NullableMappedType {
	return &NullableMappedType{value: val, isSet: true}
}

func (v NullableMappedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappedType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


