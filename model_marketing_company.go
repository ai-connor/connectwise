/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the MarketingCompany type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketingCompany{}

// MarketingCompany struct for MarketingCompany
type MarketingCompany struct {
	Id *int32 `json:"id,omitempty"`
	GroupId NullableInt32 `json:"groupId,omitempty"`
	DefaultContactFlag NullableBool `json:"defaultContactFlag,omitempty"`
	AllContactsFlag NullableBool `json:"allContactsFlag,omitempty"`
	UnsubscribeFlag NullableBool `json:"unsubscribeFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewMarketingCompany instantiates a new MarketingCompany object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketingCompany() *MarketingCompany {
	this := MarketingCompany{}
	return &this
}

// NewMarketingCompanyWithDefaults instantiates a new MarketingCompany object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketingCompanyWithDefaults() *MarketingCompany {
	this := MarketingCompany{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MarketingCompany) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingCompany) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MarketingCompany) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MarketingCompany) SetId(v int32) {
	o.Id = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingCompany) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId.Get()) {
		var ret int32
		return ret
	}
	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingCompany) GetGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// HasGroupId returns a boolean if a field has been set.
func (o *MarketingCompany) HasGroupId() bool {
	if o != nil && o.GroupId.IsSet() {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given NullableInt32 and assigns it to the GroupId field.
func (o *MarketingCompany) SetGroupId(v int32) {
	o.GroupId.Set(&v)
}
// SetGroupIdNil sets the value for GroupId to be an explicit nil
func (o *MarketingCompany) SetGroupIdNil() {
	o.GroupId.Set(nil)
}

// UnsetGroupId ensures that no value is present for GroupId, not even an explicit nil
func (o *MarketingCompany) UnsetGroupId() {
	o.GroupId.Unset()
}

// GetDefaultContactFlag returns the DefaultContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingCompany) GetDefaultContactFlag() bool {
	if o == nil || IsNil(o.DefaultContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultContactFlag.Get()
}

// GetDefaultContactFlagOk returns a tuple with the DefaultContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingCompany) GetDefaultContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultContactFlag.Get(), o.DefaultContactFlag.IsSet()
}

// HasDefaultContactFlag returns a boolean if a field has been set.
func (o *MarketingCompany) HasDefaultContactFlag() bool {
	if o != nil && o.DefaultContactFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultContactFlag gets a reference to the given NullableBool and assigns it to the DefaultContactFlag field.
func (o *MarketingCompany) SetDefaultContactFlag(v bool) {
	o.DefaultContactFlag.Set(&v)
}
// SetDefaultContactFlagNil sets the value for DefaultContactFlag to be an explicit nil
func (o *MarketingCompany) SetDefaultContactFlagNil() {
	o.DefaultContactFlag.Set(nil)
}

// UnsetDefaultContactFlag ensures that no value is present for DefaultContactFlag, not even an explicit nil
func (o *MarketingCompany) UnsetDefaultContactFlag() {
	o.DefaultContactFlag.Unset()
}

// GetAllContactsFlag returns the AllContactsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingCompany) GetAllContactsFlag() bool {
	if o == nil || IsNil(o.AllContactsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllContactsFlag.Get()
}

// GetAllContactsFlagOk returns a tuple with the AllContactsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingCompany) GetAllContactsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllContactsFlag.Get(), o.AllContactsFlag.IsSet()
}

// HasAllContactsFlag returns a boolean if a field has been set.
func (o *MarketingCompany) HasAllContactsFlag() bool {
	if o != nil && o.AllContactsFlag.IsSet() {
		return true
	}

	return false
}

// SetAllContactsFlag gets a reference to the given NullableBool and assigns it to the AllContactsFlag field.
func (o *MarketingCompany) SetAllContactsFlag(v bool) {
	o.AllContactsFlag.Set(&v)
}
// SetAllContactsFlagNil sets the value for AllContactsFlag to be an explicit nil
func (o *MarketingCompany) SetAllContactsFlagNil() {
	o.AllContactsFlag.Set(nil)
}

// UnsetAllContactsFlag ensures that no value is present for AllContactsFlag, not even an explicit nil
func (o *MarketingCompany) UnsetAllContactsFlag() {
	o.AllContactsFlag.Unset()
}

// GetUnsubscribeFlag returns the UnsubscribeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingCompany) GetUnsubscribeFlag() bool {
	if o == nil || IsNil(o.UnsubscribeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UnsubscribeFlag.Get()
}

// GetUnsubscribeFlagOk returns a tuple with the UnsubscribeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingCompany) GetUnsubscribeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnsubscribeFlag.Get(), o.UnsubscribeFlag.IsSet()
}

// HasUnsubscribeFlag returns a boolean if a field has been set.
func (o *MarketingCompany) HasUnsubscribeFlag() bool {
	if o != nil && o.UnsubscribeFlag.IsSet() {
		return true
	}

	return false
}

// SetUnsubscribeFlag gets a reference to the given NullableBool and assigns it to the UnsubscribeFlag field.
func (o *MarketingCompany) SetUnsubscribeFlag(v bool) {
	o.UnsubscribeFlag.Set(&v)
}
// SetUnsubscribeFlagNil sets the value for UnsubscribeFlag to be an explicit nil
func (o *MarketingCompany) SetUnsubscribeFlagNil() {
	o.UnsubscribeFlag.Set(nil)
}

// UnsetUnsubscribeFlag ensures that no value is present for UnsubscribeFlag, not even an explicit nil
func (o *MarketingCompany) UnsetUnsubscribeFlag() {
	o.UnsubscribeFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MarketingCompany) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingCompany) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MarketingCompany) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MarketingCompany) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MarketingCompany) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketingCompany) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.GroupId.IsSet() {
		toSerialize["groupId"] = o.GroupId.Get()
	}
	if o.DefaultContactFlag.IsSet() {
		toSerialize["defaultContactFlag"] = o.DefaultContactFlag.Get()
	}
	if o.AllContactsFlag.IsSet() {
		toSerialize["allContactsFlag"] = o.AllContactsFlag.Get()
	}
	if o.UnsubscribeFlag.IsSet() {
		toSerialize["unsubscribeFlag"] = o.UnsubscribeFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableMarketingCompany struct {
	value *MarketingCompany
	isSet bool
}

func (v NullableMarketingCompany) Get() *MarketingCompany {
	return v.value
}

func (v *NullableMarketingCompany) Set(val *MarketingCompany) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketingCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketingCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketingCompany(val *MarketingCompany) *NullableMarketingCompany {
	return &NullableMarketingCompany{value: val, isSet: true}
}

func (v NullableMarketingCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketingCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


