/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the MemberInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberInfo{}

// MemberInfo struct for MemberInfo
type MemberInfo struct {
	Id *int32 `json:"id,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	MiddleInitial *string `json:"middleInitial,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	DefaultEmail *string `json:"defaultEmail,omitempty"`
	Photo *DocumentReference `json:"photo,omitempty"`
	// F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member
	LicenseClass NullableString `json:"licenseClass,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewMemberInfo instantiates a new MemberInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberInfo() *MemberInfo {
	this := MemberInfo{}
	return &this
}

// NewMemberInfoWithDefaults instantiates a new MemberInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberInfoWithDefaults() *MemberInfo {
	this := MemberInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MemberInfo) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *MemberInfo) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *MemberInfo) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *MemberInfo) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *MemberInfo) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *MemberInfo) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *MemberInfo) SetFirstName(v string) {
	o.FirstName = &v
}

// GetMiddleInitial returns the MiddleInitial field value if set, zero value otherwise.
func (o *MemberInfo) GetMiddleInitial() string {
	if o == nil || IsNil(o.MiddleInitial) {
		var ret string
		return ret
	}
	return *o.MiddleInitial
}

// GetMiddleInitialOk returns a tuple with the MiddleInitial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetMiddleInitialOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleInitial) {
		return nil, false
	}
	return o.MiddleInitial, true
}

// HasMiddleInitial returns a boolean if a field has been set.
func (o *MemberInfo) HasMiddleInitial() bool {
	if o != nil && !IsNil(o.MiddleInitial) {
		return true
	}

	return false
}

// SetMiddleInitial gets a reference to the given string and assigns it to the MiddleInitial field.
func (o *MemberInfo) SetMiddleInitial(v string) {
	o.MiddleInitial = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *MemberInfo) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *MemberInfo) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *MemberInfo) SetLastName(v string) {
	o.LastName = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *MemberInfo) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *MemberInfo) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *MemberInfo) SetFullName(v string) {
	o.FullName = &v
}

// GetDefaultEmail returns the DefaultEmail field value if set, zero value otherwise.
func (o *MemberInfo) GetDefaultEmail() string {
	if o == nil || IsNil(o.DefaultEmail) {
		var ret string
		return ret
	}
	return *o.DefaultEmail
}

// GetDefaultEmailOk returns a tuple with the DefaultEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetDefaultEmailOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultEmail) {
		return nil, false
	}
	return o.DefaultEmail, true
}

// HasDefaultEmail returns a boolean if a field has been set.
func (o *MemberInfo) HasDefaultEmail() bool {
	if o != nil && !IsNil(o.DefaultEmail) {
		return true
	}

	return false
}

// SetDefaultEmail gets a reference to the given string and assigns it to the DefaultEmail field.
func (o *MemberInfo) SetDefaultEmail(v string) {
	o.DefaultEmail = &v
}

// GetPhoto returns the Photo field value if set, zero value otherwise.
func (o *MemberInfo) GetPhoto() DocumentReference {
	if o == nil || IsNil(o.Photo) {
		var ret DocumentReference
		return ret
	}
	return *o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetPhotoOk() (*DocumentReference, bool) {
	if o == nil || IsNil(o.Photo) {
		return nil, false
	}
	return o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *MemberInfo) HasPhoto() bool {
	if o != nil && !IsNil(o.Photo) {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given DocumentReference and assigns it to the Photo field.
func (o *MemberInfo) SetPhoto(v DocumentReference) {
	o.Photo = &v
}

// GetLicenseClass returns the LicenseClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberInfo) GetLicenseClass() string {
	if o == nil || IsNil(o.LicenseClass.Get()) {
		var ret string
		return ret
	}
	return *o.LicenseClass.Get()
}

// GetLicenseClassOk returns a tuple with the LicenseClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberInfo) GetLicenseClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseClass.Get(), o.LicenseClass.IsSet()
}

// HasLicenseClass returns a boolean if a field has been set.
func (o *MemberInfo) HasLicenseClass() bool {
	if o != nil && o.LicenseClass.IsSet() {
		return true
	}

	return false
}

// SetLicenseClass gets a reference to the given NullableString and assigns it to the LicenseClass field.
func (o *MemberInfo) SetLicenseClass(v string) {
	o.LicenseClass.Set(&v)
}
// SetLicenseClassNil sets the value for LicenseClass to be an explicit nil
func (o *MemberInfo) SetLicenseClassNil() {
	o.LicenseClass.Set(nil)
}

// UnsetLicenseClass ensures that no value is present for LicenseClass, not even an explicit nil
func (o *MemberInfo) UnsetLicenseClass() {
	o.LicenseClass.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *MemberInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *MemberInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *MemberInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *MemberInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MemberInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MemberInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *MemberInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o MemberInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.MiddleInitial) {
		toSerialize["middleInitial"] = o.MiddleInitial
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	if !IsNil(o.DefaultEmail) {
		toSerialize["defaultEmail"] = o.DefaultEmail
	}
	if !IsNil(o.Photo) {
		toSerialize["photo"] = o.Photo
	}
	if o.LicenseClass.IsSet() {
		toSerialize["licenseClass"] = o.LicenseClass.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableMemberInfo struct {
	value *MemberInfo
	isSet bool
}

func (v NullableMemberInfo) Get() *MemberInfo {
	return v.value
}

func (v *NullableMemberInfo) Set(val *MemberInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberInfo(val *MemberInfo) *NullableMemberInfo {
	return &NullableMemberInfo{value: val, isSet: true}
}

func (v NullableMemberInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


