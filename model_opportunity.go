/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Opportunity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Opportunity{}

// Opportunity struct for Opportunity
type Opportunity struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Name string `json:"name"`
	//  Required On Updates;
	ExpectedCloseDate *time.Time `json:"expectedCloseDate,omitempty"`
	Type *OpportunityTypeReference `json:"type,omitempty"`
	Stage *OpportunityStageReference `json:"stage,omitempty"`
	Status *OpportunityStatusReference `json:"status,omitempty"`
	Priority *OpportunityPriorityReference `json:"priority,omitempty"`
	Notes *string `json:"notes,omitempty"`
	Probability *OpportunityProbabilityReference `json:"probability,omitempty"`
	//  Max length: 50;
	Source *string `json:"source,omitempty"`
	Rating *OpportunityRatingReference `json:"rating,omitempty"`
	Campaign *CampaignReference `json:"campaign,omitempty"`
	PrimarySalesRep MemberReference `json:"primarySalesRep"`
	SecondarySalesRep *MemberReference `json:"secondarySalesRep,omitempty"`
	//  Required On Updates;
	LocationId NullableInt32 `json:"locationId,omitempty"`
	//  Required On Updates;
	BusinessUnitId NullableInt32 `json:"businessUnitId,omitempty"`
	Company CompanyReference `json:"company"`
	Contact ContactReference `json:"contact"`
	Site *SiteReference `json:"site,omitempty"`
	//  Max length: 25;
	CustomerPO *string `json:"customerPO,omitempty"`
	PipelineChangeDate *time.Time `json:"pipelineChangeDate,omitempty"`
	DateBecameLead *time.Time `json:"dateBecameLead,omitempty"`
	ClosedDate *time.Time `json:"closedDate,omitempty"`
	ClosedBy *MemberReference `json:"closedBy,omitempty"`
	TotalSalesTax NullableFloat64 `json:"totalSalesTax,omitempty"`
	ShipToCompany *CompanyReference `json:"shipToCompany,omitempty"`
	ShipToContact *ContactReference `json:"shipToContact,omitempty"`
	ShipToSite *SiteReference `json:"shipToSite,omitempty"`
	BillToCompany *CompanyReference `json:"billToCompany,omitempty"`
	BillToContact *ContactReference `json:"billToContact,omitempty"`
	BillToSite *SiteReference `json:"billToSite,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	CompanyLocationId NullableInt32 `json:"companyLocationId,omitempty"`
	TechnicalContact *ContactReference `json:"technicalContact,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _Opportunity Opportunity

// NewOpportunity instantiates a new Opportunity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunity(name string, primarySalesRep MemberReference, company CompanyReference, contact ContactReference) *Opportunity {
	this := Opportunity{}
	this.Name = name
	this.PrimarySalesRep = primarySalesRep
	this.Company = company
	this.Contact = contact
	return &this
}

// NewOpportunityWithDefaults instantiates a new Opportunity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityWithDefaults() *Opportunity {
	this := Opportunity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Opportunity) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Opportunity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Opportunity) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Opportunity) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Opportunity) SetName(v string) {
	o.Name = v
}

// GetExpectedCloseDate returns the ExpectedCloseDate field value if set, zero value otherwise.
func (o *Opportunity) GetExpectedCloseDate() time.Time {
	if o == nil || IsNil(o.ExpectedCloseDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpectedCloseDate
}

// GetExpectedCloseDateOk returns a tuple with the ExpectedCloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetExpectedCloseDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpectedCloseDate) {
		return nil, false
	}
	return o.ExpectedCloseDate, true
}

// HasExpectedCloseDate returns a boolean if a field has been set.
func (o *Opportunity) HasExpectedCloseDate() bool {
	if o != nil && !IsNil(o.ExpectedCloseDate) {
		return true
	}

	return false
}

// SetExpectedCloseDate gets a reference to the given time.Time and assigns it to the ExpectedCloseDate field.
func (o *Opportunity) SetExpectedCloseDate(v time.Time) {
	o.ExpectedCloseDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Opportunity) GetType() OpportunityTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret OpportunityTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetTypeOk() (*OpportunityTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Opportunity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OpportunityTypeReference and assigns it to the Type field.
func (o *Opportunity) SetType(v OpportunityTypeReference) {
	o.Type = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *Opportunity) GetStage() OpportunityStageReference {
	if o == nil || IsNil(o.Stage) {
		var ret OpportunityStageReference
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetStageOk() (*OpportunityStageReference, bool) {
	if o == nil || IsNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *Opportunity) HasStage() bool {
	if o != nil && !IsNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given OpportunityStageReference and assigns it to the Stage field.
func (o *Opportunity) SetStage(v OpportunityStageReference) {
	o.Stage = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Opportunity) GetStatus() OpportunityStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret OpportunityStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetStatusOk() (*OpportunityStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Opportunity) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OpportunityStatusReference and assigns it to the Status field.
func (o *Opportunity) SetStatus(v OpportunityStatusReference) {
	o.Status = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Opportunity) GetPriority() OpportunityPriorityReference {
	if o == nil || IsNil(o.Priority) {
		var ret OpportunityPriorityReference
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetPriorityOk() (*OpportunityPriorityReference, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Opportunity) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given OpportunityPriorityReference and assigns it to the Priority field.
func (o *Opportunity) SetPriority(v OpportunityPriorityReference) {
	o.Priority = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Opportunity) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Opportunity) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Opportunity) SetNotes(v string) {
	o.Notes = &v
}

// GetProbability returns the Probability field value if set, zero value otherwise.
func (o *Opportunity) GetProbability() OpportunityProbabilityReference {
	if o == nil || IsNil(o.Probability) {
		var ret OpportunityProbabilityReference
		return ret
	}
	return *o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetProbabilityOk() (*OpportunityProbabilityReference, bool) {
	if o == nil || IsNil(o.Probability) {
		return nil, false
	}
	return o.Probability, true
}

// HasProbability returns a boolean if a field has been set.
func (o *Opportunity) HasProbability() bool {
	if o != nil && !IsNil(o.Probability) {
		return true
	}

	return false
}

// SetProbability gets a reference to the given OpportunityProbabilityReference and assigns it to the Probability field.
func (o *Opportunity) SetProbability(v OpportunityProbabilityReference) {
	o.Probability = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Opportunity) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Opportunity) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Opportunity) SetSource(v string) {
	o.Source = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Opportunity) GetRating() OpportunityRatingReference {
	if o == nil || IsNil(o.Rating) {
		var ret OpportunityRatingReference
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetRatingOk() (*OpportunityRatingReference, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Opportunity) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given OpportunityRatingReference and assigns it to the Rating field.
func (o *Opportunity) SetRating(v OpportunityRatingReference) {
	o.Rating = &v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *Opportunity) GetCampaign() CampaignReference {
	if o == nil || IsNil(o.Campaign) {
		var ret CampaignReference
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetCampaignOk() (*CampaignReference, bool) {
	if o == nil || IsNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *Opportunity) HasCampaign() bool {
	if o != nil && !IsNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given CampaignReference and assigns it to the Campaign field.
func (o *Opportunity) SetCampaign(v CampaignReference) {
	o.Campaign = &v
}

// GetPrimarySalesRep returns the PrimarySalesRep field value
func (o *Opportunity) GetPrimarySalesRep() MemberReference {
	if o == nil {
		var ret MemberReference
		return ret
	}

	return o.PrimarySalesRep
}

// GetPrimarySalesRepOk returns a tuple with the PrimarySalesRep field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetPrimarySalesRepOk() (*MemberReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimarySalesRep, true
}

// SetPrimarySalesRep sets field value
func (o *Opportunity) SetPrimarySalesRep(v MemberReference) {
	o.PrimarySalesRep = v
}

// GetSecondarySalesRep returns the SecondarySalesRep field value if set, zero value otherwise.
func (o *Opportunity) GetSecondarySalesRep() MemberReference {
	if o == nil || IsNil(o.SecondarySalesRep) {
		var ret MemberReference
		return ret
	}
	return *o.SecondarySalesRep
}

// GetSecondarySalesRepOk returns a tuple with the SecondarySalesRep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetSecondarySalesRepOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.SecondarySalesRep) {
		return nil, false
	}
	return o.SecondarySalesRep, true
}

// HasSecondarySalesRep returns a boolean if a field has been set.
func (o *Opportunity) HasSecondarySalesRep() bool {
	if o != nil && !IsNil(o.SecondarySalesRep) {
		return true
	}

	return false
}

// SetSecondarySalesRep gets a reference to the given MemberReference and assigns it to the SecondarySalesRep field.
func (o *Opportunity) SetSecondarySalesRep(v MemberReference) {
	o.SecondarySalesRep = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Opportunity) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Opportunity) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *Opportunity) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *Opportunity) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *Opportunity) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *Opportunity) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Opportunity) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Opportunity) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *Opportunity) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *Opportunity) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}
// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *Opportunity) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *Opportunity) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetCompany returns the Company field value
func (o *Opportunity) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Opportunity) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetContact returns the Contact field value
func (o *Opportunity) GetContact() ContactReference {
	if o == nil {
		var ret ContactReference
		return ret
	}

	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetContactOk() (*ContactReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contact, true
}

// SetContact sets field value
func (o *Opportunity) SetContact(v ContactReference) {
	o.Contact = v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Opportunity) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Opportunity) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *Opportunity) SetSite(v SiteReference) {
	o.Site = &v
}

// GetCustomerPO returns the CustomerPO field value if set, zero value otherwise.
func (o *Opportunity) GetCustomerPO() string {
	if o == nil || IsNil(o.CustomerPO) {
		var ret string
		return ret
	}
	return *o.CustomerPO
}

// GetCustomerPOOk returns a tuple with the CustomerPO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetCustomerPOOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPO) {
		return nil, false
	}
	return o.CustomerPO, true
}

// HasCustomerPO returns a boolean if a field has been set.
func (o *Opportunity) HasCustomerPO() bool {
	if o != nil && !IsNil(o.CustomerPO) {
		return true
	}

	return false
}

// SetCustomerPO gets a reference to the given string and assigns it to the CustomerPO field.
func (o *Opportunity) SetCustomerPO(v string) {
	o.CustomerPO = &v
}

// GetPipelineChangeDate returns the PipelineChangeDate field value if set, zero value otherwise.
func (o *Opportunity) GetPipelineChangeDate() time.Time {
	if o == nil || IsNil(o.PipelineChangeDate) {
		var ret time.Time
		return ret
	}
	return *o.PipelineChangeDate
}

// GetPipelineChangeDateOk returns a tuple with the PipelineChangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetPipelineChangeDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PipelineChangeDate) {
		return nil, false
	}
	return o.PipelineChangeDate, true
}

// HasPipelineChangeDate returns a boolean if a field has been set.
func (o *Opportunity) HasPipelineChangeDate() bool {
	if o != nil && !IsNil(o.PipelineChangeDate) {
		return true
	}

	return false
}

// SetPipelineChangeDate gets a reference to the given time.Time and assigns it to the PipelineChangeDate field.
func (o *Opportunity) SetPipelineChangeDate(v time.Time) {
	o.PipelineChangeDate = &v
}

// GetDateBecameLead returns the DateBecameLead field value if set, zero value otherwise.
func (o *Opportunity) GetDateBecameLead() time.Time {
	if o == nil || IsNil(o.DateBecameLead) {
		var ret time.Time
		return ret
	}
	return *o.DateBecameLead
}

// GetDateBecameLeadOk returns a tuple with the DateBecameLead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetDateBecameLeadOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateBecameLead) {
		return nil, false
	}
	return o.DateBecameLead, true
}

// HasDateBecameLead returns a boolean if a field has been set.
func (o *Opportunity) HasDateBecameLead() bool {
	if o != nil && !IsNil(o.DateBecameLead) {
		return true
	}

	return false
}

// SetDateBecameLead gets a reference to the given time.Time and assigns it to the DateBecameLead field.
func (o *Opportunity) SetDateBecameLead(v time.Time) {
	o.DateBecameLead = &v
}

// GetClosedDate returns the ClosedDate field value if set, zero value otherwise.
func (o *Opportunity) GetClosedDate() time.Time {
	if o == nil || IsNil(o.ClosedDate) {
		var ret time.Time
		return ret
	}
	return *o.ClosedDate
}

// GetClosedDateOk returns a tuple with the ClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetClosedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedDate) {
		return nil, false
	}
	return o.ClosedDate, true
}

// HasClosedDate returns a boolean if a field has been set.
func (o *Opportunity) HasClosedDate() bool {
	if o != nil && !IsNil(o.ClosedDate) {
		return true
	}

	return false
}

// SetClosedDate gets a reference to the given time.Time and assigns it to the ClosedDate field.
func (o *Opportunity) SetClosedDate(v time.Time) {
	o.ClosedDate = &v
}

// GetClosedBy returns the ClosedBy field value if set, zero value otherwise.
func (o *Opportunity) GetClosedBy() MemberReference {
	if o == nil || IsNil(o.ClosedBy) {
		var ret MemberReference
		return ret
	}
	return *o.ClosedBy
}

// GetClosedByOk returns a tuple with the ClosedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetClosedByOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.ClosedBy) {
		return nil, false
	}
	return o.ClosedBy, true
}

// HasClosedBy returns a boolean if a field has been set.
func (o *Opportunity) HasClosedBy() bool {
	if o != nil && !IsNil(o.ClosedBy) {
		return true
	}

	return false
}

// SetClosedBy gets a reference to the given MemberReference and assigns it to the ClosedBy field.
func (o *Opportunity) SetClosedBy(v MemberReference) {
	o.ClosedBy = &v
}

// GetTotalSalesTax returns the TotalSalesTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Opportunity) GetTotalSalesTax() float64 {
	if o == nil || IsNil(o.TotalSalesTax.Get()) {
		var ret float64
		return ret
	}
	return *o.TotalSalesTax.Get()
}

// GetTotalSalesTaxOk returns a tuple with the TotalSalesTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Opportunity) GetTotalSalesTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalSalesTax.Get(), o.TotalSalesTax.IsSet()
}

// HasTotalSalesTax returns a boolean if a field has been set.
func (o *Opportunity) HasTotalSalesTax() bool {
	if o != nil && o.TotalSalesTax.IsSet() {
		return true
	}

	return false
}

// SetTotalSalesTax gets a reference to the given NullableFloat64 and assigns it to the TotalSalesTax field.
func (o *Opportunity) SetTotalSalesTax(v float64) {
	o.TotalSalesTax.Set(&v)
}
// SetTotalSalesTaxNil sets the value for TotalSalesTax to be an explicit nil
func (o *Opportunity) SetTotalSalesTaxNil() {
	o.TotalSalesTax.Set(nil)
}

// UnsetTotalSalesTax ensures that no value is present for TotalSalesTax, not even an explicit nil
func (o *Opportunity) UnsetTotalSalesTax() {
	o.TotalSalesTax.Unset()
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *Opportunity) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *Opportunity) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *Opportunity) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToContact returns the ShipToContact field value if set, zero value otherwise.
func (o *Opportunity) GetShipToContact() ContactReference {
	if o == nil || IsNil(o.ShipToContact) {
		var ret ContactReference
		return ret
	}
	return *o.ShipToContact
}

// GetShipToContactOk returns a tuple with the ShipToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetShipToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.ShipToContact) {
		return nil, false
	}
	return o.ShipToContact, true
}

// HasShipToContact returns a boolean if a field has been set.
func (o *Opportunity) HasShipToContact() bool {
	if o != nil && !IsNil(o.ShipToContact) {
		return true
	}

	return false
}

// SetShipToContact gets a reference to the given ContactReference and assigns it to the ShipToContact field.
func (o *Opportunity) SetShipToContact(v ContactReference) {
	o.ShipToContact = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *Opportunity) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *Opportunity) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *Opportunity) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *Opportunity) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *Opportunity) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *Opportunity) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetBillToContact returns the BillToContact field value if set, zero value otherwise.
func (o *Opportunity) GetBillToContact() ContactReference {
	if o == nil || IsNil(o.BillToContact) {
		var ret ContactReference
		return ret
	}
	return *o.BillToContact
}

// GetBillToContactOk returns a tuple with the BillToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetBillToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BillToContact) {
		return nil, false
	}
	return o.BillToContact, true
}

// HasBillToContact returns a boolean if a field has been set.
func (o *Opportunity) HasBillToContact() bool {
	if o != nil && !IsNil(o.BillToContact) {
		return true
	}

	return false
}

// SetBillToContact gets a reference to the given ContactReference and assigns it to the BillToContact field.
func (o *Opportunity) SetBillToContact(v ContactReference) {
	o.BillToContact = &v
}

// GetBillToSite returns the BillToSite field value if set, zero value otherwise.
func (o *Opportunity) GetBillToSite() SiteReference {
	if o == nil || IsNil(o.BillToSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillToSite
}

// GetBillToSiteOk returns a tuple with the BillToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetBillToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillToSite) {
		return nil, false
	}
	return o.BillToSite, true
}

// HasBillToSite returns a boolean if a field has been set.
func (o *Opportunity) HasBillToSite() bool {
	if o != nil && !IsNil(o.BillToSite) {
		return true
	}

	return false
}

// SetBillToSite gets a reference to the given SiteReference and assigns it to the BillToSite field.
func (o *Opportunity) SetBillToSite(v SiteReference) {
	o.BillToSite = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *Opportunity) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *Opportunity) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *Opportunity) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *Opportunity) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *Opportunity) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *Opportunity) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Opportunity) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Opportunity) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Opportunity) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetCompanyLocationId returns the CompanyLocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Opportunity) GetCompanyLocationId() int32 {
	if o == nil || IsNil(o.CompanyLocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.CompanyLocationId.Get()
}

// GetCompanyLocationIdOk returns a tuple with the CompanyLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Opportunity) GetCompanyLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyLocationId.Get(), o.CompanyLocationId.IsSet()
}

// HasCompanyLocationId returns a boolean if a field has been set.
func (o *Opportunity) HasCompanyLocationId() bool {
	if o != nil && o.CompanyLocationId.IsSet() {
		return true
	}

	return false
}

// SetCompanyLocationId gets a reference to the given NullableInt32 and assigns it to the CompanyLocationId field.
func (o *Opportunity) SetCompanyLocationId(v int32) {
	o.CompanyLocationId.Set(&v)
}
// SetCompanyLocationIdNil sets the value for CompanyLocationId to be an explicit nil
func (o *Opportunity) SetCompanyLocationIdNil() {
	o.CompanyLocationId.Set(nil)
}

// UnsetCompanyLocationId ensures that no value is present for CompanyLocationId, not even an explicit nil
func (o *Opportunity) UnsetCompanyLocationId() {
	o.CompanyLocationId.Unset()
}

// GetTechnicalContact returns the TechnicalContact field value if set, zero value otherwise.
func (o *Opportunity) GetTechnicalContact() ContactReference {
	if o == nil || IsNil(o.TechnicalContact) {
		var ret ContactReference
		return ret
	}
	return *o.TechnicalContact
}

// GetTechnicalContactOk returns a tuple with the TechnicalContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetTechnicalContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.TechnicalContact) {
		return nil, false
	}
	return o.TechnicalContact, true
}

// HasTechnicalContact returns a boolean if a field has been set.
func (o *Opportunity) HasTechnicalContact() bool {
	if o != nil && !IsNil(o.TechnicalContact) {
		return true
	}

	return false
}

// SetTechnicalContact gets a reference to the given ContactReference and assigns it to the TechnicalContact field.
func (o *Opportunity) SetTechnicalContact(v ContactReference) {
	o.TechnicalContact = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Opportunity) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Opportunity) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Opportunity) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Opportunity) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Opportunity) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Opportunity) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Opportunity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Opportunity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ExpectedCloseDate) {
		toSerialize["expectedCloseDate"] = o.ExpectedCloseDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Probability) {
		toSerialize["probability"] = o.Probability
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	toSerialize["primarySalesRep"] = o.PrimarySalesRep
	if !IsNil(o.SecondarySalesRep) {
		toSerialize["secondarySalesRep"] = o.SecondarySalesRep
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	toSerialize["company"] = o.Company
	toSerialize["contact"] = o.Contact
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.CustomerPO) {
		toSerialize["customerPO"] = o.CustomerPO
	}
	if !IsNil(o.PipelineChangeDate) {
		toSerialize["pipelineChangeDate"] = o.PipelineChangeDate
	}
	if !IsNil(o.DateBecameLead) {
		toSerialize["dateBecameLead"] = o.DateBecameLead
	}
	if !IsNil(o.ClosedDate) {
		toSerialize["closedDate"] = o.ClosedDate
	}
	if !IsNil(o.ClosedBy) {
		toSerialize["closedBy"] = o.ClosedBy
	}
	if o.TotalSalesTax.IsSet() {
		toSerialize["totalSalesTax"] = o.TotalSalesTax.Get()
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToContact) {
		toSerialize["shipToContact"] = o.ShipToContact
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.BillToContact) {
		toSerialize["billToContact"] = o.BillToContact
	}
	if !IsNil(o.BillToSite) {
		toSerialize["billToSite"] = o.BillToSite
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.CompanyLocationId.IsSet() {
		toSerialize["companyLocationId"] = o.CompanyLocationId.Get()
	}
	if !IsNil(o.TechnicalContact) {
		toSerialize["technicalContact"] = o.TechnicalContact
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Opportunity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"primarySalesRep",
		"company",
		"contact",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpportunity := _Opportunity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpportunity)

	if err != nil {
		return err
	}

	*o = Opportunity(varOpportunity)

	return err
}

type NullableOpportunity struct {
	value *Opportunity
	isSet bool
}

func (v NullableOpportunity) Get() *Opportunity {
	return v.value
}

func (v *NullableOpportunity) Set(val *Opportunity) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunity) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunity(val *Opportunity) *NullableOpportunity {
	return &NullableOpportunity{value: val, isSet: true}
}

func (v NullableOpportunity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


