/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpportunityContact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityContact{}

// OpportunityContact struct for OpportunityContact
type OpportunityContact struct {
	Id *int32 `json:"id,omitempty"`
	Contact ContactReference `json:"contact"`
	Company *CompanyReference `json:"company,omitempty"`
	Role *OpportunitySalesRoleReference `json:"role,omitempty"`
	Notes *string `json:"notes,omitempty"`
	ReferralFlag NullableBool `json:"referralFlag,omitempty"`
	OpportunityId NullableInt32 `json:"opportunityId,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	EmailAddress *string `json:"emailAddress,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _OpportunityContact OpportunityContact

// NewOpportunityContact instantiates a new OpportunityContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityContact(contact ContactReference) *OpportunityContact {
	this := OpportunityContact{}
	this.Contact = contact
	return &this
}

// NewOpportunityContactWithDefaults instantiates a new OpportunityContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityContactWithDefaults() *OpportunityContact {
	this := OpportunityContact{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OpportunityContact) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OpportunityContact) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OpportunityContact) SetId(v int32) {
	o.Id = &v
}

// GetContact returns the Contact field value
func (o *OpportunityContact) GetContact() ContactReference {
	if o == nil {
		var ret ContactReference
		return ret
	}

	return o.Contact
}

// GetContactOk returns a tuple with the Contact field value
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetContactOk() (*ContactReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contact, true
}

// SetContact sets field value
func (o *OpportunityContact) SetContact(v ContactReference) {
	o.Contact = v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *OpportunityContact) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *OpportunityContact) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *OpportunityContact) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OpportunityContact) GetRole() OpportunitySalesRoleReference {
	if o == nil || IsNil(o.Role) {
		var ret OpportunitySalesRoleReference
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetRoleOk() (*OpportunitySalesRoleReference, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OpportunityContact) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given OpportunitySalesRoleReference and assigns it to the Role field.
func (o *OpportunityContact) SetRole(v OpportunitySalesRoleReference) {
	o.Role = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *OpportunityContact) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *OpportunityContact) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *OpportunityContact) SetNotes(v string) {
	o.Notes = &v
}

// GetReferralFlag returns the ReferralFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityContact) GetReferralFlag() bool {
	if o == nil || IsNil(o.ReferralFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ReferralFlag.Get()
}

// GetReferralFlagOk returns a tuple with the ReferralFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityContact) GetReferralFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferralFlag.Get(), o.ReferralFlag.IsSet()
}

// HasReferralFlag returns a boolean if a field has been set.
func (o *OpportunityContact) HasReferralFlag() bool {
	if o != nil && o.ReferralFlag.IsSet() {
		return true
	}

	return false
}

// SetReferralFlag gets a reference to the given NullableBool and assigns it to the ReferralFlag field.
func (o *OpportunityContact) SetReferralFlag(v bool) {
	o.ReferralFlag.Set(&v)
}
// SetReferralFlagNil sets the value for ReferralFlag to be an explicit nil
func (o *OpportunityContact) SetReferralFlagNil() {
	o.ReferralFlag.Set(nil)
}

// UnsetReferralFlag ensures that no value is present for ReferralFlag, not even an explicit nil
func (o *OpportunityContact) UnsetReferralFlag() {
	o.ReferralFlag.Unset()
}

// GetOpportunityId returns the OpportunityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityContact) GetOpportunityId() int32 {
	if o == nil || IsNil(o.OpportunityId.Get()) {
		var ret int32
		return ret
	}
	return *o.OpportunityId.Get()
}

// GetOpportunityIdOk returns a tuple with the OpportunityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityContact) GetOpportunityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityId.Get(), o.OpportunityId.IsSet()
}

// HasOpportunityId returns a boolean if a field has been set.
func (o *OpportunityContact) HasOpportunityId() bool {
	if o != nil && o.OpportunityId.IsSet() {
		return true
	}

	return false
}

// SetOpportunityId gets a reference to the given NullableInt32 and assigns it to the OpportunityId field.
func (o *OpportunityContact) SetOpportunityId(v int32) {
	o.OpportunityId.Set(&v)
}
// SetOpportunityIdNil sets the value for OpportunityId to be an explicit nil
func (o *OpportunityContact) SetOpportunityIdNil() {
	o.OpportunityId.Set(nil)
}

// UnsetOpportunityId ensures that no value is present for OpportunityId, not even an explicit nil
func (o *OpportunityContact) UnsetOpportunityId() {
	o.OpportunityId.Unset()
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *OpportunityContact) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *OpportunityContact) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *OpportunityContact) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *OpportunityContact) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *OpportunityContact) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *OpportunityContact) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *OpportunityContact) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityContact) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *OpportunityContact) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *OpportunityContact) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o OpportunityContact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityContact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["contact"] = o.Contact
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.ReferralFlag.IsSet() {
		toSerialize["referralFlag"] = o.ReferralFlag.Get()
	}
	if o.OpportunityId.IsSet() {
		toSerialize["opportunityId"] = o.OpportunityId.Get()
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *OpportunityContact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contact",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpportunityContact := _OpportunityContact{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpportunityContact)

	if err != nil {
		return err
	}

	*o = OpportunityContact(varOpportunityContact)

	return err
}

type NullableOpportunityContact struct {
	value *OpportunityContact
	isSet bool
}

func (v NullableOpportunityContact) Get() *OpportunityContact {
	return v.value
}

func (v *NullableOpportunityContact) Set(val *OpportunityContact) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityContact) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityContact(val *OpportunityContact) *NullableOpportunityContact {
	return &NullableOpportunityContact{value: val, isSet: true}
}

func (v NullableOpportunityContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


