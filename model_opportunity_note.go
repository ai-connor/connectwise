/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpportunityNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityNote{}

// OpportunityNote struct for OpportunityNote
type OpportunityNote struct {
	Id *int32 `json:"id,omitempty"`
	OpportunityId NullableInt32 `json:"opportunityId,omitempty"`
	Type *NoteTypeReference `json:"type,omitempty"`
	Text string `json:"text"`
	Flagged NullableBool `json:"flagged,omitempty"`
	EnteredBy *string `json:"enteredBy,omitempty"`
	MobileGuid NullableString `json:"mobileGuid,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _OpportunityNote OpportunityNote

// NewOpportunityNote instantiates a new OpportunityNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityNote(text string) *OpportunityNote {
	this := OpportunityNote{}
	this.Text = text
	return &this
}

// NewOpportunityNoteWithDefaults instantiates a new OpportunityNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityNoteWithDefaults() *OpportunityNote {
	this := OpportunityNote{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OpportunityNote) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityNote) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OpportunityNote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OpportunityNote) SetId(v int32) {
	o.Id = &v
}

// GetOpportunityId returns the OpportunityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityNote) GetOpportunityId() int32 {
	if o == nil || IsNil(o.OpportunityId.Get()) {
		var ret int32
		return ret
	}
	return *o.OpportunityId.Get()
}

// GetOpportunityIdOk returns a tuple with the OpportunityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityNote) GetOpportunityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityId.Get(), o.OpportunityId.IsSet()
}

// HasOpportunityId returns a boolean if a field has been set.
func (o *OpportunityNote) HasOpportunityId() bool {
	if o != nil && o.OpportunityId.IsSet() {
		return true
	}

	return false
}

// SetOpportunityId gets a reference to the given NullableInt32 and assigns it to the OpportunityId field.
func (o *OpportunityNote) SetOpportunityId(v int32) {
	o.OpportunityId.Set(&v)
}
// SetOpportunityIdNil sets the value for OpportunityId to be an explicit nil
func (o *OpportunityNote) SetOpportunityIdNil() {
	o.OpportunityId.Set(nil)
}

// UnsetOpportunityId ensures that no value is present for OpportunityId, not even an explicit nil
func (o *OpportunityNote) UnsetOpportunityId() {
	o.OpportunityId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OpportunityNote) GetType() NoteTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret NoteTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityNote) GetTypeOk() (*NoteTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OpportunityNote) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NoteTypeReference and assigns it to the Type field.
func (o *OpportunityNote) SetType(v NoteTypeReference) {
	o.Type = &v
}

// GetText returns the Text field value
func (o *OpportunityNote) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *OpportunityNote) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *OpportunityNote) SetText(v string) {
	o.Text = v
}

// GetFlagged returns the Flagged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityNote) GetFlagged() bool {
	if o == nil || IsNil(o.Flagged.Get()) {
		var ret bool
		return ret
	}
	return *o.Flagged.Get()
}

// GetFlaggedOk returns a tuple with the Flagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityNote) GetFlaggedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flagged.Get(), o.Flagged.IsSet()
}

// HasFlagged returns a boolean if a field has been set.
func (o *OpportunityNote) HasFlagged() bool {
	if o != nil && o.Flagged.IsSet() {
		return true
	}

	return false
}

// SetFlagged gets a reference to the given NullableBool and assigns it to the Flagged field.
func (o *OpportunityNote) SetFlagged(v bool) {
	o.Flagged.Set(&v)
}
// SetFlaggedNil sets the value for Flagged to be an explicit nil
func (o *OpportunityNote) SetFlaggedNil() {
	o.Flagged.Set(nil)
}

// UnsetFlagged ensures that no value is present for Flagged, not even an explicit nil
func (o *OpportunityNote) UnsetFlagged() {
	o.Flagged.Unset()
}

// GetEnteredBy returns the EnteredBy field value if set, zero value otherwise.
func (o *OpportunityNote) GetEnteredBy() string {
	if o == nil || IsNil(o.EnteredBy) {
		var ret string
		return ret
	}
	return *o.EnteredBy
}

// GetEnteredByOk returns a tuple with the EnteredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityNote) GetEnteredByOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredBy) {
		return nil, false
	}
	return o.EnteredBy, true
}

// HasEnteredBy returns a boolean if a field has been set.
func (o *OpportunityNote) HasEnteredBy() bool {
	if o != nil && !IsNil(o.EnteredBy) {
		return true
	}

	return false
}

// SetEnteredBy gets a reference to the given string and assigns it to the EnteredBy field.
func (o *OpportunityNote) SetEnteredBy(v string) {
	o.EnteredBy = &v
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityNote) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityNote) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *OpportunityNote) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *OpportunityNote) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}
// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *OpportunityNote) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *OpportunityNote) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *OpportunityNote) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityNote) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *OpportunityNote) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *OpportunityNote) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o OpportunityNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.OpportunityId.IsSet() {
		toSerialize["opportunityId"] = o.OpportunityId.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["text"] = o.Text
	if o.Flagged.IsSet() {
		toSerialize["flagged"] = o.Flagged.Get()
	}
	if !IsNil(o.EnteredBy) {
		toSerialize["enteredBy"] = o.EnteredBy
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *OpportunityNote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpportunityNote := _OpportunityNote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpportunityNote)

	if err != nil {
		return err
	}

	*o = OpportunityNote(varOpportunityNote)

	return err
}

type NullableOpportunityNote struct {
	value *OpportunityNote
	isSet bool
}

func (v NullableOpportunityNote) Get() *OpportunityNote {
	return v.value
}

func (v *NullableOpportunityNote) Set(val *OpportunityNote) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityNote) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityNote(val *OpportunityNote) *NullableOpportunityNote {
	return &NullableOpportunityNote{value: val, isSet: true}
}

func (v NullableOpportunityNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


