/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpportunityStage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityStage{}

// OpportunityStage struct for OpportunityStage
type OpportunityStage struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Probability *OpportunityProbabilityReference `json:"probability,omitempty"`
	//  Max length: 25;
	Color *string `json:"color,omitempty"`
	SequenceNumber NullableInt32 `json:"sequenceNumber,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _OpportunityStage OpportunityStage

// NewOpportunityStage instantiates a new OpportunityStage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityStage(name string) *OpportunityStage {
	this := OpportunityStage{}
	this.Name = name
	return &this
}

// NewOpportunityStageWithDefaults instantiates a new OpportunityStage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityStageWithDefaults() *OpportunityStage {
	this := OpportunityStage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OpportunityStage) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityStage) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OpportunityStage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OpportunityStage) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *OpportunityStage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OpportunityStage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OpportunityStage) SetName(v string) {
	o.Name = v
}

// GetProbability returns the Probability field value if set, zero value otherwise.
func (o *OpportunityStage) GetProbability() OpportunityProbabilityReference {
	if o == nil || IsNil(o.Probability) {
		var ret OpportunityProbabilityReference
		return ret
	}
	return *o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityStage) GetProbabilityOk() (*OpportunityProbabilityReference, bool) {
	if o == nil || IsNil(o.Probability) {
		return nil, false
	}
	return o.Probability, true
}

// HasProbability returns a boolean if a field has been set.
func (o *OpportunityStage) HasProbability() bool {
	if o != nil && !IsNil(o.Probability) {
		return true
	}

	return false
}

// SetProbability gets a reference to the given OpportunityProbabilityReference and assigns it to the Probability field.
func (o *OpportunityStage) SetProbability(v OpportunityProbabilityReference) {
	o.Probability = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *OpportunityStage) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityStage) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *OpportunityStage) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *OpportunityStage) SetColor(v string) {
	o.Color = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityStage) GetSequenceNumber() int32 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityStage) GetSequenceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *OpportunityStage) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableInt32 and assigns it to the SequenceNumber field.
func (o *OpportunityStage) SetSequenceNumber(v int32) {
	o.SequenceNumber.Set(&v)
}
// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *OpportunityStage) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *OpportunityStage) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *OpportunityStage) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityStage) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *OpportunityStage) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *OpportunityStage) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o OpportunityStage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityStage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Probability) {
		toSerialize["probability"] = o.Probability
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *OpportunityStage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpportunityStage := _OpportunityStage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpportunityStage)

	if err != nil {
		return err
	}

	*o = OpportunityStage(varOpportunityStage)

	return err
}

type NullableOpportunityStage struct {
	value *OpportunityStage
	isSet bool
}

func (v NullableOpportunityStage) Get() *OpportunityStage {
	return v.value
}

func (v *NullableOpportunityStage) Set(val *OpportunityStage) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityStage) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityStage(val *OpportunityStage) *NullableOpportunityStage {
	return &NullableOpportunityStage{value: val, isSet: true}
}

func (v NullableOpportunityStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


