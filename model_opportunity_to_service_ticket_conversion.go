/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the OpportunityToServiceTicketConversion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityToServiceTicketConversion{}

// OpportunityToServiceTicketConversion struct for OpportunityToServiceTicketConversion
type OpportunityToServiceTicketConversion struct {
	TicketId *int32 `json:"ticketId,omitempty"`
	Summary *string `json:"summary,omitempty"`
	IncludeAllNotesFlag NullableBool `json:"includeAllNotesFlag,omitempty"`
	IncludeAllDocumentsFlag NullableBool `json:"includeAllDocumentsFlag,omitempty"`
	IncludeAllProductsFlag NullableBool `json:"includeAllProductsFlag,omitempty"`
	IncludeNoteIds []int32 `json:"includeNoteIds,omitempty"`
	IncludeDocumentIds []int32 `json:"includeDocumentIds,omitempty"`
	IncludeProductIds []int32 `json:"includeProductIds,omitempty"`
}

// NewOpportunityToServiceTicketConversion instantiates a new OpportunityToServiceTicketConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityToServiceTicketConversion() *OpportunityToServiceTicketConversion {
	this := OpportunityToServiceTicketConversion{}
	return &this
}

// NewOpportunityToServiceTicketConversionWithDefaults instantiates a new OpportunityToServiceTicketConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityToServiceTicketConversionWithDefaults() *OpportunityToServiceTicketConversion {
	this := OpportunityToServiceTicketConversion{}
	return &this
}

// GetTicketId returns the TicketId field value if set, zero value otherwise.
func (o *OpportunityToServiceTicketConversion) GetTicketId() int32 {
	if o == nil || IsNil(o.TicketId) {
		var ret int32
		return ret
	}
	return *o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToServiceTicketConversion) GetTicketIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TicketId) {
		return nil, false
	}
	return o.TicketId, true
}

// HasTicketId returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasTicketId() bool {
	if o != nil && !IsNil(o.TicketId) {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given int32 and assigns it to the TicketId field.
func (o *OpportunityToServiceTicketConversion) SetTicketId(v int32) {
	o.TicketId = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *OpportunityToServiceTicketConversion) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToServiceTicketConversion) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *OpportunityToServiceTicketConversion) SetSummary(v string) {
	o.Summary = &v
}

// GetIncludeAllNotesFlag returns the IncludeAllNotesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToServiceTicketConversion) GetIncludeAllNotesFlag() bool {
	if o == nil || IsNil(o.IncludeAllNotesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllNotesFlag.Get()
}

// GetIncludeAllNotesFlagOk returns a tuple with the IncludeAllNotesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToServiceTicketConversion) GetIncludeAllNotesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllNotesFlag.Get(), o.IncludeAllNotesFlag.IsSet()
}

// HasIncludeAllNotesFlag returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasIncludeAllNotesFlag() bool {
	if o != nil && o.IncludeAllNotesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllNotesFlag gets a reference to the given NullableBool and assigns it to the IncludeAllNotesFlag field.
func (o *OpportunityToServiceTicketConversion) SetIncludeAllNotesFlag(v bool) {
	o.IncludeAllNotesFlag.Set(&v)
}
// SetIncludeAllNotesFlagNil sets the value for IncludeAllNotesFlag to be an explicit nil
func (o *OpportunityToServiceTicketConversion) SetIncludeAllNotesFlagNil() {
	o.IncludeAllNotesFlag.Set(nil)
}

// UnsetIncludeAllNotesFlag ensures that no value is present for IncludeAllNotesFlag, not even an explicit nil
func (o *OpportunityToServiceTicketConversion) UnsetIncludeAllNotesFlag() {
	o.IncludeAllNotesFlag.Unset()
}

// GetIncludeAllDocumentsFlag returns the IncludeAllDocumentsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToServiceTicketConversion) GetIncludeAllDocumentsFlag() bool {
	if o == nil || IsNil(o.IncludeAllDocumentsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllDocumentsFlag.Get()
}

// GetIncludeAllDocumentsFlagOk returns a tuple with the IncludeAllDocumentsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToServiceTicketConversion) GetIncludeAllDocumentsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllDocumentsFlag.Get(), o.IncludeAllDocumentsFlag.IsSet()
}

// HasIncludeAllDocumentsFlag returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasIncludeAllDocumentsFlag() bool {
	if o != nil && o.IncludeAllDocumentsFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllDocumentsFlag gets a reference to the given NullableBool and assigns it to the IncludeAllDocumentsFlag field.
func (o *OpportunityToServiceTicketConversion) SetIncludeAllDocumentsFlag(v bool) {
	o.IncludeAllDocumentsFlag.Set(&v)
}
// SetIncludeAllDocumentsFlagNil sets the value for IncludeAllDocumentsFlag to be an explicit nil
func (o *OpportunityToServiceTicketConversion) SetIncludeAllDocumentsFlagNil() {
	o.IncludeAllDocumentsFlag.Set(nil)
}

// UnsetIncludeAllDocumentsFlag ensures that no value is present for IncludeAllDocumentsFlag, not even an explicit nil
func (o *OpportunityToServiceTicketConversion) UnsetIncludeAllDocumentsFlag() {
	o.IncludeAllDocumentsFlag.Unset()
}

// GetIncludeAllProductsFlag returns the IncludeAllProductsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpportunityToServiceTicketConversion) GetIncludeAllProductsFlag() bool {
	if o == nil || IsNil(o.IncludeAllProductsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllProductsFlag.Get()
}

// GetIncludeAllProductsFlagOk returns a tuple with the IncludeAllProductsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpportunityToServiceTicketConversion) GetIncludeAllProductsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllProductsFlag.Get(), o.IncludeAllProductsFlag.IsSet()
}

// HasIncludeAllProductsFlag returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasIncludeAllProductsFlag() bool {
	if o != nil && o.IncludeAllProductsFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllProductsFlag gets a reference to the given NullableBool and assigns it to the IncludeAllProductsFlag field.
func (o *OpportunityToServiceTicketConversion) SetIncludeAllProductsFlag(v bool) {
	o.IncludeAllProductsFlag.Set(&v)
}
// SetIncludeAllProductsFlagNil sets the value for IncludeAllProductsFlag to be an explicit nil
func (o *OpportunityToServiceTicketConversion) SetIncludeAllProductsFlagNil() {
	o.IncludeAllProductsFlag.Set(nil)
}

// UnsetIncludeAllProductsFlag ensures that no value is present for IncludeAllProductsFlag, not even an explicit nil
func (o *OpportunityToServiceTicketConversion) UnsetIncludeAllProductsFlag() {
	o.IncludeAllProductsFlag.Unset()
}

// GetIncludeNoteIds returns the IncludeNoteIds field value if set, zero value otherwise.
func (o *OpportunityToServiceTicketConversion) GetIncludeNoteIds() []int32 {
	if o == nil || IsNil(o.IncludeNoteIds) {
		var ret []int32
		return ret
	}
	return o.IncludeNoteIds
}

// GetIncludeNoteIdsOk returns a tuple with the IncludeNoteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToServiceTicketConversion) GetIncludeNoteIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IncludeNoteIds) {
		return nil, false
	}
	return o.IncludeNoteIds, true
}

// HasIncludeNoteIds returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasIncludeNoteIds() bool {
	if o != nil && !IsNil(o.IncludeNoteIds) {
		return true
	}

	return false
}

// SetIncludeNoteIds gets a reference to the given []int32 and assigns it to the IncludeNoteIds field.
func (o *OpportunityToServiceTicketConversion) SetIncludeNoteIds(v []int32) {
	o.IncludeNoteIds = v
}

// GetIncludeDocumentIds returns the IncludeDocumentIds field value if set, zero value otherwise.
func (o *OpportunityToServiceTicketConversion) GetIncludeDocumentIds() []int32 {
	if o == nil || IsNil(o.IncludeDocumentIds) {
		var ret []int32
		return ret
	}
	return o.IncludeDocumentIds
}

// GetIncludeDocumentIdsOk returns a tuple with the IncludeDocumentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToServiceTicketConversion) GetIncludeDocumentIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IncludeDocumentIds) {
		return nil, false
	}
	return o.IncludeDocumentIds, true
}

// HasIncludeDocumentIds returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasIncludeDocumentIds() bool {
	if o != nil && !IsNil(o.IncludeDocumentIds) {
		return true
	}

	return false
}

// SetIncludeDocumentIds gets a reference to the given []int32 and assigns it to the IncludeDocumentIds field.
func (o *OpportunityToServiceTicketConversion) SetIncludeDocumentIds(v []int32) {
	o.IncludeDocumentIds = v
}

// GetIncludeProductIds returns the IncludeProductIds field value if set, zero value otherwise.
func (o *OpportunityToServiceTicketConversion) GetIncludeProductIds() []int32 {
	if o == nil || IsNil(o.IncludeProductIds) {
		var ret []int32
		return ret
	}
	return o.IncludeProductIds
}

// GetIncludeProductIdsOk returns a tuple with the IncludeProductIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityToServiceTicketConversion) GetIncludeProductIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.IncludeProductIds) {
		return nil, false
	}
	return o.IncludeProductIds, true
}

// HasIncludeProductIds returns a boolean if a field has been set.
func (o *OpportunityToServiceTicketConversion) HasIncludeProductIds() bool {
	if o != nil && !IsNil(o.IncludeProductIds) {
		return true
	}

	return false
}

// SetIncludeProductIds gets a reference to the given []int32 and assigns it to the IncludeProductIds field.
func (o *OpportunityToServiceTicketConversion) SetIncludeProductIds(v []int32) {
	o.IncludeProductIds = v
}

func (o OpportunityToServiceTicketConversion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityToServiceTicketConversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TicketId) {
		toSerialize["ticketId"] = o.TicketId
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if o.IncludeAllNotesFlag.IsSet() {
		toSerialize["includeAllNotesFlag"] = o.IncludeAllNotesFlag.Get()
	}
	if o.IncludeAllDocumentsFlag.IsSet() {
		toSerialize["includeAllDocumentsFlag"] = o.IncludeAllDocumentsFlag.Get()
	}
	if o.IncludeAllProductsFlag.IsSet() {
		toSerialize["includeAllProductsFlag"] = o.IncludeAllProductsFlag.Get()
	}
	if !IsNil(o.IncludeNoteIds) {
		toSerialize["includeNoteIds"] = o.IncludeNoteIds
	}
	if !IsNil(o.IncludeDocumentIds) {
		toSerialize["includeDocumentIds"] = o.IncludeDocumentIds
	}
	if !IsNil(o.IncludeProductIds) {
		toSerialize["includeProductIds"] = o.IncludeProductIds
	}
	return toSerialize, nil
}

type NullableOpportunityToServiceTicketConversion struct {
	value *OpportunityToServiceTicketConversion
	isSet bool
}

func (v NullableOpportunityToServiceTicketConversion) Get() *OpportunityToServiceTicketConversion {
	return v.value
}

func (v *NullableOpportunityToServiceTicketConversion) Set(val *OpportunityToServiceTicketConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityToServiceTicketConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityToServiceTicketConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityToServiceTicketConversion(val *OpportunityToServiceTicketConversion) *NullableOpportunityToServiceTicketConversion {
	return &NullableOpportunityToServiceTicketConversion{value: val, isSet: true}
}

func (v NullableOpportunityToServiceTicketConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityToServiceTicketConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


