/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentType{}

// PaymentType struct for PaymentType
type PaymentType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name string `json:"name"`
	Classification ClassificationReference `json:"classification"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	CompanyFlag NullableBool `json:"companyFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _PaymentType PaymentType

// NewPaymentType instantiates a new PaymentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentType(name string, classification ClassificationReference) *PaymentType {
	this := PaymentType{}
	this.Name = name
	this.Classification = classification
	return &this
}

// NewPaymentTypeWithDefaults instantiates a new PaymentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentTypeWithDefaults() *PaymentType {
	this := PaymentType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PaymentType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PaymentType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PaymentType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *PaymentType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PaymentType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PaymentType) SetName(v string) {
	o.Name = v
}

// GetClassification returns the Classification field value
func (o *PaymentType) GetClassification() ClassificationReference {
	if o == nil {
		var ret ClassificationReference
		return ret
	}

	return o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value
// and a boolean to check if the value has been set.
func (o *PaymentType) GetClassificationOk() (*ClassificationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classification, true
}

// SetClassification sets field value
func (o *PaymentType) SetClassification(v ClassificationReference) {
	o.Classification = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentType) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentType) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *PaymentType) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *PaymentType) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *PaymentType) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *PaymentType) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetCompanyFlag returns the CompanyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentType) GetCompanyFlag() bool {
	if o == nil || IsNil(o.CompanyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompanyFlag.Get()
}

// GetCompanyFlagOk returns a tuple with the CompanyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentType) GetCompanyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyFlag.Get(), o.CompanyFlag.IsSet()
}

// HasCompanyFlag returns a boolean if a field has been set.
func (o *PaymentType) HasCompanyFlag() bool {
	if o != nil && o.CompanyFlag.IsSet() {
		return true
	}

	return false
}

// SetCompanyFlag gets a reference to the given NullableBool and assigns it to the CompanyFlag field.
func (o *PaymentType) SetCompanyFlag(v bool) {
	o.CompanyFlag.Set(&v)
}
// SetCompanyFlagNil sets the value for CompanyFlag to be an explicit nil
func (o *PaymentType) SetCompanyFlagNil() {
	o.CompanyFlag.Set(nil)
}

// UnsetCompanyFlag ensures that no value is present for CompanyFlag, not even an explicit nil
func (o *PaymentType) UnsetCompanyFlag() {
	o.CompanyFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PaymentType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PaymentType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PaymentType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PaymentType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["classification"] = o.Classification
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.CompanyFlag.IsSet() {
		toSerialize["companyFlag"] = o.CompanyFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *PaymentType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"classification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentType := _PaymentType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentType)

	if err != nil {
		return err
	}

	*o = PaymentType(varPaymentType)

	return err
}

type NullablePaymentType struct {
	value *PaymentType
	isSet bool
}

func (v NullablePaymentType) Get() *PaymentType {
	return v.value
}

func (v *NullablePaymentType) Set(val *PaymentType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentType(val *PaymentType) *NullablePaymentType {
	return &NullablePaymentType{value: val, isSet: true}
}

func (v NullablePaymentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


