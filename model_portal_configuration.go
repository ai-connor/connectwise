/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PortalConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortalConfiguration{}

// PortalConfiguration struct for PortalConfiguration
type PortalConfiguration struct {
	// Gets or sets and Sets             An existing Portal Configuration id is required when copying a Portal Configuration.
	Id *int32 `json:"id,omitempty"`
	//  Max length: 150;
	Name string `json:"name"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	//  Max length: 7;
	LoginBackgroundColor *string `json:"loginBackgroundColor,omitempty"`
	//  Max length: 7;
	PortalBackgroundColor *string `json:"portalBackgroundColor,omitempty"`
	//  Max length: 7;
	MenuColor *string `json:"menuColor,omitempty"`
	//  Max length: 7;
	ButtonColor *string `json:"buttonColor,omitempty"`
	//  Max length: 7;
	HeaderColor *string `json:"headerColor,omitempty"`
	//  Max length: 1000;
	Url *string `json:"url,omitempty"`
	Language NullableString `json:"language,omitempty"`
	//  Max length: 4000;
	WelcomeText *string `json:"welcomeText,omitempty"`
	BoardIds []int32 `json:"boardIds,omitempty"`
	AgreementTypeIds []int32 `json:"agreementTypeIds,omitempty"`
	ConfigTypeIds []int32 `json:"configTypeIds,omitempty"`
	LocationIds []int32 `json:"locationIds,omitempty"`
	PortalImageCopySuccessFlag NullableBool `json:"portalImageCopySuccessFlag,omitempty"`
	DisplayVendorFlag NullableBool `json:"displayVendorFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _PortalConfiguration PortalConfiguration

// NewPortalConfiguration instantiates a new PortalConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortalConfiguration(name string) *PortalConfiguration {
	this := PortalConfiguration{}
	this.Name = name
	return &this
}

// NewPortalConfigurationWithDefaults instantiates a new PortalConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortalConfigurationWithDefaults() *PortalConfiguration {
	this := PortalConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortalConfiguration) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortalConfiguration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PortalConfiguration) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *PortalConfiguration) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PortalConfiguration) SetName(v string) {
	o.Name = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfiguration) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfiguration) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *PortalConfiguration) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *PortalConfiguration) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *PortalConfiguration) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *PortalConfiguration) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *PortalConfiguration) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *PortalConfiguration) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *PortalConfiguration) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetLoginBackgroundColor returns the LoginBackgroundColor field value if set, zero value otherwise.
func (o *PortalConfiguration) GetLoginBackgroundColor() string {
	if o == nil || IsNil(o.LoginBackgroundColor) {
		var ret string
		return ret
	}
	return *o.LoginBackgroundColor
}

// GetLoginBackgroundColorOk returns a tuple with the LoginBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetLoginBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.LoginBackgroundColor) {
		return nil, false
	}
	return o.LoginBackgroundColor, true
}

// HasLoginBackgroundColor returns a boolean if a field has been set.
func (o *PortalConfiguration) HasLoginBackgroundColor() bool {
	if o != nil && !IsNil(o.LoginBackgroundColor) {
		return true
	}

	return false
}

// SetLoginBackgroundColor gets a reference to the given string and assigns it to the LoginBackgroundColor field.
func (o *PortalConfiguration) SetLoginBackgroundColor(v string) {
	o.LoginBackgroundColor = &v
}

// GetPortalBackgroundColor returns the PortalBackgroundColor field value if set, zero value otherwise.
func (o *PortalConfiguration) GetPortalBackgroundColor() string {
	if o == nil || IsNil(o.PortalBackgroundColor) {
		var ret string
		return ret
	}
	return *o.PortalBackgroundColor
}

// GetPortalBackgroundColorOk returns a tuple with the PortalBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetPortalBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.PortalBackgroundColor) {
		return nil, false
	}
	return o.PortalBackgroundColor, true
}

// HasPortalBackgroundColor returns a boolean if a field has been set.
func (o *PortalConfiguration) HasPortalBackgroundColor() bool {
	if o != nil && !IsNil(o.PortalBackgroundColor) {
		return true
	}

	return false
}

// SetPortalBackgroundColor gets a reference to the given string and assigns it to the PortalBackgroundColor field.
func (o *PortalConfiguration) SetPortalBackgroundColor(v string) {
	o.PortalBackgroundColor = &v
}

// GetMenuColor returns the MenuColor field value if set, zero value otherwise.
func (o *PortalConfiguration) GetMenuColor() string {
	if o == nil || IsNil(o.MenuColor) {
		var ret string
		return ret
	}
	return *o.MenuColor
}

// GetMenuColorOk returns a tuple with the MenuColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetMenuColorOk() (*string, bool) {
	if o == nil || IsNil(o.MenuColor) {
		return nil, false
	}
	return o.MenuColor, true
}

// HasMenuColor returns a boolean if a field has been set.
func (o *PortalConfiguration) HasMenuColor() bool {
	if o != nil && !IsNil(o.MenuColor) {
		return true
	}

	return false
}

// SetMenuColor gets a reference to the given string and assigns it to the MenuColor field.
func (o *PortalConfiguration) SetMenuColor(v string) {
	o.MenuColor = &v
}

// GetButtonColor returns the ButtonColor field value if set, zero value otherwise.
func (o *PortalConfiguration) GetButtonColor() string {
	if o == nil || IsNil(o.ButtonColor) {
		var ret string
		return ret
	}
	return *o.ButtonColor
}

// GetButtonColorOk returns a tuple with the ButtonColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetButtonColorOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonColor) {
		return nil, false
	}
	return o.ButtonColor, true
}

// HasButtonColor returns a boolean if a field has been set.
func (o *PortalConfiguration) HasButtonColor() bool {
	if o != nil && !IsNil(o.ButtonColor) {
		return true
	}

	return false
}

// SetButtonColor gets a reference to the given string and assigns it to the ButtonColor field.
func (o *PortalConfiguration) SetButtonColor(v string) {
	o.ButtonColor = &v
}

// GetHeaderColor returns the HeaderColor field value if set, zero value otherwise.
func (o *PortalConfiguration) GetHeaderColor() string {
	if o == nil || IsNil(o.HeaderColor) {
		var ret string
		return ret
	}
	return *o.HeaderColor
}

// GetHeaderColorOk returns a tuple with the HeaderColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetHeaderColorOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderColor) {
		return nil, false
	}
	return o.HeaderColor, true
}

// HasHeaderColor returns a boolean if a field has been set.
func (o *PortalConfiguration) HasHeaderColor() bool {
	if o != nil && !IsNil(o.HeaderColor) {
		return true
	}

	return false
}

// SetHeaderColor gets a reference to the given string and assigns it to the HeaderColor field.
func (o *PortalConfiguration) SetHeaderColor(v string) {
	o.HeaderColor = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PortalConfiguration) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PortalConfiguration) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PortalConfiguration) SetUrl(v string) {
	o.Url = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfiguration) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfiguration) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *PortalConfiguration) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *PortalConfiguration) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *PortalConfiguration) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *PortalConfiguration) UnsetLanguage() {
	o.Language.Unset()
}

// GetWelcomeText returns the WelcomeText field value if set, zero value otherwise.
func (o *PortalConfiguration) GetWelcomeText() string {
	if o == nil || IsNil(o.WelcomeText) {
		var ret string
		return ret
	}
	return *o.WelcomeText
}

// GetWelcomeTextOk returns a tuple with the WelcomeText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetWelcomeTextOk() (*string, bool) {
	if o == nil || IsNil(o.WelcomeText) {
		return nil, false
	}
	return o.WelcomeText, true
}

// HasWelcomeText returns a boolean if a field has been set.
func (o *PortalConfiguration) HasWelcomeText() bool {
	if o != nil && !IsNil(o.WelcomeText) {
		return true
	}

	return false
}

// SetWelcomeText gets a reference to the given string and assigns it to the WelcomeText field.
func (o *PortalConfiguration) SetWelcomeText(v string) {
	o.WelcomeText = &v
}

// GetBoardIds returns the BoardIds field value if set, zero value otherwise.
func (o *PortalConfiguration) GetBoardIds() []int32 {
	if o == nil || IsNil(o.BoardIds) {
		var ret []int32
		return ret
	}
	return o.BoardIds
}

// GetBoardIdsOk returns a tuple with the BoardIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetBoardIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.BoardIds) {
		return nil, false
	}
	return o.BoardIds, true
}

// HasBoardIds returns a boolean if a field has been set.
func (o *PortalConfiguration) HasBoardIds() bool {
	if o != nil && !IsNil(o.BoardIds) {
		return true
	}

	return false
}

// SetBoardIds gets a reference to the given []int32 and assigns it to the BoardIds field.
func (o *PortalConfiguration) SetBoardIds(v []int32) {
	o.BoardIds = v
}

// GetAgreementTypeIds returns the AgreementTypeIds field value if set, zero value otherwise.
func (o *PortalConfiguration) GetAgreementTypeIds() []int32 {
	if o == nil || IsNil(o.AgreementTypeIds) {
		var ret []int32
		return ret
	}
	return o.AgreementTypeIds
}

// GetAgreementTypeIdsOk returns a tuple with the AgreementTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetAgreementTypeIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AgreementTypeIds) {
		return nil, false
	}
	return o.AgreementTypeIds, true
}

// HasAgreementTypeIds returns a boolean if a field has been set.
func (o *PortalConfiguration) HasAgreementTypeIds() bool {
	if o != nil && !IsNil(o.AgreementTypeIds) {
		return true
	}

	return false
}

// SetAgreementTypeIds gets a reference to the given []int32 and assigns it to the AgreementTypeIds field.
func (o *PortalConfiguration) SetAgreementTypeIds(v []int32) {
	o.AgreementTypeIds = v
}

// GetConfigTypeIds returns the ConfigTypeIds field value if set, zero value otherwise.
func (o *PortalConfiguration) GetConfigTypeIds() []int32 {
	if o == nil || IsNil(o.ConfigTypeIds) {
		var ret []int32
		return ret
	}
	return o.ConfigTypeIds
}

// GetConfigTypeIdsOk returns a tuple with the ConfigTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetConfigTypeIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ConfigTypeIds) {
		return nil, false
	}
	return o.ConfigTypeIds, true
}

// HasConfigTypeIds returns a boolean if a field has been set.
func (o *PortalConfiguration) HasConfigTypeIds() bool {
	if o != nil && !IsNil(o.ConfigTypeIds) {
		return true
	}

	return false
}

// SetConfigTypeIds gets a reference to the given []int32 and assigns it to the ConfigTypeIds field.
func (o *PortalConfiguration) SetConfigTypeIds(v []int32) {
	o.ConfigTypeIds = v
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *PortalConfiguration) GetLocationIds() []int32 {
	if o == nil || IsNil(o.LocationIds) {
		var ret []int32
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetLocationIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *PortalConfiguration) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []int32 and assigns it to the LocationIds field.
func (o *PortalConfiguration) SetLocationIds(v []int32) {
	o.LocationIds = v
}

// GetPortalImageCopySuccessFlag returns the PortalImageCopySuccessFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfiguration) GetPortalImageCopySuccessFlag() bool {
	if o == nil || IsNil(o.PortalImageCopySuccessFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PortalImageCopySuccessFlag.Get()
}

// GetPortalImageCopySuccessFlagOk returns a tuple with the PortalImageCopySuccessFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfiguration) GetPortalImageCopySuccessFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortalImageCopySuccessFlag.Get(), o.PortalImageCopySuccessFlag.IsSet()
}

// HasPortalImageCopySuccessFlag returns a boolean if a field has been set.
func (o *PortalConfiguration) HasPortalImageCopySuccessFlag() bool {
	if o != nil && o.PortalImageCopySuccessFlag.IsSet() {
		return true
	}

	return false
}

// SetPortalImageCopySuccessFlag gets a reference to the given NullableBool and assigns it to the PortalImageCopySuccessFlag field.
func (o *PortalConfiguration) SetPortalImageCopySuccessFlag(v bool) {
	o.PortalImageCopySuccessFlag.Set(&v)
}
// SetPortalImageCopySuccessFlagNil sets the value for PortalImageCopySuccessFlag to be an explicit nil
func (o *PortalConfiguration) SetPortalImageCopySuccessFlagNil() {
	o.PortalImageCopySuccessFlag.Set(nil)
}

// UnsetPortalImageCopySuccessFlag ensures that no value is present for PortalImageCopySuccessFlag, not even an explicit nil
func (o *PortalConfiguration) UnsetPortalImageCopySuccessFlag() {
	o.PortalImageCopySuccessFlag.Unset()
}

// GetDisplayVendorFlag returns the DisplayVendorFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalConfiguration) GetDisplayVendorFlag() bool {
	if o == nil || IsNil(o.DisplayVendorFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplayVendorFlag.Get()
}

// GetDisplayVendorFlagOk returns a tuple with the DisplayVendorFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalConfiguration) GetDisplayVendorFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayVendorFlag.Get(), o.DisplayVendorFlag.IsSet()
}

// HasDisplayVendorFlag returns a boolean if a field has been set.
func (o *PortalConfiguration) HasDisplayVendorFlag() bool {
	if o != nil && o.DisplayVendorFlag.IsSet() {
		return true
	}

	return false
}

// SetDisplayVendorFlag gets a reference to the given NullableBool and assigns it to the DisplayVendorFlag field.
func (o *PortalConfiguration) SetDisplayVendorFlag(v bool) {
	o.DisplayVendorFlag.Set(&v)
}
// SetDisplayVendorFlagNil sets the value for DisplayVendorFlag to be an explicit nil
func (o *PortalConfiguration) SetDisplayVendorFlagNil() {
	o.DisplayVendorFlag.Set(nil)
}

// UnsetDisplayVendorFlag ensures that no value is present for DisplayVendorFlag, not even an explicit nil
func (o *PortalConfiguration) UnsetDisplayVendorFlag() {
	o.DisplayVendorFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PortalConfiguration) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalConfiguration) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PortalConfiguration) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PortalConfiguration) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PortalConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortalConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.LoginBackgroundColor) {
		toSerialize["loginBackgroundColor"] = o.LoginBackgroundColor
	}
	if !IsNil(o.PortalBackgroundColor) {
		toSerialize["portalBackgroundColor"] = o.PortalBackgroundColor
	}
	if !IsNil(o.MenuColor) {
		toSerialize["menuColor"] = o.MenuColor
	}
	if !IsNil(o.ButtonColor) {
		toSerialize["buttonColor"] = o.ButtonColor
	}
	if !IsNil(o.HeaderColor) {
		toSerialize["headerColor"] = o.HeaderColor
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if !IsNil(o.WelcomeText) {
		toSerialize["welcomeText"] = o.WelcomeText
	}
	if !IsNil(o.BoardIds) {
		toSerialize["boardIds"] = o.BoardIds
	}
	if !IsNil(o.AgreementTypeIds) {
		toSerialize["agreementTypeIds"] = o.AgreementTypeIds
	}
	if !IsNil(o.ConfigTypeIds) {
		toSerialize["configTypeIds"] = o.ConfigTypeIds
	}
	if !IsNil(o.LocationIds) {
		toSerialize["locationIds"] = o.LocationIds
	}
	if o.PortalImageCopySuccessFlag.IsSet() {
		toSerialize["portalImageCopySuccessFlag"] = o.PortalImageCopySuccessFlag.Get()
	}
	if o.DisplayVendorFlag.IsSet() {
		toSerialize["displayVendorFlag"] = o.DisplayVendorFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *PortalConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortalConfiguration := _PortalConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortalConfiguration)

	if err != nil {
		return err
	}

	*o = PortalConfiguration(varPortalConfiguration)

	return err
}

type NullablePortalConfiguration struct {
	value *PortalConfiguration
	isSet bool
}

func (v NullablePortalConfiguration) Get() *PortalConfiguration {
	return v.value
}

func (v *NullablePortalConfiguration) Set(val *PortalConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePortalConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePortalConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortalConfiguration(val *PortalConfiguration) *NullablePortalConfiguration {
	return &NullablePortalConfiguration{value: val, isSet: true}
}

func (v NullablePortalConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortalConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


