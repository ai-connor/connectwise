/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PortalReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortalReport{}

// PortalReport struct for PortalReport
type PortalReport struct {
	Id *int32 `json:"id,omitempty"`
	PortalConfiguration *PortalConfigurationReference `json:"portalConfiguration,omitempty"`
	//  Max length: 255;
	Name string `json:"name"`
	//  Max length: 255;
	Url string `json:"url"`
	OpenSameWindowFlag NullableBool `json:"openSameWindowFlag,omitempty"`
	CustomFlag NullableBool `json:"customFlag,omitempty"`
	DisplayFlag NullableBool `json:"displayFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _PortalReport PortalReport

// NewPortalReport instantiates a new PortalReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortalReport(name string, url string) *PortalReport {
	this := PortalReport{}
	this.Name = name
	this.Url = url
	return &this
}

// NewPortalReportWithDefaults instantiates a new PortalReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortalReportWithDefaults() *PortalReport {
	this := PortalReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortalReport) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalReport) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortalReport) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PortalReport) SetId(v int32) {
	o.Id = &v
}

// GetPortalConfiguration returns the PortalConfiguration field value if set, zero value otherwise.
func (o *PortalReport) GetPortalConfiguration() PortalConfigurationReference {
	if o == nil || IsNil(o.PortalConfiguration) {
		var ret PortalConfigurationReference
		return ret
	}
	return *o.PortalConfiguration
}

// GetPortalConfigurationOk returns a tuple with the PortalConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalReport) GetPortalConfigurationOk() (*PortalConfigurationReference, bool) {
	if o == nil || IsNil(o.PortalConfiguration) {
		return nil, false
	}
	return o.PortalConfiguration, true
}

// HasPortalConfiguration returns a boolean if a field has been set.
func (o *PortalReport) HasPortalConfiguration() bool {
	if o != nil && !IsNil(o.PortalConfiguration) {
		return true
	}

	return false
}

// SetPortalConfiguration gets a reference to the given PortalConfigurationReference and assigns it to the PortalConfiguration field.
func (o *PortalReport) SetPortalConfiguration(v PortalConfigurationReference) {
	o.PortalConfiguration = &v
}

// GetName returns the Name field value
func (o *PortalReport) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PortalReport) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PortalReport) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *PortalReport) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PortalReport) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PortalReport) SetUrl(v string) {
	o.Url = v
}

// GetOpenSameWindowFlag returns the OpenSameWindowFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalReport) GetOpenSameWindowFlag() bool {
	if o == nil || IsNil(o.OpenSameWindowFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OpenSameWindowFlag.Get()
}

// GetOpenSameWindowFlagOk returns a tuple with the OpenSameWindowFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalReport) GetOpenSameWindowFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenSameWindowFlag.Get(), o.OpenSameWindowFlag.IsSet()
}

// HasOpenSameWindowFlag returns a boolean if a field has been set.
func (o *PortalReport) HasOpenSameWindowFlag() bool {
	if o != nil && o.OpenSameWindowFlag.IsSet() {
		return true
	}

	return false
}

// SetOpenSameWindowFlag gets a reference to the given NullableBool and assigns it to the OpenSameWindowFlag field.
func (o *PortalReport) SetOpenSameWindowFlag(v bool) {
	o.OpenSameWindowFlag.Set(&v)
}
// SetOpenSameWindowFlagNil sets the value for OpenSameWindowFlag to be an explicit nil
func (o *PortalReport) SetOpenSameWindowFlagNil() {
	o.OpenSameWindowFlag.Set(nil)
}

// UnsetOpenSameWindowFlag ensures that no value is present for OpenSameWindowFlag, not even an explicit nil
func (o *PortalReport) UnsetOpenSameWindowFlag() {
	o.OpenSameWindowFlag.Unset()
}

// GetCustomFlag returns the CustomFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalReport) GetCustomFlag() bool {
	if o == nil || IsNil(o.CustomFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomFlag.Get()
}

// GetCustomFlagOk returns a tuple with the CustomFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalReport) GetCustomFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomFlag.Get(), o.CustomFlag.IsSet()
}

// HasCustomFlag returns a boolean if a field has been set.
func (o *PortalReport) HasCustomFlag() bool {
	if o != nil && o.CustomFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomFlag gets a reference to the given NullableBool and assigns it to the CustomFlag field.
func (o *PortalReport) SetCustomFlag(v bool) {
	o.CustomFlag.Set(&v)
}
// SetCustomFlagNil sets the value for CustomFlag to be an explicit nil
func (o *PortalReport) SetCustomFlagNil() {
	o.CustomFlag.Set(nil)
}

// UnsetCustomFlag ensures that no value is present for CustomFlag, not even an explicit nil
func (o *PortalReport) UnsetCustomFlag() {
	o.CustomFlag.Unset()
}

// GetDisplayFlag returns the DisplayFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortalReport) GetDisplayFlag() bool {
	if o == nil || IsNil(o.DisplayFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplayFlag.Get()
}

// GetDisplayFlagOk returns a tuple with the DisplayFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortalReport) GetDisplayFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayFlag.Get(), o.DisplayFlag.IsSet()
}

// HasDisplayFlag returns a boolean if a field has been set.
func (o *PortalReport) HasDisplayFlag() bool {
	if o != nil && o.DisplayFlag.IsSet() {
		return true
	}

	return false
}

// SetDisplayFlag gets a reference to the given NullableBool and assigns it to the DisplayFlag field.
func (o *PortalReport) SetDisplayFlag(v bool) {
	o.DisplayFlag.Set(&v)
}
// SetDisplayFlagNil sets the value for DisplayFlag to be an explicit nil
func (o *PortalReport) SetDisplayFlagNil() {
	o.DisplayFlag.Set(nil)
}

// UnsetDisplayFlag ensures that no value is present for DisplayFlag, not even an explicit nil
func (o *PortalReport) UnsetDisplayFlag() {
	o.DisplayFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PortalReport) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortalReport) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PortalReport) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PortalReport) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o PortalReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortalReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PortalConfiguration) {
		toSerialize["portalConfiguration"] = o.PortalConfiguration
	}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	if o.OpenSameWindowFlag.IsSet() {
		toSerialize["openSameWindowFlag"] = o.OpenSameWindowFlag.Get()
	}
	if o.CustomFlag.IsSet() {
		toSerialize["customFlag"] = o.CustomFlag.Get()
	}
	if o.DisplayFlag.IsSet() {
		toSerialize["displayFlag"] = o.DisplayFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *PortalReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortalReport := _PortalReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortalReport)

	if err != nil {
		return err
	}

	*o = PortalReport(varPortalReport)

	return err
}

type NullablePortalReport struct {
	value *PortalReport
	isSet bool
}

func (v NullablePortalReport) Get() *PortalReport {
	return v.value
}

func (v *NullablePortalReport) Set(val *PortalReport) {
	v.value = val
	v.isSet = true
}

func (v NullablePortalReport) IsSet() bool {
	return v.isSet
}

func (v *NullablePortalReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortalReport(val *PortalReport) *NullablePortalReport {
	return &NullablePortalReport{value: val, isSet: true}
}

func (v NullablePortalReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortalReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


