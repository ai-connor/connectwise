/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProcurementAdjustment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcurementAdjustment{}

// ProcurementAdjustment struct for ProcurementAdjustment
type ProcurementAdjustment struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Identifier string `json:"identifier"`
	Type AdjustmentTypeReference `json:"type"`
	//  Max length: 100;
	Reason *string `json:"reason,omitempty"`
	Notes *string `json:"notes,omitempty"`
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	ClosedBy *string `json:"closedBy,omitempty"`
	ClosedDate *time.Time `json:"closedDate,omitempty"`
	AdjustmentDetails []AdjustmentDetail `json:"adjustmentDetails,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ProcurementAdjustment ProcurementAdjustment

// NewProcurementAdjustment instantiates a new ProcurementAdjustment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcurementAdjustment(identifier string, type_ AdjustmentTypeReference) *ProcurementAdjustment {
	this := ProcurementAdjustment{}
	this.Identifier = identifier
	this.Type = type_
	return &this
}

// NewProcurementAdjustmentWithDefaults instantiates a new ProcurementAdjustment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcurementAdjustmentWithDefaults() *ProcurementAdjustment {
	this := ProcurementAdjustment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProcurementAdjustment) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value
func (o *ProcurementAdjustment) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ProcurementAdjustment) SetIdentifier(v string) {
	o.Identifier = v
}

// GetType returns the Type field value
func (o *ProcurementAdjustment) GetType() AdjustmentTypeReference {
	if o == nil {
		var ret AdjustmentTypeReference
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetTypeOk() (*AdjustmentTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProcurementAdjustment) SetType(v AdjustmentTypeReference) {
	o.Type = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ProcurementAdjustment) SetReason(v string) {
	o.Reason = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ProcurementAdjustment) SetNotes(v string) {
	o.Notes = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcurementAdjustment) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcurementAdjustment) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *ProcurementAdjustment) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *ProcurementAdjustment) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *ProcurementAdjustment) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetClosedBy returns the ClosedBy field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetClosedBy() string {
	if o == nil || IsNil(o.ClosedBy) {
		var ret string
		return ret
	}
	return *o.ClosedBy
}

// GetClosedByOk returns a tuple with the ClosedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetClosedByOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedBy) {
		return nil, false
	}
	return o.ClosedBy, true
}

// HasClosedBy returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasClosedBy() bool {
	if o != nil && !IsNil(o.ClosedBy) {
		return true
	}

	return false
}

// SetClosedBy gets a reference to the given string and assigns it to the ClosedBy field.
func (o *ProcurementAdjustment) SetClosedBy(v string) {
	o.ClosedBy = &v
}

// GetClosedDate returns the ClosedDate field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetClosedDate() time.Time {
	if o == nil || IsNil(o.ClosedDate) {
		var ret time.Time
		return ret
	}
	return *o.ClosedDate
}

// GetClosedDateOk returns a tuple with the ClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetClosedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedDate) {
		return nil, false
	}
	return o.ClosedDate, true
}

// HasClosedDate returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasClosedDate() bool {
	if o != nil && !IsNil(o.ClosedDate) {
		return true
	}

	return false
}

// SetClosedDate gets a reference to the given time.Time and assigns it to the ClosedDate field.
func (o *ProcurementAdjustment) SetClosedDate(v time.Time) {
	o.ClosedDate = &v
}

// GetAdjustmentDetails returns the AdjustmentDetails field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetAdjustmentDetails() []AdjustmentDetail {
	if o == nil || IsNil(o.AdjustmentDetails) {
		var ret []AdjustmentDetail
		return ret
	}
	return o.AdjustmentDetails
}

// GetAdjustmentDetailsOk returns a tuple with the AdjustmentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetAdjustmentDetailsOk() ([]AdjustmentDetail, bool) {
	if o == nil || IsNil(o.AdjustmentDetails) {
		return nil, false
	}
	return o.AdjustmentDetails, true
}

// HasAdjustmentDetails returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasAdjustmentDetails() bool {
	if o != nil && !IsNil(o.AdjustmentDetails) {
		return true
	}

	return false
}

// SetAdjustmentDetails gets a reference to the given []AdjustmentDetail and assigns it to the AdjustmentDetails field.
func (o *ProcurementAdjustment) SetAdjustmentDetails(v []AdjustmentDetail) {
	o.AdjustmentDetails = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProcurementAdjustment) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcurementAdjustment) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProcurementAdjustment) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProcurementAdjustment) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ProcurementAdjustment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcurementAdjustment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["identifier"] = o.Identifier
	toSerialize["type"] = o.Type
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if !IsNil(o.ClosedBy) {
		toSerialize["closedBy"] = o.ClosedBy
	}
	if !IsNil(o.ClosedDate) {
		toSerialize["closedDate"] = o.ClosedDate
	}
	if !IsNil(o.AdjustmentDetails) {
		toSerialize["adjustmentDetails"] = o.AdjustmentDetails
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ProcurementAdjustment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcurementAdjustment := _ProcurementAdjustment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcurementAdjustment)

	if err != nil {
		return err
	}

	*o = ProcurementAdjustment(varProcurementAdjustment)

	return err
}

type NullableProcurementAdjustment struct {
	value *ProcurementAdjustment
	isSet bool
}

func (v NullableProcurementAdjustment) Get() *ProcurementAdjustment {
	return v.value
}

func (v *NullableProcurementAdjustment) Set(val *ProcurementAdjustment) {
	v.value = val
	v.isSet = true
}

func (v NullableProcurementAdjustment) IsSet() bool {
	return v.isSet
}

func (v *NullableProcurementAdjustment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcurementAdjustment(val *ProcurementAdjustment) *NullableProcurementAdjustment {
	return &NullableProcurementAdjustment{value: val, isSet: true}
}

func (v NullableProcurementAdjustment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcurementAdjustment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


