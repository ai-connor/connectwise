/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProductItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductItem{}

// ProductItem struct for ProductItem
type ProductItem struct {
	Id *int32 `json:"id,omitempty"`
	CatalogItem CatalogItemReference `json:"catalogItem"`
	//  Max length: 2000;
	Description *string `json:"description,omitempty"`
	SequenceNumber NullableFloat64 `json:"sequenceNumber,omitempty"`
	Quantity NullableFloat64 `json:"quantity,omitempty"`
	UnitOfMeasure *UnitOfMeasureReference `json:"unitOfMeasure,omitempty"`
	Price NullableFloat64 `json:"price,omitempty"`
	Cost NullableFloat64 `json:"cost,omitempty"`
	ExtPrice NullableFloat64 `json:"extPrice,omitempty"`
	ExtCost NullableFloat64 `json:"extCost,omitempty"`
	Discount NullableFloat64 `json:"discount,omitempty"`
	Margin NullableFloat64 `json:"margin,omitempty"`
	AgreementAmount NullableFloat64 `json:"agreementAmount,omitempty"`
	PriceMethod NullableString `json:"priceMethod,omitempty"`
	BillableOption NullableString `json:"billableOption"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	//  Required On Updates;
	LocationId NullableInt32 `json:"locationId,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	//  Required On Updates;
	BusinessUnitId NullableInt32 `json:"businessUnitId,omitempty"`
	BusinessUnit *BillingUnitReference `json:"businessUnit,omitempty"`
	Vendor *CompanyReference `json:"vendor,omitempty"`
	//  Max length: 50;
	VendorSku *string `json:"vendorSku,omitempty"`
	TaxableFlag NullableBool `json:"taxableFlag,omitempty"`
	DropshipFlag NullableBool `json:"dropshipFlag,omitempty"`
	SpecialOrderFlag NullableBool `json:"specialOrderFlag,omitempty"`
	PhaseProductFlag NullableBool `json:"phaseProductFlag,omitempty"`
	CancelledFlag NullableBool `json:"cancelledFlag,omitempty"`
	QuantityCancelled NullableFloat64 `json:"quantityCancelled,omitempty"`
	//  Max length: 100;
	CancelledReason *string `json:"cancelledReason,omitempty"`
	//  Max length: 6000; Required On Updates;
	CustomerDescription *string `json:"customerDescription,omitempty"`
	//  Max length: 1000;
	InternalNotes *string `json:"internalNotes,omitempty"`
	ProductSuppliedFlag NullableBool `json:"productSuppliedFlag,omitempty"`
	SubContractorShipToId NullableInt32 `json:"subContractorShipToId,omitempty"`
	SubContractorAmountLimit NullableFloat64 `json:"subContractorAmountLimit,omitempty"`
	Recurring *ProductRecurring `json:"recurring,omitempty"`
	Sla *SLAReference `json:"sla,omitempty"`
	EntityType *EntityTypeReference `json:"entityType,omitempty"`
	Ticket *TicketReference `json:"ticket,omitempty"`
	Project *ProjectReference `json:"project,omitempty"`
	Phase *ProjectPhaseReference `json:"phase,omitempty"`
	SalesOrder *SalesOrderReference `json:"salesOrder,omitempty"`
	Opportunity *OpportunityReference `json:"opportunity,omitempty"`
	Invoice *InvoiceReference `json:"invoice,omitempty"`
	WarehouseId NullableInt32 `json:"warehouseId,omitempty"`
	WarehouseIdObject *WarehouseReference `json:"warehouseIdObject,omitempty"`
	WarehouseBinId NullableInt32 `json:"warehouseBinId,omitempty"`
	WarehouseBinIdObject *WarehouseBinReference `json:"warehouseBinIdObject,omitempty"`
	CalculatedPriceFlag NullableBool `json:"calculatedPriceFlag,omitempty"`
	CalculatedCostFlag NullableBool `json:"calculatedCostFlag,omitempty"`
	ForecastDetailId NullableInt32 `json:"forecastDetailId,omitempty"`
	CancelledBy NullableInt32 `json:"cancelledBy,omitempty"`
	CancelledDate *time.Time `json:"cancelledDate,omitempty"`
	Warehouse *string `json:"warehouse,omitempty"`
	WarehouseBin *string `json:"warehouseBin,omitempty"`
	PurchaseDate *time.Time `json:"purchaseDate,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	IntegrationXRef *string `json:"integrationXRef,omitempty"`
	ListPrice NullableFloat64 `json:"listPrice,omitempty"`
	SerialNumberIds []int32 `json:"serialNumberIds,omitempty"`
	SerialNumbers []string `json:"serialNumbers,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	ForecastStatus *OpportunityStatusReference `json:"forecastStatus,omitempty"`
	ProductClass NullableString `json:"productClass,omitempty"`
	NeedToPurchaseFlag NullableBool `json:"needToPurchaseFlag,omitempty"`
	NeedToOrderQuantity NullableInt32 `json:"needToOrderQuantity,omitempty"`
	MinimumStockFlag NullableBool `json:"minimumStockFlag,omitempty"`
	//  Max length: 10;
	ShipSet *string `json:"shipSet,omitempty"`
	CalculatedPrice NullableFloat64 `json:"calculatedPrice,omitempty"`
	CalculatedCost NullableFloat64 `json:"calculatedCost,omitempty"`
	InvoiceGrouping *InvoiceGroupingReference `json:"invoiceGrouping,omitempty"`
	PoApprovedFlag NullableBool `json:"poApprovedFlag,omitempty"`
	Uom *string `json:"uom,omitempty"`
	AddComponentsFlag NullableBool `json:"addComponentsFlag,omitempty"`
	IgnorePricingSchedulesFlag NullableBool `json:"ignorePricingSchedulesFlag,omitempty"`
	AsioSubscriptionsID NullableString `json:"asioSubscriptionsID,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	BypassForecastUpdate NullableBool `json:"bypassForecastUpdate,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _ProductItem ProductItem

// NewProductItem instantiates a new ProductItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductItem(catalogItem CatalogItemReference, billableOption NullableString) *ProductItem {
	this := ProductItem{}
	this.CatalogItem = catalogItem
	this.BillableOption = billableOption
	return &this
}

// NewProductItemWithDefaults instantiates a new ProductItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductItemWithDefaults() *ProductItem {
	this := ProductItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductItem) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProductItem) SetId(v int32) {
	o.Id = &v
}

// GetCatalogItem returns the CatalogItem field value
func (o *ProductItem) GetCatalogItem() CatalogItemReference {
	if o == nil {
		var ret CatalogItemReference
		return ret
	}

	return o.CatalogItem
}

// GetCatalogItemOk returns a tuple with the CatalogItem field value
// and a boolean to check if the value has been set.
func (o *ProductItem) GetCatalogItemOk() (*CatalogItemReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogItem, true
}

// SetCatalogItem sets field value
func (o *ProductItem) SetCatalogItem(v CatalogItemReference) {
	o.CatalogItem = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductItem) SetDescription(v string) {
	o.Description = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetSequenceNumber() float64 {
	if o == nil || IsNil(o.SequenceNumber.Get()) {
		var ret float64
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetSequenceNumberOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ProductItem) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableFloat64 and assigns it to the SequenceNumber field.
func (o *ProductItem) SetSequenceNumber(v float64) {
	o.SequenceNumber.Set(&v)
}
// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *ProductItem) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *ProductItem) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret float64
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *ProductItem) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableFloat64 and assigns it to the Quantity field.
func (o *ProductItem) SetQuantity(v float64) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *ProductItem) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *ProductItem) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *ProductItem) GetUnitOfMeasure() UnitOfMeasureReference {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret UnitOfMeasureReference
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetUnitOfMeasureOk() (*UnitOfMeasureReference, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *ProductItem) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given UnitOfMeasureReference and assigns it to the UnitOfMeasure field.
func (o *ProductItem) SetUnitOfMeasure(v UnitOfMeasureReference) {
	o.UnitOfMeasure = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetPrice() float64 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float64
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ProductItem) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat64 and assigns it to the Price field.
func (o *ProductItem) SetPrice(v float64) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *ProductItem) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ProductItem) UnsetPrice() {
	o.Price.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCost() float64 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float64
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *ProductItem) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat64 and assigns it to the Cost field.
func (o *ProductItem) SetCost(v float64) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *ProductItem) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *ProductItem) UnsetCost() {
	o.Cost.Unset()
}

// GetExtPrice returns the ExtPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetExtPrice() float64 {
	if o == nil || IsNil(o.ExtPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtPrice.Get()
}

// GetExtPriceOk returns a tuple with the ExtPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetExtPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtPrice.Get(), o.ExtPrice.IsSet()
}

// HasExtPrice returns a boolean if a field has been set.
func (o *ProductItem) HasExtPrice() bool {
	if o != nil && o.ExtPrice.IsSet() {
		return true
	}

	return false
}

// SetExtPrice gets a reference to the given NullableFloat64 and assigns it to the ExtPrice field.
func (o *ProductItem) SetExtPrice(v float64) {
	o.ExtPrice.Set(&v)
}
// SetExtPriceNil sets the value for ExtPrice to be an explicit nil
func (o *ProductItem) SetExtPriceNil() {
	o.ExtPrice.Set(nil)
}

// UnsetExtPrice ensures that no value is present for ExtPrice, not even an explicit nil
func (o *ProductItem) UnsetExtPrice() {
	o.ExtPrice.Unset()
}

// GetExtCost returns the ExtCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetExtCost() float64 {
	if o == nil || IsNil(o.ExtCost.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtCost.Get()
}

// GetExtCostOk returns a tuple with the ExtCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetExtCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtCost.Get(), o.ExtCost.IsSet()
}

// HasExtCost returns a boolean if a field has been set.
func (o *ProductItem) HasExtCost() bool {
	if o != nil && o.ExtCost.IsSet() {
		return true
	}

	return false
}

// SetExtCost gets a reference to the given NullableFloat64 and assigns it to the ExtCost field.
func (o *ProductItem) SetExtCost(v float64) {
	o.ExtCost.Set(&v)
}
// SetExtCostNil sets the value for ExtCost to be an explicit nil
func (o *ProductItem) SetExtCostNil() {
	o.ExtCost.Set(nil)
}

// UnsetExtCost ensures that no value is present for ExtCost, not even an explicit nil
func (o *ProductItem) UnsetExtCost() {
	o.ExtCost.Unset()
}

// GetDiscount returns the Discount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetDiscount() float64 {
	if o == nil || IsNil(o.Discount.Get()) {
		var ret float64
		return ret
	}
	return *o.Discount.Get()
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetDiscountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Discount.Get(), o.Discount.IsSet()
}

// HasDiscount returns a boolean if a field has been set.
func (o *ProductItem) HasDiscount() bool {
	if o != nil && o.Discount.IsSet() {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given NullableFloat64 and assigns it to the Discount field.
func (o *ProductItem) SetDiscount(v float64) {
	o.Discount.Set(&v)
}
// SetDiscountNil sets the value for Discount to be an explicit nil
func (o *ProductItem) SetDiscountNil() {
	o.Discount.Set(nil)
}

// UnsetDiscount ensures that no value is present for Discount, not even an explicit nil
func (o *ProductItem) UnsetDiscount() {
	o.Discount.Unset()
}

// GetMargin returns the Margin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetMargin() float64 {
	if o == nil || IsNil(o.Margin.Get()) {
		var ret float64
		return ret
	}
	return *o.Margin.Get()
}

// GetMarginOk returns a tuple with the Margin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetMarginOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Margin.Get(), o.Margin.IsSet()
}

// HasMargin returns a boolean if a field has been set.
func (o *ProductItem) HasMargin() bool {
	if o != nil && o.Margin.IsSet() {
		return true
	}

	return false
}

// SetMargin gets a reference to the given NullableFloat64 and assigns it to the Margin field.
func (o *ProductItem) SetMargin(v float64) {
	o.Margin.Set(&v)
}
// SetMarginNil sets the value for Margin to be an explicit nil
func (o *ProductItem) SetMarginNil() {
	o.Margin.Set(nil)
}

// UnsetMargin ensures that no value is present for Margin, not even an explicit nil
func (o *ProductItem) UnsetMargin() {
	o.Margin.Unset()
}

// GetAgreementAmount returns the AgreementAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetAgreementAmount() float64 {
	if o == nil || IsNil(o.AgreementAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAmount.Get()
}

// GetAgreementAmountOk returns a tuple with the AgreementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetAgreementAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAmount.Get(), o.AgreementAmount.IsSet()
}

// HasAgreementAmount returns a boolean if a field has been set.
func (o *ProductItem) HasAgreementAmount() bool {
	if o != nil && o.AgreementAmount.IsSet() {
		return true
	}

	return false
}

// SetAgreementAmount gets a reference to the given NullableFloat64 and assigns it to the AgreementAmount field.
func (o *ProductItem) SetAgreementAmount(v float64) {
	o.AgreementAmount.Set(&v)
}
// SetAgreementAmountNil sets the value for AgreementAmount to be an explicit nil
func (o *ProductItem) SetAgreementAmountNil() {
	o.AgreementAmount.Set(nil)
}

// UnsetAgreementAmount ensures that no value is present for AgreementAmount, not even an explicit nil
func (o *ProductItem) UnsetAgreementAmount() {
	o.AgreementAmount.Unset()
}

// GetPriceMethod returns the PriceMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetPriceMethod() string {
	if o == nil || IsNil(o.PriceMethod.Get()) {
		var ret string
		return ret
	}
	return *o.PriceMethod.Get()
}

// GetPriceMethodOk returns a tuple with the PriceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetPriceMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceMethod.Get(), o.PriceMethod.IsSet()
}

// HasPriceMethod returns a boolean if a field has been set.
func (o *ProductItem) HasPriceMethod() bool {
	if o != nil && o.PriceMethod.IsSet() {
		return true
	}

	return false
}

// SetPriceMethod gets a reference to the given NullableString and assigns it to the PriceMethod field.
func (o *ProductItem) SetPriceMethod(v string) {
	o.PriceMethod.Set(&v)
}
// SetPriceMethodNil sets the value for PriceMethod to be an explicit nil
func (o *ProductItem) SetPriceMethodNil() {
	o.PriceMethod.Set(nil)
}

// UnsetPriceMethod ensures that no value is present for PriceMethod, not even an explicit nil
func (o *ProductItem) UnsetPriceMethod() {
	o.PriceMethod.Unset()
}

// GetBillableOption returns the BillableOption field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProductItem) GetBillableOption() string {
	if o == nil || o.BillableOption.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillableOption.Get()
}

// GetBillableOptionOk returns a tuple with the BillableOption field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetBillableOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableOption.Get(), o.BillableOption.IsSet()
}

// SetBillableOption sets field value
func (o *ProductItem) SetBillableOption(v string) {
	o.BillableOption.Set(&v)
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *ProductItem) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *ProductItem) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *ProductItem) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *ProductItem) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *ProductItem) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *ProductItem) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *ProductItem) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ProductItem) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ProductItem) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *ProductItem) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *ProductItem) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *ProductItem) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}
// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *ProductItem) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *ProductItem) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetBusinessUnit returns the BusinessUnit field value if set, zero value otherwise.
func (o *ProductItem) GetBusinessUnit() BillingUnitReference {
	if o == nil || IsNil(o.BusinessUnit) {
		var ret BillingUnitReference
		return ret
	}
	return *o.BusinessUnit
}

// GetBusinessUnitOk returns a tuple with the BusinessUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetBusinessUnitOk() (*BillingUnitReference, bool) {
	if o == nil || IsNil(o.BusinessUnit) {
		return nil, false
	}
	return o.BusinessUnit, true
}

// HasBusinessUnit returns a boolean if a field has been set.
func (o *ProductItem) HasBusinessUnit() bool {
	if o != nil && !IsNil(o.BusinessUnit) {
		return true
	}

	return false
}

// SetBusinessUnit gets a reference to the given BillingUnitReference and assigns it to the BusinessUnit field.
func (o *ProductItem) SetBusinessUnit(v BillingUnitReference) {
	o.BusinessUnit = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *ProductItem) GetVendor() CompanyReference {
	if o == nil || IsNil(o.Vendor) {
		var ret CompanyReference
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetVendorOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *ProductItem) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given CompanyReference and assigns it to the Vendor field.
func (o *ProductItem) SetVendor(v CompanyReference) {
	o.Vendor = &v
}

// GetVendorSku returns the VendorSku field value if set, zero value otherwise.
func (o *ProductItem) GetVendorSku() string {
	if o == nil || IsNil(o.VendorSku) {
		var ret string
		return ret
	}
	return *o.VendorSku
}

// GetVendorSkuOk returns a tuple with the VendorSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetVendorSkuOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSku) {
		return nil, false
	}
	return o.VendorSku, true
}

// HasVendorSku returns a boolean if a field has been set.
func (o *ProductItem) HasVendorSku() bool {
	if o != nil && !IsNil(o.VendorSku) {
		return true
	}

	return false
}

// SetVendorSku gets a reference to the given string and assigns it to the VendorSku field.
func (o *ProductItem) SetVendorSku(v string) {
	o.VendorSku = &v
}

// GetTaxableFlag returns the TaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetTaxableFlag() bool {
	if o == nil || IsNil(o.TaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxableFlag.Get()
}

// GetTaxableFlagOk returns a tuple with the TaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxableFlag.Get(), o.TaxableFlag.IsSet()
}

// HasTaxableFlag returns a boolean if a field has been set.
func (o *ProductItem) HasTaxableFlag() bool {
	if o != nil && o.TaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxableFlag gets a reference to the given NullableBool and assigns it to the TaxableFlag field.
func (o *ProductItem) SetTaxableFlag(v bool) {
	o.TaxableFlag.Set(&v)
}
// SetTaxableFlagNil sets the value for TaxableFlag to be an explicit nil
func (o *ProductItem) SetTaxableFlagNil() {
	o.TaxableFlag.Set(nil)
}

// UnsetTaxableFlag ensures that no value is present for TaxableFlag, not even an explicit nil
func (o *ProductItem) UnsetTaxableFlag() {
	o.TaxableFlag.Unset()
}

// GetDropshipFlag returns the DropshipFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetDropshipFlag() bool {
	if o == nil || IsNil(o.DropshipFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropshipFlag.Get()
}

// GetDropshipFlagOk returns a tuple with the DropshipFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetDropshipFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropshipFlag.Get(), o.DropshipFlag.IsSet()
}

// HasDropshipFlag returns a boolean if a field has been set.
func (o *ProductItem) HasDropshipFlag() bool {
	if o != nil && o.DropshipFlag.IsSet() {
		return true
	}

	return false
}

// SetDropshipFlag gets a reference to the given NullableBool and assigns it to the DropshipFlag field.
func (o *ProductItem) SetDropshipFlag(v bool) {
	o.DropshipFlag.Set(&v)
}
// SetDropshipFlagNil sets the value for DropshipFlag to be an explicit nil
func (o *ProductItem) SetDropshipFlagNil() {
	o.DropshipFlag.Set(nil)
}

// UnsetDropshipFlag ensures that no value is present for DropshipFlag, not even an explicit nil
func (o *ProductItem) UnsetDropshipFlag() {
	o.DropshipFlag.Unset()
}

// GetSpecialOrderFlag returns the SpecialOrderFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetSpecialOrderFlag() bool {
	if o == nil || IsNil(o.SpecialOrderFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SpecialOrderFlag.Get()
}

// GetSpecialOrderFlagOk returns a tuple with the SpecialOrderFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetSpecialOrderFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecialOrderFlag.Get(), o.SpecialOrderFlag.IsSet()
}

// HasSpecialOrderFlag returns a boolean if a field has been set.
func (o *ProductItem) HasSpecialOrderFlag() bool {
	if o != nil && o.SpecialOrderFlag.IsSet() {
		return true
	}

	return false
}

// SetSpecialOrderFlag gets a reference to the given NullableBool and assigns it to the SpecialOrderFlag field.
func (o *ProductItem) SetSpecialOrderFlag(v bool) {
	o.SpecialOrderFlag.Set(&v)
}
// SetSpecialOrderFlagNil sets the value for SpecialOrderFlag to be an explicit nil
func (o *ProductItem) SetSpecialOrderFlagNil() {
	o.SpecialOrderFlag.Set(nil)
}

// UnsetSpecialOrderFlag ensures that no value is present for SpecialOrderFlag, not even an explicit nil
func (o *ProductItem) UnsetSpecialOrderFlag() {
	o.SpecialOrderFlag.Unset()
}

// GetPhaseProductFlag returns the PhaseProductFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetPhaseProductFlag() bool {
	if o == nil || IsNil(o.PhaseProductFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PhaseProductFlag.Get()
}

// GetPhaseProductFlagOk returns a tuple with the PhaseProductFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetPhaseProductFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhaseProductFlag.Get(), o.PhaseProductFlag.IsSet()
}

// HasPhaseProductFlag returns a boolean if a field has been set.
func (o *ProductItem) HasPhaseProductFlag() bool {
	if o != nil && o.PhaseProductFlag.IsSet() {
		return true
	}

	return false
}

// SetPhaseProductFlag gets a reference to the given NullableBool and assigns it to the PhaseProductFlag field.
func (o *ProductItem) SetPhaseProductFlag(v bool) {
	o.PhaseProductFlag.Set(&v)
}
// SetPhaseProductFlagNil sets the value for PhaseProductFlag to be an explicit nil
func (o *ProductItem) SetPhaseProductFlagNil() {
	o.PhaseProductFlag.Set(nil)
}

// UnsetPhaseProductFlag ensures that no value is present for PhaseProductFlag, not even an explicit nil
func (o *ProductItem) UnsetPhaseProductFlag() {
	o.PhaseProductFlag.Unset()
}

// GetCancelledFlag returns the CancelledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCancelledFlag() bool {
	if o == nil || IsNil(o.CancelledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CancelledFlag.Get()
}

// GetCancelledFlagOk returns a tuple with the CancelledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCancelledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelledFlag.Get(), o.CancelledFlag.IsSet()
}

// HasCancelledFlag returns a boolean if a field has been set.
func (o *ProductItem) HasCancelledFlag() bool {
	if o != nil && o.CancelledFlag.IsSet() {
		return true
	}

	return false
}

// SetCancelledFlag gets a reference to the given NullableBool and assigns it to the CancelledFlag field.
func (o *ProductItem) SetCancelledFlag(v bool) {
	o.CancelledFlag.Set(&v)
}
// SetCancelledFlagNil sets the value for CancelledFlag to be an explicit nil
func (o *ProductItem) SetCancelledFlagNil() {
	o.CancelledFlag.Set(nil)
}

// UnsetCancelledFlag ensures that no value is present for CancelledFlag, not even an explicit nil
func (o *ProductItem) UnsetCancelledFlag() {
	o.CancelledFlag.Unset()
}

// GetQuantityCancelled returns the QuantityCancelled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetQuantityCancelled() float64 {
	if o == nil || IsNil(o.QuantityCancelled.Get()) {
		var ret float64
		return ret
	}
	return *o.QuantityCancelled.Get()
}

// GetQuantityCancelledOk returns a tuple with the QuantityCancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetQuantityCancelledOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityCancelled.Get(), o.QuantityCancelled.IsSet()
}

// HasQuantityCancelled returns a boolean if a field has been set.
func (o *ProductItem) HasQuantityCancelled() bool {
	if o != nil && o.QuantityCancelled.IsSet() {
		return true
	}

	return false
}

// SetQuantityCancelled gets a reference to the given NullableFloat64 and assigns it to the QuantityCancelled field.
func (o *ProductItem) SetQuantityCancelled(v float64) {
	o.QuantityCancelled.Set(&v)
}
// SetQuantityCancelledNil sets the value for QuantityCancelled to be an explicit nil
func (o *ProductItem) SetQuantityCancelledNil() {
	o.QuantityCancelled.Set(nil)
}

// UnsetQuantityCancelled ensures that no value is present for QuantityCancelled, not even an explicit nil
func (o *ProductItem) UnsetQuantityCancelled() {
	o.QuantityCancelled.Unset()
}

// GetCancelledReason returns the CancelledReason field value if set, zero value otherwise.
func (o *ProductItem) GetCancelledReason() string {
	if o == nil || IsNil(o.CancelledReason) {
		var ret string
		return ret
	}
	return *o.CancelledReason
}

// GetCancelledReasonOk returns a tuple with the CancelledReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetCancelledReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CancelledReason) {
		return nil, false
	}
	return o.CancelledReason, true
}

// HasCancelledReason returns a boolean if a field has been set.
func (o *ProductItem) HasCancelledReason() bool {
	if o != nil && !IsNil(o.CancelledReason) {
		return true
	}

	return false
}

// SetCancelledReason gets a reference to the given string and assigns it to the CancelledReason field.
func (o *ProductItem) SetCancelledReason(v string) {
	o.CancelledReason = &v
}

// GetCustomerDescription returns the CustomerDescription field value if set, zero value otherwise.
func (o *ProductItem) GetCustomerDescription() string {
	if o == nil || IsNil(o.CustomerDescription) {
		var ret string
		return ret
	}
	return *o.CustomerDescription
}

// GetCustomerDescriptionOk returns a tuple with the CustomerDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetCustomerDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerDescription) {
		return nil, false
	}
	return o.CustomerDescription, true
}

// HasCustomerDescription returns a boolean if a field has been set.
func (o *ProductItem) HasCustomerDescription() bool {
	if o != nil && !IsNil(o.CustomerDescription) {
		return true
	}

	return false
}

// SetCustomerDescription gets a reference to the given string and assigns it to the CustomerDescription field.
func (o *ProductItem) SetCustomerDescription(v string) {
	o.CustomerDescription = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *ProductItem) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *ProductItem) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *ProductItem) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetProductSuppliedFlag returns the ProductSuppliedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetProductSuppliedFlag() bool {
	if o == nil || IsNil(o.ProductSuppliedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProductSuppliedFlag.Get()
}

// GetProductSuppliedFlagOk returns a tuple with the ProductSuppliedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetProductSuppliedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductSuppliedFlag.Get(), o.ProductSuppliedFlag.IsSet()
}

// HasProductSuppliedFlag returns a boolean if a field has been set.
func (o *ProductItem) HasProductSuppliedFlag() bool {
	if o != nil && o.ProductSuppliedFlag.IsSet() {
		return true
	}

	return false
}

// SetProductSuppliedFlag gets a reference to the given NullableBool and assigns it to the ProductSuppliedFlag field.
func (o *ProductItem) SetProductSuppliedFlag(v bool) {
	o.ProductSuppliedFlag.Set(&v)
}
// SetProductSuppliedFlagNil sets the value for ProductSuppliedFlag to be an explicit nil
func (o *ProductItem) SetProductSuppliedFlagNil() {
	o.ProductSuppliedFlag.Set(nil)
}

// UnsetProductSuppliedFlag ensures that no value is present for ProductSuppliedFlag, not even an explicit nil
func (o *ProductItem) UnsetProductSuppliedFlag() {
	o.ProductSuppliedFlag.Unset()
}

// GetSubContractorShipToId returns the SubContractorShipToId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetSubContractorShipToId() int32 {
	if o == nil || IsNil(o.SubContractorShipToId.Get()) {
		var ret int32
		return ret
	}
	return *o.SubContractorShipToId.Get()
}

// GetSubContractorShipToIdOk returns a tuple with the SubContractorShipToId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetSubContractorShipToIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubContractorShipToId.Get(), o.SubContractorShipToId.IsSet()
}

// HasSubContractorShipToId returns a boolean if a field has been set.
func (o *ProductItem) HasSubContractorShipToId() bool {
	if o != nil && o.SubContractorShipToId.IsSet() {
		return true
	}

	return false
}

// SetSubContractorShipToId gets a reference to the given NullableInt32 and assigns it to the SubContractorShipToId field.
func (o *ProductItem) SetSubContractorShipToId(v int32) {
	o.SubContractorShipToId.Set(&v)
}
// SetSubContractorShipToIdNil sets the value for SubContractorShipToId to be an explicit nil
func (o *ProductItem) SetSubContractorShipToIdNil() {
	o.SubContractorShipToId.Set(nil)
}

// UnsetSubContractorShipToId ensures that no value is present for SubContractorShipToId, not even an explicit nil
func (o *ProductItem) UnsetSubContractorShipToId() {
	o.SubContractorShipToId.Unset()
}

// GetSubContractorAmountLimit returns the SubContractorAmountLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetSubContractorAmountLimit() float64 {
	if o == nil || IsNil(o.SubContractorAmountLimit.Get()) {
		var ret float64
		return ret
	}
	return *o.SubContractorAmountLimit.Get()
}

// GetSubContractorAmountLimitOk returns a tuple with the SubContractorAmountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetSubContractorAmountLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubContractorAmountLimit.Get(), o.SubContractorAmountLimit.IsSet()
}

// HasSubContractorAmountLimit returns a boolean if a field has been set.
func (o *ProductItem) HasSubContractorAmountLimit() bool {
	if o != nil && o.SubContractorAmountLimit.IsSet() {
		return true
	}

	return false
}

// SetSubContractorAmountLimit gets a reference to the given NullableFloat64 and assigns it to the SubContractorAmountLimit field.
func (o *ProductItem) SetSubContractorAmountLimit(v float64) {
	o.SubContractorAmountLimit.Set(&v)
}
// SetSubContractorAmountLimitNil sets the value for SubContractorAmountLimit to be an explicit nil
func (o *ProductItem) SetSubContractorAmountLimitNil() {
	o.SubContractorAmountLimit.Set(nil)
}

// UnsetSubContractorAmountLimit ensures that no value is present for SubContractorAmountLimit, not even an explicit nil
func (o *ProductItem) UnsetSubContractorAmountLimit() {
	o.SubContractorAmountLimit.Unset()
}

// GetRecurring returns the Recurring field value if set, zero value otherwise.
func (o *ProductItem) GetRecurring() ProductRecurring {
	if o == nil || IsNil(o.Recurring) {
		var ret ProductRecurring
		return ret
	}
	return *o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetRecurringOk() (*ProductRecurring, bool) {
	if o == nil || IsNil(o.Recurring) {
		return nil, false
	}
	return o.Recurring, true
}

// HasRecurring returns a boolean if a field has been set.
func (o *ProductItem) HasRecurring() bool {
	if o != nil && !IsNil(o.Recurring) {
		return true
	}

	return false
}

// SetRecurring gets a reference to the given ProductRecurring and assigns it to the Recurring field.
func (o *ProductItem) SetRecurring(v ProductRecurring) {
	o.Recurring = &v
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *ProductItem) GetSla() SLAReference {
	if o == nil || IsNil(o.Sla) {
		var ret SLAReference
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetSlaOk() (*SLAReference, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *ProductItem) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLAReference and assigns it to the Sla field.
func (o *ProductItem) SetSla(v SLAReference) {
	o.Sla = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *ProductItem) GetEntityType() EntityTypeReference {
	if o == nil || IsNil(o.EntityType) {
		var ret EntityTypeReference
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetEntityTypeOk() (*EntityTypeReference, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *ProductItem) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityTypeReference and assigns it to the EntityType field.
func (o *ProductItem) SetEntityType(v EntityTypeReference) {
	o.EntityType = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *ProductItem) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *ProductItem) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *ProductItem) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProductItem) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProductItem) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *ProductItem) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *ProductItem) GetPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.Phase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *ProductItem) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given ProjectPhaseReference and assigns it to the Phase field.
func (o *ProductItem) SetPhase(v ProjectPhaseReference) {
	o.Phase = &v
}

// GetSalesOrder returns the SalesOrder field value if set, zero value otherwise.
func (o *ProductItem) GetSalesOrder() SalesOrderReference {
	if o == nil || IsNil(o.SalesOrder) {
		var ret SalesOrderReference
		return ret
	}
	return *o.SalesOrder
}

// GetSalesOrderOk returns a tuple with the SalesOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetSalesOrderOk() (*SalesOrderReference, bool) {
	if o == nil || IsNil(o.SalesOrder) {
		return nil, false
	}
	return o.SalesOrder, true
}

// HasSalesOrder returns a boolean if a field has been set.
func (o *ProductItem) HasSalesOrder() bool {
	if o != nil && !IsNil(o.SalesOrder) {
		return true
	}

	return false
}

// SetSalesOrder gets a reference to the given SalesOrderReference and assigns it to the SalesOrder field.
func (o *ProductItem) SetSalesOrder(v SalesOrderReference) {
	o.SalesOrder = &v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *ProductItem) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *ProductItem) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *ProductItem) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *ProductItem) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *ProductItem) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *ProductItem) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetWarehouseId returns the WarehouseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetWarehouseId() int32 {
	if o == nil || IsNil(o.WarehouseId.Get()) {
		var ret int32
		return ret
	}
	return *o.WarehouseId.Get()
}

// GetWarehouseIdOk returns a tuple with the WarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetWarehouseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WarehouseId.Get(), o.WarehouseId.IsSet()
}

// HasWarehouseId returns a boolean if a field has been set.
func (o *ProductItem) HasWarehouseId() bool {
	if o != nil && o.WarehouseId.IsSet() {
		return true
	}

	return false
}

// SetWarehouseId gets a reference to the given NullableInt32 and assigns it to the WarehouseId field.
func (o *ProductItem) SetWarehouseId(v int32) {
	o.WarehouseId.Set(&v)
}
// SetWarehouseIdNil sets the value for WarehouseId to be an explicit nil
func (o *ProductItem) SetWarehouseIdNil() {
	o.WarehouseId.Set(nil)
}

// UnsetWarehouseId ensures that no value is present for WarehouseId, not even an explicit nil
func (o *ProductItem) UnsetWarehouseId() {
	o.WarehouseId.Unset()
}

// GetWarehouseIdObject returns the WarehouseIdObject field value if set, zero value otherwise.
func (o *ProductItem) GetWarehouseIdObject() WarehouseReference {
	if o == nil || IsNil(o.WarehouseIdObject) {
		var ret WarehouseReference
		return ret
	}
	return *o.WarehouseIdObject
}

// GetWarehouseIdObjectOk returns a tuple with the WarehouseIdObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetWarehouseIdObjectOk() (*WarehouseReference, bool) {
	if o == nil || IsNil(o.WarehouseIdObject) {
		return nil, false
	}
	return o.WarehouseIdObject, true
}

// HasWarehouseIdObject returns a boolean if a field has been set.
func (o *ProductItem) HasWarehouseIdObject() bool {
	if o != nil && !IsNil(o.WarehouseIdObject) {
		return true
	}

	return false
}

// SetWarehouseIdObject gets a reference to the given WarehouseReference and assigns it to the WarehouseIdObject field.
func (o *ProductItem) SetWarehouseIdObject(v WarehouseReference) {
	o.WarehouseIdObject = &v
}

// GetWarehouseBinId returns the WarehouseBinId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetWarehouseBinId() int32 {
	if o == nil || IsNil(o.WarehouseBinId.Get()) {
		var ret int32
		return ret
	}
	return *o.WarehouseBinId.Get()
}

// GetWarehouseBinIdOk returns a tuple with the WarehouseBinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetWarehouseBinIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WarehouseBinId.Get(), o.WarehouseBinId.IsSet()
}

// HasWarehouseBinId returns a boolean if a field has been set.
func (o *ProductItem) HasWarehouseBinId() bool {
	if o != nil && o.WarehouseBinId.IsSet() {
		return true
	}

	return false
}

// SetWarehouseBinId gets a reference to the given NullableInt32 and assigns it to the WarehouseBinId field.
func (o *ProductItem) SetWarehouseBinId(v int32) {
	o.WarehouseBinId.Set(&v)
}
// SetWarehouseBinIdNil sets the value for WarehouseBinId to be an explicit nil
func (o *ProductItem) SetWarehouseBinIdNil() {
	o.WarehouseBinId.Set(nil)
}

// UnsetWarehouseBinId ensures that no value is present for WarehouseBinId, not even an explicit nil
func (o *ProductItem) UnsetWarehouseBinId() {
	o.WarehouseBinId.Unset()
}

// GetWarehouseBinIdObject returns the WarehouseBinIdObject field value if set, zero value otherwise.
func (o *ProductItem) GetWarehouseBinIdObject() WarehouseBinReference {
	if o == nil || IsNil(o.WarehouseBinIdObject) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.WarehouseBinIdObject
}

// GetWarehouseBinIdObjectOk returns a tuple with the WarehouseBinIdObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetWarehouseBinIdObjectOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.WarehouseBinIdObject) {
		return nil, false
	}
	return o.WarehouseBinIdObject, true
}

// HasWarehouseBinIdObject returns a boolean if a field has been set.
func (o *ProductItem) HasWarehouseBinIdObject() bool {
	if o != nil && !IsNil(o.WarehouseBinIdObject) {
		return true
	}

	return false
}

// SetWarehouseBinIdObject gets a reference to the given WarehouseBinReference and assigns it to the WarehouseBinIdObject field.
func (o *ProductItem) SetWarehouseBinIdObject(v WarehouseBinReference) {
	o.WarehouseBinIdObject = &v
}

// GetCalculatedPriceFlag returns the CalculatedPriceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCalculatedPriceFlag() bool {
	if o == nil || IsNil(o.CalculatedPriceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CalculatedPriceFlag.Get()
}

// GetCalculatedPriceFlagOk returns a tuple with the CalculatedPriceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCalculatedPriceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedPriceFlag.Get(), o.CalculatedPriceFlag.IsSet()
}

// HasCalculatedPriceFlag returns a boolean if a field has been set.
func (o *ProductItem) HasCalculatedPriceFlag() bool {
	if o != nil && o.CalculatedPriceFlag.IsSet() {
		return true
	}

	return false
}

// SetCalculatedPriceFlag gets a reference to the given NullableBool and assigns it to the CalculatedPriceFlag field.
func (o *ProductItem) SetCalculatedPriceFlag(v bool) {
	o.CalculatedPriceFlag.Set(&v)
}
// SetCalculatedPriceFlagNil sets the value for CalculatedPriceFlag to be an explicit nil
func (o *ProductItem) SetCalculatedPriceFlagNil() {
	o.CalculatedPriceFlag.Set(nil)
}

// UnsetCalculatedPriceFlag ensures that no value is present for CalculatedPriceFlag, not even an explicit nil
func (o *ProductItem) UnsetCalculatedPriceFlag() {
	o.CalculatedPriceFlag.Unset()
}

// GetCalculatedCostFlag returns the CalculatedCostFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCalculatedCostFlag() bool {
	if o == nil || IsNil(o.CalculatedCostFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CalculatedCostFlag.Get()
}

// GetCalculatedCostFlagOk returns a tuple with the CalculatedCostFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCalculatedCostFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedCostFlag.Get(), o.CalculatedCostFlag.IsSet()
}

// HasCalculatedCostFlag returns a boolean if a field has been set.
func (o *ProductItem) HasCalculatedCostFlag() bool {
	if o != nil && o.CalculatedCostFlag.IsSet() {
		return true
	}

	return false
}

// SetCalculatedCostFlag gets a reference to the given NullableBool and assigns it to the CalculatedCostFlag field.
func (o *ProductItem) SetCalculatedCostFlag(v bool) {
	o.CalculatedCostFlag.Set(&v)
}
// SetCalculatedCostFlagNil sets the value for CalculatedCostFlag to be an explicit nil
func (o *ProductItem) SetCalculatedCostFlagNil() {
	o.CalculatedCostFlag.Set(nil)
}

// UnsetCalculatedCostFlag ensures that no value is present for CalculatedCostFlag, not even an explicit nil
func (o *ProductItem) UnsetCalculatedCostFlag() {
	o.CalculatedCostFlag.Unset()
}

// GetForecastDetailId returns the ForecastDetailId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetForecastDetailId() int32 {
	if o == nil || IsNil(o.ForecastDetailId.Get()) {
		var ret int32
		return ret
	}
	return *o.ForecastDetailId.Get()
}

// GetForecastDetailIdOk returns a tuple with the ForecastDetailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetForecastDetailIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForecastDetailId.Get(), o.ForecastDetailId.IsSet()
}

// HasForecastDetailId returns a boolean if a field has been set.
func (o *ProductItem) HasForecastDetailId() bool {
	if o != nil && o.ForecastDetailId.IsSet() {
		return true
	}

	return false
}

// SetForecastDetailId gets a reference to the given NullableInt32 and assigns it to the ForecastDetailId field.
func (o *ProductItem) SetForecastDetailId(v int32) {
	o.ForecastDetailId.Set(&v)
}
// SetForecastDetailIdNil sets the value for ForecastDetailId to be an explicit nil
func (o *ProductItem) SetForecastDetailIdNil() {
	o.ForecastDetailId.Set(nil)
}

// UnsetForecastDetailId ensures that no value is present for ForecastDetailId, not even an explicit nil
func (o *ProductItem) UnsetForecastDetailId() {
	o.ForecastDetailId.Unset()
}

// GetCancelledBy returns the CancelledBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCancelledBy() int32 {
	if o == nil || IsNil(o.CancelledBy.Get()) {
		var ret int32
		return ret
	}
	return *o.CancelledBy.Get()
}

// GetCancelledByOk returns a tuple with the CancelledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCancelledByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelledBy.Get(), o.CancelledBy.IsSet()
}

// HasCancelledBy returns a boolean if a field has been set.
func (o *ProductItem) HasCancelledBy() bool {
	if o != nil && o.CancelledBy.IsSet() {
		return true
	}

	return false
}

// SetCancelledBy gets a reference to the given NullableInt32 and assigns it to the CancelledBy field.
func (o *ProductItem) SetCancelledBy(v int32) {
	o.CancelledBy.Set(&v)
}
// SetCancelledByNil sets the value for CancelledBy to be an explicit nil
func (o *ProductItem) SetCancelledByNil() {
	o.CancelledBy.Set(nil)
}

// UnsetCancelledBy ensures that no value is present for CancelledBy, not even an explicit nil
func (o *ProductItem) UnsetCancelledBy() {
	o.CancelledBy.Unset()
}

// GetCancelledDate returns the CancelledDate field value if set, zero value otherwise.
func (o *ProductItem) GetCancelledDate() time.Time {
	if o == nil || IsNil(o.CancelledDate) {
		var ret time.Time
		return ret
	}
	return *o.CancelledDate
}

// GetCancelledDateOk returns a tuple with the CancelledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetCancelledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelledDate) {
		return nil, false
	}
	return o.CancelledDate, true
}

// HasCancelledDate returns a boolean if a field has been set.
func (o *ProductItem) HasCancelledDate() bool {
	if o != nil && !IsNil(o.CancelledDate) {
		return true
	}

	return false
}

// SetCancelledDate gets a reference to the given time.Time and assigns it to the CancelledDate field.
func (o *ProductItem) SetCancelledDate(v time.Time) {
	o.CancelledDate = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *ProductItem) GetWarehouse() string {
	if o == nil || IsNil(o.Warehouse) {
		var ret string
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetWarehouseOk() (*string, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *ProductItem) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *ProductItem) SetWarehouse(v string) {
	o.Warehouse = &v
}

// GetWarehouseBin returns the WarehouseBin field value if set, zero value otherwise.
func (o *ProductItem) GetWarehouseBin() string {
	if o == nil || IsNil(o.WarehouseBin) {
		var ret string
		return ret
	}
	return *o.WarehouseBin
}

// GetWarehouseBinOk returns a tuple with the WarehouseBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetWarehouseBinOk() (*string, bool) {
	if o == nil || IsNil(o.WarehouseBin) {
		return nil, false
	}
	return o.WarehouseBin, true
}

// HasWarehouseBin returns a boolean if a field has been set.
func (o *ProductItem) HasWarehouseBin() bool {
	if o != nil && !IsNil(o.WarehouseBin) {
		return true
	}

	return false
}

// SetWarehouseBin gets a reference to the given string and assigns it to the WarehouseBin field.
func (o *ProductItem) SetWarehouseBin(v string) {
	o.WarehouseBin = &v
}

// GetPurchaseDate returns the PurchaseDate field value if set, zero value otherwise.
func (o *ProductItem) GetPurchaseDate() time.Time {
	if o == nil || IsNil(o.PurchaseDate) {
		var ret time.Time
		return ret
	}
	return *o.PurchaseDate
}

// GetPurchaseDateOk returns a tuple with the PurchaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetPurchaseDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PurchaseDate) {
		return nil, false
	}
	return o.PurchaseDate, true
}

// HasPurchaseDate returns a boolean if a field has been set.
func (o *ProductItem) HasPurchaseDate() bool {
	if o != nil && !IsNil(o.PurchaseDate) {
		return true
	}

	return false
}

// SetPurchaseDate gets a reference to the given time.Time and assigns it to the PurchaseDate field.
func (o *ProductItem) SetPurchaseDate(v time.Time) {
	o.PurchaseDate = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *ProductItem) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *ProductItem) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *ProductItem) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetIntegrationXRef returns the IntegrationXRef field value if set, zero value otherwise.
func (o *ProductItem) GetIntegrationXRef() string {
	if o == nil || IsNil(o.IntegrationXRef) {
		var ret string
		return ret
	}
	return *o.IntegrationXRef
}

// GetIntegrationXRefOk returns a tuple with the IntegrationXRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetIntegrationXRefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXRef) {
		return nil, false
	}
	return o.IntegrationXRef, true
}

// HasIntegrationXRef returns a boolean if a field has been set.
func (o *ProductItem) HasIntegrationXRef() bool {
	if o != nil && !IsNil(o.IntegrationXRef) {
		return true
	}

	return false
}

// SetIntegrationXRef gets a reference to the given string and assigns it to the IntegrationXRef field.
func (o *ProductItem) SetIntegrationXRef(v string) {
	o.IntegrationXRef = &v
}

// GetListPrice returns the ListPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetListPrice() float64 {
	if o == nil || IsNil(o.ListPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.ListPrice.Get()
}

// GetListPriceOk returns a tuple with the ListPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetListPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListPrice.Get(), o.ListPrice.IsSet()
}

// HasListPrice returns a boolean if a field has been set.
func (o *ProductItem) HasListPrice() bool {
	if o != nil && o.ListPrice.IsSet() {
		return true
	}

	return false
}

// SetListPrice gets a reference to the given NullableFloat64 and assigns it to the ListPrice field.
func (o *ProductItem) SetListPrice(v float64) {
	o.ListPrice.Set(&v)
}
// SetListPriceNil sets the value for ListPrice to be an explicit nil
func (o *ProductItem) SetListPriceNil() {
	o.ListPrice.Set(nil)
}

// UnsetListPrice ensures that no value is present for ListPrice, not even an explicit nil
func (o *ProductItem) UnsetListPrice() {
	o.ListPrice.Unset()
}

// GetSerialNumberIds returns the SerialNumberIds field value if set, zero value otherwise.
func (o *ProductItem) GetSerialNumberIds() []int32 {
	if o == nil || IsNil(o.SerialNumberIds) {
		var ret []int32
		return ret
	}
	return o.SerialNumberIds
}

// GetSerialNumberIdsOk returns a tuple with the SerialNumberIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetSerialNumberIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.SerialNumberIds) {
		return nil, false
	}
	return o.SerialNumberIds, true
}

// HasSerialNumberIds returns a boolean if a field has been set.
func (o *ProductItem) HasSerialNumberIds() bool {
	if o != nil && !IsNil(o.SerialNumberIds) {
		return true
	}

	return false
}

// SetSerialNumberIds gets a reference to the given []int32 and assigns it to the SerialNumberIds field.
func (o *ProductItem) SetSerialNumberIds(v []int32) {
	o.SerialNumberIds = v
}

// GetSerialNumbers returns the SerialNumbers field value if set, zero value otherwise.
func (o *ProductItem) GetSerialNumbers() []string {
	if o == nil || IsNil(o.SerialNumbers) {
		var ret []string
		return ret
	}
	return o.SerialNumbers
}

// GetSerialNumbersOk returns a tuple with the SerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetSerialNumbersOk() ([]string, bool) {
	if o == nil || IsNil(o.SerialNumbers) {
		return nil, false
	}
	return o.SerialNumbers, true
}

// HasSerialNumbers returns a boolean if a field has been set.
func (o *ProductItem) HasSerialNumbers() bool {
	if o != nil && !IsNil(o.SerialNumbers) {
		return true
	}

	return false
}

// SetSerialNumbers gets a reference to the given []string and assigns it to the SerialNumbers field.
func (o *ProductItem) SetSerialNumbers(v []string) {
	o.SerialNumbers = v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ProductItem) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ProductItem) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *ProductItem) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetForecastStatus returns the ForecastStatus field value if set, zero value otherwise.
func (o *ProductItem) GetForecastStatus() OpportunityStatusReference {
	if o == nil || IsNil(o.ForecastStatus) {
		var ret OpportunityStatusReference
		return ret
	}
	return *o.ForecastStatus
}

// GetForecastStatusOk returns a tuple with the ForecastStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetForecastStatusOk() (*OpportunityStatusReference, bool) {
	if o == nil || IsNil(o.ForecastStatus) {
		return nil, false
	}
	return o.ForecastStatus, true
}

// HasForecastStatus returns a boolean if a field has been set.
func (o *ProductItem) HasForecastStatus() bool {
	if o != nil && !IsNil(o.ForecastStatus) {
		return true
	}

	return false
}

// SetForecastStatus gets a reference to the given OpportunityStatusReference and assigns it to the ForecastStatus field.
func (o *ProductItem) SetForecastStatus(v OpportunityStatusReference) {
	o.ForecastStatus = &v
}

// GetProductClass returns the ProductClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetProductClass() string {
	if o == nil || IsNil(o.ProductClass.Get()) {
		var ret string
		return ret
	}
	return *o.ProductClass.Get()
}

// GetProductClassOk returns a tuple with the ProductClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetProductClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductClass.Get(), o.ProductClass.IsSet()
}

// HasProductClass returns a boolean if a field has been set.
func (o *ProductItem) HasProductClass() bool {
	if o != nil && o.ProductClass.IsSet() {
		return true
	}

	return false
}

// SetProductClass gets a reference to the given NullableString and assigns it to the ProductClass field.
func (o *ProductItem) SetProductClass(v string) {
	o.ProductClass.Set(&v)
}
// SetProductClassNil sets the value for ProductClass to be an explicit nil
func (o *ProductItem) SetProductClassNil() {
	o.ProductClass.Set(nil)
}

// UnsetProductClass ensures that no value is present for ProductClass, not even an explicit nil
func (o *ProductItem) UnsetProductClass() {
	o.ProductClass.Unset()
}

// GetNeedToPurchaseFlag returns the NeedToPurchaseFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetNeedToPurchaseFlag() bool {
	if o == nil || IsNil(o.NeedToPurchaseFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NeedToPurchaseFlag.Get()
}

// GetNeedToPurchaseFlagOk returns a tuple with the NeedToPurchaseFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetNeedToPurchaseFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NeedToPurchaseFlag.Get(), o.NeedToPurchaseFlag.IsSet()
}

// HasNeedToPurchaseFlag returns a boolean if a field has been set.
func (o *ProductItem) HasNeedToPurchaseFlag() bool {
	if o != nil && o.NeedToPurchaseFlag.IsSet() {
		return true
	}

	return false
}

// SetNeedToPurchaseFlag gets a reference to the given NullableBool and assigns it to the NeedToPurchaseFlag field.
func (o *ProductItem) SetNeedToPurchaseFlag(v bool) {
	o.NeedToPurchaseFlag.Set(&v)
}
// SetNeedToPurchaseFlagNil sets the value for NeedToPurchaseFlag to be an explicit nil
func (o *ProductItem) SetNeedToPurchaseFlagNil() {
	o.NeedToPurchaseFlag.Set(nil)
}

// UnsetNeedToPurchaseFlag ensures that no value is present for NeedToPurchaseFlag, not even an explicit nil
func (o *ProductItem) UnsetNeedToPurchaseFlag() {
	o.NeedToPurchaseFlag.Unset()
}

// GetNeedToOrderQuantity returns the NeedToOrderQuantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetNeedToOrderQuantity() int32 {
	if o == nil || IsNil(o.NeedToOrderQuantity.Get()) {
		var ret int32
		return ret
	}
	return *o.NeedToOrderQuantity.Get()
}

// GetNeedToOrderQuantityOk returns a tuple with the NeedToOrderQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetNeedToOrderQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NeedToOrderQuantity.Get(), o.NeedToOrderQuantity.IsSet()
}

// HasNeedToOrderQuantity returns a boolean if a field has been set.
func (o *ProductItem) HasNeedToOrderQuantity() bool {
	if o != nil && o.NeedToOrderQuantity.IsSet() {
		return true
	}

	return false
}

// SetNeedToOrderQuantity gets a reference to the given NullableInt32 and assigns it to the NeedToOrderQuantity field.
func (o *ProductItem) SetNeedToOrderQuantity(v int32) {
	o.NeedToOrderQuantity.Set(&v)
}
// SetNeedToOrderQuantityNil sets the value for NeedToOrderQuantity to be an explicit nil
func (o *ProductItem) SetNeedToOrderQuantityNil() {
	o.NeedToOrderQuantity.Set(nil)
}

// UnsetNeedToOrderQuantity ensures that no value is present for NeedToOrderQuantity, not even an explicit nil
func (o *ProductItem) UnsetNeedToOrderQuantity() {
	o.NeedToOrderQuantity.Unset()
}

// GetMinimumStockFlag returns the MinimumStockFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetMinimumStockFlag() bool {
	if o == nil || IsNil(o.MinimumStockFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MinimumStockFlag.Get()
}

// GetMinimumStockFlagOk returns a tuple with the MinimumStockFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetMinimumStockFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumStockFlag.Get(), o.MinimumStockFlag.IsSet()
}

// HasMinimumStockFlag returns a boolean if a field has been set.
func (o *ProductItem) HasMinimumStockFlag() bool {
	if o != nil && o.MinimumStockFlag.IsSet() {
		return true
	}

	return false
}

// SetMinimumStockFlag gets a reference to the given NullableBool and assigns it to the MinimumStockFlag field.
func (o *ProductItem) SetMinimumStockFlag(v bool) {
	o.MinimumStockFlag.Set(&v)
}
// SetMinimumStockFlagNil sets the value for MinimumStockFlag to be an explicit nil
func (o *ProductItem) SetMinimumStockFlagNil() {
	o.MinimumStockFlag.Set(nil)
}

// UnsetMinimumStockFlag ensures that no value is present for MinimumStockFlag, not even an explicit nil
func (o *ProductItem) UnsetMinimumStockFlag() {
	o.MinimumStockFlag.Unset()
}

// GetShipSet returns the ShipSet field value if set, zero value otherwise.
func (o *ProductItem) GetShipSet() string {
	if o == nil || IsNil(o.ShipSet) {
		var ret string
		return ret
	}
	return *o.ShipSet
}

// GetShipSetOk returns a tuple with the ShipSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetShipSetOk() (*string, bool) {
	if o == nil || IsNil(o.ShipSet) {
		return nil, false
	}
	return o.ShipSet, true
}

// HasShipSet returns a boolean if a field has been set.
func (o *ProductItem) HasShipSet() bool {
	if o != nil && !IsNil(o.ShipSet) {
		return true
	}

	return false
}

// SetShipSet gets a reference to the given string and assigns it to the ShipSet field.
func (o *ProductItem) SetShipSet(v string) {
	o.ShipSet = &v
}

// GetCalculatedPrice returns the CalculatedPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCalculatedPrice() float64 {
	if o == nil || IsNil(o.CalculatedPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.CalculatedPrice.Get()
}

// GetCalculatedPriceOk returns a tuple with the CalculatedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCalculatedPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedPrice.Get(), o.CalculatedPrice.IsSet()
}

// HasCalculatedPrice returns a boolean if a field has been set.
func (o *ProductItem) HasCalculatedPrice() bool {
	if o != nil && o.CalculatedPrice.IsSet() {
		return true
	}

	return false
}

// SetCalculatedPrice gets a reference to the given NullableFloat64 and assigns it to the CalculatedPrice field.
func (o *ProductItem) SetCalculatedPrice(v float64) {
	o.CalculatedPrice.Set(&v)
}
// SetCalculatedPriceNil sets the value for CalculatedPrice to be an explicit nil
func (o *ProductItem) SetCalculatedPriceNil() {
	o.CalculatedPrice.Set(nil)
}

// UnsetCalculatedPrice ensures that no value is present for CalculatedPrice, not even an explicit nil
func (o *ProductItem) UnsetCalculatedPrice() {
	o.CalculatedPrice.Unset()
}

// GetCalculatedCost returns the CalculatedCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetCalculatedCost() float64 {
	if o == nil || IsNil(o.CalculatedCost.Get()) {
		var ret float64
		return ret
	}
	return *o.CalculatedCost.Get()
}

// GetCalculatedCostOk returns a tuple with the CalculatedCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetCalculatedCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CalculatedCost.Get(), o.CalculatedCost.IsSet()
}

// HasCalculatedCost returns a boolean if a field has been set.
func (o *ProductItem) HasCalculatedCost() bool {
	if o != nil && o.CalculatedCost.IsSet() {
		return true
	}

	return false
}

// SetCalculatedCost gets a reference to the given NullableFloat64 and assigns it to the CalculatedCost field.
func (o *ProductItem) SetCalculatedCost(v float64) {
	o.CalculatedCost.Set(&v)
}
// SetCalculatedCostNil sets the value for CalculatedCost to be an explicit nil
func (o *ProductItem) SetCalculatedCostNil() {
	o.CalculatedCost.Set(nil)
}

// UnsetCalculatedCost ensures that no value is present for CalculatedCost, not even an explicit nil
func (o *ProductItem) UnsetCalculatedCost() {
	o.CalculatedCost.Unset()
}

// GetInvoiceGrouping returns the InvoiceGrouping field value if set, zero value otherwise.
func (o *ProductItem) GetInvoiceGrouping() InvoiceGroupingReference {
	if o == nil || IsNil(o.InvoiceGrouping) {
		var ret InvoiceGroupingReference
		return ret
	}
	return *o.InvoiceGrouping
}

// GetInvoiceGroupingOk returns a tuple with the InvoiceGrouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetInvoiceGroupingOk() (*InvoiceGroupingReference, bool) {
	if o == nil || IsNil(o.InvoiceGrouping) {
		return nil, false
	}
	return o.InvoiceGrouping, true
}

// HasInvoiceGrouping returns a boolean if a field has been set.
func (o *ProductItem) HasInvoiceGrouping() bool {
	if o != nil && !IsNil(o.InvoiceGrouping) {
		return true
	}

	return false
}

// SetInvoiceGrouping gets a reference to the given InvoiceGroupingReference and assigns it to the InvoiceGrouping field.
func (o *ProductItem) SetInvoiceGrouping(v InvoiceGroupingReference) {
	o.InvoiceGrouping = &v
}

// GetPoApprovedFlag returns the PoApprovedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetPoApprovedFlag() bool {
	if o == nil || IsNil(o.PoApprovedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PoApprovedFlag.Get()
}

// GetPoApprovedFlagOk returns a tuple with the PoApprovedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetPoApprovedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoApprovedFlag.Get(), o.PoApprovedFlag.IsSet()
}

// HasPoApprovedFlag returns a boolean if a field has been set.
func (o *ProductItem) HasPoApprovedFlag() bool {
	if o != nil && o.PoApprovedFlag.IsSet() {
		return true
	}

	return false
}

// SetPoApprovedFlag gets a reference to the given NullableBool and assigns it to the PoApprovedFlag field.
func (o *ProductItem) SetPoApprovedFlag(v bool) {
	o.PoApprovedFlag.Set(&v)
}
// SetPoApprovedFlagNil sets the value for PoApprovedFlag to be an explicit nil
func (o *ProductItem) SetPoApprovedFlagNil() {
	o.PoApprovedFlag.Set(nil)
}

// UnsetPoApprovedFlag ensures that no value is present for PoApprovedFlag, not even an explicit nil
func (o *ProductItem) UnsetPoApprovedFlag() {
	o.PoApprovedFlag.Unset()
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *ProductItem) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *ProductItem) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *ProductItem) SetUom(v string) {
	o.Uom = &v
}

// GetAddComponentsFlag returns the AddComponentsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetAddComponentsFlag() bool {
	if o == nil || IsNil(o.AddComponentsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddComponentsFlag.Get()
}

// GetAddComponentsFlagOk returns a tuple with the AddComponentsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetAddComponentsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddComponentsFlag.Get(), o.AddComponentsFlag.IsSet()
}

// HasAddComponentsFlag returns a boolean if a field has been set.
func (o *ProductItem) HasAddComponentsFlag() bool {
	if o != nil && o.AddComponentsFlag.IsSet() {
		return true
	}

	return false
}

// SetAddComponentsFlag gets a reference to the given NullableBool and assigns it to the AddComponentsFlag field.
func (o *ProductItem) SetAddComponentsFlag(v bool) {
	o.AddComponentsFlag.Set(&v)
}
// SetAddComponentsFlagNil sets the value for AddComponentsFlag to be an explicit nil
func (o *ProductItem) SetAddComponentsFlagNil() {
	o.AddComponentsFlag.Set(nil)
}

// UnsetAddComponentsFlag ensures that no value is present for AddComponentsFlag, not even an explicit nil
func (o *ProductItem) UnsetAddComponentsFlag() {
	o.AddComponentsFlag.Unset()
}

// GetIgnorePricingSchedulesFlag returns the IgnorePricingSchedulesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetIgnorePricingSchedulesFlag() bool {
	if o == nil || IsNil(o.IgnorePricingSchedulesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IgnorePricingSchedulesFlag.Get()
}

// GetIgnorePricingSchedulesFlagOk returns a tuple with the IgnorePricingSchedulesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetIgnorePricingSchedulesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnorePricingSchedulesFlag.Get(), o.IgnorePricingSchedulesFlag.IsSet()
}

// HasIgnorePricingSchedulesFlag returns a boolean if a field has been set.
func (o *ProductItem) HasIgnorePricingSchedulesFlag() bool {
	if o != nil && o.IgnorePricingSchedulesFlag.IsSet() {
		return true
	}

	return false
}

// SetIgnorePricingSchedulesFlag gets a reference to the given NullableBool and assigns it to the IgnorePricingSchedulesFlag field.
func (o *ProductItem) SetIgnorePricingSchedulesFlag(v bool) {
	o.IgnorePricingSchedulesFlag.Set(&v)
}
// SetIgnorePricingSchedulesFlagNil sets the value for IgnorePricingSchedulesFlag to be an explicit nil
func (o *ProductItem) SetIgnorePricingSchedulesFlagNil() {
	o.IgnorePricingSchedulesFlag.Set(nil)
}

// UnsetIgnorePricingSchedulesFlag ensures that no value is present for IgnorePricingSchedulesFlag, not even an explicit nil
func (o *ProductItem) UnsetIgnorePricingSchedulesFlag() {
	o.IgnorePricingSchedulesFlag.Unset()
}

// GetAsioSubscriptionsID returns the AsioSubscriptionsID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetAsioSubscriptionsID() string {
	if o == nil || IsNil(o.AsioSubscriptionsID.Get()) {
		var ret string
		return ret
	}
	return *o.AsioSubscriptionsID.Get()
}

// GetAsioSubscriptionsIDOk returns a tuple with the AsioSubscriptionsID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetAsioSubscriptionsIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AsioSubscriptionsID.Get(), o.AsioSubscriptionsID.IsSet()
}

// HasAsioSubscriptionsID returns a boolean if a field has been set.
func (o *ProductItem) HasAsioSubscriptionsID() bool {
	if o != nil && o.AsioSubscriptionsID.IsSet() {
		return true
	}

	return false
}

// SetAsioSubscriptionsID gets a reference to the given NullableString and assigns it to the AsioSubscriptionsID field.
func (o *ProductItem) SetAsioSubscriptionsID(v string) {
	o.AsioSubscriptionsID.Set(&v)
}
// SetAsioSubscriptionsIDNil sets the value for AsioSubscriptionsID to be an explicit nil
func (o *ProductItem) SetAsioSubscriptionsIDNil() {
	o.AsioSubscriptionsID.Set(nil)
}

// UnsetAsioSubscriptionsID ensures that no value is present for AsioSubscriptionsID, not even an explicit nil
func (o *ProductItem) UnsetAsioSubscriptionsID() {
	o.AsioSubscriptionsID.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProductItem) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProductItem) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProductItem) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetBypassForecastUpdate returns the BypassForecastUpdate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductItem) GetBypassForecastUpdate() bool {
	if o == nil || IsNil(o.BypassForecastUpdate.Get()) {
		var ret bool
		return ret
	}
	return *o.BypassForecastUpdate.Get()
}

// GetBypassForecastUpdateOk returns a tuple with the BypassForecastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductItem) GetBypassForecastUpdateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BypassForecastUpdate.Get(), o.BypassForecastUpdate.IsSet()
}

// HasBypassForecastUpdate returns a boolean if a field has been set.
func (o *ProductItem) HasBypassForecastUpdate() bool {
	if o != nil && o.BypassForecastUpdate.IsSet() {
		return true
	}

	return false
}

// SetBypassForecastUpdate gets a reference to the given NullableBool and assigns it to the BypassForecastUpdate field.
func (o *ProductItem) SetBypassForecastUpdate(v bool) {
	o.BypassForecastUpdate.Set(&v)
}
// SetBypassForecastUpdateNil sets the value for BypassForecastUpdate to be an explicit nil
func (o *ProductItem) SetBypassForecastUpdateNil() {
	o.BypassForecastUpdate.Set(nil)
}

// UnsetBypassForecastUpdate ensures that no value is present for BypassForecastUpdate, not even an explicit nil
func (o *ProductItem) UnsetBypassForecastUpdate() {
	o.BypassForecastUpdate.Unset()
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *ProductItem) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductItem) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ProductItem) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *ProductItem) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o ProductItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["catalogItem"] = o.CatalogItem
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.ExtPrice.IsSet() {
		toSerialize["extPrice"] = o.ExtPrice.Get()
	}
	if o.ExtCost.IsSet() {
		toSerialize["extCost"] = o.ExtCost.Get()
	}
	if o.Discount.IsSet() {
		toSerialize["discount"] = o.Discount.Get()
	}
	if o.Margin.IsSet() {
		toSerialize["margin"] = o.Margin.Get()
	}
	if o.AgreementAmount.IsSet() {
		toSerialize["agreementAmount"] = o.AgreementAmount.Get()
	}
	if o.PriceMethod.IsSet() {
		toSerialize["priceMethod"] = o.PriceMethod.Get()
	}
	toSerialize["billableOption"] = o.BillableOption.Get()
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.BusinessUnit) {
		toSerialize["businessUnit"] = o.BusinessUnit
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorSku) {
		toSerialize["vendorSku"] = o.VendorSku
	}
	if o.TaxableFlag.IsSet() {
		toSerialize["taxableFlag"] = o.TaxableFlag.Get()
	}
	if o.DropshipFlag.IsSet() {
		toSerialize["dropshipFlag"] = o.DropshipFlag.Get()
	}
	if o.SpecialOrderFlag.IsSet() {
		toSerialize["specialOrderFlag"] = o.SpecialOrderFlag.Get()
	}
	if o.PhaseProductFlag.IsSet() {
		toSerialize["phaseProductFlag"] = o.PhaseProductFlag.Get()
	}
	if o.CancelledFlag.IsSet() {
		toSerialize["cancelledFlag"] = o.CancelledFlag.Get()
	}
	if o.QuantityCancelled.IsSet() {
		toSerialize["quantityCancelled"] = o.QuantityCancelled.Get()
	}
	if !IsNil(o.CancelledReason) {
		toSerialize["cancelledReason"] = o.CancelledReason
	}
	if !IsNil(o.CustomerDescription) {
		toSerialize["customerDescription"] = o.CustomerDescription
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if o.ProductSuppliedFlag.IsSet() {
		toSerialize["productSuppliedFlag"] = o.ProductSuppliedFlag.Get()
	}
	if o.SubContractorShipToId.IsSet() {
		toSerialize["subContractorShipToId"] = o.SubContractorShipToId.Get()
	}
	if o.SubContractorAmountLimit.IsSet() {
		toSerialize["subContractorAmountLimit"] = o.SubContractorAmountLimit.Get()
	}
	if !IsNil(o.Recurring) {
		toSerialize["recurring"] = o.Recurring
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.SalesOrder) {
		toSerialize["salesOrder"] = o.SalesOrder
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if o.WarehouseId.IsSet() {
		toSerialize["warehouseId"] = o.WarehouseId.Get()
	}
	if !IsNil(o.WarehouseIdObject) {
		toSerialize["warehouseIdObject"] = o.WarehouseIdObject
	}
	if o.WarehouseBinId.IsSet() {
		toSerialize["warehouseBinId"] = o.WarehouseBinId.Get()
	}
	if !IsNil(o.WarehouseBinIdObject) {
		toSerialize["warehouseBinIdObject"] = o.WarehouseBinIdObject
	}
	if o.CalculatedPriceFlag.IsSet() {
		toSerialize["calculatedPriceFlag"] = o.CalculatedPriceFlag.Get()
	}
	if o.CalculatedCostFlag.IsSet() {
		toSerialize["calculatedCostFlag"] = o.CalculatedCostFlag.Get()
	}
	if o.ForecastDetailId.IsSet() {
		toSerialize["forecastDetailId"] = o.ForecastDetailId.Get()
	}
	if o.CancelledBy.IsSet() {
		toSerialize["cancelledBy"] = o.CancelledBy.Get()
	}
	if !IsNil(o.CancelledDate) {
		toSerialize["cancelledDate"] = o.CancelledDate
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.WarehouseBin) {
		toSerialize["warehouseBin"] = o.WarehouseBin
	}
	if !IsNil(o.PurchaseDate) {
		toSerialize["purchaseDate"] = o.PurchaseDate
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.IntegrationXRef) {
		toSerialize["integrationXRef"] = o.IntegrationXRef
	}
	if o.ListPrice.IsSet() {
		toSerialize["listPrice"] = o.ListPrice.Get()
	}
	if !IsNil(o.SerialNumberIds) {
		toSerialize["serialNumberIds"] = o.SerialNumberIds
	}
	if !IsNil(o.SerialNumbers) {
		toSerialize["serialNumbers"] = o.SerialNumbers
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.ForecastStatus) {
		toSerialize["forecastStatus"] = o.ForecastStatus
	}
	if o.ProductClass.IsSet() {
		toSerialize["productClass"] = o.ProductClass.Get()
	}
	if o.NeedToPurchaseFlag.IsSet() {
		toSerialize["needToPurchaseFlag"] = o.NeedToPurchaseFlag.Get()
	}
	if o.NeedToOrderQuantity.IsSet() {
		toSerialize["needToOrderQuantity"] = o.NeedToOrderQuantity.Get()
	}
	if o.MinimumStockFlag.IsSet() {
		toSerialize["minimumStockFlag"] = o.MinimumStockFlag.Get()
	}
	if !IsNil(o.ShipSet) {
		toSerialize["shipSet"] = o.ShipSet
	}
	if o.CalculatedPrice.IsSet() {
		toSerialize["calculatedPrice"] = o.CalculatedPrice.Get()
	}
	if o.CalculatedCost.IsSet() {
		toSerialize["calculatedCost"] = o.CalculatedCost.Get()
	}
	if !IsNil(o.InvoiceGrouping) {
		toSerialize["invoiceGrouping"] = o.InvoiceGrouping
	}
	if o.PoApprovedFlag.IsSet() {
		toSerialize["poApprovedFlag"] = o.PoApprovedFlag.Get()
	}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	if o.AddComponentsFlag.IsSet() {
		toSerialize["addComponentsFlag"] = o.AddComponentsFlag.Get()
	}
	if o.IgnorePricingSchedulesFlag.IsSet() {
		toSerialize["ignorePricingSchedulesFlag"] = o.IgnorePricingSchedulesFlag.Get()
	}
	if o.AsioSubscriptionsID.IsSet() {
		toSerialize["asioSubscriptionsID"] = o.AsioSubscriptionsID.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if o.BypassForecastUpdate.IsSet() {
		toSerialize["bypassForecastUpdate"] = o.BypassForecastUpdate.Get()
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *ProductItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalogItem",
		"billableOption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductItem := _ProductItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductItem)

	if err != nil {
		return err
	}

	*o = ProductItem(varProductItem)

	return err
}

type NullableProductItem struct {
	value *ProductItem
	isSet bool
}

func (v NullableProductItem) Get() *ProductItem {
	return v.value
}

func (v *NullableProductItem) Set(val *ProductItem) {
	v.value = val
	v.isSet = true
}

func (v NullableProductItem) IsSet() bool {
	return v.isSet
}

func (v *NullableProductItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductItem(val *ProductItem) *NullableProductItem {
	return &NullableProductItem{value: val, isSet: true}
}

func (v NullableProductItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


