/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	Id *int32 `json:"id,omitempty"`
	ActualEnd *time.Time `json:"actualEnd,omitempty"`
	ActualHours NullableFloat64 `json:"actualHours,omitempty"`
	ActualStart *time.Time `json:"actualStart,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	//  Required On Updates;
	BillExpenses NullableString `json:"billExpenses,omitempty"`
	BillingAmount NullableFloat64 `json:"billingAmount,omitempty"`
	//  Max length: 50;
	BillingAttention *string `json:"billingAttention,omitempty"`
	BillingMethod NullableString `json:"billingMethod"`
	//  Required On Updates;
	BillingRateType NullableString `json:"billingRateType,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	//  Required On Updates;
	BillProducts NullableString `json:"billProducts,omitempty"`
	BillProjectAfterClosedFlag NullableBool `json:"billProjectAfterClosedFlag,omitempty"`
	//  Required On Updates;
	BillTime NullableString `json:"billTime,omitempty"`
	BillToCompany *CompanyReference `json:"billToCompany,omitempty"`
	BillToContact *ContactReference `json:"billToContact,omitempty"`
	BillToSite *SiteReference `json:"billToSite,omitempty"`
	BillUnapprovedTimeAndExpense NullableBool `json:"billUnapprovedTimeAndExpense,omitempty"`
	Board ProjectBoardReference `json:"board"`
	//  Required On Updates;
	BudgetAnalysis NullableString `json:"budgetAnalysis,omitempty"`
	BudgetFlag NullableBool `json:"budgetFlag,omitempty"`
	BudgetHours NullableFloat64 `json:"budgetHours,omitempty"`
	Company CompanyReference `json:"company"`
	Contact *ContactReference `json:"contact,omitempty"`
	//  Max length: 50;
	CustomerPO *string `json:"customerPO,omitempty"`
	Description *string `json:"description,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Downpayment NullableFloat64 `json:"downpayment,omitempty"`
	EstimatedEnd time.Time `json:"estimatedEnd"`
	PercentComplete NullableFloat64 `json:"percentComplete,omitempty"`
	EstimatedExpenseRevenue NullableFloat64 `json:"estimatedExpenseRevenue,omitempty"`
	EstimatedHours NullableFloat64 `json:"estimatedHours,omitempty"`
	EstimatedProductRevenue NullableFloat64 `json:"estimatedProductRevenue,omitempty"`
	EstimatedStart time.Time `json:"estimatedStart"`
	EstimatedTimeRevenue NullableFloat64 `json:"estimatedTimeRevenue,omitempty"`
	ExpenseApprover *MemberReference `json:"expenseApprover,omitempty"`
	IncludeDependenciesFlag NullableBool `json:"includeDependenciesFlag,omitempty"`
	IncludeEstimatesFlag NullableBool `json:"includeEstimatesFlag,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Manager *MemberReference `json:"manager,omitempty"`
	//  Max length: 100;
	Name string `json:"name"`
	Opportunity *OpportunityReference `json:"opportunity,omitempty"`
	ProjectTemplateId NullableInt32 `json:"projectTemplateId,omitempty"`
	RestrictDownPaymentFlag NullableBool `json:"restrictDownPaymentFlag,omitempty"`
	ScheduledEnd *time.Time `json:"scheduledEnd,omitempty"`
	ScheduledHours NullableFloat64 `json:"scheduledHours,omitempty"`
	ScheduledStart *time.Time `json:"scheduledStart,omitempty"`
	ShipToCompany *CompanyReference `json:"shipToCompany,omitempty"`
	ShipToContact *ContactReference `json:"shipToContact,omitempty"`
	ShipToSite *SiteReference `json:"shipToSite,omitempty"`
	Site *SiteReference `json:"site,omitempty"`
	Status *ProjectStatusReference `json:"status,omitempty"`
	ClosedFlag *bool `json:"closedFlag,omitempty"`
	TimeApprover *MemberReference `json:"timeApprover,omitempty"`
	Type *ProjectTypeReference `json:"type,omitempty"`
	DoNotDisplayInPortalFlag NullableBool `json:"doNotDisplayInPortalFlag,omitempty"`
	BillingStartDate *time.Time `json:"billingStartDate,omitempty"`
	PoAmount NullableFloat64 `json:"poAmount,omitempty"`
	EstimatedTimeCost NullableFloat64 `json:"estimatedTimeCost,omitempty"`
	EstimatedExpenseCost NullableFloat64 `json:"estimatedExpenseCost,omitempty"`
	EstimatedProductCost NullableFloat64 `json:"estimatedProductCost,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	CompanyLocation *SystemLocationReference `json:"companyLocation,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _Project Project

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(billingMethod NullableString, board ProjectBoardReference, company CompanyReference, estimatedEnd time.Time, estimatedStart time.Time, name string) *Project {
	this := Project{}
	this.BillingMethod = billingMethod
	this.Board = board
	this.Company = company
	this.EstimatedEnd = estimatedEnd
	this.EstimatedStart = estimatedStart
	this.Name = name
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Project) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Project) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Project) SetId(v int32) {
	o.Id = &v
}

// GetActualEnd returns the ActualEnd field value if set, zero value otherwise.
func (o *Project) GetActualEnd() time.Time {
	if o == nil || IsNil(o.ActualEnd) {
		var ret time.Time
		return ret
	}
	return *o.ActualEnd
}

// GetActualEndOk returns a tuple with the ActualEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetActualEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ActualEnd) {
		return nil, false
	}
	return o.ActualEnd, true
}

// HasActualEnd returns a boolean if a field has been set.
func (o *Project) HasActualEnd() bool {
	if o != nil && !IsNil(o.ActualEnd) {
		return true
	}

	return false
}

// SetActualEnd gets a reference to the given time.Time and assigns it to the ActualEnd field.
func (o *Project) SetActualEnd(v time.Time) {
	o.ActualEnd = &v
}

// GetActualHours returns the ActualHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetActualHours() float64 {
	if o == nil || IsNil(o.ActualHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualHours.Get()
}

// GetActualHoursOk returns a tuple with the ActualHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetActualHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualHours.Get(), o.ActualHours.IsSet()
}

// HasActualHours returns a boolean if a field has been set.
func (o *Project) HasActualHours() bool {
	if o != nil && o.ActualHours.IsSet() {
		return true
	}

	return false
}

// SetActualHours gets a reference to the given NullableFloat64 and assigns it to the ActualHours field.
func (o *Project) SetActualHours(v float64) {
	o.ActualHours.Set(&v)
}
// SetActualHoursNil sets the value for ActualHours to be an explicit nil
func (o *Project) SetActualHoursNil() {
	o.ActualHours.Set(nil)
}

// UnsetActualHours ensures that no value is present for ActualHours, not even an explicit nil
func (o *Project) UnsetActualHours() {
	o.ActualHours.Unset()
}

// GetActualStart returns the ActualStart field value if set, zero value otherwise.
func (o *Project) GetActualStart() time.Time {
	if o == nil || IsNil(o.ActualStart) {
		var ret time.Time
		return ret
	}
	return *o.ActualStart
}

// GetActualStartOk returns a tuple with the ActualStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetActualStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ActualStart) {
		return nil, false
	}
	return o.ActualStart, true
}

// HasActualStart returns a boolean if a field has been set.
func (o *Project) HasActualStart() bool {
	if o != nil && !IsNil(o.ActualStart) {
		return true
	}

	return false
}

// SetActualStart gets a reference to the given time.Time and assigns it to the ActualStart field.
func (o *Project) SetActualStart(v time.Time) {
	o.ActualStart = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *Project) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *Project) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *Project) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetBillExpenses returns the BillExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillExpenses() string {
	if o == nil || IsNil(o.BillExpenses.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// HasBillExpenses returns a boolean if a field has been set.
func (o *Project) HasBillExpenses() bool {
	if o != nil && o.BillExpenses.IsSet() {
		return true
	}

	return false
}

// SetBillExpenses gets a reference to the given NullableString and assigns it to the BillExpenses field.
func (o *Project) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}
// SetBillExpensesNil sets the value for BillExpenses to be an explicit nil
func (o *Project) SetBillExpensesNil() {
	o.BillExpenses.Set(nil)
}

// UnsetBillExpenses ensures that no value is present for BillExpenses, not even an explicit nil
func (o *Project) UnsetBillExpenses() {
	o.BillExpenses.Unset()
}

// GetBillingAmount returns the BillingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillingAmount() float64 {
	if o == nil || IsNil(o.BillingAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillingAmount.Get()
}

// GetBillingAmountOk returns a tuple with the BillingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillingAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingAmount.Get(), o.BillingAmount.IsSet()
}

// HasBillingAmount returns a boolean if a field has been set.
func (o *Project) HasBillingAmount() bool {
	if o != nil && o.BillingAmount.IsSet() {
		return true
	}

	return false
}

// SetBillingAmount gets a reference to the given NullableFloat64 and assigns it to the BillingAmount field.
func (o *Project) SetBillingAmount(v float64) {
	o.BillingAmount.Set(&v)
}
// SetBillingAmountNil sets the value for BillingAmount to be an explicit nil
func (o *Project) SetBillingAmountNil() {
	o.BillingAmount.Set(nil)
}

// UnsetBillingAmount ensures that no value is present for BillingAmount, not even an explicit nil
func (o *Project) UnsetBillingAmount() {
	o.BillingAmount.Unset()
}

// GetBillingAttention returns the BillingAttention field value if set, zero value otherwise.
func (o *Project) GetBillingAttention() string {
	if o == nil || IsNil(o.BillingAttention) {
		var ret string
		return ret
	}
	return *o.BillingAttention
}

// GetBillingAttentionOk returns a tuple with the BillingAttention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBillingAttentionOk() (*string, bool) {
	if o == nil || IsNil(o.BillingAttention) {
		return nil, false
	}
	return o.BillingAttention, true
}

// HasBillingAttention returns a boolean if a field has been set.
func (o *Project) HasBillingAttention() bool {
	if o != nil && !IsNil(o.BillingAttention) {
		return true
	}

	return false
}

// SetBillingAttention gets a reference to the given string and assigns it to the BillingAttention field.
func (o *Project) SetBillingAttention(v string) {
	o.BillingAttention = &v
}

// GetBillingMethod returns the BillingMethod field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Project) GetBillingMethod() string {
	if o == nil || o.BillingMethod.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillingMethod.Get()
}

// GetBillingMethodOk returns a tuple with the BillingMethod field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingMethod.Get(), o.BillingMethod.IsSet()
}

// SetBillingMethod sets field value
func (o *Project) SetBillingMethod(v string) {
	o.BillingMethod.Set(&v)
}

// GetBillingRateType returns the BillingRateType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillingRateType() string {
	if o == nil || IsNil(o.BillingRateType.Get()) {
		var ret string
		return ret
	}
	return *o.BillingRateType.Get()
}

// GetBillingRateTypeOk returns a tuple with the BillingRateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillingRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingRateType.Get(), o.BillingRateType.IsSet()
}

// HasBillingRateType returns a boolean if a field has been set.
func (o *Project) HasBillingRateType() bool {
	if o != nil && o.BillingRateType.IsSet() {
		return true
	}

	return false
}

// SetBillingRateType gets a reference to the given NullableString and assigns it to the BillingRateType field.
func (o *Project) SetBillingRateType(v string) {
	o.BillingRateType.Set(&v)
}
// SetBillingRateTypeNil sets the value for BillingRateType to be an explicit nil
func (o *Project) SetBillingRateTypeNil() {
	o.BillingRateType.Set(nil)
}

// UnsetBillingRateType ensures that no value is present for BillingRateType, not even an explicit nil
func (o *Project) UnsetBillingRateType() {
	o.BillingRateType.Unset()
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *Project) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *Project) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *Project) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetBillProducts returns the BillProducts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillProducts() string {
	if o == nil || IsNil(o.BillProducts.Get()) {
		var ret string
		return ret
	}
	return *o.BillProducts.Get()
}

// GetBillProductsOk returns a tuple with the BillProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillProductsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProducts.Get(), o.BillProducts.IsSet()
}

// HasBillProducts returns a boolean if a field has been set.
func (o *Project) HasBillProducts() bool {
	if o != nil && o.BillProducts.IsSet() {
		return true
	}

	return false
}

// SetBillProducts gets a reference to the given NullableString and assigns it to the BillProducts field.
func (o *Project) SetBillProducts(v string) {
	o.BillProducts.Set(&v)
}
// SetBillProductsNil sets the value for BillProducts to be an explicit nil
func (o *Project) SetBillProductsNil() {
	o.BillProducts.Set(nil)
}

// UnsetBillProducts ensures that no value is present for BillProducts, not even an explicit nil
func (o *Project) UnsetBillProducts() {
	o.BillProducts.Unset()
}

// GetBillProjectAfterClosedFlag returns the BillProjectAfterClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillProjectAfterClosedFlag() bool {
	if o == nil || IsNil(o.BillProjectAfterClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillProjectAfterClosedFlag.Get()
}

// GetBillProjectAfterClosedFlagOk returns a tuple with the BillProjectAfterClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillProjectAfterClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProjectAfterClosedFlag.Get(), o.BillProjectAfterClosedFlag.IsSet()
}

// HasBillProjectAfterClosedFlag returns a boolean if a field has been set.
func (o *Project) HasBillProjectAfterClosedFlag() bool {
	if o != nil && o.BillProjectAfterClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetBillProjectAfterClosedFlag gets a reference to the given NullableBool and assigns it to the BillProjectAfterClosedFlag field.
func (o *Project) SetBillProjectAfterClosedFlag(v bool) {
	o.BillProjectAfterClosedFlag.Set(&v)
}
// SetBillProjectAfterClosedFlagNil sets the value for BillProjectAfterClosedFlag to be an explicit nil
func (o *Project) SetBillProjectAfterClosedFlagNil() {
	o.BillProjectAfterClosedFlag.Set(nil)
}

// UnsetBillProjectAfterClosedFlag ensures that no value is present for BillProjectAfterClosedFlag, not even an explicit nil
func (o *Project) UnsetBillProjectAfterClosedFlag() {
	o.BillProjectAfterClosedFlag.Unset()
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *Project) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *Project) SetBillTime(v string) {
	o.BillTime.Set(&v)
}
// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *Project) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *Project) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *Project) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *Project) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *Project) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetBillToContact returns the BillToContact field value if set, zero value otherwise.
func (o *Project) GetBillToContact() ContactReference {
	if o == nil || IsNil(o.BillToContact) {
		var ret ContactReference
		return ret
	}
	return *o.BillToContact
}

// GetBillToContactOk returns a tuple with the BillToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBillToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.BillToContact) {
		return nil, false
	}
	return o.BillToContact, true
}

// HasBillToContact returns a boolean if a field has been set.
func (o *Project) HasBillToContact() bool {
	if o != nil && !IsNil(o.BillToContact) {
		return true
	}

	return false
}

// SetBillToContact gets a reference to the given ContactReference and assigns it to the BillToContact field.
func (o *Project) SetBillToContact(v ContactReference) {
	o.BillToContact = &v
}

// GetBillToSite returns the BillToSite field value if set, zero value otherwise.
func (o *Project) GetBillToSite() SiteReference {
	if o == nil || IsNil(o.BillToSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillToSite
}

// GetBillToSiteOk returns a tuple with the BillToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBillToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillToSite) {
		return nil, false
	}
	return o.BillToSite, true
}

// HasBillToSite returns a boolean if a field has been set.
func (o *Project) HasBillToSite() bool {
	if o != nil && !IsNil(o.BillToSite) {
		return true
	}

	return false
}

// SetBillToSite gets a reference to the given SiteReference and assigns it to the BillToSite field.
func (o *Project) SetBillToSite(v SiteReference) {
	o.BillToSite = &v
}

// GetBillUnapprovedTimeAndExpense returns the BillUnapprovedTimeAndExpense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBillUnapprovedTimeAndExpense() bool {
	if o == nil || IsNil(o.BillUnapprovedTimeAndExpense.Get()) {
		var ret bool
		return ret
	}
	return *o.BillUnapprovedTimeAndExpense.Get()
}

// GetBillUnapprovedTimeAndExpenseOk returns a tuple with the BillUnapprovedTimeAndExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBillUnapprovedTimeAndExpenseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillUnapprovedTimeAndExpense.Get(), o.BillUnapprovedTimeAndExpense.IsSet()
}

// HasBillUnapprovedTimeAndExpense returns a boolean if a field has been set.
func (o *Project) HasBillUnapprovedTimeAndExpense() bool {
	if o != nil && o.BillUnapprovedTimeAndExpense.IsSet() {
		return true
	}

	return false
}

// SetBillUnapprovedTimeAndExpense gets a reference to the given NullableBool and assigns it to the BillUnapprovedTimeAndExpense field.
func (o *Project) SetBillUnapprovedTimeAndExpense(v bool) {
	o.BillUnapprovedTimeAndExpense.Set(&v)
}
// SetBillUnapprovedTimeAndExpenseNil sets the value for BillUnapprovedTimeAndExpense to be an explicit nil
func (o *Project) SetBillUnapprovedTimeAndExpenseNil() {
	o.BillUnapprovedTimeAndExpense.Set(nil)
}

// UnsetBillUnapprovedTimeAndExpense ensures that no value is present for BillUnapprovedTimeAndExpense, not even an explicit nil
func (o *Project) UnsetBillUnapprovedTimeAndExpense() {
	o.BillUnapprovedTimeAndExpense.Unset()
}

// GetBoard returns the Board field value
func (o *Project) GetBoard() ProjectBoardReference {
	if o == nil {
		var ret ProjectBoardReference
		return ret
	}

	return o.Board
}

// GetBoardOk returns a tuple with the Board field value
// and a boolean to check if the value has been set.
func (o *Project) GetBoardOk() (*ProjectBoardReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Board, true
}

// SetBoard sets field value
func (o *Project) SetBoard(v ProjectBoardReference) {
	o.Board = v
}

// GetBudgetAnalysis returns the BudgetAnalysis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBudgetAnalysis() string {
	if o == nil || IsNil(o.BudgetAnalysis.Get()) {
		var ret string
		return ret
	}
	return *o.BudgetAnalysis.Get()
}

// GetBudgetAnalysisOk returns a tuple with the BudgetAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBudgetAnalysisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetAnalysis.Get(), o.BudgetAnalysis.IsSet()
}

// HasBudgetAnalysis returns a boolean if a field has been set.
func (o *Project) HasBudgetAnalysis() bool {
	if o != nil && o.BudgetAnalysis.IsSet() {
		return true
	}

	return false
}

// SetBudgetAnalysis gets a reference to the given NullableString and assigns it to the BudgetAnalysis field.
func (o *Project) SetBudgetAnalysis(v string) {
	o.BudgetAnalysis.Set(&v)
}
// SetBudgetAnalysisNil sets the value for BudgetAnalysis to be an explicit nil
func (o *Project) SetBudgetAnalysisNil() {
	o.BudgetAnalysis.Set(nil)
}

// UnsetBudgetAnalysis ensures that no value is present for BudgetAnalysis, not even an explicit nil
func (o *Project) UnsetBudgetAnalysis() {
	o.BudgetAnalysis.Unset()
}

// GetBudgetFlag returns the BudgetFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBudgetFlag() bool {
	if o == nil || IsNil(o.BudgetFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BudgetFlag.Get()
}

// GetBudgetFlagOk returns a tuple with the BudgetFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBudgetFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetFlag.Get(), o.BudgetFlag.IsSet()
}

// HasBudgetFlag returns a boolean if a field has been set.
func (o *Project) HasBudgetFlag() bool {
	if o != nil && o.BudgetFlag.IsSet() {
		return true
	}

	return false
}

// SetBudgetFlag gets a reference to the given NullableBool and assigns it to the BudgetFlag field.
func (o *Project) SetBudgetFlag(v bool) {
	o.BudgetFlag.Set(&v)
}
// SetBudgetFlagNil sets the value for BudgetFlag to be an explicit nil
func (o *Project) SetBudgetFlagNil() {
	o.BudgetFlag.Set(nil)
}

// UnsetBudgetFlag ensures that no value is present for BudgetFlag, not even an explicit nil
func (o *Project) UnsetBudgetFlag() {
	o.BudgetFlag.Unset()
}

// GetBudgetHours returns the BudgetHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetBudgetHours() float64 {
	if o == nil || IsNil(o.BudgetHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BudgetHours.Get()
}

// GetBudgetHoursOk returns a tuple with the BudgetHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetBudgetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetHours.Get(), o.BudgetHours.IsSet()
}

// HasBudgetHours returns a boolean if a field has been set.
func (o *Project) HasBudgetHours() bool {
	if o != nil && o.BudgetHours.IsSet() {
		return true
	}

	return false
}

// SetBudgetHours gets a reference to the given NullableFloat64 and assigns it to the BudgetHours field.
func (o *Project) SetBudgetHours(v float64) {
	o.BudgetHours.Set(&v)
}
// SetBudgetHoursNil sets the value for BudgetHours to be an explicit nil
func (o *Project) SetBudgetHoursNil() {
	o.BudgetHours.Set(nil)
}

// UnsetBudgetHours ensures that no value is present for BudgetHours, not even an explicit nil
func (o *Project) UnsetBudgetHours() {
	o.BudgetHours.Unset()
}

// GetCompany returns the Company field value
func (o *Project) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Project) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Project) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Project) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Project) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *Project) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetCustomerPO returns the CustomerPO field value if set, zero value otherwise.
func (o *Project) GetCustomerPO() string {
	if o == nil || IsNil(o.CustomerPO) {
		var ret string
		return ret
	}
	return *o.CustomerPO
}

// GetCustomerPOOk returns a tuple with the CustomerPO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCustomerPOOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPO) {
		return nil, false
	}
	return o.CustomerPO, true
}

// HasCustomerPO returns a boolean if a field has been set.
func (o *Project) HasCustomerPO() bool {
	if o != nil && !IsNil(o.CustomerPO) {
		return true
	}

	return false
}

// SetCustomerPO gets a reference to the given string and assigns it to the CustomerPO field.
func (o *Project) SetCustomerPO(v string) {
	o.CustomerPO = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Project) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Project) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Project) SetDescription(v string) {
	o.Description = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Project) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Project) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Project) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetDownpayment returns the Downpayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetDownpayment() float64 {
	if o == nil || IsNil(o.Downpayment.Get()) {
		var ret float64
		return ret
	}
	return *o.Downpayment.Get()
}

// GetDownpaymentOk returns a tuple with the Downpayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetDownpaymentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Downpayment.Get(), o.Downpayment.IsSet()
}

// HasDownpayment returns a boolean if a field has been set.
func (o *Project) HasDownpayment() bool {
	if o != nil && o.Downpayment.IsSet() {
		return true
	}

	return false
}

// SetDownpayment gets a reference to the given NullableFloat64 and assigns it to the Downpayment field.
func (o *Project) SetDownpayment(v float64) {
	o.Downpayment.Set(&v)
}
// SetDownpaymentNil sets the value for Downpayment to be an explicit nil
func (o *Project) SetDownpaymentNil() {
	o.Downpayment.Set(nil)
}

// UnsetDownpayment ensures that no value is present for Downpayment, not even an explicit nil
func (o *Project) UnsetDownpayment() {
	o.Downpayment.Unset()
}

// GetEstimatedEnd returns the EstimatedEnd field value
func (o *Project) GetEstimatedEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EstimatedEnd
}

// GetEstimatedEndOk returns a tuple with the EstimatedEnd field value
// and a boolean to check if the value has been set.
func (o *Project) GetEstimatedEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedEnd, true
}

// SetEstimatedEnd sets field value
func (o *Project) SetEstimatedEnd(v time.Time) {
	o.EstimatedEnd = v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetPercentComplete() float64 {
	if o == nil || IsNil(o.PercentComplete.Get()) {
		var ret float64
		return ret
	}
	return *o.PercentComplete.Get()
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetPercentCompleteOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PercentComplete.Get(), o.PercentComplete.IsSet()
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *Project) HasPercentComplete() bool {
	if o != nil && o.PercentComplete.IsSet() {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given NullableFloat64 and assigns it to the PercentComplete field.
func (o *Project) SetPercentComplete(v float64) {
	o.PercentComplete.Set(&v)
}
// SetPercentCompleteNil sets the value for PercentComplete to be an explicit nil
func (o *Project) SetPercentCompleteNil() {
	o.PercentComplete.Set(nil)
}

// UnsetPercentComplete ensures that no value is present for PercentComplete, not even an explicit nil
func (o *Project) UnsetPercentComplete() {
	o.PercentComplete.Unset()
}

// GetEstimatedExpenseRevenue returns the EstimatedExpenseRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedExpenseRevenue() float64 {
	if o == nil || IsNil(o.EstimatedExpenseRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedExpenseRevenue.Get()
}

// GetEstimatedExpenseRevenueOk returns a tuple with the EstimatedExpenseRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedExpenseRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedExpenseRevenue.Get(), o.EstimatedExpenseRevenue.IsSet()
}

// HasEstimatedExpenseRevenue returns a boolean if a field has been set.
func (o *Project) HasEstimatedExpenseRevenue() bool {
	if o != nil && o.EstimatedExpenseRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedExpenseRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedExpenseRevenue field.
func (o *Project) SetEstimatedExpenseRevenue(v float64) {
	o.EstimatedExpenseRevenue.Set(&v)
}
// SetEstimatedExpenseRevenueNil sets the value for EstimatedExpenseRevenue to be an explicit nil
func (o *Project) SetEstimatedExpenseRevenueNil() {
	o.EstimatedExpenseRevenue.Set(nil)
}

// UnsetEstimatedExpenseRevenue ensures that no value is present for EstimatedExpenseRevenue, not even an explicit nil
func (o *Project) UnsetEstimatedExpenseRevenue() {
	o.EstimatedExpenseRevenue.Unset()
}

// GetEstimatedHours returns the EstimatedHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedHours() float64 {
	if o == nil || IsNil(o.EstimatedHours.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedHours.Get()
}

// GetEstimatedHoursOk returns a tuple with the EstimatedHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedHours.Get(), o.EstimatedHours.IsSet()
}

// HasEstimatedHours returns a boolean if a field has been set.
func (o *Project) HasEstimatedHours() bool {
	if o != nil && o.EstimatedHours.IsSet() {
		return true
	}

	return false
}

// SetEstimatedHours gets a reference to the given NullableFloat64 and assigns it to the EstimatedHours field.
func (o *Project) SetEstimatedHours(v float64) {
	o.EstimatedHours.Set(&v)
}
// SetEstimatedHoursNil sets the value for EstimatedHours to be an explicit nil
func (o *Project) SetEstimatedHoursNil() {
	o.EstimatedHours.Set(nil)
}

// UnsetEstimatedHours ensures that no value is present for EstimatedHours, not even an explicit nil
func (o *Project) UnsetEstimatedHours() {
	o.EstimatedHours.Unset()
}

// GetEstimatedProductRevenue returns the EstimatedProductRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedProductRevenue() float64 {
	if o == nil || IsNil(o.EstimatedProductRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedProductRevenue.Get()
}

// GetEstimatedProductRevenueOk returns a tuple with the EstimatedProductRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedProductRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedProductRevenue.Get(), o.EstimatedProductRevenue.IsSet()
}

// HasEstimatedProductRevenue returns a boolean if a field has been set.
func (o *Project) HasEstimatedProductRevenue() bool {
	if o != nil && o.EstimatedProductRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedProductRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedProductRevenue field.
func (o *Project) SetEstimatedProductRevenue(v float64) {
	o.EstimatedProductRevenue.Set(&v)
}
// SetEstimatedProductRevenueNil sets the value for EstimatedProductRevenue to be an explicit nil
func (o *Project) SetEstimatedProductRevenueNil() {
	o.EstimatedProductRevenue.Set(nil)
}

// UnsetEstimatedProductRevenue ensures that no value is present for EstimatedProductRevenue, not even an explicit nil
func (o *Project) UnsetEstimatedProductRevenue() {
	o.EstimatedProductRevenue.Unset()
}

// GetEstimatedStart returns the EstimatedStart field value
func (o *Project) GetEstimatedStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EstimatedStart
}

// GetEstimatedStartOk returns a tuple with the EstimatedStart field value
// and a boolean to check if the value has been set.
func (o *Project) GetEstimatedStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedStart, true
}

// SetEstimatedStart sets field value
func (o *Project) SetEstimatedStart(v time.Time) {
	o.EstimatedStart = v
}

// GetEstimatedTimeRevenue returns the EstimatedTimeRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedTimeRevenue() float64 {
	if o == nil || IsNil(o.EstimatedTimeRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeRevenue.Get()
}

// GetEstimatedTimeRevenueOk returns a tuple with the EstimatedTimeRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedTimeRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedTimeRevenue.Get(), o.EstimatedTimeRevenue.IsSet()
}

// HasEstimatedTimeRevenue returns a boolean if a field has been set.
func (o *Project) HasEstimatedTimeRevenue() bool {
	if o != nil && o.EstimatedTimeRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedTimeRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedTimeRevenue field.
func (o *Project) SetEstimatedTimeRevenue(v float64) {
	o.EstimatedTimeRevenue.Set(&v)
}
// SetEstimatedTimeRevenueNil sets the value for EstimatedTimeRevenue to be an explicit nil
func (o *Project) SetEstimatedTimeRevenueNil() {
	o.EstimatedTimeRevenue.Set(nil)
}

// UnsetEstimatedTimeRevenue ensures that no value is present for EstimatedTimeRevenue, not even an explicit nil
func (o *Project) UnsetEstimatedTimeRevenue() {
	o.EstimatedTimeRevenue.Unset()
}

// GetExpenseApprover returns the ExpenseApprover field value if set, zero value otherwise.
func (o *Project) GetExpenseApprover() MemberReference {
	if o == nil || IsNil(o.ExpenseApprover) {
		var ret MemberReference
		return ret
	}
	return *o.ExpenseApprover
}

// GetExpenseApproverOk returns a tuple with the ExpenseApprover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetExpenseApproverOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.ExpenseApprover) {
		return nil, false
	}
	return o.ExpenseApprover, true
}

// HasExpenseApprover returns a boolean if a field has been set.
func (o *Project) HasExpenseApprover() bool {
	if o != nil && !IsNil(o.ExpenseApprover) {
		return true
	}

	return false
}

// SetExpenseApprover gets a reference to the given MemberReference and assigns it to the ExpenseApprover field.
func (o *Project) SetExpenseApprover(v MemberReference) {
	o.ExpenseApprover = &v
}

// GetIncludeDependenciesFlag returns the IncludeDependenciesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetIncludeDependenciesFlag() bool {
	if o == nil || IsNil(o.IncludeDependenciesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeDependenciesFlag.Get()
}

// GetIncludeDependenciesFlagOk returns a tuple with the IncludeDependenciesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetIncludeDependenciesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeDependenciesFlag.Get(), o.IncludeDependenciesFlag.IsSet()
}

// HasIncludeDependenciesFlag returns a boolean if a field has been set.
func (o *Project) HasIncludeDependenciesFlag() bool {
	if o != nil && o.IncludeDependenciesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeDependenciesFlag gets a reference to the given NullableBool and assigns it to the IncludeDependenciesFlag field.
func (o *Project) SetIncludeDependenciesFlag(v bool) {
	o.IncludeDependenciesFlag.Set(&v)
}
// SetIncludeDependenciesFlagNil sets the value for IncludeDependenciesFlag to be an explicit nil
func (o *Project) SetIncludeDependenciesFlagNil() {
	o.IncludeDependenciesFlag.Set(nil)
}

// UnsetIncludeDependenciesFlag ensures that no value is present for IncludeDependenciesFlag, not even an explicit nil
func (o *Project) UnsetIncludeDependenciesFlag() {
	o.IncludeDependenciesFlag.Unset()
}

// GetIncludeEstimatesFlag returns the IncludeEstimatesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetIncludeEstimatesFlag() bool {
	if o == nil || IsNil(o.IncludeEstimatesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeEstimatesFlag.Get()
}

// GetIncludeEstimatesFlagOk returns a tuple with the IncludeEstimatesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetIncludeEstimatesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeEstimatesFlag.Get(), o.IncludeEstimatesFlag.IsSet()
}

// HasIncludeEstimatesFlag returns a boolean if a field has been set.
func (o *Project) HasIncludeEstimatesFlag() bool {
	if o != nil && o.IncludeEstimatesFlag.IsSet() {
		return true
	}

	return false
}

// SetIncludeEstimatesFlag gets a reference to the given NullableBool and assigns it to the IncludeEstimatesFlag field.
func (o *Project) SetIncludeEstimatesFlag(v bool) {
	o.IncludeEstimatesFlag.Set(&v)
}
// SetIncludeEstimatesFlagNil sets the value for IncludeEstimatesFlag to be an explicit nil
func (o *Project) SetIncludeEstimatesFlagNil() {
	o.IncludeEstimatesFlag.Set(nil)
}

// UnsetIncludeEstimatesFlag ensures that no value is present for IncludeEstimatesFlag, not even an explicit nil
func (o *Project) UnsetIncludeEstimatesFlag() {
	o.IncludeEstimatesFlag.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Project) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Project) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Project) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Project) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Project) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *Project) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *Project) GetManager() MemberReference {
	if o == nil || IsNil(o.Manager) {
		var ret MemberReference
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *Project) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given MemberReference and assigns it to the Manager field.
func (o *Project) SetManager(v MemberReference) {
	o.Manager = &v
}

// GetName returns the Name field value
func (o *Project) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Project) SetName(v string) {
	o.Name = v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *Project) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *Project) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *Project) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetProjectTemplateId returns the ProjectTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetProjectTemplateId() int32 {
	if o == nil || IsNil(o.ProjectTemplateId.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectTemplateId.Get()
}

// GetProjectTemplateIdOk returns a tuple with the ProjectTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetProjectTemplateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectTemplateId.Get(), o.ProjectTemplateId.IsSet()
}

// HasProjectTemplateId returns a boolean if a field has been set.
func (o *Project) HasProjectTemplateId() bool {
	if o != nil && o.ProjectTemplateId.IsSet() {
		return true
	}

	return false
}

// SetProjectTemplateId gets a reference to the given NullableInt32 and assigns it to the ProjectTemplateId field.
func (o *Project) SetProjectTemplateId(v int32) {
	o.ProjectTemplateId.Set(&v)
}
// SetProjectTemplateIdNil sets the value for ProjectTemplateId to be an explicit nil
func (o *Project) SetProjectTemplateIdNil() {
	o.ProjectTemplateId.Set(nil)
}

// UnsetProjectTemplateId ensures that no value is present for ProjectTemplateId, not even an explicit nil
func (o *Project) UnsetProjectTemplateId() {
	o.ProjectTemplateId.Unset()
}

// GetRestrictDownPaymentFlag returns the RestrictDownPaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetRestrictDownPaymentFlag() bool {
	if o == nil || IsNil(o.RestrictDownPaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDownPaymentFlag.Get()
}

// GetRestrictDownPaymentFlagOk returns a tuple with the RestrictDownPaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetRestrictDownPaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDownPaymentFlag.Get(), o.RestrictDownPaymentFlag.IsSet()
}

// HasRestrictDownPaymentFlag returns a boolean if a field has been set.
func (o *Project) HasRestrictDownPaymentFlag() bool {
	if o != nil && o.RestrictDownPaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDownPaymentFlag gets a reference to the given NullableBool and assigns it to the RestrictDownPaymentFlag field.
func (o *Project) SetRestrictDownPaymentFlag(v bool) {
	o.RestrictDownPaymentFlag.Set(&v)
}
// SetRestrictDownPaymentFlagNil sets the value for RestrictDownPaymentFlag to be an explicit nil
func (o *Project) SetRestrictDownPaymentFlagNil() {
	o.RestrictDownPaymentFlag.Set(nil)
}

// UnsetRestrictDownPaymentFlag ensures that no value is present for RestrictDownPaymentFlag, not even an explicit nil
func (o *Project) UnsetRestrictDownPaymentFlag() {
	o.RestrictDownPaymentFlag.Unset()
}

// GetScheduledEnd returns the ScheduledEnd field value if set, zero value otherwise.
func (o *Project) GetScheduledEnd() time.Time {
	if o == nil || IsNil(o.ScheduledEnd) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledEnd
}

// GetScheduledEndOk returns a tuple with the ScheduledEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetScheduledEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledEnd) {
		return nil, false
	}
	return o.ScheduledEnd, true
}

// HasScheduledEnd returns a boolean if a field has been set.
func (o *Project) HasScheduledEnd() bool {
	if o != nil && !IsNil(o.ScheduledEnd) {
		return true
	}

	return false
}

// SetScheduledEnd gets a reference to the given time.Time and assigns it to the ScheduledEnd field.
func (o *Project) SetScheduledEnd(v time.Time) {
	o.ScheduledEnd = &v
}

// GetScheduledHours returns the ScheduledHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetScheduledHours() float64 {
	if o == nil || IsNil(o.ScheduledHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ScheduledHours.Get()
}

// GetScheduledHoursOk returns a tuple with the ScheduledHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetScheduledHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduledHours.Get(), o.ScheduledHours.IsSet()
}

// HasScheduledHours returns a boolean if a field has been set.
func (o *Project) HasScheduledHours() bool {
	if o != nil && o.ScheduledHours.IsSet() {
		return true
	}

	return false
}

// SetScheduledHours gets a reference to the given NullableFloat64 and assigns it to the ScheduledHours field.
func (o *Project) SetScheduledHours(v float64) {
	o.ScheduledHours.Set(&v)
}
// SetScheduledHoursNil sets the value for ScheduledHours to be an explicit nil
func (o *Project) SetScheduledHoursNil() {
	o.ScheduledHours.Set(nil)
}

// UnsetScheduledHours ensures that no value is present for ScheduledHours, not even an explicit nil
func (o *Project) UnsetScheduledHours() {
	o.ScheduledHours.Unset()
}

// GetScheduledStart returns the ScheduledStart field value if set, zero value otherwise.
func (o *Project) GetScheduledStart() time.Time {
	if o == nil || IsNil(o.ScheduledStart) {
		var ret time.Time
		return ret
	}
	return *o.ScheduledStart
}

// GetScheduledStartOk returns a tuple with the ScheduledStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetScheduledStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduledStart) {
		return nil, false
	}
	return o.ScheduledStart, true
}

// HasScheduledStart returns a boolean if a field has been set.
func (o *Project) HasScheduledStart() bool {
	if o != nil && !IsNil(o.ScheduledStart) {
		return true
	}

	return false
}

// SetScheduledStart gets a reference to the given time.Time and assigns it to the ScheduledStart field.
func (o *Project) SetScheduledStart(v time.Time) {
	o.ScheduledStart = &v
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *Project) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *Project) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *Project) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToContact returns the ShipToContact field value if set, zero value otherwise.
func (o *Project) GetShipToContact() ContactReference {
	if o == nil || IsNil(o.ShipToContact) {
		var ret ContactReference
		return ret
	}
	return *o.ShipToContact
}

// GetShipToContactOk returns a tuple with the ShipToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetShipToContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.ShipToContact) {
		return nil, false
	}
	return o.ShipToContact, true
}

// HasShipToContact returns a boolean if a field has been set.
func (o *Project) HasShipToContact() bool {
	if o != nil && !IsNil(o.ShipToContact) {
		return true
	}

	return false
}

// SetShipToContact gets a reference to the given ContactReference and assigns it to the ShipToContact field.
func (o *Project) SetShipToContact(v ContactReference) {
	o.ShipToContact = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *Project) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *Project) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *Project) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Project) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Project) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *Project) SetSite(v SiteReference) {
	o.Site = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Project) GetStatus() ProjectStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ProjectStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetStatusOk() (*ProjectStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Project) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProjectStatusReference and assigns it to the Status field.
func (o *Project) SetStatus(v ProjectStatusReference) {
	o.Status = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise.
func (o *Project) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetClosedFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ClosedFlag) {
		return nil, false
	}
	return o.ClosedFlag, true
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *Project) HasClosedFlag() bool {
	if o != nil && !IsNil(o.ClosedFlag) {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given bool and assigns it to the ClosedFlag field.
func (o *Project) SetClosedFlag(v bool) {
	o.ClosedFlag = &v
}

// GetTimeApprover returns the TimeApprover field value if set, zero value otherwise.
func (o *Project) GetTimeApprover() MemberReference {
	if o == nil || IsNil(o.TimeApprover) {
		var ret MemberReference
		return ret
	}
	return *o.TimeApprover
}

// GetTimeApproverOk returns a tuple with the TimeApprover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetTimeApproverOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.TimeApprover) {
		return nil, false
	}
	return o.TimeApprover, true
}

// HasTimeApprover returns a boolean if a field has been set.
func (o *Project) HasTimeApprover() bool {
	if o != nil && !IsNil(o.TimeApprover) {
		return true
	}

	return false
}

// SetTimeApprover gets a reference to the given MemberReference and assigns it to the TimeApprover field.
func (o *Project) SetTimeApprover(v MemberReference) {
	o.TimeApprover = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Project) GetType() ProjectTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ProjectTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetTypeOk() (*ProjectTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Project) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProjectTypeReference and assigns it to the Type field.
func (o *Project) SetType(v ProjectTypeReference) {
	o.Type = &v
}

// GetDoNotDisplayInPortalFlag returns the DoNotDisplayInPortalFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetDoNotDisplayInPortalFlag() bool {
	if o == nil || IsNil(o.DoNotDisplayInPortalFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DoNotDisplayInPortalFlag.Get()
}

// GetDoNotDisplayInPortalFlagOk returns a tuple with the DoNotDisplayInPortalFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetDoNotDisplayInPortalFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoNotDisplayInPortalFlag.Get(), o.DoNotDisplayInPortalFlag.IsSet()
}

// HasDoNotDisplayInPortalFlag returns a boolean if a field has been set.
func (o *Project) HasDoNotDisplayInPortalFlag() bool {
	if o != nil && o.DoNotDisplayInPortalFlag.IsSet() {
		return true
	}

	return false
}

// SetDoNotDisplayInPortalFlag gets a reference to the given NullableBool and assigns it to the DoNotDisplayInPortalFlag field.
func (o *Project) SetDoNotDisplayInPortalFlag(v bool) {
	o.DoNotDisplayInPortalFlag.Set(&v)
}
// SetDoNotDisplayInPortalFlagNil sets the value for DoNotDisplayInPortalFlag to be an explicit nil
func (o *Project) SetDoNotDisplayInPortalFlagNil() {
	o.DoNotDisplayInPortalFlag.Set(nil)
}

// UnsetDoNotDisplayInPortalFlag ensures that no value is present for DoNotDisplayInPortalFlag, not even an explicit nil
func (o *Project) UnsetDoNotDisplayInPortalFlag() {
	o.DoNotDisplayInPortalFlag.Unset()
}

// GetBillingStartDate returns the BillingStartDate field value if set, zero value otherwise.
func (o *Project) GetBillingStartDate() time.Time {
	if o == nil || IsNil(o.BillingStartDate) {
		var ret time.Time
		return ret
	}
	return *o.BillingStartDate
}

// GetBillingStartDateOk returns a tuple with the BillingStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBillingStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BillingStartDate) {
		return nil, false
	}
	return o.BillingStartDate, true
}

// HasBillingStartDate returns a boolean if a field has been set.
func (o *Project) HasBillingStartDate() bool {
	if o != nil && !IsNil(o.BillingStartDate) {
		return true
	}

	return false
}

// SetBillingStartDate gets a reference to the given time.Time and assigns it to the BillingStartDate field.
func (o *Project) SetBillingStartDate(v time.Time) {
	o.BillingStartDate = &v
}

// GetPoAmount returns the PoAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetPoAmount() float64 {
	if o == nil || IsNil(o.PoAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.PoAmount.Get()
}

// GetPoAmountOk returns a tuple with the PoAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetPoAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoAmount.Get(), o.PoAmount.IsSet()
}

// HasPoAmount returns a boolean if a field has been set.
func (o *Project) HasPoAmount() bool {
	if o != nil && o.PoAmount.IsSet() {
		return true
	}

	return false
}

// SetPoAmount gets a reference to the given NullableFloat64 and assigns it to the PoAmount field.
func (o *Project) SetPoAmount(v float64) {
	o.PoAmount.Set(&v)
}
// SetPoAmountNil sets the value for PoAmount to be an explicit nil
func (o *Project) SetPoAmountNil() {
	o.PoAmount.Set(nil)
}

// UnsetPoAmount ensures that no value is present for PoAmount, not even an explicit nil
func (o *Project) UnsetPoAmount() {
	o.PoAmount.Unset()
}

// GetEstimatedTimeCost returns the EstimatedTimeCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedTimeCost() float64 {
	if o == nil || IsNil(o.EstimatedTimeCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeCost.Get()
}

// GetEstimatedTimeCostOk returns a tuple with the EstimatedTimeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedTimeCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedTimeCost.Get(), o.EstimatedTimeCost.IsSet()
}

// HasEstimatedTimeCost returns a boolean if a field has been set.
func (o *Project) HasEstimatedTimeCost() bool {
	if o != nil && o.EstimatedTimeCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedTimeCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedTimeCost field.
func (o *Project) SetEstimatedTimeCost(v float64) {
	o.EstimatedTimeCost.Set(&v)
}
// SetEstimatedTimeCostNil sets the value for EstimatedTimeCost to be an explicit nil
func (o *Project) SetEstimatedTimeCostNil() {
	o.EstimatedTimeCost.Set(nil)
}

// UnsetEstimatedTimeCost ensures that no value is present for EstimatedTimeCost, not even an explicit nil
func (o *Project) UnsetEstimatedTimeCost() {
	o.EstimatedTimeCost.Unset()
}

// GetEstimatedExpenseCost returns the EstimatedExpenseCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedExpenseCost() float64 {
	if o == nil || IsNil(o.EstimatedExpenseCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedExpenseCost.Get()
}

// GetEstimatedExpenseCostOk returns a tuple with the EstimatedExpenseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedExpenseCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedExpenseCost.Get(), o.EstimatedExpenseCost.IsSet()
}

// HasEstimatedExpenseCost returns a boolean if a field has been set.
func (o *Project) HasEstimatedExpenseCost() bool {
	if o != nil && o.EstimatedExpenseCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedExpenseCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedExpenseCost field.
func (o *Project) SetEstimatedExpenseCost(v float64) {
	o.EstimatedExpenseCost.Set(&v)
}
// SetEstimatedExpenseCostNil sets the value for EstimatedExpenseCost to be an explicit nil
func (o *Project) SetEstimatedExpenseCostNil() {
	o.EstimatedExpenseCost.Set(nil)
}

// UnsetEstimatedExpenseCost ensures that no value is present for EstimatedExpenseCost, not even an explicit nil
func (o *Project) UnsetEstimatedExpenseCost() {
	o.EstimatedExpenseCost.Unset()
}

// GetEstimatedProductCost returns the EstimatedProductCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Project) GetEstimatedProductCost() float64 {
	if o == nil || IsNil(o.EstimatedProductCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedProductCost.Get()
}

// GetEstimatedProductCostOk returns a tuple with the EstimatedProductCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Project) GetEstimatedProductCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedProductCost.Get(), o.EstimatedProductCost.IsSet()
}

// HasEstimatedProductCost returns a boolean if a field has been set.
func (o *Project) HasEstimatedProductCost() bool {
	if o != nil && o.EstimatedProductCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedProductCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedProductCost field.
func (o *Project) SetEstimatedProductCost(v float64) {
	o.EstimatedProductCost.Set(&v)
}
// SetEstimatedProductCostNil sets the value for EstimatedProductCost to be an explicit nil
func (o *Project) SetEstimatedProductCostNil() {
	o.EstimatedProductCost.Set(nil)
}

// UnsetEstimatedProductCost ensures that no value is present for EstimatedProductCost, not even an explicit nil
func (o *Project) UnsetEstimatedProductCost() {
	o.EstimatedProductCost.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *Project) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *Project) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *Project) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetCompanyLocation returns the CompanyLocation field value if set, zero value otherwise.
func (o *Project) GetCompanyLocation() SystemLocationReference {
	if o == nil || IsNil(o.CompanyLocation) {
		var ret SystemLocationReference
		return ret
	}
	return *o.CompanyLocation
}

// GetCompanyLocationOk returns a tuple with the CompanyLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCompanyLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.CompanyLocation) {
		return nil, false
	}
	return o.CompanyLocation, true
}

// HasCompanyLocation returns a boolean if a field has been set.
func (o *Project) HasCompanyLocation() bool {
	if o != nil && !IsNil(o.CompanyLocation) {
		return true
	}

	return false
}

// SetCompanyLocation gets a reference to the given SystemLocationReference and assigns it to the CompanyLocation field.
func (o *Project) SetCompanyLocation(v SystemLocationReference) {
	o.CompanyLocation = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Project) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Project) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Project) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Project) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Project) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Project) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ActualEnd) {
		toSerialize["actualEnd"] = o.ActualEnd
	}
	if o.ActualHours.IsSet() {
		toSerialize["actualHours"] = o.ActualHours.Get()
	}
	if !IsNil(o.ActualStart) {
		toSerialize["actualStart"] = o.ActualStart
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if o.BillExpenses.IsSet() {
		toSerialize["billExpenses"] = o.BillExpenses.Get()
	}
	if o.BillingAmount.IsSet() {
		toSerialize["billingAmount"] = o.BillingAmount.Get()
	}
	if !IsNil(o.BillingAttention) {
		toSerialize["billingAttention"] = o.BillingAttention
	}
	toSerialize["billingMethod"] = o.BillingMethod.Get()
	if o.BillingRateType.IsSet() {
		toSerialize["billingRateType"] = o.BillingRateType.Get()
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if o.BillProducts.IsSet() {
		toSerialize["billProducts"] = o.BillProducts.Get()
	}
	if o.BillProjectAfterClosedFlag.IsSet() {
		toSerialize["billProjectAfterClosedFlag"] = o.BillProjectAfterClosedFlag.Get()
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.BillToContact) {
		toSerialize["billToContact"] = o.BillToContact
	}
	if !IsNil(o.BillToSite) {
		toSerialize["billToSite"] = o.BillToSite
	}
	if o.BillUnapprovedTimeAndExpense.IsSet() {
		toSerialize["billUnapprovedTimeAndExpense"] = o.BillUnapprovedTimeAndExpense.Get()
	}
	toSerialize["board"] = o.Board
	if o.BudgetAnalysis.IsSet() {
		toSerialize["budgetAnalysis"] = o.BudgetAnalysis.Get()
	}
	if o.BudgetFlag.IsSet() {
		toSerialize["budgetFlag"] = o.BudgetFlag.Get()
	}
	if o.BudgetHours.IsSet() {
		toSerialize["budgetHours"] = o.BudgetHours.Get()
	}
	toSerialize["company"] = o.Company
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.CustomerPO) {
		toSerialize["customerPO"] = o.CustomerPO
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Downpayment.IsSet() {
		toSerialize["downpayment"] = o.Downpayment.Get()
	}
	toSerialize["estimatedEnd"] = o.EstimatedEnd
	if o.PercentComplete.IsSet() {
		toSerialize["percentComplete"] = o.PercentComplete.Get()
	}
	if o.EstimatedExpenseRevenue.IsSet() {
		toSerialize["estimatedExpenseRevenue"] = o.EstimatedExpenseRevenue.Get()
	}
	if o.EstimatedHours.IsSet() {
		toSerialize["estimatedHours"] = o.EstimatedHours.Get()
	}
	if o.EstimatedProductRevenue.IsSet() {
		toSerialize["estimatedProductRevenue"] = o.EstimatedProductRevenue.Get()
	}
	toSerialize["estimatedStart"] = o.EstimatedStart
	if o.EstimatedTimeRevenue.IsSet() {
		toSerialize["estimatedTimeRevenue"] = o.EstimatedTimeRevenue.Get()
	}
	if !IsNil(o.ExpenseApprover) {
		toSerialize["expenseApprover"] = o.ExpenseApprover
	}
	if o.IncludeDependenciesFlag.IsSet() {
		toSerialize["includeDependenciesFlag"] = o.IncludeDependenciesFlag.Get()
	}
	if o.IncludeEstimatesFlag.IsSet() {
		toSerialize["includeEstimatesFlag"] = o.IncludeEstimatesFlag.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if o.ProjectTemplateId.IsSet() {
		toSerialize["projectTemplateId"] = o.ProjectTemplateId.Get()
	}
	if o.RestrictDownPaymentFlag.IsSet() {
		toSerialize["restrictDownPaymentFlag"] = o.RestrictDownPaymentFlag.Get()
	}
	if !IsNil(o.ScheduledEnd) {
		toSerialize["scheduledEnd"] = o.ScheduledEnd
	}
	if o.ScheduledHours.IsSet() {
		toSerialize["scheduledHours"] = o.ScheduledHours.Get()
	}
	if !IsNil(o.ScheduledStart) {
		toSerialize["scheduledStart"] = o.ScheduledStart
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToContact) {
		toSerialize["shipToContact"] = o.ShipToContact
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ClosedFlag) {
		toSerialize["closedFlag"] = o.ClosedFlag
	}
	if !IsNil(o.TimeApprover) {
		toSerialize["timeApprover"] = o.TimeApprover
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.DoNotDisplayInPortalFlag.IsSet() {
		toSerialize["doNotDisplayInPortalFlag"] = o.DoNotDisplayInPortalFlag.Get()
	}
	if !IsNil(o.BillingStartDate) {
		toSerialize["billingStartDate"] = o.BillingStartDate
	}
	if o.PoAmount.IsSet() {
		toSerialize["poAmount"] = o.PoAmount.Get()
	}
	if o.EstimatedTimeCost.IsSet() {
		toSerialize["estimatedTimeCost"] = o.EstimatedTimeCost.Get()
	}
	if o.EstimatedExpenseCost.IsSet() {
		toSerialize["estimatedExpenseCost"] = o.EstimatedExpenseCost.Get()
	}
	if o.EstimatedProductCost.IsSet() {
		toSerialize["estimatedProductCost"] = o.EstimatedProductCost.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.CompanyLocation) {
		toSerialize["companyLocation"] = o.CompanyLocation
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Project) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"billingMethod",
		"board",
		"company",
		"estimatedEnd",
		"estimatedStart",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProject := _Project{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProject)

	if err != nil {
		return err
	}

	*o = Project(varProject)

	return err
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


