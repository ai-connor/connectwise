/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProjectTicket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTicket{}

// ProjectTicket struct for ProjectTicket
type ProjectTicket struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Summary string `json:"summary"`
	IsIssueFlag NullableBool `json:"isIssueFlag,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	Status *ServiceStatusReference `json:"status,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	WorkType *WorkTypeReference `json:"workType,omitempty"`
	Project *ProjectReference `json:"project,omitempty"`
	Phase ProjectPhaseReference `json:"phase"`
	//  Max length: 50;
	WbsCode *string `json:"wbsCode,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	Site *SiteReference `json:"site,omitempty"`
	//  Max length: 50;
	SiteName *string `json:"siteName,omitempty"`
	//  Max length: 50;
	AddressLine1 *string `json:"addressLine1,omitempty"`
	//  Max length: 50;
	AddressLine2 *string `json:"addressLine2,omitempty"`
	//  Max length: 50;
	City *string `json:"city,omitempty"`
	//  Max length: 50;
	StateIdentifier *string `json:"stateIdentifier,omitempty"`
	//  Max length: 12;
	Zip *string `json:"zip,omitempty"`
	Country *CountryReference `json:"country,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	//  Max length: 62;
	ContactName *string `json:"contactName,omitempty"`
	//  Max length: 20;
	ContactPhoneNumber *string `json:"contactPhoneNumber,omitempty"`
	//  Max length: 15;
	ContactPhoneExtension *string `json:"contactPhoneExtension,omitempty"`
	//  Max length: 250;
	ContactEmailAddress *string `json:"contactEmailAddress,omitempty"`
	Type *ServiceTypeReference `json:"type,omitempty"`
	SubType *ServiceSubTypeReference `json:"subType,omitempty"`
	Item *ServiceItemReference `json:"item,omitempty"`
	Owner *MemberReference `json:"owner,omitempty"`
	Priority *PriorityReference `json:"priority,omitempty"`
	ServiceLocation *ServiceLocationReference `json:"serviceLocation,omitempty"`
	Source *ServiceSourceReference `json:"source,omitempty"`
	RequiredDate *time.Time `json:"requiredDate,omitempty"`
	BudgetHours NullableFloat64 `json:"budgetHours,omitempty"`
	Opportunity *OpportunityReference `json:"opportunity,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	AgreementType *string `json:"agreementType,omitempty"`
	KnowledgeBaseCategoryId NullableInt32 `json:"knowledgeBaseCategoryId,omitempty"`
	KnowledgeBaseSubCategoryId NullableInt32 `json:"knowledgeBaseSubCategoryId,omitempty"`
	KnowledgeBaseLinkId NullableInt32 `json:"knowledgeBaseLinkId,omitempty"`
	KnowledgeBaseLinkType NullableString `json:"knowledgeBaseLinkType,omitempty"`
	AllowAllClientsPortalView NullableBool `json:"allowAllClientsPortalView,omitempty"`
	CustomerUpdatedFlag NullableBool `json:"customerUpdatedFlag,omitempty"`
	AutomaticEmailContactFlag NullableBool `json:"automaticEmailContactFlag,omitempty"`
	AutomaticEmailResourceFlag NullableBool `json:"automaticEmailResourceFlag,omitempty"`
	AutomaticEmailCcFlag NullableBool `json:"automaticEmailCcFlag,omitempty"`
	//  Max length: 1000;
	AutomaticEmailCc *string `json:"automaticEmailCc,omitempty"`
	ClosedDate *string `json:"closedDate,omitempty"`
	ClosedBy *string `json:"closedBy,omitempty"`
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	ActualHours NullableFloat64 `json:"actualHours,omitempty"`
	Approved NullableBool `json:"approved,omitempty"`
	SubBillingMethod NullableString `json:"subBillingMethod,omitempty"`
	SubBillingAmount NullableFloat64 `json:"subBillingAmount,omitempty"`
	SubDateAccepted *string `json:"subDateAccepted,omitempty"`
	Resources *string `json:"resources,omitempty"`
	BillTime NullableString `json:"billTime,omitempty"`
	BillExpenses NullableString `json:"billExpenses,omitempty"`
	BillProducts NullableString `json:"billProducts,omitempty"`
	PredecessorType NullableString `json:"predecessorType,omitempty"`
	PredecessorId NullableInt32 `json:"predecessorId,omitempty"`
	PredecessorClosedFlag NullableBool `json:"predecessorClosedFlag,omitempty"`
	LagDays NullableInt32 `json:"lagDays,omitempty"`
	LagNonworkingDaysFlag NullableBool `json:"lagNonworkingDaysFlag,omitempty"`
	EstimatedStartDate *time.Time `json:"estimatedStartDate,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Duration NullableInt32 `json:"duration,omitempty"`
	ScheduleStartDate *time.Time `json:"scheduleStartDate,omitempty"`
	ScheduleEndDate *time.Time `json:"scheduleEndDate,omitempty"`
	MobileGuid NullableString `json:"mobileGuid,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	Tasks []TicketTask `json:"tasks,omitempty"`
	// Only available for POST, will not be returned in the response.
	InitialDescription *string `json:"initialDescription,omitempty"`
	// Only available for POST, will not be returned in the response.
	InitialInternalAnalysis *string `json:"initialInternalAnalysis,omitempty"`
	// Only available for POST, will not be returned in the response.
	InitialResolution *string `json:"initialResolution,omitempty"`
	ContactEmailLookup *string `json:"contactEmailLookup,omitempty"`
	// Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True).
	ProcessNotifications NullableBool `json:"processNotifications,omitempty"`
	SkipCallback NullableBool `json:"skipCallback,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _ProjectTicket ProjectTicket

// NewProjectTicket instantiates a new ProjectTicket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTicket(summary string, phase ProjectPhaseReference) *ProjectTicket {
	this := ProjectTicket{}
	this.Summary = summary
	this.Phase = phase
	return &this
}

// NewProjectTicketWithDefaults instantiates a new ProjectTicket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTicketWithDefaults() *ProjectTicket {
	this := ProjectTicket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectTicket) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectTicket) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectTicket) SetId(v int32) {
	o.Id = &v
}

// GetSummary returns the Summary field value
func (o *ProjectTicket) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *ProjectTicket) SetSummary(v string) {
	o.Summary = v
}

// GetIsIssueFlag returns the IsIssueFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetIsIssueFlag() bool {
	if o == nil || IsNil(o.IsIssueFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IsIssueFlag.Get()
}

// GetIsIssueFlagOk returns a tuple with the IsIssueFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetIsIssueFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsIssueFlag.Get(), o.IsIssueFlag.IsSet()
}

// HasIsIssueFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasIsIssueFlag() bool {
	if o != nil && o.IsIssueFlag.IsSet() {
		return true
	}

	return false
}

// SetIsIssueFlag gets a reference to the given NullableBool and assigns it to the IsIssueFlag field.
func (o *ProjectTicket) SetIsIssueFlag(v bool) {
	o.IsIssueFlag.Set(&v)
}
// SetIsIssueFlagNil sets the value for IsIssueFlag to be an explicit nil
func (o *ProjectTicket) SetIsIssueFlagNil() {
	o.IsIssueFlag.Set(nil)
}

// UnsetIsIssueFlag ensures that no value is present for IsIssueFlag, not even an explicit nil
func (o *ProjectTicket) UnsetIsIssueFlag() {
	o.IsIssueFlag.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *ProjectTicket) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *ProjectTicket) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *ProjectTicket) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectTicket) GetStatus() ServiceStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectTicket) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ServiceStatusReference and assigns it to the Status field.
func (o *ProjectTicket) SetStatus(v ServiceStatusReference) {
	o.Status = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *ProjectTicket) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *ProjectTicket) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *ProjectTicket) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *ProjectTicket) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *ProjectTicket) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *ProjectTicket) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProjectTicket) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProjectTicket) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *ProjectTicket) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetPhase returns the Phase field value
func (o *ProjectTicket) GetPhase() ProjectPhaseReference {
	if o == nil {
		var ret ProjectPhaseReference
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *ProjectTicket) SetPhase(v ProjectPhaseReference) {
	o.Phase = v
}

// GetWbsCode returns the WbsCode field value if set, zero value otherwise.
func (o *ProjectTicket) GetWbsCode() string {
	if o == nil || IsNil(o.WbsCode) {
		var ret string
		return ret
	}
	return *o.WbsCode
}

// GetWbsCodeOk returns a tuple with the WbsCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetWbsCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WbsCode) {
		return nil, false
	}
	return o.WbsCode, true
}

// HasWbsCode returns a boolean if a field has been set.
func (o *ProjectTicket) HasWbsCode() bool {
	if o != nil && !IsNil(o.WbsCode) {
		return true
	}

	return false
}

// SetWbsCode gets a reference to the given string and assigns it to the WbsCode field.
func (o *ProjectTicket) SetWbsCode(v string) {
	o.WbsCode = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ProjectTicket) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ProjectTicket) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *ProjectTicket) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *ProjectTicket) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *ProjectTicket) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *ProjectTicket) SetSite(v SiteReference) {
	o.Site = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *ProjectTicket) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *ProjectTicket) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *ProjectTicket) SetSiteName(v string) {
	o.SiteName = &v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *ProjectTicket) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *ProjectTicket) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *ProjectTicket) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *ProjectTicket) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *ProjectTicket) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *ProjectTicket) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ProjectTicket) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ProjectTicket) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ProjectTicket) SetCity(v string) {
	o.City = &v
}

// GetStateIdentifier returns the StateIdentifier field value if set, zero value otherwise.
func (o *ProjectTicket) GetStateIdentifier() string {
	if o == nil || IsNil(o.StateIdentifier) {
		var ret string
		return ret
	}
	return *o.StateIdentifier
}

// GetStateIdentifierOk returns a tuple with the StateIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetStateIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.StateIdentifier) {
		return nil, false
	}
	return o.StateIdentifier, true
}

// HasStateIdentifier returns a boolean if a field has been set.
func (o *ProjectTicket) HasStateIdentifier() bool {
	if o != nil && !IsNil(o.StateIdentifier) {
		return true
	}

	return false
}

// SetStateIdentifier gets a reference to the given string and assigns it to the StateIdentifier field.
func (o *ProjectTicket) SetStateIdentifier(v string) {
	o.StateIdentifier = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *ProjectTicket) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *ProjectTicket) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *ProjectTicket) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ProjectTicket) GetCountry() CountryReference {
	if o == nil || IsNil(o.Country) {
		var ret CountryReference
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ProjectTicket) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given CountryReference and assigns it to the Country field.
func (o *ProjectTicket) SetCountry(v CountryReference) {
	o.Country = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ProjectTicket) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ProjectTicket) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ProjectTicket) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *ProjectTicket) GetContactName() string {
	if o == nil || IsNil(o.ContactName) {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContactName) {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *ProjectTicket) HasContactName() bool {
	if o != nil && !IsNil(o.ContactName) {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *ProjectTicket) SetContactName(v string) {
	o.ContactName = &v
}

// GetContactPhoneNumber returns the ContactPhoneNumber field value if set, zero value otherwise.
func (o *ProjectTicket) GetContactPhoneNumber() string {
	if o == nil || IsNil(o.ContactPhoneNumber) {
		var ret string
		return ret
	}
	return *o.ContactPhoneNumber
}

// GetContactPhoneNumberOk returns a tuple with the ContactPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetContactPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ContactPhoneNumber) {
		return nil, false
	}
	return o.ContactPhoneNumber, true
}

// HasContactPhoneNumber returns a boolean if a field has been set.
func (o *ProjectTicket) HasContactPhoneNumber() bool {
	if o != nil && !IsNil(o.ContactPhoneNumber) {
		return true
	}

	return false
}

// SetContactPhoneNumber gets a reference to the given string and assigns it to the ContactPhoneNumber field.
func (o *ProjectTicket) SetContactPhoneNumber(v string) {
	o.ContactPhoneNumber = &v
}

// GetContactPhoneExtension returns the ContactPhoneExtension field value if set, zero value otherwise.
func (o *ProjectTicket) GetContactPhoneExtension() string {
	if o == nil || IsNil(o.ContactPhoneExtension) {
		var ret string
		return ret
	}
	return *o.ContactPhoneExtension
}

// GetContactPhoneExtensionOk returns a tuple with the ContactPhoneExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetContactPhoneExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.ContactPhoneExtension) {
		return nil, false
	}
	return o.ContactPhoneExtension, true
}

// HasContactPhoneExtension returns a boolean if a field has been set.
func (o *ProjectTicket) HasContactPhoneExtension() bool {
	if o != nil && !IsNil(o.ContactPhoneExtension) {
		return true
	}

	return false
}

// SetContactPhoneExtension gets a reference to the given string and assigns it to the ContactPhoneExtension field.
func (o *ProjectTicket) SetContactPhoneExtension(v string) {
	o.ContactPhoneExtension = &v
}

// GetContactEmailAddress returns the ContactEmailAddress field value if set, zero value otherwise.
func (o *ProjectTicket) GetContactEmailAddress() string {
	if o == nil || IsNil(o.ContactEmailAddress) {
		var ret string
		return ret
	}
	return *o.ContactEmailAddress
}

// GetContactEmailAddressOk returns a tuple with the ContactEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetContactEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmailAddress) {
		return nil, false
	}
	return o.ContactEmailAddress, true
}

// HasContactEmailAddress returns a boolean if a field has been set.
func (o *ProjectTicket) HasContactEmailAddress() bool {
	if o != nil && !IsNil(o.ContactEmailAddress) {
		return true
	}

	return false
}

// SetContactEmailAddress gets a reference to the given string and assigns it to the ContactEmailAddress field.
func (o *ProjectTicket) SetContactEmailAddress(v string) {
	o.ContactEmailAddress = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectTicket) GetType() ServiceTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectTicket) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceTypeReference and assigns it to the Type field.
func (o *ProjectTicket) SetType(v ServiceTypeReference) {
	o.Type = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ProjectTicket) GetSubType() ServiceSubTypeReference {
	if o == nil || IsNil(o.SubType) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetSubTypeOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ProjectTicket) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given ServiceSubTypeReference and assigns it to the SubType field.
func (o *ProjectTicket) SetSubType(v ServiceSubTypeReference) {
	o.SubType = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *ProjectTicket) GetItem() ServiceItemReference {
	if o == nil || IsNil(o.Item) {
		var ret ServiceItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *ProjectTicket) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given ServiceItemReference and assigns it to the Item field.
func (o *ProjectTicket) SetItem(v ServiceItemReference) {
	o.Item = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ProjectTicket) GetOwner() MemberReference {
	if o == nil || IsNil(o.Owner) {
		var ret MemberReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetOwnerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ProjectTicket) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given MemberReference and assigns it to the Owner field.
func (o *ProjectTicket) SetOwner(v MemberReference) {
	o.Owner = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ProjectTicket) GetPriority() PriorityReference {
	if o == nil || IsNil(o.Priority) {
		var ret PriorityReference
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetPriorityOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ProjectTicket) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given PriorityReference and assigns it to the Priority field.
func (o *ProjectTicket) SetPriority(v PriorityReference) {
	o.Priority = &v
}

// GetServiceLocation returns the ServiceLocation field value if set, zero value otherwise.
func (o *ProjectTicket) GetServiceLocation() ServiceLocationReference {
	if o == nil || IsNil(o.ServiceLocation) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.ServiceLocation
}

// GetServiceLocationOk returns a tuple with the ServiceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetServiceLocationOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.ServiceLocation) {
		return nil, false
	}
	return o.ServiceLocation, true
}

// HasServiceLocation returns a boolean if a field has been set.
func (o *ProjectTicket) HasServiceLocation() bool {
	if o != nil && !IsNil(o.ServiceLocation) {
		return true
	}

	return false
}

// SetServiceLocation gets a reference to the given ServiceLocationReference and assigns it to the ServiceLocation field.
func (o *ProjectTicket) SetServiceLocation(v ServiceLocationReference) {
	o.ServiceLocation = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ProjectTicket) GetSource() ServiceSourceReference {
	if o == nil || IsNil(o.Source) {
		var ret ServiceSourceReference
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetSourceOk() (*ServiceSourceReference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ProjectTicket) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ServiceSourceReference and assigns it to the Source field.
func (o *ProjectTicket) SetSource(v ServiceSourceReference) {
	o.Source = &v
}

// GetRequiredDate returns the RequiredDate field value if set, zero value otherwise.
func (o *ProjectTicket) GetRequiredDate() time.Time {
	if o == nil || IsNil(o.RequiredDate) {
		var ret time.Time
		return ret
	}
	return *o.RequiredDate
}

// GetRequiredDateOk returns a tuple with the RequiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetRequiredDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequiredDate) {
		return nil, false
	}
	return o.RequiredDate, true
}

// HasRequiredDate returns a boolean if a field has been set.
func (o *ProjectTicket) HasRequiredDate() bool {
	if o != nil && !IsNil(o.RequiredDate) {
		return true
	}

	return false
}

// SetRequiredDate gets a reference to the given time.Time and assigns it to the RequiredDate field.
func (o *ProjectTicket) SetRequiredDate(v time.Time) {
	o.RequiredDate = &v
}

// GetBudgetHours returns the BudgetHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetBudgetHours() float64 {
	if o == nil || IsNil(o.BudgetHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BudgetHours.Get()
}

// GetBudgetHoursOk returns a tuple with the BudgetHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetBudgetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetHours.Get(), o.BudgetHours.IsSet()
}

// HasBudgetHours returns a boolean if a field has been set.
func (o *ProjectTicket) HasBudgetHours() bool {
	if o != nil && o.BudgetHours.IsSet() {
		return true
	}

	return false
}

// SetBudgetHours gets a reference to the given NullableFloat64 and assigns it to the BudgetHours field.
func (o *ProjectTicket) SetBudgetHours(v float64) {
	o.BudgetHours.Set(&v)
}
// SetBudgetHoursNil sets the value for BudgetHours to be an explicit nil
func (o *ProjectTicket) SetBudgetHoursNil() {
	o.BudgetHours.Set(nil)
}

// UnsetBudgetHours ensures that no value is present for BudgetHours, not even an explicit nil
func (o *ProjectTicket) UnsetBudgetHours() {
	o.BudgetHours.Unset()
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *ProjectTicket) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *ProjectTicket) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *ProjectTicket) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *ProjectTicket) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *ProjectTicket) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *ProjectTicket) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *ProjectTicket) GetAgreementType() string {
	if o == nil || IsNil(o.AgreementType) {
		var ret string
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetAgreementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *ProjectTicket) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given string and assigns it to the AgreementType field.
func (o *ProjectTicket) SetAgreementType(v string) {
	o.AgreementType = &v
}

// GetKnowledgeBaseCategoryId returns the KnowledgeBaseCategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetKnowledgeBaseCategoryId() int32 {
	if o == nil || IsNil(o.KnowledgeBaseCategoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.KnowledgeBaseCategoryId.Get()
}

// GetKnowledgeBaseCategoryIdOk returns a tuple with the KnowledgeBaseCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetKnowledgeBaseCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseCategoryId.Get(), o.KnowledgeBaseCategoryId.IsSet()
}

// HasKnowledgeBaseCategoryId returns a boolean if a field has been set.
func (o *ProjectTicket) HasKnowledgeBaseCategoryId() bool {
	if o != nil && o.KnowledgeBaseCategoryId.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseCategoryId gets a reference to the given NullableInt32 and assigns it to the KnowledgeBaseCategoryId field.
func (o *ProjectTicket) SetKnowledgeBaseCategoryId(v int32) {
	o.KnowledgeBaseCategoryId.Set(&v)
}
// SetKnowledgeBaseCategoryIdNil sets the value for KnowledgeBaseCategoryId to be an explicit nil
func (o *ProjectTicket) SetKnowledgeBaseCategoryIdNil() {
	o.KnowledgeBaseCategoryId.Set(nil)
}

// UnsetKnowledgeBaseCategoryId ensures that no value is present for KnowledgeBaseCategoryId, not even an explicit nil
func (o *ProjectTicket) UnsetKnowledgeBaseCategoryId() {
	o.KnowledgeBaseCategoryId.Unset()
}

// GetKnowledgeBaseSubCategoryId returns the KnowledgeBaseSubCategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetKnowledgeBaseSubCategoryId() int32 {
	if o == nil || IsNil(o.KnowledgeBaseSubCategoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.KnowledgeBaseSubCategoryId.Get()
}

// GetKnowledgeBaseSubCategoryIdOk returns a tuple with the KnowledgeBaseSubCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetKnowledgeBaseSubCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseSubCategoryId.Get(), o.KnowledgeBaseSubCategoryId.IsSet()
}

// HasKnowledgeBaseSubCategoryId returns a boolean if a field has been set.
func (o *ProjectTicket) HasKnowledgeBaseSubCategoryId() bool {
	if o != nil && o.KnowledgeBaseSubCategoryId.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseSubCategoryId gets a reference to the given NullableInt32 and assigns it to the KnowledgeBaseSubCategoryId field.
func (o *ProjectTicket) SetKnowledgeBaseSubCategoryId(v int32) {
	o.KnowledgeBaseSubCategoryId.Set(&v)
}
// SetKnowledgeBaseSubCategoryIdNil sets the value for KnowledgeBaseSubCategoryId to be an explicit nil
func (o *ProjectTicket) SetKnowledgeBaseSubCategoryIdNil() {
	o.KnowledgeBaseSubCategoryId.Set(nil)
}

// UnsetKnowledgeBaseSubCategoryId ensures that no value is present for KnowledgeBaseSubCategoryId, not even an explicit nil
func (o *ProjectTicket) UnsetKnowledgeBaseSubCategoryId() {
	o.KnowledgeBaseSubCategoryId.Unset()
}

// GetKnowledgeBaseLinkId returns the KnowledgeBaseLinkId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetKnowledgeBaseLinkId() int32 {
	if o == nil || IsNil(o.KnowledgeBaseLinkId.Get()) {
		var ret int32
		return ret
	}
	return *o.KnowledgeBaseLinkId.Get()
}

// GetKnowledgeBaseLinkIdOk returns a tuple with the KnowledgeBaseLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetKnowledgeBaseLinkIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseLinkId.Get(), o.KnowledgeBaseLinkId.IsSet()
}

// HasKnowledgeBaseLinkId returns a boolean if a field has been set.
func (o *ProjectTicket) HasKnowledgeBaseLinkId() bool {
	if o != nil && o.KnowledgeBaseLinkId.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseLinkId gets a reference to the given NullableInt32 and assigns it to the KnowledgeBaseLinkId field.
func (o *ProjectTicket) SetKnowledgeBaseLinkId(v int32) {
	o.KnowledgeBaseLinkId.Set(&v)
}
// SetKnowledgeBaseLinkIdNil sets the value for KnowledgeBaseLinkId to be an explicit nil
func (o *ProjectTicket) SetKnowledgeBaseLinkIdNil() {
	o.KnowledgeBaseLinkId.Set(nil)
}

// UnsetKnowledgeBaseLinkId ensures that no value is present for KnowledgeBaseLinkId, not even an explicit nil
func (o *ProjectTicket) UnsetKnowledgeBaseLinkId() {
	o.KnowledgeBaseLinkId.Unset()
}

// GetKnowledgeBaseLinkType returns the KnowledgeBaseLinkType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetKnowledgeBaseLinkType() string {
	if o == nil || IsNil(o.KnowledgeBaseLinkType.Get()) {
		var ret string
		return ret
	}
	return *o.KnowledgeBaseLinkType.Get()
}

// GetKnowledgeBaseLinkTypeOk returns a tuple with the KnowledgeBaseLinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetKnowledgeBaseLinkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseLinkType.Get(), o.KnowledgeBaseLinkType.IsSet()
}

// HasKnowledgeBaseLinkType returns a boolean if a field has been set.
func (o *ProjectTicket) HasKnowledgeBaseLinkType() bool {
	if o != nil && o.KnowledgeBaseLinkType.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseLinkType gets a reference to the given NullableString and assigns it to the KnowledgeBaseLinkType field.
func (o *ProjectTicket) SetKnowledgeBaseLinkType(v string) {
	o.KnowledgeBaseLinkType.Set(&v)
}
// SetKnowledgeBaseLinkTypeNil sets the value for KnowledgeBaseLinkType to be an explicit nil
func (o *ProjectTicket) SetKnowledgeBaseLinkTypeNil() {
	o.KnowledgeBaseLinkType.Set(nil)
}

// UnsetKnowledgeBaseLinkType ensures that no value is present for KnowledgeBaseLinkType, not even an explicit nil
func (o *ProjectTicket) UnsetKnowledgeBaseLinkType() {
	o.KnowledgeBaseLinkType.Unset()
}

// GetAllowAllClientsPortalView returns the AllowAllClientsPortalView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetAllowAllClientsPortalView() bool {
	if o == nil || IsNil(o.AllowAllClientsPortalView.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowAllClientsPortalView.Get()
}

// GetAllowAllClientsPortalViewOk returns a tuple with the AllowAllClientsPortalView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetAllowAllClientsPortalViewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowAllClientsPortalView.Get(), o.AllowAllClientsPortalView.IsSet()
}

// HasAllowAllClientsPortalView returns a boolean if a field has been set.
func (o *ProjectTicket) HasAllowAllClientsPortalView() bool {
	if o != nil && o.AllowAllClientsPortalView.IsSet() {
		return true
	}

	return false
}

// SetAllowAllClientsPortalView gets a reference to the given NullableBool and assigns it to the AllowAllClientsPortalView field.
func (o *ProjectTicket) SetAllowAllClientsPortalView(v bool) {
	o.AllowAllClientsPortalView.Set(&v)
}
// SetAllowAllClientsPortalViewNil sets the value for AllowAllClientsPortalView to be an explicit nil
func (o *ProjectTicket) SetAllowAllClientsPortalViewNil() {
	o.AllowAllClientsPortalView.Set(nil)
}

// UnsetAllowAllClientsPortalView ensures that no value is present for AllowAllClientsPortalView, not even an explicit nil
func (o *ProjectTicket) UnsetAllowAllClientsPortalView() {
	o.AllowAllClientsPortalView.Unset()
}

// GetCustomerUpdatedFlag returns the CustomerUpdatedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetCustomerUpdatedFlag() bool {
	if o == nil || IsNil(o.CustomerUpdatedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomerUpdatedFlag.Get()
}

// GetCustomerUpdatedFlagOk returns a tuple with the CustomerUpdatedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetCustomerUpdatedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerUpdatedFlag.Get(), o.CustomerUpdatedFlag.IsSet()
}

// HasCustomerUpdatedFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasCustomerUpdatedFlag() bool {
	if o != nil && o.CustomerUpdatedFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomerUpdatedFlag gets a reference to the given NullableBool and assigns it to the CustomerUpdatedFlag field.
func (o *ProjectTicket) SetCustomerUpdatedFlag(v bool) {
	o.CustomerUpdatedFlag.Set(&v)
}
// SetCustomerUpdatedFlagNil sets the value for CustomerUpdatedFlag to be an explicit nil
func (o *ProjectTicket) SetCustomerUpdatedFlagNil() {
	o.CustomerUpdatedFlag.Set(nil)
}

// UnsetCustomerUpdatedFlag ensures that no value is present for CustomerUpdatedFlag, not even an explicit nil
func (o *ProjectTicket) UnsetCustomerUpdatedFlag() {
	o.CustomerUpdatedFlag.Unset()
}

// GetAutomaticEmailContactFlag returns the AutomaticEmailContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetAutomaticEmailContactFlag() bool {
	if o == nil || IsNil(o.AutomaticEmailContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutomaticEmailContactFlag.Get()
}

// GetAutomaticEmailContactFlagOk returns a tuple with the AutomaticEmailContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetAutomaticEmailContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutomaticEmailContactFlag.Get(), o.AutomaticEmailContactFlag.IsSet()
}

// HasAutomaticEmailContactFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasAutomaticEmailContactFlag() bool {
	if o != nil && o.AutomaticEmailContactFlag.IsSet() {
		return true
	}

	return false
}

// SetAutomaticEmailContactFlag gets a reference to the given NullableBool and assigns it to the AutomaticEmailContactFlag field.
func (o *ProjectTicket) SetAutomaticEmailContactFlag(v bool) {
	o.AutomaticEmailContactFlag.Set(&v)
}
// SetAutomaticEmailContactFlagNil sets the value for AutomaticEmailContactFlag to be an explicit nil
func (o *ProjectTicket) SetAutomaticEmailContactFlagNil() {
	o.AutomaticEmailContactFlag.Set(nil)
}

// UnsetAutomaticEmailContactFlag ensures that no value is present for AutomaticEmailContactFlag, not even an explicit nil
func (o *ProjectTicket) UnsetAutomaticEmailContactFlag() {
	o.AutomaticEmailContactFlag.Unset()
}

// GetAutomaticEmailResourceFlag returns the AutomaticEmailResourceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetAutomaticEmailResourceFlag() bool {
	if o == nil || IsNil(o.AutomaticEmailResourceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutomaticEmailResourceFlag.Get()
}

// GetAutomaticEmailResourceFlagOk returns a tuple with the AutomaticEmailResourceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetAutomaticEmailResourceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutomaticEmailResourceFlag.Get(), o.AutomaticEmailResourceFlag.IsSet()
}

// HasAutomaticEmailResourceFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasAutomaticEmailResourceFlag() bool {
	if o != nil && o.AutomaticEmailResourceFlag.IsSet() {
		return true
	}

	return false
}

// SetAutomaticEmailResourceFlag gets a reference to the given NullableBool and assigns it to the AutomaticEmailResourceFlag field.
func (o *ProjectTicket) SetAutomaticEmailResourceFlag(v bool) {
	o.AutomaticEmailResourceFlag.Set(&v)
}
// SetAutomaticEmailResourceFlagNil sets the value for AutomaticEmailResourceFlag to be an explicit nil
func (o *ProjectTicket) SetAutomaticEmailResourceFlagNil() {
	o.AutomaticEmailResourceFlag.Set(nil)
}

// UnsetAutomaticEmailResourceFlag ensures that no value is present for AutomaticEmailResourceFlag, not even an explicit nil
func (o *ProjectTicket) UnsetAutomaticEmailResourceFlag() {
	o.AutomaticEmailResourceFlag.Unset()
}

// GetAutomaticEmailCcFlag returns the AutomaticEmailCcFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetAutomaticEmailCcFlag() bool {
	if o == nil || IsNil(o.AutomaticEmailCcFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutomaticEmailCcFlag.Get()
}

// GetAutomaticEmailCcFlagOk returns a tuple with the AutomaticEmailCcFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetAutomaticEmailCcFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutomaticEmailCcFlag.Get(), o.AutomaticEmailCcFlag.IsSet()
}

// HasAutomaticEmailCcFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasAutomaticEmailCcFlag() bool {
	if o != nil && o.AutomaticEmailCcFlag.IsSet() {
		return true
	}

	return false
}

// SetAutomaticEmailCcFlag gets a reference to the given NullableBool and assigns it to the AutomaticEmailCcFlag field.
func (o *ProjectTicket) SetAutomaticEmailCcFlag(v bool) {
	o.AutomaticEmailCcFlag.Set(&v)
}
// SetAutomaticEmailCcFlagNil sets the value for AutomaticEmailCcFlag to be an explicit nil
func (o *ProjectTicket) SetAutomaticEmailCcFlagNil() {
	o.AutomaticEmailCcFlag.Set(nil)
}

// UnsetAutomaticEmailCcFlag ensures that no value is present for AutomaticEmailCcFlag, not even an explicit nil
func (o *ProjectTicket) UnsetAutomaticEmailCcFlag() {
	o.AutomaticEmailCcFlag.Unset()
}

// GetAutomaticEmailCc returns the AutomaticEmailCc field value if set, zero value otherwise.
func (o *ProjectTicket) GetAutomaticEmailCc() string {
	if o == nil || IsNil(o.AutomaticEmailCc) {
		var ret string
		return ret
	}
	return *o.AutomaticEmailCc
}

// GetAutomaticEmailCcOk returns a tuple with the AutomaticEmailCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetAutomaticEmailCcOk() (*string, bool) {
	if o == nil || IsNil(o.AutomaticEmailCc) {
		return nil, false
	}
	return o.AutomaticEmailCc, true
}

// HasAutomaticEmailCc returns a boolean if a field has been set.
func (o *ProjectTicket) HasAutomaticEmailCc() bool {
	if o != nil && !IsNil(o.AutomaticEmailCc) {
		return true
	}

	return false
}

// SetAutomaticEmailCc gets a reference to the given string and assigns it to the AutomaticEmailCc field.
func (o *ProjectTicket) SetAutomaticEmailCc(v string) {
	o.AutomaticEmailCc = &v
}

// GetClosedDate returns the ClosedDate field value if set, zero value otherwise.
func (o *ProjectTicket) GetClosedDate() string {
	if o == nil || IsNil(o.ClosedDate) {
		var ret string
		return ret
	}
	return *o.ClosedDate
}

// GetClosedDateOk returns a tuple with the ClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetClosedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedDate) {
		return nil, false
	}
	return o.ClosedDate, true
}

// HasClosedDate returns a boolean if a field has been set.
func (o *ProjectTicket) HasClosedDate() bool {
	if o != nil && !IsNil(o.ClosedDate) {
		return true
	}

	return false
}

// SetClosedDate gets a reference to the given string and assigns it to the ClosedDate field.
func (o *ProjectTicket) SetClosedDate(v string) {
	o.ClosedDate = &v
}

// GetClosedBy returns the ClosedBy field value if set, zero value otherwise.
func (o *ProjectTicket) GetClosedBy() string {
	if o == nil || IsNil(o.ClosedBy) {
		var ret string
		return ret
	}
	return *o.ClosedBy
}

// GetClosedByOk returns a tuple with the ClosedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetClosedByOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedBy) {
		return nil, false
	}
	return o.ClosedBy, true
}

// HasClosedBy returns a boolean if a field has been set.
func (o *ProjectTicket) HasClosedBy() bool {
	if o != nil && !IsNil(o.ClosedBy) {
		return true
	}

	return false
}

// SetClosedBy gets a reference to the given string and assigns it to the ClosedBy field.
func (o *ProjectTicket) SetClosedBy(v string) {
	o.ClosedBy = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *ProjectTicket) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *ProjectTicket) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *ProjectTicket) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetActualHours returns the ActualHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetActualHours() float64 {
	if o == nil || IsNil(o.ActualHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualHours.Get()
}

// GetActualHoursOk returns a tuple with the ActualHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetActualHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualHours.Get(), o.ActualHours.IsSet()
}

// HasActualHours returns a boolean if a field has been set.
func (o *ProjectTicket) HasActualHours() bool {
	if o != nil && o.ActualHours.IsSet() {
		return true
	}

	return false
}

// SetActualHours gets a reference to the given NullableFloat64 and assigns it to the ActualHours field.
func (o *ProjectTicket) SetActualHours(v float64) {
	o.ActualHours.Set(&v)
}
// SetActualHoursNil sets the value for ActualHours to be an explicit nil
func (o *ProjectTicket) SetActualHoursNil() {
	o.ActualHours.Set(nil)
}

// UnsetActualHours ensures that no value is present for ActualHours, not even an explicit nil
func (o *ProjectTicket) UnsetActualHours() {
	o.ActualHours.Unset()
}

// GetApproved returns the Approved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetApproved() bool {
	if o == nil || IsNil(o.Approved.Get()) {
		var ret bool
		return ret
	}
	return *o.Approved.Get()
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetApprovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Approved.Get(), o.Approved.IsSet()
}

// HasApproved returns a boolean if a field has been set.
func (o *ProjectTicket) HasApproved() bool {
	if o != nil && o.Approved.IsSet() {
		return true
	}

	return false
}

// SetApproved gets a reference to the given NullableBool and assigns it to the Approved field.
func (o *ProjectTicket) SetApproved(v bool) {
	o.Approved.Set(&v)
}
// SetApprovedNil sets the value for Approved to be an explicit nil
func (o *ProjectTicket) SetApprovedNil() {
	o.Approved.Set(nil)
}

// UnsetApproved ensures that no value is present for Approved, not even an explicit nil
func (o *ProjectTicket) UnsetApproved() {
	o.Approved.Unset()
}

// GetSubBillingMethod returns the SubBillingMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetSubBillingMethod() string {
	if o == nil || IsNil(o.SubBillingMethod.Get()) {
		var ret string
		return ret
	}
	return *o.SubBillingMethod.Get()
}

// GetSubBillingMethodOk returns a tuple with the SubBillingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetSubBillingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubBillingMethod.Get(), o.SubBillingMethod.IsSet()
}

// HasSubBillingMethod returns a boolean if a field has been set.
func (o *ProjectTicket) HasSubBillingMethod() bool {
	if o != nil && o.SubBillingMethod.IsSet() {
		return true
	}

	return false
}

// SetSubBillingMethod gets a reference to the given NullableString and assigns it to the SubBillingMethod field.
func (o *ProjectTicket) SetSubBillingMethod(v string) {
	o.SubBillingMethod.Set(&v)
}
// SetSubBillingMethodNil sets the value for SubBillingMethod to be an explicit nil
func (o *ProjectTicket) SetSubBillingMethodNil() {
	o.SubBillingMethod.Set(nil)
}

// UnsetSubBillingMethod ensures that no value is present for SubBillingMethod, not even an explicit nil
func (o *ProjectTicket) UnsetSubBillingMethod() {
	o.SubBillingMethod.Unset()
}

// GetSubBillingAmount returns the SubBillingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetSubBillingAmount() float64 {
	if o == nil || IsNil(o.SubBillingAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.SubBillingAmount.Get()
}

// GetSubBillingAmountOk returns a tuple with the SubBillingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetSubBillingAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubBillingAmount.Get(), o.SubBillingAmount.IsSet()
}

// HasSubBillingAmount returns a boolean if a field has been set.
func (o *ProjectTicket) HasSubBillingAmount() bool {
	if o != nil && o.SubBillingAmount.IsSet() {
		return true
	}

	return false
}

// SetSubBillingAmount gets a reference to the given NullableFloat64 and assigns it to the SubBillingAmount field.
func (o *ProjectTicket) SetSubBillingAmount(v float64) {
	o.SubBillingAmount.Set(&v)
}
// SetSubBillingAmountNil sets the value for SubBillingAmount to be an explicit nil
func (o *ProjectTicket) SetSubBillingAmountNil() {
	o.SubBillingAmount.Set(nil)
}

// UnsetSubBillingAmount ensures that no value is present for SubBillingAmount, not even an explicit nil
func (o *ProjectTicket) UnsetSubBillingAmount() {
	o.SubBillingAmount.Unset()
}

// GetSubDateAccepted returns the SubDateAccepted field value if set, zero value otherwise.
func (o *ProjectTicket) GetSubDateAccepted() string {
	if o == nil || IsNil(o.SubDateAccepted) {
		var ret string
		return ret
	}
	return *o.SubDateAccepted
}

// GetSubDateAcceptedOk returns a tuple with the SubDateAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetSubDateAcceptedOk() (*string, bool) {
	if o == nil || IsNil(o.SubDateAccepted) {
		return nil, false
	}
	return o.SubDateAccepted, true
}

// HasSubDateAccepted returns a boolean if a field has been set.
func (o *ProjectTicket) HasSubDateAccepted() bool {
	if o != nil && !IsNil(o.SubDateAccepted) {
		return true
	}

	return false
}

// SetSubDateAccepted gets a reference to the given string and assigns it to the SubDateAccepted field.
func (o *ProjectTicket) SetSubDateAccepted(v string) {
	o.SubDateAccepted = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ProjectTicket) GetResources() string {
	if o == nil || IsNil(o.Resources) {
		var ret string
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetResourcesOk() (*string, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ProjectTicket) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given string and assigns it to the Resources field.
func (o *ProjectTicket) SetResources(v string) {
	o.Resources = &v
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *ProjectTicket) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *ProjectTicket) SetBillTime(v string) {
	o.BillTime.Set(&v)
}
// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *ProjectTicket) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *ProjectTicket) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillExpenses returns the BillExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetBillExpenses() string {
	if o == nil || IsNil(o.BillExpenses.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// HasBillExpenses returns a boolean if a field has been set.
func (o *ProjectTicket) HasBillExpenses() bool {
	if o != nil && o.BillExpenses.IsSet() {
		return true
	}

	return false
}

// SetBillExpenses gets a reference to the given NullableString and assigns it to the BillExpenses field.
func (o *ProjectTicket) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}
// SetBillExpensesNil sets the value for BillExpenses to be an explicit nil
func (o *ProjectTicket) SetBillExpensesNil() {
	o.BillExpenses.Set(nil)
}

// UnsetBillExpenses ensures that no value is present for BillExpenses, not even an explicit nil
func (o *ProjectTicket) UnsetBillExpenses() {
	o.BillExpenses.Unset()
}

// GetBillProducts returns the BillProducts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetBillProducts() string {
	if o == nil || IsNil(o.BillProducts.Get()) {
		var ret string
		return ret
	}
	return *o.BillProducts.Get()
}

// GetBillProductsOk returns a tuple with the BillProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetBillProductsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProducts.Get(), o.BillProducts.IsSet()
}

// HasBillProducts returns a boolean if a field has been set.
func (o *ProjectTicket) HasBillProducts() bool {
	if o != nil && o.BillProducts.IsSet() {
		return true
	}

	return false
}

// SetBillProducts gets a reference to the given NullableString and assigns it to the BillProducts field.
func (o *ProjectTicket) SetBillProducts(v string) {
	o.BillProducts.Set(&v)
}
// SetBillProductsNil sets the value for BillProducts to be an explicit nil
func (o *ProjectTicket) SetBillProductsNil() {
	o.BillProducts.Set(nil)
}

// UnsetBillProducts ensures that no value is present for BillProducts, not even an explicit nil
func (o *ProjectTicket) UnsetBillProducts() {
	o.BillProducts.Unset()
}

// GetPredecessorType returns the PredecessorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetPredecessorType() string {
	if o == nil || IsNil(o.PredecessorType.Get()) {
		var ret string
		return ret
	}
	return *o.PredecessorType.Get()
}

// GetPredecessorTypeOk returns a tuple with the PredecessorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetPredecessorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PredecessorType.Get(), o.PredecessorType.IsSet()
}

// HasPredecessorType returns a boolean if a field has been set.
func (o *ProjectTicket) HasPredecessorType() bool {
	if o != nil && o.PredecessorType.IsSet() {
		return true
	}

	return false
}

// SetPredecessorType gets a reference to the given NullableString and assigns it to the PredecessorType field.
func (o *ProjectTicket) SetPredecessorType(v string) {
	o.PredecessorType.Set(&v)
}
// SetPredecessorTypeNil sets the value for PredecessorType to be an explicit nil
func (o *ProjectTicket) SetPredecessorTypeNil() {
	o.PredecessorType.Set(nil)
}

// UnsetPredecessorType ensures that no value is present for PredecessorType, not even an explicit nil
func (o *ProjectTicket) UnsetPredecessorType() {
	o.PredecessorType.Unset()
}

// GetPredecessorId returns the PredecessorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetPredecessorId() int32 {
	if o == nil || IsNil(o.PredecessorId.Get()) {
		var ret int32
		return ret
	}
	return *o.PredecessorId.Get()
}

// GetPredecessorIdOk returns a tuple with the PredecessorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetPredecessorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PredecessorId.Get(), o.PredecessorId.IsSet()
}

// HasPredecessorId returns a boolean if a field has been set.
func (o *ProjectTicket) HasPredecessorId() bool {
	if o != nil && o.PredecessorId.IsSet() {
		return true
	}

	return false
}

// SetPredecessorId gets a reference to the given NullableInt32 and assigns it to the PredecessorId field.
func (o *ProjectTicket) SetPredecessorId(v int32) {
	o.PredecessorId.Set(&v)
}
// SetPredecessorIdNil sets the value for PredecessorId to be an explicit nil
func (o *ProjectTicket) SetPredecessorIdNil() {
	o.PredecessorId.Set(nil)
}

// UnsetPredecessorId ensures that no value is present for PredecessorId, not even an explicit nil
func (o *ProjectTicket) UnsetPredecessorId() {
	o.PredecessorId.Unset()
}

// GetPredecessorClosedFlag returns the PredecessorClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetPredecessorClosedFlag() bool {
	if o == nil || IsNil(o.PredecessorClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PredecessorClosedFlag.Get()
}

// GetPredecessorClosedFlagOk returns a tuple with the PredecessorClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetPredecessorClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PredecessorClosedFlag.Get(), o.PredecessorClosedFlag.IsSet()
}

// HasPredecessorClosedFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasPredecessorClosedFlag() bool {
	if o != nil && o.PredecessorClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetPredecessorClosedFlag gets a reference to the given NullableBool and assigns it to the PredecessorClosedFlag field.
func (o *ProjectTicket) SetPredecessorClosedFlag(v bool) {
	o.PredecessorClosedFlag.Set(&v)
}
// SetPredecessorClosedFlagNil sets the value for PredecessorClosedFlag to be an explicit nil
func (o *ProjectTicket) SetPredecessorClosedFlagNil() {
	o.PredecessorClosedFlag.Set(nil)
}

// UnsetPredecessorClosedFlag ensures that no value is present for PredecessorClosedFlag, not even an explicit nil
func (o *ProjectTicket) UnsetPredecessorClosedFlag() {
	o.PredecessorClosedFlag.Unset()
}

// GetLagDays returns the LagDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetLagDays() int32 {
	if o == nil || IsNil(o.LagDays.Get()) {
		var ret int32
		return ret
	}
	return *o.LagDays.Get()
}

// GetLagDaysOk returns a tuple with the LagDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetLagDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagDays.Get(), o.LagDays.IsSet()
}

// HasLagDays returns a boolean if a field has been set.
func (o *ProjectTicket) HasLagDays() bool {
	if o != nil && o.LagDays.IsSet() {
		return true
	}

	return false
}

// SetLagDays gets a reference to the given NullableInt32 and assigns it to the LagDays field.
func (o *ProjectTicket) SetLagDays(v int32) {
	o.LagDays.Set(&v)
}
// SetLagDaysNil sets the value for LagDays to be an explicit nil
func (o *ProjectTicket) SetLagDaysNil() {
	o.LagDays.Set(nil)
}

// UnsetLagDays ensures that no value is present for LagDays, not even an explicit nil
func (o *ProjectTicket) UnsetLagDays() {
	o.LagDays.Unset()
}

// GetLagNonworkingDaysFlag returns the LagNonworkingDaysFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetLagNonworkingDaysFlag() bool {
	if o == nil || IsNil(o.LagNonworkingDaysFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LagNonworkingDaysFlag.Get()
}

// GetLagNonworkingDaysFlagOk returns a tuple with the LagNonworkingDaysFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetLagNonworkingDaysFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagNonworkingDaysFlag.Get(), o.LagNonworkingDaysFlag.IsSet()
}

// HasLagNonworkingDaysFlag returns a boolean if a field has been set.
func (o *ProjectTicket) HasLagNonworkingDaysFlag() bool {
	if o != nil && o.LagNonworkingDaysFlag.IsSet() {
		return true
	}

	return false
}

// SetLagNonworkingDaysFlag gets a reference to the given NullableBool and assigns it to the LagNonworkingDaysFlag field.
func (o *ProjectTicket) SetLagNonworkingDaysFlag(v bool) {
	o.LagNonworkingDaysFlag.Set(&v)
}
// SetLagNonworkingDaysFlagNil sets the value for LagNonworkingDaysFlag to be an explicit nil
func (o *ProjectTicket) SetLagNonworkingDaysFlagNil() {
	o.LagNonworkingDaysFlag.Set(nil)
}

// UnsetLagNonworkingDaysFlag ensures that no value is present for LagNonworkingDaysFlag, not even an explicit nil
func (o *ProjectTicket) UnsetLagNonworkingDaysFlag() {
	o.LagNonworkingDaysFlag.Unset()
}

// GetEstimatedStartDate returns the EstimatedStartDate field value if set, zero value otherwise.
func (o *ProjectTicket) GetEstimatedStartDate() time.Time {
	if o == nil || IsNil(o.EstimatedStartDate) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedStartDate
}

// GetEstimatedStartDateOk returns a tuple with the EstimatedStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetEstimatedStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstimatedStartDate) {
		return nil, false
	}
	return o.EstimatedStartDate, true
}

// HasEstimatedStartDate returns a boolean if a field has been set.
func (o *ProjectTicket) HasEstimatedStartDate() bool {
	if o != nil && !IsNil(o.EstimatedStartDate) {
		return true
	}

	return false
}

// SetEstimatedStartDate gets a reference to the given time.Time and assigns it to the EstimatedStartDate field.
func (o *ProjectTicket) SetEstimatedStartDate(v time.Time) {
	o.EstimatedStartDate = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ProjectTicket) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ProjectTicket) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *ProjectTicket) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *ProjectTicket) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *ProjectTicket) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *ProjectTicket) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetDuration() int32 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int32
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *ProjectTicket) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt32 and assigns it to the Duration field.
func (o *ProjectTicket) SetDuration(v int32) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *ProjectTicket) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *ProjectTicket) UnsetDuration() {
	o.Duration.Unset()
}

// GetScheduleStartDate returns the ScheduleStartDate field value if set, zero value otherwise.
func (o *ProjectTicket) GetScheduleStartDate() time.Time {
	if o == nil || IsNil(o.ScheduleStartDate) {
		var ret time.Time
		return ret
	}
	return *o.ScheduleStartDate
}

// GetScheduleStartDateOk returns a tuple with the ScheduleStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetScheduleStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduleStartDate) {
		return nil, false
	}
	return o.ScheduleStartDate, true
}

// HasScheduleStartDate returns a boolean if a field has been set.
func (o *ProjectTicket) HasScheduleStartDate() bool {
	if o != nil && !IsNil(o.ScheduleStartDate) {
		return true
	}

	return false
}

// SetScheduleStartDate gets a reference to the given time.Time and assigns it to the ScheduleStartDate field.
func (o *ProjectTicket) SetScheduleStartDate(v time.Time) {
	o.ScheduleStartDate = &v
}

// GetScheduleEndDate returns the ScheduleEndDate field value if set, zero value otherwise.
func (o *ProjectTicket) GetScheduleEndDate() time.Time {
	if o == nil || IsNil(o.ScheduleEndDate) {
		var ret time.Time
		return ret
	}
	return *o.ScheduleEndDate
}

// GetScheduleEndDateOk returns a tuple with the ScheduleEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetScheduleEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ScheduleEndDate) {
		return nil, false
	}
	return o.ScheduleEndDate, true
}

// HasScheduleEndDate returns a boolean if a field has been set.
func (o *ProjectTicket) HasScheduleEndDate() bool {
	if o != nil && !IsNil(o.ScheduleEndDate) {
		return true
	}

	return false
}

// SetScheduleEndDate gets a reference to the given time.Time and assigns it to the ScheduleEndDate field.
func (o *ProjectTicket) SetScheduleEndDate(v time.Time) {
	o.ScheduleEndDate = &v
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *ProjectTicket) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *ProjectTicket) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}
// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *ProjectTicket) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *ProjectTicket) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ProjectTicket) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ProjectTicket) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *ProjectTicket) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectTicket) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectTicket) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectTicket) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ProjectTicket) GetTasks() []TicketTask {
	if o == nil || IsNil(o.Tasks) {
		var ret []TicketTask
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetTasksOk() ([]TicketTask, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ProjectTicket) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []TicketTask and assigns it to the Tasks field.
func (o *ProjectTicket) SetTasks(v []TicketTask) {
	o.Tasks = v
}

// GetInitialDescription returns the InitialDescription field value if set, zero value otherwise.
func (o *ProjectTicket) GetInitialDescription() string {
	if o == nil || IsNil(o.InitialDescription) {
		var ret string
		return ret
	}
	return *o.InitialDescription
}

// GetInitialDescriptionOk returns a tuple with the InitialDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetInitialDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InitialDescription) {
		return nil, false
	}
	return o.InitialDescription, true
}

// HasInitialDescription returns a boolean if a field has been set.
func (o *ProjectTicket) HasInitialDescription() bool {
	if o != nil && !IsNil(o.InitialDescription) {
		return true
	}

	return false
}

// SetInitialDescription gets a reference to the given string and assigns it to the InitialDescription field.
func (o *ProjectTicket) SetInitialDescription(v string) {
	o.InitialDescription = &v
}

// GetInitialInternalAnalysis returns the InitialInternalAnalysis field value if set, zero value otherwise.
func (o *ProjectTicket) GetInitialInternalAnalysis() string {
	if o == nil || IsNil(o.InitialInternalAnalysis) {
		var ret string
		return ret
	}
	return *o.InitialInternalAnalysis
}

// GetInitialInternalAnalysisOk returns a tuple with the InitialInternalAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetInitialInternalAnalysisOk() (*string, bool) {
	if o == nil || IsNil(o.InitialInternalAnalysis) {
		return nil, false
	}
	return o.InitialInternalAnalysis, true
}

// HasInitialInternalAnalysis returns a boolean if a field has been set.
func (o *ProjectTicket) HasInitialInternalAnalysis() bool {
	if o != nil && !IsNil(o.InitialInternalAnalysis) {
		return true
	}

	return false
}

// SetInitialInternalAnalysis gets a reference to the given string and assigns it to the InitialInternalAnalysis field.
func (o *ProjectTicket) SetInitialInternalAnalysis(v string) {
	o.InitialInternalAnalysis = &v
}

// GetInitialResolution returns the InitialResolution field value if set, zero value otherwise.
func (o *ProjectTicket) GetInitialResolution() string {
	if o == nil || IsNil(o.InitialResolution) {
		var ret string
		return ret
	}
	return *o.InitialResolution
}

// GetInitialResolutionOk returns a tuple with the InitialResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetInitialResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.InitialResolution) {
		return nil, false
	}
	return o.InitialResolution, true
}

// HasInitialResolution returns a boolean if a field has been set.
func (o *ProjectTicket) HasInitialResolution() bool {
	if o != nil && !IsNil(o.InitialResolution) {
		return true
	}

	return false
}

// SetInitialResolution gets a reference to the given string and assigns it to the InitialResolution field.
func (o *ProjectTicket) SetInitialResolution(v string) {
	o.InitialResolution = &v
}

// GetContactEmailLookup returns the ContactEmailLookup field value if set, zero value otherwise.
func (o *ProjectTicket) GetContactEmailLookup() string {
	if o == nil || IsNil(o.ContactEmailLookup) {
		var ret string
		return ret
	}
	return *o.ContactEmailLookup
}

// GetContactEmailLookupOk returns a tuple with the ContactEmailLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetContactEmailLookupOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmailLookup) {
		return nil, false
	}
	return o.ContactEmailLookup, true
}

// HasContactEmailLookup returns a boolean if a field has been set.
func (o *ProjectTicket) HasContactEmailLookup() bool {
	if o != nil && !IsNil(o.ContactEmailLookup) {
		return true
	}

	return false
}

// SetContactEmailLookup gets a reference to the given string and assigns it to the ContactEmailLookup field.
func (o *ProjectTicket) SetContactEmailLookup(v string) {
	o.ContactEmailLookup = &v
}

// GetProcessNotifications returns the ProcessNotifications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetProcessNotifications() bool {
	if o == nil || IsNil(o.ProcessNotifications.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessNotifications.Get()
}

// GetProcessNotificationsOk returns a tuple with the ProcessNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetProcessNotificationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessNotifications.Get(), o.ProcessNotifications.IsSet()
}

// HasProcessNotifications returns a boolean if a field has been set.
func (o *ProjectTicket) HasProcessNotifications() bool {
	if o != nil && o.ProcessNotifications.IsSet() {
		return true
	}

	return false
}

// SetProcessNotifications gets a reference to the given NullableBool and assigns it to the ProcessNotifications field.
func (o *ProjectTicket) SetProcessNotifications(v bool) {
	o.ProcessNotifications.Set(&v)
}
// SetProcessNotificationsNil sets the value for ProcessNotifications to be an explicit nil
func (o *ProjectTicket) SetProcessNotificationsNil() {
	o.ProcessNotifications.Set(nil)
}

// UnsetProcessNotifications ensures that no value is present for ProcessNotifications, not even an explicit nil
func (o *ProjectTicket) UnsetProcessNotifications() {
	o.ProcessNotifications.Unset()
}

// GetSkipCallback returns the SkipCallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTicket) GetSkipCallback() bool {
	if o == nil || IsNil(o.SkipCallback.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipCallback.Get()
}

// GetSkipCallbackOk returns a tuple with the SkipCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTicket) GetSkipCallbackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipCallback.Get(), o.SkipCallback.IsSet()
}

// HasSkipCallback returns a boolean if a field has been set.
func (o *ProjectTicket) HasSkipCallback() bool {
	if o != nil && o.SkipCallback.IsSet() {
		return true
	}

	return false
}

// SetSkipCallback gets a reference to the given NullableBool and assigns it to the SkipCallback field.
func (o *ProjectTicket) SetSkipCallback(v bool) {
	o.SkipCallback.Set(&v)
}
// SetSkipCallbackNil sets the value for SkipCallback to be an explicit nil
func (o *ProjectTicket) SetSkipCallbackNil() {
	o.SkipCallback.Set(nil)
}

// UnsetSkipCallback ensures that no value is present for SkipCallback, not even an explicit nil
func (o *ProjectTicket) UnsetSkipCallback() {
	o.SkipCallback.Unset()
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *ProjectTicket) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTicket) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ProjectTicket) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *ProjectTicket) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o ProjectTicket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTicket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["summary"] = o.Summary
	if o.IsIssueFlag.IsSet() {
		toSerialize["isIssueFlag"] = o.IsIssueFlag.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	toSerialize["phase"] = o.Phase
	if !IsNil(o.WbsCode) {
		toSerialize["wbsCode"] = o.WbsCode
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	if !IsNil(o.AddressLine1) {
		toSerialize["addressLine1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["addressLine2"] = o.AddressLine2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.StateIdentifier) {
		toSerialize["stateIdentifier"] = o.StateIdentifier
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.ContactName) {
		toSerialize["contactName"] = o.ContactName
	}
	if !IsNil(o.ContactPhoneNumber) {
		toSerialize["contactPhoneNumber"] = o.ContactPhoneNumber
	}
	if !IsNil(o.ContactPhoneExtension) {
		toSerialize["contactPhoneExtension"] = o.ContactPhoneExtension
	}
	if !IsNil(o.ContactEmailAddress) {
		toSerialize["contactEmailAddress"] = o.ContactEmailAddress
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.ServiceLocation) {
		toSerialize["serviceLocation"] = o.ServiceLocation
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.RequiredDate) {
		toSerialize["requiredDate"] = o.RequiredDate
	}
	if o.BudgetHours.IsSet() {
		toSerialize["budgetHours"] = o.BudgetHours.Get()
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if o.KnowledgeBaseCategoryId.IsSet() {
		toSerialize["knowledgeBaseCategoryId"] = o.KnowledgeBaseCategoryId.Get()
	}
	if o.KnowledgeBaseSubCategoryId.IsSet() {
		toSerialize["knowledgeBaseSubCategoryId"] = o.KnowledgeBaseSubCategoryId.Get()
	}
	if o.KnowledgeBaseLinkId.IsSet() {
		toSerialize["knowledgeBaseLinkId"] = o.KnowledgeBaseLinkId.Get()
	}
	if o.KnowledgeBaseLinkType.IsSet() {
		toSerialize["knowledgeBaseLinkType"] = o.KnowledgeBaseLinkType.Get()
	}
	if o.AllowAllClientsPortalView.IsSet() {
		toSerialize["allowAllClientsPortalView"] = o.AllowAllClientsPortalView.Get()
	}
	if o.CustomerUpdatedFlag.IsSet() {
		toSerialize["customerUpdatedFlag"] = o.CustomerUpdatedFlag.Get()
	}
	if o.AutomaticEmailContactFlag.IsSet() {
		toSerialize["automaticEmailContactFlag"] = o.AutomaticEmailContactFlag.Get()
	}
	if o.AutomaticEmailResourceFlag.IsSet() {
		toSerialize["automaticEmailResourceFlag"] = o.AutomaticEmailResourceFlag.Get()
	}
	if o.AutomaticEmailCcFlag.IsSet() {
		toSerialize["automaticEmailCcFlag"] = o.AutomaticEmailCcFlag.Get()
	}
	if !IsNil(o.AutomaticEmailCc) {
		toSerialize["automaticEmailCc"] = o.AutomaticEmailCc
	}
	if !IsNil(o.ClosedDate) {
		toSerialize["closedDate"] = o.ClosedDate
	}
	if !IsNil(o.ClosedBy) {
		toSerialize["closedBy"] = o.ClosedBy
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if o.ActualHours.IsSet() {
		toSerialize["actualHours"] = o.ActualHours.Get()
	}
	if o.Approved.IsSet() {
		toSerialize["approved"] = o.Approved.Get()
	}
	if o.SubBillingMethod.IsSet() {
		toSerialize["subBillingMethod"] = o.SubBillingMethod.Get()
	}
	if o.SubBillingAmount.IsSet() {
		toSerialize["subBillingAmount"] = o.SubBillingAmount.Get()
	}
	if !IsNil(o.SubDateAccepted) {
		toSerialize["subDateAccepted"] = o.SubDateAccepted
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.BillExpenses.IsSet() {
		toSerialize["billExpenses"] = o.BillExpenses.Get()
	}
	if o.BillProducts.IsSet() {
		toSerialize["billProducts"] = o.BillProducts.Get()
	}
	if o.PredecessorType.IsSet() {
		toSerialize["predecessorType"] = o.PredecessorType.Get()
	}
	if o.PredecessorId.IsSet() {
		toSerialize["predecessorId"] = o.PredecessorId.Get()
	}
	if o.PredecessorClosedFlag.IsSet() {
		toSerialize["predecessorClosedFlag"] = o.PredecessorClosedFlag.Get()
	}
	if o.LagDays.IsSet() {
		toSerialize["lagDays"] = o.LagDays.Get()
	}
	if o.LagNonworkingDaysFlag.IsSet() {
		toSerialize["lagNonworkingDaysFlag"] = o.LagNonworkingDaysFlag.Get()
	}
	if !IsNil(o.EstimatedStartDate) {
		toSerialize["estimatedStartDate"] = o.EstimatedStartDate
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if !IsNil(o.ScheduleStartDate) {
		toSerialize["scheduleStartDate"] = o.ScheduleStartDate
	}
	if !IsNil(o.ScheduleEndDate) {
		toSerialize["scheduleEndDate"] = o.ScheduleEndDate
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.InitialDescription) {
		toSerialize["initialDescription"] = o.InitialDescription
	}
	if !IsNil(o.InitialInternalAnalysis) {
		toSerialize["initialInternalAnalysis"] = o.InitialInternalAnalysis
	}
	if !IsNil(o.InitialResolution) {
		toSerialize["initialResolution"] = o.InitialResolution
	}
	if !IsNil(o.ContactEmailLookup) {
		toSerialize["contactEmailLookup"] = o.ContactEmailLookup
	}
	if o.ProcessNotifications.IsSet() {
		toSerialize["processNotifications"] = o.ProcessNotifications.Get()
	}
	if o.SkipCallback.IsSet() {
		toSerialize["skipCallback"] = o.SkipCallback.Get()
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *ProjectTicket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summary",
		"phase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectTicket := _ProjectTicket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectTicket)

	if err != nil {
		return err
	}

	*o = ProjectTicket(varProjectTicket)

	return err
}

type NullableProjectTicket struct {
	value *ProjectTicket
	isSet bool
}

func (v NullableProjectTicket) Get() *ProjectTicket {
	return v.value
}

func (v *NullableProjectTicket) Set(val *ProjectTicket) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTicket(val *ProjectTicket) *NullableProjectTicket {
	return &NullableProjectTicket{value: val, isSet: true}
}

func (v NullableProjectTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


