/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ProjectWorkplanProjectPhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectWorkplanProjectPhase{}

// ProjectWorkplanProjectPhase struct for ProjectWorkplanProjectPhase
type ProjectWorkplanProjectPhase struct {
	Id *int32 `json:"id,omitempty"`
	ProjectId NullableInt32 `json:"projectId,omitempty"`
	Description *string `json:"description,omitempty"`
	Status *PhaseStatusReference `json:"status,omitempty"`
	ParentPhase *ProjectPhaseReference `json:"parentPhase,omitempty"`
	WbsCode *string `json:"wbsCode,omitempty"`
	MarkAsMilestoneFlag NullableBool `json:"markAsMilestoneFlag,omitempty"`
	Notes *string `json:"notes,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	BudgetHours NullableFloat64 `json:"budgetHours,omitempty"`
	ActualHours NullableFloat64 `json:"actualHours,omitempty"`
	BillableHours NullableFloat64 `json:"billableHours,omitempty"`
	ScheduledHours NullableFloat64 `json:"scheduled_Hours,omitempty"`
	ScheduledStart *string `json:"scheduled_Start,omitempty"`
	ScheduledEnd *string `json:"scheduled_End,omitempty"`
	ScheduledDuration NullableInt32 `json:"scheduled_Duration,omitempty"`
	BillPhaseSeparately NullableBool `json:"billPhaseSeparately,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

// NewProjectWorkplanProjectPhase instantiates a new ProjectWorkplanProjectPhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectWorkplanProjectPhase() *ProjectWorkplanProjectPhase {
	this := ProjectWorkplanProjectPhase{}
	return &this
}

// NewProjectWorkplanProjectPhaseWithDefaults instantiates a new ProjectWorkplanProjectPhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWorkplanProjectPhaseWithDefaults() *ProjectWorkplanProjectPhase {
	this := ProjectWorkplanProjectPhase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ProjectWorkplanProjectPhase) SetId(v int32) {
	o.Id = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId.Get()) {
		var ret int32
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableInt32 and assigns it to the ProjectId field.
func (o *ProjectWorkplanProjectPhase) SetProjectId(v int32) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectWorkplanProjectPhase) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetStatus() PhaseStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret PhaseStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetStatusOk() (*PhaseStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PhaseStatusReference and assigns it to the Status field.
func (o *ProjectWorkplanProjectPhase) SetStatus(v PhaseStatusReference) {
	o.Status = &v
}

// GetParentPhase returns the ParentPhase field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetParentPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.ParentPhase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.ParentPhase
}

// GetParentPhaseOk returns a tuple with the ParentPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetParentPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.ParentPhase) {
		return nil, false
	}
	return o.ParentPhase, true
}

// HasParentPhase returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasParentPhase() bool {
	if o != nil && !IsNil(o.ParentPhase) {
		return true
	}

	return false
}

// SetParentPhase gets a reference to the given ProjectPhaseReference and assigns it to the ParentPhase field.
func (o *ProjectWorkplanProjectPhase) SetParentPhase(v ProjectPhaseReference) {
	o.ParentPhase = &v
}

// GetWbsCode returns the WbsCode field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetWbsCode() string {
	if o == nil || IsNil(o.WbsCode) {
		var ret string
		return ret
	}
	return *o.WbsCode
}

// GetWbsCodeOk returns a tuple with the WbsCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetWbsCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WbsCode) {
		return nil, false
	}
	return o.WbsCode, true
}

// HasWbsCode returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasWbsCode() bool {
	if o != nil && !IsNil(o.WbsCode) {
		return true
	}

	return false
}

// SetWbsCode gets a reference to the given string and assigns it to the WbsCode field.
func (o *ProjectWorkplanProjectPhase) SetWbsCode(v string) {
	o.WbsCode = &v
}

// GetMarkAsMilestoneFlag returns the MarkAsMilestoneFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetMarkAsMilestoneFlag() bool {
	if o == nil || IsNil(o.MarkAsMilestoneFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkAsMilestoneFlag.Get()
}

// GetMarkAsMilestoneFlagOk returns a tuple with the MarkAsMilestoneFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetMarkAsMilestoneFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkAsMilestoneFlag.Get(), o.MarkAsMilestoneFlag.IsSet()
}

// HasMarkAsMilestoneFlag returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasMarkAsMilestoneFlag() bool {
	if o != nil && o.MarkAsMilestoneFlag.IsSet() {
		return true
	}

	return false
}

// SetMarkAsMilestoneFlag gets a reference to the given NullableBool and assigns it to the MarkAsMilestoneFlag field.
func (o *ProjectWorkplanProjectPhase) SetMarkAsMilestoneFlag(v bool) {
	o.MarkAsMilestoneFlag.Set(&v)
}
// SetMarkAsMilestoneFlagNil sets the value for MarkAsMilestoneFlag to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetMarkAsMilestoneFlagNil() {
	o.MarkAsMilestoneFlag.Set(nil)
}

// UnsetMarkAsMilestoneFlag ensures that no value is present for MarkAsMilestoneFlag, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetMarkAsMilestoneFlag() {
	o.MarkAsMilestoneFlag.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ProjectWorkplanProjectPhase) SetNotes(v string) {
	o.Notes = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ProjectWorkplanProjectPhase) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ProjectWorkplanProjectPhase) SetEndDate(v string) {
	o.EndDate = &v
}

// GetBudgetHours returns the BudgetHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetBudgetHours() float64 {
	if o == nil || IsNil(o.BudgetHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BudgetHours.Get()
}

// GetBudgetHoursOk returns a tuple with the BudgetHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetBudgetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetHours.Get(), o.BudgetHours.IsSet()
}

// HasBudgetHours returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasBudgetHours() bool {
	if o != nil && o.BudgetHours.IsSet() {
		return true
	}

	return false
}

// SetBudgetHours gets a reference to the given NullableFloat64 and assigns it to the BudgetHours field.
func (o *ProjectWorkplanProjectPhase) SetBudgetHours(v float64) {
	o.BudgetHours.Set(&v)
}
// SetBudgetHoursNil sets the value for BudgetHours to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetBudgetHoursNil() {
	o.BudgetHours.Set(nil)
}

// UnsetBudgetHours ensures that no value is present for BudgetHours, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetBudgetHours() {
	o.BudgetHours.Unset()
}

// GetActualHours returns the ActualHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetActualHours() float64 {
	if o == nil || IsNil(o.ActualHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualHours.Get()
}

// GetActualHoursOk returns a tuple with the ActualHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetActualHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualHours.Get(), o.ActualHours.IsSet()
}

// HasActualHours returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasActualHours() bool {
	if o != nil && o.ActualHours.IsSet() {
		return true
	}

	return false
}

// SetActualHours gets a reference to the given NullableFloat64 and assigns it to the ActualHours field.
func (o *ProjectWorkplanProjectPhase) SetActualHours(v float64) {
	o.ActualHours.Set(&v)
}
// SetActualHoursNil sets the value for ActualHours to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetActualHoursNil() {
	o.ActualHours.Set(nil)
}

// UnsetActualHours ensures that no value is present for ActualHours, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetActualHours() {
	o.ActualHours.Unset()
}

// GetBillableHours returns the BillableHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetBillableHours() float64 {
	if o == nil || IsNil(o.BillableHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BillableHours.Get()
}

// GetBillableHoursOk returns a tuple with the BillableHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetBillableHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableHours.Get(), o.BillableHours.IsSet()
}

// HasBillableHours returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasBillableHours() bool {
	if o != nil && o.BillableHours.IsSet() {
		return true
	}

	return false
}

// SetBillableHours gets a reference to the given NullableFloat64 and assigns it to the BillableHours field.
func (o *ProjectWorkplanProjectPhase) SetBillableHours(v float64) {
	o.BillableHours.Set(&v)
}
// SetBillableHoursNil sets the value for BillableHours to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetBillableHoursNil() {
	o.BillableHours.Set(nil)
}

// UnsetBillableHours ensures that no value is present for BillableHours, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetBillableHours() {
	o.BillableHours.Unset()
}

// GetScheduledHours returns the ScheduledHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetScheduledHours() float64 {
	if o == nil || IsNil(o.ScheduledHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ScheduledHours.Get()
}

// GetScheduledHoursOk returns a tuple with the ScheduledHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetScheduledHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduledHours.Get(), o.ScheduledHours.IsSet()
}

// HasScheduledHours returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasScheduledHours() bool {
	if o != nil && o.ScheduledHours.IsSet() {
		return true
	}

	return false
}

// SetScheduledHours gets a reference to the given NullableFloat64 and assigns it to the ScheduledHours field.
func (o *ProjectWorkplanProjectPhase) SetScheduledHours(v float64) {
	o.ScheduledHours.Set(&v)
}
// SetScheduledHoursNil sets the value for ScheduledHours to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetScheduledHoursNil() {
	o.ScheduledHours.Set(nil)
}

// UnsetScheduledHours ensures that no value is present for ScheduledHours, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetScheduledHours() {
	o.ScheduledHours.Unset()
}

// GetScheduledStart returns the ScheduledStart field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetScheduledStart() string {
	if o == nil || IsNil(o.ScheduledStart) {
		var ret string
		return ret
	}
	return *o.ScheduledStart
}

// GetScheduledStartOk returns a tuple with the ScheduledStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetScheduledStartOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledStart) {
		return nil, false
	}
	return o.ScheduledStart, true
}

// HasScheduledStart returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasScheduledStart() bool {
	if o != nil && !IsNil(o.ScheduledStart) {
		return true
	}

	return false
}

// SetScheduledStart gets a reference to the given string and assigns it to the ScheduledStart field.
func (o *ProjectWorkplanProjectPhase) SetScheduledStart(v string) {
	o.ScheduledStart = &v
}

// GetScheduledEnd returns the ScheduledEnd field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetScheduledEnd() string {
	if o == nil || IsNil(o.ScheduledEnd) {
		var ret string
		return ret
	}
	return *o.ScheduledEnd
}

// GetScheduledEndOk returns a tuple with the ScheduledEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetScheduledEndOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledEnd) {
		return nil, false
	}
	return o.ScheduledEnd, true
}

// HasScheduledEnd returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasScheduledEnd() bool {
	if o != nil && !IsNil(o.ScheduledEnd) {
		return true
	}

	return false
}

// SetScheduledEnd gets a reference to the given string and assigns it to the ScheduledEnd field.
func (o *ProjectWorkplanProjectPhase) SetScheduledEnd(v string) {
	o.ScheduledEnd = &v
}

// GetScheduledDuration returns the ScheduledDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetScheduledDuration() int32 {
	if o == nil || IsNil(o.ScheduledDuration.Get()) {
		var ret int32
		return ret
	}
	return *o.ScheduledDuration.Get()
}

// GetScheduledDurationOk returns a tuple with the ScheduledDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetScheduledDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduledDuration.Get(), o.ScheduledDuration.IsSet()
}

// HasScheduledDuration returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasScheduledDuration() bool {
	if o != nil && o.ScheduledDuration.IsSet() {
		return true
	}

	return false
}

// SetScheduledDuration gets a reference to the given NullableInt32 and assigns it to the ScheduledDuration field.
func (o *ProjectWorkplanProjectPhase) SetScheduledDuration(v int32) {
	o.ScheduledDuration.Set(&v)
}
// SetScheduledDurationNil sets the value for ScheduledDuration to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetScheduledDurationNil() {
	o.ScheduledDuration.Set(nil)
}

// UnsetScheduledDuration ensures that no value is present for ScheduledDuration, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetScheduledDuration() {
	o.ScheduledDuration.Unset()
}

// GetBillPhaseSeparately returns the BillPhaseSeparately field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectWorkplanProjectPhase) GetBillPhaseSeparately() bool {
	if o == nil || IsNil(o.BillPhaseSeparately.Get()) {
		var ret bool
		return ret
	}
	return *o.BillPhaseSeparately.Get()
}

// GetBillPhaseSeparatelyOk returns a tuple with the BillPhaseSeparately field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectWorkplanProjectPhase) GetBillPhaseSeparatelyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillPhaseSeparately.Get(), o.BillPhaseSeparately.IsSet()
}

// HasBillPhaseSeparately returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasBillPhaseSeparately() bool {
	if o != nil && o.BillPhaseSeparately.IsSet() {
		return true
	}

	return false
}

// SetBillPhaseSeparately gets a reference to the given NullableBool and assigns it to the BillPhaseSeparately field.
func (o *ProjectWorkplanProjectPhase) SetBillPhaseSeparately(v bool) {
	o.BillPhaseSeparately.Set(&v)
}
// SetBillPhaseSeparatelyNil sets the value for BillPhaseSeparately to be an explicit nil
func (o *ProjectWorkplanProjectPhase) SetBillPhaseSeparatelyNil() {
	o.BillPhaseSeparately.Set(nil)
}

// UnsetBillPhaseSeparately ensures that no value is present for BillPhaseSeparately, not even an explicit nil
func (o *ProjectWorkplanProjectPhase) UnsetBillPhaseSeparately() {
	o.BillPhaseSeparately.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ProjectWorkplanProjectPhase) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *ProjectWorkplanProjectPhase) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectWorkplanProjectPhase) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ProjectWorkplanProjectPhase) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *ProjectWorkplanProjectPhase) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o ProjectWorkplanProjectPhase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectWorkplanProjectPhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ParentPhase) {
		toSerialize["parentPhase"] = o.ParentPhase
	}
	if !IsNil(o.WbsCode) {
		toSerialize["wbsCode"] = o.WbsCode
	}
	if o.MarkAsMilestoneFlag.IsSet() {
		toSerialize["markAsMilestoneFlag"] = o.MarkAsMilestoneFlag.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if o.BudgetHours.IsSet() {
		toSerialize["budgetHours"] = o.BudgetHours.Get()
	}
	if o.ActualHours.IsSet() {
		toSerialize["actualHours"] = o.ActualHours.Get()
	}
	if o.BillableHours.IsSet() {
		toSerialize["billableHours"] = o.BillableHours.Get()
	}
	if o.ScheduledHours.IsSet() {
		toSerialize["scheduled_Hours"] = o.ScheduledHours.Get()
	}
	if !IsNil(o.ScheduledStart) {
		toSerialize["scheduled_Start"] = o.ScheduledStart
	}
	if !IsNil(o.ScheduledEnd) {
		toSerialize["scheduled_End"] = o.ScheduledEnd
	}
	if o.ScheduledDuration.IsSet() {
		toSerialize["scheduled_Duration"] = o.ScheduledDuration.Get()
	}
	if o.BillPhaseSeparately.IsSet() {
		toSerialize["billPhaseSeparately"] = o.BillPhaseSeparately.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

type NullableProjectWorkplanProjectPhase struct {
	value *ProjectWorkplanProjectPhase
	isSet bool
}

func (v NullableProjectWorkplanProjectPhase) Get() *ProjectWorkplanProjectPhase {
	return v.value
}

func (v *NullableProjectWorkplanProjectPhase) Set(val *ProjectWorkplanProjectPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectWorkplanProjectPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectWorkplanProjectPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectWorkplanProjectPhase(val *ProjectWorkplanProjectPhase) *NullableProjectWorkplanProjectPhase {
	return &NullableProjectWorkplanProjectPhase{value: val, isSet: true}
}

func (v NullableProjectWorkplanProjectPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectWorkplanProjectPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


