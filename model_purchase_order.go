/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PurchaseOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrder{}

// PurchaseOrder struct for PurchaseOrder
type PurchaseOrder struct {
	Id *int32 `json:"id,omitempty"`
	BusinessUnitId NullableInt32 `json:"businessUnitId,omitempty"`
	BusinessUnit *BillingUnitReference `json:"businessUnit,omitempty"`
	CancelReason *string `json:"cancelReason,omitempty"`
	// The closed flag can only be updated via updating the purchase order status to a closed/open status.
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	ClosedBy *string `json:"closedBy,omitempty"`
	CustomerCity *string `json:"customerCity,omitempty"`
	CustomerCompany *CompanyReference `json:"customerCompany,omitempty"`
	CustomerContact *ContactReference `json:"customerContact,omitempty"`
	CustomerCountry *CountryReference `json:"customerCountry,omitempty"`
	CustomerExtension *string `json:"customerExtension,omitempty"`
	CustomerName *string `json:"customerName,omitempty"`
	CustomerPhone *string `json:"customerPhone,omitempty"`
	CustomerSite *SiteReference `json:"customerSite,omitempty"`
	CustomerSiteName *string `json:"customerSiteName,omitempty"`
	CustomerState *string `json:"customerState,omitempty"`
	CustomerStreetLine1 *string `json:"customerStreetLine1,omitempty"`
	CustomerStreetLine2 *string `json:"customerStreetLine2,omitempty"`
	CustomerZip *string `json:"customerZip,omitempty"`
	DateClosed *time.Time `json:"dateClosed,omitempty"`
	DropShipCustomerFlag NullableBool `json:"dropShipCustomerFlag,omitempty"`
	EnteredBy *string `json:"enteredBy,omitempty"`
	FreightCost NullableFloat64 `json:"freightCost,omitempty"`
	FreightPackingSlip *string `json:"freightPackingSlip,omitempty"`
	FreightTaxTotal NullableFloat64 `json:"freightTaxTotal,omitempty"`
	InternalNotes *string `json:"internalNotes,omitempty"`
	LocationId NullableInt32 `json:"locationId,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	//  Required On Updates;
	PoDate *time.Time `json:"poDate,omitempty"`
	//  Required On Updates; Max length: 50;
	PoNumber *string `json:"poNumber,omitempty"`
	SalesTax NullableFloat64 `json:"salesTax,omitempty"`
	ShipmentDate *time.Time `json:"shipmentDate,omitempty"`
	ShipmentMethod *ShipmentMethodReference `json:"shipmentMethod,omitempty"`
	ShippingInstructions *string `json:"shippingInstructions,omitempty"`
	Status PurchaseOrderStatusReference `json:"status"`
	SubTotal NullableFloat64 `json:"subTotal,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	TaxFreightFlag NullableBool `json:"taxFreightFlag,omitempty"`
	TaxPoFlag NullableBool `json:"taxPoFlag,omitempty"`
	Terms BillingTermsReference `json:"terms"`
	Total NullableFloat64 `json:"total,omitempty"`
	//  Max length: 50;
	TrackingNumber *string `json:"trackingNumber,omitempty"`
	// Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in.
	UpdateShipmentInfo NullableBool `json:"updateShipmentInfo,omitempty"`
	// Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in.
	UpdateVendorOrderNumber NullableBool `json:"updateVendorOrderNumber,omitempty"`
	VendorCompany CompanyReference `json:"vendorCompany"`
	VendorContact *ContactReference `json:"vendorContact,omitempty"`
	VendorInvoiceDate *time.Time `json:"vendorInvoiceDate,omitempty"`
	//  Max length: 50;
	VendorInvoiceNumber *string `json:"vendorInvoiceNumber,omitempty"`
	//  Max length: 50;
	VendorOrderNumber *string `json:"vendorOrderNumber,omitempty"`
	VendorSite *SiteReference `json:"vendorSite,omitempty"`
	Warehouse *WarehouseReference `json:"warehouse,omitempty"`
	WarehouseContact *ContactReference `json:"warehouseContact,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _PurchaseOrder PurchaseOrder

// NewPurchaseOrder instantiates a new PurchaseOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrder(status PurchaseOrderStatusReference, terms BillingTermsReference, vendorCompany CompanyReference) *PurchaseOrder {
	this := PurchaseOrder{}
	this.Status = status
	this.Terms = terms
	this.VendorCompany = vendorCompany
	return &this
}

// NewPurchaseOrderWithDefaults instantiates a new PurchaseOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderWithDefaults() *PurchaseOrder {
	this := PurchaseOrder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PurchaseOrder) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PurchaseOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PurchaseOrder) SetId(v int32) {
	o.Id = &v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *PurchaseOrder) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *PurchaseOrder) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}
// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *PurchaseOrder) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *PurchaseOrder) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetBusinessUnit returns the BusinessUnit field value if set, zero value otherwise.
func (o *PurchaseOrder) GetBusinessUnit() BillingUnitReference {
	if o == nil || IsNil(o.BusinessUnit) {
		var ret BillingUnitReference
		return ret
	}
	return *o.BusinessUnit
}

// GetBusinessUnitOk returns a tuple with the BusinessUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetBusinessUnitOk() (*BillingUnitReference, bool) {
	if o == nil || IsNil(o.BusinessUnit) {
		return nil, false
	}
	return o.BusinessUnit, true
}

// HasBusinessUnit returns a boolean if a field has been set.
func (o *PurchaseOrder) HasBusinessUnit() bool {
	if o != nil && !IsNil(o.BusinessUnit) {
		return true
	}

	return false
}

// SetBusinessUnit gets a reference to the given BillingUnitReference and assigns it to the BusinessUnit field.
func (o *PurchaseOrder) SetBusinessUnit(v BillingUnitReference) {
	o.BusinessUnit = &v
}

// GetCancelReason returns the CancelReason field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCancelReason() string {
	if o == nil || IsNil(o.CancelReason) {
		var ret string
		return ret
	}
	return *o.CancelReason
}

// GetCancelReasonOk returns a tuple with the CancelReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCancelReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CancelReason) {
		return nil, false
	}
	return o.CancelReason, true
}

// HasCancelReason returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCancelReason() bool {
	if o != nil && !IsNil(o.CancelReason) {
		return true
	}

	return false
}

// SetCancelReason gets a reference to the given string and assigns it to the CancelReason field.
func (o *PurchaseOrder) SetCancelReason(v string) {
	o.CancelReason = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *PurchaseOrder) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *PurchaseOrder) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *PurchaseOrder) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *PurchaseOrder) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetClosedBy returns the ClosedBy field value if set, zero value otherwise.
func (o *PurchaseOrder) GetClosedBy() string {
	if o == nil || IsNil(o.ClosedBy) {
		var ret string
		return ret
	}
	return *o.ClosedBy
}

// GetClosedByOk returns a tuple with the ClosedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetClosedByOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedBy) {
		return nil, false
	}
	return o.ClosedBy, true
}

// HasClosedBy returns a boolean if a field has been set.
func (o *PurchaseOrder) HasClosedBy() bool {
	if o != nil && !IsNil(o.ClosedBy) {
		return true
	}

	return false
}

// SetClosedBy gets a reference to the given string and assigns it to the ClosedBy field.
func (o *PurchaseOrder) SetClosedBy(v string) {
	o.ClosedBy = &v
}

// GetCustomerCity returns the CustomerCity field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerCity() string {
	if o == nil || IsNil(o.CustomerCity) {
		var ret string
		return ret
	}
	return *o.CustomerCity
}

// GetCustomerCityOk returns a tuple with the CustomerCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerCityOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerCity) {
		return nil, false
	}
	return o.CustomerCity, true
}

// HasCustomerCity returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerCity() bool {
	if o != nil && !IsNil(o.CustomerCity) {
		return true
	}

	return false
}

// SetCustomerCity gets a reference to the given string and assigns it to the CustomerCity field.
func (o *PurchaseOrder) SetCustomerCity(v string) {
	o.CustomerCity = &v
}

// GetCustomerCompany returns the CustomerCompany field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerCompany() CompanyReference {
	if o == nil || IsNil(o.CustomerCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.CustomerCompany
}

// GetCustomerCompanyOk returns a tuple with the CustomerCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.CustomerCompany) {
		return nil, false
	}
	return o.CustomerCompany, true
}

// HasCustomerCompany returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerCompany() bool {
	if o != nil && !IsNil(o.CustomerCompany) {
		return true
	}

	return false
}

// SetCustomerCompany gets a reference to the given CompanyReference and assigns it to the CustomerCompany field.
func (o *PurchaseOrder) SetCustomerCompany(v CompanyReference) {
	o.CustomerCompany = &v
}

// GetCustomerContact returns the CustomerContact field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerContact() ContactReference {
	if o == nil || IsNil(o.CustomerContact) {
		var ret ContactReference
		return ret
	}
	return *o.CustomerContact
}

// GetCustomerContactOk returns a tuple with the CustomerContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.CustomerContact) {
		return nil, false
	}
	return o.CustomerContact, true
}

// HasCustomerContact returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerContact() bool {
	if o != nil && !IsNil(o.CustomerContact) {
		return true
	}

	return false
}

// SetCustomerContact gets a reference to the given ContactReference and assigns it to the CustomerContact field.
func (o *PurchaseOrder) SetCustomerContact(v ContactReference) {
	o.CustomerContact = &v
}

// GetCustomerCountry returns the CustomerCountry field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerCountry() CountryReference {
	if o == nil || IsNil(o.CustomerCountry) {
		var ret CountryReference
		return ret
	}
	return *o.CustomerCountry
}

// GetCustomerCountryOk returns a tuple with the CustomerCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.CustomerCountry) {
		return nil, false
	}
	return o.CustomerCountry, true
}

// HasCustomerCountry returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerCountry() bool {
	if o != nil && !IsNil(o.CustomerCountry) {
		return true
	}

	return false
}

// SetCustomerCountry gets a reference to the given CountryReference and assigns it to the CustomerCountry field.
func (o *PurchaseOrder) SetCustomerCountry(v CountryReference) {
	o.CustomerCountry = &v
}

// GetCustomerExtension returns the CustomerExtension field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerExtension() string {
	if o == nil || IsNil(o.CustomerExtension) {
		var ret string
		return ret
	}
	return *o.CustomerExtension
}

// GetCustomerExtensionOk returns a tuple with the CustomerExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerExtension) {
		return nil, false
	}
	return o.CustomerExtension, true
}

// HasCustomerExtension returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerExtension() bool {
	if o != nil && !IsNil(o.CustomerExtension) {
		return true
	}

	return false
}

// SetCustomerExtension gets a reference to the given string and assigns it to the CustomerExtension field.
func (o *PurchaseOrder) SetCustomerExtension(v string) {
	o.CustomerExtension = &v
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerName() string {
	if o == nil || IsNil(o.CustomerName) {
		var ret string
		return ret
	}
	return *o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerName) {
		return nil, false
	}
	return o.CustomerName, true
}

// HasCustomerName returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerName() bool {
	if o != nil && !IsNil(o.CustomerName) {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given string and assigns it to the CustomerName field.
func (o *PurchaseOrder) SetCustomerName(v string) {
	o.CustomerName = &v
}

// GetCustomerPhone returns the CustomerPhone field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerPhone() string {
	if o == nil || IsNil(o.CustomerPhone) {
		var ret string
		return ret
	}
	return *o.CustomerPhone
}

// GetCustomerPhoneOk returns a tuple with the CustomerPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPhone) {
		return nil, false
	}
	return o.CustomerPhone, true
}

// HasCustomerPhone returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerPhone() bool {
	if o != nil && !IsNil(o.CustomerPhone) {
		return true
	}

	return false
}

// SetCustomerPhone gets a reference to the given string and assigns it to the CustomerPhone field.
func (o *PurchaseOrder) SetCustomerPhone(v string) {
	o.CustomerPhone = &v
}

// GetCustomerSite returns the CustomerSite field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerSite() SiteReference {
	if o == nil || IsNil(o.CustomerSite) {
		var ret SiteReference
		return ret
	}
	return *o.CustomerSite
}

// GetCustomerSiteOk returns a tuple with the CustomerSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.CustomerSite) {
		return nil, false
	}
	return o.CustomerSite, true
}

// HasCustomerSite returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerSite() bool {
	if o != nil && !IsNil(o.CustomerSite) {
		return true
	}

	return false
}

// SetCustomerSite gets a reference to the given SiteReference and assigns it to the CustomerSite field.
func (o *PurchaseOrder) SetCustomerSite(v SiteReference) {
	o.CustomerSite = &v
}

// GetCustomerSiteName returns the CustomerSiteName field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerSiteName() string {
	if o == nil || IsNil(o.CustomerSiteName) {
		var ret string
		return ret
	}
	return *o.CustomerSiteName
}

// GetCustomerSiteNameOk returns a tuple with the CustomerSiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerSiteName) {
		return nil, false
	}
	return o.CustomerSiteName, true
}

// HasCustomerSiteName returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerSiteName() bool {
	if o != nil && !IsNil(o.CustomerSiteName) {
		return true
	}

	return false
}

// SetCustomerSiteName gets a reference to the given string and assigns it to the CustomerSiteName field.
func (o *PurchaseOrder) SetCustomerSiteName(v string) {
	o.CustomerSiteName = &v
}

// GetCustomerState returns the CustomerState field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerState() string {
	if o == nil || IsNil(o.CustomerState) {
		var ret string
		return ret
	}
	return *o.CustomerState
}

// GetCustomerStateOk returns a tuple with the CustomerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerStateOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerState) {
		return nil, false
	}
	return o.CustomerState, true
}

// HasCustomerState returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerState() bool {
	if o != nil && !IsNil(o.CustomerState) {
		return true
	}

	return false
}

// SetCustomerState gets a reference to the given string and assigns it to the CustomerState field.
func (o *PurchaseOrder) SetCustomerState(v string) {
	o.CustomerState = &v
}

// GetCustomerStreetLine1 returns the CustomerStreetLine1 field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerStreetLine1() string {
	if o == nil || IsNil(o.CustomerStreetLine1) {
		var ret string
		return ret
	}
	return *o.CustomerStreetLine1
}

// GetCustomerStreetLine1Ok returns a tuple with the CustomerStreetLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerStreetLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.CustomerStreetLine1) {
		return nil, false
	}
	return o.CustomerStreetLine1, true
}

// HasCustomerStreetLine1 returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerStreetLine1() bool {
	if o != nil && !IsNil(o.CustomerStreetLine1) {
		return true
	}

	return false
}

// SetCustomerStreetLine1 gets a reference to the given string and assigns it to the CustomerStreetLine1 field.
func (o *PurchaseOrder) SetCustomerStreetLine1(v string) {
	o.CustomerStreetLine1 = &v
}

// GetCustomerStreetLine2 returns the CustomerStreetLine2 field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerStreetLine2() string {
	if o == nil || IsNil(o.CustomerStreetLine2) {
		var ret string
		return ret
	}
	return *o.CustomerStreetLine2
}

// GetCustomerStreetLine2Ok returns a tuple with the CustomerStreetLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerStreetLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.CustomerStreetLine2) {
		return nil, false
	}
	return o.CustomerStreetLine2, true
}

// HasCustomerStreetLine2 returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerStreetLine2() bool {
	if o != nil && !IsNil(o.CustomerStreetLine2) {
		return true
	}

	return false
}

// SetCustomerStreetLine2 gets a reference to the given string and assigns it to the CustomerStreetLine2 field.
func (o *PurchaseOrder) SetCustomerStreetLine2(v string) {
	o.CustomerStreetLine2 = &v
}

// GetCustomerZip returns the CustomerZip field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomerZip() string {
	if o == nil || IsNil(o.CustomerZip) {
		var ret string
		return ret
	}
	return *o.CustomerZip
}

// GetCustomerZipOk returns a tuple with the CustomerZip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomerZipOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerZip) {
		return nil, false
	}
	return o.CustomerZip, true
}

// HasCustomerZip returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomerZip() bool {
	if o != nil && !IsNil(o.CustomerZip) {
		return true
	}

	return false
}

// SetCustomerZip gets a reference to the given string and assigns it to the CustomerZip field.
func (o *PurchaseOrder) SetCustomerZip(v string) {
	o.CustomerZip = &v
}

// GetDateClosed returns the DateClosed field value if set, zero value otherwise.
func (o *PurchaseOrder) GetDateClosed() time.Time {
	if o == nil || IsNil(o.DateClosed) {
		var ret time.Time
		return ret
	}
	return *o.DateClosed
}

// GetDateClosedOk returns a tuple with the DateClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetDateClosedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateClosed) {
		return nil, false
	}
	return o.DateClosed, true
}

// HasDateClosed returns a boolean if a field has been set.
func (o *PurchaseOrder) HasDateClosed() bool {
	if o != nil && !IsNil(o.DateClosed) {
		return true
	}

	return false
}

// SetDateClosed gets a reference to the given time.Time and assigns it to the DateClosed field.
func (o *PurchaseOrder) SetDateClosed(v time.Time) {
	o.DateClosed = &v
}

// GetDropShipCustomerFlag returns the DropShipCustomerFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetDropShipCustomerFlag() bool {
	if o == nil || IsNil(o.DropShipCustomerFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DropShipCustomerFlag.Get()
}

// GetDropShipCustomerFlagOk returns a tuple with the DropShipCustomerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetDropShipCustomerFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropShipCustomerFlag.Get(), o.DropShipCustomerFlag.IsSet()
}

// HasDropShipCustomerFlag returns a boolean if a field has been set.
func (o *PurchaseOrder) HasDropShipCustomerFlag() bool {
	if o != nil && o.DropShipCustomerFlag.IsSet() {
		return true
	}

	return false
}

// SetDropShipCustomerFlag gets a reference to the given NullableBool and assigns it to the DropShipCustomerFlag field.
func (o *PurchaseOrder) SetDropShipCustomerFlag(v bool) {
	o.DropShipCustomerFlag.Set(&v)
}
// SetDropShipCustomerFlagNil sets the value for DropShipCustomerFlag to be an explicit nil
func (o *PurchaseOrder) SetDropShipCustomerFlagNil() {
	o.DropShipCustomerFlag.Set(nil)
}

// UnsetDropShipCustomerFlag ensures that no value is present for DropShipCustomerFlag, not even an explicit nil
func (o *PurchaseOrder) UnsetDropShipCustomerFlag() {
	o.DropShipCustomerFlag.Unset()
}

// GetEnteredBy returns the EnteredBy field value if set, zero value otherwise.
func (o *PurchaseOrder) GetEnteredBy() string {
	if o == nil || IsNil(o.EnteredBy) {
		var ret string
		return ret
	}
	return *o.EnteredBy
}

// GetEnteredByOk returns a tuple with the EnteredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetEnteredByOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredBy) {
		return nil, false
	}
	return o.EnteredBy, true
}

// HasEnteredBy returns a boolean if a field has been set.
func (o *PurchaseOrder) HasEnteredBy() bool {
	if o != nil && !IsNil(o.EnteredBy) {
		return true
	}

	return false
}

// SetEnteredBy gets a reference to the given string and assigns it to the EnteredBy field.
func (o *PurchaseOrder) SetEnteredBy(v string) {
	o.EnteredBy = &v
}

// GetFreightCost returns the FreightCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetFreightCost() float64 {
	if o == nil || IsNil(o.FreightCost.Get()) {
		var ret float64
		return ret
	}
	return *o.FreightCost.Get()
}

// GetFreightCostOk returns a tuple with the FreightCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetFreightCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreightCost.Get(), o.FreightCost.IsSet()
}

// HasFreightCost returns a boolean if a field has been set.
func (o *PurchaseOrder) HasFreightCost() bool {
	if o != nil && o.FreightCost.IsSet() {
		return true
	}

	return false
}

// SetFreightCost gets a reference to the given NullableFloat64 and assigns it to the FreightCost field.
func (o *PurchaseOrder) SetFreightCost(v float64) {
	o.FreightCost.Set(&v)
}
// SetFreightCostNil sets the value for FreightCost to be an explicit nil
func (o *PurchaseOrder) SetFreightCostNil() {
	o.FreightCost.Set(nil)
}

// UnsetFreightCost ensures that no value is present for FreightCost, not even an explicit nil
func (o *PurchaseOrder) UnsetFreightCost() {
	o.FreightCost.Unset()
}

// GetFreightPackingSlip returns the FreightPackingSlip field value if set, zero value otherwise.
func (o *PurchaseOrder) GetFreightPackingSlip() string {
	if o == nil || IsNil(o.FreightPackingSlip) {
		var ret string
		return ret
	}
	return *o.FreightPackingSlip
}

// GetFreightPackingSlipOk returns a tuple with the FreightPackingSlip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetFreightPackingSlipOk() (*string, bool) {
	if o == nil || IsNil(o.FreightPackingSlip) {
		return nil, false
	}
	return o.FreightPackingSlip, true
}

// HasFreightPackingSlip returns a boolean if a field has been set.
func (o *PurchaseOrder) HasFreightPackingSlip() bool {
	if o != nil && !IsNil(o.FreightPackingSlip) {
		return true
	}

	return false
}

// SetFreightPackingSlip gets a reference to the given string and assigns it to the FreightPackingSlip field.
func (o *PurchaseOrder) SetFreightPackingSlip(v string) {
	o.FreightPackingSlip = &v
}

// GetFreightTaxTotal returns the FreightTaxTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetFreightTaxTotal() float64 {
	if o == nil || IsNil(o.FreightTaxTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.FreightTaxTotal.Get()
}

// GetFreightTaxTotalOk returns a tuple with the FreightTaxTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetFreightTaxTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreightTaxTotal.Get(), o.FreightTaxTotal.IsSet()
}

// HasFreightTaxTotal returns a boolean if a field has been set.
func (o *PurchaseOrder) HasFreightTaxTotal() bool {
	if o != nil && o.FreightTaxTotal.IsSet() {
		return true
	}

	return false
}

// SetFreightTaxTotal gets a reference to the given NullableFloat64 and assigns it to the FreightTaxTotal field.
func (o *PurchaseOrder) SetFreightTaxTotal(v float64) {
	o.FreightTaxTotal.Set(&v)
}
// SetFreightTaxTotalNil sets the value for FreightTaxTotal to be an explicit nil
func (o *PurchaseOrder) SetFreightTaxTotalNil() {
	o.FreightTaxTotal.Set(nil)
}

// UnsetFreightTaxTotal ensures that no value is present for FreightTaxTotal, not even an explicit nil
func (o *PurchaseOrder) UnsetFreightTaxTotal() {
	o.FreightTaxTotal.Unset()
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *PurchaseOrder) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *PurchaseOrder) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *PurchaseOrder) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *PurchaseOrder) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *PurchaseOrder) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *PurchaseOrder) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *PurchaseOrder) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *PurchaseOrder) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *PurchaseOrder) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *PurchaseOrder) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetPoDate returns the PoDate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetPoDate() time.Time {
	if o == nil || IsNil(o.PoDate) {
		var ret time.Time
		return ret
	}
	return *o.PoDate
}

// GetPoDateOk returns a tuple with the PoDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetPoDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PoDate) {
		return nil, false
	}
	return o.PoDate, true
}

// HasPoDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasPoDate() bool {
	if o != nil && !IsNil(o.PoDate) {
		return true
	}

	return false
}

// SetPoDate gets a reference to the given time.Time and assigns it to the PoDate field.
func (o *PurchaseOrder) SetPoDate(v time.Time) {
	o.PoDate = &v
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *PurchaseOrder) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *PurchaseOrder) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetSalesTax returns the SalesTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetSalesTax() float64 {
	if o == nil || IsNil(o.SalesTax.Get()) {
		var ret float64
		return ret
	}
	return *o.SalesTax.Get()
}

// GetSalesTaxOk returns a tuple with the SalesTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetSalesTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesTax.Get(), o.SalesTax.IsSet()
}

// HasSalesTax returns a boolean if a field has been set.
func (o *PurchaseOrder) HasSalesTax() bool {
	if o != nil && o.SalesTax.IsSet() {
		return true
	}

	return false
}

// SetSalesTax gets a reference to the given NullableFloat64 and assigns it to the SalesTax field.
func (o *PurchaseOrder) SetSalesTax(v float64) {
	o.SalesTax.Set(&v)
}
// SetSalesTaxNil sets the value for SalesTax to be an explicit nil
func (o *PurchaseOrder) SetSalesTaxNil() {
	o.SalesTax.Set(nil)
}

// UnsetSalesTax ensures that no value is present for SalesTax, not even an explicit nil
func (o *PurchaseOrder) UnsetSalesTax() {
	o.SalesTax.Unset()
}

// GetShipmentDate returns the ShipmentDate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetShipmentDate() time.Time {
	if o == nil || IsNil(o.ShipmentDate) {
		var ret time.Time
		return ret
	}
	return *o.ShipmentDate
}

// GetShipmentDateOk returns a tuple with the ShipmentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetShipmentDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ShipmentDate) {
		return nil, false
	}
	return o.ShipmentDate, true
}

// HasShipmentDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasShipmentDate() bool {
	if o != nil && !IsNil(o.ShipmentDate) {
		return true
	}

	return false
}

// SetShipmentDate gets a reference to the given time.Time and assigns it to the ShipmentDate field.
func (o *PurchaseOrder) SetShipmentDate(v time.Time) {
	o.ShipmentDate = &v
}

// GetShipmentMethod returns the ShipmentMethod field value if set, zero value otherwise.
func (o *PurchaseOrder) GetShipmentMethod() ShipmentMethodReference {
	if o == nil || IsNil(o.ShipmentMethod) {
		var ret ShipmentMethodReference
		return ret
	}
	return *o.ShipmentMethod
}

// GetShipmentMethodOk returns a tuple with the ShipmentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetShipmentMethodOk() (*ShipmentMethodReference, bool) {
	if o == nil || IsNil(o.ShipmentMethod) {
		return nil, false
	}
	return o.ShipmentMethod, true
}

// HasShipmentMethod returns a boolean if a field has been set.
func (o *PurchaseOrder) HasShipmentMethod() bool {
	if o != nil && !IsNil(o.ShipmentMethod) {
		return true
	}

	return false
}

// SetShipmentMethod gets a reference to the given ShipmentMethodReference and assigns it to the ShipmentMethod field.
func (o *PurchaseOrder) SetShipmentMethod(v ShipmentMethodReference) {
	o.ShipmentMethod = &v
}

// GetShippingInstructions returns the ShippingInstructions field value if set, zero value otherwise.
func (o *PurchaseOrder) GetShippingInstructions() string {
	if o == nil || IsNil(o.ShippingInstructions) {
		var ret string
		return ret
	}
	return *o.ShippingInstructions
}

// GetShippingInstructionsOk returns a tuple with the ShippingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetShippingInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingInstructions) {
		return nil, false
	}
	return o.ShippingInstructions, true
}

// HasShippingInstructions returns a boolean if a field has been set.
func (o *PurchaseOrder) HasShippingInstructions() bool {
	if o != nil && !IsNil(o.ShippingInstructions) {
		return true
	}

	return false
}

// SetShippingInstructions gets a reference to the given string and assigns it to the ShippingInstructions field.
func (o *PurchaseOrder) SetShippingInstructions(v string) {
	o.ShippingInstructions = &v
}

// GetStatus returns the Status field value
func (o *PurchaseOrder) GetStatus() PurchaseOrderStatusReference {
	if o == nil {
		var ret PurchaseOrderStatusReference
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetStatusOk() (*PurchaseOrderStatusReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PurchaseOrder) SetStatus(v PurchaseOrderStatusReference) {
	o.Status = v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.SubTotal.Get()
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetSubTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubTotal.Get(), o.SubTotal.IsSet()
}

// HasSubTotal returns a boolean if a field has been set.
func (o *PurchaseOrder) HasSubTotal() bool {
	if o != nil && o.SubTotal.IsSet() {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given NullableFloat64 and assigns it to the SubTotal field.
func (o *PurchaseOrder) SetSubTotal(v float64) {
	o.SubTotal.Set(&v)
}
// SetSubTotalNil sets the value for SubTotal to be an explicit nil
func (o *PurchaseOrder) SetSubTotalNil() {
	o.SubTotal.Set(nil)
}

// UnsetSubTotal ensures that no value is present for SubTotal, not even an explicit nil
func (o *PurchaseOrder) UnsetSubTotal() {
	o.SubTotal.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *PurchaseOrder) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *PurchaseOrder) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetTaxFreightFlag returns the TaxFreightFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetTaxFreightFlag() bool {
	if o == nil || IsNil(o.TaxFreightFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxFreightFlag.Get()
}

// GetTaxFreightFlagOk returns a tuple with the TaxFreightFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetTaxFreightFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxFreightFlag.Get(), o.TaxFreightFlag.IsSet()
}

// HasTaxFreightFlag returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTaxFreightFlag() bool {
	if o != nil && o.TaxFreightFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxFreightFlag gets a reference to the given NullableBool and assigns it to the TaxFreightFlag field.
func (o *PurchaseOrder) SetTaxFreightFlag(v bool) {
	o.TaxFreightFlag.Set(&v)
}
// SetTaxFreightFlagNil sets the value for TaxFreightFlag to be an explicit nil
func (o *PurchaseOrder) SetTaxFreightFlagNil() {
	o.TaxFreightFlag.Set(nil)
}

// UnsetTaxFreightFlag ensures that no value is present for TaxFreightFlag, not even an explicit nil
func (o *PurchaseOrder) UnsetTaxFreightFlag() {
	o.TaxFreightFlag.Unset()
}

// GetTaxPoFlag returns the TaxPoFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetTaxPoFlag() bool {
	if o == nil || IsNil(o.TaxPoFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxPoFlag.Get()
}

// GetTaxPoFlagOk returns a tuple with the TaxPoFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetTaxPoFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxPoFlag.Get(), o.TaxPoFlag.IsSet()
}

// HasTaxPoFlag returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTaxPoFlag() bool {
	if o != nil && o.TaxPoFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxPoFlag gets a reference to the given NullableBool and assigns it to the TaxPoFlag field.
func (o *PurchaseOrder) SetTaxPoFlag(v bool) {
	o.TaxPoFlag.Set(&v)
}
// SetTaxPoFlagNil sets the value for TaxPoFlag to be an explicit nil
func (o *PurchaseOrder) SetTaxPoFlagNil() {
	o.TaxPoFlag.Set(nil)
}

// UnsetTaxPoFlag ensures that no value is present for TaxPoFlag, not even an explicit nil
func (o *PurchaseOrder) UnsetTaxPoFlag() {
	o.TaxPoFlag.Unset()
}

// GetTerms returns the Terms field value
func (o *PurchaseOrder) GetTerms() BillingTermsReference {
	if o == nil {
		var ret BillingTermsReference
		return ret
	}

	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTermsOk() (*BillingTermsReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Terms, true
}

// SetTerms sets field value
func (o *PurchaseOrder) SetTerms(v BillingTermsReference) {
	o.Terms = v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *PurchaseOrder) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *PurchaseOrder) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *PurchaseOrder) UnsetTotal() {
	o.Total.Unset()
}

// GetTrackingNumber returns the TrackingNumber field value if set, zero value otherwise.
func (o *PurchaseOrder) GetTrackingNumber() string {
	if o == nil || IsNil(o.TrackingNumber) {
		var ret string
		return ret
	}
	return *o.TrackingNumber
}

// GetTrackingNumberOk returns a tuple with the TrackingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTrackingNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingNumber) {
		return nil, false
	}
	return o.TrackingNumber, true
}

// HasTrackingNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTrackingNumber() bool {
	if o != nil && !IsNil(o.TrackingNumber) {
		return true
	}

	return false
}

// SetTrackingNumber gets a reference to the given string and assigns it to the TrackingNumber field.
func (o *PurchaseOrder) SetTrackingNumber(v string) {
	o.TrackingNumber = &v
}

// GetUpdateShipmentInfo returns the UpdateShipmentInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetUpdateShipmentInfo() bool {
	if o == nil || IsNil(o.UpdateShipmentInfo.Get()) {
		var ret bool
		return ret
	}
	return *o.UpdateShipmentInfo.Get()
}

// GetUpdateShipmentInfoOk returns a tuple with the UpdateShipmentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetUpdateShipmentInfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateShipmentInfo.Get(), o.UpdateShipmentInfo.IsSet()
}

// HasUpdateShipmentInfo returns a boolean if a field has been set.
func (o *PurchaseOrder) HasUpdateShipmentInfo() bool {
	if o != nil && o.UpdateShipmentInfo.IsSet() {
		return true
	}

	return false
}

// SetUpdateShipmentInfo gets a reference to the given NullableBool and assigns it to the UpdateShipmentInfo field.
func (o *PurchaseOrder) SetUpdateShipmentInfo(v bool) {
	o.UpdateShipmentInfo.Set(&v)
}
// SetUpdateShipmentInfoNil sets the value for UpdateShipmentInfo to be an explicit nil
func (o *PurchaseOrder) SetUpdateShipmentInfoNil() {
	o.UpdateShipmentInfo.Set(nil)
}

// UnsetUpdateShipmentInfo ensures that no value is present for UpdateShipmentInfo, not even an explicit nil
func (o *PurchaseOrder) UnsetUpdateShipmentInfo() {
	o.UpdateShipmentInfo.Unset()
}

// GetUpdateVendorOrderNumber returns the UpdateVendorOrderNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PurchaseOrder) GetUpdateVendorOrderNumber() bool {
	if o == nil || IsNil(o.UpdateVendorOrderNumber.Get()) {
		var ret bool
		return ret
	}
	return *o.UpdateVendorOrderNumber.Get()
}

// GetUpdateVendorOrderNumberOk returns a tuple with the UpdateVendorOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PurchaseOrder) GetUpdateVendorOrderNumberOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateVendorOrderNumber.Get(), o.UpdateVendorOrderNumber.IsSet()
}

// HasUpdateVendorOrderNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasUpdateVendorOrderNumber() bool {
	if o != nil && o.UpdateVendorOrderNumber.IsSet() {
		return true
	}

	return false
}

// SetUpdateVendorOrderNumber gets a reference to the given NullableBool and assigns it to the UpdateVendorOrderNumber field.
func (o *PurchaseOrder) SetUpdateVendorOrderNumber(v bool) {
	o.UpdateVendorOrderNumber.Set(&v)
}
// SetUpdateVendorOrderNumberNil sets the value for UpdateVendorOrderNumber to be an explicit nil
func (o *PurchaseOrder) SetUpdateVendorOrderNumberNil() {
	o.UpdateVendorOrderNumber.Set(nil)
}

// UnsetUpdateVendorOrderNumber ensures that no value is present for UpdateVendorOrderNumber, not even an explicit nil
func (o *PurchaseOrder) UnsetUpdateVendorOrderNumber() {
	o.UpdateVendorOrderNumber.Unset()
}

// GetVendorCompany returns the VendorCompany field value
func (o *PurchaseOrder) GetVendorCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.VendorCompany
}

// GetVendorCompanyOk returns a tuple with the VendorCompany field value
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetVendorCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorCompany, true
}

// SetVendorCompany sets field value
func (o *PurchaseOrder) SetVendorCompany(v CompanyReference) {
	o.VendorCompany = v
}

// GetVendorContact returns the VendorContact field value if set, zero value otherwise.
func (o *PurchaseOrder) GetVendorContact() ContactReference {
	if o == nil || IsNil(o.VendorContact) {
		var ret ContactReference
		return ret
	}
	return *o.VendorContact
}

// GetVendorContactOk returns a tuple with the VendorContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetVendorContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.VendorContact) {
		return nil, false
	}
	return o.VendorContact, true
}

// HasVendorContact returns a boolean if a field has been set.
func (o *PurchaseOrder) HasVendorContact() bool {
	if o != nil && !IsNil(o.VendorContact) {
		return true
	}

	return false
}

// SetVendorContact gets a reference to the given ContactReference and assigns it to the VendorContact field.
func (o *PurchaseOrder) SetVendorContact(v ContactReference) {
	o.VendorContact = &v
}

// GetVendorInvoiceDate returns the VendorInvoiceDate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetVendorInvoiceDate() time.Time {
	if o == nil || IsNil(o.VendorInvoiceDate) {
		var ret time.Time
		return ret
	}
	return *o.VendorInvoiceDate
}

// GetVendorInvoiceDateOk returns a tuple with the VendorInvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetVendorInvoiceDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.VendorInvoiceDate) {
		return nil, false
	}
	return o.VendorInvoiceDate, true
}

// HasVendorInvoiceDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasVendorInvoiceDate() bool {
	if o != nil && !IsNil(o.VendorInvoiceDate) {
		return true
	}

	return false
}

// SetVendorInvoiceDate gets a reference to the given time.Time and assigns it to the VendorInvoiceDate field.
func (o *PurchaseOrder) SetVendorInvoiceDate(v time.Time) {
	o.VendorInvoiceDate = &v
}

// GetVendorInvoiceNumber returns the VendorInvoiceNumber field value if set, zero value otherwise.
func (o *PurchaseOrder) GetVendorInvoiceNumber() string {
	if o == nil || IsNil(o.VendorInvoiceNumber) {
		var ret string
		return ret
	}
	return *o.VendorInvoiceNumber
}

// GetVendorInvoiceNumberOk returns a tuple with the VendorInvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetVendorInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorInvoiceNumber) {
		return nil, false
	}
	return o.VendorInvoiceNumber, true
}

// HasVendorInvoiceNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasVendorInvoiceNumber() bool {
	if o != nil && !IsNil(o.VendorInvoiceNumber) {
		return true
	}

	return false
}

// SetVendorInvoiceNumber gets a reference to the given string and assigns it to the VendorInvoiceNumber field.
func (o *PurchaseOrder) SetVendorInvoiceNumber(v string) {
	o.VendorInvoiceNumber = &v
}

// GetVendorOrderNumber returns the VendorOrderNumber field value if set, zero value otherwise.
func (o *PurchaseOrder) GetVendorOrderNumber() string {
	if o == nil || IsNil(o.VendorOrderNumber) {
		var ret string
		return ret
	}
	return *o.VendorOrderNumber
}

// GetVendorOrderNumberOk returns a tuple with the VendorOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetVendorOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VendorOrderNumber) {
		return nil, false
	}
	return o.VendorOrderNumber, true
}

// HasVendorOrderNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasVendorOrderNumber() bool {
	if o != nil && !IsNil(o.VendorOrderNumber) {
		return true
	}

	return false
}

// SetVendorOrderNumber gets a reference to the given string and assigns it to the VendorOrderNumber field.
func (o *PurchaseOrder) SetVendorOrderNumber(v string) {
	o.VendorOrderNumber = &v
}

// GetVendorSite returns the VendorSite field value if set, zero value otherwise.
func (o *PurchaseOrder) GetVendorSite() SiteReference {
	if o == nil || IsNil(o.VendorSite) {
		var ret SiteReference
		return ret
	}
	return *o.VendorSite
}

// GetVendorSiteOk returns a tuple with the VendorSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetVendorSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.VendorSite) {
		return nil, false
	}
	return o.VendorSite, true
}

// HasVendorSite returns a boolean if a field has been set.
func (o *PurchaseOrder) HasVendorSite() bool {
	if o != nil && !IsNil(o.VendorSite) {
		return true
	}

	return false
}

// SetVendorSite gets a reference to the given SiteReference and assigns it to the VendorSite field.
func (o *PurchaseOrder) SetVendorSite(v SiteReference) {
	o.VendorSite = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *PurchaseOrder) GetWarehouse() WarehouseReference {
	if o == nil || IsNil(o.Warehouse) {
		var ret WarehouseReference
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *PurchaseOrder) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given WarehouseReference and assigns it to the Warehouse field.
func (o *PurchaseOrder) SetWarehouse(v WarehouseReference) {
	o.Warehouse = &v
}

// GetWarehouseContact returns the WarehouseContact field value if set, zero value otherwise.
func (o *PurchaseOrder) GetWarehouseContact() ContactReference {
	if o == nil || IsNil(o.WarehouseContact) {
		var ret ContactReference
		return ret
	}
	return *o.WarehouseContact
}

// GetWarehouseContactOk returns a tuple with the WarehouseContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetWarehouseContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.WarehouseContact) {
		return nil, false
	}
	return o.WarehouseContact, true
}

// HasWarehouseContact returns a boolean if a field has been set.
func (o *PurchaseOrder) HasWarehouseContact() bool {
	if o != nil && !IsNil(o.WarehouseContact) {
		return true
	}

	return false
}

// SetWarehouseContact gets a reference to the given ContactReference and assigns it to the WarehouseContact field.
func (o *PurchaseOrder) SetWarehouseContact(v ContactReference) {
	o.WarehouseContact = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *PurchaseOrder) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *PurchaseOrder) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *PurchaseOrder) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *PurchaseOrder) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *PurchaseOrder) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o PurchaseOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.BusinessUnit) {
		toSerialize["businessUnit"] = o.BusinessUnit
	}
	if !IsNil(o.CancelReason) {
		toSerialize["cancelReason"] = o.CancelReason
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if !IsNil(o.ClosedBy) {
		toSerialize["closedBy"] = o.ClosedBy
	}
	if !IsNil(o.CustomerCity) {
		toSerialize["customerCity"] = o.CustomerCity
	}
	if !IsNil(o.CustomerCompany) {
		toSerialize["customerCompany"] = o.CustomerCompany
	}
	if !IsNil(o.CustomerContact) {
		toSerialize["customerContact"] = o.CustomerContact
	}
	if !IsNil(o.CustomerCountry) {
		toSerialize["customerCountry"] = o.CustomerCountry
	}
	if !IsNil(o.CustomerExtension) {
		toSerialize["customerExtension"] = o.CustomerExtension
	}
	if !IsNil(o.CustomerName) {
		toSerialize["customerName"] = o.CustomerName
	}
	if !IsNil(o.CustomerPhone) {
		toSerialize["customerPhone"] = o.CustomerPhone
	}
	if !IsNil(o.CustomerSite) {
		toSerialize["customerSite"] = o.CustomerSite
	}
	if !IsNil(o.CustomerSiteName) {
		toSerialize["customerSiteName"] = o.CustomerSiteName
	}
	if !IsNil(o.CustomerState) {
		toSerialize["customerState"] = o.CustomerState
	}
	if !IsNil(o.CustomerStreetLine1) {
		toSerialize["customerStreetLine1"] = o.CustomerStreetLine1
	}
	if !IsNil(o.CustomerStreetLine2) {
		toSerialize["customerStreetLine2"] = o.CustomerStreetLine2
	}
	if !IsNil(o.CustomerZip) {
		toSerialize["customerZip"] = o.CustomerZip
	}
	if !IsNil(o.DateClosed) {
		toSerialize["dateClosed"] = o.DateClosed
	}
	if o.DropShipCustomerFlag.IsSet() {
		toSerialize["dropShipCustomerFlag"] = o.DropShipCustomerFlag.Get()
	}
	if !IsNil(o.EnteredBy) {
		toSerialize["enteredBy"] = o.EnteredBy
	}
	if o.FreightCost.IsSet() {
		toSerialize["freightCost"] = o.FreightCost.Get()
	}
	if !IsNil(o.FreightPackingSlip) {
		toSerialize["freightPackingSlip"] = o.FreightPackingSlip
	}
	if o.FreightTaxTotal.IsSet() {
		toSerialize["freightTaxTotal"] = o.FreightTaxTotal.Get()
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.PoDate) {
		toSerialize["poDate"] = o.PoDate
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if o.SalesTax.IsSet() {
		toSerialize["salesTax"] = o.SalesTax.Get()
	}
	if !IsNil(o.ShipmentDate) {
		toSerialize["shipmentDate"] = o.ShipmentDate
	}
	if !IsNil(o.ShipmentMethod) {
		toSerialize["shipmentMethod"] = o.ShipmentMethod
	}
	if !IsNil(o.ShippingInstructions) {
		toSerialize["shippingInstructions"] = o.ShippingInstructions
	}
	toSerialize["status"] = o.Status
	if o.SubTotal.IsSet() {
		toSerialize["subTotal"] = o.SubTotal.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.TaxFreightFlag.IsSet() {
		toSerialize["taxFreightFlag"] = o.TaxFreightFlag.Get()
	}
	if o.TaxPoFlag.IsSet() {
		toSerialize["taxPoFlag"] = o.TaxPoFlag.Get()
	}
	toSerialize["terms"] = o.Terms
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.TrackingNumber) {
		toSerialize["trackingNumber"] = o.TrackingNumber
	}
	if o.UpdateShipmentInfo.IsSet() {
		toSerialize["updateShipmentInfo"] = o.UpdateShipmentInfo.Get()
	}
	if o.UpdateVendorOrderNumber.IsSet() {
		toSerialize["updateVendorOrderNumber"] = o.UpdateVendorOrderNumber.Get()
	}
	toSerialize["vendorCompany"] = o.VendorCompany
	if !IsNil(o.VendorContact) {
		toSerialize["vendorContact"] = o.VendorContact
	}
	if !IsNil(o.VendorInvoiceDate) {
		toSerialize["vendorInvoiceDate"] = o.VendorInvoiceDate
	}
	if !IsNil(o.VendorInvoiceNumber) {
		toSerialize["vendorInvoiceNumber"] = o.VendorInvoiceNumber
	}
	if !IsNil(o.VendorOrderNumber) {
		toSerialize["vendorOrderNumber"] = o.VendorOrderNumber
	}
	if !IsNil(o.VendorSite) {
		toSerialize["vendorSite"] = o.VendorSite
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.WarehouseContact) {
		toSerialize["warehouseContact"] = o.WarehouseContact
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *PurchaseOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"terms",
		"vendorCompany",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPurchaseOrder := _PurchaseOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPurchaseOrder)

	if err != nil {
		return err
	}

	*o = PurchaseOrder(varPurchaseOrder)

	return err
}

type NullablePurchaseOrder struct {
	value *PurchaseOrder
	isSet bool
}

func (v NullablePurchaseOrder) Get() *PurchaseOrder {
	return v.value
}

func (v *NullablePurchaseOrder) Set(val *PurchaseOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrder(val *PurchaseOrder) *NullablePurchaseOrder {
	return &NullablePurchaseOrder{value: val, isSet: true}
}

func (v NullablePurchaseOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


