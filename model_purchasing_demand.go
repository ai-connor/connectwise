/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the PurchasingDemand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchasingDemand{}

// PurchasingDemand struct for PurchasingDemand
type PurchasingDemand struct {
	Warehouse *WarehouseReference `json:"warehouse,omitempty"`
	Vendor *CompanyReference `json:"vendor,omitempty"`
	Products []ProductDemand `json:"products,omitempty"`
	PurchaseOrder *PurchaseOrder `json:"purchaseOrder,omitempty"`
}

// NewPurchasingDemand instantiates a new PurchasingDemand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchasingDemand() *PurchasingDemand {
	this := PurchasingDemand{}
	return &this
}

// NewPurchasingDemandWithDefaults instantiates a new PurchasingDemand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchasingDemandWithDefaults() *PurchasingDemand {
	this := PurchasingDemand{}
	return &this
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *PurchasingDemand) GetWarehouse() WarehouseReference {
	if o == nil || IsNil(o.Warehouse) {
		var ret WarehouseReference
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingDemand) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *PurchasingDemand) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given WarehouseReference and assigns it to the Warehouse field.
func (o *PurchasingDemand) SetWarehouse(v WarehouseReference) {
	o.Warehouse = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *PurchasingDemand) GetVendor() CompanyReference {
	if o == nil || IsNil(o.Vendor) {
		var ret CompanyReference
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingDemand) GetVendorOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *PurchasingDemand) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given CompanyReference and assigns it to the Vendor field.
func (o *PurchasingDemand) SetVendor(v CompanyReference) {
	o.Vendor = &v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *PurchasingDemand) GetProducts() []ProductDemand {
	if o == nil || IsNil(o.Products) {
		var ret []ProductDemand
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingDemand) GetProductsOk() ([]ProductDemand, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *PurchasingDemand) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []ProductDemand and assigns it to the Products field.
func (o *PurchasingDemand) SetProducts(v []ProductDemand) {
	o.Products = v
}

// GetPurchaseOrder returns the PurchaseOrder field value if set, zero value otherwise.
func (o *PurchasingDemand) GetPurchaseOrder() PurchaseOrder {
	if o == nil || IsNil(o.PurchaseOrder) {
		var ret PurchaseOrder
		return ret
	}
	return *o.PurchaseOrder
}

// GetPurchaseOrderOk returns a tuple with the PurchaseOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchasingDemand) GetPurchaseOrderOk() (*PurchaseOrder, bool) {
	if o == nil || IsNil(o.PurchaseOrder) {
		return nil, false
	}
	return o.PurchaseOrder, true
}

// HasPurchaseOrder returns a boolean if a field has been set.
func (o *PurchasingDemand) HasPurchaseOrder() bool {
	if o != nil && !IsNil(o.PurchaseOrder) {
		return true
	}

	return false
}

// SetPurchaseOrder gets a reference to the given PurchaseOrder and assigns it to the PurchaseOrder field.
func (o *PurchasingDemand) SetPurchaseOrder(v PurchaseOrder) {
	o.PurchaseOrder = &v
}

func (o PurchasingDemand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchasingDemand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if !IsNil(o.PurchaseOrder) {
		toSerialize["purchaseOrder"] = o.PurchaseOrder
	}
	return toSerialize, nil
}

type NullablePurchasingDemand struct {
	value *PurchasingDemand
	isSet bool
}

func (v NullablePurchasingDemand) Get() *PurchasingDemand {
	return v.value
}

func (v *NullablePurchasingDemand) Set(val *PurchasingDemand) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchasingDemand) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchasingDemand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchasingDemand(val *PurchasingDemand) *NullablePurchasingDemand {
	return &NullablePurchasingDemand{value: val, isSet: true}
}

func (v NullablePurchasingDemand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchasingDemand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


