/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuoteLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteLink{}

// QuoteLink struct for QuoteLink
type QuoteLink struct {
	Id *int32 `json:"id,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	//  Max length: 2000;
	Link string `json:"link"`
	AllLocationsFlag NullableBool `json:"allLocationsFlag,omitempty"`
	NewWindowFlag NullableBool `json:"newWindowFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _QuoteLink QuoteLink

// NewQuoteLink instantiates a new QuoteLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteLink(link string) *QuoteLink {
	this := QuoteLink{}
	this.Link = link
	return &this
}

// NewQuoteLinkWithDefaults instantiates a new QuoteLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteLinkWithDefaults() *QuoteLink {
	this := QuoteLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *QuoteLink) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteLink) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *QuoteLink) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *QuoteLink) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *QuoteLink) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteLink) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *QuoteLink) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *QuoteLink) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetLink returns the Link field value
func (o *QuoteLink) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *QuoteLink) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *QuoteLink) SetLink(v string) {
	o.Link = v
}

// GetAllLocationsFlag returns the AllLocationsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuoteLink) GetAllLocationsFlag() bool {
	if o == nil || IsNil(o.AllLocationsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllLocationsFlag.Get()
}

// GetAllLocationsFlagOk returns a tuple with the AllLocationsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuoteLink) GetAllLocationsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllLocationsFlag.Get(), o.AllLocationsFlag.IsSet()
}

// HasAllLocationsFlag returns a boolean if a field has been set.
func (o *QuoteLink) HasAllLocationsFlag() bool {
	if o != nil && o.AllLocationsFlag.IsSet() {
		return true
	}

	return false
}

// SetAllLocationsFlag gets a reference to the given NullableBool and assigns it to the AllLocationsFlag field.
func (o *QuoteLink) SetAllLocationsFlag(v bool) {
	o.AllLocationsFlag.Set(&v)
}
// SetAllLocationsFlagNil sets the value for AllLocationsFlag to be an explicit nil
func (o *QuoteLink) SetAllLocationsFlagNil() {
	o.AllLocationsFlag.Set(nil)
}

// UnsetAllLocationsFlag ensures that no value is present for AllLocationsFlag, not even an explicit nil
func (o *QuoteLink) UnsetAllLocationsFlag() {
	o.AllLocationsFlag.Unset()
}

// GetNewWindowFlag returns the NewWindowFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuoteLink) GetNewWindowFlag() bool {
	if o == nil || IsNil(o.NewWindowFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.NewWindowFlag.Get()
}

// GetNewWindowFlagOk returns a tuple with the NewWindowFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuoteLink) GetNewWindowFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewWindowFlag.Get(), o.NewWindowFlag.IsSet()
}

// HasNewWindowFlag returns a boolean if a field has been set.
func (o *QuoteLink) HasNewWindowFlag() bool {
	if o != nil && o.NewWindowFlag.IsSet() {
		return true
	}

	return false
}

// SetNewWindowFlag gets a reference to the given NullableBool and assigns it to the NewWindowFlag field.
func (o *QuoteLink) SetNewWindowFlag(v bool) {
	o.NewWindowFlag.Set(&v)
}
// SetNewWindowFlagNil sets the value for NewWindowFlag to be an explicit nil
func (o *QuoteLink) SetNewWindowFlagNil() {
	o.NewWindowFlag.Set(nil)
}

// UnsetNewWindowFlag ensures that no value is present for NewWindowFlag, not even an explicit nil
func (o *QuoteLink) UnsetNewWindowFlag() {
	o.NewWindowFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *QuoteLink) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteLink) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *QuoteLink) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *QuoteLink) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o QuoteLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	toSerialize["link"] = o.Link
	if o.AllLocationsFlag.IsSet() {
		toSerialize["allLocationsFlag"] = o.AllLocationsFlag.Get()
	}
	if o.NewWindowFlag.IsSet() {
		toSerialize["newWindowFlag"] = o.NewWindowFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *QuoteLink) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"link",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuoteLink := _QuoteLink{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuoteLink)

	if err != nil {
		return err
	}

	*o = QuoteLink(varQuoteLink)

	return err
}

type NullableQuoteLink struct {
	value *QuoteLink
	isSet bool
}

func (v NullableQuoteLink) Get() *QuoteLink {
	return v.value
}

func (v *NullableQuoteLink) Set(val *QuoteLink) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteLink) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteLink(val *QuoteLink) *NullableQuoteLink {
	return &NullableQuoteLink{value: val, isSet: true}
}

func (v NullableQuoteLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


