/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ReportingService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportingService{}

// ReportingService struct for ReportingService
type ReportingService struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	ReportingUserName *string `json:"reportingUserName,omitempty"`
	// To blank out the password, enter an empty string here. Max length: 50;
	ReportingPassword *string `json:"reportingPassword,omitempty"`
	//  Max length: 50;
	ReportingDomain *string `json:"reportingDomain,omitempty"`
	//  Max length: 100;
	ReportingUrl *string `json:"reportingUrl,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewReportingService instantiates a new ReportingService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportingService() *ReportingService {
	this := ReportingService{}
	return &this
}

// NewReportingServiceWithDefaults instantiates a new ReportingService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportingServiceWithDefaults() *ReportingService {
	this := ReportingService{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReportingService) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingService) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReportingService) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReportingService) SetId(v int32) {
	o.Id = &v
}

// GetReportingUserName returns the ReportingUserName field value if set, zero value otherwise.
func (o *ReportingService) GetReportingUserName() string {
	if o == nil || IsNil(o.ReportingUserName) {
		var ret string
		return ret
	}
	return *o.ReportingUserName
}

// GetReportingUserNameOk returns a tuple with the ReportingUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingService) GetReportingUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingUserName) {
		return nil, false
	}
	return o.ReportingUserName, true
}

// HasReportingUserName returns a boolean if a field has been set.
func (o *ReportingService) HasReportingUserName() bool {
	if o != nil && !IsNil(o.ReportingUserName) {
		return true
	}

	return false
}

// SetReportingUserName gets a reference to the given string and assigns it to the ReportingUserName field.
func (o *ReportingService) SetReportingUserName(v string) {
	o.ReportingUserName = &v
}

// GetReportingPassword returns the ReportingPassword field value if set, zero value otherwise.
func (o *ReportingService) GetReportingPassword() string {
	if o == nil || IsNil(o.ReportingPassword) {
		var ret string
		return ret
	}
	return *o.ReportingPassword
}

// GetReportingPasswordOk returns a tuple with the ReportingPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingService) GetReportingPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingPassword) {
		return nil, false
	}
	return o.ReportingPassword, true
}

// HasReportingPassword returns a boolean if a field has been set.
func (o *ReportingService) HasReportingPassword() bool {
	if o != nil && !IsNil(o.ReportingPassword) {
		return true
	}

	return false
}

// SetReportingPassword gets a reference to the given string and assigns it to the ReportingPassword field.
func (o *ReportingService) SetReportingPassword(v string) {
	o.ReportingPassword = &v
}

// GetReportingDomain returns the ReportingDomain field value if set, zero value otherwise.
func (o *ReportingService) GetReportingDomain() string {
	if o == nil || IsNil(o.ReportingDomain) {
		var ret string
		return ret
	}
	return *o.ReportingDomain
}

// GetReportingDomainOk returns a tuple with the ReportingDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingService) GetReportingDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingDomain) {
		return nil, false
	}
	return o.ReportingDomain, true
}

// HasReportingDomain returns a boolean if a field has been set.
func (o *ReportingService) HasReportingDomain() bool {
	if o != nil && !IsNil(o.ReportingDomain) {
		return true
	}

	return false
}

// SetReportingDomain gets a reference to the given string and assigns it to the ReportingDomain field.
func (o *ReportingService) SetReportingDomain(v string) {
	o.ReportingDomain = &v
}

// GetReportingUrl returns the ReportingUrl field value if set, zero value otherwise.
func (o *ReportingService) GetReportingUrl() string {
	if o == nil || IsNil(o.ReportingUrl) {
		var ret string
		return ret
	}
	return *o.ReportingUrl
}

// GetReportingUrlOk returns a tuple with the ReportingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingService) GetReportingUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingUrl) {
		return nil, false
	}
	return o.ReportingUrl, true
}

// HasReportingUrl returns a boolean if a field has been set.
func (o *ReportingService) HasReportingUrl() bool {
	if o != nil && !IsNil(o.ReportingUrl) {
		return true
	}

	return false
}

// SetReportingUrl gets a reference to the given string and assigns it to the ReportingUrl field.
func (o *ReportingService) SetReportingUrl(v string) {
	o.ReportingUrl = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ReportingService) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingService) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ReportingService) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ReportingService) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ReportingService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportingService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReportingUserName) {
		toSerialize["reportingUserName"] = o.ReportingUserName
	}
	if !IsNil(o.ReportingPassword) {
		toSerialize["reportingPassword"] = o.ReportingPassword
	}
	if !IsNil(o.ReportingDomain) {
		toSerialize["reportingDomain"] = o.ReportingDomain
	}
	if !IsNil(o.ReportingUrl) {
		toSerialize["reportingUrl"] = o.ReportingUrl
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableReportingService struct {
	value *ReportingService
	isSet bool
}

func (v NullableReportingService) Get() *ReportingService {
	return v.value
}

func (v *NullableReportingService) Set(val *ReportingService) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingService) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingService(val *ReportingService) *NullableReportingService {
	return &NullableReportingService{value: val, isSet: true}
}

func (v NullableReportingService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


