/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduleColor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleColor{}

// ScheduleColor struct for ScheduleColor
type ScheduleColor struct {
	Id *int32 `json:"id,omitempty"`
	// A startPercent (0 or higher) is required if endPercent has value.
	StartPercent NullableInt32 `json:"startPercent,omitempty"`
	// A endPercent is required if startPercent has value.
	EndPercent NullableInt32 `json:"endPercent,omitempty"`
	// Must be a valid Hexadecimal Color Code.
	Color string `json:"color"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _ScheduleColor ScheduleColor

// NewScheduleColor instantiates a new ScheduleColor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleColor(color string) *ScheduleColor {
	this := ScheduleColor{}
	this.Color = color
	return &this
}

// NewScheduleColorWithDefaults instantiates a new ScheduleColor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleColorWithDefaults() *ScheduleColor {
	this := ScheduleColor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScheduleColor) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleColor) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScheduleColor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ScheduleColor) SetId(v int32) {
	o.Id = &v
}

// GetStartPercent returns the StartPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleColor) GetStartPercent() int32 {
	if o == nil || IsNil(o.StartPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.StartPercent.Get()
}

// GetStartPercentOk returns a tuple with the StartPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleColor) GetStartPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartPercent.Get(), o.StartPercent.IsSet()
}

// HasStartPercent returns a boolean if a field has been set.
func (o *ScheduleColor) HasStartPercent() bool {
	if o != nil && o.StartPercent.IsSet() {
		return true
	}

	return false
}

// SetStartPercent gets a reference to the given NullableInt32 and assigns it to the StartPercent field.
func (o *ScheduleColor) SetStartPercent(v int32) {
	o.StartPercent.Set(&v)
}
// SetStartPercentNil sets the value for StartPercent to be an explicit nil
func (o *ScheduleColor) SetStartPercentNil() {
	o.StartPercent.Set(nil)
}

// UnsetStartPercent ensures that no value is present for StartPercent, not even an explicit nil
func (o *ScheduleColor) UnsetStartPercent() {
	o.StartPercent.Unset()
}

// GetEndPercent returns the EndPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleColor) GetEndPercent() int32 {
	if o == nil || IsNil(o.EndPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.EndPercent.Get()
}

// GetEndPercentOk returns a tuple with the EndPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleColor) GetEndPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndPercent.Get(), o.EndPercent.IsSet()
}

// HasEndPercent returns a boolean if a field has been set.
func (o *ScheduleColor) HasEndPercent() bool {
	if o != nil && o.EndPercent.IsSet() {
		return true
	}

	return false
}

// SetEndPercent gets a reference to the given NullableInt32 and assigns it to the EndPercent field.
func (o *ScheduleColor) SetEndPercent(v int32) {
	o.EndPercent.Set(&v)
}
// SetEndPercentNil sets the value for EndPercent to be an explicit nil
func (o *ScheduleColor) SetEndPercentNil() {
	o.EndPercent.Set(nil)
}

// UnsetEndPercent ensures that no value is present for EndPercent, not even an explicit nil
func (o *ScheduleColor) UnsetEndPercent() {
	o.EndPercent.Unset()
}

// GetColor returns the Color field value
func (o *ScheduleColor) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ScheduleColor) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ScheduleColor) SetColor(v string) {
	o.Color = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ScheduleColor) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleColor) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ScheduleColor) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ScheduleColor) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ScheduleColor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleColor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.StartPercent.IsSet() {
		toSerialize["startPercent"] = o.StartPercent.Get()
	}
	if o.EndPercent.IsSet() {
		toSerialize["endPercent"] = o.EndPercent.Get()
	}
	toSerialize["color"] = o.Color
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *ScheduleColor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleColor := _ScheduleColor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleColor)

	if err != nil {
		return err
	}

	*o = ScheduleColor(varScheduleColor)

	return err
}

type NullableScheduleColor struct {
	value *ScheduleColor
	isSet bool
}

func (v NullableScheduleColor) Get() *ScheduleColor {
	return v.value
}

func (v *NullableScheduleColor) Set(val *ScheduleColor) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleColor) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleColor(val *ScheduleColor) *NullableScheduleColor {
	return &NullableScheduleColor{value: val, isSet: true}
}

func (v NullableScheduleColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


