/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ScheduleTypeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleTypeInfo{}

// ScheduleTypeInfo struct for ScheduleTypeInfo
type ScheduleTypeInfo struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	ChargeCode *ChargeCodeReference `json:"chargeCode,omitempty"`
	Where *ServiceLocationReference `json:"where,omitempty"`
	SystemFlag NullableBool `json:"systemFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewScheduleTypeInfo instantiates a new ScheduleTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleTypeInfo() *ScheduleTypeInfo {
	this := ScheduleTypeInfo{}
	return &this
}

// NewScheduleTypeInfoWithDefaults instantiates a new ScheduleTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleTypeInfoWithDefaults() *ScheduleTypeInfo {
	this := ScheduleTypeInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScheduleTypeInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTypeInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ScheduleTypeInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScheduleTypeInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTypeInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScheduleTypeInfo) SetName(v string) {
	o.Name = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ScheduleTypeInfo) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTypeInfo) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ScheduleTypeInfo) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetChargeCode returns the ChargeCode field value if set, zero value otherwise.
func (o *ScheduleTypeInfo) GetChargeCode() ChargeCodeReference {
	if o == nil || IsNil(o.ChargeCode) {
		var ret ChargeCodeReference
		return ret
	}
	return *o.ChargeCode
}

// GetChargeCodeOk returns a tuple with the ChargeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTypeInfo) GetChargeCodeOk() (*ChargeCodeReference, bool) {
	if o == nil || IsNil(o.ChargeCode) {
		return nil, false
	}
	return o.ChargeCode, true
}

// HasChargeCode returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasChargeCode() bool {
	if o != nil && !IsNil(o.ChargeCode) {
		return true
	}

	return false
}

// SetChargeCode gets a reference to the given ChargeCodeReference and assigns it to the ChargeCode field.
func (o *ScheduleTypeInfo) SetChargeCode(v ChargeCodeReference) {
	o.ChargeCode = &v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *ScheduleTypeInfo) GetWhere() ServiceLocationReference {
	if o == nil || IsNil(o.Where) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTypeInfo) GetWhereOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.Where) {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given ServiceLocationReference and assigns it to the Where field.
func (o *ScheduleTypeInfo) SetWhere(v ServiceLocationReference) {
	o.Where = &v
}

// GetSystemFlag returns the SystemFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleTypeInfo) GetSystemFlag() bool {
	if o == nil || IsNil(o.SystemFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SystemFlag.Get()
}

// GetSystemFlagOk returns a tuple with the SystemFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleTypeInfo) GetSystemFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemFlag.Get(), o.SystemFlag.IsSet()
}

// HasSystemFlag returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasSystemFlag() bool {
	if o != nil && o.SystemFlag.IsSet() {
		return true
	}

	return false
}

// SetSystemFlag gets a reference to the given NullableBool and assigns it to the SystemFlag field.
func (o *ScheduleTypeInfo) SetSystemFlag(v bool) {
	o.SystemFlag.Set(&v)
}
// SetSystemFlagNil sets the value for SystemFlag to be an explicit nil
func (o *ScheduleTypeInfo) SetSystemFlagNil() {
	o.SystemFlag.Set(nil)
}

// UnsetSystemFlag ensures that no value is present for SystemFlag, not even an explicit nil
func (o *ScheduleTypeInfo) UnsetSystemFlag() {
	o.SystemFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ScheduleTypeInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleTypeInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ScheduleTypeInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ScheduleTypeInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ScheduleTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleTypeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ChargeCode) {
		toSerialize["chargeCode"] = o.ChargeCode
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}
	if o.SystemFlag.IsSet() {
		toSerialize["systemFlag"] = o.SystemFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableScheduleTypeInfo struct {
	value *ScheduleTypeInfo
	isSet bool
}

func (v NullableScheduleTypeInfo) Get() *ScheduleTypeInfo {
	return v.value
}

func (v *NullableScheduleTypeInfo) Set(val *ScheduleTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleTypeInfo(val *ScheduleTypeInfo) *NullableScheduleTypeInfo {
	return &NullableScheduleTypeInfo{value: val, isSet: true}
}

func (v NullableScheduleTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


