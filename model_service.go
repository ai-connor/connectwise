/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Service type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Service{}

// Service struct for Service
type Service struct {
	Id *int32 `json:"id,omitempty"`
	SrNotify NullableString `json:"srNotify"`
	ScheduleSpan string `json:"scheduleSpan"`
	HideDelimiterFlag NullableBool `json:"hideDelimiterFlag,omitempty"`
	AllowCCFlag NullableBool `json:"allowCCFlag,omitempty"`
	AllowTOFlag NullableBool `json:"allowTOFlag,omitempty"`
	//  Max length: 50;
	HeaderColor *string `json:"headerColor,omitempty"`
	//  Max length: 50;
	MemberColor *string `json:"memberColor,omitempty"`
	//  Max length: 50;
	ContactColor *string `json:"contactColor,omitempty"`
	//  Max length: 50;
	UnknownColor *string `json:"unknownColor,omitempty"`
	CalendarSetup *CalendarSetupReference `json:"calendarSetup,omitempty"`
	HeaderColorDisableFlag NullableBool `json:"headerColorDisableFlag,omitempty"`
	MemberColorDisableFlag NullableBool `json:"memberColorDisableFlag,omitempty"`
	ContactColorDisableFlag NullableBool `json:"contactColorDisableFlag,omitempty"`
	UnknownColorDisableFlag NullableBool `json:"unknownColorDisableFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Service Service

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService(srNotify NullableString, scheduleSpan string) *Service {
	this := Service{}
	this.SrNotify = srNotify
	this.ScheduleSpan = scheduleSpan
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Service) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Service) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Service) SetId(v int32) {
	o.Id = &v
}

// GetSrNotify returns the SrNotify field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Service) GetSrNotify() string {
	if o == nil || o.SrNotify.Get() == nil {
		var ret string
		return ret
	}

	return *o.SrNotify.Get()
}

// GetSrNotifyOk returns a tuple with the SrNotify field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetSrNotifyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SrNotify.Get(), o.SrNotify.IsSet()
}

// SetSrNotify sets field value
func (o *Service) SetSrNotify(v string) {
	o.SrNotify.Set(&v)
}

// GetScheduleSpan returns the ScheduleSpan field value
func (o *Service) GetScheduleSpan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduleSpan
}

// GetScheduleSpanOk returns a tuple with the ScheduleSpan field value
// and a boolean to check if the value has been set.
func (o *Service) GetScheduleSpanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleSpan, true
}

// SetScheduleSpan sets field value
func (o *Service) SetScheduleSpan(v string) {
	o.ScheduleSpan = v
}

// GetHideDelimiterFlag returns the HideDelimiterFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetHideDelimiterFlag() bool {
	if o == nil || IsNil(o.HideDelimiterFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HideDelimiterFlag.Get()
}

// GetHideDelimiterFlagOk returns a tuple with the HideDelimiterFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetHideDelimiterFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HideDelimiterFlag.Get(), o.HideDelimiterFlag.IsSet()
}

// HasHideDelimiterFlag returns a boolean if a field has been set.
func (o *Service) HasHideDelimiterFlag() bool {
	if o != nil && o.HideDelimiterFlag.IsSet() {
		return true
	}

	return false
}

// SetHideDelimiterFlag gets a reference to the given NullableBool and assigns it to the HideDelimiterFlag field.
func (o *Service) SetHideDelimiterFlag(v bool) {
	o.HideDelimiterFlag.Set(&v)
}
// SetHideDelimiterFlagNil sets the value for HideDelimiterFlag to be an explicit nil
func (o *Service) SetHideDelimiterFlagNil() {
	o.HideDelimiterFlag.Set(nil)
}

// UnsetHideDelimiterFlag ensures that no value is present for HideDelimiterFlag, not even an explicit nil
func (o *Service) UnsetHideDelimiterFlag() {
	o.HideDelimiterFlag.Unset()
}

// GetAllowCCFlag returns the AllowCCFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetAllowCCFlag() bool {
	if o == nil || IsNil(o.AllowCCFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowCCFlag.Get()
}

// GetAllowCCFlagOk returns a tuple with the AllowCCFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetAllowCCFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowCCFlag.Get(), o.AllowCCFlag.IsSet()
}

// HasAllowCCFlag returns a boolean if a field has been set.
func (o *Service) HasAllowCCFlag() bool {
	if o != nil && o.AllowCCFlag.IsSet() {
		return true
	}

	return false
}

// SetAllowCCFlag gets a reference to the given NullableBool and assigns it to the AllowCCFlag field.
func (o *Service) SetAllowCCFlag(v bool) {
	o.AllowCCFlag.Set(&v)
}
// SetAllowCCFlagNil sets the value for AllowCCFlag to be an explicit nil
func (o *Service) SetAllowCCFlagNil() {
	o.AllowCCFlag.Set(nil)
}

// UnsetAllowCCFlag ensures that no value is present for AllowCCFlag, not even an explicit nil
func (o *Service) UnsetAllowCCFlag() {
	o.AllowCCFlag.Unset()
}

// GetAllowTOFlag returns the AllowTOFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetAllowTOFlag() bool {
	if o == nil || IsNil(o.AllowTOFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowTOFlag.Get()
}

// GetAllowTOFlagOk returns a tuple with the AllowTOFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetAllowTOFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowTOFlag.Get(), o.AllowTOFlag.IsSet()
}

// HasAllowTOFlag returns a boolean if a field has been set.
func (o *Service) HasAllowTOFlag() bool {
	if o != nil && o.AllowTOFlag.IsSet() {
		return true
	}

	return false
}

// SetAllowTOFlag gets a reference to the given NullableBool and assigns it to the AllowTOFlag field.
func (o *Service) SetAllowTOFlag(v bool) {
	o.AllowTOFlag.Set(&v)
}
// SetAllowTOFlagNil sets the value for AllowTOFlag to be an explicit nil
func (o *Service) SetAllowTOFlagNil() {
	o.AllowTOFlag.Set(nil)
}

// UnsetAllowTOFlag ensures that no value is present for AllowTOFlag, not even an explicit nil
func (o *Service) UnsetAllowTOFlag() {
	o.AllowTOFlag.Unset()
}

// GetHeaderColor returns the HeaderColor field value if set, zero value otherwise.
func (o *Service) GetHeaderColor() string {
	if o == nil || IsNil(o.HeaderColor) {
		var ret string
		return ret
	}
	return *o.HeaderColor
}

// GetHeaderColorOk returns a tuple with the HeaderColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetHeaderColorOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderColor) {
		return nil, false
	}
	return o.HeaderColor, true
}

// HasHeaderColor returns a boolean if a field has been set.
func (o *Service) HasHeaderColor() bool {
	if o != nil && !IsNil(o.HeaderColor) {
		return true
	}

	return false
}

// SetHeaderColor gets a reference to the given string and assigns it to the HeaderColor field.
func (o *Service) SetHeaderColor(v string) {
	o.HeaderColor = &v
}

// GetMemberColor returns the MemberColor field value if set, zero value otherwise.
func (o *Service) GetMemberColor() string {
	if o == nil || IsNil(o.MemberColor) {
		var ret string
		return ret
	}
	return *o.MemberColor
}

// GetMemberColorOk returns a tuple with the MemberColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetMemberColorOk() (*string, bool) {
	if o == nil || IsNil(o.MemberColor) {
		return nil, false
	}
	return o.MemberColor, true
}

// HasMemberColor returns a boolean if a field has been set.
func (o *Service) HasMemberColor() bool {
	if o != nil && !IsNil(o.MemberColor) {
		return true
	}

	return false
}

// SetMemberColor gets a reference to the given string and assigns it to the MemberColor field.
func (o *Service) SetMemberColor(v string) {
	o.MemberColor = &v
}

// GetContactColor returns the ContactColor field value if set, zero value otherwise.
func (o *Service) GetContactColor() string {
	if o == nil || IsNil(o.ContactColor) {
		var ret string
		return ret
	}
	return *o.ContactColor
}

// GetContactColorOk returns a tuple with the ContactColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetContactColorOk() (*string, bool) {
	if o == nil || IsNil(o.ContactColor) {
		return nil, false
	}
	return o.ContactColor, true
}

// HasContactColor returns a boolean if a field has been set.
func (o *Service) HasContactColor() bool {
	if o != nil && !IsNil(o.ContactColor) {
		return true
	}

	return false
}

// SetContactColor gets a reference to the given string and assigns it to the ContactColor field.
func (o *Service) SetContactColor(v string) {
	o.ContactColor = &v
}

// GetUnknownColor returns the UnknownColor field value if set, zero value otherwise.
func (o *Service) GetUnknownColor() string {
	if o == nil || IsNil(o.UnknownColor) {
		var ret string
		return ret
	}
	return *o.UnknownColor
}

// GetUnknownColorOk returns a tuple with the UnknownColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetUnknownColorOk() (*string, bool) {
	if o == nil || IsNil(o.UnknownColor) {
		return nil, false
	}
	return o.UnknownColor, true
}

// HasUnknownColor returns a boolean if a field has been set.
func (o *Service) HasUnknownColor() bool {
	if o != nil && !IsNil(o.UnknownColor) {
		return true
	}

	return false
}

// SetUnknownColor gets a reference to the given string and assigns it to the UnknownColor field.
func (o *Service) SetUnknownColor(v string) {
	o.UnknownColor = &v
}

// GetCalendarSetup returns the CalendarSetup field value if set, zero value otherwise.
func (o *Service) GetCalendarSetup() CalendarSetupReference {
	if o == nil || IsNil(o.CalendarSetup) {
		var ret CalendarSetupReference
		return ret
	}
	return *o.CalendarSetup
}

// GetCalendarSetupOk returns a tuple with the CalendarSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetCalendarSetupOk() (*CalendarSetupReference, bool) {
	if o == nil || IsNil(o.CalendarSetup) {
		return nil, false
	}
	return o.CalendarSetup, true
}

// HasCalendarSetup returns a boolean if a field has been set.
func (o *Service) HasCalendarSetup() bool {
	if o != nil && !IsNil(o.CalendarSetup) {
		return true
	}

	return false
}

// SetCalendarSetup gets a reference to the given CalendarSetupReference and assigns it to the CalendarSetup field.
func (o *Service) SetCalendarSetup(v CalendarSetupReference) {
	o.CalendarSetup = &v
}

// GetHeaderColorDisableFlag returns the HeaderColorDisableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetHeaderColorDisableFlag() bool {
	if o == nil || IsNil(o.HeaderColorDisableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HeaderColorDisableFlag.Get()
}

// GetHeaderColorDisableFlagOk returns a tuple with the HeaderColorDisableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetHeaderColorDisableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeaderColorDisableFlag.Get(), o.HeaderColorDisableFlag.IsSet()
}

// HasHeaderColorDisableFlag returns a boolean if a field has been set.
func (o *Service) HasHeaderColorDisableFlag() bool {
	if o != nil && o.HeaderColorDisableFlag.IsSet() {
		return true
	}

	return false
}

// SetHeaderColorDisableFlag gets a reference to the given NullableBool and assigns it to the HeaderColorDisableFlag field.
func (o *Service) SetHeaderColorDisableFlag(v bool) {
	o.HeaderColorDisableFlag.Set(&v)
}
// SetHeaderColorDisableFlagNil sets the value for HeaderColorDisableFlag to be an explicit nil
func (o *Service) SetHeaderColorDisableFlagNil() {
	o.HeaderColorDisableFlag.Set(nil)
}

// UnsetHeaderColorDisableFlag ensures that no value is present for HeaderColorDisableFlag, not even an explicit nil
func (o *Service) UnsetHeaderColorDisableFlag() {
	o.HeaderColorDisableFlag.Unset()
}

// GetMemberColorDisableFlag returns the MemberColorDisableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetMemberColorDisableFlag() bool {
	if o == nil || IsNil(o.MemberColorDisableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MemberColorDisableFlag.Get()
}

// GetMemberColorDisableFlagOk returns a tuple with the MemberColorDisableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetMemberColorDisableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemberColorDisableFlag.Get(), o.MemberColorDisableFlag.IsSet()
}

// HasMemberColorDisableFlag returns a boolean if a field has been set.
func (o *Service) HasMemberColorDisableFlag() bool {
	if o != nil && o.MemberColorDisableFlag.IsSet() {
		return true
	}

	return false
}

// SetMemberColorDisableFlag gets a reference to the given NullableBool and assigns it to the MemberColorDisableFlag field.
func (o *Service) SetMemberColorDisableFlag(v bool) {
	o.MemberColorDisableFlag.Set(&v)
}
// SetMemberColorDisableFlagNil sets the value for MemberColorDisableFlag to be an explicit nil
func (o *Service) SetMemberColorDisableFlagNil() {
	o.MemberColorDisableFlag.Set(nil)
}

// UnsetMemberColorDisableFlag ensures that no value is present for MemberColorDisableFlag, not even an explicit nil
func (o *Service) UnsetMemberColorDisableFlag() {
	o.MemberColorDisableFlag.Unset()
}

// GetContactColorDisableFlag returns the ContactColorDisableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetContactColorDisableFlag() bool {
	if o == nil || IsNil(o.ContactColorDisableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ContactColorDisableFlag.Get()
}

// GetContactColorDisableFlagOk returns a tuple with the ContactColorDisableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetContactColorDisableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactColorDisableFlag.Get(), o.ContactColorDisableFlag.IsSet()
}

// HasContactColorDisableFlag returns a boolean if a field has been set.
func (o *Service) HasContactColorDisableFlag() bool {
	if o != nil && o.ContactColorDisableFlag.IsSet() {
		return true
	}

	return false
}

// SetContactColorDisableFlag gets a reference to the given NullableBool and assigns it to the ContactColorDisableFlag field.
func (o *Service) SetContactColorDisableFlag(v bool) {
	o.ContactColorDisableFlag.Set(&v)
}
// SetContactColorDisableFlagNil sets the value for ContactColorDisableFlag to be an explicit nil
func (o *Service) SetContactColorDisableFlagNil() {
	o.ContactColorDisableFlag.Set(nil)
}

// UnsetContactColorDisableFlag ensures that no value is present for ContactColorDisableFlag, not even an explicit nil
func (o *Service) UnsetContactColorDisableFlag() {
	o.ContactColorDisableFlag.Unset()
}

// GetUnknownColorDisableFlag returns the UnknownColorDisableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Service) GetUnknownColorDisableFlag() bool {
	if o == nil || IsNil(o.UnknownColorDisableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UnknownColorDisableFlag.Get()
}

// GetUnknownColorDisableFlagOk returns a tuple with the UnknownColorDisableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Service) GetUnknownColorDisableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnknownColorDisableFlag.Get(), o.UnknownColorDisableFlag.IsSet()
}

// HasUnknownColorDisableFlag returns a boolean if a field has been set.
func (o *Service) HasUnknownColorDisableFlag() bool {
	if o != nil && o.UnknownColorDisableFlag.IsSet() {
		return true
	}

	return false
}

// SetUnknownColorDisableFlag gets a reference to the given NullableBool and assigns it to the UnknownColorDisableFlag field.
func (o *Service) SetUnknownColorDisableFlag(v bool) {
	o.UnknownColorDisableFlag.Set(&v)
}
// SetUnknownColorDisableFlagNil sets the value for UnknownColorDisableFlag to be an explicit nil
func (o *Service) SetUnknownColorDisableFlagNil() {
	o.UnknownColorDisableFlag.Set(nil)
}

// UnsetUnknownColorDisableFlag ensures that no value is present for UnknownColorDisableFlag, not even an explicit nil
func (o *Service) UnsetUnknownColorDisableFlag() {
	o.UnknownColorDisableFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Service) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Service) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Service) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Service) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["srNotify"] = o.SrNotify.Get()
	toSerialize["scheduleSpan"] = o.ScheduleSpan
	if o.HideDelimiterFlag.IsSet() {
		toSerialize["hideDelimiterFlag"] = o.HideDelimiterFlag.Get()
	}
	if o.AllowCCFlag.IsSet() {
		toSerialize["allowCCFlag"] = o.AllowCCFlag.Get()
	}
	if o.AllowTOFlag.IsSet() {
		toSerialize["allowTOFlag"] = o.AllowTOFlag.Get()
	}
	if !IsNil(o.HeaderColor) {
		toSerialize["headerColor"] = o.HeaderColor
	}
	if !IsNil(o.MemberColor) {
		toSerialize["memberColor"] = o.MemberColor
	}
	if !IsNil(o.ContactColor) {
		toSerialize["contactColor"] = o.ContactColor
	}
	if !IsNil(o.UnknownColor) {
		toSerialize["unknownColor"] = o.UnknownColor
	}
	if !IsNil(o.CalendarSetup) {
		toSerialize["calendarSetup"] = o.CalendarSetup
	}
	if o.HeaderColorDisableFlag.IsSet() {
		toSerialize["headerColorDisableFlag"] = o.HeaderColorDisableFlag.Get()
	}
	if o.MemberColorDisableFlag.IsSet() {
		toSerialize["memberColorDisableFlag"] = o.MemberColorDisableFlag.Get()
	}
	if o.ContactColorDisableFlag.IsSet() {
		toSerialize["contactColorDisableFlag"] = o.ContactColorDisableFlag.Get()
	}
	if o.UnknownColorDisableFlag.IsSet() {
		toSerialize["unknownColorDisableFlag"] = o.UnknownColorDisableFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Service) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"srNotify",
		"scheduleSpan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varService := _Service{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varService)

	if err != nil {
		return err
	}

	*o = Service(varService)

	return err
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


