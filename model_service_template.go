/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ServiceTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTemplate{}

// ServiceTemplate struct for ServiceTemplate
type ServiceTemplate struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	Type *ServiceTypeReference `json:"type,omitempty"`
	Item *ServiceItemReference `json:"item,omitempty"`
	Subtype *ServiceSubTypeReference `json:"subtype,omitempty"`
	ServiceLocation *ServiceLocationReference `json:"serviceLocation,omitempty"`
	Status *ServiceStatusReference `json:"status,omitempty"`
	Source *ServiceSourceReference `json:"source,omitempty"`
	Priority *PriorityReference `json:"priority,omitempty"`
	Team *ServiceTeamReference `json:"team,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	Site *SiteReference `json:"site,omitempty"`
	AssignedNotifyFlag NullableBool `json:"assignedNotifyFlag,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Problem *string `json:"problem,omitempty"`
	HoursBudget NullableFloat64 `json:"hoursBudget,omitempty"`
	InternalAnalysis *string `json:"internalAnalysis,omitempty"`
	TimeBillableFlag NullableBool `json:"timeBillableFlag,omitempty"`
	ExpenseBillableFlag NullableBool `json:"expenseBillableFlag,omitempty"`
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
	Reference *string `json:"reference,omitempty"`
	BillCompleteFlag NullableBool `json:"billComplete_Flag,omitempty"`
	BillServiceSeparatelyFlag NullableBool `json:"billServiceSeparatelyFlag,omitempty"`
	BillingAmount NullableFloat64 `json:"billingAmount,omitempty"`
	BillUnapprovedTimeAndExpensesFlag NullableBool `json:"billUnapprovedTimeAndExpensesFlag,omitempty"`
	OverrideFlag NullableBool `json:"overrideFlag,omitempty"`
	TimeInvoiceFlag NullableBool `json:"timeInvoiceFlag,omitempty"`
	ExpenseInvoiceFlag NullableBool `json:"expenseInvoiceFlag,omitempty"`
	ProductInvoiceFlag NullableBool `json:"productInvoiceFlag,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	BillingMethod *string `json:"billingMethod,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Impact *string `json:"impact,omitempty"`
	AssignedBy *MemberReference `json:"assignedBy,omitempty"`
	ScheduleDaysBefore NullableInt32 `json:"scheduleDaysBefore,omitempty"`
	ServiceDaysBefore NullableInt32 `json:"serviceDaysBefore,omitempty"`
	AttachScheduleToNewServiceFlag NullableBool `json:"attachScheduleToNewServiceFlag,omitempty"`
	TemplateFlag NullableBool `json:"templateFlag,omitempty"`
	EmailContactFlag NullableBool `json:"emailContactFlag,omitempty"`
	EmailResourceFlag NullableBool `json:"emailResourceFlag,omitempty"`
	EmailCCFlag NullableBool `json:"emailCCFlag,omitempty"`
	EmailCC *string `json:"emailCC,omitempty"`
	RestrictDownpaymentFlag NullableBool `json:"restrictDownpaymentFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewServiceTemplate instantiates a new ServiceTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTemplate() *ServiceTemplate {
	this := ServiceTemplate{}
	return &this
}

// NewServiceTemplateWithDefaults instantiates a new ServiceTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTemplateWithDefaults() *ServiceTemplate {
	this := ServiceTemplate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceTemplate) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceTemplate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServiceTemplate) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceTemplate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceTemplate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServiceTemplate) SetName(v string) {
	o.Name = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *ServiceTemplate) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *ServiceTemplate) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *ServiceTemplate) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServiceTemplate) GetType() ServiceTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServiceTemplate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceTypeReference and assigns it to the Type field.
func (o *ServiceTemplate) SetType(v ServiceTypeReference) {
	o.Type = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *ServiceTemplate) GetItem() ServiceItemReference {
	if o == nil || IsNil(o.Item) {
		var ret ServiceItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *ServiceTemplate) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given ServiceItemReference and assigns it to the Item field.
func (o *ServiceTemplate) SetItem(v ServiceItemReference) {
	o.Item = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *ServiceTemplate) GetSubtype() ServiceSubTypeReference {
	if o == nil || IsNil(o.Subtype) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetSubtypeOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *ServiceTemplate) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given ServiceSubTypeReference and assigns it to the Subtype field.
func (o *ServiceTemplate) SetSubtype(v ServiceSubTypeReference) {
	o.Subtype = &v
}

// GetServiceLocation returns the ServiceLocation field value if set, zero value otherwise.
func (o *ServiceTemplate) GetServiceLocation() ServiceLocationReference {
	if o == nil || IsNil(o.ServiceLocation) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.ServiceLocation
}

// GetServiceLocationOk returns a tuple with the ServiceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetServiceLocationOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.ServiceLocation) {
		return nil, false
	}
	return o.ServiceLocation, true
}

// HasServiceLocation returns a boolean if a field has been set.
func (o *ServiceTemplate) HasServiceLocation() bool {
	if o != nil && !IsNil(o.ServiceLocation) {
		return true
	}

	return false
}

// SetServiceLocation gets a reference to the given ServiceLocationReference and assigns it to the ServiceLocation field.
func (o *ServiceTemplate) SetServiceLocation(v ServiceLocationReference) {
	o.ServiceLocation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ServiceTemplate) GetStatus() ServiceStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ServiceTemplate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ServiceStatusReference and assigns it to the Status field.
func (o *ServiceTemplate) SetStatus(v ServiceStatusReference) {
	o.Status = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ServiceTemplate) GetSource() ServiceSourceReference {
	if o == nil || IsNil(o.Source) {
		var ret ServiceSourceReference
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetSourceOk() (*ServiceSourceReference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ServiceTemplate) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ServiceSourceReference and assigns it to the Source field.
func (o *ServiceTemplate) SetSource(v ServiceSourceReference) {
	o.Source = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ServiceTemplate) GetPriority() PriorityReference {
	if o == nil || IsNil(o.Priority) {
		var ret PriorityReference
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetPriorityOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ServiceTemplate) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given PriorityReference and assigns it to the Priority field.
func (o *ServiceTemplate) SetPriority(v PriorityReference) {
	o.Priority = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *ServiceTemplate) GetTeam() ServiceTeamReference {
	if o == nil || IsNil(o.Team) {
		var ret ServiceTeamReference
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetTeamOk() (*ServiceTeamReference, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *ServiceTemplate) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given ServiceTeamReference and assigns it to the Team field.
func (o *ServiceTemplate) SetTeam(v ServiceTeamReference) {
	o.Team = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ServiceTemplate) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ServiceTemplate) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *ServiceTemplate) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ServiceTemplate) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ServiceTemplate) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ServiceTemplate) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *ServiceTemplate) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *ServiceTemplate) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *ServiceTemplate) SetSite(v SiteReference) {
	o.Site = &v
}

// GetAssignedNotifyFlag returns the AssignedNotifyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetAssignedNotifyFlag() bool {
	if o == nil || IsNil(o.AssignedNotifyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AssignedNotifyFlag.Get()
}

// GetAssignedNotifyFlagOk returns a tuple with the AssignedNotifyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetAssignedNotifyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedNotifyFlag.Get(), o.AssignedNotifyFlag.IsSet()
}

// HasAssignedNotifyFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasAssignedNotifyFlag() bool {
	if o != nil && o.AssignedNotifyFlag.IsSet() {
		return true
	}

	return false
}

// SetAssignedNotifyFlag gets a reference to the given NullableBool and assigns it to the AssignedNotifyFlag field.
func (o *ServiceTemplate) SetAssignedNotifyFlag(v bool) {
	o.AssignedNotifyFlag.Set(&v)
}
// SetAssignedNotifyFlagNil sets the value for AssignedNotifyFlag to be an explicit nil
func (o *ServiceTemplate) SetAssignedNotifyFlagNil() {
	o.AssignedNotifyFlag.Set(nil)
}

// UnsetAssignedNotifyFlag ensures that no value is present for AssignedNotifyFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetAssignedNotifyFlag() {
	o.AssignedNotifyFlag.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ServiceTemplate) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ServiceTemplate) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *ServiceTemplate) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *ServiceTemplate) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *ServiceTemplate) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *ServiceTemplate) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ServiceTemplate) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ServiceTemplate) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ServiceTemplate) SetSummary(v string) {
	o.Summary = &v
}

// GetProblem returns the Problem field value if set, zero value otherwise.
func (o *ServiceTemplate) GetProblem() string {
	if o == nil || IsNil(o.Problem) {
		var ret string
		return ret
	}
	return *o.Problem
}

// GetProblemOk returns a tuple with the Problem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetProblemOk() (*string, bool) {
	if o == nil || IsNil(o.Problem) {
		return nil, false
	}
	return o.Problem, true
}

// HasProblem returns a boolean if a field has been set.
func (o *ServiceTemplate) HasProblem() bool {
	if o != nil && !IsNil(o.Problem) {
		return true
	}

	return false
}

// SetProblem gets a reference to the given string and assigns it to the Problem field.
func (o *ServiceTemplate) SetProblem(v string) {
	o.Problem = &v
}

// GetHoursBudget returns the HoursBudget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetHoursBudget() float64 {
	if o == nil || IsNil(o.HoursBudget.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursBudget.Get()
}

// GetHoursBudgetOk returns a tuple with the HoursBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetHoursBudgetOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursBudget.Get(), o.HoursBudget.IsSet()
}

// HasHoursBudget returns a boolean if a field has been set.
func (o *ServiceTemplate) HasHoursBudget() bool {
	if o != nil && o.HoursBudget.IsSet() {
		return true
	}

	return false
}

// SetHoursBudget gets a reference to the given NullableFloat64 and assigns it to the HoursBudget field.
func (o *ServiceTemplate) SetHoursBudget(v float64) {
	o.HoursBudget.Set(&v)
}
// SetHoursBudgetNil sets the value for HoursBudget to be an explicit nil
func (o *ServiceTemplate) SetHoursBudgetNil() {
	o.HoursBudget.Set(nil)
}

// UnsetHoursBudget ensures that no value is present for HoursBudget, not even an explicit nil
func (o *ServiceTemplate) UnsetHoursBudget() {
	o.HoursBudget.Unset()
}

// GetInternalAnalysis returns the InternalAnalysis field value if set, zero value otherwise.
func (o *ServiceTemplate) GetInternalAnalysis() string {
	if o == nil || IsNil(o.InternalAnalysis) {
		var ret string
		return ret
	}
	return *o.InternalAnalysis
}

// GetInternalAnalysisOk returns a tuple with the InternalAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetInternalAnalysisOk() (*string, bool) {
	if o == nil || IsNil(o.InternalAnalysis) {
		return nil, false
	}
	return o.InternalAnalysis, true
}

// HasInternalAnalysis returns a boolean if a field has been set.
func (o *ServiceTemplate) HasInternalAnalysis() bool {
	if o != nil && !IsNil(o.InternalAnalysis) {
		return true
	}

	return false
}

// SetInternalAnalysis gets a reference to the given string and assigns it to the InternalAnalysis field.
func (o *ServiceTemplate) SetInternalAnalysis(v string) {
	o.InternalAnalysis = &v
}

// GetTimeBillableFlag returns the TimeBillableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetTimeBillableFlag() bool {
	if o == nil || IsNil(o.TimeBillableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeBillableFlag.Get()
}

// GetTimeBillableFlagOk returns a tuple with the TimeBillableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetTimeBillableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeBillableFlag.Get(), o.TimeBillableFlag.IsSet()
}

// HasTimeBillableFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasTimeBillableFlag() bool {
	if o != nil && o.TimeBillableFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeBillableFlag gets a reference to the given NullableBool and assigns it to the TimeBillableFlag field.
func (o *ServiceTemplate) SetTimeBillableFlag(v bool) {
	o.TimeBillableFlag.Set(&v)
}
// SetTimeBillableFlagNil sets the value for TimeBillableFlag to be an explicit nil
func (o *ServiceTemplate) SetTimeBillableFlagNil() {
	o.TimeBillableFlag.Set(nil)
}

// UnsetTimeBillableFlag ensures that no value is present for TimeBillableFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetTimeBillableFlag() {
	o.TimeBillableFlag.Unset()
}

// GetExpenseBillableFlag returns the ExpenseBillableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetExpenseBillableFlag() bool {
	if o == nil || IsNil(o.ExpenseBillableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExpenseBillableFlag.Get()
}

// GetExpenseBillableFlagOk returns a tuple with the ExpenseBillableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetExpenseBillableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseBillableFlag.Get(), o.ExpenseBillableFlag.IsSet()
}

// HasExpenseBillableFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasExpenseBillableFlag() bool {
	if o != nil && o.ExpenseBillableFlag.IsSet() {
		return true
	}

	return false
}

// SetExpenseBillableFlag gets a reference to the given NullableBool and assigns it to the ExpenseBillableFlag field.
func (o *ServiceTemplate) SetExpenseBillableFlag(v bool) {
	o.ExpenseBillableFlag.Set(&v)
}
// SetExpenseBillableFlagNil sets the value for ExpenseBillableFlag to be an explicit nil
func (o *ServiceTemplate) SetExpenseBillableFlagNil() {
	o.ExpenseBillableFlag.Set(nil)
}

// UnsetExpenseBillableFlag ensures that no value is present for ExpenseBillableFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetExpenseBillableFlag() {
	o.ExpenseBillableFlag.Unset()
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *ServiceTemplate) GetPurchaseOrderNumber() string {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *ServiceTemplate) HasPurchaseOrderNumber() bool {
	if o != nil && !IsNil(o.PurchaseOrderNumber) {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *ServiceTemplate) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ServiceTemplate) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ServiceTemplate) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ServiceTemplate) SetReference(v string) {
	o.Reference = &v
}

// GetBillCompleteFlag returns the BillCompleteFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetBillCompleteFlag() bool {
	if o == nil || IsNil(o.BillCompleteFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillCompleteFlag.Get()
}

// GetBillCompleteFlagOk returns a tuple with the BillCompleteFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetBillCompleteFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillCompleteFlag.Get(), o.BillCompleteFlag.IsSet()
}

// HasBillCompleteFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasBillCompleteFlag() bool {
	if o != nil && o.BillCompleteFlag.IsSet() {
		return true
	}

	return false
}

// SetBillCompleteFlag gets a reference to the given NullableBool and assigns it to the BillCompleteFlag field.
func (o *ServiceTemplate) SetBillCompleteFlag(v bool) {
	o.BillCompleteFlag.Set(&v)
}
// SetBillCompleteFlagNil sets the value for BillCompleteFlag to be an explicit nil
func (o *ServiceTemplate) SetBillCompleteFlagNil() {
	o.BillCompleteFlag.Set(nil)
}

// UnsetBillCompleteFlag ensures that no value is present for BillCompleteFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetBillCompleteFlag() {
	o.BillCompleteFlag.Unset()
}

// GetBillServiceSeparatelyFlag returns the BillServiceSeparatelyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetBillServiceSeparatelyFlag() bool {
	if o == nil || IsNil(o.BillServiceSeparatelyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillServiceSeparatelyFlag.Get()
}

// GetBillServiceSeparatelyFlagOk returns a tuple with the BillServiceSeparatelyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetBillServiceSeparatelyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillServiceSeparatelyFlag.Get(), o.BillServiceSeparatelyFlag.IsSet()
}

// HasBillServiceSeparatelyFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasBillServiceSeparatelyFlag() bool {
	if o != nil && o.BillServiceSeparatelyFlag.IsSet() {
		return true
	}

	return false
}

// SetBillServiceSeparatelyFlag gets a reference to the given NullableBool and assigns it to the BillServiceSeparatelyFlag field.
func (o *ServiceTemplate) SetBillServiceSeparatelyFlag(v bool) {
	o.BillServiceSeparatelyFlag.Set(&v)
}
// SetBillServiceSeparatelyFlagNil sets the value for BillServiceSeparatelyFlag to be an explicit nil
func (o *ServiceTemplate) SetBillServiceSeparatelyFlagNil() {
	o.BillServiceSeparatelyFlag.Set(nil)
}

// UnsetBillServiceSeparatelyFlag ensures that no value is present for BillServiceSeparatelyFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetBillServiceSeparatelyFlag() {
	o.BillServiceSeparatelyFlag.Unset()
}

// GetBillingAmount returns the BillingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetBillingAmount() float64 {
	if o == nil || IsNil(o.BillingAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillingAmount.Get()
}

// GetBillingAmountOk returns a tuple with the BillingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetBillingAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingAmount.Get(), o.BillingAmount.IsSet()
}

// HasBillingAmount returns a boolean if a field has been set.
func (o *ServiceTemplate) HasBillingAmount() bool {
	if o != nil && o.BillingAmount.IsSet() {
		return true
	}

	return false
}

// SetBillingAmount gets a reference to the given NullableFloat64 and assigns it to the BillingAmount field.
func (o *ServiceTemplate) SetBillingAmount(v float64) {
	o.BillingAmount.Set(&v)
}
// SetBillingAmountNil sets the value for BillingAmount to be an explicit nil
func (o *ServiceTemplate) SetBillingAmountNil() {
	o.BillingAmount.Set(nil)
}

// UnsetBillingAmount ensures that no value is present for BillingAmount, not even an explicit nil
func (o *ServiceTemplate) UnsetBillingAmount() {
	o.BillingAmount.Unset()
}

// GetBillUnapprovedTimeAndExpensesFlag returns the BillUnapprovedTimeAndExpensesFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetBillUnapprovedTimeAndExpensesFlag() bool {
	if o == nil || IsNil(o.BillUnapprovedTimeAndExpensesFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BillUnapprovedTimeAndExpensesFlag.Get()
}

// GetBillUnapprovedTimeAndExpensesFlagOk returns a tuple with the BillUnapprovedTimeAndExpensesFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetBillUnapprovedTimeAndExpensesFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillUnapprovedTimeAndExpensesFlag.Get(), o.BillUnapprovedTimeAndExpensesFlag.IsSet()
}

// HasBillUnapprovedTimeAndExpensesFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasBillUnapprovedTimeAndExpensesFlag() bool {
	if o != nil && o.BillUnapprovedTimeAndExpensesFlag.IsSet() {
		return true
	}

	return false
}

// SetBillUnapprovedTimeAndExpensesFlag gets a reference to the given NullableBool and assigns it to the BillUnapprovedTimeAndExpensesFlag field.
func (o *ServiceTemplate) SetBillUnapprovedTimeAndExpensesFlag(v bool) {
	o.BillUnapprovedTimeAndExpensesFlag.Set(&v)
}
// SetBillUnapprovedTimeAndExpensesFlagNil sets the value for BillUnapprovedTimeAndExpensesFlag to be an explicit nil
func (o *ServiceTemplate) SetBillUnapprovedTimeAndExpensesFlagNil() {
	o.BillUnapprovedTimeAndExpensesFlag.Set(nil)
}

// UnsetBillUnapprovedTimeAndExpensesFlag ensures that no value is present for BillUnapprovedTimeAndExpensesFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetBillUnapprovedTimeAndExpensesFlag() {
	o.BillUnapprovedTimeAndExpensesFlag.Unset()
}

// GetOverrideFlag returns the OverrideFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetOverrideFlag() bool {
	if o == nil || IsNil(o.OverrideFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideFlag.Get()
}

// GetOverrideFlagOk returns a tuple with the OverrideFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetOverrideFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideFlag.Get(), o.OverrideFlag.IsSet()
}

// HasOverrideFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasOverrideFlag() bool {
	if o != nil && o.OverrideFlag.IsSet() {
		return true
	}

	return false
}

// SetOverrideFlag gets a reference to the given NullableBool and assigns it to the OverrideFlag field.
func (o *ServiceTemplate) SetOverrideFlag(v bool) {
	o.OverrideFlag.Set(&v)
}
// SetOverrideFlagNil sets the value for OverrideFlag to be an explicit nil
func (o *ServiceTemplate) SetOverrideFlagNil() {
	o.OverrideFlag.Set(nil)
}

// UnsetOverrideFlag ensures that no value is present for OverrideFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetOverrideFlag() {
	o.OverrideFlag.Unset()
}

// GetTimeInvoiceFlag returns the TimeInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetTimeInvoiceFlag() bool {
	if o == nil || IsNil(o.TimeInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TimeInvoiceFlag.Get()
}

// GetTimeInvoiceFlagOk returns a tuple with the TimeInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetTimeInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeInvoiceFlag.Get(), o.TimeInvoiceFlag.IsSet()
}

// HasTimeInvoiceFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasTimeInvoiceFlag() bool {
	if o != nil && o.TimeInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetTimeInvoiceFlag gets a reference to the given NullableBool and assigns it to the TimeInvoiceFlag field.
func (o *ServiceTemplate) SetTimeInvoiceFlag(v bool) {
	o.TimeInvoiceFlag.Set(&v)
}
// SetTimeInvoiceFlagNil sets the value for TimeInvoiceFlag to be an explicit nil
func (o *ServiceTemplate) SetTimeInvoiceFlagNil() {
	o.TimeInvoiceFlag.Set(nil)
}

// UnsetTimeInvoiceFlag ensures that no value is present for TimeInvoiceFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetTimeInvoiceFlag() {
	o.TimeInvoiceFlag.Unset()
}

// GetExpenseInvoiceFlag returns the ExpenseInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetExpenseInvoiceFlag() bool {
	if o == nil || IsNil(o.ExpenseInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ExpenseInvoiceFlag.Get()
}

// GetExpenseInvoiceFlagOk returns a tuple with the ExpenseInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetExpenseInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseInvoiceFlag.Get(), o.ExpenseInvoiceFlag.IsSet()
}

// HasExpenseInvoiceFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasExpenseInvoiceFlag() bool {
	if o != nil && o.ExpenseInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetExpenseInvoiceFlag gets a reference to the given NullableBool and assigns it to the ExpenseInvoiceFlag field.
func (o *ServiceTemplate) SetExpenseInvoiceFlag(v bool) {
	o.ExpenseInvoiceFlag.Set(&v)
}
// SetExpenseInvoiceFlagNil sets the value for ExpenseInvoiceFlag to be an explicit nil
func (o *ServiceTemplate) SetExpenseInvoiceFlagNil() {
	o.ExpenseInvoiceFlag.Set(nil)
}

// UnsetExpenseInvoiceFlag ensures that no value is present for ExpenseInvoiceFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetExpenseInvoiceFlag() {
	o.ExpenseInvoiceFlag.Unset()
}

// GetProductInvoiceFlag returns the ProductInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetProductInvoiceFlag() bool {
	if o == nil || IsNil(o.ProductInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ProductInvoiceFlag.Get()
}

// GetProductInvoiceFlagOk returns a tuple with the ProductInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetProductInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductInvoiceFlag.Get(), o.ProductInvoiceFlag.IsSet()
}

// HasProductInvoiceFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasProductInvoiceFlag() bool {
	if o != nil && o.ProductInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetProductInvoiceFlag gets a reference to the given NullableBool and assigns it to the ProductInvoiceFlag field.
func (o *ServiceTemplate) SetProductInvoiceFlag(v bool) {
	o.ProductInvoiceFlag.Set(&v)
}
// SetProductInvoiceFlagNil sets the value for ProductInvoiceFlag to be an explicit nil
func (o *ServiceTemplate) SetProductInvoiceFlagNil() {
	o.ProductInvoiceFlag.Set(nil)
}

// UnsetProductInvoiceFlag ensures that no value is present for ProductInvoiceFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetProductInvoiceFlag() {
	o.ProductInvoiceFlag.Unset()
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *ServiceTemplate) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *ServiceTemplate) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *ServiceTemplate) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetBillingMethod returns the BillingMethod field value if set, zero value otherwise.
func (o *ServiceTemplate) GetBillingMethod() string {
	if o == nil || IsNil(o.BillingMethod) {
		var ret string
		return ret
	}
	return *o.BillingMethod
}

// GetBillingMethodOk returns a tuple with the BillingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetBillingMethodOk() (*string, bool) {
	if o == nil || IsNil(o.BillingMethod) {
		return nil, false
	}
	return o.BillingMethod, true
}

// HasBillingMethod returns a boolean if a field has been set.
func (o *ServiceTemplate) HasBillingMethod() bool {
	if o != nil && !IsNil(o.BillingMethod) {
		return true
	}

	return false
}

// SetBillingMethod gets a reference to the given string and assigns it to the BillingMethod field.
func (o *ServiceTemplate) SetBillingMethod(v string) {
	o.BillingMethod = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ServiceTemplate) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ServiceTemplate) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *ServiceTemplate) SetSeverity(v string) {
	o.Severity = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *ServiceTemplate) GetImpact() string {
	if o == nil || IsNil(o.Impact) {
		var ret string
		return ret
	}
	return *o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetImpactOk() (*string, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *ServiceTemplate) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given string and assigns it to the Impact field.
func (o *ServiceTemplate) SetImpact(v string) {
	o.Impact = &v
}

// GetAssignedBy returns the AssignedBy field value if set, zero value otherwise.
func (o *ServiceTemplate) GetAssignedBy() MemberReference {
	if o == nil || IsNil(o.AssignedBy) {
		var ret MemberReference
		return ret
	}
	return *o.AssignedBy
}

// GetAssignedByOk returns a tuple with the AssignedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetAssignedByOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.AssignedBy) {
		return nil, false
	}
	return o.AssignedBy, true
}

// HasAssignedBy returns a boolean if a field has been set.
func (o *ServiceTemplate) HasAssignedBy() bool {
	if o != nil && !IsNil(o.AssignedBy) {
		return true
	}

	return false
}

// SetAssignedBy gets a reference to the given MemberReference and assigns it to the AssignedBy field.
func (o *ServiceTemplate) SetAssignedBy(v MemberReference) {
	o.AssignedBy = &v
}

// GetScheduleDaysBefore returns the ScheduleDaysBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetScheduleDaysBefore() int32 {
	if o == nil || IsNil(o.ScheduleDaysBefore.Get()) {
		var ret int32
		return ret
	}
	return *o.ScheduleDaysBefore.Get()
}

// GetScheduleDaysBeforeOk returns a tuple with the ScheduleDaysBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetScheduleDaysBeforeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleDaysBefore.Get(), o.ScheduleDaysBefore.IsSet()
}

// HasScheduleDaysBefore returns a boolean if a field has been set.
func (o *ServiceTemplate) HasScheduleDaysBefore() bool {
	if o != nil && o.ScheduleDaysBefore.IsSet() {
		return true
	}

	return false
}

// SetScheduleDaysBefore gets a reference to the given NullableInt32 and assigns it to the ScheduleDaysBefore field.
func (o *ServiceTemplate) SetScheduleDaysBefore(v int32) {
	o.ScheduleDaysBefore.Set(&v)
}
// SetScheduleDaysBeforeNil sets the value for ScheduleDaysBefore to be an explicit nil
func (o *ServiceTemplate) SetScheduleDaysBeforeNil() {
	o.ScheduleDaysBefore.Set(nil)
}

// UnsetScheduleDaysBefore ensures that no value is present for ScheduleDaysBefore, not even an explicit nil
func (o *ServiceTemplate) UnsetScheduleDaysBefore() {
	o.ScheduleDaysBefore.Unset()
}

// GetServiceDaysBefore returns the ServiceDaysBefore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetServiceDaysBefore() int32 {
	if o == nil || IsNil(o.ServiceDaysBefore.Get()) {
		var ret int32
		return ret
	}
	return *o.ServiceDaysBefore.Get()
}

// GetServiceDaysBeforeOk returns a tuple with the ServiceDaysBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetServiceDaysBeforeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceDaysBefore.Get(), o.ServiceDaysBefore.IsSet()
}

// HasServiceDaysBefore returns a boolean if a field has been set.
func (o *ServiceTemplate) HasServiceDaysBefore() bool {
	if o != nil && o.ServiceDaysBefore.IsSet() {
		return true
	}

	return false
}

// SetServiceDaysBefore gets a reference to the given NullableInt32 and assigns it to the ServiceDaysBefore field.
func (o *ServiceTemplate) SetServiceDaysBefore(v int32) {
	o.ServiceDaysBefore.Set(&v)
}
// SetServiceDaysBeforeNil sets the value for ServiceDaysBefore to be an explicit nil
func (o *ServiceTemplate) SetServiceDaysBeforeNil() {
	o.ServiceDaysBefore.Set(nil)
}

// UnsetServiceDaysBefore ensures that no value is present for ServiceDaysBefore, not even an explicit nil
func (o *ServiceTemplate) UnsetServiceDaysBefore() {
	o.ServiceDaysBefore.Unset()
}

// GetAttachScheduleToNewServiceFlag returns the AttachScheduleToNewServiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetAttachScheduleToNewServiceFlag() bool {
	if o == nil || IsNil(o.AttachScheduleToNewServiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AttachScheduleToNewServiceFlag.Get()
}

// GetAttachScheduleToNewServiceFlagOk returns a tuple with the AttachScheduleToNewServiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetAttachScheduleToNewServiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttachScheduleToNewServiceFlag.Get(), o.AttachScheduleToNewServiceFlag.IsSet()
}

// HasAttachScheduleToNewServiceFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasAttachScheduleToNewServiceFlag() bool {
	if o != nil && o.AttachScheduleToNewServiceFlag.IsSet() {
		return true
	}

	return false
}

// SetAttachScheduleToNewServiceFlag gets a reference to the given NullableBool and assigns it to the AttachScheduleToNewServiceFlag field.
func (o *ServiceTemplate) SetAttachScheduleToNewServiceFlag(v bool) {
	o.AttachScheduleToNewServiceFlag.Set(&v)
}
// SetAttachScheduleToNewServiceFlagNil sets the value for AttachScheduleToNewServiceFlag to be an explicit nil
func (o *ServiceTemplate) SetAttachScheduleToNewServiceFlagNil() {
	o.AttachScheduleToNewServiceFlag.Set(nil)
}

// UnsetAttachScheduleToNewServiceFlag ensures that no value is present for AttachScheduleToNewServiceFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetAttachScheduleToNewServiceFlag() {
	o.AttachScheduleToNewServiceFlag.Unset()
}

// GetTemplateFlag returns the TemplateFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetTemplateFlag() bool {
	if o == nil || IsNil(o.TemplateFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TemplateFlag.Get()
}

// GetTemplateFlagOk returns a tuple with the TemplateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetTemplateFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateFlag.Get(), o.TemplateFlag.IsSet()
}

// HasTemplateFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasTemplateFlag() bool {
	if o != nil && o.TemplateFlag.IsSet() {
		return true
	}

	return false
}

// SetTemplateFlag gets a reference to the given NullableBool and assigns it to the TemplateFlag field.
func (o *ServiceTemplate) SetTemplateFlag(v bool) {
	o.TemplateFlag.Set(&v)
}
// SetTemplateFlagNil sets the value for TemplateFlag to be an explicit nil
func (o *ServiceTemplate) SetTemplateFlagNil() {
	o.TemplateFlag.Set(nil)
}

// UnsetTemplateFlag ensures that no value is present for TemplateFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetTemplateFlag() {
	o.TemplateFlag.Unset()
}

// GetEmailContactFlag returns the EmailContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetEmailContactFlag() bool {
	if o == nil || IsNil(o.EmailContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailContactFlag.Get()
}

// GetEmailContactFlagOk returns a tuple with the EmailContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetEmailContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailContactFlag.Get(), o.EmailContactFlag.IsSet()
}

// HasEmailContactFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasEmailContactFlag() bool {
	if o != nil && o.EmailContactFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailContactFlag gets a reference to the given NullableBool and assigns it to the EmailContactFlag field.
func (o *ServiceTemplate) SetEmailContactFlag(v bool) {
	o.EmailContactFlag.Set(&v)
}
// SetEmailContactFlagNil sets the value for EmailContactFlag to be an explicit nil
func (o *ServiceTemplate) SetEmailContactFlagNil() {
	o.EmailContactFlag.Set(nil)
}

// UnsetEmailContactFlag ensures that no value is present for EmailContactFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetEmailContactFlag() {
	o.EmailContactFlag.Unset()
}

// GetEmailResourceFlag returns the EmailResourceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetEmailResourceFlag() bool {
	if o == nil || IsNil(o.EmailResourceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailResourceFlag.Get()
}

// GetEmailResourceFlagOk returns a tuple with the EmailResourceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetEmailResourceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailResourceFlag.Get(), o.EmailResourceFlag.IsSet()
}

// HasEmailResourceFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasEmailResourceFlag() bool {
	if o != nil && o.EmailResourceFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailResourceFlag gets a reference to the given NullableBool and assigns it to the EmailResourceFlag field.
func (o *ServiceTemplate) SetEmailResourceFlag(v bool) {
	o.EmailResourceFlag.Set(&v)
}
// SetEmailResourceFlagNil sets the value for EmailResourceFlag to be an explicit nil
func (o *ServiceTemplate) SetEmailResourceFlagNil() {
	o.EmailResourceFlag.Set(nil)
}

// UnsetEmailResourceFlag ensures that no value is present for EmailResourceFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetEmailResourceFlag() {
	o.EmailResourceFlag.Unset()
}

// GetEmailCCFlag returns the EmailCCFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetEmailCCFlag() bool {
	if o == nil || IsNil(o.EmailCCFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailCCFlag.Get()
}

// GetEmailCCFlagOk returns a tuple with the EmailCCFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetEmailCCFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailCCFlag.Get(), o.EmailCCFlag.IsSet()
}

// HasEmailCCFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasEmailCCFlag() bool {
	if o != nil && o.EmailCCFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailCCFlag gets a reference to the given NullableBool and assigns it to the EmailCCFlag field.
func (o *ServiceTemplate) SetEmailCCFlag(v bool) {
	o.EmailCCFlag.Set(&v)
}
// SetEmailCCFlagNil sets the value for EmailCCFlag to be an explicit nil
func (o *ServiceTemplate) SetEmailCCFlagNil() {
	o.EmailCCFlag.Set(nil)
}

// UnsetEmailCCFlag ensures that no value is present for EmailCCFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetEmailCCFlag() {
	o.EmailCCFlag.Unset()
}

// GetEmailCC returns the EmailCC field value if set, zero value otherwise.
func (o *ServiceTemplate) GetEmailCC() string {
	if o == nil || IsNil(o.EmailCC) {
		var ret string
		return ret
	}
	return *o.EmailCC
}

// GetEmailCCOk returns a tuple with the EmailCC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetEmailCCOk() (*string, bool) {
	if o == nil || IsNil(o.EmailCC) {
		return nil, false
	}
	return o.EmailCC, true
}

// HasEmailCC returns a boolean if a field has been set.
func (o *ServiceTemplate) HasEmailCC() bool {
	if o != nil && !IsNil(o.EmailCC) {
		return true
	}

	return false
}

// SetEmailCC gets a reference to the given string and assigns it to the EmailCC field.
func (o *ServiceTemplate) SetEmailCC(v string) {
	o.EmailCC = &v
}

// GetRestrictDownpaymentFlag returns the RestrictDownpaymentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTemplate) GetRestrictDownpaymentFlag() bool {
	if o == nil || IsNil(o.RestrictDownpaymentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RestrictDownpaymentFlag.Get()
}

// GetRestrictDownpaymentFlagOk returns a tuple with the RestrictDownpaymentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTemplate) GetRestrictDownpaymentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictDownpaymentFlag.Get(), o.RestrictDownpaymentFlag.IsSet()
}

// HasRestrictDownpaymentFlag returns a boolean if a field has been set.
func (o *ServiceTemplate) HasRestrictDownpaymentFlag() bool {
	if o != nil && o.RestrictDownpaymentFlag.IsSet() {
		return true
	}

	return false
}

// SetRestrictDownpaymentFlag gets a reference to the given NullableBool and assigns it to the RestrictDownpaymentFlag field.
func (o *ServiceTemplate) SetRestrictDownpaymentFlag(v bool) {
	o.RestrictDownpaymentFlag.Set(&v)
}
// SetRestrictDownpaymentFlagNil sets the value for RestrictDownpaymentFlag to be an explicit nil
func (o *ServiceTemplate) SetRestrictDownpaymentFlagNil() {
	o.RestrictDownpaymentFlag.Set(nil)
}

// UnsetRestrictDownpaymentFlag ensures that no value is present for RestrictDownpaymentFlag, not even an explicit nil
func (o *ServiceTemplate) UnsetRestrictDownpaymentFlag() {
	o.RestrictDownpaymentFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ServiceTemplate) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTemplate) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServiceTemplate) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ServiceTemplate) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ServiceTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.ServiceLocation) {
		toSerialize["serviceLocation"] = o.ServiceLocation
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if o.AssignedNotifyFlag.IsSet() {
		toSerialize["assignedNotifyFlag"] = o.AssignedNotifyFlag.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Problem) {
		toSerialize["problem"] = o.Problem
	}
	if o.HoursBudget.IsSet() {
		toSerialize["hoursBudget"] = o.HoursBudget.Get()
	}
	if !IsNil(o.InternalAnalysis) {
		toSerialize["internalAnalysis"] = o.InternalAnalysis
	}
	if o.TimeBillableFlag.IsSet() {
		toSerialize["timeBillableFlag"] = o.TimeBillableFlag.Get()
	}
	if o.ExpenseBillableFlag.IsSet() {
		toSerialize["expenseBillableFlag"] = o.ExpenseBillableFlag.Get()
	}
	if !IsNil(o.PurchaseOrderNumber) {
		toSerialize["purchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if o.BillCompleteFlag.IsSet() {
		toSerialize["billComplete_Flag"] = o.BillCompleteFlag.Get()
	}
	if o.BillServiceSeparatelyFlag.IsSet() {
		toSerialize["billServiceSeparatelyFlag"] = o.BillServiceSeparatelyFlag.Get()
	}
	if o.BillingAmount.IsSet() {
		toSerialize["billingAmount"] = o.BillingAmount.Get()
	}
	if o.BillUnapprovedTimeAndExpensesFlag.IsSet() {
		toSerialize["billUnapprovedTimeAndExpensesFlag"] = o.BillUnapprovedTimeAndExpensesFlag.Get()
	}
	if o.OverrideFlag.IsSet() {
		toSerialize["overrideFlag"] = o.OverrideFlag.Get()
	}
	if o.TimeInvoiceFlag.IsSet() {
		toSerialize["timeInvoiceFlag"] = o.TimeInvoiceFlag.Get()
	}
	if o.ExpenseInvoiceFlag.IsSet() {
		toSerialize["expenseInvoiceFlag"] = o.ExpenseInvoiceFlag.Get()
	}
	if o.ProductInvoiceFlag.IsSet() {
		toSerialize["productInvoiceFlag"] = o.ProductInvoiceFlag.Get()
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.BillingMethod) {
		toSerialize["billingMethod"] = o.BillingMethod
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Impact) {
		toSerialize["impact"] = o.Impact
	}
	if !IsNil(o.AssignedBy) {
		toSerialize["assignedBy"] = o.AssignedBy
	}
	if o.ScheduleDaysBefore.IsSet() {
		toSerialize["scheduleDaysBefore"] = o.ScheduleDaysBefore.Get()
	}
	if o.ServiceDaysBefore.IsSet() {
		toSerialize["serviceDaysBefore"] = o.ServiceDaysBefore.Get()
	}
	if o.AttachScheduleToNewServiceFlag.IsSet() {
		toSerialize["attachScheduleToNewServiceFlag"] = o.AttachScheduleToNewServiceFlag.Get()
	}
	if o.TemplateFlag.IsSet() {
		toSerialize["templateFlag"] = o.TemplateFlag.Get()
	}
	if o.EmailContactFlag.IsSet() {
		toSerialize["emailContactFlag"] = o.EmailContactFlag.Get()
	}
	if o.EmailResourceFlag.IsSet() {
		toSerialize["emailResourceFlag"] = o.EmailResourceFlag.Get()
	}
	if o.EmailCCFlag.IsSet() {
		toSerialize["emailCCFlag"] = o.EmailCCFlag.Get()
	}
	if !IsNil(o.EmailCC) {
		toSerialize["emailCC"] = o.EmailCC
	}
	if o.RestrictDownpaymentFlag.IsSet() {
		toSerialize["restrictDownpaymentFlag"] = o.RestrictDownpaymentFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableServiceTemplate struct {
	value *ServiceTemplate
	isSet bool
}

func (v NullableServiceTemplate) Get() *ServiceTemplate {
	return v.value
}

func (v *NullableServiceTemplate) Set(val *ServiceTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTemplate(val *ServiceTemplate) *NullableServiceTemplate {
	return &NullableServiceTemplate{value: val, isSet: true}
}

func (v NullableServiceTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


