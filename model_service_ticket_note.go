/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the ServiceTicketNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTicketNote{}

// ServiceTicketNote struct for ServiceTicketNote
type ServiceTicketNote struct {
	Id *int32 `json:"id,omitempty"`
	NoteType NullableString `json:"noteType,omitempty"`
	Ticket *TicketReference `json:"ticket,omitempty"`
	Text *string `json:"text,omitempty"`
	IsMarkdownFlag NullableBool `json:"isMarkdownFlag,omitempty"`
	DetailDescriptionFlag NullableBool `json:"detailDescriptionFlag,omitempty"`
	InternalAnalysisFlag NullableBool `json:"internalAnalysisFlag,omitempty"`
	ResolutionFlag NullableBool `json:"resolutionFlag,omitempty"`
	TimeStart *string `json:"timeStart,omitempty"`
	TimeEnd *string `json:"timeEnd,omitempty"`
	BundledFlag NullableBool `json:"bundledFlag,omitempty"`
	MergedFlag NullableBool `json:"mergedFlag,omitempty"`
	IssueFlag NullableBool `json:"issueFlag,omitempty"`
	OriginalAuthor *string `json:"originalAuthor,omitempty"`
	CreatedByParentFlag NullableBool `json:"createdByParentFlag,omitempty"`
	Member *MemberReference `json:"member,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewServiceTicketNote instantiates a new ServiceTicketNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTicketNote() *ServiceTicketNote {
	this := ServiceTicketNote{}
	return &this
}

// NewServiceTicketNoteWithDefaults instantiates a new ServiceTicketNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTicketNoteWithDefaults() *ServiceTicketNote {
	this := ServiceTicketNote{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServiceTicketNote) SetId(v int32) {
	o.Id = &v
}

// GetNoteType returns the NoteType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetNoteType() string {
	if o == nil || IsNil(o.NoteType.Get()) {
		var ret string
		return ret
	}
	return *o.NoteType.Get()
}

// GetNoteTypeOk returns a tuple with the NoteType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetNoteTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoteType.Get(), o.NoteType.IsSet()
}

// HasNoteType returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasNoteType() bool {
	if o != nil && o.NoteType.IsSet() {
		return true
	}

	return false
}

// SetNoteType gets a reference to the given NullableString and assigns it to the NoteType field.
func (o *ServiceTicketNote) SetNoteType(v string) {
	o.NoteType.Set(&v)
}
// SetNoteTypeNil sets the value for NoteType to be an explicit nil
func (o *ServiceTicketNote) SetNoteTypeNil() {
	o.NoteType.Set(nil)
}

// UnsetNoteType ensures that no value is present for NoteType, not even an explicit nil
func (o *ServiceTicketNote) UnsetNoteType() {
	o.NoteType.Unset()
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *ServiceTicketNote) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ServiceTicketNote) SetText(v string) {
	o.Text = &v
}

// GetIsMarkdownFlag returns the IsMarkdownFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetIsMarkdownFlag() bool {
	if o == nil || IsNil(o.IsMarkdownFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMarkdownFlag.Get()
}

// GetIsMarkdownFlagOk returns a tuple with the IsMarkdownFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetIsMarkdownFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMarkdownFlag.Get(), o.IsMarkdownFlag.IsSet()
}

// HasIsMarkdownFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasIsMarkdownFlag() bool {
	if o != nil && o.IsMarkdownFlag.IsSet() {
		return true
	}

	return false
}

// SetIsMarkdownFlag gets a reference to the given NullableBool and assigns it to the IsMarkdownFlag field.
func (o *ServiceTicketNote) SetIsMarkdownFlag(v bool) {
	o.IsMarkdownFlag.Set(&v)
}
// SetIsMarkdownFlagNil sets the value for IsMarkdownFlag to be an explicit nil
func (o *ServiceTicketNote) SetIsMarkdownFlagNil() {
	o.IsMarkdownFlag.Set(nil)
}

// UnsetIsMarkdownFlag ensures that no value is present for IsMarkdownFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetIsMarkdownFlag() {
	o.IsMarkdownFlag.Unset()
}

// GetDetailDescriptionFlag returns the DetailDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetDetailDescriptionFlag() bool {
	if o == nil || IsNil(o.DetailDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DetailDescriptionFlag.Get()
}

// GetDetailDescriptionFlagOk returns a tuple with the DetailDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetDetailDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetailDescriptionFlag.Get(), o.DetailDescriptionFlag.IsSet()
}

// HasDetailDescriptionFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasDetailDescriptionFlag() bool {
	if o != nil && o.DetailDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetDetailDescriptionFlag gets a reference to the given NullableBool and assigns it to the DetailDescriptionFlag field.
func (o *ServiceTicketNote) SetDetailDescriptionFlag(v bool) {
	o.DetailDescriptionFlag.Set(&v)
}
// SetDetailDescriptionFlagNil sets the value for DetailDescriptionFlag to be an explicit nil
func (o *ServiceTicketNote) SetDetailDescriptionFlagNil() {
	o.DetailDescriptionFlag.Set(nil)
}

// UnsetDetailDescriptionFlag ensures that no value is present for DetailDescriptionFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetDetailDescriptionFlag() {
	o.DetailDescriptionFlag.Unset()
}

// GetInternalAnalysisFlag returns the InternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.InternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InternalAnalysisFlag.Get()
}

// GetInternalAnalysisFlagOk returns a tuple with the InternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalAnalysisFlag.Get(), o.InternalAnalysisFlag.IsSet()
}

// HasInternalAnalysisFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasInternalAnalysisFlag() bool {
	if o != nil && o.InternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the InternalAnalysisFlag field.
func (o *ServiceTicketNote) SetInternalAnalysisFlag(v bool) {
	o.InternalAnalysisFlag.Set(&v)
}
// SetInternalAnalysisFlagNil sets the value for InternalAnalysisFlag to be an explicit nil
func (o *ServiceTicketNote) SetInternalAnalysisFlagNil() {
	o.InternalAnalysisFlag.Set(nil)
}

// UnsetInternalAnalysisFlag ensures that no value is present for InternalAnalysisFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetInternalAnalysisFlag() {
	o.InternalAnalysisFlag.Unset()
}

// GetResolutionFlag returns the ResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetResolutionFlag() bool {
	if o == nil || IsNil(o.ResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ResolutionFlag.Get()
}

// GetResolutionFlagOk returns a tuple with the ResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionFlag.Get(), o.ResolutionFlag.IsSet()
}

// HasResolutionFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasResolutionFlag() bool {
	if o != nil && o.ResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetResolutionFlag gets a reference to the given NullableBool and assigns it to the ResolutionFlag field.
func (o *ServiceTicketNote) SetResolutionFlag(v bool) {
	o.ResolutionFlag.Set(&v)
}
// SetResolutionFlagNil sets the value for ResolutionFlag to be an explicit nil
func (o *ServiceTicketNote) SetResolutionFlagNil() {
	o.ResolutionFlag.Set(nil)
}

// UnsetResolutionFlag ensures that no value is present for ResolutionFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetResolutionFlag() {
	o.ResolutionFlag.Unset()
}

// GetTimeStart returns the TimeStart field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetTimeStart() string {
	if o == nil || IsNil(o.TimeStart) {
		var ret string
		return ret
	}
	return *o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetTimeStartOk() (*string, bool) {
	if o == nil || IsNil(o.TimeStart) {
		return nil, false
	}
	return o.TimeStart, true
}

// HasTimeStart returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasTimeStart() bool {
	if o != nil && !IsNil(o.TimeStart) {
		return true
	}

	return false
}

// SetTimeStart gets a reference to the given string and assigns it to the TimeStart field.
func (o *ServiceTicketNote) SetTimeStart(v string) {
	o.TimeStart = &v
}

// GetTimeEnd returns the TimeEnd field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetTimeEnd() string {
	if o == nil || IsNil(o.TimeEnd) {
		var ret string
		return ret
	}
	return *o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetTimeEndOk() (*string, bool) {
	if o == nil || IsNil(o.TimeEnd) {
		return nil, false
	}
	return o.TimeEnd, true
}

// HasTimeEnd returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasTimeEnd() bool {
	if o != nil && !IsNil(o.TimeEnd) {
		return true
	}

	return false
}

// SetTimeEnd gets a reference to the given string and assigns it to the TimeEnd field.
func (o *ServiceTicketNote) SetTimeEnd(v string) {
	o.TimeEnd = &v
}

// GetBundledFlag returns the BundledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetBundledFlag() bool {
	if o == nil || IsNil(o.BundledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.BundledFlag.Get()
}

// GetBundledFlagOk returns a tuple with the BundledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetBundledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BundledFlag.Get(), o.BundledFlag.IsSet()
}

// HasBundledFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasBundledFlag() bool {
	if o != nil && o.BundledFlag.IsSet() {
		return true
	}

	return false
}

// SetBundledFlag gets a reference to the given NullableBool and assigns it to the BundledFlag field.
func (o *ServiceTicketNote) SetBundledFlag(v bool) {
	o.BundledFlag.Set(&v)
}
// SetBundledFlagNil sets the value for BundledFlag to be an explicit nil
func (o *ServiceTicketNote) SetBundledFlagNil() {
	o.BundledFlag.Set(nil)
}

// UnsetBundledFlag ensures that no value is present for BundledFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetBundledFlag() {
	o.BundledFlag.Unset()
}

// GetMergedFlag returns the MergedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetMergedFlag() bool {
	if o == nil || IsNil(o.MergedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MergedFlag.Get()
}

// GetMergedFlagOk returns a tuple with the MergedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetMergedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergedFlag.Get(), o.MergedFlag.IsSet()
}

// HasMergedFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasMergedFlag() bool {
	if o != nil && o.MergedFlag.IsSet() {
		return true
	}

	return false
}

// SetMergedFlag gets a reference to the given NullableBool and assigns it to the MergedFlag field.
func (o *ServiceTicketNote) SetMergedFlag(v bool) {
	o.MergedFlag.Set(&v)
}
// SetMergedFlagNil sets the value for MergedFlag to be an explicit nil
func (o *ServiceTicketNote) SetMergedFlagNil() {
	o.MergedFlag.Set(nil)
}

// UnsetMergedFlag ensures that no value is present for MergedFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetMergedFlag() {
	o.MergedFlag.Unset()
}

// GetIssueFlag returns the IssueFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetIssueFlag() bool {
	if o == nil || IsNil(o.IssueFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.IssueFlag.Get()
}

// GetIssueFlagOk returns a tuple with the IssueFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetIssueFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueFlag.Get(), o.IssueFlag.IsSet()
}

// HasIssueFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasIssueFlag() bool {
	if o != nil && o.IssueFlag.IsSet() {
		return true
	}

	return false
}

// SetIssueFlag gets a reference to the given NullableBool and assigns it to the IssueFlag field.
func (o *ServiceTicketNote) SetIssueFlag(v bool) {
	o.IssueFlag.Set(&v)
}
// SetIssueFlagNil sets the value for IssueFlag to be an explicit nil
func (o *ServiceTicketNote) SetIssueFlagNil() {
	o.IssueFlag.Set(nil)
}

// UnsetIssueFlag ensures that no value is present for IssueFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetIssueFlag() {
	o.IssueFlag.Unset()
}

// GetOriginalAuthor returns the OriginalAuthor field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetOriginalAuthor() string {
	if o == nil || IsNil(o.OriginalAuthor) {
		var ret string
		return ret
	}
	return *o.OriginalAuthor
}

// GetOriginalAuthorOk returns a tuple with the OriginalAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetOriginalAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalAuthor) {
		return nil, false
	}
	return o.OriginalAuthor, true
}

// HasOriginalAuthor returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasOriginalAuthor() bool {
	if o != nil && !IsNil(o.OriginalAuthor) {
		return true
	}

	return false
}

// SetOriginalAuthor gets a reference to the given string and assigns it to the OriginalAuthor field.
func (o *ServiceTicketNote) SetOriginalAuthor(v string) {
	o.OriginalAuthor = &v
}

// GetCreatedByParentFlag returns the CreatedByParentFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceTicketNote) GetCreatedByParentFlag() bool {
	if o == nil || IsNil(o.CreatedByParentFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CreatedByParentFlag.Get()
}

// GetCreatedByParentFlagOk returns a tuple with the CreatedByParentFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceTicketNote) GetCreatedByParentFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedByParentFlag.Get(), o.CreatedByParentFlag.IsSet()
}

// HasCreatedByParentFlag returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasCreatedByParentFlag() bool {
	if o != nil && o.CreatedByParentFlag.IsSet() {
		return true
	}

	return false
}

// SetCreatedByParentFlag gets a reference to the given NullableBool and assigns it to the CreatedByParentFlag field.
func (o *ServiceTicketNote) SetCreatedByParentFlag(v bool) {
	o.CreatedByParentFlag.Set(&v)
}
// SetCreatedByParentFlagNil sets the value for CreatedByParentFlag to be an explicit nil
func (o *ServiceTicketNote) SetCreatedByParentFlagNil() {
	o.CreatedByParentFlag.Set(nil)
}

// UnsetCreatedByParentFlag ensures that no value is present for CreatedByParentFlag, not even an explicit nil
func (o *ServiceTicketNote) UnsetCreatedByParentFlag() {
	o.CreatedByParentFlag.Unset()
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *ServiceTicketNote) SetMember(v MemberReference) {
	o.Member = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *ServiceTicketNote) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ServiceTicketNote) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTicketNote) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServiceTicketNote) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *ServiceTicketNote) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o ServiceTicketNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTicketNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.NoteType.IsSet() {
		toSerialize["noteType"] = o.NoteType.Get()
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if o.IsMarkdownFlag.IsSet() {
		toSerialize["isMarkdownFlag"] = o.IsMarkdownFlag.Get()
	}
	if o.DetailDescriptionFlag.IsSet() {
		toSerialize["detailDescriptionFlag"] = o.DetailDescriptionFlag.Get()
	}
	if o.InternalAnalysisFlag.IsSet() {
		toSerialize["internalAnalysisFlag"] = o.InternalAnalysisFlag.Get()
	}
	if o.ResolutionFlag.IsSet() {
		toSerialize["resolutionFlag"] = o.ResolutionFlag.Get()
	}
	if !IsNil(o.TimeStart) {
		toSerialize["timeStart"] = o.TimeStart
	}
	if !IsNil(o.TimeEnd) {
		toSerialize["timeEnd"] = o.TimeEnd
	}
	if o.BundledFlag.IsSet() {
		toSerialize["bundledFlag"] = o.BundledFlag.Get()
	}
	if o.MergedFlag.IsSet() {
		toSerialize["mergedFlag"] = o.MergedFlag.Get()
	}
	if o.IssueFlag.IsSet() {
		toSerialize["issueFlag"] = o.IssueFlag.Get()
	}
	if !IsNil(o.OriginalAuthor) {
		toSerialize["originalAuthor"] = o.OriginalAuthor
	}
	if o.CreatedByParentFlag.IsSet() {
		toSerialize["createdByParentFlag"] = o.CreatedByParentFlag.Get()
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableServiceTicketNote struct {
	value *ServiceTicketNote
	isSet bool
}

func (v NullableServiceTicketNote) Get() *ServiceTicketNote {
	return v.value
}

func (v *NullableServiceTicketNote) Set(val *ServiceTicketNote) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTicketNote) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTicketNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTicketNote(val *ServiceTicketNote) *NullableServiceTicketNote {
	return &NullableServiceTicketNote{value: val, isSet: true}
}

func (v NullableServiceTicketNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTicketNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


