/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the SsoUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SsoUser{}

// SsoUser struct for SsoUser
type SsoUser struct {
	Id *int32 `json:"id,omitempty"`
	SsoUserId *string `json:"ssoUserId,omitempty"`
	UserName *string `json:"userName,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	Email *string `json:"email,omitempty"`
	EmailConfirmed NullableBool `json:"emailConfirmed,omitempty"`
	DisabledFlag NullableBool `json:"disabledFlag,omitempty"`
	LinkedFlag NullableBool `json:"linkedFlag,omitempty"`
	DateEntered *string `json:"dateEntered,omitempty"`
	LastUpdated *string `json:"lastUpdated,omitempty"`
	LinkedMember *MemberReference `json:"linkedMember,omitempty"`
}

// NewSsoUser instantiates a new SsoUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsoUser() *SsoUser {
	this := SsoUser{}
	return &this
}

// NewSsoUserWithDefaults instantiates a new SsoUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoUserWithDefaults() *SsoUser {
	this := SsoUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SsoUser) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SsoUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SsoUser) SetId(v int32) {
	o.Id = &v
}

// GetSsoUserId returns the SsoUserId field value if set, zero value otherwise.
func (o *SsoUser) GetSsoUserId() string {
	if o == nil || IsNil(o.SsoUserId) {
		var ret string
		return ret
	}
	return *o.SsoUserId
}

// GetSsoUserIdOk returns a tuple with the SsoUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetSsoUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.SsoUserId) {
		return nil, false
	}
	return o.SsoUserId, true
}

// HasSsoUserId returns a boolean if a field has been set.
func (o *SsoUser) HasSsoUserId() bool {
	if o != nil && !IsNil(o.SsoUserId) {
		return true
	}

	return false
}

// SetSsoUserId gets a reference to the given string and assigns it to the SsoUserId field.
func (o *SsoUser) SetSsoUserId(v string) {
	o.SsoUserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SsoUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SsoUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SsoUser) SetUserName(v string) {
	o.UserName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *SsoUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *SsoUser) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *SsoUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *SsoUser) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *SsoUser) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *SsoUser) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SsoUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SsoUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SsoUser) SetEmail(v string) {
	o.Email = &v
}

// GetEmailConfirmed returns the EmailConfirmed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SsoUser) GetEmailConfirmed() bool {
	if o == nil || IsNil(o.EmailConfirmed.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailConfirmed.Get()
}

// GetEmailConfirmedOk returns a tuple with the EmailConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SsoUser) GetEmailConfirmedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailConfirmed.Get(), o.EmailConfirmed.IsSet()
}

// HasEmailConfirmed returns a boolean if a field has been set.
func (o *SsoUser) HasEmailConfirmed() bool {
	if o != nil && o.EmailConfirmed.IsSet() {
		return true
	}

	return false
}

// SetEmailConfirmed gets a reference to the given NullableBool and assigns it to the EmailConfirmed field.
func (o *SsoUser) SetEmailConfirmed(v bool) {
	o.EmailConfirmed.Set(&v)
}
// SetEmailConfirmedNil sets the value for EmailConfirmed to be an explicit nil
func (o *SsoUser) SetEmailConfirmedNil() {
	o.EmailConfirmed.Set(nil)
}

// UnsetEmailConfirmed ensures that no value is present for EmailConfirmed, not even an explicit nil
func (o *SsoUser) UnsetEmailConfirmed() {
	o.EmailConfirmed.Unset()
}

// GetDisabledFlag returns the DisabledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SsoUser) GetDisabledFlag() bool {
	if o == nil || IsNil(o.DisabledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisabledFlag.Get()
}

// GetDisabledFlagOk returns a tuple with the DisabledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SsoUser) GetDisabledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisabledFlag.Get(), o.DisabledFlag.IsSet()
}

// HasDisabledFlag returns a boolean if a field has been set.
func (o *SsoUser) HasDisabledFlag() bool {
	if o != nil && o.DisabledFlag.IsSet() {
		return true
	}

	return false
}

// SetDisabledFlag gets a reference to the given NullableBool and assigns it to the DisabledFlag field.
func (o *SsoUser) SetDisabledFlag(v bool) {
	o.DisabledFlag.Set(&v)
}
// SetDisabledFlagNil sets the value for DisabledFlag to be an explicit nil
func (o *SsoUser) SetDisabledFlagNil() {
	o.DisabledFlag.Set(nil)
}

// UnsetDisabledFlag ensures that no value is present for DisabledFlag, not even an explicit nil
func (o *SsoUser) UnsetDisabledFlag() {
	o.DisabledFlag.Unset()
}

// GetLinkedFlag returns the LinkedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SsoUser) GetLinkedFlag() bool {
	if o == nil || IsNil(o.LinkedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LinkedFlag.Get()
}

// GetLinkedFlagOk returns a tuple with the LinkedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SsoUser) GetLinkedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkedFlag.Get(), o.LinkedFlag.IsSet()
}

// HasLinkedFlag returns a boolean if a field has been set.
func (o *SsoUser) HasLinkedFlag() bool {
	if o != nil && o.LinkedFlag.IsSet() {
		return true
	}

	return false
}

// SetLinkedFlag gets a reference to the given NullableBool and assigns it to the LinkedFlag field.
func (o *SsoUser) SetLinkedFlag(v bool) {
	o.LinkedFlag.Set(&v)
}
// SetLinkedFlagNil sets the value for LinkedFlag to be an explicit nil
func (o *SsoUser) SetLinkedFlagNil() {
	o.LinkedFlag.Set(nil)
}

// UnsetLinkedFlag ensures that no value is present for LinkedFlag, not even an explicit nil
func (o *SsoUser) UnsetLinkedFlag() {
	o.LinkedFlag.Unset()
}

// GetDateEntered returns the DateEntered field value if set, zero value otherwise.
func (o *SsoUser) GetDateEntered() string {
	if o == nil || IsNil(o.DateEntered) {
		var ret string
		return ret
	}
	return *o.DateEntered
}

// GetDateEnteredOk returns a tuple with the DateEntered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetDateEnteredOk() (*string, bool) {
	if o == nil || IsNil(o.DateEntered) {
		return nil, false
	}
	return o.DateEntered, true
}

// HasDateEntered returns a boolean if a field has been set.
func (o *SsoUser) HasDateEntered() bool {
	if o != nil && !IsNil(o.DateEntered) {
		return true
	}

	return false
}

// SetDateEntered gets a reference to the given string and assigns it to the DateEntered field.
func (o *SsoUser) SetDateEntered(v string) {
	o.DateEntered = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SsoUser) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SsoUser) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *SsoUser) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetLinkedMember returns the LinkedMember field value if set, zero value otherwise.
func (o *SsoUser) GetLinkedMember() MemberReference {
	if o == nil || IsNil(o.LinkedMember) {
		var ret MemberReference
		return ret
	}
	return *o.LinkedMember
}

// GetLinkedMemberOk returns a tuple with the LinkedMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsoUser) GetLinkedMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.LinkedMember) {
		return nil, false
	}
	return o.LinkedMember, true
}

// HasLinkedMember returns a boolean if a field has been set.
func (o *SsoUser) HasLinkedMember() bool {
	if o != nil && !IsNil(o.LinkedMember) {
		return true
	}

	return false
}

// SetLinkedMember gets a reference to the given MemberReference and assigns it to the LinkedMember field.
func (o *SsoUser) SetLinkedMember(v MemberReference) {
	o.LinkedMember = &v
}

func (o SsoUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SsoUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SsoUserId) {
		toSerialize["ssoUserId"] = o.SsoUserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if o.EmailConfirmed.IsSet() {
		toSerialize["emailConfirmed"] = o.EmailConfirmed.Get()
	}
	if o.DisabledFlag.IsSet() {
		toSerialize["disabledFlag"] = o.DisabledFlag.Get()
	}
	if o.LinkedFlag.IsSet() {
		toSerialize["linkedFlag"] = o.LinkedFlag.Get()
	}
	if !IsNil(o.DateEntered) {
		toSerialize["dateEntered"] = o.DateEntered
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LinkedMember) {
		toSerialize["linkedMember"] = o.LinkedMember
	}
	return toSerialize, nil
}

type NullableSsoUser struct {
	value *SsoUser
	isSet bool
}

func (v NullableSsoUser) Get() *SsoUser {
	return v.value
}

func (v *NullableSsoUser) Set(val *SsoUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoUser(val *SsoUser) *NullableSsoUser {
	return &NullableSsoUser{value: val, isSet: true}
}

func (v NullableSsoUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


