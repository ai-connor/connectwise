/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SurveyQuestionValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveyQuestionValue{}

// SurveyQuestionValue struct for SurveyQuestionValue
type SurveyQuestionValue struct {
	Id *int32 `json:"id,omitempty"`
	Survey *SurveyReference `json:"survey,omitempty"`
	Question *SurveyQuestionReference `json:"question,omitempty"`
	//  Max length: 1000;
	Value string `json:"value"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	PointValue NullableInt32 `json:"pointValue,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _SurveyQuestionValue SurveyQuestionValue

// NewSurveyQuestionValue instantiates a new SurveyQuestionValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveyQuestionValue(value string) *SurveyQuestionValue {
	this := SurveyQuestionValue{}
	this.Value = value
	return &this
}

// NewSurveyQuestionValueWithDefaults instantiates a new SurveyQuestionValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveyQuestionValueWithDefaults() *SurveyQuestionValue {
	this := SurveyQuestionValue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SurveyQuestionValue) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionValue) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SurveyQuestionValue) SetId(v int32) {
	o.Id = &v
}

// GetSurvey returns the Survey field value if set, zero value otherwise.
func (o *SurveyQuestionValue) GetSurvey() SurveyReference {
	if o == nil || IsNil(o.Survey) {
		var ret SurveyReference
		return ret
	}
	return *o.Survey
}

// GetSurveyOk returns a tuple with the Survey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionValue) GetSurveyOk() (*SurveyReference, bool) {
	if o == nil || IsNil(o.Survey) {
		return nil, false
	}
	return o.Survey, true
}

// HasSurvey returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasSurvey() bool {
	if o != nil && !IsNil(o.Survey) {
		return true
	}

	return false
}

// SetSurvey gets a reference to the given SurveyReference and assigns it to the Survey field.
func (o *SurveyQuestionValue) SetSurvey(v SurveyReference) {
	o.Survey = &v
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *SurveyQuestionValue) GetQuestion() SurveyQuestionReference {
	if o == nil || IsNil(o.Question) {
		var ret SurveyQuestionReference
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionValue) GetQuestionOk() (*SurveyQuestionReference, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given SurveyQuestionReference and assigns it to the Question field.
func (o *SurveyQuestionValue) SetQuestion(v SurveyQuestionReference) {
	o.Question = &v
}

// GetValue returns the Value field value
func (o *SurveyQuestionValue) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SurveyQuestionValue) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SurveyQuestionValue) SetValue(v string) {
	o.Value = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyQuestionValue) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyQuestionValue) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *SurveyQuestionValue) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *SurveyQuestionValue) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *SurveyQuestionValue) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetPointValue returns the PointValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyQuestionValue) GetPointValue() int32 {
	if o == nil || IsNil(o.PointValue.Get()) {
		var ret int32
		return ret
	}
	return *o.PointValue.Get()
}

// GetPointValueOk returns a tuple with the PointValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyQuestionValue) GetPointValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PointValue.Get(), o.PointValue.IsSet()
}

// HasPointValue returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasPointValue() bool {
	if o != nil && o.PointValue.IsSet() {
		return true
	}

	return false
}

// SetPointValue gets a reference to the given NullableInt32 and assigns it to the PointValue field.
func (o *SurveyQuestionValue) SetPointValue(v int32) {
	o.PointValue.Set(&v)
}
// SetPointValueNil sets the value for PointValue to be an explicit nil
func (o *SurveyQuestionValue) SetPointValueNil() {
	o.PointValue.Set(nil)
}

// UnsetPointValue ensures that no value is present for PointValue, not even an explicit nil
func (o *SurveyQuestionValue) UnsetPointValue() {
	o.PointValue.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyQuestionValue) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyQuestionValue) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *SurveyQuestionValue) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *SurveyQuestionValue) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *SurveyQuestionValue) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SurveyQuestionValue) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyQuestionValue) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SurveyQuestionValue) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SurveyQuestionValue) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SurveyQuestionValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveyQuestionValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Survey) {
		toSerialize["survey"] = o.Survey
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	toSerialize["value"] = o.Value
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.PointValue.IsSet() {
		toSerialize["pointValue"] = o.PointValue.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SurveyQuestionValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSurveyQuestionValue := _SurveyQuestionValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSurveyQuestionValue)

	if err != nil {
		return err
	}

	*o = SurveyQuestionValue(varSurveyQuestionValue)

	return err
}

type NullableSurveyQuestionValue struct {
	value *SurveyQuestionValue
	isSet bool
}

func (v NullableSurveyQuestionValue) Get() *SurveyQuestionValue {
	return v.value
}

func (v *NullableSurveyQuestionValue) Set(val *SurveyQuestionValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveyQuestionValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveyQuestionValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveyQuestionValue(val *SurveyQuestionValue) *NullableSurveyQuestionValue {
	return &NullableSurveyQuestionValue{value: val, isSet: true}
}

func (v NullableSurveyQuestionValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveyQuestionValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


