/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SurveyResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SurveyResult{}

// SurveyResult struct for SurveyResult
type SurveyResult struct {
	Id *int32 `json:"id,omitempty"`
	TicketId NullableInt32 `json:"ticketId"`
	EmailAddress *string `json:"emailAddress,omitempty"`
	FooterResponse *string `json:"footerResponse,omitempty"`
	ContactMeFlag NullableBool `json:"contactMeFlag,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	Results []SurveyResultDetail `json:"results,omitempty"`
	TotalPoints NullableInt32 `json:"totalPoints,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	SurveyId NullableInt32 `json:"surveyId,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _SurveyResult SurveyResult

// NewSurveyResult instantiates a new SurveyResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSurveyResult(ticketId NullableInt32) *SurveyResult {
	this := SurveyResult{}
	this.TicketId = ticketId
	return &this
}

// NewSurveyResultWithDefaults instantiates a new SurveyResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSurveyResultWithDefaults() *SurveyResult {
	this := SurveyResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SurveyResult) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SurveyResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SurveyResult) SetId(v int32) {
	o.Id = &v
}

// GetTicketId returns the TicketId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *SurveyResult) GetTicketId() int32 {
	if o == nil || o.TicketId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.TicketId.Get()
}

// GetTicketIdOk returns a tuple with the TicketId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyResult) GetTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TicketId.Get(), o.TicketId.IsSet()
}

// SetTicketId sets field value
func (o *SurveyResult) SetTicketId(v int32) {
	o.TicketId.Set(&v)
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *SurveyResult) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *SurveyResult) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *SurveyResult) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetFooterResponse returns the FooterResponse field value if set, zero value otherwise.
func (o *SurveyResult) GetFooterResponse() string {
	if o == nil || IsNil(o.FooterResponse) {
		var ret string
		return ret
	}
	return *o.FooterResponse
}

// GetFooterResponseOk returns a tuple with the FooterResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetFooterResponseOk() (*string, bool) {
	if o == nil || IsNil(o.FooterResponse) {
		return nil, false
	}
	return o.FooterResponse, true
}

// HasFooterResponse returns a boolean if a field has been set.
func (o *SurveyResult) HasFooterResponse() bool {
	if o != nil && !IsNil(o.FooterResponse) {
		return true
	}

	return false
}

// SetFooterResponse gets a reference to the given string and assigns it to the FooterResponse field.
func (o *SurveyResult) SetFooterResponse(v string) {
	o.FooterResponse = &v
}

// GetContactMeFlag returns the ContactMeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyResult) GetContactMeFlag() bool {
	if o == nil || IsNil(o.ContactMeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ContactMeFlag.Get()
}

// GetContactMeFlagOk returns a tuple with the ContactMeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyResult) GetContactMeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactMeFlag.Get(), o.ContactMeFlag.IsSet()
}

// HasContactMeFlag returns a boolean if a field has been set.
func (o *SurveyResult) HasContactMeFlag() bool {
	if o != nil && o.ContactMeFlag.IsSet() {
		return true
	}

	return false
}

// SetContactMeFlag gets a reference to the given NullableBool and assigns it to the ContactMeFlag field.
func (o *SurveyResult) SetContactMeFlag(v bool) {
	o.ContactMeFlag.Set(&v)
}
// SetContactMeFlagNil sets the value for ContactMeFlag to be an explicit nil
func (o *SurveyResult) SetContactMeFlagNil() {
	o.ContactMeFlag.Set(nil)
}

// UnsetContactMeFlag ensures that no value is present for ContactMeFlag, not even an explicit nil
func (o *SurveyResult) UnsetContactMeFlag() {
	o.ContactMeFlag.Unset()
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *SurveyResult) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *SurveyResult) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *SurveyResult) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *SurveyResult) GetResults() []SurveyResultDetail {
	if o == nil || IsNil(o.Results) {
		var ret []SurveyResultDetail
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetResultsOk() ([]SurveyResultDetail, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *SurveyResult) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []SurveyResultDetail and assigns it to the Results field.
func (o *SurveyResult) SetResults(v []SurveyResultDetail) {
	o.Results = v
}

// GetTotalPoints returns the TotalPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyResult) GetTotalPoints() int32 {
	if o == nil || IsNil(o.TotalPoints.Get()) {
		var ret int32
		return ret
	}
	return *o.TotalPoints.Get()
}

// GetTotalPointsOk returns a tuple with the TotalPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyResult) GetTotalPointsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalPoints.Get(), o.TotalPoints.IsSet()
}

// HasTotalPoints returns a boolean if a field has been set.
func (o *SurveyResult) HasTotalPoints() bool {
	if o != nil && o.TotalPoints.IsSet() {
		return true
	}

	return false
}

// SetTotalPoints gets a reference to the given NullableInt32 and assigns it to the TotalPoints field.
func (o *SurveyResult) SetTotalPoints(v int32) {
	o.TotalPoints.Set(&v)
}
// SetTotalPointsNil sets the value for TotalPoints to be an explicit nil
func (o *SurveyResult) SetTotalPointsNil() {
	o.TotalPoints.Set(nil)
}

// UnsetTotalPoints ensures that no value is present for TotalPoints, not even an explicit nil
func (o *SurveyResult) UnsetTotalPoints() {
	o.TotalPoints.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *SurveyResult) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *SurveyResult) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *SurveyResult) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetSurveyId returns the SurveyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SurveyResult) GetSurveyId() int32 {
	if o == nil || IsNil(o.SurveyId.Get()) {
		var ret int32
		return ret
	}
	return *o.SurveyId.Get()
}

// GetSurveyIdOk returns a tuple with the SurveyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SurveyResult) GetSurveyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SurveyId.Get(), o.SurveyId.IsSet()
}

// HasSurveyId returns a boolean if a field has been set.
func (o *SurveyResult) HasSurveyId() bool {
	if o != nil && o.SurveyId.IsSet() {
		return true
	}

	return false
}

// SetSurveyId gets a reference to the given NullableInt32 and assigns it to the SurveyId field.
func (o *SurveyResult) SetSurveyId(v int32) {
	o.SurveyId.Set(&v)
}
// SetSurveyIdNil sets the value for SurveyId to be an explicit nil
func (o *SurveyResult) SetSurveyIdNil() {
	o.SurveyId.Set(nil)
}

// UnsetSurveyId ensures that no value is present for SurveyId, not even an explicit nil
func (o *SurveyResult) UnsetSurveyId() {
	o.SurveyId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *SurveyResult) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SurveyResult) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *SurveyResult) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *SurveyResult) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o SurveyResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SurveyResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["ticketId"] = o.TicketId.Get()
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.FooterResponse) {
		toSerialize["footerResponse"] = o.FooterResponse
	}
	if o.ContactMeFlag.IsSet() {
		toSerialize["contactMeFlag"] = o.ContactMeFlag.Get()
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if o.TotalPoints.IsSet() {
		toSerialize["totalPoints"] = o.TotalPoints.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if o.SurveyId.IsSet() {
		toSerialize["surveyId"] = o.SurveyId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *SurveyResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ticketId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSurveyResult := _SurveyResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSurveyResult)

	if err != nil {
		return err
	}

	*o = SurveyResult(varSurveyResult)

	return err
}

type NullableSurveyResult struct {
	value *SurveyResult
	isSet bool
}

func (v NullableSurveyResult) Get() *SurveyResult {
	return v.value
}

func (v *NullableSurveyResult) Set(val *SurveyResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSurveyResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSurveyResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSurveyResult(val *SurveyResult) *NullableSurveyResult {
	return &NullableSurveyResult{value: val, isSet: true}
}

func (v NullableSurveyResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSurveyResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


