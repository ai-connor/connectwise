/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaxCodeXRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxCodeXRef{}

// TaxCodeXRef struct for TaxCodeXRef
type TaxCodeXRef struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Description string `json:"description"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	LevelOne NullableString `json:"levelOne,omitempty"`
	LevelTwo NullableString `json:"levelTwo,omitempty"`
	LevelThree NullableString `json:"levelThree,omitempty"`
	LevelFour NullableString `json:"levelFour,omitempty"`
	LevelFive NullableString `json:"levelFive,omitempty"`
	LevelSix NullableString `json:"levelSix,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	TaxableLevels []int32 `json:"taxableLevels,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _TaxCodeXRef TaxCodeXRef

// NewTaxCodeXRef instantiates a new TaxCodeXRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxCodeXRef(description string) *TaxCodeXRef {
	this := TaxCodeXRef{}
	this.Description = description
	return &this
}

// NewTaxCodeXRefWithDefaults instantiates a new TaxCodeXRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxCodeXRefWithDefaults() *TaxCodeXRef {
	this := TaxCodeXRef{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxCodeXRef) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeXRef) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxCodeXRef) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value
func (o *TaxCodeXRef) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TaxCodeXRef) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TaxCodeXRef) SetDescription(v string) {
	o.Description = v
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *TaxCodeXRef) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *TaxCodeXRef) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *TaxCodeXRef) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetLevelOne returns the LevelOne field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetLevelOne() string {
	if o == nil || IsNil(o.LevelOne.Get()) {
		var ret string
		return ret
	}
	return *o.LevelOne.Get()
}

// GetLevelOneOk returns a tuple with the LevelOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetLevelOneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelOne.Get(), o.LevelOne.IsSet()
}

// HasLevelOne returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasLevelOne() bool {
	if o != nil && o.LevelOne.IsSet() {
		return true
	}

	return false
}

// SetLevelOne gets a reference to the given NullableString and assigns it to the LevelOne field.
func (o *TaxCodeXRef) SetLevelOne(v string) {
	o.LevelOne.Set(&v)
}
// SetLevelOneNil sets the value for LevelOne to be an explicit nil
func (o *TaxCodeXRef) SetLevelOneNil() {
	o.LevelOne.Set(nil)
}

// UnsetLevelOne ensures that no value is present for LevelOne, not even an explicit nil
func (o *TaxCodeXRef) UnsetLevelOne() {
	o.LevelOne.Unset()
}

// GetLevelTwo returns the LevelTwo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetLevelTwo() string {
	if o == nil || IsNil(o.LevelTwo.Get()) {
		var ret string
		return ret
	}
	return *o.LevelTwo.Get()
}

// GetLevelTwoOk returns a tuple with the LevelTwo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetLevelTwoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelTwo.Get(), o.LevelTwo.IsSet()
}

// HasLevelTwo returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasLevelTwo() bool {
	if o != nil && o.LevelTwo.IsSet() {
		return true
	}

	return false
}

// SetLevelTwo gets a reference to the given NullableString and assigns it to the LevelTwo field.
func (o *TaxCodeXRef) SetLevelTwo(v string) {
	o.LevelTwo.Set(&v)
}
// SetLevelTwoNil sets the value for LevelTwo to be an explicit nil
func (o *TaxCodeXRef) SetLevelTwoNil() {
	o.LevelTwo.Set(nil)
}

// UnsetLevelTwo ensures that no value is present for LevelTwo, not even an explicit nil
func (o *TaxCodeXRef) UnsetLevelTwo() {
	o.LevelTwo.Unset()
}

// GetLevelThree returns the LevelThree field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetLevelThree() string {
	if o == nil || IsNil(o.LevelThree.Get()) {
		var ret string
		return ret
	}
	return *o.LevelThree.Get()
}

// GetLevelThreeOk returns a tuple with the LevelThree field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetLevelThreeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelThree.Get(), o.LevelThree.IsSet()
}

// HasLevelThree returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasLevelThree() bool {
	if o != nil && o.LevelThree.IsSet() {
		return true
	}

	return false
}

// SetLevelThree gets a reference to the given NullableString and assigns it to the LevelThree field.
func (o *TaxCodeXRef) SetLevelThree(v string) {
	o.LevelThree.Set(&v)
}
// SetLevelThreeNil sets the value for LevelThree to be an explicit nil
func (o *TaxCodeXRef) SetLevelThreeNil() {
	o.LevelThree.Set(nil)
}

// UnsetLevelThree ensures that no value is present for LevelThree, not even an explicit nil
func (o *TaxCodeXRef) UnsetLevelThree() {
	o.LevelThree.Unset()
}

// GetLevelFour returns the LevelFour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetLevelFour() string {
	if o == nil || IsNil(o.LevelFour.Get()) {
		var ret string
		return ret
	}
	return *o.LevelFour.Get()
}

// GetLevelFourOk returns a tuple with the LevelFour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetLevelFourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFour.Get(), o.LevelFour.IsSet()
}

// HasLevelFour returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasLevelFour() bool {
	if o != nil && o.LevelFour.IsSet() {
		return true
	}

	return false
}

// SetLevelFour gets a reference to the given NullableString and assigns it to the LevelFour field.
func (o *TaxCodeXRef) SetLevelFour(v string) {
	o.LevelFour.Set(&v)
}
// SetLevelFourNil sets the value for LevelFour to be an explicit nil
func (o *TaxCodeXRef) SetLevelFourNil() {
	o.LevelFour.Set(nil)
}

// UnsetLevelFour ensures that no value is present for LevelFour, not even an explicit nil
func (o *TaxCodeXRef) UnsetLevelFour() {
	o.LevelFour.Unset()
}

// GetLevelFive returns the LevelFive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetLevelFive() string {
	if o == nil || IsNil(o.LevelFive.Get()) {
		var ret string
		return ret
	}
	return *o.LevelFive.Get()
}

// GetLevelFiveOk returns a tuple with the LevelFive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetLevelFiveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFive.Get(), o.LevelFive.IsSet()
}

// HasLevelFive returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasLevelFive() bool {
	if o != nil && o.LevelFive.IsSet() {
		return true
	}

	return false
}

// SetLevelFive gets a reference to the given NullableString and assigns it to the LevelFive field.
func (o *TaxCodeXRef) SetLevelFive(v string) {
	o.LevelFive.Set(&v)
}
// SetLevelFiveNil sets the value for LevelFive to be an explicit nil
func (o *TaxCodeXRef) SetLevelFiveNil() {
	o.LevelFive.Set(nil)
}

// UnsetLevelFive ensures that no value is present for LevelFive, not even an explicit nil
func (o *TaxCodeXRef) UnsetLevelFive() {
	o.LevelFive.Unset()
}

// GetLevelSix returns the LevelSix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCodeXRef) GetLevelSix() string {
	if o == nil || IsNil(o.LevelSix.Get()) {
		var ret string
		return ret
	}
	return *o.LevelSix.Get()
}

// GetLevelSixOk returns a tuple with the LevelSix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCodeXRef) GetLevelSixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSix.Get(), o.LevelSix.IsSet()
}

// HasLevelSix returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasLevelSix() bool {
	if o != nil && o.LevelSix.IsSet() {
		return true
	}

	return false
}

// SetLevelSix gets a reference to the given NullableString and assigns it to the LevelSix field.
func (o *TaxCodeXRef) SetLevelSix(v string) {
	o.LevelSix.Set(&v)
}
// SetLevelSixNil sets the value for LevelSix to be an explicit nil
func (o *TaxCodeXRef) SetLevelSixNil() {
	o.LevelSix.Set(nil)
}

// UnsetLevelSix ensures that no value is present for LevelSix, not even an explicit nil
func (o *TaxCodeXRef) UnsetLevelSix() {
	o.LevelSix.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *TaxCodeXRef) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeXRef) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *TaxCodeXRef) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetTaxableLevels returns the TaxableLevels field value if set, zero value otherwise.
func (o *TaxCodeXRef) GetTaxableLevels() []int32 {
	if o == nil || IsNil(o.TaxableLevels) {
		var ret []int32
		return ret
	}
	return o.TaxableLevels
}

// GetTaxableLevelsOk returns a tuple with the TaxableLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeXRef) GetTaxableLevelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.TaxableLevels) {
		return nil, false
	}
	return o.TaxableLevels, true
}

// HasTaxableLevels returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasTaxableLevels() bool {
	if o != nil && !IsNil(o.TaxableLevels) {
		return true
	}

	return false
}

// SetTaxableLevels gets a reference to the given []int32 and assigns it to the TaxableLevels field.
func (o *TaxCodeXRef) SetTaxableLevels(v []int32) {
	o.TaxableLevels = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TaxCodeXRef) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCodeXRef) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TaxCodeXRef) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TaxCodeXRef) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TaxCodeXRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxCodeXRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["description"] = o.Description
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.LevelOne.IsSet() {
		toSerialize["levelOne"] = o.LevelOne.Get()
	}
	if o.LevelTwo.IsSet() {
		toSerialize["levelTwo"] = o.LevelTwo.Get()
	}
	if o.LevelThree.IsSet() {
		toSerialize["levelThree"] = o.LevelThree.Get()
	}
	if o.LevelFour.IsSet() {
		toSerialize["levelFour"] = o.LevelFour.Get()
	}
	if o.LevelFive.IsSet() {
		toSerialize["levelFive"] = o.LevelFive.Get()
	}
	if o.LevelSix.IsSet() {
		toSerialize["levelSix"] = o.LevelSix.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.TaxableLevels) {
		toSerialize["taxableLevels"] = o.TaxableLevels
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TaxCodeXRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxCodeXRef := _TaxCodeXRef{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxCodeXRef)

	if err != nil {
		return err
	}

	*o = TaxCodeXRef(varTaxCodeXRef)

	return err
}

type NullableTaxCodeXRef struct {
	value *TaxCodeXRef
	isSet bool
}

func (v NullableTaxCodeXRef) Get() *TaxCodeXRef {
	return v.value
}

func (v *NullableTaxCodeXRef) Set(val *TaxCodeXRef) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxCodeXRef) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxCodeXRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxCodeXRef(val *TaxCodeXRef) *NullableTaxCodeXRef {
	return &NullableTaxCodeXRef{value: val, isSet: true}
}

func (v NullableTaxCodeXRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxCodeXRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


