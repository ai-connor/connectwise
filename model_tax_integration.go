/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TaxIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxIntegration{}

// TaxIntegration struct for TaxIntegration
type TaxIntegration struct {
	TaxIntegrationType *string `json:"taxIntegrationType,omitempty"`
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	AccountNumber *string `json:"accountNumber,omitempty"`
	//  Max length: 50;
	LicenseKey *string `json:"licenseKey,omitempty"`
	//  Max length: 250;
	ServiceUrl *string `json:"serviceUrl,omitempty"`
	//  Max length: 50;
	CompanyCode *string `json:"companyCode,omitempty"`
	//  Max length: 50;
	TimeTaxCode *string `json:"timeTaxCode,omitempty"`
	//  Max length: 50;
	ExpenseTaxCode *string `json:"expenseTaxCode,omitempty"`
	//  Max length: 50;
	ProductTaxCode *string `json:"productTaxCode,omitempty"`
	//  Max length: 50;
	InvoiceAmountTaxCode *string `json:"invoiceAmountTaxCode,omitempty"`
	EnabledFlag NullableBool `json:"enabledFlag,omitempty"`
	CommitTransactionsFlag NullableBool `json:"commitTransactionsFlag,omitempty"`
	SalesInvoiceFlag NullableBool `json:"salesInvoiceFlag,omitempty"`
	//  Max length: 50;
	FreightTaxCode *string `json:"freightTaxCode,omitempty"`
	AccountingIntegrationFlag NullableBool `json:"accountingIntegrationFlag,omitempty"`
	TaxLineFlag NullableBool `json:"taxLineFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewTaxIntegration instantiates a new TaxIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxIntegration() *TaxIntegration {
	this := TaxIntegration{}
	return &this
}

// NewTaxIntegrationWithDefaults instantiates a new TaxIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxIntegrationWithDefaults() *TaxIntegration {
	this := TaxIntegration{}
	return &this
}

// GetTaxIntegrationType returns the TaxIntegrationType field value if set, zero value otherwise.
func (o *TaxIntegration) GetTaxIntegrationType() string {
	if o == nil || IsNil(o.TaxIntegrationType) {
		var ret string
		return ret
	}
	return *o.TaxIntegrationType
}

// GetTaxIntegrationTypeOk returns a tuple with the TaxIntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetTaxIntegrationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxIntegrationType) {
		return nil, false
	}
	return o.TaxIntegrationType, true
}

// HasTaxIntegrationType returns a boolean if a field has been set.
func (o *TaxIntegration) HasTaxIntegrationType() bool {
	if o != nil && !IsNil(o.TaxIntegrationType) {
		return true
	}

	return false
}

// SetTaxIntegrationType gets a reference to the given string and assigns it to the TaxIntegrationType field.
func (o *TaxIntegration) SetTaxIntegrationType(v string) {
	o.TaxIntegrationType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxIntegration) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxIntegration) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaxIntegration) SetId(v int32) {
	o.Id = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *TaxIntegration) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *TaxIntegration) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *TaxIntegration) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetLicenseKey returns the LicenseKey field value if set, zero value otherwise.
func (o *TaxIntegration) GetLicenseKey() string {
	if o == nil || IsNil(o.LicenseKey) {
		var ret string
		return ret
	}
	return *o.LicenseKey
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetLicenseKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseKey) {
		return nil, false
	}
	return o.LicenseKey, true
}

// HasLicenseKey returns a boolean if a field has been set.
func (o *TaxIntegration) HasLicenseKey() bool {
	if o != nil && !IsNil(o.LicenseKey) {
		return true
	}

	return false
}

// SetLicenseKey gets a reference to the given string and assigns it to the LicenseKey field.
func (o *TaxIntegration) SetLicenseKey(v string) {
	o.LicenseKey = &v
}

// GetServiceUrl returns the ServiceUrl field value if set, zero value otherwise.
func (o *TaxIntegration) GetServiceUrl() string {
	if o == nil || IsNil(o.ServiceUrl) {
		var ret string
		return ret
	}
	return *o.ServiceUrl
}

// GetServiceUrlOk returns a tuple with the ServiceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetServiceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceUrl) {
		return nil, false
	}
	return o.ServiceUrl, true
}

// HasServiceUrl returns a boolean if a field has been set.
func (o *TaxIntegration) HasServiceUrl() bool {
	if o != nil && !IsNil(o.ServiceUrl) {
		return true
	}

	return false
}

// SetServiceUrl gets a reference to the given string and assigns it to the ServiceUrl field.
func (o *TaxIntegration) SetServiceUrl(v string) {
	o.ServiceUrl = &v
}

// GetCompanyCode returns the CompanyCode field value if set, zero value otherwise.
func (o *TaxIntegration) GetCompanyCode() string {
	if o == nil || IsNil(o.CompanyCode) {
		var ret string
		return ret
	}
	return *o.CompanyCode
}

// GetCompanyCodeOk returns a tuple with the CompanyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetCompanyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyCode) {
		return nil, false
	}
	return o.CompanyCode, true
}

// HasCompanyCode returns a boolean if a field has been set.
func (o *TaxIntegration) HasCompanyCode() bool {
	if o != nil && !IsNil(o.CompanyCode) {
		return true
	}

	return false
}

// SetCompanyCode gets a reference to the given string and assigns it to the CompanyCode field.
func (o *TaxIntegration) SetCompanyCode(v string) {
	o.CompanyCode = &v
}

// GetTimeTaxCode returns the TimeTaxCode field value if set, zero value otherwise.
func (o *TaxIntegration) GetTimeTaxCode() string {
	if o == nil || IsNil(o.TimeTaxCode) {
		var ret string
		return ret
	}
	return *o.TimeTaxCode
}

// GetTimeTaxCodeOk returns a tuple with the TimeTaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetTimeTaxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeTaxCode) {
		return nil, false
	}
	return o.TimeTaxCode, true
}

// HasTimeTaxCode returns a boolean if a field has been set.
func (o *TaxIntegration) HasTimeTaxCode() bool {
	if o != nil && !IsNil(o.TimeTaxCode) {
		return true
	}

	return false
}

// SetTimeTaxCode gets a reference to the given string and assigns it to the TimeTaxCode field.
func (o *TaxIntegration) SetTimeTaxCode(v string) {
	o.TimeTaxCode = &v
}

// GetExpenseTaxCode returns the ExpenseTaxCode field value if set, zero value otherwise.
func (o *TaxIntegration) GetExpenseTaxCode() string {
	if o == nil || IsNil(o.ExpenseTaxCode) {
		var ret string
		return ret
	}
	return *o.ExpenseTaxCode
}

// GetExpenseTaxCodeOk returns a tuple with the ExpenseTaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetExpenseTaxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpenseTaxCode) {
		return nil, false
	}
	return o.ExpenseTaxCode, true
}

// HasExpenseTaxCode returns a boolean if a field has been set.
func (o *TaxIntegration) HasExpenseTaxCode() bool {
	if o != nil && !IsNil(o.ExpenseTaxCode) {
		return true
	}

	return false
}

// SetExpenseTaxCode gets a reference to the given string and assigns it to the ExpenseTaxCode field.
func (o *TaxIntegration) SetExpenseTaxCode(v string) {
	o.ExpenseTaxCode = &v
}

// GetProductTaxCode returns the ProductTaxCode field value if set, zero value otherwise.
func (o *TaxIntegration) GetProductTaxCode() string {
	if o == nil || IsNil(o.ProductTaxCode) {
		var ret string
		return ret
	}
	return *o.ProductTaxCode
}

// GetProductTaxCodeOk returns a tuple with the ProductTaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetProductTaxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTaxCode) {
		return nil, false
	}
	return o.ProductTaxCode, true
}

// HasProductTaxCode returns a boolean if a field has been set.
func (o *TaxIntegration) HasProductTaxCode() bool {
	if o != nil && !IsNil(o.ProductTaxCode) {
		return true
	}

	return false
}

// SetProductTaxCode gets a reference to the given string and assigns it to the ProductTaxCode field.
func (o *TaxIntegration) SetProductTaxCode(v string) {
	o.ProductTaxCode = &v
}

// GetInvoiceAmountTaxCode returns the InvoiceAmountTaxCode field value if set, zero value otherwise.
func (o *TaxIntegration) GetInvoiceAmountTaxCode() string {
	if o == nil || IsNil(o.InvoiceAmountTaxCode) {
		var ret string
		return ret
	}
	return *o.InvoiceAmountTaxCode
}

// GetInvoiceAmountTaxCodeOk returns a tuple with the InvoiceAmountTaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetInvoiceAmountTaxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceAmountTaxCode) {
		return nil, false
	}
	return o.InvoiceAmountTaxCode, true
}

// HasInvoiceAmountTaxCode returns a boolean if a field has been set.
func (o *TaxIntegration) HasInvoiceAmountTaxCode() bool {
	if o != nil && !IsNil(o.InvoiceAmountTaxCode) {
		return true
	}

	return false
}

// SetInvoiceAmountTaxCode gets a reference to the given string and assigns it to the InvoiceAmountTaxCode field.
func (o *TaxIntegration) SetInvoiceAmountTaxCode(v string) {
	o.InvoiceAmountTaxCode = &v
}

// GetEnabledFlag returns the EnabledFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxIntegration) GetEnabledFlag() bool {
	if o == nil || IsNil(o.EnabledFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EnabledFlag.Get()
}

// GetEnabledFlagOk returns a tuple with the EnabledFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxIntegration) GetEnabledFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnabledFlag.Get(), o.EnabledFlag.IsSet()
}

// HasEnabledFlag returns a boolean if a field has been set.
func (o *TaxIntegration) HasEnabledFlag() bool {
	if o != nil && o.EnabledFlag.IsSet() {
		return true
	}

	return false
}

// SetEnabledFlag gets a reference to the given NullableBool and assigns it to the EnabledFlag field.
func (o *TaxIntegration) SetEnabledFlag(v bool) {
	o.EnabledFlag.Set(&v)
}
// SetEnabledFlagNil sets the value for EnabledFlag to be an explicit nil
func (o *TaxIntegration) SetEnabledFlagNil() {
	o.EnabledFlag.Set(nil)
}

// UnsetEnabledFlag ensures that no value is present for EnabledFlag, not even an explicit nil
func (o *TaxIntegration) UnsetEnabledFlag() {
	o.EnabledFlag.Unset()
}

// GetCommitTransactionsFlag returns the CommitTransactionsFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxIntegration) GetCommitTransactionsFlag() bool {
	if o == nil || IsNil(o.CommitTransactionsFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CommitTransactionsFlag.Get()
}

// GetCommitTransactionsFlagOk returns a tuple with the CommitTransactionsFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxIntegration) GetCommitTransactionsFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitTransactionsFlag.Get(), o.CommitTransactionsFlag.IsSet()
}

// HasCommitTransactionsFlag returns a boolean if a field has been set.
func (o *TaxIntegration) HasCommitTransactionsFlag() bool {
	if o != nil && o.CommitTransactionsFlag.IsSet() {
		return true
	}

	return false
}

// SetCommitTransactionsFlag gets a reference to the given NullableBool and assigns it to the CommitTransactionsFlag field.
func (o *TaxIntegration) SetCommitTransactionsFlag(v bool) {
	o.CommitTransactionsFlag.Set(&v)
}
// SetCommitTransactionsFlagNil sets the value for CommitTransactionsFlag to be an explicit nil
func (o *TaxIntegration) SetCommitTransactionsFlagNil() {
	o.CommitTransactionsFlag.Set(nil)
}

// UnsetCommitTransactionsFlag ensures that no value is present for CommitTransactionsFlag, not even an explicit nil
func (o *TaxIntegration) UnsetCommitTransactionsFlag() {
	o.CommitTransactionsFlag.Unset()
}

// GetSalesInvoiceFlag returns the SalesInvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxIntegration) GetSalesInvoiceFlag() bool {
	if o == nil || IsNil(o.SalesInvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.SalesInvoiceFlag.Get()
}

// GetSalesInvoiceFlagOk returns a tuple with the SalesInvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxIntegration) GetSalesInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesInvoiceFlag.Get(), o.SalesInvoiceFlag.IsSet()
}

// HasSalesInvoiceFlag returns a boolean if a field has been set.
func (o *TaxIntegration) HasSalesInvoiceFlag() bool {
	if o != nil && o.SalesInvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetSalesInvoiceFlag gets a reference to the given NullableBool and assigns it to the SalesInvoiceFlag field.
func (o *TaxIntegration) SetSalesInvoiceFlag(v bool) {
	o.SalesInvoiceFlag.Set(&v)
}
// SetSalesInvoiceFlagNil sets the value for SalesInvoiceFlag to be an explicit nil
func (o *TaxIntegration) SetSalesInvoiceFlagNil() {
	o.SalesInvoiceFlag.Set(nil)
}

// UnsetSalesInvoiceFlag ensures that no value is present for SalesInvoiceFlag, not even an explicit nil
func (o *TaxIntegration) UnsetSalesInvoiceFlag() {
	o.SalesInvoiceFlag.Unset()
}

// GetFreightTaxCode returns the FreightTaxCode field value if set, zero value otherwise.
func (o *TaxIntegration) GetFreightTaxCode() string {
	if o == nil || IsNil(o.FreightTaxCode) {
		var ret string
		return ret
	}
	return *o.FreightTaxCode
}

// GetFreightTaxCodeOk returns a tuple with the FreightTaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetFreightTaxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FreightTaxCode) {
		return nil, false
	}
	return o.FreightTaxCode, true
}

// HasFreightTaxCode returns a boolean if a field has been set.
func (o *TaxIntegration) HasFreightTaxCode() bool {
	if o != nil && !IsNil(o.FreightTaxCode) {
		return true
	}

	return false
}

// SetFreightTaxCode gets a reference to the given string and assigns it to the FreightTaxCode field.
func (o *TaxIntegration) SetFreightTaxCode(v string) {
	o.FreightTaxCode = &v
}

// GetAccountingIntegrationFlag returns the AccountingIntegrationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxIntegration) GetAccountingIntegrationFlag() bool {
	if o == nil || IsNil(o.AccountingIntegrationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AccountingIntegrationFlag.Get()
}

// GetAccountingIntegrationFlagOk returns a tuple with the AccountingIntegrationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxIntegration) GetAccountingIntegrationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountingIntegrationFlag.Get(), o.AccountingIntegrationFlag.IsSet()
}

// HasAccountingIntegrationFlag returns a boolean if a field has been set.
func (o *TaxIntegration) HasAccountingIntegrationFlag() bool {
	if o != nil && o.AccountingIntegrationFlag.IsSet() {
		return true
	}

	return false
}

// SetAccountingIntegrationFlag gets a reference to the given NullableBool and assigns it to the AccountingIntegrationFlag field.
func (o *TaxIntegration) SetAccountingIntegrationFlag(v bool) {
	o.AccountingIntegrationFlag.Set(&v)
}
// SetAccountingIntegrationFlagNil sets the value for AccountingIntegrationFlag to be an explicit nil
func (o *TaxIntegration) SetAccountingIntegrationFlagNil() {
	o.AccountingIntegrationFlag.Set(nil)
}

// UnsetAccountingIntegrationFlag ensures that no value is present for AccountingIntegrationFlag, not even an explicit nil
func (o *TaxIntegration) UnsetAccountingIntegrationFlag() {
	o.AccountingIntegrationFlag.Unset()
}

// GetTaxLineFlag returns the TaxLineFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxIntegration) GetTaxLineFlag() bool {
	if o == nil || IsNil(o.TaxLineFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.TaxLineFlag.Get()
}

// GetTaxLineFlagOk returns a tuple with the TaxLineFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxIntegration) GetTaxLineFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxLineFlag.Get(), o.TaxLineFlag.IsSet()
}

// HasTaxLineFlag returns a boolean if a field has been set.
func (o *TaxIntegration) HasTaxLineFlag() bool {
	if o != nil && o.TaxLineFlag.IsSet() {
		return true
	}

	return false
}

// SetTaxLineFlag gets a reference to the given NullableBool and assigns it to the TaxLineFlag field.
func (o *TaxIntegration) SetTaxLineFlag(v bool) {
	o.TaxLineFlag.Set(&v)
}
// SetTaxLineFlagNil sets the value for TaxLineFlag to be an explicit nil
func (o *TaxIntegration) SetTaxLineFlagNil() {
	o.TaxLineFlag.Set(nil)
}

// UnsetTaxLineFlag ensures that no value is present for TaxLineFlag, not even an explicit nil
func (o *TaxIntegration) UnsetTaxLineFlag() {
	o.TaxLineFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TaxIntegration) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxIntegration) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TaxIntegration) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TaxIntegration) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TaxIntegration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxIntegrationType) {
		toSerialize["taxIntegrationType"] = o.TaxIntegrationType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.LicenseKey) {
		toSerialize["licenseKey"] = o.LicenseKey
	}
	if !IsNil(o.ServiceUrl) {
		toSerialize["serviceUrl"] = o.ServiceUrl
	}
	if !IsNil(o.CompanyCode) {
		toSerialize["companyCode"] = o.CompanyCode
	}
	if !IsNil(o.TimeTaxCode) {
		toSerialize["timeTaxCode"] = o.TimeTaxCode
	}
	if !IsNil(o.ExpenseTaxCode) {
		toSerialize["expenseTaxCode"] = o.ExpenseTaxCode
	}
	if !IsNil(o.ProductTaxCode) {
		toSerialize["productTaxCode"] = o.ProductTaxCode
	}
	if !IsNil(o.InvoiceAmountTaxCode) {
		toSerialize["invoiceAmountTaxCode"] = o.InvoiceAmountTaxCode
	}
	if o.EnabledFlag.IsSet() {
		toSerialize["enabledFlag"] = o.EnabledFlag.Get()
	}
	if o.CommitTransactionsFlag.IsSet() {
		toSerialize["commitTransactionsFlag"] = o.CommitTransactionsFlag.Get()
	}
	if o.SalesInvoiceFlag.IsSet() {
		toSerialize["salesInvoiceFlag"] = o.SalesInvoiceFlag.Get()
	}
	if !IsNil(o.FreightTaxCode) {
		toSerialize["freightTaxCode"] = o.FreightTaxCode
	}
	if o.AccountingIntegrationFlag.IsSet() {
		toSerialize["accountingIntegrationFlag"] = o.AccountingIntegrationFlag.Get()
	}
	if o.TaxLineFlag.IsSet() {
		toSerialize["taxLineFlag"] = o.TaxLineFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTaxIntegration struct {
	value *TaxIntegration
	isSet bool
}

func (v NullableTaxIntegration) Get() *TaxIntegration {
	return v.value
}

func (v *NullableTaxIntegration) Set(val *TaxIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxIntegration(val *TaxIntegration) *NullableTaxIntegration {
	return &NullableTaxIntegration{value: val, isSet: true}
}

func (v NullableTaxIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


