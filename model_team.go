/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Team type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Team{}

// Team struct for Team
type Team struct {
	Id *int32 `json:"id,omitempty"`
	Type NullableString `json:"type"`
	Member *MemberReference `json:"member,omitempty"`
	SalesTeam *SalesTeamReference `json:"salesTeam,omitempty"`
	CommissionPercent NullableInt32 `json:"commissionPercent,omitempty"`
	ReferralFlag NullableBool `json:"referralFlag,omitempty"`
	OpportunityId NullableInt32 `json:"opportunityId,omitempty"`
	ResponsibleFlag NullableBool `json:"responsibleFlag,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Team Team

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam(type_ NullableString) *Team {
	this := Team{}
	this.Type = type_
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Team) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Team) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Team) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Team) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *Team) SetType(v string) {
	o.Type.Set(&v)
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *Team) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *Team) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *Team) SetMember(v MemberReference) {
	o.Member = &v
}

// GetSalesTeam returns the SalesTeam field value if set, zero value otherwise.
func (o *Team) GetSalesTeam() SalesTeamReference {
	if o == nil || IsNil(o.SalesTeam) {
		var ret SalesTeamReference
		return ret
	}
	return *o.SalesTeam
}

// GetSalesTeamOk returns a tuple with the SalesTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetSalesTeamOk() (*SalesTeamReference, bool) {
	if o == nil || IsNil(o.SalesTeam) {
		return nil, false
	}
	return o.SalesTeam, true
}

// HasSalesTeam returns a boolean if a field has been set.
func (o *Team) HasSalesTeam() bool {
	if o != nil && !IsNil(o.SalesTeam) {
		return true
	}

	return false
}

// SetSalesTeam gets a reference to the given SalesTeamReference and assigns it to the SalesTeam field.
func (o *Team) SetSalesTeam(v SalesTeamReference) {
	o.SalesTeam = &v
}

// GetCommissionPercent returns the CommissionPercent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetCommissionPercent() int32 {
	if o == nil || IsNil(o.CommissionPercent.Get()) {
		var ret int32
		return ret
	}
	return *o.CommissionPercent.Get()
}

// GetCommissionPercentOk returns a tuple with the CommissionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetCommissionPercentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommissionPercent.Get(), o.CommissionPercent.IsSet()
}

// HasCommissionPercent returns a boolean if a field has been set.
func (o *Team) HasCommissionPercent() bool {
	if o != nil && o.CommissionPercent.IsSet() {
		return true
	}

	return false
}

// SetCommissionPercent gets a reference to the given NullableInt32 and assigns it to the CommissionPercent field.
func (o *Team) SetCommissionPercent(v int32) {
	o.CommissionPercent.Set(&v)
}
// SetCommissionPercentNil sets the value for CommissionPercent to be an explicit nil
func (o *Team) SetCommissionPercentNil() {
	o.CommissionPercent.Set(nil)
}

// UnsetCommissionPercent ensures that no value is present for CommissionPercent, not even an explicit nil
func (o *Team) UnsetCommissionPercent() {
	o.CommissionPercent.Unset()
}

// GetReferralFlag returns the ReferralFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetReferralFlag() bool {
	if o == nil || IsNil(o.ReferralFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ReferralFlag.Get()
}

// GetReferralFlagOk returns a tuple with the ReferralFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetReferralFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferralFlag.Get(), o.ReferralFlag.IsSet()
}

// HasReferralFlag returns a boolean if a field has been set.
func (o *Team) HasReferralFlag() bool {
	if o != nil && o.ReferralFlag.IsSet() {
		return true
	}

	return false
}

// SetReferralFlag gets a reference to the given NullableBool and assigns it to the ReferralFlag field.
func (o *Team) SetReferralFlag(v bool) {
	o.ReferralFlag.Set(&v)
}
// SetReferralFlagNil sets the value for ReferralFlag to be an explicit nil
func (o *Team) SetReferralFlagNil() {
	o.ReferralFlag.Set(nil)
}

// UnsetReferralFlag ensures that no value is present for ReferralFlag, not even an explicit nil
func (o *Team) UnsetReferralFlag() {
	o.ReferralFlag.Unset()
}

// GetOpportunityId returns the OpportunityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetOpportunityId() int32 {
	if o == nil || IsNil(o.OpportunityId.Get()) {
		var ret int32
		return ret
	}
	return *o.OpportunityId.Get()
}

// GetOpportunityIdOk returns a tuple with the OpportunityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetOpportunityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityId.Get(), o.OpportunityId.IsSet()
}

// HasOpportunityId returns a boolean if a field has been set.
func (o *Team) HasOpportunityId() bool {
	if o != nil && o.OpportunityId.IsSet() {
		return true
	}

	return false
}

// SetOpportunityId gets a reference to the given NullableInt32 and assigns it to the OpportunityId field.
func (o *Team) SetOpportunityId(v int32) {
	o.OpportunityId.Set(&v)
}
// SetOpportunityIdNil sets the value for OpportunityId to be an explicit nil
func (o *Team) SetOpportunityIdNil() {
	o.OpportunityId.Set(nil)
}

// UnsetOpportunityId ensures that no value is present for OpportunityId, not even an explicit nil
func (o *Team) UnsetOpportunityId() {
	o.OpportunityId.Unset()
}

// GetResponsibleFlag returns the ResponsibleFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Team) GetResponsibleFlag() bool {
	if o == nil || IsNil(o.ResponsibleFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ResponsibleFlag.Get()
}

// GetResponsibleFlagOk returns a tuple with the ResponsibleFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Team) GetResponsibleFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponsibleFlag.Get(), o.ResponsibleFlag.IsSet()
}

// HasResponsibleFlag returns a boolean if a field has been set.
func (o *Team) HasResponsibleFlag() bool {
	if o != nil && o.ResponsibleFlag.IsSet() {
		return true
	}

	return false
}

// SetResponsibleFlag gets a reference to the given NullableBool and assigns it to the ResponsibleFlag field.
func (o *Team) SetResponsibleFlag(v bool) {
	o.ResponsibleFlag.Set(&v)
}
// SetResponsibleFlagNil sets the value for ResponsibleFlag to be an explicit nil
func (o *Team) SetResponsibleFlagNil() {
	o.ResponsibleFlag.Set(nil)
}

// UnsetResponsibleFlag ensures that no value is present for ResponsibleFlag, not even an explicit nil
func (o *Team) UnsetResponsibleFlag() {
	o.ResponsibleFlag.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Team) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Team) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Team) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Team) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type.Get()
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.SalesTeam) {
		toSerialize["salesTeam"] = o.SalesTeam
	}
	if o.CommissionPercent.IsSet() {
		toSerialize["commissionPercent"] = o.CommissionPercent.Get()
	}
	if o.ReferralFlag.IsSet() {
		toSerialize["referralFlag"] = o.ReferralFlag.Get()
	}
	if o.OpportunityId.IsSet() {
		toSerialize["opportunityId"] = o.OpportunityId.Get()
	}
	if o.ResponsibleFlag.IsSet() {
		toSerialize["responsibleFlag"] = o.ResponsibleFlag.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Team) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeam := _Team{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeam)

	if err != nil {
		return err
	}

	*o = Team(varTeam)

	return err
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


