/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TemplatePhase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplatePhase{}

// TemplatePhase struct for TemplatePhase
type TemplatePhase struct {
	ParentPhase *ProjectTemplatePhaseReference `json:"parentPhase,omitempty"`
	Id *int32 `json:"id,omitempty"`
	TemplateId NullableInt32 `json:"templateId,omitempty"`
	Description *string `json:"description,omitempty"`
	Notes *string `json:"notes,omitempty"`
	MarkAsMilestoneFlag NullableBool `json:"markAsMilestoneFlag,omitempty"`
	BillPhaseSeparately NullableBool `json:"billPhaseSeparately,omitempty"`
	WbsCode *string `json:"wbsCode,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewTemplatePhase instantiates a new TemplatePhase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplatePhase() *TemplatePhase {
	this := TemplatePhase{}
	return &this
}

// NewTemplatePhaseWithDefaults instantiates a new TemplatePhase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplatePhaseWithDefaults() *TemplatePhase {
	this := TemplatePhase{}
	return &this
}

// GetParentPhase returns the ParentPhase field value if set, zero value otherwise.
func (o *TemplatePhase) GetParentPhase() ProjectTemplatePhaseReference {
	if o == nil || IsNil(o.ParentPhase) {
		var ret ProjectTemplatePhaseReference
		return ret
	}
	return *o.ParentPhase
}

// GetParentPhaseOk returns a tuple with the ParentPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplatePhase) GetParentPhaseOk() (*ProjectTemplatePhaseReference, bool) {
	if o == nil || IsNil(o.ParentPhase) {
		return nil, false
	}
	return o.ParentPhase, true
}

// HasParentPhase returns a boolean if a field has been set.
func (o *TemplatePhase) HasParentPhase() bool {
	if o != nil && !IsNil(o.ParentPhase) {
		return true
	}

	return false
}

// SetParentPhase gets a reference to the given ProjectTemplatePhaseReference and assigns it to the ParentPhase field.
func (o *TemplatePhase) SetParentPhase(v ProjectTemplatePhaseReference) {
	o.ParentPhase = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TemplatePhase) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplatePhase) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TemplatePhase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TemplatePhase) SetId(v int32) {
	o.Id = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TemplatePhase) GetTemplateId() int32 {
	if o == nil || IsNil(o.TemplateId.Get()) {
		var ret int32
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplatePhase) GetTemplateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *TemplatePhase) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableInt32 and assigns it to the TemplateId field.
func (o *TemplatePhase) SetTemplateId(v int32) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *TemplatePhase) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *TemplatePhase) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplatePhase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplatePhase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplatePhase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TemplatePhase) SetDescription(v string) {
	o.Description = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TemplatePhase) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplatePhase) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TemplatePhase) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TemplatePhase) SetNotes(v string) {
	o.Notes = &v
}

// GetMarkAsMilestoneFlag returns the MarkAsMilestoneFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TemplatePhase) GetMarkAsMilestoneFlag() bool {
	if o == nil || IsNil(o.MarkAsMilestoneFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkAsMilestoneFlag.Get()
}

// GetMarkAsMilestoneFlagOk returns a tuple with the MarkAsMilestoneFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplatePhase) GetMarkAsMilestoneFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkAsMilestoneFlag.Get(), o.MarkAsMilestoneFlag.IsSet()
}

// HasMarkAsMilestoneFlag returns a boolean if a field has been set.
func (o *TemplatePhase) HasMarkAsMilestoneFlag() bool {
	if o != nil && o.MarkAsMilestoneFlag.IsSet() {
		return true
	}

	return false
}

// SetMarkAsMilestoneFlag gets a reference to the given NullableBool and assigns it to the MarkAsMilestoneFlag field.
func (o *TemplatePhase) SetMarkAsMilestoneFlag(v bool) {
	o.MarkAsMilestoneFlag.Set(&v)
}
// SetMarkAsMilestoneFlagNil sets the value for MarkAsMilestoneFlag to be an explicit nil
func (o *TemplatePhase) SetMarkAsMilestoneFlagNil() {
	o.MarkAsMilestoneFlag.Set(nil)
}

// UnsetMarkAsMilestoneFlag ensures that no value is present for MarkAsMilestoneFlag, not even an explicit nil
func (o *TemplatePhase) UnsetMarkAsMilestoneFlag() {
	o.MarkAsMilestoneFlag.Unset()
}

// GetBillPhaseSeparately returns the BillPhaseSeparately field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TemplatePhase) GetBillPhaseSeparately() bool {
	if o == nil || IsNil(o.BillPhaseSeparately.Get()) {
		var ret bool
		return ret
	}
	return *o.BillPhaseSeparately.Get()
}

// GetBillPhaseSeparatelyOk returns a tuple with the BillPhaseSeparately field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplatePhase) GetBillPhaseSeparatelyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillPhaseSeparately.Get(), o.BillPhaseSeparately.IsSet()
}

// HasBillPhaseSeparately returns a boolean if a field has been set.
func (o *TemplatePhase) HasBillPhaseSeparately() bool {
	if o != nil && o.BillPhaseSeparately.IsSet() {
		return true
	}

	return false
}

// SetBillPhaseSeparately gets a reference to the given NullableBool and assigns it to the BillPhaseSeparately field.
func (o *TemplatePhase) SetBillPhaseSeparately(v bool) {
	o.BillPhaseSeparately.Set(&v)
}
// SetBillPhaseSeparatelyNil sets the value for BillPhaseSeparately to be an explicit nil
func (o *TemplatePhase) SetBillPhaseSeparatelyNil() {
	o.BillPhaseSeparately.Set(nil)
}

// UnsetBillPhaseSeparately ensures that no value is present for BillPhaseSeparately, not even an explicit nil
func (o *TemplatePhase) UnsetBillPhaseSeparately() {
	o.BillPhaseSeparately.Unset()
}

// GetWbsCode returns the WbsCode field value if set, zero value otherwise.
func (o *TemplatePhase) GetWbsCode() string {
	if o == nil || IsNil(o.WbsCode) {
		var ret string
		return ret
	}
	return *o.WbsCode
}

// GetWbsCodeOk returns a tuple with the WbsCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplatePhase) GetWbsCodeOk() (*string, bool) {
	if o == nil || IsNil(o.WbsCode) {
		return nil, false
	}
	return o.WbsCode, true
}

// HasWbsCode returns a boolean if a field has been set.
func (o *TemplatePhase) HasWbsCode() bool {
	if o != nil && !IsNil(o.WbsCode) {
		return true
	}

	return false
}

// SetWbsCode gets a reference to the given string and assigns it to the WbsCode field.
func (o *TemplatePhase) SetWbsCode(v string) {
	o.WbsCode = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TemplatePhase) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplatePhase) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TemplatePhase) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TemplatePhase) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TemplatePhase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplatePhase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentPhase) {
		toSerialize["parentPhase"] = o.ParentPhase
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.TemplateId.IsSet() {
		toSerialize["templateId"] = o.TemplateId.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.MarkAsMilestoneFlag.IsSet() {
		toSerialize["markAsMilestoneFlag"] = o.MarkAsMilestoneFlag.Get()
	}
	if o.BillPhaseSeparately.IsSet() {
		toSerialize["billPhaseSeparately"] = o.BillPhaseSeparately.Get()
	}
	if !IsNil(o.WbsCode) {
		toSerialize["wbsCode"] = o.WbsCode
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTemplatePhase struct {
	value *TemplatePhase
	isSet bool
}

func (v NullableTemplatePhase) Get() *TemplatePhase {
	return v.value
}

func (v *NullableTemplatePhase) Set(val *TemplatePhase) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplatePhase) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplatePhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplatePhase(val *TemplatePhase) *NullableTemplatePhase {
	return &NullableTemplatePhase{value: val, isSet: true}
}

func (v NullableTemplatePhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplatePhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


