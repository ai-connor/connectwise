/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Ticket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ticket{}

// Ticket struct for Ticket
type Ticket struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Summary string `json:"summary"`
	RecordType NullableString `json:"recordType,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	Status *ServiceStatusReference `json:"status,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	WorkType *WorkTypeReference `json:"workType,omitempty"`
	Company CompanyReference `json:"company"`
	Site *SiteReference `json:"site,omitempty"`
	//  Max length: 50;
	SiteName *string `json:"siteName,omitempty"`
	//  Max length: 50;
	AddressLine1 *string `json:"addressLine1,omitempty"`
	//  Max length: 50;
	AddressLine2 *string `json:"addressLine2,omitempty"`
	//  Max length: 50;
	City *string `json:"city,omitempty"`
	//  Max length: 50;
	StateIdentifier *string `json:"stateIdentifier,omitempty"`
	//  Max length: 12;
	Zip *string `json:"zip,omitempty"`
	Country *CountryReference `json:"country,omitempty"`
	Contact *ContactReference `json:"contact,omitempty"`
	//  Max length: 62;
	ContactName *string `json:"contactName,omitempty"`
	//  Max length: 20;
	ContactPhoneNumber *string `json:"contactPhoneNumber,omitempty"`
	//  Max length: 15;
	ContactPhoneExtension *string `json:"contactPhoneExtension,omitempty"`
	//  Max length: 250;
	ContactEmailAddress *string `json:"contactEmailAddress,omitempty"`
	Type *ServiceTypeReference `json:"type,omitempty"`
	SubType *ServiceSubTypeReference `json:"subType,omitempty"`
	Item *ServiceItemReference `json:"item,omitempty"`
	Team *ServiceTeamReference `json:"team,omitempty"`
	Owner *MemberReference `json:"owner,omitempty"`
	Priority *PriorityReference `json:"priority,omitempty"`
	ServiceLocation *ServiceLocationReference `json:"serviceLocation,omitempty"`
	Source *ServiceSourceReference `json:"source,omitempty"`
	RequiredDate *time.Time `json:"requiredDate,omitempty"`
	BudgetHours NullableFloat64 `json:"budgetHours,omitempty"`
	Opportunity *OpportunityReference `json:"opportunity,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	AgreementType *string `json:"agreementType,omitempty"`
	//  Required On Updates;
	Severity NullableString `json:"severity,omitempty"`
	//  Required On Updates;
	Impact NullableString `json:"impact,omitempty"`
	//  Max length: 100;
	ExternalXRef *string `json:"externalXRef,omitempty"`
	//  Max length: 50;
	PoNumber *string `json:"poNumber,omitempty"`
	KnowledgeBaseCategoryId NullableInt32 `json:"knowledgeBaseCategoryId,omitempty"`
	KnowledgeBaseSubCategoryId NullableInt32 `json:"knowledgeBaseSubCategoryId,omitempty"`
	AllowAllClientsPortalView NullableBool `json:"allowAllClientsPortalView,omitempty"`
	CustomerUpdatedFlag NullableBool `json:"customerUpdatedFlag,omitempty"`
	AutomaticEmailContactFlag NullableBool `json:"automaticEmailContactFlag,omitempty"`
	AutomaticEmailResourceFlag NullableBool `json:"automaticEmailResourceFlag,omitempty"`
	AutomaticEmailCcFlag NullableBool `json:"automaticEmailCcFlag,omitempty"`
	//  Max length: 1000;
	AutomaticEmailCc *string `json:"automaticEmailCc,omitempty"`
	// Only available for POST, will not be returned in the response.
	InitialDescription *string `json:"initialDescription,omitempty"`
	// Only available for POST, will not be returned in the response.
	InitialInternalAnalysis *string `json:"initialInternalAnalysis,omitempty"`
	// Only available for POST, will not be returned in the response.
	InitialResolution *string `json:"initialResolution,omitempty"`
	InitialDescriptionFrom *string `json:"initialDescriptionFrom,omitempty"`
	ContactEmailLookup *string `json:"contactEmailLookup,omitempty"`
	// Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True).
	ProcessNotifications NullableBool `json:"processNotifications,omitempty"`
	SkipCallback NullableBool `json:"skipCallback,omitempty"`
	ClosedDate *string `json:"closedDate,omitempty"`
	ClosedBy *string `json:"closedBy,omitempty"`
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	ActualHours NullableFloat64 `json:"actualHours,omitempty"`
	Approved NullableBool `json:"approved,omitempty"`
	EstimatedExpenseCost NullableFloat64 `json:"estimatedExpenseCost,omitempty"`
	EstimatedExpenseRevenue NullableFloat64 `json:"estimatedExpenseRevenue,omitempty"`
	EstimatedProductCost NullableFloat64 `json:"estimatedProductCost,omitempty"`
	EstimatedProductRevenue NullableFloat64 `json:"estimatedProductRevenue,omitempty"`
	EstimatedTimeCost NullableFloat64 `json:"estimatedTimeCost,omitempty"`
	EstimatedTimeRevenue NullableFloat64 `json:"estimatedTimeRevenue,omitempty"`
	BillingMethod NullableString `json:"billingMethod,omitempty"`
	BillingAmount NullableFloat64 `json:"billingAmount,omitempty"`
	HourlyRate NullableFloat64 `json:"hourlyRate,omitempty"`
	SubBillingMethod NullableString `json:"subBillingMethod,omitempty"`
	SubBillingAmount NullableFloat64 `json:"subBillingAmount,omitempty"`
	SubDateAccepted *string `json:"subDateAccepted,omitempty"`
	DateResolved *string `json:"dateResolved,omitempty"`
	DateResplan *string `json:"dateResplan,omitempty"`
	DateResponded *string `json:"dateResponded,omitempty"`
	ResolveMinutes NullableInt32 `json:"resolveMinutes,omitempty"`
	ResPlanMinutes NullableInt32 `json:"resPlanMinutes,omitempty"`
	RespondMinutes NullableInt32 `json:"respondMinutes,omitempty"`
	IsInSla NullableBool `json:"isInSla,omitempty"`
	KnowledgeBaseLinkId NullableInt32 `json:"knowledgeBaseLinkId,omitempty"`
	Resources *string `json:"resources,omitempty"`
	ParentTicketId NullableInt32 `json:"parentTicketId,omitempty"`
	HasChildTicket NullableBool `json:"hasChildTicket,omitempty"`
	HasMergedChildTicketFlag NullableBool `json:"hasMergedChildTicketFlag,omitempty"`
	KnowledgeBaseLinkType NullableString `json:"knowledgeBaseLinkType,omitempty"`
	BillTime NullableString `json:"billTime,omitempty"`
	BillExpenses NullableString `json:"billExpenses,omitempty"`
	BillProducts NullableString `json:"billProducts,omitempty"`
	PredecessorType NullableString `json:"predecessorType,omitempty"`
	PredecessorId NullableInt32 `json:"predecessorId,omitempty"`
	PredecessorClosedFlag NullableBool `json:"predecessorClosedFlag,omitempty"`
	LagDays NullableInt32 `json:"lagDays,omitempty"`
	LagNonworkingDaysFlag NullableBool `json:"lagNonworkingDaysFlag,omitempty"`
	EstimatedStartDate *time.Time `json:"estimatedStartDate,omitempty"`
	Duration NullableInt32 `json:"duration,omitempty"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	MobileGuid NullableString `json:"mobileGuid,omitempty"`
	Sla *SLAReference `json:"sla,omitempty"`
	SlaStatus *string `json:"slaStatus,omitempty"`
	RequestForChangeFlag NullableBool `json:"requestForChangeFlag,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	MergedParentTicket *TicketReference `json:"mergedParentTicket,omitempty"`
	IntegratorTags []string `json:"integratorTags,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	EscalationStartDateUTC *string `json:"escalationStartDateUTC,omitempty"`
	EscalationLevel NullableInt32 `json:"escalationLevel,omitempty"`
	MinutesBeforeWaiting NullableInt32 `json:"minutesBeforeWaiting,omitempty"`
	RespondedSkippedMinutes NullableInt32 `json:"respondedSkippedMinutes,omitempty"`
	ResplanSkippedMinutes NullableInt32 `json:"resplanSkippedMinutes,omitempty"`
	RespondedHours NullableFloat64 `json:"respondedHours,omitempty"`
	RespondedBy *string `json:"respondedBy,omitempty"`
	ResplanHours NullableFloat64 `json:"resplanHours,omitempty"`
	ResplanBy *string `json:"resplanBy,omitempty"`
	ResolutionHours NullableFloat64 `json:"resolutionHours,omitempty"`
	ResolvedBy *string `json:"resolvedBy,omitempty"`
	MinutesWaiting NullableInt32 `json:"minutesWaiting,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _Ticket Ticket

// NewTicket instantiates a new Ticket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicket(summary string, company CompanyReference) *Ticket {
	this := Ticket{}
	this.Summary = summary
	this.Company = company
	return &this
}

// NewTicketWithDefaults instantiates a new Ticket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketWithDefaults() *Ticket {
	this := Ticket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Ticket) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ticket) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Ticket) SetId(v int32) {
	o.Id = &v
}

// GetSummary returns the Summary field value
func (o *Ticket) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Ticket) SetSummary(v string) {
	o.Summary = v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetRecordType() string {
	if o == nil || IsNil(o.RecordType.Get()) {
		var ret string
		return ret
	}
	return *o.RecordType.Get()
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordType.Get(), o.RecordType.IsSet()
}

// HasRecordType returns a boolean if a field has been set.
func (o *Ticket) HasRecordType() bool {
	if o != nil && o.RecordType.IsSet() {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given NullableString and assigns it to the RecordType field.
func (o *Ticket) SetRecordType(v string) {
	o.RecordType.Set(&v)
}
// SetRecordTypeNil sets the value for RecordType to be an explicit nil
func (o *Ticket) SetRecordTypeNil() {
	o.RecordType.Set(nil)
}

// UnsetRecordType ensures that no value is present for RecordType, not even an explicit nil
func (o *Ticket) UnsetRecordType() {
	o.RecordType.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *Ticket) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *Ticket) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *Ticket) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Ticket) GetStatus() ServiceStatusReference {
	if o == nil || IsNil(o.Status) {
		var ret ServiceStatusReference
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetStatusOk() (*ServiceStatusReference, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Ticket) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ServiceStatusReference and assigns it to the Status field.
func (o *Ticket) SetStatus(v ServiceStatusReference) {
	o.Status = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *Ticket) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *Ticket) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *Ticket) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *Ticket) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *Ticket) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *Ticket) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetCompany returns the Company field value
func (o *Ticket) GetCompany() CompanyReference {
	if o == nil {
		var ret CompanyReference
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Ticket) SetCompany(v CompanyReference) {
	o.Company = v
}

// GetSite returns the Site field value if set, zero value otherwise.
func (o *Ticket) GetSite() SiteReference {
	if o == nil || IsNil(o.Site) {
		var ret SiteReference
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.Site) {
		return nil, false
	}
	return o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Ticket) HasSite() bool {
	if o != nil && !IsNil(o.Site) {
		return true
	}

	return false
}

// SetSite gets a reference to the given SiteReference and assigns it to the Site field.
func (o *Ticket) SetSite(v SiteReference) {
	o.Site = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *Ticket) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *Ticket) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *Ticket) SetSiteName(v string) {
	o.SiteName = &v
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *Ticket) GetAddressLine1() string {
	if o == nil || IsNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetAddressLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine1) {
		return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *Ticket) HasAddressLine1() bool {
	if o != nil && !IsNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *Ticket) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *Ticket) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *Ticket) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *Ticket) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Ticket) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Ticket) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Ticket) SetCity(v string) {
	o.City = &v
}

// GetStateIdentifier returns the StateIdentifier field value if set, zero value otherwise.
func (o *Ticket) GetStateIdentifier() string {
	if o == nil || IsNil(o.StateIdentifier) {
		var ret string
		return ret
	}
	return *o.StateIdentifier
}

// GetStateIdentifierOk returns a tuple with the StateIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetStateIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.StateIdentifier) {
		return nil, false
	}
	return o.StateIdentifier, true
}

// HasStateIdentifier returns a boolean if a field has been set.
func (o *Ticket) HasStateIdentifier() bool {
	if o != nil && !IsNil(o.StateIdentifier) {
		return true
	}

	return false
}

// SetStateIdentifier gets a reference to the given string and assigns it to the StateIdentifier field.
func (o *Ticket) SetStateIdentifier(v string) {
	o.StateIdentifier = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *Ticket) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *Ticket) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *Ticket) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Ticket) GetCountry() CountryReference {
	if o == nil || IsNil(o.Country) {
		var ret CountryReference
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCountryOk() (*CountryReference, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Ticket) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given CountryReference and assigns it to the Country field.
func (o *Ticket) SetCountry(v CountryReference) {
	o.Country = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Ticket) GetContact() ContactReference {
	if o == nil || IsNil(o.Contact) {
		var ret ContactReference
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetContactOk() (*ContactReference, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Ticket) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given ContactReference and assigns it to the Contact field.
func (o *Ticket) SetContact(v ContactReference) {
	o.Contact = &v
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *Ticket) GetContactName() string {
	if o == nil || IsNil(o.ContactName) {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContactName) {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *Ticket) HasContactName() bool {
	if o != nil && !IsNil(o.ContactName) {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *Ticket) SetContactName(v string) {
	o.ContactName = &v
}

// GetContactPhoneNumber returns the ContactPhoneNumber field value if set, zero value otherwise.
func (o *Ticket) GetContactPhoneNumber() string {
	if o == nil || IsNil(o.ContactPhoneNumber) {
		var ret string
		return ret
	}
	return *o.ContactPhoneNumber
}

// GetContactPhoneNumberOk returns a tuple with the ContactPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetContactPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ContactPhoneNumber) {
		return nil, false
	}
	return o.ContactPhoneNumber, true
}

// HasContactPhoneNumber returns a boolean if a field has been set.
func (o *Ticket) HasContactPhoneNumber() bool {
	if o != nil && !IsNil(o.ContactPhoneNumber) {
		return true
	}

	return false
}

// SetContactPhoneNumber gets a reference to the given string and assigns it to the ContactPhoneNumber field.
func (o *Ticket) SetContactPhoneNumber(v string) {
	o.ContactPhoneNumber = &v
}

// GetContactPhoneExtension returns the ContactPhoneExtension field value if set, zero value otherwise.
func (o *Ticket) GetContactPhoneExtension() string {
	if o == nil || IsNil(o.ContactPhoneExtension) {
		var ret string
		return ret
	}
	return *o.ContactPhoneExtension
}

// GetContactPhoneExtensionOk returns a tuple with the ContactPhoneExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetContactPhoneExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.ContactPhoneExtension) {
		return nil, false
	}
	return o.ContactPhoneExtension, true
}

// HasContactPhoneExtension returns a boolean if a field has been set.
func (o *Ticket) HasContactPhoneExtension() bool {
	if o != nil && !IsNil(o.ContactPhoneExtension) {
		return true
	}

	return false
}

// SetContactPhoneExtension gets a reference to the given string and assigns it to the ContactPhoneExtension field.
func (o *Ticket) SetContactPhoneExtension(v string) {
	o.ContactPhoneExtension = &v
}

// GetContactEmailAddress returns the ContactEmailAddress field value if set, zero value otherwise.
func (o *Ticket) GetContactEmailAddress() string {
	if o == nil || IsNil(o.ContactEmailAddress) {
		var ret string
		return ret
	}
	return *o.ContactEmailAddress
}

// GetContactEmailAddressOk returns a tuple with the ContactEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetContactEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmailAddress) {
		return nil, false
	}
	return o.ContactEmailAddress, true
}

// HasContactEmailAddress returns a boolean if a field has been set.
func (o *Ticket) HasContactEmailAddress() bool {
	if o != nil && !IsNil(o.ContactEmailAddress) {
		return true
	}

	return false
}

// SetContactEmailAddress gets a reference to the given string and assigns it to the ContactEmailAddress field.
func (o *Ticket) SetContactEmailAddress(v string) {
	o.ContactEmailAddress = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Ticket) GetType() ServiceTypeReference {
	if o == nil || IsNil(o.Type) {
		var ret ServiceTypeReference
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetTypeOk() (*ServiceTypeReference, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Ticket) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceTypeReference and assigns it to the Type field.
func (o *Ticket) SetType(v ServiceTypeReference) {
	o.Type = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *Ticket) GetSubType() ServiceSubTypeReference {
	if o == nil || IsNil(o.SubType) {
		var ret ServiceSubTypeReference
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSubTypeOk() (*ServiceSubTypeReference, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *Ticket) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given ServiceSubTypeReference and assigns it to the SubType field.
func (o *Ticket) SetSubType(v ServiceSubTypeReference) {
	o.SubType = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *Ticket) GetItem() ServiceItemReference {
	if o == nil || IsNil(o.Item) {
		var ret ServiceItemReference
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetItemOk() (*ServiceItemReference, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *Ticket) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given ServiceItemReference and assigns it to the Item field.
func (o *Ticket) SetItem(v ServiceItemReference) {
	o.Item = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *Ticket) GetTeam() ServiceTeamReference {
	if o == nil || IsNil(o.Team) {
		var ret ServiceTeamReference
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetTeamOk() (*ServiceTeamReference, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *Ticket) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given ServiceTeamReference and assigns it to the Team field.
func (o *Ticket) SetTeam(v ServiceTeamReference) {
	o.Team = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Ticket) GetOwner() MemberReference {
	if o == nil || IsNil(o.Owner) {
		var ret MemberReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetOwnerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Ticket) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given MemberReference and assigns it to the Owner field.
func (o *Ticket) SetOwner(v MemberReference) {
	o.Owner = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Ticket) GetPriority() PriorityReference {
	if o == nil || IsNil(o.Priority) {
		var ret PriorityReference
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetPriorityOk() (*PriorityReference, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Ticket) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given PriorityReference and assigns it to the Priority field.
func (o *Ticket) SetPriority(v PriorityReference) {
	o.Priority = &v
}

// GetServiceLocation returns the ServiceLocation field value if set, zero value otherwise.
func (o *Ticket) GetServiceLocation() ServiceLocationReference {
	if o == nil || IsNil(o.ServiceLocation) {
		var ret ServiceLocationReference
		return ret
	}
	return *o.ServiceLocation
}

// GetServiceLocationOk returns a tuple with the ServiceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetServiceLocationOk() (*ServiceLocationReference, bool) {
	if o == nil || IsNil(o.ServiceLocation) {
		return nil, false
	}
	return o.ServiceLocation, true
}

// HasServiceLocation returns a boolean if a field has been set.
func (o *Ticket) HasServiceLocation() bool {
	if o != nil && !IsNil(o.ServiceLocation) {
		return true
	}

	return false
}

// SetServiceLocation gets a reference to the given ServiceLocationReference and assigns it to the ServiceLocation field.
func (o *Ticket) SetServiceLocation(v ServiceLocationReference) {
	o.ServiceLocation = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Ticket) GetSource() ServiceSourceReference {
	if o == nil || IsNil(o.Source) {
		var ret ServiceSourceReference
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSourceOk() (*ServiceSourceReference, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Ticket) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ServiceSourceReference and assigns it to the Source field.
func (o *Ticket) SetSource(v ServiceSourceReference) {
	o.Source = &v
}

// GetRequiredDate returns the RequiredDate field value if set, zero value otherwise.
func (o *Ticket) GetRequiredDate() time.Time {
	if o == nil || IsNil(o.RequiredDate) {
		var ret time.Time
		return ret
	}
	return *o.RequiredDate
}

// GetRequiredDateOk returns a tuple with the RequiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetRequiredDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RequiredDate) {
		return nil, false
	}
	return o.RequiredDate, true
}

// HasRequiredDate returns a boolean if a field has been set.
func (o *Ticket) HasRequiredDate() bool {
	if o != nil && !IsNil(o.RequiredDate) {
		return true
	}

	return false
}

// SetRequiredDate gets a reference to the given time.Time and assigns it to the RequiredDate field.
func (o *Ticket) SetRequiredDate(v time.Time) {
	o.RequiredDate = &v
}

// GetBudgetHours returns the BudgetHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetBudgetHours() float64 {
	if o == nil || IsNil(o.BudgetHours.Get()) {
		var ret float64
		return ret
	}
	return *o.BudgetHours.Get()
}

// GetBudgetHoursOk returns a tuple with the BudgetHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetBudgetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BudgetHours.Get(), o.BudgetHours.IsSet()
}

// HasBudgetHours returns a boolean if a field has been set.
func (o *Ticket) HasBudgetHours() bool {
	if o != nil && o.BudgetHours.IsSet() {
		return true
	}

	return false
}

// SetBudgetHours gets a reference to the given NullableFloat64 and assigns it to the BudgetHours field.
func (o *Ticket) SetBudgetHours(v float64) {
	o.BudgetHours.Set(&v)
}
// SetBudgetHoursNil sets the value for BudgetHours to be an explicit nil
func (o *Ticket) SetBudgetHoursNil() {
	o.BudgetHours.Set(nil)
}

// UnsetBudgetHours ensures that no value is present for BudgetHours, not even an explicit nil
func (o *Ticket) UnsetBudgetHours() {
	o.BudgetHours.Unset()
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *Ticket) GetOpportunity() OpportunityReference {
	if o == nil || IsNil(o.Opportunity) {
		var ret OpportunityReference
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetOpportunityOk() (*OpportunityReference, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *Ticket) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given OpportunityReference and assigns it to the Opportunity field.
func (o *Ticket) SetOpportunity(v OpportunityReference) {
	o.Opportunity = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *Ticket) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *Ticket) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *Ticket) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *Ticket) GetAgreementType() string {
	if o == nil || IsNil(o.AgreementType) {
		var ret string
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetAgreementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *Ticket) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given string and assigns it to the AgreementType field.
func (o *Ticket) SetAgreementType(v string) {
	o.AgreementType = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetSeverity() string {
	if o == nil || IsNil(o.Severity.Get()) {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *Ticket) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *Ticket) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *Ticket) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *Ticket) UnsetSeverity() {
	o.Severity.Unset()
}

// GetImpact returns the Impact field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetImpact() string {
	if o == nil || IsNil(o.Impact.Get()) {
		var ret string
		return ret
	}
	return *o.Impact.Get()
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetImpactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Impact.Get(), o.Impact.IsSet()
}

// HasImpact returns a boolean if a field has been set.
func (o *Ticket) HasImpact() bool {
	if o != nil && o.Impact.IsSet() {
		return true
	}

	return false
}

// SetImpact gets a reference to the given NullableString and assigns it to the Impact field.
func (o *Ticket) SetImpact(v string) {
	o.Impact.Set(&v)
}
// SetImpactNil sets the value for Impact to be an explicit nil
func (o *Ticket) SetImpactNil() {
	o.Impact.Set(nil)
}

// UnsetImpact ensures that no value is present for Impact, not even an explicit nil
func (o *Ticket) UnsetImpact() {
	o.Impact.Unset()
}

// GetExternalXRef returns the ExternalXRef field value if set, zero value otherwise.
func (o *Ticket) GetExternalXRef() string {
	if o == nil || IsNil(o.ExternalXRef) {
		var ret string
		return ret
	}
	return *o.ExternalXRef
}

// GetExternalXRefOk returns a tuple with the ExternalXRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetExternalXRefOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalXRef) {
		return nil, false
	}
	return o.ExternalXRef, true
}

// HasExternalXRef returns a boolean if a field has been set.
func (o *Ticket) HasExternalXRef() bool {
	if o != nil && !IsNil(o.ExternalXRef) {
		return true
	}

	return false
}

// SetExternalXRef gets a reference to the given string and assigns it to the ExternalXRef field.
func (o *Ticket) SetExternalXRef(v string) {
	o.ExternalXRef = &v
}

// GetPoNumber returns the PoNumber field value if set, zero value otherwise.
func (o *Ticket) GetPoNumber() string {
	if o == nil || IsNil(o.PoNumber) {
		var ret string
		return ret
	}
	return *o.PoNumber
}

// GetPoNumberOk returns a tuple with the PoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetPoNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PoNumber) {
		return nil, false
	}
	return o.PoNumber, true
}

// HasPoNumber returns a boolean if a field has been set.
func (o *Ticket) HasPoNumber() bool {
	if o != nil && !IsNil(o.PoNumber) {
		return true
	}

	return false
}

// SetPoNumber gets a reference to the given string and assigns it to the PoNumber field.
func (o *Ticket) SetPoNumber(v string) {
	o.PoNumber = &v
}

// GetKnowledgeBaseCategoryId returns the KnowledgeBaseCategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetKnowledgeBaseCategoryId() int32 {
	if o == nil || IsNil(o.KnowledgeBaseCategoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.KnowledgeBaseCategoryId.Get()
}

// GetKnowledgeBaseCategoryIdOk returns a tuple with the KnowledgeBaseCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetKnowledgeBaseCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseCategoryId.Get(), o.KnowledgeBaseCategoryId.IsSet()
}

// HasKnowledgeBaseCategoryId returns a boolean if a field has been set.
func (o *Ticket) HasKnowledgeBaseCategoryId() bool {
	if o != nil && o.KnowledgeBaseCategoryId.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseCategoryId gets a reference to the given NullableInt32 and assigns it to the KnowledgeBaseCategoryId field.
func (o *Ticket) SetKnowledgeBaseCategoryId(v int32) {
	o.KnowledgeBaseCategoryId.Set(&v)
}
// SetKnowledgeBaseCategoryIdNil sets the value for KnowledgeBaseCategoryId to be an explicit nil
func (o *Ticket) SetKnowledgeBaseCategoryIdNil() {
	o.KnowledgeBaseCategoryId.Set(nil)
}

// UnsetKnowledgeBaseCategoryId ensures that no value is present for KnowledgeBaseCategoryId, not even an explicit nil
func (o *Ticket) UnsetKnowledgeBaseCategoryId() {
	o.KnowledgeBaseCategoryId.Unset()
}

// GetKnowledgeBaseSubCategoryId returns the KnowledgeBaseSubCategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetKnowledgeBaseSubCategoryId() int32 {
	if o == nil || IsNil(o.KnowledgeBaseSubCategoryId.Get()) {
		var ret int32
		return ret
	}
	return *o.KnowledgeBaseSubCategoryId.Get()
}

// GetKnowledgeBaseSubCategoryIdOk returns a tuple with the KnowledgeBaseSubCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetKnowledgeBaseSubCategoryIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseSubCategoryId.Get(), o.KnowledgeBaseSubCategoryId.IsSet()
}

// HasKnowledgeBaseSubCategoryId returns a boolean if a field has been set.
func (o *Ticket) HasKnowledgeBaseSubCategoryId() bool {
	if o != nil && o.KnowledgeBaseSubCategoryId.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseSubCategoryId gets a reference to the given NullableInt32 and assigns it to the KnowledgeBaseSubCategoryId field.
func (o *Ticket) SetKnowledgeBaseSubCategoryId(v int32) {
	o.KnowledgeBaseSubCategoryId.Set(&v)
}
// SetKnowledgeBaseSubCategoryIdNil sets the value for KnowledgeBaseSubCategoryId to be an explicit nil
func (o *Ticket) SetKnowledgeBaseSubCategoryIdNil() {
	o.KnowledgeBaseSubCategoryId.Set(nil)
}

// UnsetKnowledgeBaseSubCategoryId ensures that no value is present for KnowledgeBaseSubCategoryId, not even an explicit nil
func (o *Ticket) UnsetKnowledgeBaseSubCategoryId() {
	o.KnowledgeBaseSubCategoryId.Unset()
}

// GetAllowAllClientsPortalView returns the AllowAllClientsPortalView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetAllowAllClientsPortalView() bool {
	if o == nil || IsNil(o.AllowAllClientsPortalView.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowAllClientsPortalView.Get()
}

// GetAllowAllClientsPortalViewOk returns a tuple with the AllowAllClientsPortalView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetAllowAllClientsPortalViewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowAllClientsPortalView.Get(), o.AllowAllClientsPortalView.IsSet()
}

// HasAllowAllClientsPortalView returns a boolean if a field has been set.
func (o *Ticket) HasAllowAllClientsPortalView() bool {
	if o != nil && o.AllowAllClientsPortalView.IsSet() {
		return true
	}

	return false
}

// SetAllowAllClientsPortalView gets a reference to the given NullableBool and assigns it to the AllowAllClientsPortalView field.
func (o *Ticket) SetAllowAllClientsPortalView(v bool) {
	o.AllowAllClientsPortalView.Set(&v)
}
// SetAllowAllClientsPortalViewNil sets the value for AllowAllClientsPortalView to be an explicit nil
func (o *Ticket) SetAllowAllClientsPortalViewNil() {
	o.AllowAllClientsPortalView.Set(nil)
}

// UnsetAllowAllClientsPortalView ensures that no value is present for AllowAllClientsPortalView, not even an explicit nil
func (o *Ticket) UnsetAllowAllClientsPortalView() {
	o.AllowAllClientsPortalView.Unset()
}

// GetCustomerUpdatedFlag returns the CustomerUpdatedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetCustomerUpdatedFlag() bool {
	if o == nil || IsNil(o.CustomerUpdatedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomerUpdatedFlag.Get()
}

// GetCustomerUpdatedFlagOk returns a tuple with the CustomerUpdatedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetCustomerUpdatedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerUpdatedFlag.Get(), o.CustomerUpdatedFlag.IsSet()
}

// HasCustomerUpdatedFlag returns a boolean if a field has been set.
func (o *Ticket) HasCustomerUpdatedFlag() bool {
	if o != nil && o.CustomerUpdatedFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomerUpdatedFlag gets a reference to the given NullableBool and assigns it to the CustomerUpdatedFlag field.
func (o *Ticket) SetCustomerUpdatedFlag(v bool) {
	o.CustomerUpdatedFlag.Set(&v)
}
// SetCustomerUpdatedFlagNil sets the value for CustomerUpdatedFlag to be an explicit nil
func (o *Ticket) SetCustomerUpdatedFlagNil() {
	o.CustomerUpdatedFlag.Set(nil)
}

// UnsetCustomerUpdatedFlag ensures that no value is present for CustomerUpdatedFlag, not even an explicit nil
func (o *Ticket) UnsetCustomerUpdatedFlag() {
	o.CustomerUpdatedFlag.Unset()
}

// GetAutomaticEmailContactFlag returns the AutomaticEmailContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetAutomaticEmailContactFlag() bool {
	if o == nil || IsNil(o.AutomaticEmailContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutomaticEmailContactFlag.Get()
}

// GetAutomaticEmailContactFlagOk returns a tuple with the AutomaticEmailContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetAutomaticEmailContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutomaticEmailContactFlag.Get(), o.AutomaticEmailContactFlag.IsSet()
}

// HasAutomaticEmailContactFlag returns a boolean if a field has been set.
func (o *Ticket) HasAutomaticEmailContactFlag() bool {
	if o != nil && o.AutomaticEmailContactFlag.IsSet() {
		return true
	}

	return false
}

// SetAutomaticEmailContactFlag gets a reference to the given NullableBool and assigns it to the AutomaticEmailContactFlag field.
func (o *Ticket) SetAutomaticEmailContactFlag(v bool) {
	o.AutomaticEmailContactFlag.Set(&v)
}
// SetAutomaticEmailContactFlagNil sets the value for AutomaticEmailContactFlag to be an explicit nil
func (o *Ticket) SetAutomaticEmailContactFlagNil() {
	o.AutomaticEmailContactFlag.Set(nil)
}

// UnsetAutomaticEmailContactFlag ensures that no value is present for AutomaticEmailContactFlag, not even an explicit nil
func (o *Ticket) UnsetAutomaticEmailContactFlag() {
	o.AutomaticEmailContactFlag.Unset()
}

// GetAutomaticEmailResourceFlag returns the AutomaticEmailResourceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetAutomaticEmailResourceFlag() bool {
	if o == nil || IsNil(o.AutomaticEmailResourceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutomaticEmailResourceFlag.Get()
}

// GetAutomaticEmailResourceFlagOk returns a tuple with the AutomaticEmailResourceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetAutomaticEmailResourceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutomaticEmailResourceFlag.Get(), o.AutomaticEmailResourceFlag.IsSet()
}

// HasAutomaticEmailResourceFlag returns a boolean if a field has been set.
func (o *Ticket) HasAutomaticEmailResourceFlag() bool {
	if o != nil && o.AutomaticEmailResourceFlag.IsSet() {
		return true
	}

	return false
}

// SetAutomaticEmailResourceFlag gets a reference to the given NullableBool and assigns it to the AutomaticEmailResourceFlag field.
func (o *Ticket) SetAutomaticEmailResourceFlag(v bool) {
	o.AutomaticEmailResourceFlag.Set(&v)
}
// SetAutomaticEmailResourceFlagNil sets the value for AutomaticEmailResourceFlag to be an explicit nil
func (o *Ticket) SetAutomaticEmailResourceFlagNil() {
	o.AutomaticEmailResourceFlag.Set(nil)
}

// UnsetAutomaticEmailResourceFlag ensures that no value is present for AutomaticEmailResourceFlag, not even an explicit nil
func (o *Ticket) UnsetAutomaticEmailResourceFlag() {
	o.AutomaticEmailResourceFlag.Unset()
}

// GetAutomaticEmailCcFlag returns the AutomaticEmailCcFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetAutomaticEmailCcFlag() bool {
	if o == nil || IsNil(o.AutomaticEmailCcFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AutomaticEmailCcFlag.Get()
}

// GetAutomaticEmailCcFlagOk returns a tuple with the AutomaticEmailCcFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetAutomaticEmailCcFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutomaticEmailCcFlag.Get(), o.AutomaticEmailCcFlag.IsSet()
}

// HasAutomaticEmailCcFlag returns a boolean if a field has been set.
func (o *Ticket) HasAutomaticEmailCcFlag() bool {
	if o != nil && o.AutomaticEmailCcFlag.IsSet() {
		return true
	}

	return false
}

// SetAutomaticEmailCcFlag gets a reference to the given NullableBool and assigns it to the AutomaticEmailCcFlag field.
func (o *Ticket) SetAutomaticEmailCcFlag(v bool) {
	o.AutomaticEmailCcFlag.Set(&v)
}
// SetAutomaticEmailCcFlagNil sets the value for AutomaticEmailCcFlag to be an explicit nil
func (o *Ticket) SetAutomaticEmailCcFlagNil() {
	o.AutomaticEmailCcFlag.Set(nil)
}

// UnsetAutomaticEmailCcFlag ensures that no value is present for AutomaticEmailCcFlag, not even an explicit nil
func (o *Ticket) UnsetAutomaticEmailCcFlag() {
	o.AutomaticEmailCcFlag.Unset()
}

// GetAutomaticEmailCc returns the AutomaticEmailCc field value if set, zero value otherwise.
func (o *Ticket) GetAutomaticEmailCc() string {
	if o == nil || IsNil(o.AutomaticEmailCc) {
		var ret string
		return ret
	}
	return *o.AutomaticEmailCc
}

// GetAutomaticEmailCcOk returns a tuple with the AutomaticEmailCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetAutomaticEmailCcOk() (*string, bool) {
	if o == nil || IsNil(o.AutomaticEmailCc) {
		return nil, false
	}
	return o.AutomaticEmailCc, true
}

// HasAutomaticEmailCc returns a boolean if a field has been set.
func (o *Ticket) HasAutomaticEmailCc() bool {
	if o != nil && !IsNil(o.AutomaticEmailCc) {
		return true
	}

	return false
}

// SetAutomaticEmailCc gets a reference to the given string and assigns it to the AutomaticEmailCc field.
func (o *Ticket) SetAutomaticEmailCc(v string) {
	o.AutomaticEmailCc = &v
}

// GetInitialDescription returns the InitialDescription field value if set, zero value otherwise.
func (o *Ticket) GetInitialDescription() string {
	if o == nil || IsNil(o.InitialDescription) {
		var ret string
		return ret
	}
	return *o.InitialDescription
}

// GetInitialDescriptionOk returns a tuple with the InitialDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetInitialDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InitialDescription) {
		return nil, false
	}
	return o.InitialDescription, true
}

// HasInitialDescription returns a boolean if a field has been set.
func (o *Ticket) HasInitialDescription() bool {
	if o != nil && !IsNil(o.InitialDescription) {
		return true
	}

	return false
}

// SetInitialDescription gets a reference to the given string and assigns it to the InitialDescription field.
func (o *Ticket) SetInitialDescription(v string) {
	o.InitialDescription = &v
}

// GetInitialInternalAnalysis returns the InitialInternalAnalysis field value if set, zero value otherwise.
func (o *Ticket) GetInitialInternalAnalysis() string {
	if o == nil || IsNil(o.InitialInternalAnalysis) {
		var ret string
		return ret
	}
	return *o.InitialInternalAnalysis
}

// GetInitialInternalAnalysisOk returns a tuple with the InitialInternalAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetInitialInternalAnalysisOk() (*string, bool) {
	if o == nil || IsNil(o.InitialInternalAnalysis) {
		return nil, false
	}
	return o.InitialInternalAnalysis, true
}

// HasInitialInternalAnalysis returns a boolean if a field has been set.
func (o *Ticket) HasInitialInternalAnalysis() bool {
	if o != nil && !IsNil(o.InitialInternalAnalysis) {
		return true
	}

	return false
}

// SetInitialInternalAnalysis gets a reference to the given string and assigns it to the InitialInternalAnalysis field.
func (o *Ticket) SetInitialInternalAnalysis(v string) {
	o.InitialInternalAnalysis = &v
}

// GetInitialResolution returns the InitialResolution field value if set, zero value otherwise.
func (o *Ticket) GetInitialResolution() string {
	if o == nil || IsNil(o.InitialResolution) {
		var ret string
		return ret
	}
	return *o.InitialResolution
}

// GetInitialResolutionOk returns a tuple with the InitialResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetInitialResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.InitialResolution) {
		return nil, false
	}
	return o.InitialResolution, true
}

// HasInitialResolution returns a boolean if a field has been set.
func (o *Ticket) HasInitialResolution() bool {
	if o != nil && !IsNil(o.InitialResolution) {
		return true
	}

	return false
}

// SetInitialResolution gets a reference to the given string and assigns it to the InitialResolution field.
func (o *Ticket) SetInitialResolution(v string) {
	o.InitialResolution = &v
}

// GetInitialDescriptionFrom returns the InitialDescriptionFrom field value if set, zero value otherwise.
func (o *Ticket) GetInitialDescriptionFrom() string {
	if o == nil || IsNil(o.InitialDescriptionFrom) {
		var ret string
		return ret
	}
	return *o.InitialDescriptionFrom
}

// GetInitialDescriptionFromOk returns a tuple with the InitialDescriptionFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetInitialDescriptionFromOk() (*string, bool) {
	if o == nil || IsNil(o.InitialDescriptionFrom) {
		return nil, false
	}
	return o.InitialDescriptionFrom, true
}

// HasInitialDescriptionFrom returns a boolean if a field has been set.
func (o *Ticket) HasInitialDescriptionFrom() bool {
	if o != nil && !IsNil(o.InitialDescriptionFrom) {
		return true
	}

	return false
}

// SetInitialDescriptionFrom gets a reference to the given string and assigns it to the InitialDescriptionFrom field.
func (o *Ticket) SetInitialDescriptionFrom(v string) {
	o.InitialDescriptionFrom = &v
}

// GetContactEmailLookup returns the ContactEmailLookup field value if set, zero value otherwise.
func (o *Ticket) GetContactEmailLookup() string {
	if o == nil || IsNil(o.ContactEmailLookup) {
		var ret string
		return ret
	}
	return *o.ContactEmailLookup
}

// GetContactEmailLookupOk returns a tuple with the ContactEmailLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetContactEmailLookupOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmailLookup) {
		return nil, false
	}
	return o.ContactEmailLookup, true
}

// HasContactEmailLookup returns a boolean if a field has been set.
func (o *Ticket) HasContactEmailLookup() bool {
	if o != nil && !IsNil(o.ContactEmailLookup) {
		return true
	}

	return false
}

// SetContactEmailLookup gets a reference to the given string and assigns it to the ContactEmailLookup field.
func (o *Ticket) SetContactEmailLookup(v string) {
	o.ContactEmailLookup = &v
}

// GetProcessNotifications returns the ProcessNotifications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetProcessNotifications() bool {
	if o == nil || IsNil(o.ProcessNotifications.Get()) {
		var ret bool
		return ret
	}
	return *o.ProcessNotifications.Get()
}

// GetProcessNotificationsOk returns a tuple with the ProcessNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetProcessNotificationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessNotifications.Get(), o.ProcessNotifications.IsSet()
}

// HasProcessNotifications returns a boolean if a field has been set.
func (o *Ticket) HasProcessNotifications() bool {
	if o != nil && o.ProcessNotifications.IsSet() {
		return true
	}

	return false
}

// SetProcessNotifications gets a reference to the given NullableBool and assigns it to the ProcessNotifications field.
func (o *Ticket) SetProcessNotifications(v bool) {
	o.ProcessNotifications.Set(&v)
}
// SetProcessNotificationsNil sets the value for ProcessNotifications to be an explicit nil
func (o *Ticket) SetProcessNotificationsNil() {
	o.ProcessNotifications.Set(nil)
}

// UnsetProcessNotifications ensures that no value is present for ProcessNotifications, not even an explicit nil
func (o *Ticket) UnsetProcessNotifications() {
	o.ProcessNotifications.Unset()
}

// GetSkipCallback returns the SkipCallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetSkipCallback() bool {
	if o == nil || IsNil(o.SkipCallback.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipCallback.Get()
}

// GetSkipCallbackOk returns a tuple with the SkipCallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetSkipCallbackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipCallback.Get(), o.SkipCallback.IsSet()
}

// HasSkipCallback returns a boolean if a field has been set.
func (o *Ticket) HasSkipCallback() bool {
	if o != nil && o.SkipCallback.IsSet() {
		return true
	}

	return false
}

// SetSkipCallback gets a reference to the given NullableBool and assigns it to the SkipCallback field.
func (o *Ticket) SetSkipCallback(v bool) {
	o.SkipCallback.Set(&v)
}
// SetSkipCallbackNil sets the value for SkipCallback to be an explicit nil
func (o *Ticket) SetSkipCallbackNil() {
	o.SkipCallback.Set(nil)
}

// UnsetSkipCallback ensures that no value is present for SkipCallback, not even an explicit nil
func (o *Ticket) UnsetSkipCallback() {
	o.SkipCallback.Unset()
}

// GetClosedDate returns the ClosedDate field value if set, zero value otherwise.
func (o *Ticket) GetClosedDate() string {
	if o == nil || IsNil(o.ClosedDate) {
		var ret string
		return ret
	}
	return *o.ClosedDate
}

// GetClosedDateOk returns a tuple with the ClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetClosedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedDate) {
		return nil, false
	}
	return o.ClosedDate, true
}

// HasClosedDate returns a boolean if a field has been set.
func (o *Ticket) HasClosedDate() bool {
	if o != nil && !IsNil(o.ClosedDate) {
		return true
	}

	return false
}

// SetClosedDate gets a reference to the given string and assigns it to the ClosedDate field.
func (o *Ticket) SetClosedDate(v string) {
	o.ClosedDate = &v
}

// GetClosedBy returns the ClosedBy field value if set, zero value otherwise.
func (o *Ticket) GetClosedBy() string {
	if o == nil || IsNil(o.ClosedBy) {
		var ret string
		return ret
	}
	return *o.ClosedBy
}

// GetClosedByOk returns a tuple with the ClosedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetClosedByOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedBy) {
		return nil, false
	}
	return o.ClosedBy, true
}

// HasClosedBy returns a boolean if a field has been set.
func (o *Ticket) HasClosedBy() bool {
	if o != nil && !IsNil(o.ClosedBy) {
		return true
	}

	return false
}

// SetClosedBy gets a reference to the given string and assigns it to the ClosedBy field.
func (o *Ticket) SetClosedBy(v string) {
	o.ClosedBy = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *Ticket) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *Ticket) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *Ticket) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *Ticket) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetActualHours returns the ActualHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetActualHours() float64 {
	if o == nil || IsNil(o.ActualHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualHours.Get()
}

// GetActualHoursOk returns a tuple with the ActualHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetActualHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualHours.Get(), o.ActualHours.IsSet()
}

// HasActualHours returns a boolean if a field has been set.
func (o *Ticket) HasActualHours() bool {
	if o != nil && o.ActualHours.IsSet() {
		return true
	}

	return false
}

// SetActualHours gets a reference to the given NullableFloat64 and assigns it to the ActualHours field.
func (o *Ticket) SetActualHours(v float64) {
	o.ActualHours.Set(&v)
}
// SetActualHoursNil sets the value for ActualHours to be an explicit nil
func (o *Ticket) SetActualHoursNil() {
	o.ActualHours.Set(nil)
}

// UnsetActualHours ensures that no value is present for ActualHours, not even an explicit nil
func (o *Ticket) UnsetActualHours() {
	o.ActualHours.Unset()
}

// GetApproved returns the Approved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetApproved() bool {
	if o == nil || IsNil(o.Approved.Get()) {
		var ret bool
		return ret
	}
	return *o.Approved.Get()
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetApprovedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Approved.Get(), o.Approved.IsSet()
}

// HasApproved returns a boolean if a field has been set.
func (o *Ticket) HasApproved() bool {
	if o != nil && o.Approved.IsSet() {
		return true
	}

	return false
}

// SetApproved gets a reference to the given NullableBool and assigns it to the Approved field.
func (o *Ticket) SetApproved(v bool) {
	o.Approved.Set(&v)
}
// SetApprovedNil sets the value for Approved to be an explicit nil
func (o *Ticket) SetApprovedNil() {
	o.Approved.Set(nil)
}

// UnsetApproved ensures that no value is present for Approved, not even an explicit nil
func (o *Ticket) UnsetApproved() {
	o.Approved.Unset()
}

// GetEstimatedExpenseCost returns the EstimatedExpenseCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEstimatedExpenseCost() float64 {
	if o == nil || IsNil(o.EstimatedExpenseCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedExpenseCost.Get()
}

// GetEstimatedExpenseCostOk returns a tuple with the EstimatedExpenseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEstimatedExpenseCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedExpenseCost.Get(), o.EstimatedExpenseCost.IsSet()
}

// HasEstimatedExpenseCost returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedExpenseCost() bool {
	if o != nil && o.EstimatedExpenseCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedExpenseCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedExpenseCost field.
func (o *Ticket) SetEstimatedExpenseCost(v float64) {
	o.EstimatedExpenseCost.Set(&v)
}
// SetEstimatedExpenseCostNil sets the value for EstimatedExpenseCost to be an explicit nil
func (o *Ticket) SetEstimatedExpenseCostNil() {
	o.EstimatedExpenseCost.Set(nil)
}

// UnsetEstimatedExpenseCost ensures that no value is present for EstimatedExpenseCost, not even an explicit nil
func (o *Ticket) UnsetEstimatedExpenseCost() {
	o.EstimatedExpenseCost.Unset()
}

// GetEstimatedExpenseRevenue returns the EstimatedExpenseRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEstimatedExpenseRevenue() float64 {
	if o == nil || IsNil(o.EstimatedExpenseRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedExpenseRevenue.Get()
}

// GetEstimatedExpenseRevenueOk returns a tuple with the EstimatedExpenseRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEstimatedExpenseRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedExpenseRevenue.Get(), o.EstimatedExpenseRevenue.IsSet()
}

// HasEstimatedExpenseRevenue returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedExpenseRevenue() bool {
	if o != nil && o.EstimatedExpenseRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedExpenseRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedExpenseRevenue field.
func (o *Ticket) SetEstimatedExpenseRevenue(v float64) {
	o.EstimatedExpenseRevenue.Set(&v)
}
// SetEstimatedExpenseRevenueNil sets the value for EstimatedExpenseRevenue to be an explicit nil
func (o *Ticket) SetEstimatedExpenseRevenueNil() {
	o.EstimatedExpenseRevenue.Set(nil)
}

// UnsetEstimatedExpenseRevenue ensures that no value is present for EstimatedExpenseRevenue, not even an explicit nil
func (o *Ticket) UnsetEstimatedExpenseRevenue() {
	o.EstimatedExpenseRevenue.Unset()
}

// GetEstimatedProductCost returns the EstimatedProductCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEstimatedProductCost() float64 {
	if o == nil || IsNil(o.EstimatedProductCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedProductCost.Get()
}

// GetEstimatedProductCostOk returns a tuple with the EstimatedProductCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEstimatedProductCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedProductCost.Get(), o.EstimatedProductCost.IsSet()
}

// HasEstimatedProductCost returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedProductCost() bool {
	if o != nil && o.EstimatedProductCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedProductCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedProductCost field.
func (o *Ticket) SetEstimatedProductCost(v float64) {
	o.EstimatedProductCost.Set(&v)
}
// SetEstimatedProductCostNil sets the value for EstimatedProductCost to be an explicit nil
func (o *Ticket) SetEstimatedProductCostNil() {
	o.EstimatedProductCost.Set(nil)
}

// UnsetEstimatedProductCost ensures that no value is present for EstimatedProductCost, not even an explicit nil
func (o *Ticket) UnsetEstimatedProductCost() {
	o.EstimatedProductCost.Unset()
}

// GetEstimatedProductRevenue returns the EstimatedProductRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEstimatedProductRevenue() float64 {
	if o == nil || IsNil(o.EstimatedProductRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedProductRevenue.Get()
}

// GetEstimatedProductRevenueOk returns a tuple with the EstimatedProductRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEstimatedProductRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedProductRevenue.Get(), o.EstimatedProductRevenue.IsSet()
}

// HasEstimatedProductRevenue returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedProductRevenue() bool {
	if o != nil && o.EstimatedProductRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedProductRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedProductRevenue field.
func (o *Ticket) SetEstimatedProductRevenue(v float64) {
	o.EstimatedProductRevenue.Set(&v)
}
// SetEstimatedProductRevenueNil sets the value for EstimatedProductRevenue to be an explicit nil
func (o *Ticket) SetEstimatedProductRevenueNil() {
	o.EstimatedProductRevenue.Set(nil)
}

// UnsetEstimatedProductRevenue ensures that no value is present for EstimatedProductRevenue, not even an explicit nil
func (o *Ticket) UnsetEstimatedProductRevenue() {
	o.EstimatedProductRevenue.Unset()
}

// GetEstimatedTimeCost returns the EstimatedTimeCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEstimatedTimeCost() float64 {
	if o == nil || IsNil(o.EstimatedTimeCost.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeCost.Get()
}

// GetEstimatedTimeCostOk returns a tuple with the EstimatedTimeCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEstimatedTimeCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedTimeCost.Get(), o.EstimatedTimeCost.IsSet()
}

// HasEstimatedTimeCost returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedTimeCost() bool {
	if o != nil && o.EstimatedTimeCost.IsSet() {
		return true
	}

	return false
}

// SetEstimatedTimeCost gets a reference to the given NullableFloat64 and assigns it to the EstimatedTimeCost field.
func (o *Ticket) SetEstimatedTimeCost(v float64) {
	o.EstimatedTimeCost.Set(&v)
}
// SetEstimatedTimeCostNil sets the value for EstimatedTimeCost to be an explicit nil
func (o *Ticket) SetEstimatedTimeCostNil() {
	o.EstimatedTimeCost.Set(nil)
}

// UnsetEstimatedTimeCost ensures that no value is present for EstimatedTimeCost, not even an explicit nil
func (o *Ticket) UnsetEstimatedTimeCost() {
	o.EstimatedTimeCost.Unset()
}

// GetEstimatedTimeRevenue returns the EstimatedTimeRevenue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEstimatedTimeRevenue() float64 {
	if o == nil || IsNil(o.EstimatedTimeRevenue.Get()) {
		var ret float64
		return ret
	}
	return *o.EstimatedTimeRevenue.Get()
}

// GetEstimatedTimeRevenueOk returns a tuple with the EstimatedTimeRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEstimatedTimeRevenueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedTimeRevenue.Get(), o.EstimatedTimeRevenue.IsSet()
}

// HasEstimatedTimeRevenue returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedTimeRevenue() bool {
	if o != nil && o.EstimatedTimeRevenue.IsSet() {
		return true
	}

	return false
}

// SetEstimatedTimeRevenue gets a reference to the given NullableFloat64 and assigns it to the EstimatedTimeRevenue field.
func (o *Ticket) SetEstimatedTimeRevenue(v float64) {
	o.EstimatedTimeRevenue.Set(&v)
}
// SetEstimatedTimeRevenueNil sets the value for EstimatedTimeRevenue to be an explicit nil
func (o *Ticket) SetEstimatedTimeRevenueNil() {
	o.EstimatedTimeRevenue.Set(nil)
}

// UnsetEstimatedTimeRevenue ensures that no value is present for EstimatedTimeRevenue, not even an explicit nil
func (o *Ticket) UnsetEstimatedTimeRevenue() {
	o.EstimatedTimeRevenue.Unset()
}

// GetBillingMethod returns the BillingMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetBillingMethod() string {
	if o == nil || IsNil(o.BillingMethod.Get()) {
		var ret string
		return ret
	}
	return *o.BillingMethod.Get()
}

// GetBillingMethodOk returns a tuple with the BillingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetBillingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingMethod.Get(), o.BillingMethod.IsSet()
}

// HasBillingMethod returns a boolean if a field has been set.
func (o *Ticket) HasBillingMethod() bool {
	if o != nil && o.BillingMethod.IsSet() {
		return true
	}

	return false
}

// SetBillingMethod gets a reference to the given NullableString and assigns it to the BillingMethod field.
func (o *Ticket) SetBillingMethod(v string) {
	o.BillingMethod.Set(&v)
}
// SetBillingMethodNil sets the value for BillingMethod to be an explicit nil
func (o *Ticket) SetBillingMethodNil() {
	o.BillingMethod.Set(nil)
}

// UnsetBillingMethod ensures that no value is present for BillingMethod, not even an explicit nil
func (o *Ticket) UnsetBillingMethod() {
	o.BillingMethod.Unset()
}

// GetBillingAmount returns the BillingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetBillingAmount() float64 {
	if o == nil || IsNil(o.BillingAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillingAmount.Get()
}

// GetBillingAmountOk returns a tuple with the BillingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetBillingAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingAmount.Get(), o.BillingAmount.IsSet()
}

// HasBillingAmount returns a boolean if a field has been set.
func (o *Ticket) HasBillingAmount() bool {
	if o != nil && o.BillingAmount.IsSet() {
		return true
	}

	return false
}

// SetBillingAmount gets a reference to the given NullableFloat64 and assigns it to the BillingAmount field.
func (o *Ticket) SetBillingAmount(v float64) {
	o.BillingAmount.Set(&v)
}
// SetBillingAmountNil sets the value for BillingAmount to be an explicit nil
func (o *Ticket) SetBillingAmountNil() {
	o.BillingAmount.Set(nil)
}

// UnsetBillingAmount ensures that no value is present for BillingAmount, not even an explicit nil
func (o *Ticket) UnsetBillingAmount() {
	o.BillingAmount.Unset()
}

// GetHourlyRate returns the HourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetHourlyRate() float64 {
	if o == nil || IsNil(o.HourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyRate.Get()
}

// GetHourlyRateOk returns a tuple with the HourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyRate.Get(), o.HourlyRate.IsSet()
}

// HasHourlyRate returns a boolean if a field has been set.
func (o *Ticket) HasHourlyRate() bool {
	if o != nil && o.HourlyRate.IsSet() {
		return true
	}

	return false
}

// SetHourlyRate gets a reference to the given NullableFloat64 and assigns it to the HourlyRate field.
func (o *Ticket) SetHourlyRate(v float64) {
	o.HourlyRate.Set(&v)
}
// SetHourlyRateNil sets the value for HourlyRate to be an explicit nil
func (o *Ticket) SetHourlyRateNil() {
	o.HourlyRate.Set(nil)
}

// UnsetHourlyRate ensures that no value is present for HourlyRate, not even an explicit nil
func (o *Ticket) UnsetHourlyRate() {
	o.HourlyRate.Unset()
}

// GetSubBillingMethod returns the SubBillingMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetSubBillingMethod() string {
	if o == nil || IsNil(o.SubBillingMethod.Get()) {
		var ret string
		return ret
	}
	return *o.SubBillingMethod.Get()
}

// GetSubBillingMethodOk returns a tuple with the SubBillingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetSubBillingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubBillingMethod.Get(), o.SubBillingMethod.IsSet()
}

// HasSubBillingMethod returns a boolean if a field has been set.
func (o *Ticket) HasSubBillingMethod() bool {
	if o != nil && o.SubBillingMethod.IsSet() {
		return true
	}

	return false
}

// SetSubBillingMethod gets a reference to the given NullableString and assigns it to the SubBillingMethod field.
func (o *Ticket) SetSubBillingMethod(v string) {
	o.SubBillingMethod.Set(&v)
}
// SetSubBillingMethodNil sets the value for SubBillingMethod to be an explicit nil
func (o *Ticket) SetSubBillingMethodNil() {
	o.SubBillingMethod.Set(nil)
}

// UnsetSubBillingMethod ensures that no value is present for SubBillingMethod, not even an explicit nil
func (o *Ticket) UnsetSubBillingMethod() {
	o.SubBillingMethod.Unset()
}

// GetSubBillingAmount returns the SubBillingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetSubBillingAmount() float64 {
	if o == nil || IsNil(o.SubBillingAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.SubBillingAmount.Get()
}

// GetSubBillingAmountOk returns a tuple with the SubBillingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetSubBillingAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubBillingAmount.Get(), o.SubBillingAmount.IsSet()
}

// HasSubBillingAmount returns a boolean if a field has been set.
func (o *Ticket) HasSubBillingAmount() bool {
	if o != nil && o.SubBillingAmount.IsSet() {
		return true
	}

	return false
}

// SetSubBillingAmount gets a reference to the given NullableFloat64 and assigns it to the SubBillingAmount field.
func (o *Ticket) SetSubBillingAmount(v float64) {
	o.SubBillingAmount.Set(&v)
}
// SetSubBillingAmountNil sets the value for SubBillingAmount to be an explicit nil
func (o *Ticket) SetSubBillingAmountNil() {
	o.SubBillingAmount.Set(nil)
}

// UnsetSubBillingAmount ensures that no value is present for SubBillingAmount, not even an explicit nil
func (o *Ticket) UnsetSubBillingAmount() {
	o.SubBillingAmount.Unset()
}

// GetSubDateAccepted returns the SubDateAccepted field value if set, zero value otherwise.
func (o *Ticket) GetSubDateAccepted() string {
	if o == nil || IsNil(o.SubDateAccepted) {
		var ret string
		return ret
	}
	return *o.SubDateAccepted
}

// GetSubDateAcceptedOk returns a tuple with the SubDateAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSubDateAcceptedOk() (*string, bool) {
	if o == nil || IsNil(o.SubDateAccepted) {
		return nil, false
	}
	return o.SubDateAccepted, true
}

// HasSubDateAccepted returns a boolean if a field has been set.
func (o *Ticket) HasSubDateAccepted() bool {
	if o != nil && !IsNil(o.SubDateAccepted) {
		return true
	}

	return false
}

// SetSubDateAccepted gets a reference to the given string and assigns it to the SubDateAccepted field.
func (o *Ticket) SetSubDateAccepted(v string) {
	o.SubDateAccepted = &v
}

// GetDateResolved returns the DateResolved field value if set, zero value otherwise.
func (o *Ticket) GetDateResolved() string {
	if o == nil || IsNil(o.DateResolved) {
		var ret string
		return ret
	}
	return *o.DateResolved
}

// GetDateResolvedOk returns a tuple with the DateResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetDateResolvedOk() (*string, bool) {
	if o == nil || IsNil(o.DateResolved) {
		return nil, false
	}
	return o.DateResolved, true
}

// HasDateResolved returns a boolean if a field has been set.
func (o *Ticket) HasDateResolved() bool {
	if o != nil && !IsNil(o.DateResolved) {
		return true
	}

	return false
}

// SetDateResolved gets a reference to the given string and assigns it to the DateResolved field.
func (o *Ticket) SetDateResolved(v string) {
	o.DateResolved = &v
}

// GetDateResplan returns the DateResplan field value if set, zero value otherwise.
func (o *Ticket) GetDateResplan() string {
	if o == nil || IsNil(o.DateResplan) {
		var ret string
		return ret
	}
	return *o.DateResplan
}

// GetDateResplanOk returns a tuple with the DateResplan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetDateResplanOk() (*string, bool) {
	if o == nil || IsNil(o.DateResplan) {
		return nil, false
	}
	return o.DateResplan, true
}

// HasDateResplan returns a boolean if a field has been set.
func (o *Ticket) HasDateResplan() bool {
	if o != nil && !IsNil(o.DateResplan) {
		return true
	}

	return false
}

// SetDateResplan gets a reference to the given string and assigns it to the DateResplan field.
func (o *Ticket) SetDateResplan(v string) {
	o.DateResplan = &v
}

// GetDateResponded returns the DateResponded field value if set, zero value otherwise.
func (o *Ticket) GetDateResponded() string {
	if o == nil || IsNil(o.DateResponded) {
		var ret string
		return ret
	}
	return *o.DateResponded
}

// GetDateRespondedOk returns a tuple with the DateResponded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetDateRespondedOk() (*string, bool) {
	if o == nil || IsNil(o.DateResponded) {
		return nil, false
	}
	return o.DateResponded, true
}

// HasDateResponded returns a boolean if a field has been set.
func (o *Ticket) HasDateResponded() bool {
	if o != nil && !IsNil(o.DateResponded) {
		return true
	}

	return false
}

// SetDateResponded gets a reference to the given string and assigns it to the DateResponded field.
func (o *Ticket) SetDateResponded(v string) {
	o.DateResponded = &v
}

// GetResolveMinutes returns the ResolveMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetResolveMinutes() int32 {
	if o == nil || IsNil(o.ResolveMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.ResolveMinutes.Get()
}

// GetResolveMinutesOk returns a tuple with the ResolveMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetResolveMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolveMinutes.Get(), o.ResolveMinutes.IsSet()
}

// HasResolveMinutes returns a boolean if a field has been set.
func (o *Ticket) HasResolveMinutes() bool {
	if o != nil && o.ResolveMinutes.IsSet() {
		return true
	}

	return false
}

// SetResolveMinutes gets a reference to the given NullableInt32 and assigns it to the ResolveMinutes field.
func (o *Ticket) SetResolveMinutes(v int32) {
	o.ResolveMinutes.Set(&v)
}
// SetResolveMinutesNil sets the value for ResolveMinutes to be an explicit nil
func (o *Ticket) SetResolveMinutesNil() {
	o.ResolveMinutes.Set(nil)
}

// UnsetResolveMinutes ensures that no value is present for ResolveMinutes, not even an explicit nil
func (o *Ticket) UnsetResolveMinutes() {
	o.ResolveMinutes.Unset()
}

// GetResPlanMinutes returns the ResPlanMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetResPlanMinutes() int32 {
	if o == nil || IsNil(o.ResPlanMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.ResPlanMinutes.Get()
}

// GetResPlanMinutesOk returns a tuple with the ResPlanMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetResPlanMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResPlanMinutes.Get(), o.ResPlanMinutes.IsSet()
}

// HasResPlanMinutes returns a boolean if a field has been set.
func (o *Ticket) HasResPlanMinutes() bool {
	if o != nil && o.ResPlanMinutes.IsSet() {
		return true
	}

	return false
}

// SetResPlanMinutes gets a reference to the given NullableInt32 and assigns it to the ResPlanMinutes field.
func (o *Ticket) SetResPlanMinutes(v int32) {
	o.ResPlanMinutes.Set(&v)
}
// SetResPlanMinutesNil sets the value for ResPlanMinutes to be an explicit nil
func (o *Ticket) SetResPlanMinutesNil() {
	o.ResPlanMinutes.Set(nil)
}

// UnsetResPlanMinutes ensures that no value is present for ResPlanMinutes, not even an explicit nil
func (o *Ticket) UnsetResPlanMinutes() {
	o.ResPlanMinutes.Unset()
}

// GetRespondMinutes returns the RespondMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetRespondMinutes() int32 {
	if o == nil || IsNil(o.RespondMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.RespondMinutes.Get()
}

// GetRespondMinutesOk returns a tuple with the RespondMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetRespondMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondMinutes.Get(), o.RespondMinutes.IsSet()
}

// HasRespondMinutes returns a boolean if a field has been set.
func (o *Ticket) HasRespondMinutes() bool {
	if o != nil && o.RespondMinutes.IsSet() {
		return true
	}

	return false
}

// SetRespondMinutes gets a reference to the given NullableInt32 and assigns it to the RespondMinutes field.
func (o *Ticket) SetRespondMinutes(v int32) {
	o.RespondMinutes.Set(&v)
}
// SetRespondMinutesNil sets the value for RespondMinutes to be an explicit nil
func (o *Ticket) SetRespondMinutesNil() {
	o.RespondMinutes.Set(nil)
}

// UnsetRespondMinutes ensures that no value is present for RespondMinutes, not even an explicit nil
func (o *Ticket) UnsetRespondMinutes() {
	o.RespondMinutes.Unset()
}

// GetIsInSla returns the IsInSla field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetIsInSla() bool {
	if o == nil || IsNil(o.IsInSla.Get()) {
		var ret bool
		return ret
	}
	return *o.IsInSla.Get()
}

// GetIsInSlaOk returns a tuple with the IsInSla field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetIsInSlaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsInSla.Get(), o.IsInSla.IsSet()
}

// HasIsInSla returns a boolean if a field has been set.
func (o *Ticket) HasIsInSla() bool {
	if o != nil && o.IsInSla.IsSet() {
		return true
	}

	return false
}

// SetIsInSla gets a reference to the given NullableBool and assigns it to the IsInSla field.
func (o *Ticket) SetIsInSla(v bool) {
	o.IsInSla.Set(&v)
}
// SetIsInSlaNil sets the value for IsInSla to be an explicit nil
func (o *Ticket) SetIsInSlaNil() {
	o.IsInSla.Set(nil)
}

// UnsetIsInSla ensures that no value is present for IsInSla, not even an explicit nil
func (o *Ticket) UnsetIsInSla() {
	o.IsInSla.Unset()
}

// GetKnowledgeBaseLinkId returns the KnowledgeBaseLinkId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetKnowledgeBaseLinkId() int32 {
	if o == nil || IsNil(o.KnowledgeBaseLinkId.Get()) {
		var ret int32
		return ret
	}
	return *o.KnowledgeBaseLinkId.Get()
}

// GetKnowledgeBaseLinkIdOk returns a tuple with the KnowledgeBaseLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetKnowledgeBaseLinkIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseLinkId.Get(), o.KnowledgeBaseLinkId.IsSet()
}

// HasKnowledgeBaseLinkId returns a boolean if a field has been set.
func (o *Ticket) HasKnowledgeBaseLinkId() bool {
	if o != nil && o.KnowledgeBaseLinkId.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseLinkId gets a reference to the given NullableInt32 and assigns it to the KnowledgeBaseLinkId field.
func (o *Ticket) SetKnowledgeBaseLinkId(v int32) {
	o.KnowledgeBaseLinkId.Set(&v)
}
// SetKnowledgeBaseLinkIdNil sets the value for KnowledgeBaseLinkId to be an explicit nil
func (o *Ticket) SetKnowledgeBaseLinkIdNil() {
	o.KnowledgeBaseLinkId.Set(nil)
}

// UnsetKnowledgeBaseLinkId ensures that no value is present for KnowledgeBaseLinkId, not even an explicit nil
func (o *Ticket) UnsetKnowledgeBaseLinkId() {
	o.KnowledgeBaseLinkId.Unset()
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Ticket) GetResources() string {
	if o == nil || IsNil(o.Resources) {
		var ret string
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetResourcesOk() (*string, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Ticket) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given string and assigns it to the Resources field.
func (o *Ticket) SetResources(v string) {
	o.Resources = &v
}

// GetParentTicketId returns the ParentTicketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetParentTicketId() int32 {
	if o == nil || IsNil(o.ParentTicketId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentTicketId.Get()
}

// GetParentTicketIdOk returns a tuple with the ParentTicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetParentTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTicketId.Get(), o.ParentTicketId.IsSet()
}

// HasParentTicketId returns a boolean if a field has been set.
func (o *Ticket) HasParentTicketId() bool {
	if o != nil && o.ParentTicketId.IsSet() {
		return true
	}

	return false
}

// SetParentTicketId gets a reference to the given NullableInt32 and assigns it to the ParentTicketId field.
func (o *Ticket) SetParentTicketId(v int32) {
	o.ParentTicketId.Set(&v)
}
// SetParentTicketIdNil sets the value for ParentTicketId to be an explicit nil
func (o *Ticket) SetParentTicketIdNil() {
	o.ParentTicketId.Set(nil)
}

// UnsetParentTicketId ensures that no value is present for ParentTicketId, not even an explicit nil
func (o *Ticket) UnsetParentTicketId() {
	o.ParentTicketId.Unset()
}

// GetHasChildTicket returns the HasChildTicket field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetHasChildTicket() bool {
	if o == nil || IsNil(o.HasChildTicket.Get()) {
		var ret bool
		return ret
	}
	return *o.HasChildTicket.Get()
}

// GetHasChildTicketOk returns a tuple with the HasChildTicket field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetHasChildTicketOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasChildTicket.Get(), o.HasChildTicket.IsSet()
}

// HasHasChildTicket returns a boolean if a field has been set.
func (o *Ticket) HasHasChildTicket() bool {
	if o != nil && o.HasChildTicket.IsSet() {
		return true
	}

	return false
}

// SetHasChildTicket gets a reference to the given NullableBool and assigns it to the HasChildTicket field.
func (o *Ticket) SetHasChildTicket(v bool) {
	o.HasChildTicket.Set(&v)
}
// SetHasChildTicketNil sets the value for HasChildTicket to be an explicit nil
func (o *Ticket) SetHasChildTicketNil() {
	o.HasChildTicket.Set(nil)
}

// UnsetHasChildTicket ensures that no value is present for HasChildTicket, not even an explicit nil
func (o *Ticket) UnsetHasChildTicket() {
	o.HasChildTicket.Unset()
}

// GetHasMergedChildTicketFlag returns the HasMergedChildTicketFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetHasMergedChildTicketFlag() bool {
	if o == nil || IsNil(o.HasMergedChildTicketFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.HasMergedChildTicketFlag.Get()
}

// GetHasMergedChildTicketFlagOk returns a tuple with the HasMergedChildTicketFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetHasMergedChildTicketFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasMergedChildTicketFlag.Get(), o.HasMergedChildTicketFlag.IsSet()
}

// HasHasMergedChildTicketFlag returns a boolean if a field has been set.
func (o *Ticket) HasHasMergedChildTicketFlag() bool {
	if o != nil && o.HasMergedChildTicketFlag.IsSet() {
		return true
	}

	return false
}

// SetHasMergedChildTicketFlag gets a reference to the given NullableBool and assigns it to the HasMergedChildTicketFlag field.
func (o *Ticket) SetHasMergedChildTicketFlag(v bool) {
	o.HasMergedChildTicketFlag.Set(&v)
}
// SetHasMergedChildTicketFlagNil sets the value for HasMergedChildTicketFlag to be an explicit nil
func (o *Ticket) SetHasMergedChildTicketFlagNil() {
	o.HasMergedChildTicketFlag.Set(nil)
}

// UnsetHasMergedChildTicketFlag ensures that no value is present for HasMergedChildTicketFlag, not even an explicit nil
func (o *Ticket) UnsetHasMergedChildTicketFlag() {
	o.HasMergedChildTicketFlag.Unset()
}

// GetKnowledgeBaseLinkType returns the KnowledgeBaseLinkType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetKnowledgeBaseLinkType() string {
	if o == nil || IsNil(o.KnowledgeBaseLinkType.Get()) {
		var ret string
		return ret
	}
	return *o.KnowledgeBaseLinkType.Get()
}

// GetKnowledgeBaseLinkTypeOk returns a tuple with the KnowledgeBaseLinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetKnowledgeBaseLinkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnowledgeBaseLinkType.Get(), o.KnowledgeBaseLinkType.IsSet()
}

// HasKnowledgeBaseLinkType returns a boolean if a field has been set.
func (o *Ticket) HasKnowledgeBaseLinkType() bool {
	if o != nil && o.KnowledgeBaseLinkType.IsSet() {
		return true
	}

	return false
}

// SetKnowledgeBaseLinkType gets a reference to the given NullableString and assigns it to the KnowledgeBaseLinkType field.
func (o *Ticket) SetKnowledgeBaseLinkType(v string) {
	o.KnowledgeBaseLinkType.Set(&v)
}
// SetKnowledgeBaseLinkTypeNil sets the value for KnowledgeBaseLinkType to be an explicit nil
func (o *Ticket) SetKnowledgeBaseLinkTypeNil() {
	o.KnowledgeBaseLinkType.Set(nil)
}

// UnsetKnowledgeBaseLinkType ensures that no value is present for KnowledgeBaseLinkType, not even an explicit nil
func (o *Ticket) UnsetKnowledgeBaseLinkType() {
	o.KnowledgeBaseLinkType.Unset()
}

// GetBillTime returns the BillTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetBillTime() string {
	if o == nil || IsNil(o.BillTime.Get()) {
		var ret string
		return ret
	}
	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// HasBillTime returns a boolean if a field has been set.
func (o *Ticket) HasBillTime() bool {
	if o != nil && o.BillTime.IsSet() {
		return true
	}

	return false
}

// SetBillTime gets a reference to the given NullableString and assigns it to the BillTime field.
func (o *Ticket) SetBillTime(v string) {
	o.BillTime.Set(&v)
}
// SetBillTimeNil sets the value for BillTime to be an explicit nil
func (o *Ticket) SetBillTimeNil() {
	o.BillTime.Set(nil)
}

// UnsetBillTime ensures that no value is present for BillTime, not even an explicit nil
func (o *Ticket) UnsetBillTime() {
	o.BillTime.Unset()
}

// GetBillExpenses returns the BillExpenses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetBillExpenses() string {
	if o == nil || IsNil(o.BillExpenses.Get()) {
		var ret string
		return ret
	}
	return *o.BillExpenses.Get()
}

// GetBillExpensesOk returns a tuple with the BillExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetBillExpensesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillExpenses.Get(), o.BillExpenses.IsSet()
}

// HasBillExpenses returns a boolean if a field has been set.
func (o *Ticket) HasBillExpenses() bool {
	if o != nil && o.BillExpenses.IsSet() {
		return true
	}

	return false
}

// SetBillExpenses gets a reference to the given NullableString and assigns it to the BillExpenses field.
func (o *Ticket) SetBillExpenses(v string) {
	o.BillExpenses.Set(&v)
}
// SetBillExpensesNil sets the value for BillExpenses to be an explicit nil
func (o *Ticket) SetBillExpensesNil() {
	o.BillExpenses.Set(nil)
}

// UnsetBillExpenses ensures that no value is present for BillExpenses, not even an explicit nil
func (o *Ticket) UnsetBillExpenses() {
	o.BillExpenses.Unset()
}

// GetBillProducts returns the BillProducts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetBillProducts() string {
	if o == nil || IsNil(o.BillProducts.Get()) {
		var ret string
		return ret
	}
	return *o.BillProducts.Get()
}

// GetBillProductsOk returns a tuple with the BillProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetBillProductsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillProducts.Get(), o.BillProducts.IsSet()
}

// HasBillProducts returns a boolean if a field has been set.
func (o *Ticket) HasBillProducts() bool {
	if o != nil && o.BillProducts.IsSet() {
		return true
	}

	return false
}

// SetBillProducts gets a reference to the given NullableString and assigns it to the BillProducts field.
func (o *Ticket) SetBillProducts(v string) {
	o.BillProducts.Set(&v)
}
// SetBillProductsNil sets the value for BillProducts to be an explicit nil
func (o *Ticket) SetBillProductsNil() {
	o.BillProducts.Set(nil)
}

// UnsetBillProducts ensures that no value is present for BillProducts, not even an explicit nil
func (o *Ticket) UnsetBillProducts() {
	o.BillProducts.Unset()
}

// GetPredecessorType returns the PredecessorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetPredecessorType() string {
	if o == nil || IsNil(o.PredecessorType.Get()) {
		var ret string
		return ret
	}
	return *o.PredecessorType.Get()
}

// GetPredecessorTypeOk returns a tuple with the PredecessorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetPredecessorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PredecessorType.Get(), o.PredecessorType.IsSet()
}

// HasPredecessorType returns a boolean if a field has been set.
func (o *Ticket) HasPredecessorType() bool {
	if o != nil && o.PredecessorType.IsSet() {
		return true
	}

	return false
}

// SetPredecessorType gets a reference to the given NullableString and assigns it to the PredecessorType field.
func (o *Ticket) SetPredecessorType(v string) {
	o.PredecessorType.Set(&v)
}
// SetPredecessorTypeNil sets the value for PredecessorType to be an explicit nil
func (o *Ticket) SetPredecessorTypeNil() {
	o.PredecessorType.Set(nil)
}

// UnsetPredecessorType ensures that no value is present for PredecessorType, not even an explicit nil
func (o *Ticket) UnsetPredecessorType() {
	o.PredecessorType.Unset()
}

// GetPredecessorId returns the PredecessorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetPredecessorId() int32 {
	if o == nil || IsNil(o.PredecessorId.Get()) {
		var ret int32
		return ret
	}
	return *o.PredecessorId.Get()
}

// GetPredecessorIdOk returns a tuple with the PredecessorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetPredecessorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PredecessorId.Get(), o.PredecessorId.IsSet()
}

// HasPredecessorId returns a boolean if a field has been set.
func (o *Ticket) HasPredecessorId() bool {
	if o != nil && o.PredecessorId.IsSet() {
		return true
	}

	return false
}

// SetPredecessorId gets a reference to the given NullableInt32 and assigns it to the PredecessorId field.
func (o *Ticket) SetPredecessorId(v int32) {
	o.PredecessorId.Set(&v)
}
// SetPredecessorIdNil sets the value for PredecessorId to be an explicit nil
func (o *Ticket) SetPredecessorIdNil() {
	o.PredecessorId.Set(nil)
}

// UnsetPredecessorId ensures that no value is present for PredecessorId, not even an explicit nil
func (o *Ticket) UnsetPredecessorId() {
	o.PredecessorId.Unset()
}

// GetPredecessorClosedFlag returns the PredecessorClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetPredecessorClosedFlag() bool {
	if o == nil || IsNil(o.PredecessorClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.PredecessorClosedFlag.Get()
}

// GetPredecessorClosedFlagOk returns a tuple with the PredecessorClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetPredecessorClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PredecessorClosedFlag.Get(), o.PredecessorClosedFlag.IsSet()
}

// HasPredecessorClosedFlag returns a boolean if a field has been set.
func (o *Ticket) HasPredecessorClosedFlag() bool {
	if o != nil && o.PredecessorClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetPredecessorClosedFlag gets a reference to the given NullableBool and assigns it to the PredecessorClosedFlag field.
func (o *Ticket) SetPredecessorClosedFlag(v bool) {
	o.PredecessorClosedFlag.Set(&v)
}
// SetPredecessorClosedFlagNil sets the value for PredecessorClosedFlag to be an explicit nil
func (o *Ticket) SetPredecessorClosedFlagNil() {
	o.PredecessorClosedFlag.Set(nil)
}

// UnsetPredecessorClosedFlag ensures that no value is present for PredecessorClosedFlag, not even an explicit nil
func (o *Ticket) UnsetPredecessorClosedFlag() {
	o.PredecessorClosedFlag.Unset()
}

// GetLagDays returns the LagDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetLagDays() int32 {
	if o == nil || IsNil(o.LagDays.Get()) {
		var ret int32
		return ret
	}
	return *o.LagDays.Get()
}

// GetLagDaysOk returns a tuple with the LagDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetLagDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagDays.Get(), o.LagDays.IsSet()
}

// HasLagDays returns a boolean if a field has been set.
func (o *Ticket) HasLagDays() bool {
	if o != nil && o.LagDays.IsSet() {
		return true
	}

	return false
}

// SetLagDays gets a reference to the given NullableInt32 and assigns it to the LagDays field.
func (o *Ticket) SetLagDays(v int32) {
	o.LagDays.Set(&v)
}
// SetLagDaysNil sets the value for LagDays to be an explicit nil
func (o *Ticket) SetLagDaysNil() {
	o.LagDays.Set(nil)
}

// UnsetLagDays ensures that no value is present for LagDays, not even an explicit nil
func (o *Ticket) UnsetLagDays() {
	o.LagDays.Unset()
}

// GetLagNonworkingDaysFlag returns the LagNonworkingDaysFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetLagNonworkingDaysFlag() bool {
	if o == nil || IsNil(o.LagNonworkingDaysFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LagNonworkingDaysFlag.Get()
}

// GetLagNonworkingDaysFlagOk returns a tuple with the LagNonworkingDaysFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetLagNonworkingDaysFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagNonworkingDaysFlag.Get(), o.LagNonworkingDaysFlag.IsSet()
}

// HasLagNonworkingDaysFlag returns a boolean if a field has been set.
func (o *Ticket) HasLagNonworkingDaysFlag() bool {
	if o != nil && o.LagNonworkingDaysFlag.IsSet() {
		return true
	}

	return false
}

// SetLagNonworkingDaysFlag gets a reference to the given NullableBool and assigns it to the LagNonworkingDaysFlag field.
func (o *Ticket) SetLagNonworkingDaysFlag(v bool) {
	o.LagNonworkingDaysFlag.Set(&v)
}
// SetLagNonworkingDaysFlagNil sets the value for LagNonworkingDaysFlag to be an explicit nil
func (o *Ticket) SetLagNonworkingDaysFlagNil() {
	o.LagNonworkingDaysFlag.Set(nil)
}

// UnsetLagNonworkingDaysFlag ensures that no value is present for LagNonworkingDaysFlag, not even an explicit nil
func (o *Ticket) UnsetLagNonworkingDaysFlag() {
	o.LagNonworkingDaysFlag.Unset()
}

// GetEstimatedStartDate returns the EstimatedStartDate field value if set, zero value otherwise.
func (o *Ticket) GetEstimatedStartDate() time.Time {
	if o == nil || IsNil(o.EstimatedStartDate) {
		var ret time.Time
		return ret
	}
	return *o.EstimatedStartDate
}

// GetEstimatedStartDateOk returns a tuple with the EstimatedStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetEstimatedStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstimatedStartDate) {
		return nil, false
	}
	return o.EstimatedStartDate, true
}

// HasEstimatedStartDate returns a boolean if a field has been set.
func (o *Ticket) HasEstimatedStartDate() bool {
	if o != nil && !IsNil(o.EstimatedStartDate) {
		return true
	}

	return false
}

// SetEstimatedStartDate gets a reference to the given time.Time and assigns it to the EstimatedStartDate field.
func (o *Ticket) SetEstimatedStartDate(v time.Time) {
	o.EstimatedStartDate = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetDuration() int32 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int32
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *Ticket) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt32 and assigns it to the Duration field.
func (o *Ticket) SetDuration(v int32) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *Ticket) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *Ticket) UnsetDuration() {
	o.Duration.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Ticket) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Ticket) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Ticket) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Ticket) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Ticket) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *Ticket) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *Ticket) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *Ticket) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}
// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *Ticket) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *Ticket) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetSla returns the Sla field value if set, zero value otherwise.
func (o *Ticket) GetSla() SLAReference {
	if o == nil || IsNil(o.Sla) {
		var ret SLAReference
		return ret
	}
	return *o.Sla
}

// GetSlaOk returns a tuple with the Sla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSlaOk() (*SLAReference, bool) {
	if o == nil || IsNil(o.Sla) {
		return nil, false
	}
	return o.Sla, true
}

// HasSla returns a boolean if a field has been set.
func (o *Ticket) HasSla() bool {
	if o != nil && !IsNil(o.Sla) {
		return true
	}

	return false
}

// SetSla gets a reference to the given SLAReference and assigns it to the Sla field.
func (o *Ticket) SetSla(v SLAReference) {
	o.Sla = &v
}

// GetSlaStatus returns the SlaStatus field value if set, zero value otherwise.
func (o *Ticket) GetSlaStatus() string {
	if o == nil || IsNil(o.SlaStatus) {
		var ret string
		return ret
	}
	return *o.SlaStatus
}

// GetSlaStatusOk returns a tuple with the SlaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetSlaStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SlaStatus) {
		return nil, false
	}
	return o.SlaStatus, true
}

// HasSlaStatus returns a boolean if a field has been set.
func (o *Ticket) HasSlaStatus() bool {
	if o != nil && !IsNil(o.SlaStatus) {
		return true
	}

	return false
}

// SetSlaStatus gets a reference to the given string and assigns it to the SlaStatus field.
func (o *Ticket) SetSlaStatus(v string) {
	o.SlaStatus = &v
}

// GetRequestForChangeFlag returns the RequestForChangeFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetRequestForChangeFlag() bool {
	if o == nil || IsNil(o.RequestForChangeFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequestForChangeFlag.Get()
}

// GetRequestForChangeFlagOk returns a tuple with the RequestForChangeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetRequestForChangeFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestForChangeFlag.Get(), o.RequestForChangeFlag.IsSet()
}

// HasRequestForChangeFlag returns a boolean if a field has been set.
func (o *Ticket) HasRequestForChangeFlag() bool {
	if o != nil && o.RequestForChangeFlag.IsSet() {
		return true
	}

	return false
}

// SetRequestForChangeFlag gets a reference to the given NullableBool and assigns it to the RequestForChangeFlag field.
func (o *Ticket) SetRequestForChangeFlag(v bool) {
	o.RequestForChangeFlag.Set(&v)
}
// SetRequestForChangeFlagNil sets the value for RequestForChangeFlag to be an explicit nil
func (o *Ticket) SetRequestForChangeFlagNil() {
	o.RequestForChangeFlag.Set(nil)
}

// UnsetRequestForChangeFlag ensures that no value is present for RequestForChangeFlag, not even an explicit nil
func (o *Ticket) UnsetRequestForChangeFlag() {
	o.RequestForChangeFlag.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Ticket) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Ticket) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *Ticket) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetMergedParentTicket returns the MergedParentTicket field value if set, zero value otherwise.
func (o *Ticket) GetMergedParentTicket() TicketReference {
	if o == nil || IsNil(o.MergedParentTicket) {
		var ret TicketReference
		return ret
	}
	return *o.MergedParentTicket
}

// GetMergedParentTicketOk returns a tuple with the MergedParentTicket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetMergedParentTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.MergedParentTicket) {
		return nil, false
	}
	return o.MergedParentTicket, true
}

// HasMergedParentTicket returns a boolean if a field has been set.
func (o *Ticket) HasMergedParentTicket() bool {
	if o != nil && !IsNil(o.MergedParentTicket) {
		return true
	}

	return false
}

// SetMergedParentTicket gets a reference to the given TicketReference and assigns it to the MergedParentTicket field.
func (o *Ticket) SetMergedParentTicket(v TicketReference) {
	o.MergedParentTicket = &v
}

// GetIntegratorTags returns the IntegratorTags field value if set, zero value otherwise.
func (o *Ticket) GetIntegratorTags() []string {
	if o == nil || IsNil(o.IntegratorTags) {
		var ret []string
		return ret
	}
	return o.IntegratorTags
}

// GetIntegratorTagsOk returns a tuple with the IntegratorTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetIntegratorTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IntegratorTags) {
		return nil, false
	}
	return o.IntegratorTags, true
}

// HasIntegratorTags returns a boolean if a field has been set.
func (o *Ticket) HasIntegratorTags() bool {
	if o != nil && !IsNil(o.IntegratorTags) {
		return true
	}

	return false
}

// SetIntegratorTags gets a reference to the given []string and assigns it to the IntegratorTags field.
func (o *Ticket) SetIntegratorTags(v []string) {
	o.IntegratorTags = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Ticket) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Ticket) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Ticket) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetEscalationStartDateUTC returns the EscalationStartDateUTC field value if set, zero value otherwise.
func (o *Ticket) GetEscalationStartDateUTC() string {
	if o == nil || IsNil(o.EscalationStartDateUTC) {
		var ret string
		return ret
	}
	return *o.EscalationStartDateUTC
}

// GetEscalationStartDateUTCOk returns a tuple with the EscalationStartDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetEscalationStartDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.EscalationStartDateUTC) {
		return nil, false
	}
	return o.EscalationStartDateUTC, true
}

// HasEscalationStartDateUTC returns a boolean if a field has been set.
func (o *Ticket) HasEscalationStartDateUTC() bool {
	if o != nil && !IsNil(o.EscalationStartDateUTC) {
		return true
	}

	return false
}

// SetEscalationStartDateUTC gets a reference to the given string and assigns it to the EscalationStartDateUTC field.
func (o *Ticket) SetEscalationStartDateUTC(v string) {
	o.EscalationStartDateUTC = &v
}

// GetEscalationLevel returns the EscalationLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetEscalationLevel() int32 {
	if o == nil || IsNil(o.EscalationLevel.Get()) {
		var ret int32
		return ret
	}
	return *o.EscalationLevel.Get()
}

// GetEscalationLevelOk returns a tuple with the EscalationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetEscalationLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EscalationLevel.Get(), o.EscalationLevel.IsSet()
}

// HasEscalationLevel returns a boolean if a field has been set.
func (o *Ticket) HasEscalationLevel() bool {
	if o != nil && o.EscalationLevel.IsSet() {
		return true
	}

	return false
}

// SetEscalationLevel gets a reference to the given NullableInt32 and assigns it to the EscalationLevel field.
func (o *Ticket) SetEscalationLevel(v int32) {
	o.EscalationLevel.Set(&v)
}
// SetEscalationLevelNil sets the value for EscalationLevel to be an explicit nil
func (o *Ticket) SetEscalationLevelNil() {
	o.EscalationLevel.Set(nil)
}

// UnsetEscalationLevel ensures that no value is present for EscalationLevel, not even an explicit nil
func (o *Ticket) UnsetEscalationLevel() {
	o.EscalationLevel.Unset()
}

// GetMinutesBeforeWaiting returns the MinutesBeforeWaiting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetMinutesBeforeWaiting() int32 {
	if o == nil || IsNil(o.MinutesBeforeWaiting.Get()) {
		var ret int32
		return ret
	}
	return *o.MinutesBeforeWaiting.Get()
}

// GetMinutesBeforeWaitingOk returns a tuple with the MinutesBeforeWaiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetMinutesBeforeWaitingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinutesBeforeWaiting.Get(), o.MinutesBeforeWaiting.IsSet()
}

// HasMinutesBeforeWaiting returns a boolean if a field has been set.
func (o *Ticket) HasMinutesBeforeWaiting() bool {
	if o != nil && o.MinutesBeforeWaiting.IsSet() {
		return true
	}

	return false
}

// SetMinutesBeforeWaiting gets a reference to the given NullableInt32 and assigns it to the MinutesBeforeWaiting field.
func (o *Ticket) SetMinutesBeforeWaiting(v int32) {
	o.MinutesBeforeWaiting.Set(&v)
}
// SetMinutesBeforeWaitingNil sets the value for MinutesBeforeWaiting to be an explicit nil
func (o *Ticket) SetMinutesBeforeWaitingNil() {
	o.MinutesBeforeWaiting.Set(nil)
}

// UnsetMinutesBeforeWaiting ensures that no value is present for MinutesBeforeWaiting, not even an explicit nil
func (o *Ticket) UnsetMinutesBeforeWaiting() {
	o.MinutesBeforeWaiting.Unset()
}

// GetRespondedSkippedMinutes returns the RespondedSkippedMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetRespondedSkippedMinutes() int32 {
	if o == nil || IsNil(o.RespondedSkippedMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.RespondedSkippedMinutes.Get()
}

// GetRespondedSkippedMinutesOk returns a tuple with the RespondedSkippedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetRespondedSkippedMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondedSkippedMinutes.Get(), o.RespondedSkippedMinutes.IsSet()
}

// HasRespondedSkippedMinutes returns a boolean if a field has been set.
func (o *Ticket) HasRespondedSkippedMinutes() bool {
	if o != nil && o.RespondedSkippedMinutes.IsSet() {
		return true
	}

	return false
}

// SetRespondedSkippedMinutes gets a reference to the given NullableInt32 and assigns it to the RespondedSkippedMinutes field.
func (o *Ticket) SetRespondedSkippedMinutes(v int32) {
	o.RespondedSkippedMinutes.Set(&v)
}
// SetRespondedSkippedMinutesNil sets the value for RespondedSkippedMinutes to be an explicit nil
func (o *Ticket) SetRespondedSkippedMinutesNil() {
	o.RespondedSkippedMinutes.Set(nil)
}

// UnsetRespondedSkippedMinutes ensures that no value is present for RespondedSkippedMinutes, not even an explicit nil
func (o *Ticket) UnsetRespondedSkippedMinutes() {
	o.RespondedSkippedMinutes.Unset()
}

// GetResplanSkippedMinutes returns the ResplanSkippedMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetResplanSkippedMinutes() int32 {
	if o == nil || IsNil(o.ResplanSkippedMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.ResplanSkippedMinutes.Get()
}

// GetResplanSkippedMinutesOk returns a tuple with the ResplanSkippedMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetResplanSkippedMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResplanSkippedMinutes.Get(), o.ResplanSkippedMinutes.IsSet()
}

// HasResplanSkippedMinutes returns a boolean if a field has been set.
func (o *Ticket) HasResplanSkippedMinutes() bool {
	if o != nil && o.ResplanSkippedMinutes.IsSet() {
		return true
	}

	return false
}

// SetResplanSkippedMinutes gets a reference to the given NullableInt32 and assigns it to the ResplanSkippedMinutes field.
func (o *Ticket) SetResplanSkippedMinutes(v int32) {
	o.ResplanSkippedMinutes.Set(&v)
}
// SetResplanSkippedMinutesNil sets the value for ResplanSkippedMinutes to be an explicit nil
func (o *Ticket) SetResplanSkippedMinutesNil() {
	o.ResplanSkippedMinutes.Set(nil)
}

// UnsetResplanSkippedMinutes ensures that no value is present for ResplanSkippedMinutes, not even an explicit nil
func (o *Ticket) UnsetResplanSkippedMinutes() {
	o.ResplanSkippedMinutes.Unset()
}

// GetRespondedHours returns the RespondedHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetRespondedHours() float64 {
	if o == nil || IsNil(o.RespondedHours.Get()) {
		var ret float64
		return ret
	}
	return *o.RespondedHours.Get()
}

// GetRespondedHoursOk returns a tuple with the RespondedHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetRespondedHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RespondedHours.Get(), o.RespondedHours.IsSet()
}

// HasRespondedHours returns a boolean if a field has been set.
func (o *Ticket) HasRespondedHours() bool {
	if o != nil && o.RespondedHours.IsSet() {
		return true
	}

	return false
}

// SetRespondedHours gets a reference to the given NullableFloat64 and assigns it to the RespondedHours field.
func (o *Ticket) SetRespondedHours(v float64) {
	o.RespondedHours.Set(&v)
}
// SetRespondedHoursNil sets the value for RespondedHours to be an explicit nil
func (o *Ticket) SetRespondedHoursNil() {
	o.RespondedHours.Set(nil)
}

// UnsetRespondedHours ensures that no value is present for RespondedHours, not even an explicit nil
func (o *Ticket) UnsetRespondedHours() {
	o.RespondedHours.Unset()
}

// GetRespondedBy returns the RespondedBy field value if set, zero value otherwise.
func (o *Ticket) GetRespondedBy() string {
	if o == nil || IsNil(o.RespondedBy) {
		var ret string
		return ret
	}
	return *o.RespondedBy
}

// GetRespondedByOk returns a tuple with the RespondedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetRespondedByOk() (*string, bool) {
	if o == nil || IsNil(o.RespondedBy) {
		return nil, false
	}
	return o.RespondedBy, true
}

// HasRespondedBy returns a boolean if a field has been set.
func (o *Ticket) HasRespondedBy() bool {
	if o != nil && !IsNil(o.RespondedBy) {
		return true
	}

	return false
}

// SetRespondedBy gets a reference to the given string and assigns it to the RespondedBy field.
func (o *Ticket) SetRespondedBy(v string) {
	o.RespondedBy = &v
}

// GetResplanHours returns the ResplanHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetResplanHours() float64 {
	if o == nil || IsNil(o.ResplanHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ResplanHours.Get()
}

// GetResplanHoursOk returns a tuple with the ResplanHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetResplanHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResplanHours.Get(), o.ResplanHours.IsSet()
}

// HasResplanHours returns a boolean if a field has been set.
func (o *Ticket) HasResplanHours() bool {
	if o != nil && o.ResplanHours.IsSet() {
		return true
	}

	return false
}

// SetResplanHours gets a reference to the given NullableFloat64 and assigns it to the ResplanHours field.
func (o *Ticket) SetResplanHours(v float64) {
	o.ResplanHours.Set(&v)
}
// SetResplanHoursNil sets the value for ResplanHours to be an explicit nil
func (o *Ticket) SetResplanHoursNil() {
	o.ResplanHours.Set(nil)
}

// UnsetResplanHours ensures that no value is present for ResplanHours, not even an explicit nil
func (o *Ticket) UnsetResplanHours() {
	o.ResplanHours.Unset()
}

// GetResplanBy returns the ResplanBy field value if set, zero value otherwise.
func (o *Ticket) GetResplanBy() string {
	if o == nil || IsNil(o.ResplanBy) {
		var ret string
		return ret
	}
	return *o.ResplanBy
}

// GetResplanByOk returns a tuple with the ResplanBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetResplanByOk() (*string, bool) {
	if o == nil || IsNil(o.ResplanBy) {
		return nil, false
	}
	return o.ResplanBy, true
}

// HasResplanBy returns a boolean if a field has been set.
func (o *Ticket) HasResplanBy() bool {
	if o != nil && !IsNil(o.ResplanBy) {
		return true
	}

	return false
}

// SetResplanBy gets a reference to the given string and assigns it to the ResplanBy field.
func (o *Ticket) SetResplanBy(v string) {
	o.ResplanBy = &v
}

// GetResolutionHours returns the ResolutionHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetResolutionHours() float64 {
	if o == nil || IsNil(o.ResolutionHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ResolutionHours.Get()
}

// GetResolutionHoursOk returns a tuple with the ResolutionHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetResolutionHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionHours.Get(), o.ResolutionHours.IsSet()
}

// HasResolutionHours returns a boolean if a field has been set.
func (o *Ticket) HasResolutionHours() bool {
	if o != nil && o.ResolutionHours.IsSet() {
		return true
	}

	return false
}

// SetResolutionHours gets a reference to the given NullableFloat64 and assigns it to the ResolutionHours field.
func (o *Ticket) SetResolutionHours(v float64) {
	o.ResolutionHours.Set(&v)
}
// SetResolutionHoursNil sets the value for ResolutionHours to be an explicit nil
func (o *Ticket) SetResolutionHoursNil() {
	o.ResolutionHours.Set(nil)
}

// UnsetResolutionHours ensures that no value is present for ResolutionHours, not even an explicit nil
func (o *Ticket) UnsetResolutionHours() {
	o.ResolutionHours.Unset()
}

// GetResolvedBy returns the ResolvedBy field value if set, zero value otherwise.
func (o *Ticket) GetResolvedBy() string {
	if o == nil || IsNil(o.ResolvedBy) {
		var ret string
		return ret
	}
	return *o.ResolvedBy
}

// GetResolvedByOk returns a tuple with the ResolvedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetResolvedByOk() (*string, bool) {
	if o == nil || IsNil(o.ResolvedBy) {
		return nil, false
	}
	return o.ResolvedBy, true
}

// HasResolvedBy returns a boolean if a field has been set.
func (o *Ticket) HasResolvedBy() bool {
	if o != nil && !IsNil(o.ResolvedBy) {
		return true
	}

	return false
}

// SetResolvedBy gets a reference to the given string and assigns it to the ResolvedBy field.
func (o *Ticket) SetResolvedBy(v string) {
	o.ResolvedBy = &v
}

// GetMinutesWaiting returns the MinutesWaiting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetMinutesWaiting() int32 {
	if o == nil || IsNil(o.MinutesWaiting.Get()) {
		var ret int32
		return ret
	}
	return *o.MinutesWaiting.Get()
}

// GetMinutesWaitingOk returns a tuple with the MinutesWaiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetMinutesWaitingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinutesWaiting.Get(), o.MinutesWaiting.IsSet()
}

// HasMinutesWaiting returns a boolean if a field has been set.
func (o *Ticket) HasMinutesWaiting() bool {
	if o != nil && o.MinutesWaiting.IsSet() {
		return true
	}

	return false
}

// SetMinutesWaiting gets a reference to the given NullableInt32 and assigns it to the MinutesWaiting field.
func (o *Ticket) SetMinutesWaiting(v int32) {
	o.MinutesWaiting.Set(&v)
}
// SetMinutesWaitingNil sets the value for MinutesWaiting to be an explicit nil
func (o *Ticket) SetMinutesWaitingNil() {
	o.MinutesWaiting.Set(nil)
}

// UnsetMinutesWaiting ensures that no value is present for MinutesWaiting, not even an explicit nil
func (o *Ticket) UnsetMinutesWaiting() {
	o.MinutesWaiting.Unset()
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Ticket) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Ticket) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *Ticket) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o Ticket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ticket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["summary"] = o.Summary
	if o.RecordType.IsSet() {
		toSerialize["recordType"] = o.RecordType.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	toSerialize["company"] = o.Company
	if !IsNil(o.Site) {
		toSerialize["site"] = o.Site
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	if !IsNil(o.AddressLine1) {
		toSerialize["addressLine1"] = o.AddressLine1
	}
	if !IsNil(o.AddressLine2) {
		toSerialize["addressLine2"] = o.AddressLine2
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.StateIdentifier) {
		toSerialize["stateIdentifier"] = o.StateIdentifier
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.ContactName) {
		toSerialize["contactName"] = o.ContactName
	}
	if !IsNil(o.ContactPhoneNumber) {
		toSerialize["contactPhoneNumber"] = o.ContactPhoneNumber
	}
	if !IsNil(o.ContactPhoneExtension) {
		toSerialize["contactPhoneExtension"] = o.ContactPhoneExtension
	}
	if !IsNil(o.ContactEmailAddress) {
		toSerialize["contactEmailAddress"] = o.ContactEmailAddress
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.ServiceLocation) {
		toSerialize["serviceLocation"] = o.ServiceLocation
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.RequiredDate) {
		toSerialize["requiredDate"] = o.RequiredDate
	}
	if o.BudgetHours.IsSet() {
		toSerialize["budgetHours"] = o.BudgetHours.Get()
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.Impact.IsSet() {
		toSerialize["impact"] = o.Impact.Get()
	}
	if !IsNil(o.ExternalXRef) {
		toSerialize["externalXRef"] = o.ExternalXRef
	}
	if !IsNil(o.PoNumber) {
		toSerialize["poNumber"] = o.PoNumber
	}
	if o.KnowledgeBaseCategoryId.IsSet() {
		toSerialize["knowledgeBaseCategoryId"] = o.KnowledgeBaseCategoryId.Get()
	}
	if o.KnowledgeBaseSubCategoryId.IsSet() {
		toSerialize["knowledgeBaseSubCategoryId"] = o.KnowledgeBaseSubCategoryId.Get()
	}
	if o.AllowAllClientsPortalView.IsSet() {
		toSerialize["allowAllClientsPortalView"] = o.AllowAllClientsPortalView.Get()
	}
	if o.CustomerUpdatedFlag.IsSet() {
		toSerialize["customerUpdatedFlag"] = o.CustomerUpdatedFlag.Get()
	}
	if o.AutomaticEmailContactFlag.IsSet() {
		toSerialize["automaticEmailContactFlag"] = o.AutomaticEmailContactFlag.Get()
	}
	if o.AutomaticEmailResourceFlag.IsSet() {
		toSerialize["automaticEmailResourceFlag"] = o.AutomaticEmailResourceFlag.Get()
	}
	if o.AutomaticEmailCcFlag.IsSet() {
		toSerialize["automaticEmailCcFlag"] = o.AutomaticEmailCcFlag.Get()
	}
	if !IsNil(o.AutomaticEmailCc) {
		toSerialize["automaticEmailCc"] = o.AutomaticEmailCc
	}
	if !IsNil(o.InitialDescription) {
		toSerialize["initialDescription"] = o.InitialDescription
	}
	if !IsNil(o.InitialInternalAnalysis) {
		toSerialize["initialInternalAnalysis"] = o.InitialInternalAnalysis
	}
	if !IsNil(o.InitialResolution) {
		toSerialize["initialResolution"] = o.InitialResolution
	}
	if !IsNil(o.InitialDescriptionFrom) {
		toSerialize["initialDescriptionFrom"] = o.InitialDescriptionFrom
	}
	if !IsNil(o.ContactEmailLookup) {
		toSerialize["contactEmailLookup"] = o.ContactEmailLookup
	}
	if o.ProcessNotifications.IsSet() {
		toSerialize["processNotifications"] = o.ProcessNotifications.Get()
	}
	if o.SkipCallback.IsSet() {
		toSerialize["skipCallback"] = o.SkipCallback.Get()
	}
	if !IsNil(o.ClosedDate) {
		toSerialize["closedDate"] = o.ClosedDate
	}
	if !IsNil(o.ClosedBy) {
		toSerialize["closedBy"] = o.ClosedBy
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if o.ActualHours.IsSet() {
		toSerialize["actualHours"] = o.ActualHours.Get()
	}
	if o.Approved.IsSet() {
		toSerialize["approved"] = o.Approved.Get()
	}
	if o.EstimatedExpenseCost.IsSet() {
		toSerialize["estimatedExpenseCost"] = o.EstimatedExpenseCost.Get()
	}
	if o.EstimatedExpenseRevenue.IsSet() {
		toSerialize["estimatedExpenseRevenue"] = o.EstimatedExpenseRevenue.Get()
	}
	if o.EstimatedProductCost.IsSet() {
		toSerialize["estimatedProductCost"] = o.EstimatedProductCost.Get()
	}
	if o.EstimatedProductRevenue.IsSet() {
		toSerialize["estimatedProductRevenue"] = o.EstimatedProductRevenue.Get()
	}
	if o.EstimatedTimeCost.IsSet() {
		toSerialize["estimatedTimeCost"] = o.EstimatedTimeCost.Get()
	}
	if o.EstimatedTimeRevenue.IsSet() {
		toSerialize["estimatedTimeRevenue"] = o.EstimatedTimeRevenue.Get()
	}
	if o.BillingMethod.IsSet() {
		toSerialize["billingMethod"] = o.BillingMethod.Get()
	}
	if o.BillingAmount.IsSet() {
		toSerialize["billingAmount"] = o.BillingAmount.Get()
	}
	if o.HourlyRate.IsSet() {
		toSerialize["hourlyRate"] = o.HourlyRate.Get()
	}
	if o.SubBillingMethod.IsSet() {
		toSerialize["subBillingMethod"] = o.SubBillingMethod.Get()
	}
	if o.SubBillingAmount.IsSet() {
		toSerialize["subBillingAmount"] = o.SubBillingAmount.Get()
	}
	if !IsNil(o.SubDateAccepted) {
		toSerialize["subDateAccepted"] = o.SubDateAccepted
	}
	if !IsNil(o.DateResolved) {
		toSerialize["dateResolved"] = o.DateResolved
	}
	if !IsNil(o.DateResplan) {
		toSerialize["dateResplan"] = o.DateResplan
	}
	if !IsNil(o.DateResponded) {
		toSerialize["dateResponded"] = o.DateResponded
	}
	if o.ResolveMinutes.IsSet() {
		toSerialize["resolveMinutes"] = o.ResolveMinutes.Get()
	}
	if o.ResPlanMinutes.IsSet() {
		toSerialize["resPlanMinutes"] = o.ResPlanMinutes.Get()
	}
	if o.RespondMinutes.IsSet() {
		toSerialize["respondMinutes"] = o.RespondMinutes.Get()
	}
	if o.IsInSla.IsSet() {
		toSerialize["isInSla"] = o.IsInSla.Get()
	}
	if o.KnowledgeBaseLinkId.IsSet() {
		toSerialize["knowledgeBaseLinkId"] = o.KnowledgeBaseLinkId.Get()
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if o.ParentTicketId.IsSet() {
		toSerialize["parentTicketId"] = o.ParentTicketId.Get()
	}
	if o.HasChildTicket.IsSet() {
		toSerialize["hasChildTicket"] = o.HasChildTicket.Get()
	}
	if o.HasMergedChildTicketFlag.IsSet() {
		toSerialize["hasMergedChildTicketFlag"] = o.HasMergedChildTicketFlag.Get()
	}
	if o.KnowledgeBaseLinkType.IsSet() {
		toSerialize["knowledgeBaseLinkType"] = o.KnowledgeBaseLinkType.Get()
	}
	if o.BillTime.IsSet() {
		toSerialize["billTime"] = o.BillTime.Get()
	}
	if o.BillExpenses.IsSet() {
		toSerialize["billExpenses"] = o.BillExpenses.Get()
	}
	if o.BillProducts.IsSet() {
		toSerialize["billProducts"] = o.BillProducts.Get()
	}
	if o.PredecessorType.IsSet() {
		toSerialize["predecessorType"] = o.PredecessorType.Get()
	}
	if o.PredecessorId.IsSet() {
		toSerialize["predecessorId"] = o.PredecessorId.Get()
	}
	if o.PredecessorClosedFlag.IsSet() {
		toSerialize["predecessorClosedFlag"] = o.PredecessorClosedFlag.Get()
	}
	if o.LagDays.IsSet() {
		toSerialize["lagDays"] = o.LagDays.Get()
	}
	if o.LagNonworkingDaysFlag.IsSet() {
		toSerialize["lagNonworkingDaysFlag"] = o.LagNonworkingDaysFlag.Get()
	}
	if !IsNil(o.EstimatedStartDate) {
		toSerialize["estimatedStartDate"] = o.EstimatedStartDate
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if !IsNil(o.Sla) {
		toSerialize["sla"] = o.Sla
	}
	if !IsNil(o.SlaStatus) {
		toSerialize["slaStatus"] = o.SlaStatus
	}
	if o.RequestForChangeFlag.IsSet() {
		toSerialize["requestForChangeFlag"] = o.RequestForChangeFlag.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.MergedParentTicket) {
		toSerialize["mergedParentTicket"] = o.MergedParentTicket
	}
	if !IsNil(o.IntegratorTags) {
		toSerialize["integratorTags"] = o.IntegratorTags
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.EscalationStartDateUTC) {
		toSerialize["escalationStartDateUTC"] = o.EscalationStartDateUTC
	}
	if o.EscalationLevel.IsSet() {
		toSerialize["escalationLevel"] = o.EscalationLevel.Get()
	}
	if o.MinutesBeforeWaiting.IsSet() {
		toSerialize["minutesBeforeWaiting"] = o.MinutesBeforeWaiting.Get()
	}
	if o.RespondedSkippedMinutes.IsSet() {
		toSerialize["respondedSkippedMinutes"] = o.RespondedSkippedMinutes.Get()
	}
	if o.ResplanSkippedMinutes.IsSet() {
		toSerialize["resplanSkippedMinutes"] = o.ResplanSkippedMinutes.Get()
	}
	if o.RespondedHours.IsSet() {
		toSerialize["respondedHours"] = o.RespondedHours.Get()
	}
	if !IsNil(o.RespondedBy) {
		toSerialize["respondedBy"] = o.RespondedBy
	}
	if o.ResplanHours.IsSet() {
		toSerialize["resplanHours"] = o.ResplanHours.Get()
	}
	if !IsNil(o.ResplanBy) {
		toSerialize["resplanBy"] = o.ResplanBy
	}
	if o.ResolutionHours.IsSet() {
		toSerialize["resolutionHours"] = o.ResolutionHours.Get()
	}
	if !IsNil(o.ResolvedBy) {
		toSerialize["resolvedBy"] = o.ResolvedBy
	}
	if o.MinutesWaiting.IsSet() {
		toSerialize["minutesWaiting"] = o.MinutesWaiting.Get()
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *Ticket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summary",
		"company",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicket := _Ticket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicket)

	if err != nil {
		return err
	}

	*o = Ticket(varTicket)

	return err
}

type NullableTicket struct {
	value *Ticket
	isSet bool
}

func (v NullableTicket) Get() *Ticket {
	return v.value
}

func (v *NullableTicket) Set(val *Ticket) {
	v.value = val
	v.isSet = true
}

func (v NullableTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicket(val *Ticket) *NullableTicket {
	return &NullableTicket{value: val, isSet: true}
}

func (v NullableTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


