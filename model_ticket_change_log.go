/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TicketChangeLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketChangeLog{}

// TicketChangeLog struct for TicketChangeLog
type TicketChangeLog struct {
	// Ticket Change Log ID
	Id *int32 `json:"id,omitempty"`
	// Partner ID.
	PartnerId *string `json:"partnerId,omitempty"`
	// Product Instance ID.
	ProductInstanceId *string `json:"productInstanceId,omitempty"`
	// Action.
	Action *string `json:"action,omitempty"`
	// Board ID.
	BoardId NullableInt32 `json:"boardId,omitempty"`
	// Board Name.
	BoardName *string `json:"boardName,omitempty"`
	// Company Identifier.
	CompanyIdentifier NullableInt32 `json:"companyIdentifier,omitempty"`
	// Company Name.
	CompanyName *string `json:"companyName,omitempty"`
	// Contact ID.
	ContactId NullableInt32 `json:"contactId,omitempty"`
	// Contact Name.
	ContactName *string `json:"contactName,omitempty"`
	// Impact.
	Impact *string `json:"impact,omitempty"`
	// Owner Identifier.
	OwnerIdentifier NullableInt32 `json:"ownerIdentifier,omitempty"`
	// Priority ID.
	PriorityId NullableInt32 `json:"priorityId,omitempty"`
	// Priority Level.
	PriorityLevel *string `json:"priorityLevel,omitempty"`
	// Priority Name.
	PriorityName *string `json:"priorityName,omitempty"`
	// Priority Sort.
	PrioritySort NullableInt32 `json:"prioritySort,omitempty"`
	// Resource List.
	ResourceList *string `json:"resourceList,omitempty"`
	// Severity.
	Severity *string `json:"severity,omitempty"`
	// SLA Name.
	SlaName *string `json:"slaName,omitempty"`
	// SLA Status.
	SlaStatus *string `json:"slaStatus,omitempty"`
	// Status.
	Status *string `json:"status,omitempty"`
	// Summary.
	Summary *string `json:"summary,omitempty"`
	// Team Name.
	TeamName *string `json:"teamName,omitempty"`
	// Ticket Number.
	TicketNumber NullableInt32 `json:"ticketNumber,omitempty"`
	// Record Type.
	RecordType *string `json:"recordType,omitempty"`
	// Ticket Owner.
	TicketOwner *string `json:"ticketOwner,omitempty"`
	// Closed Flag.
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	// Customer Updated Flag.
	CustomerUpdatedFlag NullableBool `json:"customerUpdatedFlag,omitempty"`
	// Processing Status.
	ProcessingStatus *string `json:"processingStatus,omitempty"`
	// Parent Ticket ID.
	ParentTicketId NullableInt32 `json:"parentTicketId,omitempty"`
	// Merged Parent Ticket ID.
	MergedParentTicketId NullableInt32 `json:"mergedParentTicketId,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewTicketChangeLog instantiates a new TicketChangeLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketChangeLog() *TicketChangeLog {
	this := TicketChangeLog{}
	return &this
}

// NewTicketChangeLogWithDefaults instantiates a new TicketChangeLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketChangeLogWithDefaults() *TicketChangeLog {
	this := TicketChangeLog{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketChangeLog) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TicketChangeLog) SetId(v int32) {
	o.Id = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *TicketChangeLog) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *TicketChangeLog) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetProductInstanceId returns the ProductInstanceId field value if set, zero value otherwise.
func (o *TicketChangeLog) GetProductInstanceId() string {
	if o == nil || IsNil(o.ProductInstanceId) {
		var ret string
		return ret
	}
	return *o.ProductInstanceId
}

// GetProductInstanceIdOk returns a tuple with the ProductInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetProductInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductInstanceId) {
		return nil, false
	}
	return o.ProductInstanceId, true
}

// HasProductInstanceId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasProductInstanceId() bool {
	if o != nil && !IsNil(o.ProductInstanceId) {
		return true
	}

	return false
}

// SetProductInstanceId gets a reference to the given string and assigns it to the ProductInstanceId field.
func (o *TicketChangeLog) SetProductInstanceId(v string) {
	o.ProductInstanceId = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *TicketChangeLog) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *TicketChangeLog) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *TicketChangeLog) SetAction(v string) {
	o.Action = &v
}

// GetBoardId returns the BoardId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetBoardId() int32 {
	if o == nil || IsNil(o.BoardId.Get()) {
		var ret int32
		return ret
	}
	return *o.BoardId.Get()
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetBoardIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoardId.Get(), o.BoardId.IsSet()
}

// HasBoardId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasBoardId() bool {
	if o != nil && o.BoardId.IsSet() {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given NullableInt32 and assigns it to the BoardId field.
func (o *TicketChangeLog) SetBoardId(v int32) {
	o.BoardId.Set(&v)
}
// SetBoardIdNil sets the value for BoardId to be an explicit nil
func (o *TicketChangeLog) SetBoardIdNil() {
	o.BoardId.Set(nil)
}

// UnsetBoardId ensures that no value is present for BoardId, not even an explicit nil
func (o *TicketChangeLog) UnsetBoardId() {
	o.BoardId.Unset()
}

// GetBoardName returns the BoardName field value if set, zero value otherwise.
func (o *TicketChangeLog) GetBoardName() string {
	if o == nil || IsNil(o.BoardName) {
		var ret string
		return ret
	}
	return *o.BoardName
}

// GetBoardNameOk returns a tuple with the BoardName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetBoardNameOk() (*string, bool) {
	if o == nil || IsNil(o.BoardName) {
		return nil, false
	}
	return o.BoardName, true
}

// HasBoardName returns a boolean if a field has been set.
func (o *TicketChangeLog) HasBoardName() bool {
	if o != nil && !IsNil(o.BoardName) {
		return true
	}

	return false
}

// SetBoardName gets a reference to the given string and assigns it to the BoardName field.
func (o *TicketChangeLog) SetBoardName(v string) {
	o.BoardName = &v
}

// GetCompanyIdentifier returns the CompanyIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetCompanyIdentifier() int32 {
	if o == nil || IsNil(o.CompanyIdentifier.Get()) {
		var ret int32
		return ret
	}
	return *o.CompanyIdentifier.Get()
}

// GetCompanyIdentifierOk returns a tuple with the CompanyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetCompanyIdentifierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyIdentifier.Get(), o.CompanyIdentifier.IsSet()
}

// HasCompanyIdentifier returns a boolean if a field has been set.
func (o *TicketChangeLog) HasCompanyIdentifier() bool {
	if o != nil && o.CompanyIdentifier.IsSet() {
		return true
	}

	return false
}

// SetCompanyIdentifier gets a reference to the given NullableInt32 and assigns it to the CompanyIdentifier field.
func (o *TicketChangeLog) SetCompanyIdentifier(v int32) {
	o.CompanyIdentifier.Set(&v)
}
// SetCompanyIdentifierNil sets the value for CompanyIdentifier to be an explicit nil
func (o *TicketChangeLog) SetCompanyIdentifierNil() {
	o.CompanyIdentifier.Set(nil)
}

// UnsetCompanyIdentifier ensures that no value is present for CompanyIdentifier, not even an explicit nil
func (o *TicketChangeLog) UnsetCompanyIdentifier() {
	o.CompanyIdentifier.Unset()
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *TicketChangeLog) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *TicketChangeLog) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *TicketChangeLog) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetContactId returns the ContactId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetContactId() int32 {
	if o == nil || IsNil(o.ContactId.Get()) {
		var ret int32
		return ret
	}
	return *o.ContactId.Get()
}

// GetContactIdOk returns a tuple with the ContactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetContactIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactId.Get(), o.ContactId.IsSet()
}

// HasContactId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasContactId() bool {
	if o != nil && o.ContactId.IsSet() {
		return true
	}

	return false
}

// SetContactId gets a reference to the given NullableInt32 and assigns it to the ContactId field.
func (o *TicketChangeLog) SetContactId(v int32) {
	o.ContactId.Set(&v)
}
// SetContactIdNil sets the value for ContactId to be an explicit nil
func (o *TicketChangeLog) SetContactIdNil() {
	o.ContactId.Set(nil)
}

// UnsetContactId ensures that no value is present for ContactId, not even an explicit nil
func (o *TicketChangeLog) UnsetContactId() {
	o.ContactId.Unset()
}

// GetContactName returns the ContactName field value if set, zero value otherwise.
func (o *TicketChangeLog) GetContactName() string {
	if o == nil || IsNil(o.ContactName) {
		var ret string
		return ret
	}
	return *o.ContactName
}

// GetContactNameOk returns a tuple with the ContactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetContactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContactName) {
		return nil, false
	}
	return o.ContactName, true
}

// HasContactName returns a boolean if a field has been set.
func (o *TicketChangeLog) HasContactName() bool {
	if o != nil && !IsNil(o.ContactName) {
		return true
	}

	return false
}

// SetContactName gets a reference to the given string and assigns it to the ContactName field.
func (o *TicketChangeLog) SetContactName(v string) {
	o.ContactName = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *TicketChangeLog) GetImpact() string {
	if o == nil || IsNil(o.Impact) {
		var ret string
		return ret
	}
	return *o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetImpactOk() (*string, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *TicketChangeLog) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given string and assigns it to the Impact field.
func (o *TicketChangeLog) SetImpact(v string) {
	o.Impact = &v
}

// GetOwnerIdentifier returns the OwnerIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetOwnerIdentifier() int32 {
	if o == nil || IsNil(o.OwnerIdentifier.Get()) {
		var ret int32
		return ret
	}
	return *o.OwnerIdentifier.Get()
}

// GetOwnerIdentifierOk returns a tuple with the OwnerIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetOwnerIdentifierOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerIdentifier.Get(), o.OwnerIdentifier.IsSet()
}

// HasOwnerIdentifier returns a boolean if a field has been set.
func (o *TicketChangeLog) HasOwnerIdentifier() bool {
	if o != nil && o.OwnerIdentifier.IsSet() {
		return true
	}

	return false
}

// SetOwnerIdentifier gets a reference to the given NullableInt32 and assigns it to the OwnerIdentifier field.
func (o *TicketChangeLog) SetOwnerIdentifier(v int32) {
	o.OwnerIdentifier.Set(&v)
}
// SetOwnerIdentifierNil sets the value for OwnerIdentifier to be an explicit nil
func (o *TicketChangeLog) SetOwnerIdentifierNil() {
	o.OwnerIdentifier.Set(nil)
}

// UnsetOwnerIdentifier ensures that no value is present for OwnerIdentifier, not even an explicit nil
func (o *TicketChangeLog) UnsetOwnerIdentifier() {
	o.OwnerIdentifier.Unset()
}

// GetPriorityId returns the PriorityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetPriorityId() int32 {
	if o == nil || IsNil(o.PriorityId.Get()) {
		var ret int32
		return ret
	}
	return *o.PriorityId.Get()
}

// GetPriorityIdOk returns a tuple with the PriorityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetPriorityIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriorityId.Get(), o.PriorityId.IsSet()
}

// HasPriorityId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasPriorityId() bool {
	if o != nil && o.PriorityId.IsSet() {
		return true
	}

	return false
}

// SetPriorityId gets a reference to the given NullableInt32 and assigns it to the PriorityId field.
func (o *TicketChangeLog) SetPriorityId(v int32) {
	o.PriorityId.Set(&v)
}
// SetPriorityIdNil sets the value for PriorityId to be an explicit nil
func (o *TicketChangeLog) SetPriorityIdNil() {
	o.PriorityId.Set(nil)
}

// UnsetPriorityId ensures that no value is present for PriorityId, not even an explicit nil
func (o *TicketChangeLog) UnsetPriorityId() {
	o.PriorityId.Unset()
}

// GetPriorityLevel returns the PriorityLevel field value if set, zero value otherwise.
func (o *TicketChangeLog) GetPriorityLevel() string {
	if o == nil || IsNil(o.PriorityLevel) {
		var ret string
		return ret
	}
	return *o.PriorityLevel
}

// GetPriorityLevelOk returns a tuple with the PriorityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetPriorityLevelOk() (*string, bool) {
	if o == nil || IsNil(o.PriorityLevel) {
		return nil, false
	}
	return o.PriorityLevel, true
}

// HasPriorityLevel returns a boolean if a field has been set.
func (o *TicketChangeLog) HasPriorityLevel() bool {
	if o != nil && !IsNil(o.PriorityLevel) {
		return true
	}

	return false
}

// SetPriorityLevel gets a reference to the given string and assigns it to the PriorityLevel field.
func (o *TicketChangeLog) SetPriorityLevel(v string) {
	o.PriorityLevel = &v
}

// GetPriorityName returns the PriorityName field value if set, zero value otherwise.
func (o *TicketChangeLog) GetPriorityName() string {
	if o == nil || IsNil(o.PriorityName) {
		var ret string
		return ret
	}
	return *o.PriorityName
}

// GetPriorityNameOk returns a tuple with the PriorityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetPriorityNameOk() (*string, bool) {
	if o == nil || IsNil(o.PriorityName) {
		return nil, false
	}
	return o.PriorityName, true
}

// HasPriorityName returns a boolean if a field has been set.
func (o *TicketChangeLog) HasPriorityName() bool {
	if o != nil && !IsNil(o.PriorityName) {
		return true
	}

	return false
}

// SetPriorityName gets a reference to the given string and assigns it to the PriorityName field.
func (o *TicketChangeLog) SetPriorityName(v string) {
	o.PriorityName = &v
}

// GetPrioritySort returns the PrioritySort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetPrioritySort() int32 {
	if o == nil || IsNil(o.PrioritySort.Get()) {
		var ret int32
		return ret
	}
	return *o.PrioritySort.Get()
}

// GetPrioritySortOk returns a tuple with the PrioritySort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetPrioritySortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrioritySort.Get(), o.PrioritySort.IsSet()
}

// HasPrioritySort returns a boolean if a field has been set.
func (o *TicketChangeLog) HasPrioritySort() bool {
	if o != nil && o.PrioritySort.IsSet() {
		return true
	}

	return false
}

// SetPrioritySort gets a reference to the given NullableInt32 and assigns it to the PrioritySort field.
func (o *TicketChangeLog) SetPrioritySort(v int32) {
	o.PrioritySort.Set(&v)
}
// SetPrioritySortNil sets the value for PrioritySort to be an explicit nil
func (o *TicketChangeLog) SetPrioritySortNil() {
	o.PrioritySort.Set(nil)
}

// UnsetPrioritySort ensures that no value is present for PrioritySort, not even an explicit nil
func (o *TicketChangeLog) UnsetPrioritySort() {
	o.PrioritySort.Unset()
}

// GetResourceList returns the ResourceList field value if set, zero value otherwise.
func (o *TicketChangeLog) GetResourceList() string {
	if o == nil || IsNil(o.ResourceList) {
		var ret string
		return ret
	}
	return *o.ResourceList
}

// GetResourceListOk returns a tuple with the ResourceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetResourceListOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceList) {
		return nil, false
	}
	return o.ResourceList, true
}

// HasResourceList returns a boolean if a field has been set.
func (o *TicketChangeLog) HasResourceList() bool {
	if o != nil && !IsNil(o.ResourceList) {
		return true
	}

	return false
}

// SetResourceList gets a reference to the given string and assigns it to the ResourceList field.
func (o *TicketChangeLog) SetResourceList(v string) {
	o.ResourceList = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *TicketChangeLog) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *TicketChangeLog) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *TicketChangeLog) SetSeverity(v string) {
	o.Severity = &v
}

// GetSlaName returns the SlaName field value if set, zero value otherwise.
func (o *TicketChangeLog) GetSlaName() string {
	if o == nil || IsNil(o.SlaName) {
		var ret string
		return ret
	}
	return *o.SlaName
}

// GetSlaNameOk returns a tuple with the SlaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetSlaNameOk() (*string, bool) {
	if o == nil || IsNil(o.SlaName) {
		return nil, false
	}
	return o.SlaName, true
}

// HasSlaName returns a boolean if a field has been set.
func (o *TicketChangeLog) HasSlaName() bool {
	if o != nil && !IsNil(o.SlaName) {
		return true
	}

	return false
}

// SetSlaName gets a reference to the given string and assigns it to the SlaName field.
func (o *TicketChangeLog) SetSlaName(v string) {
	o.SlaName = &v
}

// GetSlaStatus returns the SlaStatus field value if set, zero value otherwise.
func (o *TicketChangeLog) GetSlaStatus() string {
	if o == nil || IsNil(o.SlaStatus) {
		var ret string
		return ret
	}
	return *o.SlaStatus
}

// GetSlaStatusOk returns a tuple with the SlaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetSlaStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SlaStatus) {
		return nil, false
	}
	return o.SlaStatus, true
}

// HasSlaStatus returns a boolean if a field has been set.
func (o *TicketChangeLog) HasSlaStatus() bool {
	if o != nil && !IsNil(o.SlaStatus) {
		return true
	}

	return false
}

// SetSlaStatus gets a reference to the given string and assigns it to the SlaStatus field.
func (o *TicketChangeLog) SetSlaStatus(v string) {
	o.SlaStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TicketChangeLog) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TicketChangeLog) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TicketChangeLog) SetStatus(v string) {
	o.Status = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *TicketChangeLog) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *TicketChangeLog) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *TicketChangeLog) SetSummary(v string) {
	o.Summary = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *TicketChangeLog) GetTeamName() string {
	if o == nil || IsNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetTeamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *TicketChangeLog) HasTeamName() bool {
	if o != nil && !IsNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *TicketChangeLog) SetTeamName(v string) {
	o.TeamName = &v
}

// GetTicketNumber returns the TicketNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetTicketNumber() int32 {
	if o == nil || IsNil(o.TicketNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.TicketNumber.Get()
}

// GetTicketNumberOk returns a tuple with the TicketNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetTicketNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TicketNumber.Get(), o.TicketNumber.IsSet()
}

// HasTicketNumber returns a boolean if a field has been set.
func (o *TicketChangeLog) HasTicketNumber() bool {
	if o != nil && o.TicketNumber.IsSet() {
		return true
	}

	return false
}

// SetTicketNumber gets a reference to the given NullableInt32 and assigns it to the TicketNumber field.
func (o *TicketChangeLog) SetTicketNumber(v int32) {
	o.TicketNumber.Set(&v)
}
// SetTicketNumberNil sets the value for TicketNumber to be an explicit nil
func (o *TicketChangeLog) SetTicketNumberNil() {
	o.TicketNumber.Set(nil)
}

// UnsetTicketNumber ensures that no value is present for TicketNumber, not even an explicit nil
func (o *TicketChangeLog) UnsetTicketNumber() {
	o.TicketNumber.Unset()
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *TicketChangeLog) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *TicketChangeLog) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *TicketChangeLog) SetRecordType(v string) {
	o.RecordType = &v
}

// GetTicketOwner returns the TicketOwner field value if set, zero value otherwise.
func (o *TicketChangeLog) GetTicketOwner() string {
	if o == nil || IsNil(o.TicketOwner) {
		var ret string
		return ret
	}
	return *o.TicketOwner
}

// GetTicketOwnerOk returns a tuple with the TicketOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetTicketOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.TicketOwner) {
		return nil, false
	}
	return o.TicketOwner, true
}

// HasTicketOwner returns a boolean if a field has been set.
func (o *TicketChangeLog) HasTicketOwner() bool {
	if o != nil && !IsNil(o.TicketOwner) {
		return true
	}

	return false
}

// SetTicketOwner gets a reference to the given string and assigns it to the TicketOwner field.
func (o *TicketChangeLog) SetTicketOwner(v string) {
	o.TicketOwner = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *TicketChangeLog) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *TicketChangeLog) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *TicketChangeLog) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *TicketChangeLog) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetCustomerUpdatedFlag returns the CustomerUpdatedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetCustomerUpdatedFlag() bool {
	if o == nil || IsNil(o.CustomerUpdatedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CustomerUpdatedFlag.Get()
}

// GetCustomerUpdatedFlagOk returns a tuple with the CustomerUpdatedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetCustomerUpdatedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerUpdatedFlag.Get(), o.CustomerUpdatedFlag.IsSet()
}

// HasCustomerUpdatedFlag returns a boolean if a field has been set.
func (o *TicketChangeLog) HasCustomerUpdatedFlag() bool {
	if o != nil && o.CustomerUpdatedFlag.IsSet() {
		return true
	}

	return false
}

// SetCustomerUpdatedFlag gets a reference to the given NullableBool and assigns it to the CustomerUpdatedFlag field.
func (o *TicketChangeLog) SetCustomerUpdatedFlag(v bool) {
	o.CustomerUpdatedFlag.Set(&v)
}
// SetCustomerUpdatedFlagNil sets the value for CustomerUpdatedFlag to be an explicit nil
func (o *TicketChangeLog) SetCustomerUpdatedFlagNil() {
	o.CustomerUpdatedFlag.Set(nil)
}

// UnsetCustomerUpdatedFlag ensures that no value is present for CustomerUpdatedFlag, not even an explicit nil
func (o *TicketChangeLog) UnsetCustomerUpdatedFlag() {
	o.CustomerUpdatedFlag.Unset()
}

// GetProcessingStatus returns the ProcessingStatus field value if set, zero value otherwise.
func (o *TicketChangeLog) GetProcessingStatus() string {
	if o == nil || IsNil(o.ProcessingStatus) {
		var ret string
		return ret
	}
	return *o.ProcessingStatus
}

// GetProcessingStatusOk returns a tuple with the ProcessingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetProcessingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingStatus) {
		return nil, false
	}
	return o.ProcessingStatus, true
}

// HasProcessingStatus returns a boolean if a field has been set.
func (o *TicketChangeLog) HasProcessingStatus() bool {
	if o != nil && !IsNil(o.ProcessingStatus) {
		return true
	}

	return false
}

// SetProcessingStatus gets a reference to the given string and assigns it to the ProcessingStatus field.
func (o *TicketChangeLog) SetProcessingStatus(v string) {
	o.ProcessingStatus = &v
}

// GetParentTicketId returns the ParentTicketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetParentTicketId() int32 {
	if o == nil || IsNil(o.ParentTicketId.Get()) {
		var ret int32
		return ret
	}
	return *o.ParentTicketId.Get()
}

// GetParentTicketIdOk returns a tuple with the ParentTicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetParentTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTicketId.Get(), o.ParentTicketId.IsSet()
}

// HasParentTicketId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasParentTicketId() bool {
	if o != nil && o.ParentTicketId.IsSet() {
		return true
	}

	return false
}

// SetParentTicketId gets a reference to the given NullableInt32 and assigns it to the ParentTicketId field.
func (o *TicketChangeLog) SetParentTicketId(v int32) {
	o.ParentTicketId.Set(&v)
}
// SetParentTicketIdNil sets the value for ParentTicketId to be an explicit nil
func (o *TicketChangeLog) SetParentTicketIdNil() {
	o.ParentTicketId.Set(nil)
}

// UnsetParentTicketId ensures that no value is present for ParentTicketId, not even an explicit nil
func (o *TicketChangeLog) UnsetParentTicketId() {
	o.ParentTicketId.Unset()
}

// GetMergedParentTicketId returns the MergedParentTicketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketChangeLog) GetMergedParentTicketId() int32 {
	if o == nil || IsNil(o.MergedParentTicketId.Get()) {
		var ret int32
		return ret
	}
	return *o.MergedParentTicketId.Get()
}

// GetMergedParentTicketIdOk returns a tuple with the MergedParentTicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketChangeLog) GetMergedParentTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergedParentTicketId.Get(), o.MergedParentTicketId.IsSet()
}

// HasMergedParentTicketId returns a boolean if a field has been set.
func (o *TicketChangeLog) HasMergedParentTicketId() bool {
	if o != nil && o.MergedParentTicketId.IsSet() {
		return true
	}

	return false
}

// SetMergedParentTicketId gets a reference to the given NullableInt32 and assigns it to the MergedParentTicketId field.
func (o *TicketChangeLog) SetMergedParentTicketId(v int32) {
	o.MergedParentTicketId.Set(&v)
}
// SetMergedParentTicketIdNil sets the value for MergedParentTicketId to be an explicit nil
func (o *TicketChangeLog) SetMergedParentTicketIdNil() {
	o.MergedParentTicketId.Set(nil)
}

// UnsetMergedParentTicketId ensures that no value is present for MergedParentTicketId, not even an explicit nil
func (o *TicketChangeLog) UnsetMergedParentTicketId() {
	o.MergedParentTicketId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TicketChangeLog) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketChangeLog) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TicketChangeLog) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TicketChangeLog) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TicketChangeLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketChangeLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partnerId"] = o.PartnerId
	}
	if !IsNil(o.ProductInstanceId) {
		toSerialize["productInstanceId"] = o.ProductInstanceId
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if o.BoardId.IsSet() {
		toSerialize["boardId"] = o.BoardId.Get()
	}
	if !IsNil(o.BoardName) {
		toSerialize["boardName"] = o.BoardName
	}
	if o.CompanyIdentifier.IsSet() {
		toSerialize["companyIdentifier"] = o.CompanyIdentifier.Get()
	}
	if !IsNil(o.CompanyName) {
		toSerialize["companyName"] = o.CompanyName
	}
	if o.ContactId.IsSet() {
		toSerialize["contactId"] = o.ContactId.Get()
	}
	if !IsNil(o.ContactName) {
		toSerialize["contactName"] = o.ContactName
	}
	if !IsNil(o.Impact) {
		toSerialize["impact"] = o.Impact
	}
	if o.OwnerIdentifier.IsSet() {
		toSerialize["ownerIdentifier"] = o.OwnerIdentifier.Get()
	}
	if o.PriorityId.IsSet() {
		toSerialize["priorityId"] = o.PriorityId.Get()
	}
	if !IsNil(o.PriorityLevel) {
		toSerialize["priorityLevel"] = o.PriorityLevel
	}
	if !IsNil(o.PriorityName) {
		toSerialize["priorityName"] = o.PriorityName
	}
	if o.PrioritySort.IsSet() {
		toSerialize["prioritySort"] = o.PrioritySort.Get()
	}
	if !IsNil(o.ResourceList) {
		toSerialize["resourceList"] = o.ResourceList
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.SlaName) {
		toSerialize["slaName"] = o.SlaName
	}
	if !IsNil(o.SlaStatus) {
		toSerialize["slaStatus"] = o.SlaStatus
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.TeamName) {
		toSerialize["teamName"] = o.TeamName
	}
	if o.TicketNumber.IsSet() {
		toSerialize["ticketNumber"] = o.TicketNumber.Get()
	}
	if !IsNil(o.RecordType) {
		toSerialize["recordType"] = o.RecordType
	}
	if !IsNil(o.TicketOwner) {
		toSerialize["ticketOwner"] = o.TicketOwner
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if o.CustomerUpdatedFlag.IsSet() {
		toSerialize["customerUpdatedFlag"] = o.CustomerUpdatedFlag.Get()
	}
	if !IsNil(o.ProcessingStatus) {
		toSerialize["processingStatus"] = o.ProcessingStatus
	}
	if o.ParentTicketId.IsSet() {
		toSerialize["parentTicketId"] = o.ParentTicketId.Get()
	}
	if o.MergedParentTicketId.IsSet() {
		toSerialize["mergedParentTicketId"] = o.MergedParentTicketId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTicketChangeLog struct {
	value *TicketChangeLog
	isSet bool
}

func (v NullableTicketChangeLog) Get() *TicketChangeLog {
	return v.value
}

func (v *NullableTicketChangeLog) Set(val *TicketChangeLog) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketChangeLog) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketChangeLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketChangeLog(val *TicketChangeLog) *NullableTicketChangeLog {
	return &NullableTicketChangeLog{value: val, isSet: true}
}

func (v NullableTicketChangeLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketChangeLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


