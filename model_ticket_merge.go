/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TicketMerge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketMerge{}

// TicketMerge struct for TicketMerge
type TicketMerge struct {
	MergeTicketIds []int32 `json:"mergeTicketIds"`
	Status ServiceStatusReference `json:"status"`
}

type _TicketMerge TicketMerge

// NewTicketMerge instantiates a new TicketMerge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketMerge(mergeTicketIds []int32, status ServiceStatusReference) *TicketMerge {
	this := TicketMerge{}
	this.MergeTicketIds = mergeTicketIds
	this.Status = status
	return &this
}

// NewTicketMergeWithDefaults instantiates a new TicketMerge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketMergeWithDefaults() *TicketMerge {
	this := TicketMerge{}
	return &this
}

// GetMergeTicketIds returns the MergeTicketIds field value
func (o *TicketMerge) GetMergeTicketIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.MergeTicketIds
}

// GetMergeTicketIdsOk returns a tuple with the MergeTicketIds field value
// and a boolean to check if the value has been set.
func (o *TicketMerge) GetMergeTicketIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergeTicketIds, true
}

// SetMergeTicketIds sets field value
func (o *TicketMerge) SetMergeTicketIds(v []int32) {
	o.MergeTicketIds = v
}

// GetStatus returns the Status field value
func (o *TicketMerge) GetStatus() ServiceStatusReference {
	if o == nil {
		var ret ServiceStatusReference
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TicketMerge) GetStatusOk() (*ServiceStatusReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TicketMerge) SetStatus(v ServiceStatusReference) {
	o.Status = v
}

func (o TicketMerge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketMerge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mergeTicketIds"] = o.MergeTicketIds
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *TicketMerge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mergeTicketIds",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicketMerge := _TicketMerge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicketMerge)

	if err != nil {
		return err
	}

	*o = TicketMerge(varTicketMerge)

	return err
}

type NullableTicketMerge struct {
	value *TicketMerge
	isSet bool
}

func (v NullableTicketMerge) Get() *TicketMerge {
	return v.value
}

func (v *NullableTicketMerge) Set(val *TicketMerge) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketMerge) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketMerge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketMerge(val *TicketMerge) *NullableTicketMerge {
	return &NullableTicketMerge{value: val, isSet: true}
}

func (v NullableTicketMerge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketMerge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


