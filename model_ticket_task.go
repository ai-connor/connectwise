/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the TicketTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketTask{}

// TicketTask struct for TicketTask
type TicketTask struct {
	Id *int32 `json:"id,omitempty"`
	TicketId NullableInt32 `json:"ticketId,omitempty"`
	Notes *string `json:"notes,omitempty"`
	ClosedFlag NullableBool `json:"closedFlag,omitempty"`
	Priority NullableInt32 `json:"priority,omitempty"`
	Schedule *ScheduleEntryReference `json:"schedule,omitempty"`
	Code *ServiceCodeReference `json:"code,omitempty"`
	Member *MemberReference `json:"member,omitempty"`
	Resolution *string `json:"resolution,omitempty"`
	Summary *string `json:"summary,omitempty"`
	ChildScheduleAction NullableString `json:"childScheduleAction,omitempty"`
	ChildTicketId NullableInt32 `json:"childTicketId,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewTicketTask instantiates a new TicketTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketTask() *TicketTask {
	this := TicketTask{}
	return &this
}

// NewTicketTaskWithDefaults instantiates a new TicketTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketTaskWithDefaults() *TicketTask {
	this := TicketTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TicketTask) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TicketTask) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TicketTask) SetId(v int32) {
	o.Id = &v
}

// GetTicketId returns the TicketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTask) GetTicketId() int32 {
	if o == nil || IsNil(o.TicketId.Get()) {
		var ret int32
		return ret
	}
	return *o.TicketId.Get()
}

// GetTicketIdOk returns a tuple with the TicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTask) GetTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TicketId.Get(), o.TicketId.IsSet()
}

// HasTicketId returns a boolean if a field has been set.
func (o *TicketTask) HasTicketId() bool {
	if o != nil && o.TicketId.IsSet() {
		return true
	}

	return false
}

// SetTicketId gets a reference to the given NullableInt32 and assigns it to the TicketId field.
func (o *TicketTask) SetTicketId(v int32) {
	o.TicketId.Set(&v)
}
// SetTicketIdNil sets the value for TicketId to be an explicit nil
func (o *TicketTask) SetTicketIdNil() {
	o.TicketId.Set(nil)
}

// UnsetTicketId ensures that no value is present for TicketId, not even an explicit nil
func (o *TicketTask) UnsetTicketId() {
	o.TicketId.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TicketTask) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TicketTask) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TicketTask) SetNotes(v string) {
	o.Notes = &v
}

// GetClosedFlag returns the ClosedFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTask) GetClosedFlag() bool {
	if o == nil || IsNil(o.ClosedFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ClosedFlag.Get()
}

// GetClosedFlagOk returns a tuple with the ClosedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTask) GetClosedFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedFlag.Get(), o.ClosedFlag.IsSet()
}

// HasClosedFlag returns a boolean if a field has been set.
func (o *TicketTask) HasClosedFlag() bool {
	if o != nil && o.ClosedFlag.IsSet() {
		return true
	}

	return false
}

// SetClosedFlag gets a reference to the given NullableBool and assigns it to the ClosedFlag field.
func (o *TicketTask) SetClosedFlag(v bool) {
	o.ClosedFlag.Set(&v)
}
// SetClosedFlagNil sets the value for ClosedFlag to be an explicit nil
func (o *TicketTask) SetClosedFlagNil() {
	o.ClosedFlag.Set(nil)
}

// UnsetClosedFlag ensures that no value is present for ClosedFlag, not even an explicit nil
func (o *TicketTask) UnsetClosedFlag() {
	o.ClosedFlag.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTask) GetPriority() int32 {
	if o == nil || IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTask) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *TicketTask) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *TicketTask) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *TicketTask) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *TicketTask) UnsetPriority() {
	o.Priority.Unset()
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *TicketTask) GetSchedule() ScheduleEntryReference {
	if o == nil || IsNil(o.Schedule) {
		var ret ScheduleEntryReference
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetScheduleOk() (*ScheduleEntryReference, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *TicketTask) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given ScheduleEntryReference and assigns it to the Schedule field.
func (o *TicketTask) SetSchedule(v ScheduleEntryReference) {
	o.Schedule = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TicketTask) GetCode() ServiceCodeReference {
	if o == nil || IsNil(o.Code) {
		var ret ServiceCodeReference
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetCodeOk() (*ServiceCodeReference, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TicketTask) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given ServiceCodeReference and assigns it to the Code field.
func (o *TicketTask) SetCode(v ServiceCodeReference) {
	o.Code = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *TicketTask) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *TicketTask) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *TicketTask) SetMember(v MemberReference) {
	o.Member = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *TicketTask) GetResolution() string {
	if o == nil || IsNil(o.Resolution) {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *TicketTask) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *TicketTask) SetResolution(v string) {
	o.Resolution = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *TicketTask) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *TicketTask) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *TicketTask) SetSummary(v string) {
	o.Summary = &v
}

// GetChildScheduleAction returns the ChildScheduleAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTask) GetChildScheduleAction() string {
	if o == nil || IsNil(o.ChildScheduleAction.Get()) {
		var ret string
		return ret
	}
	return *o.ChildScheduleAction.Get()
}

// GetChildScheduleActionOk returns a tuple with the ChildScheduleAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTask) GetChildScheduleActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildScheduleAction.Get(), o.ChildScheduleAction.IsSet()
}

// HasChildScheduleAction returns a boolean if a field has been set.
func (o *TicketTask) HasChildScheduleAction() bool {
	if o != nil && o.ChildScheduleAction.IsSet() {
		return true
	}

	return false
}

// SetChildScheduleAction gets a reference to the given NullableString and assigns it to the ChildScheduleAction field.
func (o *TicketTask) SetChildScheduleAction(v string) {
	o.ChildScheduleAction.Set(&v)
}
// SetChildScheduleActionNil sets the value for ChildScheduleAction to be an explicit nil
func (o *TicketTask) SetChildScheduleActionNil() {
	o.ChildScheduleAction.Set(nil)
}

// UnsetChildScheduleAction ensures that no value is present for ChildScheduleAction, not even an explicit nil
func (o *TicketTask) UnsetChildScheduleAction() {
	o.ChildScheduleAction.Unset()
}

// GetChildTicketId returns the ChildTicketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TicketTask) GetChildTicketId() int32 {
	if o == nil || IsNil(o.ChildTicketId.Get()) {
		var ret int32
		return ret
	}
	return *o.ChildTicketId.Get()
}

// GetChildTicketIdOk returns a tuple with the ChildTicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TicketTask) GetChildTicketIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChildTicketId.Get(), o.ChildTicketId.IsSet()
}

// HasChildTicketId returns a boolean if a field has been set.
func (o *TicketTask) HasChildTicketId() bool {
	if o != nil && o.ChildTicketId.IsSet() {
		return true
	}

	return false
}

// SetChildTicketId gets a reference to the given NullableInt32 and assigns it to the ChildTicketId field.
func (o *TicketTask) SetChildTicketId(v int32) {
	o.ChildTicketId.Set(&v)
}
// SetChildTicketIdNil sets the value for ChildTicketId to be an explicit nil
func (o *TicketTask) SetChildTicketIdNil() {
	o.ChildTicketId.Set(nil)
}

// UnsetChildTicketId ensures that no value is present for ChildTicketId, not even an explicit nil
func (o *TicketTask) UnsetChildTicketId() {
	o.ChildTicketId.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TicketTask) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketTask) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TicketTask) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TicketTask) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TicketTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.TicketId.IsSet() {
		toSerialize["ticketId"] = o.TicketId.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if o.ClosedFlag.IsSet() {
		toSerialize["closedFlag"] = o.ClosedFlag.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if o.ChildScheduleAction.IsSet() {
		toSerialize["childScheduleAction"] = o.ChildScheduleAction.Get()
	}
	if o.ChildTicketId.IsSet() {
		toSerialize["childTicketId"] = o.ChildTicketId.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTicketTask struct {
	value *TicketTask
	isSet bool
}

func (v NullableTicketTask) Get() *TicketTask {
	return v.value
}

func (v *NullableTicketTask) Set(val *TicketTask) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketTask(val *TicketTask) *NullableTicketTask {
	return &NullableTicketTask{value: val, isSet: true}
}

func (v NullableTicketTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


