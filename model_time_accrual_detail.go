/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeAccrualDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeAccrualDetail{}

// TimeAccrualDetail struct for TimeAccrualDetail
type TimeAccrualDetail struct {
	Id *int32 `json:"id,omitempty"`
	// Available types are: Holiday, PTO, Sick and Vacation.
	AccrualType NullableString `json:"accrualType"`
	StartYear NullableInt32 `json:"startYear"`
	EndYear NullableInt32 `json:"endYear"`
	Hours NullableFloat64 `json:"hours"`
	TimeAccrual *TimeAccrualReference `json:"timeAccrual,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _TimeAccrualDetail TimeAccrualDetail

// NewTimeAccrualDetail instantiates a new TimeAccrualDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeAccrualDetail(accrualType NullableString, startYear NullableInt32, endYear NullableInt32, hours NullableFloat64) *TimeAccrualDetail {
	this := TimeAccrualDetail{}
	this.AccrualType = accrualType
	this.StartYear = startYear
	this.EndYear = endYear
	this.Hours = hours
	return &this
}

// NewTimeAccrualDetailWithDefaults instantiates a new TimeAccrualDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeAccrualDetailWithDefaults() *TimeAccrualDetail {
	this := TimeAccrualDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimeAccrualDetail) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeAccrualDetail) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimeAccrualDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TimeAccrualDetail) SetId(v int32) {
	o.Id = &v
}

// GetAccrualType returns the AccrualType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TimeAccrualDetail) GetAccrualType() string {
	if o == nil || o.AccrualType.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccrualType.Get()
}

// GetAccrualTypeOk returns a tuple with the AccrualType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrualDetail) GetAccrualTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccrualType.Get(), o.AccrualType.IsSet()
}

// SetAccrualType sets field value
func (o *TimeAccrualDetail) SetAccrualType(v string) {
	o.AccrualType.Set(&v)
}

// GetStartYear returns the StartYear field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *TimeAccrualDetail) GetStartYear() int32 {
	if o == nil || o.StartYear.Get() == nil {
		var ret int32
		return ret
	}

	return *o.StartYear.Get()
}

// GetStartYearOk returns a tuple with the StartYear field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrualDetail) GetStartYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartYear.Get(), o.StartYear.IsSet()
}

// SetStartYear sets field value
func (o *TimeAccrualDetail) SetStartYear(v int32) {
	o.StartYear.Set(&v)
}

// GetEndYear returns the EndYear field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *TimeAccrualDetail) GetEndYear() int32 {
	if o == nil || o.EndYear.Get() == nil {
		var ret int32
		return ret
	}

	return *o.EndYear.Get()
}

// GetEndYearOk returns a tuple with the EndYear field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrualDetail) GetEndYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndYear.Get(), o.EndYear.IsSet()
}

// SetEndYear sets field value
func (o *TimeAccrualDetail) SetEndYear(v int32) {
	o.EndYear.Set(&v)
}

// GetHours returns the Hours field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *TimeAccrualDetail) GetHours() float64 {
	if o == nil || o.Hours.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Hours.Get()
}

// GetHoursOk returns a tuple with the Hours field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeAccrualDetail) GetHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hours.Get(), o.Hours.IsSet()
}

// SetHours sets field value
func (o *TimeAccrualDetail) SetHours(v float64) {
	o.Hours.Set(&v)
}

// GetTimeAccrual returns the TimeAccrual field value if set, zero value otherwise.
func (o *TimeAccrualDetail) GetTimeAccrual() TimeAccrualReference {
	if o == nil || IsNil(o.TimeAccrual) {
		var ret TimeAccrualReference
		return ret
	}
	return *o.TimeAccrual
}

// GetTimeAccrualOk returns a tuple with the TimeAccrual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeAccrualDetail) GetTimeAccrualOk() (*TimeAccrualReference, bool) {
	if o == nil || IsNil(o.TimeAccrual) {
		return nil, false
	}
	return o.TimeAccrual, true
}

// HasTimeAccrual returns a boolean if a field has been set.
func (o *TimeAccrualDetail) HasTimeAccrual() bool {
	if o != nil && !IsNil(o.TimeAccrual) {
		return true
	}

	return false
}

// SetTimeAccrual gets a reference to the given TimeAccrualReference and assigns it to the TimeAccrual field.
func (o *TimeAccrualDetail) SetTimeAccrual(v TimeAccrualReference) {
	o.TimeAccrual = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TimeAccrualDetail) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeAccrualDetail) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TimeAccrualDetail) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TimeAccrualDetail) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TimeAccrualDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeAccrualDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["accrualType"] = o.AccrualType.Get()
	toSerialize["startYear"] = o.StartYear.Get()
	toSerialize["endYear"] = o.EndYear.Get()
	toSerialize["hours"] = o.Hours.Get()
	if !IsNil(o.TimeAccrual) {
		toSerialize["timeAccrual"] = o.TimeAccrual
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TimeAccrualDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accrualType",
		"startYear",
		"endYear",
		"hours",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeAccrualDetail := _TimeAccrualDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeAccrualDetail)

	if err != nil {
		return err
	}

	*o = TimeAccrualDetail(varTimeAccrualDetail)

	return err
}

type NullableTimeAccrualDetail struct {
	value *TimeAccrualDetail
	isSet bool
}

func (v NullableTimeAccrualDetail) Get() *TimeAccrualDetail {
	return v.value
}

func (v *NullableTimeAccrualDetail) Set(val *TimeAccrualDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeAccrualDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeAccrualDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeAccrualDetail(val *TimeAccrualDetail) *NullableTimeAccrualDetail {
	return &NullableTimeAccrualDetail{value: val, isSet: true}
}

func (v NullableTimeAccrualDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeAccrualDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


