/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TimeEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeEntry{}

// TimeEntry struct for TimeEntry
type TimeEntry struct {
	Id *int32 `json:"id,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	CompanyType *string `json:"companyType,omitempty"`
	// If chargeToId is not specified, we asume you enter time against the company specified
	ChargeToId NullableInt32 `json:"chargeToId,omitempty"`
	// If chargeToId is not specified, we asume you enter time against the company specified
	ChargeToType NullableString `json:"chargeToType,omitempty"`
	Member *MemberReference `json:"member,omitempty"`
	LocationId NullableInt32 `json:"locationId,omitempty"`
	BusinessUnitId NullableInt32 `json:"businessUnitId,omitempty"`
	BusinessGroupDesc *string `json:"businessGroupDesc,omitempty"`
	Location *OwnerLevelReference `json:"location,omitempty"`
	Department *BillingUnitReference `json:"department,omitempty"`
	WorkType *WorkTypeReference `json:"workType,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	AgreementType *string `json:"agreementType,omitempty"`
	Activity *ActivityReference `json:"activity,omitempty"`
	OpportunityRecid NullableInt32 `json:"opportunityRecid,omitempty"`
	ProjectActivity *string `json:"projectActivity,omitempty"`
	Territory *string `json:"territory,omitempty"`
	TimeStart time.Time `json:"timeStart"`
	TimeEnd *time.Time `json:"timeEnd,omitempty"`
	HoursDeduct NullableFloat64 `json:"hoursDeduct,omitempty"`
	ActualHours NullableFloat64 `json:"actualHours,omitempty"`
	//  Required On Updates;
	BillableOption NullableString `json:"billableOption,omitempty"`
	Notes *string `json:"notes,omitempty"`
	InternalNotes *string `json:"internalNotes,omitempty"`
	AddToDetailDescriptionFlag NullableBool `json:"addToDetailDescriptionFlag,omitempty"`
	AddToInternalAnalysisFlag NullableBool `json:"addToInternalAnalysisFlag,omitempty"`
	AddToResolutionFlag NullableBool `json:"addToResolutionFlag,omitempty"`
	// This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
	EmailResourceFlag NullableBool `json:"emailResourceFlag,omitempty"`
	// This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
	EmailContactFlag NullableBool `json:"emailContactFlag,omitempty"`
	// This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
	EmailCcFlag NullableBool `json:"emailCcFlag,omitempty"`
	// To update this value use the /service/tickets endpoint automaticEmailCc field
	EmailCc *string `json:"emailCc,omitempty"`
	HoursBilled NullableFloat64 `json:"hoursBilled,omitempty"`
	InvoiceHours NullableFloat64 `json:"invoiceHours,omitempty"`
	HourlyCost *string `json:"hourlyCost,omitempty"`
	EnteredBy *string `json:"enteredBy,omitempty"`
	DateEntered *time.Time `json:"dateEntered,omitempty"`
	Invoice *InvoiceReference `json:"invoice,omitempty"`
	MobileGuid NullableString `json:"mobileGuid,omitempty"`
	// This field may only be Updated, it is defaulted on Create
	HourlyRate NullableFloat64 `json:"hourlyRate,omitempty"`
	OverageRate NullableFloat64 `json:"overageRate,omitempty"`
	AgreementHours NullableFloat64 `json:"agreementHours,omitempty"`
	AgreementAmount NullableFloat64 `json:"agreementAmount,omitempty"`
	AgreementAdjustment NullableFloat64 `json:"agreementAdjustment,omitempty"`
	Adjustment NullableFloat64 `json:"adjustment,omitempty"`
	InvoiceReady NullableInt32 `json:"invoiceReady,omitempty"`
	TimeSheet *TimeSheetReference `json:"timeSheet,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Ticket *TicketReference `json:"ticket,omitempty"`
	Project *ProjectReference `json:"project,omitempty"`
	Phase *ProjectPhaseReference `json:"phase,omitempty"`
	TicketBoard *string `json:"ticketBoard,omitempty"`
	TicketStatus *string `json:"ticketStatus,omitempty"`
	TicketType *string `json:"ticketType,omitempty"`
	TicketSubType *string `json:"ticketSubType,omitempty"`
	InvoiceFlag NullableBool `json:"invoiceFlag,omitempty"`
	ExtendedInvoiceAmount NullableFloat64 `json:"extendedInvoiceAmount,omitempty"`
	LocationName *string `json:"locationName,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
	CustomFields []CustomFieldValue `json:"customFields,omitempty"`
}

type _TimeEntry TimeEntry

// NewTimeEntry instantiates a new TimeEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeEntry(timeStart time.Time) *TimeEntry {
	this := TimeEntry{}
	this.TimeStart = timeStart
	return &this
}

// NewTimeEntryWithDefaults instantiates a new TimeEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeEntryWithDefaults() *TimeEntry {
	this := TimeEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimeEntry) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimeEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TimeEntry) SetId(v int32) {
	o.Id = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *TimeEntry) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *TimeEntry) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *TimeEntry) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *TimeEntry) GetCompanyType() string {
	if o == nil || IsNil(o.CompanyType) {
		var ret string
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetCompanyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *TimeEntry) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given string and assigns it to the CompanyType field.
func (o *TimeEntry) SetCompanyType(v string) {
	o.CompanyType = &v
}

// GetChargeToId returns the ChargeToId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetChargeToId() int32 {
	if o == nil || IsNil(o.ChargeToId.Get()) {
		var ret int32
		return ret
	}
	return *o.ChargeToId.Get()
}

// GetChargeToIdOk returns a tuple with the ChargeToId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetChargeToIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeToId.Get(), o.ChargeToId.IsSet()
}

// HasChargeToId returns a boolean if a field has been set.
func (o *TimeEntry) HasChargeToId() bool {
	if o != nil && o.ChargeToId.IsSet() {
		return true
	}

	return false
}

// SetChargeToId gets a reference to the given NullableInt32 and assigns it to the ChargeToId field.
func (o *TimeEntry) SetChargeToId(v int32) {
	o.ChargeToId.Set(&v)
}
// SetChargeToIdNil sets the value for ChargeToId to be an explicit nil
func (o *TimeEntry) SetChargeToIdNil() {
	o.ChargeToId.Set(nil)
}

// UnsetChargeToId ensures that no value is present for ChargeToId, not even an explicit nil
func (o *TimeEntry) UnsetChargeToId() {
	o.ChargeToId.Unset()
}

// GetChargeToType returns the ChargeToType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetChargeToType() string {
	if o == nil || IsNil(o.ChargeToType.Get()) {
		var ret string
		return ret
	}
	return *o.ChargeToType.Get()
}

// GetChargeToTypeOk returns a tuple with the ChargeToType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetChargeToTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargeToType.Get(), o.ChargeToType.IsSet()
}

// HasChargeToType returns a boolean if a field has been set.
func (o *TimeEntry) HasChargeToType() bool {
	if o != nil && o.ChargeToType.IsSet() {
		return true
	}

	return false
}

// SetChargeToType gets a reference to the given NullableString and assigns it to the ChargeToType field.
func (o *TimeEntry) SetChargeToType(v string) {
	o.ChargeToType.Set(&v)
}
// SetChargeToTypeNil sets the value for ChargeToType to be an explicit nil
func (o *TimeEntry) SetChargeToTypeNil() {
	o.ChargeToType.Set(nil)
}

// UnsetChargeToType ensures that no value is present for ChargeToType, not even an explicit nil
func (o *TimeEntry) UnsetChargeToType() {
	o.ChargeToType.Unset()
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *TimeEntry) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *TimeEntry) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *TimeEntry) SetMember(v MemberReference) {
	o.Member = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *TimeEntry) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *TimeEntry) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *TimeEntry) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *TimeEntry) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetBusinessUnitId() int32 {
	if o == nil || IsNil(o.BusinessUnitId.Get()) {
		var ret int32
		return ret
	}
	return *o.BusinessUnitId.Get()
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetBusinessUnitIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessUnitId.Get(), o.BusinessUnitId.IsSet()
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *TimeEntry) HasBusinessUnitId() bool {
	if o != nil && o.BusinessUnitId.IsSet() {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given NullableInt32 and assigns it to the BusinessUnitId field.
func (o *TimeEntry) SetBusinessUnitId(v int32) {
	o.BusinessUnitId.Set(&v)
}
// SetBusinessUnitIdNil sets the value for BusinessUnitId to be an explicit nil
func (o *TimeEntry) SetBusinessUnitIdNil() {
	o.BusinessUnitId.Set(nil)
}

// UnsetBusinessUnitId ensures that no value is present for BusinessUnitId, not even an explicit nil
func (o *TimeEntry) UnsetBusinessUnitId() {
	o.BusinessUnitId.Unset()
}

// GetBusinessGroupDesc returns the BusinessGroupDesc field value if set, zero value otherwise.
func (o *TimeEntry) GetBusinessGroupDesc() string {
	if o == nil || IsNil(o.BusinessGroupDesc) {
		var ret string
		return ret
	}
	return *o.BusinessGroupDesc
}

// GetBusinessGroupDescOk returns a tuple with the BusinessGroupDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetBusinessGroupDescOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessGroupDesc) {
		return nil, false
	}
	return o.BusinessGroupDesc, true
}

// HasBusinessGroupDesc returns a boolean if a field has been set.
func (o *TimeEntry) HasBusinessGroupDesc() bool {
	if o != nil && !IsNil(o.BusinessGroupDesc) {
		return true
	}

	return false
}

// SetBusinessGroupDesc gets a reference to the given string and assigns it to the BusinessGroupDesc field.
func (o *TimeEntry) SetBusinessGroupDesc(v string) {
	o.BusinessGroupDesc = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *TimeEntry) GetLocation() OwnerLevelReference {
	if o == nil || IsNil(o.Location) {
		var ret OwnerLevelReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetLocationOk() (*OwnerLevelReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *TimeEntry) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given OwnerLevelReference and assigns it to the Location field.
func (o *TimeEntry) SetLocation(v OwnerLevelReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *TimeEntry) GetDepartment() BillingUnitReference {
	if o == nil || IsNil(o.Department) {
		var ret BillingUnitReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetDepartmentOk() (*BillingUnitReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *TimeEntry) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given BillingUnitReference and assigns it to the Department field.
func (o *TimeEntry) SetDepartment(v BillingUnitReference) {
	o.Department = &v
}

// GetWorkType returns the WorkType field value if set, zero value otherwise.
func (o *TimeEntry) GetWorkType() WorkTypeReference {
	if o == nil || IsNil(o.WorkType) {
		var ret WorkTypeReference
		return ret
	}
	return *o.WorkType
}

// GetWorkTypeOk returns a tuple with the WorkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetWorkTypeOk() (*WorkTypeReference, bool) {
	if o == nil || IsNil(o.WorkType) {
		return nil, false
	}
	return o.WorkType, true
}

// HasWorkType returns a boolean if a field has been set.
func (o *TimeEntry) HasWorkType() bool {
	if o != nil && !IsNil(o.WorkType) {
		return true
	}

	return false
}

// SetWorkType gets a reference to the given WorkTypeReference and assigns it to the WorkType field.
func (o *TimeEntry) SetWorkType(v WorkTypeReference) {
	o.WorkType = &v
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *TimeEntry) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *TimeEntry) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *TimeEntry) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *TimeEntry) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *TimeEntry) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *TimeEntry) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetAgreementType returns the AgreementType field value if set, zero value otherwise.
func (o *TimeEntry) GetAgreementType() string {
	if o == nil || IsNil(o.AgreementType) {
		var ret string
		return ret
	}
	return *o.AgreementType
}

// GetAgreementTypeOk returns a tuple with the AgreementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetAgreementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AgreementType) {
		return nil, false
	}
	return o.AgreementType, true
}

// HasAgreementType returns a boolean if a field has been set.
func (o *TimeEntry) HasAgreementType() bool {
	if o != nil && !IsNil(o.AgreementType) {
		return true
	}

	return false
}

// SetAgreementType gets a reference to the given string and assigns it to the AgreementType field.
func (o *TimeEntry) SetAgreementType(v string) {
	o.AgreementType = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *TimeEntry) GetActivity() ActivityReference {
	if o == nil || IsNil(o.Activity) {
		var ret ActivityReference
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetActivityOk() (*ActivityReference, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *TimeEntry) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given ActivityReference and assigns it to the Activity field.
func (o *TimeEntry) SetActivity(v ActivityReference) {
	o.Activity = &v
}

// GetOpportunityRecid returns the OpportunityRecid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetOpportunityRecid() int32 {
	if o == nil || IsNil(o.OpportunityRecid.Get()) {
		var ret int32
		return ret
	}
	return *o.OpportunityRecid.Get()
}

// GetOpportunityRecidOk returns a tuple with the OpportunityRecid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetOpportunityRecidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpportunityRecid.Get(), o.OpportunityRecid.IsSet()
}

// HasOpportunityRecid returns a boolean if a field has been set.
func (o *TimeEntry) HasOpportunityRecid() bool {
	if o != nil && o.OpportunityRecid.IsSet() {
		return true
	}

	return false
}

// SetOpportunityRecid gets a reference to the given NullableInt32 and assigns it to the OpportunityRecid field.
func (o *TimeEntry) SetOpportunityRecid(v int32) {
	o.OpportunityRecid.Set(&v)
}
// SetOpportunityRecidNil sets the value for OpportunityRecid to be an explicit nil
func (o *TimeEntry) SetOpportunityRecidNil() {
	o.OpportunityRecid.Set(nil)
}

// UnsetOpportunityRecid ensures that no value is present for OpportunityRecid, not even an explicit nil
func (o *TimeEntry) UnsetOpportunityRecid() {
	o.OpportunityRecid.Unset()
}

// GetProjectActivity returns the ProjectActivity field value if set, zero value otherwise.
func (o *TimeEntry) GetProjectActivity() string {
	if o == nil || IsNil(o.ProjectActivity) {
		var ret string
		return ret
	}
	return *o.ProjectActivity
}

// GetProjectActivityOk returns a tuple with the ProjectActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetProjectActivityOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectActivity) {
		return nil, false
	}
	return o.ProjectActivity, true
}

// HasProjectActivity returns a boolean if a field has been set.
func (o *TimeEntry) HasProjectActivity() bool {
	if o != nil && !IsNil(o.ProjectActivity) {
		return true
	}

	return false
}

// SetProjectActivity gets a reference to the given string and assigns it to the ProjectActivity field.
func (o *TimeEntry) SetProjectActivity(v string) {
	o.ProjectActivity = &v
}

// GetTerritory returns the Territory field value if set, zero value otherwise.
func (o *TimeEntry) GetTerritory() string {
	if o == nil || IsNil(o.Territory) {
		var ret string
		return ret
	}
	return *o.Territory
}

// GetTerritoryOk returns a tuple with the Territory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTerritoryOk() (*string, bool) {
	if o == nil || IsNil(o.Territory) {
		return nil, false
	}
	return o.Territory, true
}

// HasTerritory returns a boolean if a field has been set.
func (o *TimeEntry) HasTerritory() bool {
	if o != nil && !IsNil(o.Territory) {
		return true
	}

	return false
}

// SetTerritory gets a reference to the given string and assigns it to the Territory field.
func (o *TimeEntry) SetTerritory(v string) {
	o.Territory = &v
}

// GetTimeStart returns the TimeStart field value
func (o *TimeEntry) GetTimeStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTimeStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStart, true
}

// SetTimeStart sets field value
func (o *TimeEntry) SetTimeStart(v time.Time) {
	o.TimeStart = v
}

// GetTimeEnd returns the TimeEnd field value if set, zero value otherwise.
func (o *TimeEntry) GetTimeEnd() time.Time {
	if o == nil || IsNil(o.TimeEnd) {
		var ret time.Time
		return ret
	}
	return *o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTimeEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeEnd) {
		return nil, false
	}
	return o.TimeEnd, true
}

// HasTimeEnd returns a boolean if a field has been set.
func (o *TimeEntry) HasTimeEnd() bool {
	if o != nil && !IsNil(o.TimeEnd) {
		return true
	}

	return false
}

// SetTimeEnd gets a reference to the given time.Time and assigns it to the TimeEnd field.
func (o *TimeEntry) SetTimeEnd(v time.Time) {
	o.TimeEnd = &v
}

// GetHoursDeduct returns the HoursDeduct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetHoursDeduct() float64 {
	if o == nil || IsNil(o.HoursDeduct.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursDeduct.Get()
}

// GetHoursDeductOk returns a tuple with the HoursDeduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetHoursDeductOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursDeduct.Get(), o.HoursDeduct.IsSet()
}

// HasHoursDeduct returns a boolean if a field has been set.
func (o *TimeEntry) HasHoursDeduct() bool {
	if o != nil && o.HoursDeduct.IsSet() {
		return true
	}

	return false
}

// SetHoursDeduct gets a reference to the given NullableFloat64 and assigns it to the HoursDeduct field.
func (o *TimeEntry) SetHoursDeduct(v float64) {
	o.HoursDeduct.Set(&v)
}
// SetHoursDeductNil sets the value for HoursDeduct to be an explicit nil
func (o *TimeEntry) SetHoursDeductNil() {
	o.HoursDeduct.Set(nil)
}

// UnsetHoursDeduct ensures that no value is present for HoursDeduct, not even an explicit nil
func (o *TimeEntry) UnsetHoursDeduct() {
	o.HoursDeduct.Unset()
}

// GetActualHours returns the ActualHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetActualHours() float64 {
	if o == nil || IsNil(o.ActualHours.Get()) {
		var ret float64
		return ret
	}
	return *o.ActualHours.Get()
}

// GetActualHoursOk returns a tuple with the ActualHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetActualHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActualHours.Get(), o.ActualHours.IsSet()
}

// HasActualHours returns a boolean if a field has been set.
func (o *TimeEntry) HasActualHours() bool {
	if o != nil && o.ActualHours.IsSet() {
		return true
	}

	return false
}

// SetActualHours gets a reference to the given NullableFloat64 and assigns it to the ActualHours field.
func (o *TimeEntry) SetActualHours(v float64) {
	o.ActualHours.Set(&v)
}
// SetActualHoursNil sets the value for ActualHours to be an explicit nil
func (o *TimeEntry) SetActualHoursNil() {
	o.ActualHours.Set(nil)
}

// UnsetActualHours ensures that no value is present for ActualHours, not even an explicit nil
func (o *TimeEntry) UnsetActualHours() {
	o.ActualHours.Unset()
}

// GetBillableOption returns the BillableOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetBillableOption() string {
	if o == nil || IsNil(o.BillableOption.Get()) {
		var ret string
		return ret
	}
	return *o.BillableOption.Get()
}

// GetBillableOptionOk returns a tuple with the BillableOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetBillableOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableOption.Get(), o.BillableOption.IsSet()
}

// HasBillableOption returns a boolean if a field has been set.
func (o *TimeEntry) HasBillableOption() bool {
	if o != nil && o.BillableOption.IsSet() {
		return true
	}

	return false
}

// SetBillableOption gets a reference to the given NullableString and assigns it to the BillableOption field.
func (o *TimeEntry) SetBillableOption(v string) {
	o.BillableOption.Set(&v)
}
// SetBillableOptionNil sets the value for BillableOption to be an explicit nil
func (o *TimeEntry) SetBillableOptionNil() {
	o.BillableOption.Set(nil)
}

// UnsetBillableOption ensures that no value is present for BillableOption, not even an explicit nil
func (o *TimeEntry) UnsetBillableOption() {
	o.BillableOption.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TimeEntry) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TimeEntry) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TimeEntry) SetNotes(v string) {
	o.Notes = &v
}

// GetInternalNotes returns the InternalNotes field value if set, zero value otherwise.
func (o *TimeEntry) GetInternalNotes() string {
	if o == nil || IsNil(o.InternalNotes) {
		var ret string
		return ret
	}
	return *o.InternalNotes
}

// GetInternalNotesOk returns a tuple with the InternalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetInternalNotesOk() (*string, bool) {
	if o == nil || IsNil(o.InternalNotes) {
		return nil, false
	}
	return o.InternalNotes, true
}

// HasInternalNotes returns a boolean if a field has been set.
func (o *TimeEntry) HasInternalNotes() bool {
	if o != nil && !IsNil(o.InternalNotes) {
		return true
	}

	return false
}

// SetInternalNotes gets a reference to the given string and assigns it to the InternalNotes field.
func (o *TimeEntry) SetInternalNotes(v string) {
	o.InternalNotes = &v
}

// GetAddToDetailDescriptionFlag returns the AddToDetailDescriptionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAddToDetailDescriptionFlag() bool {
	if o == nil || IsNil(o.AddToDetailDescriptionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddToDetailDescriptionFlag.Get()
}

// GetAddToDetailDescriptionFlagOk returns a tuple with the AddToDetailDescriptionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAddToDetailDescriptionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddToDetailDescriptionFlag.Get(), o.AddToDetailDescriptionFlag.IsSet()
}

// HasAddToDetailDescriptionFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasAddToDetailDescriptionFlag() bool {
	if o != nil && o.AddToDetailDescriptionFlag.IsSet() {
		return true
	}

	return false
}

// SetAddToDetailDescriptionFlag gets a reference to the given NullableBool and assigns it to the AddToDetailDescriptionFlag field.
func (o *TimeEntry) SetAddToDetailDescriptionFlag(v bool) {
	o.AddToDetailDescriptionFlag.Set(&v)
}
// SetAddToDetailDescriptionFlagNil sets the value for AddToDetailDescriptionFlag to be an explicit nil
func (o *TimeEntry) SetAddToDetailDescriptionFlagNil() {
	o.AddToDetailDescriptionFlag.Set(nil)
}

// UnsetAddToDetailDescriptionFlag ensures that no value is present for AddToDetailDescriptionFlag, not even an explicit nil
func (o *TimeEntry) UnsetAddToDetailDescriptionFlag() {
	o.AddToDetailDescriptionFlag.Unset()
}

// GetAddToInternalAnalysisFlag returns the AddToInternalAnalysisFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAddToInternalAnalysisFlag() bool {
	if o == nil || IsNil(o.AddToInternalAnalysisFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddToInternalAnalysisFlag.Get()
}

// GetAddToInternalAnalysisFlagOk returns a tuple with the AddToInternalAnalysisFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAddToInternalAnalysisFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddToInternalAnalysisFlag.Get(), o.AddToInternalAnalysisFlag.IsSet()
}

// HasAddToInternalAnalysisFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasAddToInternalAnalysisFlag() bool {
	if o != nil && o.AddToInternalAnalysisFlag.IsSet() {
		return true
	}

	return false
}

// SetAddToInternalAnalysisFlag gets a reference to the given NullableBool and assigns it to the AddToInternalAnalysisFlag field.
func (o *TimeEntry) SetAddToInternalAnalysisFlag(v bool) {
	o.AddToInternalAnalysisFlag.Set(&v)
}
// SetAddToInternalAnalysisFlagNil sets the value for AddToInternalAnalysisFlag to be an explicit nil
func (o *TimeEntry) SetAddToInternalAnalysisFlagNil() {
	o.AddToInternalAnalysisFlag.Set(nil)
}

// UnsetAddToInternalAnalysisFlag ensures that no value is present for AddToInternalAnalysisFlag, not even an explicit nil
func (o *TimeEntry) UnsetAddToInternalAnalysisFlag() {
	o.AddToInternalAnalysisFlag.Unset()
}

// GetAddToResolutionFlag returns the AddToResolutionFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAddToResolutionFlag() bool {
	if o == nil || IsNil(o.AddToResolutionFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AddToResolutionFlag.Get()
}

// GetAddToResolutionFlagOk returns a tuple with the AddToResolutionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAddToResolutionFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddToResolutionFlag.Get(), o.AddToResolutionFlag.IsSet()
}

// HasAddToResolutionFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasAddToResolutionFlag() bool {
	if o != nil && o.AddToResolutionFlag.IsSet() {
		return true
	}

	return false
}

// SetAddToResolutionFlag gets a reference to the given NullableBool and assigns it to the AddToResolutionFlag field.
func (o *TimeEntry) SetAddToResolutionFlag(v bool) {
	o.AddToResolutionFlag.Set(&v)
}
// SetAddToResolutionFlagNil sets the value for AddToResolutionFlag to be an explicit nil
func (o *TimeEntry) SetAddToResolutionFlagNil() {
	o.AddToResolutionFlag.Set(nil)
}

// UnsetAddToResolutionFlag ensures that no value is present for AddToResolutionFlag, not even an explicit nil
func (o *TimeEntry) UnsetAddToResolutionFlag() {
	o.AddToResolutionFlag.Unset()
}

// GetEmailResourceFlag returns the EmailResourceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetEmailResourceFlag() bool {
	if o == nil || IsNil(o.EmailResourceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailResourceFlag.Get()
}

// GetEmailResourceFlagOk returns a tuple with the EmailResourceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetEmailResourceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailResourceFlag.Get(), o.EmailResourceFlag.IsSet()
}

// HasEmailResourceFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasEmailResourceFlag() bool {
	if o != nil && o.EmailResourceFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailResourceFlag gets a reference to the given NullableBool and assigns it to the EmailResourceFlag field.
func (o *TimeEntry) SetEmailResourceFlag(v bool) {
	o.EmailResourceFlag.Set(&v)
}
// SetEmailResourceFlagNil sets the value for EmailResourceFlag to be an explicit nil
func (o *TimeEntry) SetEmailResourceFlagNil() {
	o.EmailResourceFlag.Set(nil)
}

// UnsetEmailResourceFlag ensures that no value is present for EmailResourceFlag, not even an explicit nil
func (o *TimeEntry) UnsetEmailResourceFlag() {
	o.EmailResourceFlag.Unset()
}

// GetEmailContactFlag returns the EmailContactFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetEmailContactFlag() bool {
	if o == nil || IsNil(o.EmailContactFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailContactFlag.Get()
}

// GetEmailContactFlagOk returns a tuple with the EmailContactFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetEmailContactFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailContactFlag.Get(), o.EmailContactFlag.IsSet()
}

// HasEmailContactFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasEmailContactFlag() bool {
	if o != nil && o.EmailContactFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailContactFlag gets a reference to the given NullableBool and assigns it to the EmailContactFlag field.
func (o *TimeEntry) SetEmailContactFlag(v bool) {
	o.EmailContactFlag.Set(&v)
}
// SetEmailContactFlagNil sets the value for EmailContactFlag to be an explicit nil
func (o *TimeEntry) SetEmailContactFlagNil() {
	o.EmailContactFlag.Set(nil)
}

// UnsetEmailContactFlag ensures that no value is present for EmailContactFlag, not even an explicit nil
func (o *TimeEntry) UnsetEmailContactFlag() {
	o.EmailContactFlag.Unset()
}

// GetEmailCcFlag returns the EmailCcFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetEmailCcFlag() bool {
	if o == nil || IsNil(o.EmailCcFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailCcFlag.Get()
}

// GetEmailCcFlagOk returns a tuple with the EmailCcFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetEmailCcFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailCcFlag.Get(), o.EmailCcFlag.IsSet()
}

// HasEmailCcFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasEmailCcFlag() bool {
	if o != nil && o.EmailCcFlag.IsSet() {
		return true
	}

	return false
}

// SetEmailCcFlag gets a reference to the given NullableBool and assigns it to the EmailCcFlag field.
func (o *TimeEntry) SetEmailCcFlag(v bool) {
	o.EmailCcFlag.Set(&v)
}
// SetEmailCcFlagNil sets the value for EmailCcFlag to be an explicit nil
func (o *TimeEntry) SetEmailCcFlagNil() {
	o.EmailCcFlag.Set(nil)
}

// UnsetEmailCcFlag ensures that no value is present for EmailCcFlag, not even an explicit nil
func (o *TimeEntry) UnsetEmailCcFlag() {
	o.EmailCcFlag.Unset()
}

// GetEmailCc returns the EmailCc field value if set, zero value otherwise.
func (o *TimeEntry) GetEmailCc() string {
	if o == nil || IsNil(o.EmailCc) {
		var ret string
		return ret
	}
	return *o.EmailCc
}

// GetEmailCcOk returns a tuple with the EmailCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetEmailCcOk() (*string, bool) {
	if o == nil || IsNil(o.EmailCc) {
		return nil, false
	}
	return o.EmailCc, true
}

// HasEmailCc returns a boolean if a field has been set.
func (o *TimeEntry) HasEmailCc() bool {
	if o != nil && !IsNil(o.EmailCc) {
		return true
	}

	return false
}

// SetEmailCc gets a reference to the given string and assigns it to the EmailCc field.
func (o *TimeEntry) SetEmailCc(v string) {
	o.EmailCc = &v
}

// GetHoursBilled returns the HoursBilled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetHoursBilled() float64 {
	if o == nil || IsNil(o.HoursBilled.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursBilled.Get()
}

// GetHoursBilledOk returns a tuple with the HoursBilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetHoursBilledOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursBilled.Get(), o.HoursBilled.IsSet()
}

// HasHoursBilled returns a boolean if a field has been set.
func (o *TimeEntry) HasHoursBilled() bool {
	if o != nil && o.HoursBilled.IsSet() {
		return true
	}

	return false
}

// SetHoursBilled gets a reference to the given NullableFloat64 and assigns it to the HoursBilled field.
func (o *TimeEntry) SetHoursBilled(v float64) {
	o.HoursBilled.Set(&v)
}
// SetHoursBilledNil sets the value for HoursBilled to be an explicit nil
func (o *TimeEntry) SetHoursBilledNil() {
	o.HoursBilled.Set(nil)
}

// UnsetHoursBilled ensures that no value is present for HoursBilled, not even an explicit nil
func (o *TimeEntry) UnsetHoursBilled() {
	o.HoursBilled.Unset()
}

// GetInvoiceHours returns the InvoiceHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetInvoiceHours() float64 {
	if o == nil || IsNil(o.InvoiceHours.Get()) {
		var ret float64
		return ret
	}
	return *o.InvoiceHours.Get()
}

// GetInvoiceHoursOk returns a tuple with the InvoiceHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetInvoiceHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceHours.Get(), o.InvoiceHours.IsSet()
}

// HasInvoiceHours returns a boolean if a field has been set.
func (o *TimeEntry) HasInvoiceHours() bool {
	if o != nil && o.InvoiceHours.IsSet() {
		return true
	}

	return false
}

// SetInvoiceHours gets a reference to the given NullableFloat64 and assigns it to the InvoiceHours field.
func (o *TimeEntry) SetInvoiceHours(v float64) {
	o.InvoiceHours.Set(&v)
}
// SetInvoiceHoursNil sets the value for InvoiceHours to be an explicit nil
func (o *TimeEntry) SetInvoiceHoursNil() {
	o.InvoiceHours.Set(nil)
}

// UnsetInvoiceHours ensures that no value is present for InvoiceHours, not even an explicit nil
func (o *TimeEntry) UnsetInvoiceHours() {
	o.InvoiceHours.Unset()
}

// GetHourlyCost returns the HourlyCost field value if set, zero value otherwise.
func (o *TimeEntry) GetHourlyCost() string {
	if o == nil || IsNil(o.HourlyCost) {
		var ret string
		return ret
	}
	return *o.HourlyCost
}

// GetHourlyCostOk returns a tuple with the HourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetHourlyCostOk() (*string, bool) {
	if o == nil || IsNil(o.HourlyCost) {
		return nil, false
	}
	return o.HourlyCost, true
}

// HasHourlyCost returns a boolean if a field has been set.
func (o *TimeEntry) HasHourlyCost() bool {
	if o != nil && !IsNil(o.HourlyCost) {
		return true
	}

	return false
}

// SetHourlyCost gets a reference to the given string and assigns it to the HourlyCost field.
func (o *TimeEntry) SetHourlyCost(v string) {
	o.HourlyCost = &v
}

// GetEnteredBy returns the EnteredBy field value if set, zero value otherwise.
func (o *TimeEntry) GetEnteredBy() string {
	if o == nil || IsNil(o.EnteredBy) {
		var ret string
		return ret
	}
	return *o.EnteredBy
}

// GetEnteredByOk returns a tuple with the EnteredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetEnteredByOk() (*string, bool) {
	if o == nil || IsNil(o.EnteredBy) {
		return nil, false
	}
	return o.EnteredBy, true
}

// HasEnteredBy returns a boolean if a field has been set.
func (o *TimeEntry) HasEnteredBy() bool {
	if o != nil && !IsNil(o.EnteredBy) {
		return true
	}

	return false
}

// SetEnteredBy gets a reference to the given string and assigns it to the EnteredBy field.
func (o *TimeEntry) SetEnteredBy(v string) {
	o.EnteredBy = &v
}

// GetDateEntered returns the DateEntered field value if set, zero value otherwise.
func (o *TimeEntry) GetDateEntered() time.Time {
	if o == nil || IsNil(o.DateEntered) {
		var ret time.Time
		return ret
	}
	return *o.DateEntered
}

// GetDateEnteredOk returns a tuple with the DateEntered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetDateEnteredOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEntered) {
		return nil, false
	}
	return o.DateEntered, true
}

// HasDateEntered returns a boolean if a field has been set.
func (o *TimeEntry) HasDateEntered() bool {
	if o != nil && !IsNil(o.DateEntered) {
		return true
	}

	return false
}

// SetDateEntered gets a reference to the given time.Time and assigns it to the DateEntered field.
func (o *TimeEntry) SetDateEntered(v time.Time) {
	o.DateEntered = &v
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *TimeEntry) GetInvoice() InvoiceReference {
	if o == nil || IsNil(o.Invoice) {
		var ret InvoiceReference
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetInvoiceOk() (*InvoiceReference, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *TimeEntry) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given InvoiceReference and assigns it to the Invoice field.
func (o *TimeEntry) SetInvoice(v InvoiceReference) {
	o.Invoice = &v
}

// GetMobileGuid returns the MobileGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetMobileGuid() string {
	if o == nil || IsNil(o.MobileGuid.Get()) {
		var ret string
		return ret
	}
	return *o.MobileGuid.Get()
}

// GetMobileGuidOk returns a tuple with the MobileGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetMobileGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MobileGuid.Get(), o.MobileGuid.IsSet()
}

// HasMobileGuid returns a boolean if a field has been set.
func (o *TimeEntry) HasMobileGuid() bool {
	if o != nil && o.MobileGuid.IsSet() {
		return true
	}

	return false
}

// SetMobileGuid gets a reference to the given NullableString and assigns it to the MobileGuid field.
func (o *TimeEntry) SetMobileGuid(v string) {
	o.MobileGuid.Set(&v)
}
// SetMobileGuidNil sets the value for MobileGuid to be an explicit nil
func (o *TimeEntry) SetMobileGuidNil() {
	o.MobileGuid.Set(nil)
}

// UnsetMobileGuid ensures that no value is present for MobileGuid, not even an explicit nil
func (o *TimeEntry) UnsetMobileGuid() {
	o.MobileGuid.Unset()
}

// GetHourlyRate returns the HourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetHourlyRate() float64 {
	if o == nil || IsNil(o.HourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyRate.Get()
}

// GetHourlyRateOk returns a tuple with the HourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyRate.Get(), o.HourlyRate.IsSet()
}

// HasHourlyRate returns a boolean if a field has been set.
func (o *TimeEntry) HasHourlyRate() bool {
	if o != nil && o.HourlyRate.IsSet() {
		return true
	}

	return false
}

// SetHourlyRate gets a reference to the given NullableFloat64 and assigns it to the HourlyRate field.
func (o *TimeEntry) SetHourlyRate(v float64) {
	o.HourlyRate.Set(&v)
}
// SetHourlyRateNil sets the value for HourlyRate to be an explicit nil
func (o *TimeEntry) SetHourlyRateNil() {
	o.HourlyRate.Set(nil)
}

// UnsetHourlyRate ensures that no value is present for HourlyRate, not even an explicit nil
func (o *TimeEntry) UnsetHourlyRate() {
	o.HourlyRate.Unset()
}

// GetOverageRate returns the OverageRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetOverageRate() float64 {
	if o == nil || IsNil(o.OverageRate.Get()) {
		var ret float64
		return ret
	}
	return *o.OverageRate.Get()
}

// GetOverageRateOk returns a tuple with the OverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetOverageRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverageRate.Get(), o.OverageRate.IsSet()
}

// HasOverageRate returns a boolean if a field has been set.
func (o *TimeEntry) HasOverageRate() bool {
	if o != nil && o.OverageRate.IsSet() {
		return true
	}

	return false
}

// SetOverageRate gets a reference to the given NullableFloat64 and assigns it to the OverageRate field.
func (o *TimeEntry) SetOverageRate(v float64) {
	o.OverageRate.Set(&v)
}
// SetOverageRateNil sets the value for OverageRate to be an explicit nil
func (o *TimeEntry) SetOverageRateNil() {
	o.OverageRate.Set(nil)
}

// UnsetOverageRate ensures that no value is present for OverageRate, not even an explicit nil
func (o *TimeEntry) UnsetOverageRate() {
	o.OverageRate.Unset()
}

// GetAgreementHours returns the AgreementHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAgreementHours() float64 {
	if o == nil || IsNil(o.AgreementHours.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementHours.Get()
}

// GetAgreementHoursOk returns a tuple with the AgreementHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAgreementHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementHours.Get(), o.AgreementHours.IsSet()
}

// HasAgreementHours returns a boolean if a field has been set.
func (o *TimeEntry) HasAgreementHours() bool {
	if o != nil && o.AgreementHours.IsSet() {
		return true
	}

	return false
}

// SetAgreementHours gets a reference to the given NullableFloat64 and assigns it to the AgreementHours field.
func (o *TimeEntry) SetAgreementHours(v float64) {
	o.AgreementHours.Set(&v)
}
// SetAgreementHoursNil sets the value for AgreementHours to be an explicit nil
func (o *TimeEntry) SetAgreementHoursNil() {
	o.AgreementHours.Set(nil)
}

// UnsetAgreementHours ensures that no value is present for AgreementHours, not even an explicit nil
func (o *TimeEntry) UnsetAgreementHours() {
	o.AgreementHours.Unset()
}

// GetAgreementAmount returns the AgreementAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAgreementAmount() float64 {
	if o == nil || IsNil(o.AgreementAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAmount.Get()
}

// GetAgreementAmountOk returns a tuple with the AgreementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAgreementAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAmount.Get(), o.AgreementAmount.IsSet()
}

// HasAgreementAmount returns a boolean if a field has been set.
func (o *TimeEntry) HasAgreementAmount() bool {
	if o != nil && o.AgreementAmount.IsSet() {
		return true
	}

	return false
}

// SetAgreementAmount gets a reference to the given NullableFloat64 and assigns it to the AgreementAmount field.
func (o *TimeEntry) SetAgreementAmount(v float64) {
	o.AgreementAmount.Set(&v)
}
// SetAgreementAmountNil sets the value for AgreementAmount to be an explicit nil
func (o *TimeEntry) SetAgreementAmountNil() {
	o.AgreementAmount.Set(nil)
}

// UnsetAgreementAmount ensures that no value is present for AgreementAmount, not even an explicit nil
func (o *TimeEntry) UnsetAgreementAmount() {
	o.AgreementAmount.Unset()
}

// GetAgreementAdjustment returns the AgreementAdjustment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAgreementAdjustment() float64 {
	if o == nil || IsNil(o.AgreementAdjustment.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAdjustment.Get()
}

// GetAgreementAdjustmentOk returns a tuple with the AgreementAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAgreementAdjustmentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAdjustment.Get(), o.AgreementAdjustment.IsSet()
}

// HasAgreementAdjustment returns a boolean if a field has been set.
func (o *TimeEntry) HasAgreementAdjustment() bool {
	if o != nil && o.AgreementAdjustment.IsSet() {
		return true
	}

	return false
}

// SetAgreementAdjustment gets a reference to the given NullableFloat64 and assigns it to the AgreementAdjustment field.
func (o *TimeEntry) SetAgreementAdjustment(v float64) {
	o.AgreementAdjustment.Set(&v)
}
// SetAgreementAdjustmentNil sets the value for AgreementAdjustment to be an explicit nil
func (o *TimeEntry) SetAgreementAdjustmentNil() {
	o.AgreementAdjustment.Set(nil)
}

// UnsetAgreementAdjustment ensures that no value is present for AgreementAdjustment, not even an explicit nil
func (o *TimeEntry) UnsetAgreementAdjustment() {
	o.AgreementAdjustment.Unset()
}

// GetAdjustment returns the Adjustment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetAdjustment() float64 {
	if o == nil || IsNil(o.Adjustment.Get()) {
		var ret float64
		return ret
	}
	return *o.Adjustment.Get()
}

// GetAdjustmentOk returns a tuple with the Adjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetAdjustmentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjustment.Get(), o.Adjustment.IsSet()
}

// HasAdjustment returns a boolean if a field has been set.
func (o *TimeEntry) HasAdjustment() bool {
	if o != nil && o.Adjustment.IsSet() {
		return true
	}

	return false
}

// SetAdjustment gets a reference to the given NullableFloat64 and assigns it to the Adjustment field.
func (o *TimeEntry) SetAdjustment(v float64) {
	o.Adjustment.Set(&v)
}
// SetAdjustmentNil sets the value for Adjustment to be an explicit nil
func (o *TimeEntry) SetAdjustmentNil() {
	o.Adjustment.Set(nil)
}

// UnsetAdjustment ensures that no value is present for Adjustment, not even an explicit nil
func (o *TimeEntry) UnsetAdjustment() {
	o.Adjustment.Unset()
}

// GetInvoiceReady returns the InvoiceReady field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetInvoiceReady() int32 {
	if o == nil || IsNil(o.InvoiceReady.Get()) {
		var ret int32
		return ret
	}
	return *o.InvoiceReady.Get()
}

// GetInvoiceReadyOk returns a tuple with the InvoiceReady field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetInvoiceReadyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceReady.Get(), o.InvoiceReady.IsSet()
}

// HasInvoiceReady returns a boolean if a field has been set.
func (o *TimeEntry) HasInvoiceReady() bool {
	if o != nil && o.InvoiceReady.IsSet() {
		return true
	}

	return false
}

// SetInvoiceReady gets a reference to the given NullableInt32 and assigns it to the InvoiceReady field.
func (o *TimeEntry) SetInvoiceReady(v int32) {
	o.InvoiceReady.Set(&v)
}
// SetInvoiceReadyNil sets the value for InvoiceReady to be an explicit nil
func (o *TimeEntry) SetInvoiceReadyNil() {
	o.InvoiceReady.Set(nil)
}

// UnsetInvoiceReady ensures that no value is present for InvoiceReady, not even an explicit nil
func (o *TimeEntry) UnsetInvoiceReady() {
	o.InvoiceReady.Unset()
}

// GetTimeSheet returns the TimeSheet field value if set, zero value otherwise.
func (o *TimeEntry) GetTimeSheet() TimeSheetReference {
	if o == nil || IsNil(o.TimeSheet) {
		var ret TimeSheetReference
		return ret
	}
	return *o.TimeSheet
}

// GetTimeSheetOk returns a tuple with the TimeSheet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTimeSheetOk() (*TimeSheetReference, bool) {
	if o == nil || IsNil(o.TimeSheet) {
		return nil, false
	}
	return o.TimeSheet, true
}

// HasTimeSheet returns a boolean if a field has been set.
func (o *TimeEntry) HasTimeSheet() bool {
	if o != nil && !IsNil(o.TimeSheet) {
		return true
	}

	return false
}

// SetTimeSheet gets a reference to the given TimeSheetReference and assigns it to the TimeSheet field.
func (o *TimeEntry) SetTimeSheet(v TimeSheetReference) {
	o.TimeSheet = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TimeEntry) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *TimeEntry) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TimeEntry) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TimeEntry) UnsetStatus() {
	o.Status.Unset()
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *TimeEntry) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *TimeEntry) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *TimeEntry) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *TimeEntry) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *TimeEntry) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *TimeEntry) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *TimeEntry) GetPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.Phase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *TimeEntry) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given ProjectPhaseReference and assigns it to the Phase field.
func (o *TimeEntry) SetPhase(v ProjectPhaseReference) {
	o.Phase = &v
}

// GetTicketBoard returns the TicketBoard field value if set, zero value otherwise.
func (o *TimeEntry) GetTicketBoard() string {
	if o == nil || IsNil(o.TicketBoard) {
		var ret string
		return ret
	}
	return *o.TicketBoard
}

// GetTicketBoardOk returns a tuple with the TicketBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTicketBoardOk() (*string, bool) {
	if o == nil || IsNil(o.TicketBoard) {
		return nil, false
	}
	return o.TicketBoard, true
}

// HasTicketBoard returns a boolean if a field has been set.
func (o *TimeEntry) HasTicketBoard() bool {
	if o != nil && !IsNil(o.TicketBoard) {
		return true
	}

	return false
}

// SetTicketBoard gets a reference to the given string and assigns it to the TicketBoard field.
func (o *TimeEntry) SetTicketBoard(v string) {
	o.TicketBoard = &v
}

// GetTicketStatus returns the TicketStatus field value if set, zero value otherwise.
func (o *TimeEntry) GetTicketStatus() string {
	if o == nil || IsNil(o.TicketStatus) {
		var ret string
		return ret
	}
	return *o.TicketStatus
}

// GetTicketStatusOk returns a tuple with the TicketStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTicketStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TicketStatus) {
		return nil, false
	}
	return o.TicketStatus, true
}

// HasTicketStatus returns a boolean if a field has been set.
func (o *TimeEntry) HasTicketStatus() bool {
	if o != nil && !IsNil(o.TicketStatus) {
		return true
	}

	return false
}

// SetTicketStatus gets a reference to the given string and assigns it to the TicketStatus field.
func (o *TimeEntry) SetTicketStatus(v string) {
	o.TicketStatus = &v
}

// GetTicketType returns the TicketType field value if set, zero value otherwise.
func (o *TimeEntry) GetTicketType() string {
	if o == nil || IsNil(o.TicketType) {
		var ret string
		return ret
	}
	return *o.TicketType
}

// GetTicketTypeOk returns a tuple with the TicketType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTicketTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TicketType) {
		return nil, false
	}
	return o.TicketType, true
}

// HasTicketType returns a boolean if a field has been set.
func (o *TimeEntry) HasTicketType() bool {
	if o != nil && !IsNil(o.TicketType) {
		return true
	}

	return false
}

// SetTicketType gets a reference to the given string and assigns it to the TicketType field.
func (o *TimeEntry) SetTicketType(v string) {
	o.TicketType = &v
}

// GetTicketSubType returns the TicketSubType field value if set, zero value otherwise.
func (o *TimeEntry) GetTicketSubType() string {
	if o == nil || IsNil(o.TicketSubType) {
		var ret string
		return ret
	}
	return *o.TicketSubType
}

// GetTicketSubTypeOk returns a tuple with the TicketSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTicketSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TicketSubType) {
		return nil, false
	}
	return o.TicketSubType, true
}

// HasTicketSubType returns a boolean if a field has been set.
func (o *TimeEntry) HasTicketSubType() bool {
	if o != nil && !IsNil(o.TicketSubType) {
		return true
	}

	return false
}

// SetTicketSubType gets a reference to the given string and assigns it to the TicketSubType field.
func (o *TimeEntry) SetTicketSubType(v string) {
	o.TicketSubType = &v
}

// GetInvoiceFlag returns the InvoiceFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetInvoiceFlag() bool {
	if o == nil || IsNil(o.InvoiceFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvoiceFlag.Get()
}

// GetInvoiceFlagOk returns a tuple with the InvoiceFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetInvoiceFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceFlag.Get(), o.InvoiceFlag.IsSet()
}

// HasInvoiceFlag returns a boolean if a field has been set.
func (o *TimeEntry) HasInvoiceFlag() bool {
	if o != nil && o.InvoiceFlag.IsSet() {
		return true
	}

	return false
}

// SetInvoiceFlag gets a reference to the given NullableBool and assigns it to the InvoiceFlag field.
func (o *TimeEntry) SetInvoiceFlag(v bool) {
	o.InvoiceFlag.Set(&v)
}
// SetInvoiceFlagNil sets the value for InvoiceFlag to be an explicit nil
func (o *TimeEntry) SetInvoiceFlagNil() {
	o.InvoiceFlag.Set(nil)
}

// UnsetInvoiceFlag ensures that no value is present for InvoiceFlag, not even an explicit nil
func (o *TimeEntry) UnsetInvoiceFlag() {
	o.InvoiceFlag.Unset()
}

// GetExtendedInvoiceAmount returns the ExtendedInvoiceAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeEntry) GetExtendedInvoiceAmount() float64 {
	if o == nil || IsNil(o.ExtendedInvoiceAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.ExtendedInvoiceAmount.Get()
}

// GetExtendedInvoiceAmountOk returns a tuple with the ExtendedInvoiceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeEntry) GetExtendedInvoiceAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtendedInvoiceAmount.Get(), o.ExtendedInvoiceAmount.IsSet()
}

// HasExtendedInvoiceAmount returns a boolean if a field has been set.
func (o *TimeEntry) HasExtendedInvoiceAmount() bool {
	if o != nil && o.ExtendedInvoiceAmount.IsSet() {
		return true
	}

	return false
}

// SetExtendedInvoiceAmount gets a reference to the given NullableFloat64 and assigns it to the ExtendedInvoiceAmount field.
func (o *TimeEntry) SetExtendedInvoiceAmount(v float64) {
	o.ExtendedInvoiceAmount.Set(&v)
}
// SetExtendedInvoiceAmountNil sets the value for ExtendedInvoiceAmount to be an explicit nil
func (o *TimeEntry) SetExtendedInvoiceAmountNil() {
	o.ExtendedInvoiceAmount.Set(nil)
}

// UnsetExtendedInvoiceAmount ensures that no value is present for ExtendedInvoiceAmount, not even an explicit nil
func (o *TimeEntry) UnsetExtendedInvoiceAmount() {
	o.ExtendedInvoiceAmount.Unset()
}

// GetLocationName returns the LocationName field value if set, zero value otherwise.
func (o *TimeEntry) GetLocationName() string {
	if o == nil || IsNil(o.LocationName) {
		var ret string
		return ret
	}
	return *o.LocationName
}

// GetLocationNameOk returns a tuple with the LocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetLocationNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocationName) {
		return nil, false
	}
	return o.LocationName, true
}

// HasLocationName returns a boolean if a field has been set.
func (o *TimeEntry) HasLocationName() bool {
	if o != nil && !IsNil(o.LocationName) {
		return true
	}

	return false
}

// SetLocationName gets a reference to the given string and assigns it to the LocationName field.
func (o *TimeEntry) SetLocationName(v string) {
	o.LocationName = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *TimeEntry) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *TimeEntry) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *TimeEntry) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TimeEntry) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TimeEntry) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TimeEntry) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *TimeEntry) GetCustomFields() []CustomFieldValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret []CustomFieldValue
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeEntry) GetCustomFieldsOk() ([]CustomFieldValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *TimeEntry) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []CustomFieldValue and assigns it to the CustomFields field.
func (o *TimeEntry) SetCustomFields(v []CustomFieldValue) {
	o.CustomFields = v
}

func (o TimeEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CompanyType) {
		toSerialize["companyType"] = o.CompanyType
	}
	if o.ChargeToId.IsSet() {
		toSerialize["chargeToId"] = o.ChargeToId.Get()
	}
	if o.ChargeToType.IsSet() {
		toSerialize["chargeToType"] = o.ChargeToType.Get()
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.BusinessUnitId.IsSet() {
		toSerialize["businessUnitId"] = o.BusinessUnitId.Get()
	}
	if !IsNil(o.BusinessGroupDesc) {
		toSerialize["businessGroupDesc"] = o.BusinessGroupDesc
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.WorkType) {
		toSerialize["workType"] = o.WorkType
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.AgreementType) {
		toSerialize["agreementType"] = o.AgreementType
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if o.OpportunityRecid.IsSet() {
		toSerialize["opportunityRecid"] = o.OpportunityRecid.Get()
	}
	if !IsNil(o.ProjectActivity) {
		toSerialize["projectActivity"] = o.ProjectActivity
	}
	if !IsNil(o.Territory) {
		toSerialize["territory"] = o.Territory
	}
	toSerialize["timeStart"] = o.TimeStart
	if !IsNil(o.TimeEnd) {
		toSerialize["timeEnd"] = o.TimeEnd
	}
	if o.HoursDeduct.IsSet() {
		toSerialize["hoursDeduct"] = o.HoursDeduct.Get()
	}
	if o.ActualHours.IsSet() {
		toSerialize["actualHours"] = o.ActualHours.Get()
	}
	if o.BillableOption.IsSet() {
		toSerialize["billableOption"] = o.BillableOption.Get()
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.InternalNotes) {
		toSerialize["internalNotes"] = o.InternalNotes
	}
	if o.AddToDetailDescriptionFlag.IsSet() {
		toSerialize["addToDetailDescriptionFlag"] = o.AddToDetailDescriptionFlag.Get()
	}
	if o.AddToInternalAnalysisFlag.IsSet() {
		toSerialize["addToInternalAnalysisFlag"] = o.AddToInternalAnalysisFlag.Get()
	}
	if o.AddToResolutionFlag.IsSet() {
		toSerialize["addToResolutionFlag"] = o.AddToResolutionFlag.Get()
	}
	if o.EmailResourceFlag.IsSet() {
		toSerialize["emailResourceFlag"] = o.EmailResourceFlag.Get()
	}
	if o.EmailContactFlag.IsSet() {
		toSerialize["emailContactFlag"] = o.EmailContactFlag.Get()
	}
	if o.EmailCcFlag.IsSet() {
		toSerialize["emailCcFlag"] = o.EmailCcFlag.Get()
	}
	if !IsNil(o.EmailCc) {
		toSerialize["emailCc"] = o.EmailCc
	}
	if o.HoursBilled.IsSet() {
		toSerialize["hoursBilled"] = o.HoursBilled.Get()
	}
	if o.InvoiceHours.IsSet() {
		toSerialize["invoiceHours"] = o.InvoiceHours.Get()
	}
	if !IsNil(o.HourlyCost) {
		toSerialize["hourlyCost"] = o.HourlyCost
	}
	if !IsNil(o.EnteredBy) {
		toSerialize["enteredBy"] = o.EnteredBy
	}
	if !IsNil(o.DateEntered) {
		toSerialize["dateEntered"] = o.DateEntered
	}
	if !IsNil(o.Invoice) {
		toSerialize["invoice"] = o.Invoice
	}
	if o.MobileGuid.IsSet() {
		toSerialize["mobileGuid"] = o.MobileGuid.Get()
	}
	if o.HourlyRate.IsSet() {
		toSerialize["hourlyRate"] = o.HourlyRate.Get()
	}
	if o.OverageRate.IsSet() {
		toSerialize["overageRate"] = o.OverageRate.Get()
	}
	if o.AgreementHours.IsSet() {
		toSerialize["agreementHours"] = o.AgreementHours.Get()
	}
	if o.AgreementAmount.IsSet() {
		toSerialize["agreementAmount"] = o.AgreementAmount.Get()
	}
	if o.AgreementAdjustment.IsSet() {
		toSerialize["agreementAdjustment"] = o.AgreementAdjustment.Get()
	}
	if o.Adjustment.IsSet() {
		toSerialize["adjustment"] = o.Adjustment.Get()
	}
	if o.InvoiceReady.IsSet() {
		toSerialize["invoiceReady"] = o.InvoiceReady.Get()
	}
	if !IsNil(o.TimeSheet) {
		toSerialize["timeSheet"] = o.TimeSheet
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.TicketBoard) {
		toSerialize["ticketBoard"] = o.TicketBoard
	}
	if !IsNil(o.TicketStatus) {
		toSerialize["ticketStatus"] = o.TicketStatus
	}
	if !IsNil(o.TicketType) {
		toSerialize["ticketType"] = o.TicketType
	}
	if !IsNil(o.TicketSubType) {
		toSerialize["ticketSubType"] = o.TicketSubType
	}
	if o.InvoiceFlag.IsSet() {
		toSerialize["invoiceFlag"] = o.InvoiceFlag.Get()
	}
	if o.ExtendedInvoiceAmount.IsSet() {
		toSerialize["extendedInvoiceAmount"] = o.ExtendedInvoiceAmount.Get()
	}
	if !IsNil(o.LocationName) {
		toSerialize["locationName"] = o.LocationName
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	return toSerialize, nil
}

func (o *TimeEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timeStart",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeEntry := _TimeEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeEntry)

	if err != nil {
		return err
	}

	*o = TimeEntry(varTimeEntry)

	return err
}

type NullableTimeEntry struct {
	value *TimeEntry
	isSet bool
}

func (v NullableTimeEntry) Get() *TimeEntry {
	return v.value
}

func (v *NullableTimeEntry) Set(val *TimeEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeEntry(val *TimeEntry) *NullableTimeEntry {
	return &NullableTimeEntry{value: val, isSet: true}
}

func (v NullableTimeEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


