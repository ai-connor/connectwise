/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TodayPageCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TodayPageCategory{}

// TodayPageCategory struct for TodayPageCategory
type TodayPageCategory struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 30;
	Name string `json:"name"`
	SortOrder NullableInt32 `json:"sortOrder"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _TodayPageCategory TodayPageCategory

// NewTodayPageCategory instantiates a new TodayPageCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTodayPageCategory(name string, sortOrder NullableInt32) *TodayPageCategory {
	this := TodayPageCategory{}
	this.Name = name
	this.SortOrder = sortOrder
	return &this
}

// NewTodayPageCategoryWithDefaults instantiates a new TodayPageCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTodayPageCategoryWithDefaults() *TodayPageCategory {
	this := TodayPageCategory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TodayPageCategory) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodayPageCategory) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TodayPageCategory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TodayPageCategory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *TodayPageCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TodayPageCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TodayPageCategory) SetName(v string) {
	o.Name = v
}

// GetSortOrder returns the SortOrder field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *TodayPageCategory) GetSortOrder() int32 {
	if o == nil || o.SortOrder.Get() == nil {
		var ret int32
		return ret
	}

	return *o.SortOrder.Get()
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodayPageCategory) GetSortOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SortOrder.Get(), o.SortOrder.IsSet()
}

// SetSortOrder sets field value
func (o *TodayPageCategory) SetSortOrder(v int32) {
	o.SortOrder.Set(&v)
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *TodayPageCategory) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodayPageCategory) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *TodayPageCategory) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *TodayPageCategory) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TodayPageCategory) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodayPageCategory) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TodayPageCategory) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *TodayPageCategory) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o TodayPageCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TodayPageCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["sortOrder"] = o.SortOrder.Get()
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *TodayPageCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sortOrder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTodayPageCategory := _TodayPageCategory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTodayPageCategory)

	if err != nil {
		return err
	}

	*o = TodayPageCategory(varTodayPageCategory)

	return err
}

type NullableTodayPageCategory struct {
	value *TodayPageCategory
	isSet bool
}

func (v NullableTodayPageCategory) Get() *TodayPageCategory {
	return v.value
}

func (v *NullableTodayPageCategory) Set(val *TodayPageCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableTodayPageCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableTodayPageCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodayPageCategory(val *TodayPageCategory) *NullableTodayPageCategory {
	return &NullableTodayPageCategory{value: val, isSet: true}
}

func (v NullableTodayPageCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodayPageCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


