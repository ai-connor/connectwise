/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UnpostedExpense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnpostedExpense{}

// UnpostedExpense struct for UnpostedExpense
type UnpostedExpense struct {
	Id *int32 `json:"id,omitempty"`
	LocationId NullableInt32 `json:"locationId,omitempty"`
	DepartmentId NullableInt32 `json:"departmentId,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	CreditAccount *string `json:"creditAccount,omitempty"`
	ExpenseDetailId NullableInt32 `json:"expenseDetailId,omitempty"`
	ExpenseType *ExpenseTypeReference `json:"expenseType,omitempty"`
	Classification NullableString `json:"classification,omitempty"`
	GlType NullableString `json:"glType,omitempty"`
	Member *MemberReference `json:"member,omitempty"`
	DateExpense *string `json:"dateExpense,omitempty"`
	ChargeCode *ChargeCodeReference `json:"chargeCode,omitempty"`
	ChargeDescription *string `json:"chargeDescription,omitempty"`
	InPolicy NullableBool `json:"inPolicy,omitempty"`
	PaymentMethod *PaymentMethodReference `json:"paymentMethod,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	BillableAmount NullableFloat64 `json:"billableAmount,omitempty"`
	NonBillableAmount NullableFloat64 `json:"nonBillableAmount,omitempty"`
	Agreement *AgreementReference `json:"agreement,omitempty"`
	AgreementAmountCovered NullableFloat64 `json:"agreementAmountCovered,omitempty"`
	Ticket *TicketReference `json:"ticket,omitempty"`
	Project *ProjectReference `json:"project,omitempty"`
	ProjectPhase *ProjectPhaseReference `json:"projectPhase,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	// Used to determine if Avalara tax is enabled.
	AvalaraTaxFlag NullableBool `json:"avalaraTaxFlag,omitempty"`
	ItemTaxableFlag NullableBool `json:"itemTaxableFlag,omitempty"`
	SalesTaxAmount NullableFloat64 `json:"salesTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the state level.
	StateTaxFlag NullableBool `json:"stateTaxFlag,omitempty"`
	StateTaxXref *string `json:"stateTaxXref,omitempty"`
	StateTaxAmount NullableFloat64 `json:"stateTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the county level.
	CountyTaxFlag NullableBool `json:"countyTaxFlag,omitempty"`
	CountyTaxXref *string `json:"countyTaxXref,omitempty"`
	CountyTaxAmount NullableFloat64 `json:"countyTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the city level.
	CityTaxFlag NullableBool `json:"cityTaxFlag,omitempty"`
	CityTaxXref *string `json:"cityTaxXref,omitempty"`
	CityTaxAmount NullableFloat64 `json:"cityTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the country level.
	CountryTaxFlag NullableBool `json:"countryTaxFlag,omitempty"`
	CountryTaxXref *string `json:"countryTaxXref,omitempty"`
	CountryTaxAmount NullableFloat64 `json:"countryTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the composite level.
	CompositeTaxFlag NullableBool `json:"compositeTaxFlag,omitempty"`
	CompositeTaxXref *string `json:"compositeTaxXref,omitempty"`
	CompositeTaxAmount NullableFloat64 `json:"compositeTaxAmount,omitempty"`
	// Set to true if transaction is taxable at level six.
	LevelSixTaxFlag NullableBool `json:"levelSixTaxFlag,omitempty"`
	LevelSixTaxXref *string `json:"levelSixTaxXref,omitempty"`
	LevelSixTaxAmount NullableFloat64 `json:"levelSixTaxAmount,omitempty"`
	DateClosed *string `json:"dateClosed,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewUnpostedExpense instantiates a new UnpostedExpense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnpostedExpense() *UnpostedExpense {
	this := UnpostedExpense{}
	return &this
}

// NewUnpostedExpenseWithDefaults instantiates a new UnpostedExpense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnpostedExpenseWithDefaults() *UnpostedExpense {
	this := UnpostedExpense{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnpostedExpense) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnpostedExpense) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UnpostedExpense) SetId(v int32) {
	o.Id = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *UnpostedExpense) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *UnpostedExpense) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *UnpostedExpense) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *UnpostedExpense) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetDepartmentId returns the DepartmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetDepartmentId() int32 {
	if o == nil || IsNil(o.DepartmentId.Get()) {
		var ret int32
		return ret
	}
	return *o.DepartmentId.Get()
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetDepartmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentId.Get(), o.DepartmentId.IsSet()
}

// HasDepartmentId returns a boolean if a field has been set.
func (o *UnpostedExpense) HasDepartmentId() bool {
	if o != nil && o.DepartmentId.IsSet() {
		return true
	}

	return false
}

// SetDepartmentId gets a reference to the given NullableInt32 and assigns it to the DepartmentId field.
func (o *UnpostedExpense) SetDepartmentId(v int32) {
	o.DepartmentId.Set(&v)
}
// SetDepartmentIdNil sets the value for DepartmentId to be an explicit nil
func (o *UnpostedExpense) SetDepartmentIdNil() {
	o.DepartmentId.Set(nil)
}

// UnsetDepartmentId ensures that no value is present for DepartmentId, not even an explicit nil
func (o *UnpostedExpense) UnsetDepartmentId() {
	o.DepartmentId.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *UnpostedExpense) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *UnpostedExpense) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *UnpostedExpense) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *UnpostedExpense) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetCreditAccount returns the CreditAccount field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCreditAccount() string {
	if o == nil || IsNil(o.CreditAccount) {
		var ret string
		return ret
	}
	return *o.CreditAccount
}

// GetCreditAccountOk returns a tuple with the CreditAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCreditAccountOk() (*string, bool) {
	if o == nil || IsNil(o.CreditAccount) {
		return nil, false
	}
	return o.CreditAccount, true
}

// HasCreditAccount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCreditAccount() bool {
	if o != nil && !IsNil(o.CreditAccount) {
		return true
	}

	return false
}

// SetCreditAccount gets a reference to the given string and assigns it to the CreditAccount field.
func (o *UnpostedExpense) SetCreditAccount(v string) {
	o.CreditAccount = &v
}

// GetExpenseDetailId returns the ExpenseDetailId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetExpenseDetailId() int32 {
	if o == nil || IsNil(o.ExpenseDetailId.Get()) {
		var ret int32
		return ret
	}
	return *o.ExpenseDetailId.Get()
}

// GetExpenseDetailIdOk returns a tuple with the ExpenseDetailId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetExpenseDetailIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpenseDetailId.Get(), o.ExpenseDetailId.IsSet()
}

// HasExpenseDetailId returns a boolean if a field has been set.
func (o *UnpostedExpense) HasExpenseDetailId() bool {
	if o != nil && o.ExpenseDetailId.IsSet() {
		return true
	}

	return false
}

// SetExpenseDetailId gets a reference to the given NullableInt32 and assigns it to the ExpenseDetailId field.
func (o *UnpostedExpense) SetExpenseDetailId(v int32) {
	o.ExpenseDetailId.Set(&v)
}
// SetExpenseDetailIdNil sets the value for ExpenseDetailId to be an explicit nil
func (o *UnpostedExpense) SetExpenseDetailIdNil() {
	o.ExpenseDetailId.Set(nil)
}

// UnsetExpenseDetailId ensures that no value is present for ExpenseDetailId, not even an explicit nil
func (o *UnpostedExpense) UnsetExpenseDetailId() {
	o.ExpenseDetailId.Unset()
}

// GetExpenseType returns the ExpenseType field value if set, zero value otherwise.
func (o *UnpostedExpense) GetExpenseType() ExpenseTypeReference {
	if o == nil || IsNil(o.ExpenseType) {
		var ret ExpenseTypeReference
		return ret
	}
	return *o.ExpenseType
}

// GetExpenseTypeOk returns a tuple with the ExpenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetExpenseTypeOk() (*ExpenseTypeReference, bool) {
	if o == nil || IsNil(o.ExpenseType) {
		return nil, false
	}
	return o.ExpenseType, true
}

// HasExpenseType returns a boolean if a field has been set.
func (o *UnpostedExpense) HasExpenseType() bool {
	if o != nil && !IsNil(o.ExpenseType) {
		return true
	}

	return false
}

// SetExpenseType gets a reference to the given ExpenseTypeReference and assigns it to the ExpenseType field.
func (o *UnpostedExpense) SetExpenseType(v ExpenseTypeReference) {
	o.ExpenseType = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetClassification() string {
	if o == nil || IsNil(o.Classification.Get()) {
		var ret string
		return ret
	}
	return *o.Classification.Get()
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetClassificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Classification.Get(), o.Classification.IsSet()
}

// HasClassification returns a boolean if a field has been set.
func (o *UnpostedExpense) HasClassification() bool {
	if o != nil && o.Classification.IsSet() {
		return true
	}

	return false
}

// SetClassification gets a reference to the given NullableString and assigns it to the Classification field.
func (o *UnpostedExpense) SetClassification(v string) {
	o.Classification.Set(&v)
}
// SetClassificationNil sets the value for Classification to be an explicit nil
func (o *UnpostedExpense) SetClassificationNil() {
	o.Classification.Set(nil)
}

// UnsetClassification ensures that no value is present for Classification, not even an explicit nil
func (o *UnpostedExpense) UnsetClassification() {
	o.Classification.Unset()
}

// GetGlType returns the GlType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetGlType() string {
	if o == nil || IsNil(o.GlType.Get()) {
		var ret string
		return ret
	}
	return *o.GlType.Get()
}

// GetGlTypeOk returns a tuple with the GlType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetGlTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlType.Get(), o.GlType.IsSet()
}

// HasGlType returns a boolean if a field has been set.
func (o *UnpostedExpense) HasGlType() bool {
	if o != nil && o.GlType.IsSet() {
		return true
	}

	return false
}

// SetGlType gets a reference to the given NullableString and assigns it to the GlType field.
func (o *UnpostedExpense) SetGlType(v string) {
	o.GlType.Set(&v)
}
// SetGlTypeNil sets the value for GlType to be an explicit nil
func (o *UnpostedExpense) SetGlTypeNil() {
	o.GlType.Set(nil)
}

// UnsetGlType ensures that no value is present for GlType, not even an explicit nil
func (o *UnpostedExpense) UnsetGlType() {
	o.GlType.Unset()
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *UnpostedExpense) GetMember() MemberReference {
	if o == nil || IsNil(o.Member) {
		var ret MemberReference
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetMemberOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *UnpostedExpense) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given MemberReference and assigns it to the Member field.
func (o *UnpostedExpense) SetMember(v MemberReference) {
	o.Member = &v
}

// GetDateExpense returns the DateExpense field value if set, zero value otherwise.
func (o *UnpostedExpense) GetDateExpense() string {
	if o == nil || IsNil(o.DateExpense) {
		var ret string
		return ret
	}
	return *o.DateExpense
}

// GetDateExpenseOk returns a tuple with the DateExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetDateExpenseOk() (*string, bool) {
	if o == nil || IsNil(o.DateExpense) {
		return nil, false
	}
	return o.DateExpense, true
}

// HasDateExpense returns a boolean if a field has been set.
func (o *UnpostedExpense) HasDateExpense() bool {
	if o != nil && !IsNil(o.DateExpense) {
		return true
	}

	return false
}

// SetDateExpense gets a reference to the given string and assigns it to the DateExpense field.
func (o *UnpostedExpense) SetDateExpense(v string) {
	o.DateExpense = &v
}

// GetChargeCode returns the ChargeCode field value if set, zero value otherwise.
func (o *UnpostedExpense) GetChargeCode() ChargeCodeReference {
	if o == nil || IsNil(o.ChargeCode) {
		var ret ChargeCodeReference
		return ret
	}
	return *o.ChargeCode
}

// GetChargeCodeOk returns a tuple with the ChargeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetChargeCodeOk() (*ChargeCodeReference, bool) {
	if o == nil || IsNil(o.ChargeCode) {
		return nil, false
	}
	return o.ChargeCode, true
}

// HasChargeCode returns a boolean if a field has been set.
func (o *UnpostedExpense) HasChargeCode() bool {
	if o != nil && !IsNil(o.ChargeCode) {
		return true
	}

	return false
}

// SetChargeCode gets a reference to the given ChargeCodeReference and assigns it to the ChargeCode field.
func (o *UnpostedExpense) SetChargeCode(v ChargeCodeReference) {
	o.ChargeCode = &v
}

// GetChargeDescription returns the ChargeDescription field value if set, zero value otherwise.
func (o *UnpostedExpense) GetChargeDescription() string {
	if o == nil || IsNil(o.ChargeDescription) {
		var ret string
		return ret
	}
	return *o.ChargeDescription
}

// GetChargeDescriptionOk returns a tuple with the ChargeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetChargeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeDescription) {
		return nil, false
	}
	return o.ChargeDescription, true
}

// HasChargeDescription returns a boolean if a field has been set.
func (o *UnpostedExpense) HasChargeDescription() bool {
	if o != nil && !IsNil(o.ChargeDescription) {
		return true
	}

	return false
}

// SetChargeDescription gets a reference to the given string and assigns it to the ChargeDescription field.
func (o *UnpostedExpense) SetChargeDescription(v string) {
	o.ChargeDescription = &v
}

// GetInPolicy returns the InPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetInPolicy() bool {
	if o == nil || IsNil(o.InPolicy.Get()) {
		var ret bool
		return ret
	}
	return *o.InPolicy.Get()
}

// GetInPolicyOk returns a tuple with the InPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetInPolicyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InPolicy.Get(), o.InPolicy.IsSet()
}

// HasInPolicy returns a boolean if a field has been set.
func (o *UnpostedExpense) HasInPolicy() bool {
	if o != nil && o.InPolicy.IsSet() {
		return true
	}

	return false
}

// SetInPolicy gets a reference to the given NullableBool and assigns it to the InPolicy field.
func (o *UnpostedExpense) SetInPolicy(v bool) {
	o.InPolicy.Set(&v)
}
// SetInPolicyNil sets the value for InPolicy to be an explicit nil
func (o *UnpostedExpense) SetInPolicyNil() {
	o.InPolicy.Set(nil)
}

// UnsetInPolicy ensures that no value is present for InPolicy, not even an explicit nil
func (o *UnpostedExpense) UnsetInPolicy() {
	o.InPolicy.Unset()
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *UnpostedExpense) GetPaymentMethod() PaymentMethodReference {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret PaymentMethodReference
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetPaymentMethodOk() (*PaymentMethodReference, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *UnpostedExpense) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given PaymentMethodReference and assigns it to the PaymentMethod field.
func (o *UnpostedExpense) SetPaymentMethod(v PaymentMethodReference) {
	o.PaymentMethod = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *UnpostedExpense) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *UnpostedExpense) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *UnpostedExpense) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *UnpostedExpense) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *UnpostedExpense) UnsetTotal() {
	o.Total.Unset()
}

// GetBillableAmount returns the BillableAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetBillableAmount() float64 {
	if o == nil || IsNil(o.BillableAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.BillableAmount.Get()
}

// GetBillableAmountOk returns a tuple with the BillableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetBillableAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillableAmount.Get(), o.BillableAmount.IsSet()
}

// HasBillableAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasBillableAmount() bool {
	if o != nil && o.BillableAmount.IsSet() {
		return true
	}

	return false
}

// SetBillableAmount gets a reference to the given NullableFloat64 and assigns it to the BillableAmount field.
func (o *UnpostedExpense) SetBillableAmount(v float64) {
	o.BillableAmount.Set(&v)
}
// SetBillableAmountNil sets the value for BillableAmount to be an explicit nil
func (o *UnpostedExpense) SetBillableAmountNil() {
	o.BillableAmount.Set(nil)
}

// UnsetBillableAmount ensures that no value is present for BillableAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetBillableAmount() {
	o.BillableAmount.Unset()
}

// GetNonBillableAmount returns the NonBillableAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetNonBillableAmount() float64 {
	if o == nil || IsNil(o.NonBillableAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.NonBillableAmount.Get()
}

// GetNonBillableAmountOk returns a tuple with the NonBillableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetNonBillableAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonBillableAmount.Get(), o.NonBillableAmount.IsSet()
}

// HasNonBillableAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasNonBillableAmount() bool {
	if o != nil && o.NonBillableAmount.IsSet() {
		return true
	}

	return false
}

// SetNonBillableAmount gets a reference to the given NullableFloat64 and assigns it to the NonBillableAmount field.
func (o *UnpostedExpense) SetNonBillableAmount(v float64) {
	o.NonBillableAmount.Set(&v)
}
// SetNonBillableAmountNil sets the value for NonBillableAmount to be an explicit nil
func (o *UnpostedExpense) SetNonBillableAmountNil() {
	o.NonBillableAmount.Set(nil)
}

// UnsetNonBillableAmount ensures that no value is present for NonBillableAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetNonBillableAmount() {
	o.NonBillableAmount.Unset()
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *UnpostedExpense) GetAgreement() AgreementReference {
	if o == nil || IsNil(o.Agreement) {
		var ret AgreementReference
		return ret
	}
	return *o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetAgreementOk() (*AgreementReference, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *UnpostedExpense) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given AgreementReference and assigns it to the Agreement field.
func (o *UnpostedExpense) SetAgreement(v AgreementReference) {
	o.Agreement = &v
}

// GetAgreementAmountCovered returns the AgreementAmountCovered field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetAgreementAmountCovered() float64 {
	if o == nil || IsNil(o.AgreementAmountCovered.Get()) {
		var ret float64
		return ret
	}
	return *o.AgreementAmountCovered.Get()
}

// GetAgreementAmountCoveredOk returns a tuple with the AgreementAmountCovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetAgreementAmountCoveredOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgreementAmountCovered.Get(), o.AgreementAmountCovered.IsSet()
}

// HasAgreementAmountCovered returns a boolean if a field has been set.
func (o *UnpostedExpense) HasAgreementAmountCovered() bool {
	if o != nil && o.AgreementAmountCovered.IsSet() {
		return true
	}

	return false
}

// SetAgreementAmountCovered gets a reference to the given NullableFloat64 and assigns it to the AgreementAmountCovered field.
func (o *UnpostedExpense) SetAgreementAmountCovered(v float64) {
	o.AgreementAmountCovered.Set(&v)
}
// SetAgreementAmountCoveredNil sets the value for AgreementAmountCovered to be an explicit nil
func (o *UnpostedExpense) SetAgreementAmountCoveredNil() {
	o.AgreementAmountCovered.Set(nil)
}

// UnsetAgreementAmountCovered ensures that no value is present for AgreementAmountCovered, not even an explicit nil
func (o *UnpostedExpense) UnsetAgreementAmountCovered() {
	o.AgreementAmountCovered.Unset()
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *UnpostedExpense) GetTicket() TicketReference {
	if o == nil || IsNil(o.Ticket) {
		var ret TicketReference
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetTicketOk() (*TicketReference, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *UnpostedExpense) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given TicketReference and assigns it to the Ticket field.
func (o *UnpostedExpense) SetTicket(v TicketReference) {
	o.Ticket = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *UnpostedExpense) GetProject() ProjectReference {
	if o == nil || IsNil(o.Project) {
		var ret ProjectReference
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetProjectOk() (*ProjectReference, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *UnpostedExpense) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectReference and assigns it to the Project field.
func (o *UnpostedExpense) SetProject(v ProjectReference) {
	o.Project = &v
}

// GetProjectPhase returns the ProjectPhase field value if set, zero value otherwise.
func (o *UnpostedExpense) GetProjectPhase() ProjectPhaseReference {
	if o == nil || IsNil(o.ProjectPhase) {
		var ret ProjectPhaseReference
		return ret
	}
	return *o.ProjectPhase
}

// GetProjectPhaseOk returns a tuple with the ProjectPhase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetProjectPhaseOk() (*ProjectPhaseReference, bool) {
	if o == nil || IsNil(o.ProjectPhase) {
		return nil, false
	}
	return o.ProjectPhase, true
}

// HasProjectPhase returns a boolean if a field has been set.
func (o *UnpostedExpense) HasProjectPhase() bool {
	if o != nil && !IsNil(o.ProjectPhase) {
		return true
	}

	return false
}

// SetProjectPhase gets a reference to the given ProjectPhaseReference and assigns it to the ProjectPhase field.
func (o *UnpostedExpense) SetProjectPhase(v ProjectPhaseReference) {
	o.ProjectPhase = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *UnpostedExpense) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *UnpostedExpense) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *UnpostedExpense) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetAvalaraTaxFlag returns the AvalaraTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetAvalaraTaxFlag() bool {
	if o == nil || IsNil(o.AvalaraTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AvalaraTaxFlag.Get()
}

// GetAvalaraTaxFlagOk returns a tuple with the AvalaraTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetAvalaraTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvalaraTaxFlag.Get(), o.AvalaraTaxFlag.IsSet()
}

// HasAvalaraTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasAvalaraTaxFlag() bool {
	if o != nil && o.AvalaraTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetAvalaraTaxFlag gets a reference to the given NullableBool and assigns it to the AvalaraTaxFlag field.
func (o *UnpostedExpense) SetAvalaraTaxFlag(v bool) {
	o.AvalaraTaxFlag.Set(&v)
}
// SetAvalaraTaxFlagNil sets the value for AvalaraTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetAvalaraTaxFlagNil() {
	o.AvalaraTaxFlag.Set(nil)
}

// UnsetAvalaraTaxFlag ensures that no value is present for AvalaraTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetAvalaraTaxFlag() {
	o.AvalaraTaxFlag.Unset()
}

// GetItemTaxableFlag returns the ItemTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetItemTaxableFlag() bool {
	if o == nil || IsNil(o.ItemTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ItemTaxableFlag.Get()
}

// GetItemTaxableFlagOk returns a tuple with the ItemTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetItemTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemTaxableFlag.Get(), o.ItemTaxableFlag.IsSet()
}

// HasItemTaxableFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasItemTaxableFlag() bool {
	if o != nil && o.ItemTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetItemTaxableFlag gets a reference to the given NullableBool and assigns it to the ItemTaxableFlag field.
func (o *UnpostedExpense) SetItemTaxableFlag(v bool) {
	o.ItemTaxableFlag.Set(&v)
}
// SetItemTaxableFlagNil sets the value for ItemTaxableFlag to be an explicit nil
func (o *UnpostedExpense) SetItemTaxableFlagNil() {
	o.ItemTaxableFlag.Set(nil)
}

// UnsetItemTaxableFlag ensures that no value is present for ItemTaxableFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetItemTaxableFlag() {
	o.ItemTaxableFlag.Unset()
}

// GetSalesTaxAmount returns the SalesTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetSalesTaxAmount() float64 {
	if o == nil || IsNil(o.SalesTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.SalesTaxAmount.Get()
}

// GetSalesTaxAmountOk returns a tuple with the SalesTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetSalesTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesTaxAmount.Get(), o.SalesTaxAmount.IsSet()
}

// HasSalesTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasSalesTaxAmount() bool {
	if o != nil && o.SalesTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetSalesTaxAmount gets a reference to the given NullableFloat64 and assigns it to the SalesTaxAmount field.
func (o *UnpostedExpense) SetSalesTaxAmount(v float64) {
	o.SalesTaxAmount.Set(&v)
}
// SetSalesTaxAmountNil sets the value for SalesTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetSalesTaxAmountNil() {
	o.SalesTaxAmount.Set(nil)
}

// UnsetSalesTaxAmount ensures that no value is present for SalesTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetSalesTaxAmount() {
	o.SalesTaxAmount.Unset()
}

// GetStateTaxFlag returns the StateTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetStateTaxFlag() bool {
	if o == nil || IsNil(o.StateTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.StateTaxFlag.Get()
}

// GetStateTaxFlagOk returns a tuple with the StateTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetStateTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxFlag.Get(), o.StateTaxFlag.IsSet()
}

// HasStateTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasStateTaxFlag() bool {
	if o != nil && o.StateTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetStateTaxFlag gets a reference to the given NullableBool and assigns it to the StateTaxFlag field.
func (o *UnpostedExpense) SetStateTaxFlag(v bool) {
	o.StateTaxFlag.Set(&v)
}
// SetStateTaxFlagNil sets the value for StateTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetStateTaxFlagNil() {
	o.StateTaxFlag.Set(nil)
}

// UnsetStateTaxFlag ensures that no value is present for StateTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetStateTaxFlag() {
	o.StateTaxFlag.Unset()
}

// GetStateTaxXref returns the StateTaxXref field value if set, zero value otherwise.
func (o *UnpostedExpense) GetStateTaxXref() string {
	if o == nil || IsNil(o.StateTaxXref) {
		var ret string
		return ret
	}
	return *o.StateTaxXref
}

// GetStateTaxXrefOk returns a tuple with the StateTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetStateTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxXref) {
		return nil, false
	}
	return o.StateTaxXref, true
}

// HasStateTaxXref returns a boolean if a field has been set.
func (o *UnpostedExpense) HasStateTaxXref() bool {
	if o != nil && !IsNil(o.StateTaxXref) {
		return true
	}

	return false
}

// SetStateTaxXref gets a reference to the given string and assigns it to the StateTaxXref field.
func (o *UnpostedExpense) SetStateTaxXref(v string) {
	o.StateTaxXref = &v
}

// GetStateTaxAmount returns the StateTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetStateTaxAmount() float64 {
	if o == nil || IsNil(o.StateTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.StateTaxAmount.Get()
}

// GetStateTaxAmountOk returns a tuple with the StateTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetStateTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxAmount.Get(), o.StateTaxAmount.IsSet()
}

// HasStateTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasStateTaxAmount() bool {
	if o != nil && o.StateTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetStateTaxAmount gets a reference to the given NullableFloat64 and assigns it to the StateTaxAmount field.
func (o *UnpostedExpense) SetStateTaxAmount(v float64) {
	o.StateTaxAmount.Set(&v)
}
// SetStateTaxAmountNil sets the value for StateTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetStateTaxAmountNil() {
	o.StateTaxAmount.Set(nil)
}

// UnsetStateTaxAmount ensures that no value is present for StateTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetStateTaxAmount() {
	o.StateTaxAmount.Unset()
}

// GetCountyTaxFlag returns the CountyTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCountyTaxFlag() bool {
	if o == nil || IsNil(o.CountyTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CountyTaxFlag.Get()
}

// GetCountyTaxFlagOk returns a tuple with the CountyTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCountyTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxFlag.Get(), o.CountyTaxFlag.IsSet()
}

// HasCountyTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCountyTaxFlag() bool {
	if o != nil && o.CountyTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxFlag gets a reference to the given NullableBool and assigns it to the CountyTaxFlag field.
func (o *UnpostedExpense) SetCountyTaxFlag(v bool) {
	o.CountyTaxFlag.Set(&v)
}
// SetCountyTaxFlagNil sets the value for CountyTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetCountyTaxFlagNil() {
	o.CountyTaxFlag.Set(nil)
}

// UnsetCountyTaxFlag ensures that no value is present for CountyTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetCountyTaxFlag() {
	o.CountyTaxFlag.Unset()
}

// GetCountyTaxXref returns the CountyTaxXref field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCountyTaxXref() string {
	if o == nil || IsNil(o.CountyTaxXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxXref
}

// GetCountyTaxXrefOk returns a tuple with the CountyTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCountyTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxXref) {
		return nil, false
	}
	return o.CountyTaxXref, true
}

// HasCountyTaxXref returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCountyTaxXref() bool {
	if o != nil && !IsNil(o.CountyTaxXref) {
		return true
	}

	return false
}

// SetCountyTaxXref gets a reference to the given string and assigns it to the CountyTaxXref field.
func (o *UnpostedExpense) SetCountyTaxXref(v string) {
	o.CountyTaxXref = &v
}

// GetCountyTaxAmount returns the CountyTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCountyTaxAmount() float64 {
	if o == nil || IsNil(o.CountyTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CountyTaxAmount.Get()
}

// GetCountyTaxAmountOk returns a tuple with the CountyTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCountyTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxAmount.Get(), o.CountyTaxAmount.IsSet()
}

// HasCountyTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCountyTaxAmount() bool {
	if o != nil && o.CountyTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CountyTaxAmount field.
func (o *UnpostedExpense) SetCountyTaxAmount(v float64) {
	o.CountyTaxAmount.Set(&v)
}
// SetCountyTaxAmountNil sets the value for CountyTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetCountyTaxAmountNil() {
	o.CountyTaxAmount.Set(nil)
}

// UnsetCountyTaxAmount ensures that no value is present for CountyTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetCountyTaxAmount() {
	o.CountyTaxAmount.Unset()
}

// GetCityTaxFlag returns the CityTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCityTaxFlag() bool {
	if o == nil || IsNil(o.CityTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CityTaxFlag.Get()
}

// GetCityTaxFlagOk returns a tuple with the CityTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCityTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxFlag.Get(), o.CityTaxFlag.IsSet()
}

// HasCityTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCityTaxFlag() bool {
	if o != nil && o.CityTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCityTaxFlag gets a reference to the given NullableBool and assigns it to the CityTaxFlag field.
func (o *UnpostedExpense) SetCityTaxFlag(v bool) {
	o.CityTaxFlag.Set(&v)
}
// SetCityTaxFlagNil sets the value for CityTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetCityTaxFlagNil() {
	o.CityTaxFlag.Set(nil)
}

// UnsetCityTaxFlag ensures that no value is present for CityTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetCityTaxFlag() {
	o.CityTaxFlag.Unset()
}

// GetCityTaxXref returns the CityTaxXref field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCityTaxXref() string {
	if o == nil || IsNil(o.CityTaxXref) {
		var ret string
		return ret
	}
	return *o.CityTaxXref
}

// GetCityTaxXrefOk returns a tuple with the CityTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCityTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CityTaxXref) {
		return nil, false
	}
	return o.CityTaxXref, true
}

// HasCityTaxXref returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCityTaxXref() bool {
	if o != nil && !IsNil(o.CityTaxXref) {
		return true
	}

	return false
}

// SetCityTaxXref gets a reference to the given string and assigns it to the CityTaxXref field.
func (o *UnpostedExpense) SetCityTaxXref(v string) {
	o.CityTaxXref = &v
}

// GetCityTaxAmount returns the CityTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCityTaxAmount() float64 {
	if o == nil || IsNil(o.CityTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CityTaxAmount.Get()
}

// GetCityTaxAmountOk returns a tuple with the CityTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCityTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxAmount.Get(), o.CityTaxAmount.IsSet()
}

// HasCityTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCityTaxAmount() bool {
	if o != nil && o.CityTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCityTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CityTaxAmount field.
func (o *UnpostedExpense) SetCityTaxAmount(v float64) {
	o.CityTaxAmount.Set(&v)
}
// SetCityTaxAmountNil sets the value for CityTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetCityTaxAmountNil() {
	o.CityTaxAmount.Set(nil)
}

// UnsetCityTaxAmount ensures that no value is present for CityTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetCityTaxAmount() {
	o.CityTaxAmount.Unset()
}

// GetCountryTaxFlag returns the CountryTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCountryTaxFlag() bool {
	if o == nil || IsNil(o.CountryTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CountryTaxFlag.Get()
}

// GetCountryTaxFlagOk returns a tuple with the CountryTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCountryTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxFlag.Get(), o.CountryTaxFlag.IsSet()
}

// HasCountryTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCountryTaxFlag() bool {
	if o != nil && o.CountryTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxFlag gets a reference to the given NullableBool and assigns it to the CountryTaxFlag field.
func (o *UnpostedExpense) SetCountryTaxFlag(v bool) {
	o.CountryTaxFlag.Set(&v)
}
// SetCountryTaxFlagNil sets the value for CountryTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetCountryTaxFlagNil() {
	o.CountryTaxFlag.Set(nil)
}

// UnsetCountryTaxFlag ensures that no value is present for CountryTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetCountryTaxFlag() {
	o.CountryTaxFlag.Unset()
}

// GetCountryTaxXref returns the CountryTaxXref field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCountryTaxXref() string {
	if o == nil || IsNil(o.CountryTaxXref) {
		var ret string
		return ret
	}
	return *o.CountryTaxXref
}

// GetCountryTaxXrefOk returns a tuple with the CountryTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCountryTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountryTaxXref) {
		return nil, false
	}
	return o.CountryTaxXref, true
}

// HasCountryTaxXref returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCountryTaxXref() bool {
	if o != nil && !IsNil(o.CountryTaxXref) {
		return true
	}

	return false
}

// SetCountryTaxXref gets a reference to the given string and assigns it to the CountryTaxXref field.
func (o *UnpostedExpense) SetCountryTaxXref(v string) {
	o.CountryTaxXref = &v
}

// GetCountryTaxAmount returns the CountryTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCountryTaxAmount() float64 {
	if o == nil || IsNil(o.CountryTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CountryTaxAmount.Get()
}

// GetCountryTaxAmountOk returns a tuple with the CountryTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCountryTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxAmount.Get(), o.CountryTaxAmount.IsSet()
}

// HasCountryTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCountryTaxAmount() bool {
	if o != nil && o.CountryTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CountryTaxAmount field.
func (o *UnpostedExpense) SetCountryTaxAmount(v float64) {
	o.CountryTaxAmount.Set(&v)
}
// SetCountryTaxAmountNil sets the value for CountryTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetCountryTaxAmountNil() {
	o.CountryTaxAmount.Set(nil)
}

// UnsetCountryTaxAmount ensures that no value is present for CountryTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetCountryTaxAmount() {
	o.CountryTaxAmount.Unset()
}

// GetCompositeTaxFlag returns the CompositeTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCompositeTaxFlag() bool {
	if o == nil || IsNil(o.CompositeTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompositeTaxFlag.Get()
}

// GetCompositeTaxFlagOk returns a tuple with the CompositeTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCompositeTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxFlag.Get(), o.CompositeTaxFlag.IsSet()
}

// HasCompositeTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCompositeTaxFlag() bool {
	if o != nil && o.CompositeTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxFlag gets a reference to the given NullableBool and assigns it to the CompositeTaxFlag field.
func (o *UnpostedExpense) SetCompositeTaxFlag(v bool) {
	o.CompositeTaxFlag.Set(&v)
}
// SetCompositeTaxFlagNil sets the value for CompositeTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetCompositeTaxFlagNil() {
	o.CompositeTaxFlag.Set(nil)
}

// UnsetCompositeTaxFlag ensures that no value is present for CompositeTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetCompositeTaxFlag() {
	o.CompositeTaxFlag.Unset()
}

// GetCompositeTaxXref returns the CompositeTaxXref field value if set, zero value otherwise.
func (o *UnpostedExpense) GetCompositeTaxXref() string {
	if o == nil || IsNil(o.CompositeTaxXref) {
		var ret string
		return ret
	}
	return *o.CompositeTaxXref
}

// GetCompositeTaxXrefOk returns a tuple with the CompositeTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetCompositeTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeTaxXref) {
		return nil, false
	}
	return o.CompositeTaxXref, true
}

// HasCompositeTaxXref returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCompositeTaxXref() bool {
	if o != nil && !IsNil(o.CompositeTaxXref) {
		return true
	}

	return false
}

// SetCompositeTaxXref gets a reference to the given string and assigns it to the CompositeTaxXref field.
func (o *UnpostedExpense) SetCompositeTaxXref(v string) {
	o.CompositeTaxXref = &v
}

// GetCompositeTaxAmount returns the CompositeTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetCompositeTaxAmount() float64 {
	if o == nil || IsNil(o.CompositeTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CompositeTaxAmount.Get()
}

// GetCompositeTaxAmountOk returns a tuple with the CompositeTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetCompositeTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxAmount.Get(), o.CompositeTaxAmount.IsSet()
}

// HasCompositeTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasCompositeTaxAmount() bool {
	if o != nil && o.CompositeTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CompositeTaxAmount field.
func (o *UnpostedExpense) SetCompositeTaxAmount(v float64) {
	o.CompositeTaxAmount.Set(&v)
}
// SetCompositeTaxAmountNil sets the value for CompositeTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetCompositeTaxAmountNil() {
	o.CompositeTaxAmount.Set(nil)
}

// UnsetCompositeTaxAmount ensures that no value is present for CompositeTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetCompositeTaxAmount() {
	o.CompositeTaxAmount.Unset()
}

// GetLevelSixTaxFlag returns the LevelSixTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetLevelSixTaxFlag() bool {
	if o == nil || IsNil(o.LevelSixTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixTaxFlag.Get()
}

// GetLevelSixTaxFlagOk returns a tuple with the LevelSixTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetLevelSixTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxFlag.Get(), o.LevelSixTaxFlag.IsSet()
}

// HasLevelSixTaxFlag returns a boolean if a field has been set.
func (o *UnpostedExpense) HasLevelSixTaxFlag() bool {
	if o != nil && o.LevelSixTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxFlag gets a reference to the given NullableBool and assigns it to the LevelSixTaxFlag field.
func (o *UnpostedExpense) SetLevelSixTaxFlag(v bool) {
	o.LevelSixTaxFlag.Set(&v)
}
// SetLevelSixTaxFlagNil sets the value for LevelSixTaxFlag to be an explicit nil
func (o *UnpostedExpense) SetLevelSixTaxFlagNil() {
	o.LevelSixTaxFlag.Set(nil)
}

// UnsetLevelSixTaxFlag ensures that no value is present for LevelSixTaxFlag, not even an explicit nil
func (o *UnpostedExpense) UnsetLevelSixTaxFlag() {
	o.LevelSixTaxFlag.Unset()
}

// GetLevelSixTaxXref returns the LevelSixTaxXref field value if set, zero value otherwise.
func (o *UnpostedExpense) GetLevelSixTaxXref() string {
	if o == nil || IsNil(o.LevelSixTaxXref) {
		var ret string
		return ret
	}
	return *o.LevelSixTaxXref
}

// GetLevelSixTaxXrefOk returns a tuple with the LevelSixTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetLevelSixTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelSixTaxXref) {
		return nil, false
	}
	return o.LevelSixTaxXref, true
}

// HasLevelSixTaxXref returns a boolean if a field has been set.
func (o *UnpostedExpense) HasLevelSixTaxXref() bool {
	if o != nil && !IsNil(o.LevelSixTaxXref) {
		return true
	}

	return false
}

// SetLevelSixTaxXref gets a reference to the given string and assigns it to the LevelSixTaxXref field.
func (o *UnpostedExpense) SetLevelSixTaxXref(v string) {
	o.LevelSixTaxXref = &v
}

// GetLevelSixTaxAmount returns the LevelSixTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpense) GetLevelSixTaxAmount() float64 {
	if o == nil || IsNil(o.LevelSixTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixTaxAmount.Get()
}

// GetLevelSixTaxAmountOk returns a tuple with the LevelSixTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpense) GetLevelSixTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxAmount.Get(), o.LevelSixTaxAmount.IsSet()
}

// HasLevelSixTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpense) HasLevelSixTaxAmount() bool {
	if o != nil && o.LevelSixTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxAmount gets a reference to the given NullableFloat64 and assigns it to the LevelSixTaxAmount field.
func (o *UnpostedExpense) SetLevelSixTaxAmount(v float64) {
	o.LevelSixTaxAmount.Set(&v)
}
// SetLevelSixTaxAmountNil sets the value for LevelSixTaxAmount to be an explicit nil
func (o *UnpostedExpense) SetLevelSixTaxAmountNil() {
	o.LevelSixTaxAmount.Set(nil)
}

// UnsetLevelSixTaxAmount ensures that no value is present for LevelSixTaxAmount, not even an explicit nil
func (o *UnpostedExpense) UnsetLevelSixTaxAmount() {
	o.LevelSixTaxAmount.Unset()
}

// GetDateClosed returns the DateClosed field value if set, zero value otherwise.
func (o *UnpostedExpense) GetDateClosed() string {
	if o == nil || IsNil(o.DateClosed) {
		var ret string
		return ret
	}
	return *o.DateClosed
}

// GetDateClosedOk returns a tuple with the DateClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetDateClosedOk() (*string, bool) {
	if o == nil || IsNil(o.DateClosed) {
		return nil, false
	}
	return o.DateClosed, true
}

// HasDateClosed returns a boolean if a field has been set.
func (o *UnpostedExpense) HasDateClosed() bool {
	if o != nil && !IsNil(o.DateClosed) {
		return true
	}

	return false
}

// SetDateClosed gets a reference to the given string and assigns it to the DateClosed field.
func (o *UnpostedExpense) SetDateClosed(v string) {
	o.DateClosed = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *UnpostedExpense) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpense) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *UnpostedExpense) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *UnpostedExpense) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o UnpostedExpense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnpostedExpense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if o.DepartmentId.IsSet() {
		toSerialize["departmentId"] = o.DepartmentId.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.CreditAccount) {
		toSerialize["creditAccount"] = o.CreditAccount
	}
	if o.ExpenseDetailId.IsSet() {
		toSerialize["expenseDetailId"] = o.ExpenseDetailId.Get()
	}
	if !IsNil(o.ExpenseType) {
		toSerialize["expenseType"] = o.ExpenseType
	}
	if o.Classification.IsSet() {
		toSerialize["classification"] = o.Classification.Get()
	}
	if o.GlType.IsSet() {
		toSerialize["glType"] = o.GlType.Get()
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.DateExpense) {
		toSerialize["dateExpense"] = o.DateExpense
	}
	if !IsNil(o.ChargeCode) {
		toSerialize["chargeCode"] = o.ChargeCode
	}
	if !IsNil(o.ChargeDescription) {
		toSerialize["chargeDescription"] = o.ChargeDescription
	}
	if o.InPolicy.IsSet() {
		toSerialize["inPolicy"] = o.InPolicy.Get()
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.BillableAmount.IsSet() {
		toSerialize["billableAmount"] = o.BillableAmount.Get()
	}
	if o.NonBillableAmount.IsSet() {
		toSerialize["nonBillableAmount"] = o.NonBillableAmount.Get()
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if o.AgreementAmountCovered.IsSet() {
		toSerialize["agreementAmountCovered"] = o.AgreementAmountCovered.Get()
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.ProjectPhase) {
		toSerialize["projectPhase"] = o.ProjectPhase
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.AvalaraTaxFlag.IsSet() {
		toSerialize["avalaraTaxFlag"] = o.AvalaraTaxFlag.Get()
	}
	if o.ItemTaxableFlag.IsSet() {
		toSerialize["itemTaxableFlag"] = o.ItemTaxableFlag.Get()
	}
	if o.SalesTaxAmount.IsSet() {
		toSerialize["salesTaxAmount"] = o.SalesTaxAmount.Get()
	}
	if o.StateTaxFlag.IsSet() {
		toSerialize["stateTaxFlag"] = o.StateTaxFlag.Get()
	}
	if !IsNil(o.StateTaxXref) {
		toSerialize["stateTaxXref"] = o.StateTaxXref
	}
	if o.StateTaxAmount.IsSet() {
		toSerialize["stateTaxAmount"] = o.StateTaxAmount.Get()
	}
	if o.CountyTaxFlag.IsSet() {
		toSerialize["countyTaxFlag"] = o.CountyTaxFlag.Get()
	}
	if !IsNil(o.CountyTaxXref) {
		toSerialize["countyTaxXref"] = o.CountyTaxXref
	}
	if o.CountyTaxAmount.IsSet() {
		toSerialize["countyTaxAmount"] = o.CountyTaxAmount.Get()
	}
	if o.CityTaxFlag.IsSet() {
		toSerialize["cityTaxFlag"] = o.CityTaxFlag.Get()
	}
	if !IsNil(o.CityTaxXref) {
		toSerialize["cityTaxXref"] = o.CityTaxXref
	}
	if o.CityTaxAmount.IsSet() {
		toSerialize["cityTaxAmount"] = o.CityTaxAmount.Get()
	}
	if o.CountryTaxFlag.IsSet() {
		toSerialize["countryTaxFlag"] = o.CountryTaxFlag.Get()
	}
	if !IsNil(o.CountryTaxXref) {
		toSerialize["countryTaxXref"] = o.CountryTaxXref
	}
	if o.CountryTaxAmount.IsSet() {
		toSerialize["countryTaxAmount"] = o.CountryTaxAmount.Get()
	}
	if o.CompositeTaxFlag.IsSet() {
		toSerialize["compositeTaxFlag"] = o.CompositeTaxFlag.Get()
	}
	if !IsNil(o.CompositeTaxXref) {
		toSerialize["compositeTaxXref"] = o.CompositeTaxXref
	}
	if o.CompositeTaxAmount.IsSet() {
		toSerialize["compositeTaxAmount"] = o.CompositeTaxAmount.Get()
	}
	if o.LevelSixTaxFlag.IsSet() {
		toSerialize["levelSixTaxFlag"] = o.LevelSixTaxFlag.Get()
	}
	if !IsNil(o.LevelSixTaxXref) {
		toSerialize["levelSixTaxXref"] = o.LevelSixTaxXref
	}
	if o.LevelSixTaxAmount.IsSet() {
		toSerialize["levelSixTaxAmount"] = o.LevelSixTaxAmount.Get()
	}
	if !IsNil(o.DateClosed) {
		toSerialize["dateClosed"] = o.DateClosed
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableUnpostedExpense struct {
	value *UnpostedExpense
	isSet bool
}

func (v NullableUnpostedExpense) Get() *UnpostedExpense {
	return v.value
}

func (v *NullableUnpostedExpense) Set(val *UnpostedExpense) {
	v.value = val
	v.isSet = true
}

func (v NullableUnpostedExpense) IsSet() bool {
	return v.isSet
}

func (v *NullableUnpostedExpense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnpostedExpense(val *UnpostedExpense) *NullableUnpostedExpense {
	return &NullableUnpostedExpense{value: val, isSet: true}
}

func (v NullableUnpostedExpense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnpostedExpense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


