/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UnpostedExpenseTaxableLevel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnpostedExpenseTaxableLevel{}

// UnpostedExpenseTaxableLevel struct for UnpostedExpenseTaxableLevel
type UnpostedExpenseTaxableLevel struct {
	Id *int32 `json:"id,omitempty"`
	TaxLevel *int32 `json:"taxLevel,omitempty"`
	TaxCodeXref *string `json:"taxCodeXref,omitempty"`
	TaxAmount NullableFloat64 `json:"taxAmount,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewUnpostedExpenseTaxableLevel instantiates a new UnpostedExpenseTaxableLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnpostedExpenseTaxableLevel() *UnpostedExpenseTaxableLevel {
	this := UnpostedExpenseTaxableLevel{}
	return &this
}

// NewUnpostedExpenseTaxableLevelWithDefaults instantiates a new UnpostedExpenseTaxableLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnpostedExpenseTaxableLevelWithDefaults() *UnpostedExpenseTaxableLevel {
	this := UnpostedExpenseTaxableLevel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnpostedExpenseTaxableLevel) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpenseTaxableLevel) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnpostedExpenseTaxableLevel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UnpostedExpenseTaxableLevel) SetId(v int32) {
	o.Id = &v
}

// GetTaxLevel returns the TaxLevel field value if set, zero value otherwise.
func (o *UnpostedExpenseTaxableLevel) GetTaxLevel() int32 {
	if o == nil || IsNil(o.TaxLevel) {
		var ret int32
		return ret
	}
	return *o.TaxLevel
}

// GetTaxLevelOk returns a tuple with the TaxLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpenseTaxableLevel) GetTaxLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxLevel) {
		return nil, false
	}
	return o.TaxLevel, true
}

// HasTaxLevel returns a boolean if a field has been set.
func (o *UnpostedExpenseTaxableLevel) HasTaxLevel() bool {
	if o != nil && !IsNil(o.TaxLevel) {
		return true
	}

	return false
}

// SetTaxLevel gets a reference to the given int32 and assigns it to the TaxLevel field.
func (o *UnpostedExpenseTaxableLevel) SetTaxLevel(v int32) {
	o.TaxLevel = &v
}

// GetTaxCodeXref returns the TaxCodeXref field value if set, zero value otherwise.
func (o *UnpostedExpenseTaxableLevel) GetTaxCodeXref() string {
	if o == nil || IsNil(o.TaxCodeXref) {
		var ret string
		return ret
	}
	return *o.TaxCodeXref
}

// GetTaxCodeXrefOk returns a tuple with the TaxCodeXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpenseTaxableLevel) GetTaxCodeXrefOk() (*string, bool) {
	if o == nil || IsNil(o.TaxCodeXref) {
		return nil, false
	}
	return o.TaxCodeXref, true
}

// HasTaxCodeXref returns a boolean if a field has been set.
func (o *UnpostedExpenseTaxableLevel) HasTaxCodeXref() bool {
	if o != nil && !IsNil(o.TaxCodeXref) {
		return true
	}

	return false
}

// SetTaxCodeXref gets a reference to the given string and assigns it to the TaxCodeXref field.
func (o *UnpostedExpenseTaxableLevel) SetTaxCodeXref(v string) {
	o.TaxCodeXref = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedExpenseTaxableLevel) GetTaxAmount() float64 {
	if o == nil || IsNil(o.TaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.TaxAmount.Get()
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedExpenseTaxableLevel) GetTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxAmount.Get(), o.TaxAmount.IsSet()
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *UnpostedExpenseTaxableLevel) HasTaxAmount() bool {
	if o != nil && o.TaxAmount.IsSet() {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given NullableFloat64 and assigns it to the TaxAmount field.
func (o *UnpostedExpenseTaxableLevel) SetTaxAmount(v float64) {
	o.TaxAmount.Set(&v)
}
// SetTaxAmountNil sets the value for TaxAmount to be an explicit nil
func (o *UnpostedExpenseTaxableLevel) SetTaxAmountNil() {
	o.TaxAmount.Set(nil)
}

// UnsetTaxAmount ensures that no value is present for TaxAmount, not even an explicit nil
func (o *UnpostedExpenseTaxableLevel) UnsetTaxAmount() {
	o.TaxAmount.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *UnpostedExpenseTaxableLevel) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedExpenseTaxableLevel) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *UnpostedExpenseTaxableLevel) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *UnpostedExpenseTaxableLevel) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o UnpostedExpenseTaxableLevel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnpostedExpenseTaxableLevel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TaxLevel) {
		toSerialize["taxLevel"] = o.TaxLevel
	}
	if !IsNil(o.TaxCodeXref) {
		toSerialize["taxCodeXref"] = o.TaxCodeXref
	}
	if o.TaxAmount.IsSet() {
		toSerialize["taxAmount"] = o.TaxAmount.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableUnpostedExpenseTaxableLevel struct {
	value *UnpostedExpenseTaxableLevel
	isSet bool
}

func (v NullableUnpostedExpenseTaxableLevel) Get() *UnpostedExpenseTaxableLevel {
	return v.value
}

func (v *NullableUnpostedExpenseTaxableLevel) Set(val *UnpostedExpenseTaxableLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableUnpostedExpenseTaxableLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableUnpostedExpenseTaxableLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnpostedExpenseTaxableLevel(val *UnpostedExpenseTaxableLevel) *NullableUnpostedExpenseTaxableLevel {
	return &NullableUnpostedExpenseTaxableLevel{value: val, isSet: true}
}

func (v NullableUnpostedExpenseTaxableLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnpostedExpenseTaxableLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


