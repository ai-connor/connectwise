/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the UnpostedInvoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnpostedInvoice{}

// UnpostedInvoice struct for UnpostedInvoice
type UnpostedInvoice struct {
	Id *int32 `json:"id,omitempty"`
	BillingLogId NullableInt32 `json:"billingLogId,omitempty"`
	LocationId NullableInt32 `json:"locationId,omitempty"`
	Location *OwnerLevelReference `json:"location,omitempty"`
	DepartmentId NullableInt32 `json:"departmentId,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	AccountNumber *string `json:"accountNumber,omitempty"`
	BillToCompany *CompanyReference `json:"billToCompany,omitempty"`
	BillToSite *SiteReference `json:"billToSite,omitempty"`
	ShipToCompany *CompanyReference `json:"shipToCompany,omitempty"`
	ShipToSite *SiteReference `json:"shipToSite,omitempty"`
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	InvoiceDate *string `json:"invoiceDate,omitempty"`
	InvoiceType NullableString `json:"invoiceType,omitempty"`
	Description *string `json:"description,omitempty"`
	BillingTerms *BillingTermsReference `json:"billingTerms,omitempty"`
	DueDays *string `json:"dueDays,omitempty"`
	DueDate *string `json:"dueDate,omitempty"`
	Currency *CurrencyReference `json:"currency,omitempty"`
	SubTotal NullableFloat64 `json:"subTotal,omitempty"`
	Total NullableFloat64 `json:"total,omitempty"`
	HasTime *bool `json:"hasTime,omitempty"`
	HasExpenses *bool `json:"hasExpenses,omitempty"`
	HasProducts *bool `json:"hasProducts,omitempty"`
	InvoiceTaxableFlag NullableBool `json:"invoiceTaxableFlag,omitempty"`
	TaxCode *TaxCodeReference `json:"taxCode,omitempty"`
	// Used to determine if Avalara tax is enabled.
	AvalaraTaxFlag NullableBool `json:"avalaraTaxFlag,omitempty"`
	ItemTaxableFlag NullableBool `json:"itemTaxableFlag,omitempty"`
	SalesTaxAmount NullableFloat64 `json:"salesTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the state level.
	StateTaxFlag NullableBool `json:"stateTaxFlag,omitempty"`
	StateTaxXref *string `json:"stateTaxXref,omitempty"`
	StateTaxAmount NullableFloat64 `json:"stateTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the county level.
	CountyTaxFlag NullableBool `json:"countyTaxFlag,omitempty"`
	CountyTaxXref *string `json:"countyTaxXref,omitempty"`
	CountyTaxAmount NullableFloat64 `json:"countyTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the city level.
	CityTaxFlag NullableBool `json:"cityTaxFlag,omitempty"`
	CityTaxXref *string `json:"cityTaxXref,omitempty"`
	CityTaxAmount NullableFloat64 `json:"cityTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the country level.
	CountryTaxFlag NullableBool `json:"countryTaxFlag,omitempty"`
	CountryTaxXref *string `json:"countryTaxXref,omitempty"`
	CountryTaxAmount NullableFloat64 `json:"countryTaxAmount,omitempty"`
	// Set to true if transaction is taxable at the composite level.
	CompositeTaxFlag NullableBool `json:"compositeTaxFlag,omitempty"`
	CompositeTaxXref *string `json:"compositeTaxXref,omitempty"`
	CompositeTaxAmount NullableFloat64 `json:"compositeTaxAmount,omitempty"`
	// Set to true if transaction is taxable at level six.
	LevelSixTaxFlag NullableBool `json:"levelSixTaxFlag,omitempty"`
	LevelSixTaxXref *string `json:"levelSixTaxXref,omitempty"`
	LevelSixTaxAmount NullableFloat64 `json:"levelSixTaxAmount,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	DateClosed *string `json:"dateClosed,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewUnpostedInvoice instantiates a new UnpostedInvoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnpostedInvoice() *UnpostedInvoice {
	this := UnpostedInvoice{}
	return &this
}

// NewUnpostedInvoiceWithDefaults instantiates a new UnpostedInvoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnpostedInvoiceWithDefaults() *UnpostedInvoice {
	this := UnpostedInvoice{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UnpostedInvoice) SetId(v int32) {
	o.Id = &v
}

// GetBillingLogId returns the BillingLogId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetBillingLogId() int32 {
	if o == nil || IsNil(o.BillingLogId.Get()) {
		var ret int32
		return ret
	}
	return *o.BillingLogId.Get()
}

// GetBillingLogIdOk returns a tuple with the BillingLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetBillingLogIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingLogId.Get(), o.BillingLogId.IsSet()
}

// HasBillingLogId returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasBillingLogId() bool {
	if o != nil && o.BillingLogId.IsSet() {
		return true
	}

	return false
}

// SetBillingLogId gets a reference to the given NullableInt32 and assigns it to the BillingLogId field.
func (o *UnpostedInvoice) SetBillingLogId(v int32) {
	o.BillingLogId.Set(&v)
}
// SetBillingLogIdNil sets the value for BillingLogId to be an explicit nil
func (o *UnpostedInvoice) SetBillingLogIdNil() {
	o.BillingLogId.Set(nil)
}

// UnsetBillingLogId ensures that no value is present for BillingLogId, not even an explicit nil
func (o *UnpostedInvoice) UnsetBillingLogId() {
	o.BillingLogId.Unset()
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetLocationId() int32 {
	if o == nil || IsNil(o.LocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.LocationId.Get()
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationId.Get(), o.LocationId.IsSet()
}

// HasLocationId returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasLocationId() bool {
	if o != nil && o.LocationId.IsSet() {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given NullableInt32 and assigns it to the LocationId field.
func (o *UnpostedInvoice) SetLocationId(v int32) {
	o.LocationId.Set(&v)
}
// SetLocationIdNil sets the value for LocationId to be an explicit nil
func (o *UnpostedInvoice) SetLocationIdNil() {
	o.LocationId.Set(nil)
}

// UnsetLocationId ensures that no value is present for LocationId, not even an explicit nil
func (o *UnpostedInvoice) UnsetLocationId() {
	o.LocationId.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetLocation() OwnerLevelReference {
	if o == nil || IsNil(o.Location) {
		var ret OwnerLevelReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetLocationOk() (*OwnerLevelReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given OwnerLevelReference and assigns it to the Location field.
func (o *UnpostedInvoice) SetLocation(v OwnerLevelReference) {
	o.Location = &v
}

// GetDepartmentId returns the DepartmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetDepartmentId() int32 {
	if o == nil || IsNil(o.DepartmentId.Get()) {
		var ret int32
		return ret
	}
	return *o.DepartmentId.Get()
}

// GetDepartmentIdOk returns a tuple with the DepartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetDepartmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartmentId.Get(), o.DepartmentId.IsSet()
}

// HasDepartmentId returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasDepartmentId() bool {
	if o != nil && o.DepartmentId.IsSet() {
		return true
	}

	return false
}

// SetDepartmentId gets a reference to the given NullableInt32 and assigns it to the DepartmentId field.
func (o *UnpostedInvoice) SetDepartmentId(v int32) {
	o.DepartmentId.Set(&v)
}
// SetDepartmentIdNil sets the value for DepartmentId to be an explicit nil
func (o *UnpostedInvoice) SetDepartmentIdNil() {
	o.DepartmentId.Set(nil)
}

// UnsetDepartmentId ensures that no value is present for DepartmentId, not even an explicit nil
func (o *UnpostedInvoice) UnsetDepartmentId() {
	o.DepartmentId.Unset()
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *UnpostedInvoice) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *UnpostedInvoice) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *UnpostedInvoice) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetBillToCompany returns the BillToCompany field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetBillToCompany() CompanyReference {
	if o == nil || IsNil(o.BillToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.BillToCompany
}

// GetBillToCompanyOk returns a tuple with the BillToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetBillToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.BillToCompany) {
		return nil, false
	}
	return o.BillToCompany, true
}

// HasBillToCompany returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasBillToCompany() bool {
	if o != nil && !IsNil(o.BillToCompany) {
		return true
	}

	return false
}

// SetBillToCompany gets a reference to the given CompanyReference and assigns it to the BillToCompany field.
func (o *UnpostedInvoice) SetBillToCompany(v CompanyReference) {
	o.BillToCompany = &v
}

// GetBillToSite returns the BillToSite field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetBillToSite() SiteReference {
	if o == nil || IsNil(o.BillToSite) {
		var ret SiteReference
		return ret
	}
	return *o.BillToSite
}

// GetBillToSiteOk returns a tuple with the BillToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetBillToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.BillToSite) {
		return nil, false
	}
	return o.BillToSite, true
}

// HasBillToSite returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasBillToSite() bool {
	if o != nil && !IsNil(o.BillToSite) {
		return true
	}

	return false
}

// SetBillToSite gets a reference to the given SiteReference and assigns it to the BillToSite field.
func (o *UnpostedInvoice) SetBillToSite(v SiteReference) {
	o.BillToSite = &v
}

// GetShipToCompany returns the ShipToCompany field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetShipToCompany() CompanyReference {
	if o == nil || IsNil(o.ShipToCompany) {
		var ret CompanyReference
		return ret
	}
	return *o.ShipToCompany
}

// GetShipToCompanyOk returns a tuple with the ShipToCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetShipToCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.ShipToCompany) {
		return nil, false
	}
	return o.ShipToCompany, true
}

// HasShipToCompany returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasShipToCompany() bool {
	if o != nil && !IsNil(o.ShipToCompany) {
		return true
	}

	return false
}

// SetShipToCompany gets a reference to the given CompanyReference and assigns it to the ShipToCompany field.
func (o *UnpostedInvoice) SetShipToCompany(v CompanyReference) {
	o.ShipToCompany = &v
}

// GetShipToSite returns the ShipToSite field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetShipToSite() SiteReference {
	if o == nil || IsNil(o.ShipToSite) {
		var ret SiteReference
		return ret
	}
	return *o.ShipToSite
}

// GetShipToSiteOk returns a tuple with the ShipToSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetShipToSiteOk() (*SiteReference, bool) {
	if o == nil || IsNil(o.ShipToSite) {
		return nil, false
	}
	return o.ShipToSite, true
}

// HasShipToSite returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasShipToSite() bool {
	if o != nil && !IsNil(o.ShipToSite) {
		return true
	}

	return false
}

// SetShipToSite gets a reference to the given SiteReference and assigns it to the ShipToSite field.
func (o *UnpostedInvoice) SetShipToSite(v SiteReference) {
	o.ShipToSite = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *UnpostedInvoice) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetInvoiceDate returns the InvoiceDate field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetInvoiceDate() string {
	if o == nil || IsNil(o.InvoiceDate) {
		var ret string
		return ret
	}
	return *o.InvoiceDate
}

// GetInvoiceDateOk returns a tuple with the InvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDate) {
		return nil, false
	}
	return o.InvoiceDate, true
}

// HasInvoiceDate returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasInvoiceDate() bool {
	if o != nil && !IsNil(o.InvoiceDate) {
		return true
	}

	return false
}

// SetInvoiceDate gets a reference to the given string and assigns it to the InvoiceDate field.
func (o *UnpostedInvoice) SetInvoiceDate(v string) {
	o.InvoiceDate = &v
}

// GetInvoiceType returns the InvoiceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetInvoiceType() string {
	if o == nil || IsNil(o.InvoiceType.Get()) {
		var ret string
		return ret
	}
	return *o.InvoiceType.Get()
}

// GetInvoiceTypeOk returns a tuple with the InvoiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetInvoiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceType.Get(), o.InvoiceType.IsSet()
}

// HasInvoiceType returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasInvoiceType() bool {
	if o != nil && o.InvoiceType.IsSet() {
		return true
	}

	return false
}

// SetInvoiceType gets a reference to the given NullableString and assigns it to the InvoiceType field.
func (o *UnpostedInvoice) SetInvoiceType(v string) {
	o.InvoiceType.Set(&v)
}
// SetInvoiceTypeNil sets the value for InvoiceType to be an explicit nil
func (o *UnpostedInvoice) SetInvoiceTypeNil() {
	o.InvoiceType.Set(nil)
}

// UnsetInvoiceType ensures that no value is present for InvoiceType, not even an explicit nil
func (o *UnpostedInvoice) UnsetInvoiceType() {
	o.InvoiceType.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnpostedInvoice) SetDescription(v string) {
	o.Description = &v
}

// GetBillingTerms returns the BillingTerms field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetBillingTerms() BillingTermsReference {
	if o == nil || IsNil(o.BillingTerms) {
		var ret BillingTermsReference
		return ret
	}
	return *o.BillingTerms
}

// GetBillingTermsOk returns a tuple with the BillingTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetBillingTermsOk() (*BillingTermsReference, bool) {
	if o == nil || IsNil(o.BillingTerms) {
		return nil, false
	}
	return o.BillingTerms, true
}

// HasBillingTerms returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasBillingTerms() bool {
	if o != nil && !IsNil(o.BillingTerms) {
		return true
	}

	return false
}

// SetBillingTerms gets a reference to the given BillingTermsReference and assigns it to the BillingTerms field.
func (o *UnpostedInvoice) SetBillingTerms(v BillingTermsReference) {
	o.BillingTerms = &v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetDueDays() string {
	if o == nil || IsNil(o.DueDays) {
		var ret string
		return ret
	}
	return *o.DueDays
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetDueDaysOk() (*string, bool) {
	if o == nil || IsNil(o.DueDays) {
		return nil, false
	}
	return o.DueDays, true
}

// HasDueDays returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasDueDays() bool {
	if o != nil && !IsNil(o.DueDays) {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given string and assigns it to the DueDays field.
func (o *UnpostedInvoice) SetDueDays(v string) {
	o.DueDays = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *UnpostedInvoice) SetDueDate(v string) {
	o.DueDate = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCurrency() CurrencyReference {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyReference
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCurrencyOk() (*CurrencyReference, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyReference and assigns it to the Currency field.
func (o *UnpostedInvoice) SetCurrency(v CurrencyReference) {
	o.Currency = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal.Get()) {
		var ret float64
		return ret
	}
	return *o.SubTotal.Get()
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetSubTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubTotal.Get(), o.SubTotal.IsSet()
}

// HasSubTotal returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasSubTotal() bool {
	if o != nil && o.SubTotal.IsSet() {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given NullableFloat64 and assigns it to the SubTotal field.
func (o *UnpostedInvoice) SetSubTotal(v float64) {
	o.SubTotal.Set(&v)
}
// SetSubTotalNil sets the value for SubTotal to be an explicit nil
func (o *UnpostedInvoice) SetSubTotalNil() {
	o.SubTotal.Set(nil)
}

// UnsetSubTotal ensures that no value is present for SubTotal, not even an explicit nil
func (o *UnpostedInvoice) UnsetSubTotal() {
	o.SubTotal.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetTotal() float64 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat64 and assigns it to the Total field.
func (o *UnpostedInvoice) SetTotal(v float64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *UnpostedInvoice) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *UnpostedInvoice) UnsetTotal() {
	o.Total.Unset()
}

// GetHasTime returns the HasTime field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetHasTime() bool {
	if o == nil || IsNil(o.HasTime) {
		var ret bool
		return ret
	}
	return *o.HasTime
}

// GetHasTimeOk returns a tuple with the HasTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetHasTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.HasTime) {
		return nil, false
	}
	return o.HasTime, true
}

// HasHasTime returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasHasTime() bool {
	if o != nil && !IsNil(o.HasTime) {
		return true
	}

	return false
}

// SetHasTime gets a reference to the given bool and assigns it to the HasTime field.
func (o *UnpostedInvoice) SetHasTime(v bool) {
	o.HasTime = &v
}

// GetHasExpenses returns the HasExpenses field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetHasExpenses() bool {
	if o == nil || IsNil(o.HasExpenses) {
		var ret bool
		return ret
	}
	return *o.HasExpenses
}

// GetHasExpensesOk returns a tuple with the HasExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetHasExpensesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasExpenses) {
		return nil, false
	}
	return o.HasExpenses, true
}

// HasHasExpenses returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasHasExpenses() bool {
	if o != nil && !IsNil(o.HasExpenses) {
		return true
	}

	return false
}

// SetHasExpenses gets a reference to the given bool and assigns it to the HasExpenses field.
func (o *UnpostedInvoice) SetHasExpenses(v bool) {
	o.HasExpenses = &v
}

// GetHasProducts returns the HasProducts field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetHasProducts() bool {
	if o == nil || IsNil(o.HasProducts) {
		var ret bool
		return ret
	}
	return *o.HasProducts
}

// GetHasProductsOk returns a tuple with the HasProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetHasProductsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasProducts) {
		return nil, false
	}
	return o.HasProducts, true
}

// HasHasProducts returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasHasProducts() bool {
	if o != nil && !IsNil(o.HasProducts) {
		return true
	}

	return false
}

// SetHasProducts gets a reference to the given bool and assigns it to the HasProducts field.
func (o *UnpostedInvoice) SetHasProducts(v bool) {
	o.HasProducts = &v
}

// GetInvoiceTaxableFlag returns the InvoiceTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetInvoiceTaxableFlag() bool {
	if o == nil || IsNil(o.InvoiceTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InvoiceTaxableFlag.Get()
}

// GetInvoiceTaxableFlagOk returns a tuple with the InvoiceTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetInvoiceTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoiceTaxableFlag.Get(), o.InvoiceTaxableFlag.IsSet()
}

// HasInvoiceTaxableFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasInvoiceTaxableFlag() bool {
	if o != nil && o.InvoiceTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetInvoiceTaxableFlag gets a reference to the given NullableBool and assigns it to the InvoiceTaxableFlag field.
func (o *UnpostedInvoice) SetInvoiceTaxableFlag(v bool) {
	o.InvoiceTaxableFlag.Set(&v)
}
// SetInvoiceTaxableFlagNil sets the value for InvoiceTaxableFlag to be an explicit nil
func (o *UnpostedInvoice) SetInvoiceTaxableFlagNil() {
	o.InvoiceTaxableFlag.Set(nil)
}

// UnsetInvoiceTaxableFlag ensures that no value is present for InvoiceTaxableFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetInvoiceTaxableFlag() {
	o.InvoiceTaxableFlag.Unset()
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetTaxCode() TaxCodeReference {
	if o == nil || IsNil(o.TaxCode) {
		var ret TaxCodeReference
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetTaxCodeOk() (*TaxCodeReference, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given TaxCodeReference and assigns it to the TaxCode field.
func (o *UnpostedInvoice) SetTaxCode(v TaxCodeReference) {
	o.TaxCode = &v
}

// GetAvalaraTaxFlag returns the AvalaraTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetAvalaraTaxFlag() bool {
	if o == nil || IsNil(o.AvalaraTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.AvalaraTaxFlag.Get()
}

// GetAvalaraTaxFlagOk returns a tuple with the AvalaraTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetAvalaraTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvalaraTaxFlag.Get(), o.AvalaraTaxFlag.IsSet()
}

// HasAvalaraTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasAvalaraTaxFlag() bool {
	if o != nil && o.AvalaraTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetAvalaraTaxFlag gets a reference to the given NullableBool and assigns it to the AvalaraTaxFlag field.
func (o *UnpostedInvoice) SetAvalaraTaxFlag(v bool) {
	o.AvalaraTaxFlag.Set(&v)
}
// SetAvalaraTaxFlagNil sets the value for AvalaraTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetAvalaraTaxFlagNil() {
	o.AvalaraTaxFlag.Set(nil)
}

// UnsetAvalaraTaxFlag ensures that no value is present for AvalaraTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetAvalaraTaxFlag() {
	o.AvalaraTaxFlag.Unset()
}

// GetItemTaxableFlag returns the ItemTaxableFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetItemTaxableFlag() bool {
	if o == nil || IsNil(o.ItemTaxableFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ItemTaxableFlag.Get()
}

// GetItemTaxableFlagOk returns a tuple with the ItemTaxableFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetItemTaxableFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemTaxableFlag.Get(), o.ItemTaxableFlag.IsSet()
}

// HasItemTaxableFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasItemTaxableFlag() bool {
	if o != nil && o.ItemTaxableFlag.IsSet() {
		return true
	}

	return false
}

// SetItemTaxableFlag gets a reference to the given NullableBool and assigns it to the ItemTaxableFlag field.
func (o *UnpostedInvoice) SetItemTaxableFlag(v bool) {
	o.ItemTaxableFlag.Set(&v)
}
// SetItemTaxableFlagNil sets the value for ItemTaxableFlag to be an explicit nil
func (o *UnpostedInvoice) SetItemTaxableFlagNil() {
	o.ItemTaxableFlag.Set(nil)
}

// UnsetItemTaxableFlag ensures that no value is present for ItemTaxableFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetItemTaxableFlag() {
	o.ItemTaxableFlag.Unset()
}

// GetSalesTaxAmount returns the SalesTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetSalesTaxAmount() float64 {
	if o == nil || IsNil(o.SalesTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.SalesTaxAmount.Get()
}

// GetSalesTaxAmountOk returns a tuple with the SalesTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetSalesTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SalesTaxAmount.Get(), o.SalesTaxAmount.IsSet()
}

// HasSalesTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasSalesTaxAmount() bool {
	if o != nil && o.SalesTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetSalesTaxAmount gets a reference to the given NullableFloat64 and assigns it to the SalesTaxAmount field.
func (o *UnpostedInvoice) SetSalesTaxAmount(v float64) {
	o.SalesTaxAmount.Set(&v)
}
// SetSalesTaxAmountNil sets the value for SalesTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetSalesTaxAmountNil() {
	o.SalesTaxAmount.Set(nil)
}

// UnsetSalesTaxAmount ensures that no value is present for SalesTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetSalesTaxAmount() {
	o.SalesTaxAmount.Unset()
}

// GetStateTaxFlag returns the StateTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetStateTaxFlag() bool {
	if o == nil || IsNil(o.StateTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.StateTaxFlag.Get()
}

// GetStateTaxFlagOk returns a tuple with the StateTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetStateTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxFlag.Get(), o.StateTaxFlag.IsSet()
}

// HasStateTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasStateTaxFlag() bool {
	if o != nil && o.StateTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetStateTaxFlag gets a reference to the given NullableBool and assigns it to the StateTaxFlag field.
func (o *UnpostedInvoice) SetStateTaxFlag(v bool) {
	o.StateTaxFlag.Set(&v)
}
// SetStateTaxFlagNil sets the value for StateTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetStateTaxFlagNil() {
	o.StateTaxFlag.Set(nil)
}

// UnsetStateTaxFlag ensures that no value is present for StateTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetStateTaxFlag() {
	o.StateTaxFlag.Unset()
}

// GetStateTaxXref returns the StateTaxXref field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetStateTaxXref() string {
	if o == nil || IsNil(o.StateTaxXref) {
		var ret string
		return ret
	}
	return *o.StateTaxXref
}

// GetStateTaxXrefOk returns a tuple with the StateTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetStateTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.StateTaxXref) {
		return nil, false
	}
	return o.StateTaxXref, true
}

// HasStateTaxXref returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasStateTaxXref() bool {
	if o != nil && !IsNil(o.StateTaxXref) {
		return true
	}

	return false
}

// SetStateTaxXref gets a reference to the given string and assigns it to the StateTaxXref field.
func (o *UnpostedInvoice) SetStateTaxXref(v string) {
	o.StateTaxXref = &v
}

// GetStateTaxAmount returns the StateTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetStateTaxAmount() float64 {
	if o == nil || IsNil(o.StateTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.StateTaxAmount.Get()
}

// GetStateTaxAmountOk returns a tuple with the StateTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetStateTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateTaxAmount.Get(), o.StateTaxAmount.IsSet()
}

// HasStateTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasStateTaxAmount() bool {
	if o != nil && o.StateTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetStateTaxAmount gets a reference to the given NullableFloat64 and assigns it to the StateTaxAmount field.
func (o *UnpostedInvoice) SetStateTaxAmount(v float64) {
	o.StateTaxAmount.Set(&v)
}
// SetStateTaxAmountNil sets the value for StateTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetStateTaxAmountNil() {
	o.StateTaxAmount.Set(nil)
}

// UnsetStateTaxAmount ensures that no value is present for StateTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetStateTaxAmount() {
	o.StateTaxAmount.Unset()
}

// GetCountyTaxFlag returns the CountyTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCountyTaxFlag() bool {
	if o == nil || IsNil(o.CountyTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CountyTaxFlag.Get()
}

// GetCountyTaxFlagOk returns a tuple with the CountyTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCountyTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxFlag.Get(), o.CountyTaxFlag.IsSet()
}

// HasCountyTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCountyTaxFlag() bool {
	if o != nil && o.CountyTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxFlag gets a reference to the given NullableBool and assigns it to the CountyTaxFlag field.
func (o *UnpostedInvoice) SetCountyTaxFlag(v bool) {
	o.CountyTaxFlag.Set(&v)
}
// SetCountyTaxFlagNil sets the value for CountyTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetCountyTaxFlagNil() {
	o.CountyTaxFlag.Set(nil)
}

// UnsetCountyTaxFlag ensures that no value is present for CountyTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetCountyTaxFlag() {
	o.CountyTaxFlag.Unset()
}

// GetCountyTaxXref returns the CountyTaxXref field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCountyTaxXref() string {
	if o == nil || IsNil(o.CountyTaxXref) {
		var ret string
		return ret
	}
	return *o.CountyTaxXref
}

// GetCountyTaxXrefOk returns a tuple with the CountyTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCountyTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountyTaxXref) {
		return nil, false
	}
	return o.CountyTaxXref, true
}

// HasCountyTaxXref returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCountyTaxXref() bool {
	if o != nil && !IsNil(o.CountyTaxXref) {
		return true
	}

	return false
}

// SetCountyTaxXref gets a reference to the given string and assigns it to the CountyTaxXref field.
func (o *UnpostedInvoice) SetCountyTaxXref(v string) {
	o.CountyTaxXref = &v
}

// GetCountyTaxAmount returns the CountyTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCountyTaxAmount() float64 {
	if o == nil || IsNil(o.CountyTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CountyTaxAmount.Get()
}

// GetCountyTaxAmountOk returns a tuple with the CountyTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCountyTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountyTaxAmount.Get(), o.CountyTaxAmount.IsSet()
}

// HasCountyTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCountyTaxAmount() bool {
	if o != nil && o.CountyTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCountyTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CountyTaxAmount field.
func (o *UnpostedInvoice) SetCountyTaxAmount(v float64) {
	o.CountyTaxAmount.Set(&v)
}
// SetCountyTaxAmountNil sets the value for CountyTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetCountyTaxAmountNil() {
	o.CountyTaxAmount.Set(nil)
}

// UnsetCountyTaxAmount ensures that no value is present for CountyTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetCountyTaxAmount() {
	o.CountyTaxAmount.Unset()
}

// GetCityTaxFlag returns the CityTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCityTaxFlag() bool {
	if o == nil || IsNil(o.CityTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CityTaxFlag.Get()
}

// GetCityTaxFlagOk returns a tuple with the CityTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCityTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxFlag.Get(), o.CityTaxFlag.IsSet()
}

// HasCityTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCityTaxFlag() bool {
	if o != nil && o.CityTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCityTaxFlag gets a reference to the given NullableBool and assigns it to the CityTaxFlag field.
func (o *UnpostedInvoice) SetCityTaxFlag(v bool) {
	o.CityTaxFlag.Set(&v)
}
// SetCityTaxFlagNil sets the value for CityTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetCityTaxFlagNil() {
	o.CityTaxFlag.Set(nil)
}

// UnsetCityTaxFlag ensures that no value is present for CityTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetCityTaxFlag() {
	o.CityTaxFlag.Unset()
}

// GetCityTaxXref returns the CityTaxXref field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCityTaxXref() string {
	if o == nil || IsNil(o.CityTaxXref) {
		var ret string
		return ret
	}
	return *o.CityTaxXref
}

// GetCityTaxXrefOk returns a tuple with the CityTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCityTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CityTaxXref) {
		return nil, false
	}
	return o.CityTaxXref, true
}

// HasCityTaxXref returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCityTaxXref() bool {
	if o != nil && !IsNil(o.CityTaxXref) {
		return true
	}

	return false
}

// SetCityTaxXref gets a reference to the given string and assigns it to the CityTaxXref field.
func (o *UnpostedInvoice) SetCityTaxXref(v string) {
	o.CityTaxXref = &v
}

// GetCityTaxAmount returns the CityTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCityTaxAmount() float64 {
	if o == nil || IsNil(o.CityTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CityTaxAmount.Get()
}

// GetCityTaxAmountOk returns a tuple with the CityTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCityTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityTaxAmount.Get(), o.CityTaxAmount.IsSet()
}

// HasCityTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCityTaxAmount() bool {
	if o != nil && o.CityTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCityTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CityTaxAmount field.
func (o *UnpostedInvoice) SetCityTaxAmount(v float64) {
	o.CityTaxAmount.Set(&v)
}
// SetCityTaxAmountNil sets the value for CityTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetCityTaxAmountNil() {
	o.CityTaxAmount.Set(nil)
}

// UnsetCityTaxAmount ensures that no value is present for CityTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetCityTaxAmount() {
	o.CityTaxAmount.Unset()
}

// GetCountryTaxFlag returns the CountryTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCountryTaxFlag() bool {
	if o == nil || IsNil(o.CountryTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CountryTaxFlag.Get()
}

// GetCountryTaxFlagOk returns a tuple with the CountryTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCountryTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxFlag.Get(), o.CountryTaxFlag.IsSet()
}

// HasCountryTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCountryTaxFlag() bool {
	if o != nil && o.CountryTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxFlag gets a reference to the given NullableBool and assigns it to the CountryTaxFlag field.
func (o *UnpostedInvoice) SetCountryTaxFlag(v bool) {
	o.CountryTaxFlag.Set(&v)
}
// SetCountryTaxFlagNil sets the value for CountryTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetCountryTaxFlagNil() {
	o.CountryTaxFlag.Set(nil)
}

// UnsetCountryTaxFlag ensures that no value is present for CountryTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetCountryTaxFlag() {
	o.CountryTaxFlag.Unset()
}

// GetCountryTaxXref returns the CountryTaxXref field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCountryTaxXref() string {
	if o == nil || IsNil(o.CountryTaxXref) {
		var ret string
		return ret
	}
	return *o.CountryTaxXref
}

// GetCountryTaxXrefOk returns a tuple with the CountryTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCountryTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CountryTaxXref) {
		return nil, false
	}
	return o.CountryTaxXref, true
}

// HasCountryTaxXref returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCountryTaxXref() bool {
	if o != nil && !IsNil(o.CountryTaxXref) {
		return true
	}

	return false
}

// SetCountryTaxXref gets a reference to the given string and assigns it to the CountryTaxXref field.
func (o *UnpostedInvoice) SetCountryTaxXref(v string) {
	o.CountryTaxXref = &v
}

// GetCountryTaxAmount returns the CountryTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCountryTaxAmount() float64 {
	if o == nil || IsNil(o.CountryTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CountryTaxAmount.Get()
}

// GetCountryTaxAmountOk returns a tuple with the CountryTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCountryTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryTaxAmount.Get(), o.CountryTaxAmount.IsSet()
}

// HasCountryTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCountryTaxAmount() bool {
	if o != nil && o.CountryTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCountryTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CountryTaxAmount field.
func (o *UnpostedInvoice) SetCountryTaxAmount(v float64) {
	o.CountryTaxAmount.Set(&v)
}
// SetCountryTaxAmountNil sets the value for CountryTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetCountryTaxAmountNil() {
	o.CountryTaxAmount.Set(nil)
}

// UnsetCountryTaxAmount ensures that no value is present for CountryTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetCountryTaxAmount() {
	o.CountryTaxAmount.Unset()
}

// GetCompositeTaxFlag returns the CompositeTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCompositeTaxFlag() bool {
	if o == nil || IsNil(o.CompositeTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.CompositeTaxFlag.Get()
}

// GetCompositeTaxFlagOk returns a tuple with the CompositeTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCompositeTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxFlag.Get(), o.CompositeTaxFlag.IsSet()
}

// HasCompositeTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCompositeTaxFlag() bool {
	if o != nil && o.CompositeTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxFlag gets a reference to the given NullableBool and assigns it to the CompositeTaxFlag field.
func (o *UnpostedInvoice) SetCompositeTaxFlag(v bool) {
	o.CompositeTaxFlag.Set(&v)
}
// SetCompositeTaxFlagNil sets the value for CompositeTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetCompositeTaxFlagNil() {
	o.CompositeTaxFlag.Set(nil)
}

// UnsetCompositeTaxFlag ensures that no value is present for CompositeTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetCompositeTaxFlag() {
	o.CompositeTaxFlag.Unset()
}

// GetCompositeTaxXref returns the CompositeTaxXref field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCompositeTaxXref() string {
	if o == nil || IsNil(o.CompositeTaxXref) {
		var ret string
		return ret
	}
	return *o.CompositeTaxXref
}

// GetCompositeTaxXrefOk returns a tuple with the CompositeTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCompositeTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeTaxXref) {
		return nil, false
	}
	return o.CompositeTaxXref, true
}

// HasCompositeTaxXref returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCompositeTaxXref() bool {
	if o != nil && !IsNil(o.CompositeTaxXref) {
		return true
	}

	return false
}

// SetCompositeTaxXref gets a reference to the given string and assigns it to the CompositeTaxXref field.
func (o *UnpostedInvoice) SetCompositeTaxXref(v string) {
	o.CompositeTaxXref = &v
}

// GetCompositeTaxAmount returns the CompositeTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetCompositeTaxAmount() float64 {
	if o == nil || IsNil(o.CompositeTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.CompositeTaxAmount.Get()
}

// GetCompositeTaxAmountOk returns a tuple with the CompositeTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetCompositeTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompositeTaxAmount.Get(), o.CompositeTaxAmount.IsSet()
}

// HasCompositeTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCompositeTaxAmount() bool {
	if o != nil && o.CompositeTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetCompositeTaxAmount gets a reference to the given NullableFloat64 and assigns it to the CompositeTaxAmount field.
func (o *UnpostedInvoice) SetCompositeTaxAmount(v float64) {
	o.CompositeTaxAmount.Set(&v)
}
// SetCompositeTaxAmountNil sets the value for CompositeTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetCompositeTaxAmountNil() {
	o.CompositeTaxAmount.Set(nil)
}

// UnsetCompositeTaxAmount ensures that no value is present for CompositeTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetCompositeTaxAmount() {
	o.CompositeTaxAmount.Unset()
}

// GetLevelSixTaxFlag returns the LevelSixTaxFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetLevelSixTaxFlag() bool {
	if o == nil || IsNil(o.LevelSixTaxFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.LevelSixTaxFlag.Get()
}

// GetLevelSixTaxFlagOk returns a tuple with the LevelSixTaxFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetLevelSixTaxFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxFlag.Get(), o.LevelSixTaxFlag.IsSet()
}

// HasLevelSixTaxFlag returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasLevelSixTaxFlag() bool {
	if o != nil && o.LevelSixTaxFlag.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxFlag gets a reference to the given NullableBool and assigns it to the LevelSixTaxFlag field.
func (o *UnpostedInvoice) SetLevelSixTaxFlag(v bool) {
	o.LevelSixTaxFlag.Set(&v)
}
// SetLevelSixTaxFlagNil sets the value for LevelSixTaxFlag to be an explicit nil
func (o *UnpostedInvoice) SetLevelSixTaxFlagNil() {
	o.LevelSixTaxFlag.Set(nil)
}

// UnsetLevelSixTaxFlag ensures that no value is present for LevelSixTaxFlag, not even an explicit nil
func (o *UnpostedInvoice) UnsetLevelSixTaxFlag() {
	o.LevelSixTaxFlag.Unset()
}

// GetLevelSixTaxXref returns the LevelSixTaxXref field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetLevelSixTaxXref() string {
	if o == nil || IsNil(o.LevelSixTaxXref) {
		var ret string
		return ret
	}
	return *o.LevelSixTaxXref
}

// GetLevelSixTaxXrefOk returns a tuple with the LevelSixTaxXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetLevelSixTaxXrefOk() (*string, bool) {
	if o == nil || IsNil(o.LevelSixTaxXref) {
		return nil, false
	}
	return o.LevelSixTaxXref, true
}

// HasLevelSixTaxXref returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasLevelSixTaxXref() bool {
	if o != nil && !IsNil(o.LevelSixTaxXref) {
		return true
	}

	return false
}

// SetLevelSixTaxXref gets a reference to the given string and assigns it to the LevelSixTaxXref field.
func (o *UnpostedInvoice) SetLevelSixTaxXref(v string) {
	o.LevelSixTaxXref = &v
}

// GetLevelSixTaxAmount returns the LevelSixTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnpostedInvoice) GetLevelSixTaxAmount() float64 {
	if o == nil || IsNil(o.LevelSixTaxAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.LevelSixTaxAmount.Get()
}

// GetLevelSixTaxAmountOk returns a tuple with the LevelSixTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnpostedInvoice) GetLevelSixTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelSixTaxAmount.Get(), o.LevelSixTaxAmount.IsSet()
}

// HasLevelSixTaxAmount returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasLevelSixTaxAmount() bool {
	if o != nil && o.LevelSixTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetLevelSixTaxAmount gets a reference to the given NullableFloat64 and assigns it to the LevelSixTaxAmount field.
func (o *UnpostedInvoice) SetLevelSixTaxAmount(v float64) {
	o.LevelSixTaxAmount.Set(&v)
}
// SetLevelSixTaxAmountNil sets the value for LevelSixTaxAmount to be an explicit nil
func (o *UnpostedInvoice) SetLevelSixTaxAmountNil() {
	o.LevelSixTaxAmount.Set(nil)
}

// UnsetLevelSixTaxAmount ensures that no value is present for LevelSixTaxAmount, not even an explicit nil
func (o *UnpostedInvoice) UnsetLevelSixTaxAmount() {
	o.LevelSixTaxAmount.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *UnpostedInvoice) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetDateClosed returns the DateClosed field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetDateClosed() string {
	if o == nil || IsNil(o.DateClosed) {
		var ret string
		return ret
	}
	return *o.DateClosed
}

// GetDateClosedOk returns a tuple with the DateClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetDateClosedOk() (*string, bool) {
	if o == nil || IsNil(o.DateClosed) {
		return nil, false
	}
	return o.DateClosed, true
}

// HasDateClosed returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasDateClosed() bool {
	if o != nil && !IsNil(o.DateClosed) {
		return true
	}

	return false
}

// SetDateClosed gets a reference to the given string and assigns it to the DateClosed field.
func (o *UnpostedInvoice) SetDateClosed(v string) {
	o.DateClosed = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *UnpostedInvoice) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpostedInvoice) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *UnpostedInvoice) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *UnpostedInvoice) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o UnpostedInvoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnpostedInvoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.BillingLogId.IsSet() {
		toSerialize["billingLogId"] = o.BillingLogId.Get()
	}
	if o.LocationId.IsSet() {
		toSerialize["locationId"] = o.LocationId.Get()
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if o.DepartmentId.IsSet() {
		toSerialize["departmentId"] = o.DepartmentId.Get()
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.AccountNumber) {
		toSerialize["accountNumber"] = o.AccountNumber
	}
	if !IsNil(o.BillToCompany) {
		toSerialize["billToCompany"] = o.BillToCompany
	}
	if !IsNil(o.BillToSite) {
		toSerialize["billToSite"] = o.BillToSite
	}
	if !IsNil(o.ShipToCompany) {
		toSerialize["shipToCompany"] = o.ShipToCompany
	}
	if !IsNil(o.ShipToSite) {
		toSerialize["shipToSite"] = o.ShipToSite
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["invoiceNumber"] = o.InvoiceNumber
	}
	if !IsNil(o.InvoiceDate) {
		toSerialize["invoiceDate"] = o.InvoiceDate
	}
	if o.InvoiceType.IsSet() {
		toSerialize["invoiceType"] = o.InvoiceType.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.BillingTerms) {
		toSerialize["billingTerms"] = o.BillingTerms
	}
	if !IsNil(o.DueDays) {
		toSerialize["dueDays"] = o.DueDays
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.SubTotal.IsSet() {
		toSerialize["subTotal"] = o.SubTotal.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if !IsNil(o.HasTime) {
		toSerialize["hasTime"] = o.HasTime
	}
	if !IsNil(o.HasExpenses) {
		toSerialize["hasExpenses"] = o.HasExpenses
	}
	if !IsNil(o.HasProducts) {
		toSerialize["hasProducts"] = o.HasProducts
	}
	if o.InvoiceTaxableFlag.IsSet() {
		toSerialize["invoiceTaxableFlag"] = o.InvoiceTaxableFlag.Get()
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if o.AvalaraTaxFlag.IsSet() {
		toSerialize["avalaraTaxFlag"] = o.AvalaraTaxFlag.Get()
	}
	if o.ItemTaxableFlag.IsSet() {
		toSerialize["itemTaxableFlag"] = o.ItemTaxableFlag.Get()
	}
	if o.SalesTaxAmount.IsSet() {
		toSerialize["salesTaxAmount"] = o.SalesTaxAmount.Get()
	}
	if o.StateTaxFlag.IsSet() {
		toSerialize["stateTaxFlag"] = o.StateTaxFlag.Get()
	}
	if !IsNil(o.StateTaxXref) {
		toSerialize["stateTaxXref"] = o.StateTaxXref
	}
	if o.StateTaxAmount.IsSet() {
		toSerialize["stateTaxAmount"] = o.StateTaxAmount.Get()
	}
	if o.CountyTaxFlag.IsSet() {
		toSerialize["countyTaxFlag"] = o.CountyTaxFlag.Get()
	}
	if !IsNil(o.CountyTaxXref) {
		toSerialize["countyTaxXref"] = o.CountyTaxXref
	}
	if o.CountyTaxAmount.IsSet() {
		toSerialize["countyTaxAmount"] = o.CountyTaxAmount.Get()
	}
	if o.CityTaxFlag.IsSet() {
		toSerialize["cityTaxFlag"] = o.CityTaxFlag.Get()
	}
	if !IsNil(o.CityTaxXref) {
		toSerialize["cityTaxXref"] = o.CityTaxXref
	}
	if o.CityTaxAmount.IsSet() {
		toSerialize["cityTaxAmount"] = o.CityTaxAmount.Get()
	}
	if o.CountryTaxFlag.IsSet() {
		toSerialize["countryTaxFlag"] = o.CountryTaxFlag.Get()
	}
	if !IsNil(o.CountryTaxXref) {
		toSerialize["countryTaxXref"] = o.CountryTaxXref
	}
	if o.CountryTaxAmount.IsSet() {
		toSerialize["countryTaxAmount"] = o.CountryTaxAmount.Get()
	}
	if o.CompositeTaxFlag.IsSet() {
		toSerialize["compositeTaxFlag"] = o.CompositeTaxFlag.Get()
	}
	if !IsNil(o.CompositeTaxXref) {
		toSerialize["compositeTaxXref"] = o.CompositeTaxXref
	}
	if o.CompositeTaxAmount.IsSet() {
		toSerialize["compositeTaxAmount"] = o.CompositeTaxAmount.Get()
	}
	if o.LevelSixTaxFlag.IsSet() {
		toSerialize["levelSixTaxFlag"] = o.LevelSixTaxFlag.Get()
	}
	if !IsNil(o.LevelSixTaxXref) {
		toSerialize["levelSixTaxXref"] = o.LevelSixTaxXref
	}
	if o.LevelSixTaxAmount.IsSet() {
		toSerialize["levelSixTaxAmount"] = o.LevelSixTaxAmount.Get()
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.DateClosed) {
		toSerialize["dateClosed"] = o.DateClosed
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableUnpostedInvoice struct {
	value *UnpostedInvoice
	isSet bool
}

func (v NullableUnpostedInvoice) Get() *UnpostedInvoice {
	return v.value
}

func (v *NullableUnpostedInvoice) Set(val *UnpostedInvoice) {
	v.value = val
	v.isSet = true
}

func (v NullableUnpostedInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableUnpostedInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnpostedInvoice(val *UnpostedInvoice) *NullableUnpostedInvoice {
	return &NullableUnpostedInvoice{value: val, isSet: true}
}

func (v NullableUnpostedInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnpostedInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


