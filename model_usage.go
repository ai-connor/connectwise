/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the Usage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usage{}

// Usage struct for Usage
type Usage struct {
	Type *string `json:"type,omitempty"`
	Count NullableInt32 `json:"count,omitempty"`
	Id NullableInt32 `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
	Hyperlink *string `json:"hyperlink,omitempty"`
	TypeKey *string `json:"typeKey,omitempty"`
}

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage() *Usage {
	this := Usage{}
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Usage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Usage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Usage) SetType(v string) {
	o.Type = &v
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetCount() int32 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *Usage) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *Usage) SetCount(v int32) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *Usage) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *Usage) UnsetCount() {
	o.Count.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Usage) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *Usage) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Usage) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Usage) UnsetId() {
	o.Id.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Usage) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Usage) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Usage) SetDescription(v string) {
	o.Description = &v
}

// GetHyperlink returns the Hyperlink field value if set, zero value otherwise.
func (o *Usage) GetHyperlink() string {
	if o == nil || IsNil(o.Hyperlink) {
		var ret string
		return ret
	}
	return *o.Hyperlink
}

// GetHyperlinkOk returns a tuple with the Hyperlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetHyperlinkOk() (*string, bool) {
	if o == nil || IsNil(o.Hyperlink) {
		return nil, false
	}
	return o.Hyperlink, true
}

// HasHyperlink returns a boolean if a field has been set.
func (o *Usage) HasHyperlink() bool {
	if o != nil && !IsNil(o.Hyperlink) {
		return true
	}

	return false
}

// SetHyperlink gets a reference to the given string and assigns it to the Hyperlink field.
func (o *Usage) SetHyperlink(v string) {
	o.Hyperlink = &v
}

// GetTypeKey returns the TypeKey field value if set, zero value otherwise.
func (o *Usage) GetTypeKey() string {
	if o == nil || IsNil(o.TypeKey) {
		var ret string
		return ret
	}
	return *o.TypeKey
}

// GetTypeKeyOk returns a tuple with the TypeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetTypeKeyOk() (*string, bool) {
	if o == nil || IsNil(o.TypeKey) {
		return nil, false
	}
	return o.TypeKey, true
}

// HasTypeKey returns a boolean if a field has been set.
func (o *Usage) HasTypeKey() bool {
	if o != nil && !IsNil(o.TypeKey) {
		return true
	}

	return false
}

// SetTypeKey gets a reference to the given string and assigns it to the TypeKey field.
func (o *Usage) SetTypeKey(v string) {
	o.TypeKey = &v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Hyperlink) {
		toSerialize["hyperlink"] = o.Hyperlink
	}
	if !IsNil(o.TypeKey) {
		toSerialize["typeKey"] = o.TypeKey
	}
	return toSerialize, nil
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


