/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserDefinedField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedField{}

// UserDefinedField struct for UserDefinedField
type UserDefinedField struct {
	// ID of the custom user defined field
	Id *int32 `json:"id,omitempty"`
	// Id of the Pod where the custom field will be placed
	PodId NullableInt32 `json:"podId"`
	// Field caption Max length: 25;
	Caption string `json:"caption"`
	// Must be between 1 and 500.  This defines the order in which the custom fields will appear
	SequenceNumber NullableInt32 `json:"sequenceNumber"`
	// Field ScreenID Max length: 25;
	ScreenId *string `json:"screenId,omitempty"`
	// Help text to accompany the custom field Max length: 1000;
	HelpText *string `json:"helpText,omitempty"`
	FieldTypeIdentifier NullableString `json:"fieldTypeIdentifier"`
	// Only valid for Number or percent
	NumberDecimals NullableInt32 `json:"numberDecimals,omitempty"`
	EntryTypeIdentifier NullableString `json:"entryTypeIdentifier,omitempty"`
	RequiredFlag NullableBool `json:"requiredFlag,omitempty"`
	DisplayOnScreenFlag NullableBool `json:"displayOnScreenFlag,omitempty"`
	ReadOnlyFlag NullableBool `json:"readOnlyFlag,omitempty"`
	// Denotes that this custom field is included on a list view
	ListViewFlag NullableBool `json:"listViewFlag,omitempty"`
	// Only available with Button Field Type. Required when entryTypeIdentifier is button Max length: 1000;
	ButtonUrl *string `json:"buttonUrl,omitempty"`
	Options []UserDefinedFieldOption `json:"options,omitempty"`
	BusinessUnitIds []int32 `json:"businessUnitIds,omitempty"`
	LocationIds []int32 `json:"locationIds,omitempty"`
	AddAllBusinessUnits NullableBool `json:"addAllBusinessUnits,omitempty"`
	RemoveAllBusinessUnits NullableBool `json:"removeAllBusinessUnits,omitempty"`
	AddAllLocations NullableBool `json:"addAllLocations,omitempty"`
	RemoveAllLocations NullableBool `json:"removeAllLocations,omitempty"`
	ConnectWiseID *string `json:"connectWiseID,omitempty"`
	// Date in UTC the custom field was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _UserDefinedField UserDefinedField

// NewUserDefinedField instantiates a new UserDefinedField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedField(podId NullableInt32, caption string, sequenceNumber NullableInt32, fieldTypeIdentifier NullableString) *UserDefinedField {
	this := UserDefinedField{}
	this.PodId = podId
	this.Caption = caption
	this.SequenceNumber = sequenceNumber
	this.FieldTypeIdentifier = fieldTypeIdentifier
	return &this
}

// NewUserDefinedFieldWithDefaults instantiates a new UserDefinedField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedFieldWithDefaults() *UserDefinedField {
	this := UserDefinedField{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDefinedField) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDefinedField) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserDefinedField) SetId(v int32) {
	o.Id = &v
}

// GetPodId returns the PodId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UserDefinedField) GetPodId() int32 {
	if o == nil || o.PodId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.PodId.Get()
}

// GetPodIdOk returns a tuple with the PodId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetPodIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PodId.Get(), o.PodId.IsSet()
}

// SetPodId sets field value
func (o *UserDefinedField) SetPodId(v int32) {
	o.PodId.Set(&v)
}

// GetCaption returns the Caption field value
func (o *UserDefinedField) GetCaption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetCaptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Caption, true
}

// SetCaption sets field value
func (o *UserDefinedField) SetCaption(v string) {
	o.Caption = v
}

// GetSequenceNumber returns the SequenceNumber field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *UserDefinedField) GetSequenceNumber() int32 {
	if o == nil || o.SequenceNumber.Get() == nil {
		var ret int32
		return ret
	}

	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetSequenceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// SetSequenceNumber sets field value
func (o *UserDefinedField) SetSequenceNumber(v int32) {
	o.SequenceNumber.Set(&v)
}

// GetScreenId returns the ScreenId field value if set, zero value otherwise.
func (o *UserDefinedField) GetScreenId() string {
	if o == nil || IsNil(o.ScreenId) {
		var ret string
		return ret
	}
	return *o.ScreenId
}

// GetScreenIdOk returns a tuple with the ScreenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetScreenIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScreenId) {
		return nil, false
	}
	return o.ScreenId, true
}

// HasScreenId returns a boolean if a field has been set.
func (o *UserDefinedField) HasScreenId() bool {
	if o != nil && !IsNil(o.ScreenId) {
		return true
	}

	return false
}

// SetScreenId gets a reference to the given string and assigns it to the ScreenId field.
func (o *UserDefinedField) SetScreenId(v string) {
	o.ScreenId = &v
}

// GetHelpText returns the HelpText field value if set, zero value otherwise.
func (o *UserDefinedField) GetHelpText() string {
	if o == nil || IsNil(o.HelpText) {
		var ret string
		return ret
	}
	return *o.HelpText
}

// GetHelpTextOk returns a tuple with the HelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetHelpTextOk() (*string, bool) {
	if o == nil || IsNil(o.HelpText) {
		return nil, false
	}
	return o.HelpText, true
}

// HasHelpText returns a boolean if a field has been set.
func (o *UserDefinedField) HasHelpText() bool {
	if o != nil && !IsNil(o.HelpText) {
		return true
	}

	return false
}

// SetHelpText gets a reference to the given string and assigns it to the HelpText field.
func (o *UserDefinedField) SetHelpText(v string) {
	o.HelpText = &v
}

// GetFieldTypeIdentifier returns the FieldTypeIdentifier field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserDefinedField) GetFieldTypeIdentifier() string {
	if o == nil || o.FieldTypeIdentifier.Get() == nil {
		var ret string
		return ret
	}

	return *o.FieldTypeIdentifier.Get()
}

// GetFieldTypeIdentifierOk returns a tuple with the FieldTypeIdentifier field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetFieldTypeIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldTypeIdentifier.Get(), o.FieldTypeIdentifier.IsSet()
}

// SetFieldTypeIdentifier sets field value
func (o *UserDefinedField) SetFieldTypeIdentifier(v string) {
	o.FieldTypeIdentifier.Set(&v)
}

// GetNumberDecimals returns the NumberDecimals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetNumberDecimals() int32 {
	if o == nil || IsNil(o.NumberDecimals.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberDecimals.Get()
}

// GetNumberDecimalsOk returns a tuple with the NumberDecimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetNumberDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberDecimals.Get(), o.NumberDecimals.IsSet()
}

// HasNumberDecimals returns a boolean if a field has been set.
func (o *UserDefinedField) HasNumberDecimals() bool {
	if o != nil && o.NumberDecimals.IsSet() {
		return true
	}

	return false
}

// SetNumberDecimals gets a reference to the given NullableInt32 and assigns it to the NumberDecimals field.
func (o *UserDefinedField) SetNumberDecimals(v int32) {
	o.NumberDecimals.Set(&v)
}
// SetNumberDecimalsNil sets the value for NumberDecimals to be an explicit nil
func (o *UserDefinedField) SetNumberDecimalsNil() {
	o.NumberDecimals.Set(nil)
}

// UnsetNumberDecimals ensures that no value is present for NumberDecimals, not even an explicit nil
func (o *UserDefinedField) UnsetNumberDecimals() {
	o.NumberDecimals.Unset()
}

// GetEntryTypeIdentifier returns the EntryTypeIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetEntryTypeIdentifier() string {
	if o == nil || IsNil(o.EntryTypeIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.EntryTypeIdentifier.Get()
}

// GetEntryTypeIdentifierOk returns a tuple with the EntryTypeIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetEntryTypeIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntryTypeIdentifier.Get(), o.EntryTypeIdentifier.IsSet()
}

// HasEntryTypeIdentifier returns a boolean if a field has been set.
func (o *UserDefinedField) HasEntryTypeIdentifier() bool {
	if o != nil && o.EntryTypeIdentifier.IsSet() {
		return true
	}

	return false
}

// SetEntryTypeIdentifier gets a reference to the given NullableString and assigns it to the EntryTypeIdentifier field.
func (o *UserDefinedField) SetEntryTypeIdentifier(v string) {
	o.EntryTypeIdentifier.Set(&v)
}
// SetEntryTypeIdentifierNil sets the value for EntryTypeIdentifier to be an explicit nil
func (o *UserDefinedField) SetEntryTypeIdentifierNil() {
	o.EntryTypeIdentifier.Set(nil)
}

// UnsetEntryTypeIdentifier ensures that no value is present for EntryTypeIdentifier, not even an explicit nil
func (o *UserDefinedField) UnsetEntryTypeIdentifier() {
	o.EntryTypeIdentifier.Unset()
}

// GetRequiredFlag returns the RequiredFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetRequiredFlag() bool {
	if o == nil || IsNil(o.RequiredFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.RequiredFlag.Get()
}

// GetRequiredFlagOk returns a tuple with the RequiredFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetRequiredFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequiredFlag.Get(), o.RequiredFlag.IsSet()
}

// HasRequiredFlag returns a boolean if a field has been set.
func (o *UserDefinedField) HasRequiredFlag() bool {
	if o != nil && o.RequiredFlag.IsSet() {
		return true
	}

	return false
}

// SetRequiredFlag gets a reference to the given NullableBool and assigns it to the RequiredFlag field.
func (o *UserDefinedField) SetRequiredFlag(v bool) {
	o.RequiredFlag.Set(&v)
}
// SetRequiredFlagNil sets the value for RequiredFlag to be an explicit nil
func (o *UserDefinedField) SetRequiredFlagNil() {
	o.RequiredFlag.Set(nil)
}

// UnsetRequiredFlag ensures that no value is present for RequiredFlag, not even an explicit nil
func (o *UserDefinedField) UnsetRequiredFlag() {
	o.RequiredFlag.Unset()
}

// GetDisplayOnScreenFlag returns the DisplayOnScreenFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetDisplayOnScreenFlag() bool {
	if o == nil || IsNil(o.DisplayOnScreenFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DisplayOnScreenFlag.Get()
}

// GetDisplayOnScreenFlagOk returns a tuple with the DisplayOnScreenFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetDisplayOnScreenFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayOnScreenFlag.Get(), o.DisplayOnScreenFlag.IsSet()
}

// HasDisplayOnScreenFlag returns a boolean if a field has been set.
func (o *UserDefinedField) HasDisplayOnScreenFlag() bool {
	if o != nil && o.DisplayOnScreenFlag.IsSet() {
		return true
	}

	return false
}

// SetDisplayOnScreenFlag gets a reference to the given NullableBool and assigns it to the DisplayOnScreenFlag field.
func (o *UserDefinedField) SetDisplayOnScreenFlag(v bool) {
	o.DisplayOnScreenFlag.Set(&v)
}
// SetDisplayOnScreenFlagNil sets the value for DisplayOnScreenFlag to be an explicit nil
func (o *UserDefinedField) SetDisplayOnScreenFlagNil() {
	o.DisplayOnScreenFlag.Set(nil)
}

// UnsetDisplayOnScreenFlag ensures that no value is present for DisplayOnScreenFlag, not even an explicit nil
func (o *UserDefinedField) UnsetDisplayOnScreenFlag() {
	o.DisplayOnScreenFlag.Unset()
}

// GetReadOnlyFlag returns the ReadOnlyFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetReadOnlyFlag() bool {
	if o == nil || IsNil(o.ReadOnlyFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ReadOnlyFlag.Get()
}

// GetReadOnlyFlagOk returns a tuple with the ReadOnlyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetReadOnlyFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadOnlyFlag.Get(), o.ReadOnlyFlag.IsSet()
}

// HasReadOnlyFlag returns a boolean if a field has been set.
func (o *UserDefinedField) HasReadOnlyFlag() bool {
	if o != nil && o.ReadOnlyFlag.IsSet() {
		return true
	}

	return false
}

// SetReadOnlyFlag gets a reference to the given NullableBool and assigns it to the ReadOnlyFlag field.
func (o *UserDefinedField) SetReadOnlyFlag(v bool) {
	o.ReadOnlyFlag.Set(&v)
}
// SetReadOnlyFlagNil sets the value for ReadOnlyFlag to be an explicit nil
func (o *UserDefinedField) SetReadOnlyFlagNil() {
	o.ReadOnlyFlag.Set(nil)
}

// UnsetReadOnlyFlag ensures that no value is present for ReadOnlyFlag, not even an explicit nil
func (o *UserDefinedField) UnsetReadOnlyFlag() {
	o.ReadOnlyFlag.Unset()
}

// GetListViewFlag returns the ListViewFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetListViewFlag() bool {
	if o == nil || IsNil(o.ListViewFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ListViewFlag.Get()
}

// GetListViewFlagOk returns a tuple with the ListViewFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetListViewFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListViewFlag.Get(), o.ListViewFlag.IsSet()
}

// HasListViewFlag returns a boolean if a field has been set.
func (o *UserDefinedField) HasListViewFlag() bool {
	if o != nil && o.ListViewFlag.IsSet() {
		return true
	}

	return false
}

// SetListViewFlag gets a reference to the given NullableBool and assigns it to the ListViewFlag field.
func (o *UserDefinedField) SetListViewFlag(v bool) {
	o.ListViewFlag.Set(&v)
}
// SetListViewFlagNil sets the value for ListViewFlag to be an explicit nil
func (o *UserDefinedField) SetListViewFlagNil() {
	o.ListViewFlag.Set(nil)
}

// UnsetListViewFlag ensures that no value is present for ListViewFlag, not even an explicit nil
func (o *UserDefinedField) UnsetListViewFlag() {
	o.ListViewFlag.Unset()
}

// GetButtonUrl returns the ButtonUrl field value if set, zero value otherwise.
func (o *UserDefinedField) GetButtonUrl() string {
	if o == nil || IsNil(o.ButtonUrl) {
		var ret string
		return ret
	}
	return *o.ButtonUrl
}

// GetButtonUrlOk returns a tuple with the ButtonUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetButtonUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonUrl) {
		return nil, false
	}
	return o.ButtonUrl, true
}

// HasButtonUrl returns a boolean if a field has been set.
func (o *UserDefinedField) HasButtonUrl() bool {
	if o != nil && !IsNil(o.ButtonUrl) {
		return true
	}

	return false
}

// SetButtonUrl gets a reference to the given string and assigns it to the ButtonUrl field.
func (o *UserDefinedField) SetButtonUrl(v string) {
	o.ButtonUrl = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UserDefinedField) GetOptions() []UserDefinedFieldOption {
	if o == nil || IsNil(o.Options) {
		var ret []UserDefinedFieldOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetOptionsOk() ([]UserDefinedFieldOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UserDefinedField) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []UserDefinedFieldOption and assigns it to the Options field.
func (o *UserDefinedField) SetOptions(v []UserDefinedFieldOption) {
	o.Options = v
}

// GetBusinessUnitIds returns the BusinessUnitIds field value if set, zero value otherwise.
func (o *UserDefinedField) GetBusinessUnitIds() []int32 {
	if o == nil || IsNil(o.BusinessUnitIds) {
		var ret []int32
		return ret
	}
	return o.BusinessUnitIds
}

// GetBusinessUnitIdsOk returns a tuple with the BusinessUnitIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetBusinessUnitIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.BusinessUnitIds) {
		return nil, false
	}
	return o.BusinessUnitIds, true
}

// HasBusinessUnitIds returns a boolean if a field has been set.
func (o *UserDefinedField) HasBusinessUnitIds() bool {
	if o != nil && !IsNil(o.BusinessUnitIds) {
		return true
	}

	return false
}

// SetBusinessUnitIds gets a reference to the given []int32 and assigns it to the BusinessUnitIds field.
func (o *UserDefinedField) SetBusinessUnitIds(v []int32) {
	o.BusinessUnitIds = v
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *UserDefinedField) GetLocationIds() []int32 {
	if o == nil || IsNil(o.LocationIds) {
		var ret []int32
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetLocationIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *UserDefinedField) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []int32 and assigns it to the LocationIds field.
func (o *UserDefinedField) SetLocationIds(v []int32) {
	o.LocationIds = v
}

// GetAddAllBusinessUnits returns the AddAllBusinessUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetAddAllBusinessUnits() bool {
	if o == nil || IsNil(o.AddAllBusinessUnits.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllBusinessUnits.Get()
}

// GetAddAllBusinessUnitsOk returns a tuple with the AddAllBusinessUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetAddAllBusinessUnitsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllBusinessUnits.Get(), o.AddAllBusinessUnits.IsSet()
}

// HasAddAllBusinessUnits returns a boolean if a field has been set.
func (o *UserDefinedField) HasAddAllBusinessUnits() bool {
	if o != nil && o.AddAllBusinessUnits.IsSet() {
		return true
	}

	return false
}

// SetAddAllBusinessUnits gets a reference to the given NullableBool and assigns it to the AddAllBusinessUnits field.
func (o *UserDefinedField) SetAddAllBusinessUnits(v bool) {
	o.AddAllBusinessUnits.Set(&v)
}
// SetAddAllBusinessUnitsNil sets the value for AddAllBusinessUnits to be an explicit nil
func (o *UserDefinedField) SetAddAllBusinessUnitsNil() {
	o.AddAllBusinessUnits.Set(nil)
}

// UnsetAddAllBusinessUnits ensures that no value is present for AddAllBusinessUnits, not even an explicit nil
func (o *UserDefinedField) UnsetAddAllBusinessUnits() {
	o.AddAllBusinessUnits.Unset()
}

// GetRemoveAllBusinessUnits returns the RemoveAllBusinessUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetRemoveAllBusinessUnits() bool {
	if o == nil || IsNil(o.RemoveAllBusinessUnits.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllBusinessUnits.Get()
}

// GetRemoveAllBusinessUnitsOk returns a tuple with the RemoveAllBusinessUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetRemoveAllBusinessUnitsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllBusinessUnits.Get(), o.RemoveAllBusinessUnits.IsSet()
}

// HasRemoveAllBusinessUnits returns a boolean if a field has been set.
func (o *UserDefinedField) HasRemoveAllBusinessUnits() bool {
	if o != nil && o.RemoveAllBusinessUnits.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllBusinessUnits gets a reference to the given NullableBool and assigns it to the RemoveAllBusinessUnits field.
func (o *UserDefinedField) SetRemoveAllBusinessUnits(v bool) {
	o.RemoveAllBusinessUnits.Set(&v)
}
// SetRemoveAllBusinessUnitsNil sets the value for RemoveAllBusinessUnits to be an explicit nil
func (o *UserDefinedField) SetRemoveAllBusinessUnitsNil() {
	o.RemoveAllBusinessUnits.Set(nil)
}

// UnsetRemoveAllBusinessUnits ensures that no value is present for RemoveAllBusinessUnits, not even an explicit nil
func (o *UserDefinedField) UnsetRemoveAllBusinessUnits() {
	o.RemoveAllBusinessUnits.Unset()
}

// GetAddAllLocations returns the AddAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetAddAllLocations() bool {
	if o == nil || IsNil(o.AddAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllLocations.Get()
}

// GetAddAllLocationsOk returns a tuple with the AddAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetAddAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllLocations.Get(), o.AddAllLocations.IsSet()
}

// HasAddAllLocations returns a boolean if a field has been set.
func (o *UserDefinedField) HasAddAllLocations() bool {
	if o != nil && o.AddAllLocations.IsSet() {
		return true
	}

	return false
}

// SetAddAllLocations gets a reference to the given NullableBool and assigns it to the AddAllLocations field.
func (o *UserDefinedField) SetAddAllLocations(v bool) {
	o.AddAllLocations.Set(&v)
}
// SetAddAllLocationsNil sets the value for AddAllLocations to be an explicit nil
func (o *UserDefinedField) SetAddAllLocationsNil() {
	o.AddAllLocations.Set(nil)
}

// UnsetAddAllLocations ensures that no value is present for AddAllLocations, not even an explicit nil
func (o *UserDefinedField) UnsetAddAllLocations() {
	o.AddAllLocations.Unset()
}

// GetRemoveAllLocations returns the RemoveAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedField) GetRemoveAllLocations() bool {
	if o == nil || IsNil(o.RemoveAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllLocations.Get()
}

// GetRemoveAllLocationsOk returns a tuple with the RemoveAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedField) GetRemoveAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllLocations.Get(), o.RemoveAllLocations.IsSet()
}

// HasRemoveAllLocations returns a boolean if a field has been set.
func (o *UserDefinedField) HasRemoveAllLocations() bool {
	if o != nil && o.RemoveAllLocations.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllLocations gets a reference to the given NullableBool and assigns it to the RemoveAllLocations field.
func (o *UserDefinedField) SetRemoveAllLocations(v bool) {
	o.RemoveAllLocations.Set(&v)
}
// SetRemoveAllLocationsNil sets the value for RemoveAllLocations to be an explicit nil
func (o *UserDefinedField) SetRemoveAllLocationsNil() {
	o.RemoveAllLocations.Set(nil)
}

// UnsetRemoveAllLocations ensures that no value is present for RemoveAllLocations, not even an explicit nil
func (o *UserDefinedField) UnsetRemoveAllLocations() {
	o.RemoveAllLocations.Unset()
}

// GetConnectWiseID returns the ConnectWiseID field value if set, zero value otherwise.
func (o *UserDefinedField) GetConnectWiseID() string {
	if o == nil || IsNil(o.ConnectWiseID) {
		var ret string
		return ret
	}
	return *o.ConnectWiseID
}

// GetConnectWiseIDOk returns a tuple with the ConnectWiseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetConnectWiseIDOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectWiseID) {
		return nil, false
	}
	return o.ConnectWiseID, true
}

// HasConnectWiseID returns a boolean if a field has been set.
func (o *UserDefinedField) HasConnectWiseID() bool {
	if o != nil && !IsNil(o.ConnectWiseID) {
		return true
	}

	return false
}

// SetConnectWiseID gets a reference to the given string and assigns it to the ConnectWiseID field.
func (o *UserDefinedField) SetConnectWiseID(v string) {
	o.ConnectWiseID = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *UserDefinedField) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *UserDefinedField) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *UserDefinedField) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *UserDefinedField) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedField) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *UserDefinedField) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *UserDefinedField) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o UserDefinedField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["podId"] = o.PodId.Get()
	toSerialize["caption"] = o.Caption
	toSerialize["sequenceNumber"] = o.SequenceNumber.Get()
	if !IsNil(o.ScreenId) {
		toSerialize["screenId"] = o.ScreenId
	}
	if !IsNil(o.HelpText) {
		toSerialize["helpText"] = o.HelpText
	}
	toSerialize["fieldTypeIdentifier"] = o.FieldTypeIdentifier.Get()
	if o.NumberDecimals.IsSet() {
		toSerialize["numberDecimals"] = o.NumberDecimals.Get()
	}
	if o.EntryTypeIdentifier.IsSet() {
		toSerialize["entryTypeIdentifier"] = o.EntryTypeIdentifier.Get()
	}
	if o.RequiredFlag.IsSet() {
		toSerialize["requiredFlag"] = o.RequiredFlag.Get()
	}
	if o.DisplayOnScreenFlag.IsSet() {
		toSerialize["displayOnScreenFlag"] = o.DisplayOnScreenFlag.Get()
	}
	if o.ReadOnlyFlag.IsSet() {
		toSerialize["readOnlyFlag"] = o.ReadOnlyFlag.Get()
	}
	if o.ListViewFlag.IsSet() {
		toSerialize["listViewFlag"] = o.ListViewFlag.Get()
	}
	if !IsNil(o.ButtonUrl) {
		toSerialize["buttonUrl"] = o.ButtonUrl
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.BusinessUnitIds) {
		toSerialize["businessUnitIds"] = o.BusinessUnitIds
	}
	if !IsNil(o.LocationIds) {
		toSerialize["locationIds"] = o.LocationIds
	}
	if o.AddAllBusinessUnits.IsSet() {
		toSerialize["addAllBusinessUnits"] = o.AddAllBusinessUnits.Get()
	}
	if o.RemoveAllBusinessUnits.IsSet() {
		toSerialize["removeAllBusinessUnits"] = o.RemoveAllBusinessUnits.Get()
	}
	if o.AddAllLocations.IsSet() {
		toSerialize["addAllLocations"] = o.AddAllLocations.Get()
	}
	if o.RemoveAllLocations.IsSet() {
		toSerialize["removeAllLocations"] = o.RemoveAllLocations.Get()
	}
	if !IsNil(o.ConnectWiseID) {
		toSerialize["connectWiseID"] = o.ConnectWiseID
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *UserDefinedField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"podId",
		"caption",
		"sequenceNumber",
		"fieldTypeIdentifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserDefinedField := _UserDefinedField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserDefinedField)

	if err != nil {
		return err
	}

	*o = UserDefinedField(varUserDefinedField)

	return err
}

type NullableUserDefinedField struct {
	value *UserDefinedField
	isSet bool
}

func (v NullableUserDefinedField) Get() *UserDefinedField {
	return v.value
}

func (v *NullableUserDefinedField) Set(val *UserDefinedField) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedField) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedField(val *UserDefinedField) *NullableUserDefinedField {
	return &NullableUserDefinedField{value: val, isSet: true}
}

func (v NullableUserDefinedField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


