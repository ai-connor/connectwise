/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WarehouseBin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarehouseBin{}

// WarehouseBin struct for WarehouseBin
type WarehouseBin struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	Warehouse WarehouseReference `json:"warehouse"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	MinQuantity NullableFloat64 `json:"minQuantity,omitempty"`
	MaxQuantity NullableFloat64 `json:"maxQuantity,omitempty"`
	OverflowBin *WarehouseBinReference `json:"overflowBin,omitempty"`
	Manager *MemberReference `json:"manager,omitempty"`
	Length NullableFloat64 `json:"length,omitempty"`
	Width NullableFloat64 `json:"width,omitempty"`
	Height NullableFloat64 `json:"height,omitempty"`
	Weight NullableFloat64 `json:"weight,omitempty"`
	DefaultFlag NullableBool `json:"defaultFlag,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	QuantityOnHand NullableInt32 `json:"quantityOnHand,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	TransferBin *WarehouseBinReference `json:"transferBin,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _WarehouseBin WarehouseBin

// NewWarehouseBin instantiates a new WarehouseBin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarehouseBin(name string, warehouse WarehouseReference) *WarehouseBin {
	this := WarehouseBin{}
	this.Name = name
	this.Warehouse = warehouse
	return &this
}

// NewWarehouseBinWithDefaults instantiates a new WarehouseBin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarehouseBinWithDefaults() *WarehouseBin {
	this := WarehouseBin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WarehouseBin) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WarehouseBin) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WarehouseBin) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *WarehouseBin) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WarehouseBin) SetName(v string) {
	o.Name = v
}

// GetWarehouse returns the Warehouse field value
func (o *WarehouseBin) GetWarehouse() WarehouseReference {
	if o == nil {
		var ret WarehouseReference
		return ret
	}

	return o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetWarehouseOk() (*WarehouseReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warehouse, true
}

// SetWarehouse sets field value
func (o *WarehouseBin) SetWarehouse(v WarehouseReference) {
	o.Warehouse = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *WarehouseBin) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *WarehouseBin) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *WarehouseBin) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *WarehouseBin) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *WarehouseBin) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *WarehouseBin) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetMinQuantity returns the MinQuantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetMinQuantity() float64 {
	if o == nil || IsNil(o.MinQuantity.Get()) {
		var ret float64
		return ret
	}
	return *o.MinQuantity.Get()
}

// GetMinQuantityOk returns a tuple with the MinQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetMinQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinQuantity.Get(), o.MinQuantity.IsSet()
}

// HasMinQuantity returns a boolean if a field has been set.
func (o *WarehouseBin) HasMinQuantity() bool {
	if o != nil && o.MinQuantity.IsSet() {
		return true
	}

	return false
}

// SetMinQuantity gets a reference to the given NullableFloat64 and assigns it to the MinQuantity field.
func (o *WarehouseBin) SetMinQuantity(v float64) {
	o.MinQuantity.Set(&v)
}
// SetMinQuantityNil sets the value for MinQuantity to be an explicit nil
func (o *WarehouseBin) SetMinQuantityNil() {
	o.MinQuantity.Set(nil)
}

// UnsetMinQuantity ensures that no value is present for MinQuantity, not even an explicit nil
func (o *WarehouseBin) UnsetMinQuantity() {
	o.MinQuantity.Unset()
}

// GetMaxQuantity returns the MaxQuantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetMaxQuantity() float64 {
	if o == nil || IsNil(o.MaxQuantity.Get()) {
		var ret float64
		return ret
	}
	return *o.MaxQuantity.Get()
}

// GetMaxQuantityOk returns a tuple with the MaxQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetMaxQuantityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxQuantity.Get(), o.MaxQuantity.IsSet()
}

// HasMaxQuantity returns a boolean if a field has been set.
func (o *WarehouseBin) HasMaxQuantity() bool {
	if o != nil && o.MaxQuantity.IsSet() {
		return true
	}

	return false
}

// SetMaxQuantity gets a reference to the given NullableFloat64 and assigns it to the MaxQuantity field.
func (o *WarehouseBin) SetMaxQuantity(v float64) {
	o.MaxQuantity.Set(&v)
}
// SetMaxQuantityNil sets the value for MaxQuantity to be an explicit nil
func (o *WarehouseBin) SetMaxQuantityNil() {
	o.MaxQuantity.Set(nil)
}

// UnsetMaxQuantity ensures that no value is present for MaxQuantity, not even an explicit nil
func (o *WarehouseBin) UnsetMaxQuantity() {
	o.MaxQuantity.Unset()
}

// GetOverflowBin returns the OverflowBin field value if set, zero value otherwise.
func (o *WarehouseBin) GetOverflowBin() WarehouseBinReference {
	if o == nil || IsNil(o.OverflowBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.OverflowBin
}

// GetOverflowBinOk returns a tuple with the OverflowBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetOverflowBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.OverflowBin) {
		return nil, false
	}
	return o.OverflowBin, true
}

// HasOverflowBin returns a boolean if a field has been set.
func (o *WarehouseBin) HasOverflowBin() bool {
	if o != nil && !IsNil(o.OverflowBin) {
		return true
	}

	return false
}

// SetOverflowBin gets a reference to the given WarehouseBinReference and assigns it to the OverflowBin field.
func (o *WarehouseBin) SetOverflowBin(v WarehouseBinReference) {
	o.OverflowBin = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *WarehouseBin) GetManager() MemberReference {
	if o == nil || IsNil(o.Manager) {
		var ret MemberReference
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetManagerOk() (*MemberReference, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *WarehouseBin) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given MemberReference and assigns it to the Manager field.
func (o *WarehouseBin) SetManager(v MemberReference) {
	o.Manager = &v
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetLength() float64 {
	if o == nil || IsNil(o.Length.Get()) {
		var ret float64
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetLengthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *WarehouseBin) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableFloat64 and assigns it to the Length field.
func (o *WarehouseBin) SetLength(v float64) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *WarehouseBin) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *WarehouseBin) UnsetLength() {
	o.Length.Unset()
}

// GetWidth returns the Width field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetWidth() float64 {
	if o == nil || IsNil(o.Width.Get()) {
		var ret float64
		return ret
	}
	return *o.Width.Get()
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetWidthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Width.Get(), o.Width.IsSet()
}

// HasWidth returns a boolean if a field has been set.
func (o *WarehouseBin) HasWidth() bool {
	if o != nil && o.Width.IsSet() {
		return true
	}

	return false
}

// SetWidth gets a reference to the given NullableFloat64 and assigns it to the Width field.
func (o *WarehouseBin) SetWidth(v float64) {
	o.Width.Set(&v)
}
// SetWidthNil sets the value for Width to be an explicit nil
func (o *WarehouseBin) SetWidthNil() {
	o.Width.Set(nil)
}

// UnsetWidth ensures that no value is present for Width, not even an explicit nil
func (o *WarehouseBin) UnsetWidth() {
	o.Width.Unset()
}

// GetHeight returns the Height field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetHeight() float64 {
	if o == nil || IsNil(o.Height.Get()) {
		var ret float64
		return ret
	}
	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetHeightOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// HasHeight returns a boolean if a field has been set.
func (o *WarehouseBin) HasHeight() bool {
	if o != nil && o.Height.IsSet() {
		return true
	}

	return false
}

// SetHeight gets a reference to the given NullableFloat64 and assigns it to the Height field.
func (o *WarehouseBin) SetHeight(v float64) {
	o.Height.Set(&v)
}
// SetHeightNil sets the value for Height to be an explicit nil
func (o *WarehouseBin) SetHeightNil() {
	o.Height.Set(nil)
}

// UnsetHeight ensures that no value is present for Height, not even an explicit nil
func (o *WarehouseBin) UnsetHeight() {
	o.Height.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetWeight() float64 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret float64
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetWeightOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *WarehouseBin) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableFloat64 and assigns it to the Weight field.
func (o *WarehouseBin) SetWeight(v float64) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *WarehouseBin) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *WarehouseBin) UnsetWeight() {
	o.Weight.Unset()
}

// GetDefaultFlag returns the DefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetDefaultFlag() bool {
	if o == nil || IsNil(o.DefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultFlag.Get()
}

// GetDefaultFlagOk returns a tuple with the DefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFlag.Get(), o.DefaultFlag.IsSet()
}

// HasDefaultFlag returns a boolean if a field has been set.
func (o *WarehouseBin) HasDefaultFlag() bool {
	if o != nil && o.DefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetDefaultFlag gets a reference to the given NullableBool and assigns it to the DefaultFlag field.
func (o *WarehouseBin) SetDefaultFlag(v bool) {
	o.DefaultFlag.Set(&v)
}
// SetDefaultFlagNil sets the value for DefaultFlag to be an explicit nil
func (o *WarehouseBin) SetDefaultFlagNil() {
	o.DefaultFlag.Set(nil)
}

// UnsetDefaultFlag ensures that no value is present for DefaultFlag, not even an explicit nil
func (o *WarehouseBin) UnsetDefaultFlag() {
	o.DefaultFlag.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *WarehouseBin) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *WarehouseBin) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *WarehouseBin) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *WarehouseBin) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetQuantityOnHand returns the QuantityOnHand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseBin) GetQuantityOnHand() int32 {
	if o == nil || IsNil(o.QuantityOnHand.Get()) {
		var ret int32
		return ret
	}
	return *o.QuantityOnHand.Get()
}

// GetQuantityOnHandOk returns a tuple with the QuantityOnHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseBin) GetQuantityOnHandOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuantityOnHand.Get(), o.QuantityOnHand.IsSet()
}

// HasQuantityOnHand returns a boolean if a field has been set.
func (o *WarehouseBin) HasQuantityOnHand() bool {
	if o != nil && o.QuantityOnHand.IsSet() {
		return true
	}

	return false
}

// SetQuantityOnHand gets a reference to the given NullableInt32 and assigns it to the QuantityOnHand field.
func (o *WarehouseBin) SetQuantityOnHand(v int32) {
	o.QuantityOnHand.Set(&v)
}
// SetQuantityOnHandNil sets the value for QuantityOnHand to be an explicit nil
func (o *WarehouseBin) SetQuantityOnHandNil() {
	o.QuantityOnHand.Set(nil)
}

// UnsetQuantityOnHand ensures that no value is present for QuantityOnHand, not even an explicit nil
func (o *WarehouseBin) UnsetQuantityOnHand() {
	o.QuantityOnHand.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *WarehouseBin) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *WarehouseBin) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *WarehouseBin) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetTransferBin returns the TransferBin field value if set, zero value otherwise.
func (o *WarehouseBin) GetTransferBin() WarehouseBinReference {
	if o == nil || IsNil(o.TransferBin) {
		var ret WarehouseBinReference
		return ret
	}
	return *o.TransferBin
}

// GetTransferBinOk returns a tuple with the TransferBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetTransferBinOk() (*WarehouseBinReference, bool) {
	if o == nil || IsNil(o.TransferBin) {
		return nil, false
	}
	return o.TransferBin, true
}

// HasTransferBin returns a boolean if a field has been set.
func (o *WarehouseBin) HasTransferBin() bool {
	if o != nil && !IsNil(o.TransferBin) {
		return true
	}

	return false
}

// SetTransferBin gets a reference to the given WarehouseBinReference and assigns it to the TransferBin field.
func (o *WarehouseBin) SetTransferBin(v WarehouseBinReference) {
	o.TransferBin = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WarehouseBin) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseBin) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WarehouseBin) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WarehouseBin) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WarehouseBin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarehouseBin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["warehouse"] = o.Warehouse
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.MinQuantity.IsSet() {
		toSerialize["minQuantity"] = o.MinQuantity.Get()
	}
	if o.MaxQuantity.IsSet() {
		toSerialize["maxQuantity"] = o.MaxQuantity.Get()
	}
	if !IsNil(o.OverflowBin) {
		toSerialize["overflowBin"] = o.OverflowBin
	}
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.Width.IsSet() {
		toSerialize["width"] = o.Width.Get()
	}
	if o.Height.IsSet() {
		toSerialize["height"] = o.Height.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.DefaultFlag.IsSet() {
		toSerialize["defaultFlag"] = o.DefaultFlag.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.QuantityOnHand.IsSet() {
		toSerialize["quantityOnHand"] = o.QuantityOnHand.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.TransferBin) {
		toSerialize["transferBin"] = o.TransferBin
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *WarehouseBin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"warehouse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWarehouseBin := _WarehouseBin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWarehouseBin)

	if err != nil {
		return err
	}

	*o = WarehouseBin(varWarehouseBin)

	return err
}

type NullableWarehouseBin struct {
	value *WarehouseBin
	isSet bool
}

func (v NullableWarehouseBin) Get() *WarehouseBin {
	return v.value
}

func (v *NullableWarehouseBin) Set(val *WarehouseBin) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseBin) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseBin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseBin(val *WarehouseBin) *NullableWarehouseBin {
	return &NullableWarehouseBin{value: val, isSet: true}
}

func (v NullableWarehouseBin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseBin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


