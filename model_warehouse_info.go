/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
)

// checks if the WarehouseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarehouseInfo{}

// WarehouseInfo struct for WarehouseInfo
type WarehouseInfo struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	OverallDefaultFlag NullableBool `json:"overallDefaultFlag,omitempty"`
	Company *CompanyReference `json:"company,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

// NewWarehouseInfo instantiates a new WarehouseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarehouseInfo() *WarehouseInfo {
	this := WarehouseInfo{}
	return &this
}

// NewWarehouseInfoWithDefaults instantiates a new WarehouseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarehouseInfoWithDefaults() *WarehouseInfo {
	this := WarehouseInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WarehouseInfo) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseInfo) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WarehouseInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WarehouseInfo) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WarehouseInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WarehouseInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WarehouseInfo) SetName(v string) {
	o.Name = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseInfo) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseInfo) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *WarehouseInfo) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *WarehouseInfo) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *WarehouseInfo) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *WarehouseInfo) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetOverallDefaultFlag returns the OverallDefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WarehouseInfo) GetOverallDefaultFlag() bool {
	if o == nil || IsNil(o.OverallDefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverallDefaultFlag.Get()
}

// GetOverallDefaultFlagOk returns a tuple with the OverallDefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WarehouseInfo) GetOverallDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverallDefaultFlag.Get(), o.OverallDefaultFlag.IsSet()
}

// HasOverallDefaultFlag returns a boolean if a field has been set.
func (o *WarehouseInfo) HasOverallDefaultFlag() bool {
	if o != nil && o.OverallDefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetOverallDefaultFlag gets a reference to the given NullableBool and assigns it to the OverallDefaultFlag field.
func (o *WarehouseInfo) SetOverallDefaultFlag(v bool) {
	o.OverallDefaultFlag.Set(&v)
}
// SetOverallDefaultFlagNil sets the value for OverallDefaultFlag to be an explicit nil
func (o *WarehouseInfo) SetOverallDefaultFlagNil() {
	o.OverallDefaultFlag.Set(nil)
}

// UnsetOverallDefaultFlag ensures that no value is present for OverallDefaultFlag, not even an explicit nil
func (o *WarehouseInfo) UnsetOverallDefaultFlag() {
	o.OverallDefaultFlag.Unset()
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *WarehouseInfo) GetCompany() CompanyReference {
	if o == nil || IsNil(o.Company) {
		var ret CompanyReference
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseInfo) GetCompanyOk() (*CompanyReference, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *WarehouseInfo) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyReference and assigns it to the Company field.
func (o *WarehouseInfo) SetCompany(v CompanyReference) {
	o.Company = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WarehouseInfo) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarehouseInfo) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WarehouseInfo) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WarehouseInfo) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WarehouseInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarehouseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.OverallDefaultFlag.IsSet() {
		toSerialize["overallDefaultFlag"] = o.OverallDefaultFlag.Get()
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

type NullableWarehouseInfo struct {
	value *WarehouseInfo
	isSet bool
}

func (v NullableWarehouseInfo) Get() *WarehouseInfo {
	return v.value
}

func (v *NullableWarehouseInfo) Set(val *WarehouseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableWarehouseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableWarehouseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarehouseInfo(val *WarehouseInfo) *NullableWarehouseInfo {
	return &NullableWarehouseInfo{value: val, isSet: true}
}

func (v NullableWarehouseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarehouseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


