/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkRole{}

// WorkRole struct for WorkRole
type WorkRole struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	HourlyRate NullableFloat64 `json:"hourlyRate,omitempty"`
	//  Max length: 50;
	IntegrationXref *string `json:"integrationXref,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	AddAllLocations NullableBool `json:"addAllLocations,omitempty"`
	RemoveAllLocations NullableBool `json:"removeAllLocations,omitempty"`
	// Used only on create to add the work role to all agreement and agreement type exclusion lists
	AddAllAgreementExclusions NullableBool `json:"addAllAgreementExclusions,omitempty"`
	LocationIds []int32 `json:"locationIds,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _WorkRole WorkRole

// NewWorkRole instantiates a new WorkRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkRole(name string) *WorkRole {
	this := WorkRole{}
	this.Name = name
	return &this
}

// NewWorkRoleWithDefaults instantiates a new WorkRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkRoleWithDefaults() *WorkRole {
	this := WorkRole{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkRole) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRole) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WorkRole) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *WorkRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkRole) SetName(v string) {
	o.Name = v
}

// GetHourlyRate returns the HourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkRole) GetHourlyRate() float64 {
	if o == nil || IsNil(o.HourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyRate.Get()
}

// GetHourlyRateOk returns a tuple with the HourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkRole) GetHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyRate.Get(), o.HourlyRate.IsSet()
}

// HasHourlyRate returns a boolean if a field has been set.
func (o *WorkRole) HasHourlyRate() bool {
	if o != nil && o.HourlyRate.IsSet() {
		return true
	}

	return false
}

// SetHourlyRate gets a reference to the given NullableFloat64 and assigns it to the HourlyRate field.
func (o *WorkRole) SetHourlyRate(v float64) {
	o.HourlyRate.Set(&v)
}
// SetHourlyRateNil sets the value for HourlyRate to be an explicit nil
func (o *WorkRole) SetHourlyRateNil() {
	o.HourlyRate.Set(nil)
}

// UnsetHourlyRate ensures that no value is present for HourlyRate, not even an explicit nil
func (o *WorkRole) UnsetHourlyRate() {
	o.HourlyRate.Unset()
}

// GetIntegrationXref returns the IntegrationXref field value if set, zero value otherwise.
func (o *WorkRole) GetIntegrationXref() string {
	if o == nil || IsNil(o.IntegrationXref) {
		var ret string
		return ret
	}
	return *o.IntegrationXref
}

// GetIntegrationXrefOk returns a tuple with the IntegrationXref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRole) GetIntegrationXrefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXref) {
		return nil, false
	}
	return o.IntegrationXref, true
}

// HasIntegrationXref returns a boolean if a field has been set.
func (o *WorkRole) HasIntegrationXref() bool {
	if o != nil && !IsNil(o.IntegrationXref) {
		return true
	}

	return false
}

// SetIntegrationXref gets a reference to the given string and assigns it to the IntegrationXref field.
func (o *WorkRole) SetIntegrationXref(v string) {
	o.IntegrationXref = &v
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkRole) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkRole) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *WorkRole) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *WorkRole) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *WorkRole) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *WorkRole) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetAddAllLocations returns the AddAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkRole) GetAddAllLocations() bool {
	if o == nil || IsNil(o.AddAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllLocations.Get()
}

// GetAddAllLocationsOk returns a tuple with the AddAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkRole) GetAddAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllLocations.Get(), o.AddAllLocations.IsSet()
}

// HasAddAllLocations returns a boolean if a field has been set.
func (o *WorkRole) HasAddAllLocations() bool {
	if o != nil && o.AddAllLocations.IsSet() {
		return true
	}

	return false
}

// SetAddAllLocations gets a reference to the given NullableBool and assigns it to the AddAllLocations field.
func (o *WorkRole) SetAddAllLocations(v bool) {
	o.AddAllLocations.Set(&v)
}
// SetAddAllLocationsNil sets the value for AddAllLocations to be an explicit nil
func (o *WorkRole) SetAddAllLocationsNil() {
	o.AddAllLocations.Set(nil)
}

// UnsetAddAllLocations ensures that no value is present for AddAllLocations, not even an explicit nil
func (o *WorkRole) UnsetAddAllLocations() {
	o.AddAllLocations.Unset()
}

// GetRemoveAllLocations returns the RemoveAllLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkRole) GetRemoveAllLocations() bool {
	if o == nil || IsNil(o.RemoveAllLocations.Get()) {
		var ret bool
		return ret
	}
	return *o.RemoveAllLocations.Get()
}

// GetRemoveAllLocationsOk returns a tuple with the RemoveAllLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkRole) GetRemoveAllLocationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveAllLocations.Get(), o.RemoveAllLocations.IsSet()
}

// HasRemoveAllLocations returns a boolean if a field has been set.
func (o *WorkRole) HasRemoveAllLocations() bool {
	if o != nil && o.RemoveAllLocations.IsSet() {
		return true
	}

	return false
}

// SetRemoveAllLocations gets a reference to the given NullableBool and assigns it to the RemoveAllLocations field.
func (o *WorkRole) SetRemoveAllLocations(v bool) {
	o.RemoveAllLocations.Set(&v)
}
// SetRemoveAllLocationsNil sets the value for RemoveAllLocations to be an explicit nil
func (o *WorkRole) SetRemoveAllLocationsNil() {
	o.RemoveAllLocations.Set(nil)
}

// UnsetRemoveAllLocations ensures that no value is present for RemoveAllLocations, not even an explicit nil
func (o *WorkRole) UnsetRemoveAllLocations() {
	o.RemoveAllLocations.Unset()
}

// GetAddAllAgreementExclusions returns the AddAllAgreementExclusions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkRole) GetAddAllAgreementExclusions() bool {
	if o == nil || IsNil(o.AddAllAgreementExclusions.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllAgreementExclusions.Get()
}

// GetAddAllAgreementExclusionsOk returns a tuple with the AddAllAgreementExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkRole) GetAddAllAgreementExclusionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllAgreementExclusions.Get(), o.AddAllAgreementExclusions.IsSet()
}

// HasAddAllAgreementExclusions returns a boolean if a field has been set.
func (o *WorkRole) HasAddAllAgreementExclusions() bool {
	if o != nil && o.AddAllAgreementExclusions.IsSet() {
		return true
	}

	return false
}

// SetAddAllAgreementExclusions gets a reference to the given NullableBool and assigns it to the AddAllAgreementExclusions field.
func (o *WorkRole) SetAddAllAgreementExclusions(v bool) {
	o.AddAllAgreementExclusions.Set(&v)
}
// SetAddAllAgreementExclusionsNil sets the value for AddAllAgreementExclusions to be an explicit nil
func (o *WorkRole) SetAddAllAgreementExclusionsNil() {
	o.AddAllAgreementExclusions.Set(nil)
}

// UnsetAddAllAgreementExclusions ensures that no value is present for AddAllAgreementExclusions, not even an explicit nil
func (o *WorkRole) UnsetAddAllAgreementExclusions() {
	o.AddAllAgreementExclusions.Unset()
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *WorkRole) GetLocationIds() []int32 {
	if o == nil || IsNil(o.LocationIds) {
		var ret []int32
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRole) GetLocationIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *WorkRole) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []int32 and assigns it to the LocationIds field.
func (o *WorkRole) SetLocationIds(v []int32) {
	o.LocationIds = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WorkRole) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRole) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WorkRole) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WorkRole) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WorkRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.HourlyRate.IsSet() {
		toSerialize["hourlyRate"] = o.HourlyRate.Get()
	}
	if !IsNil(o.IntegrationXref) {
		toSerialize["integrationXref"] = o.IntegrationXref
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.AddAllLocations.IsSet() {
		toSerialize["addAllLocations"] = o.AddAllLocations.Get()
	}
	if o.RemoveAllLocations.IsSet() {
		toSerialize["removeAllLocations"] = o.RemoveAllLocations.Get()
	}
	if o.AddAllAgreementExclusions.IsSet() {
		toSerialize["addAllAgreementExclusions"] = o.AddAllAgreementExclusions.Get()
	}
	if !IsNil(o.LocationIds) {
		toSerialize["locationIds"] = o.LocationIds
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *WorkRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkRole := _WorkRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkRole)

	if err != nil {
		return err
	}

	*o = WorkRole(varWorkRole)

	return err
}

type NullableWorkRole struct {
	value *WorkRole
	isSet bool
}

func (v NullableWorkRole) Get() *WorkRole {
	return v.value
}

func (v *NullableWorkRole) Set(val *WorkRole) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkRole) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkRole(val *WorkRole) *NullableWorkRole {
	return &NullableWorkRole{value: val, isSet: true}
}

func (v NullableWorkRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


