/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkRoleLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkRoleLocation{}

// WorkRoleLocation struct for WorkRoleLocation
type WorkRoleLocation struct {
	Id *int32 `json:"id,omitempty"`
	Location SystemLocationReference `json:"location"`
	HourlyRate NullableFloat64 `json:"hourlyRate,omitempty"`
	WorkRole *WorkRoleReference `json:"workRole,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _WorkRoleLocation WorkRoleLocation

// NewWorkRoleLocation instantiates a new WorkRoleLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkRoleLocation(location SystemLocationReference) *WorkRoleLocation {
	this := WorkRoleLocation{}
	this.Location = location
	return &this
}

// NewWorkRoleLocationWithDefaults instantiates a new WorkRoleLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkRoleLocationWithDefaults() *WorkRoleLocation {
	this := WorkRoleLocation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkRoleLocation) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRoleLocation) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkRoleLocation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WorkRoleLocation) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value
func (o *WorkRoleLocation) GetLocation() SystemLocationReference {
	if o == nil {
		var ret SystemLocationReference
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *WorkRoleLocation) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *WorkRoleLocation) SetLocation(v SystemLocationReference) {
	o.Location = v
}

// GetHourlyRate returns the HourlyRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkRoleLocation) GetHourlyRate() float64 {
	if o == nil || IsNil(o.HourlyRate.Get()) {
		var ret float64
		return ret
	}
	return *o.HourlyRate.Get()
}

// GetHourlyRateOk returns a tuple with the HourlyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkRoleLocation) GetHourlyRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyRate.Get(), o.HourlyRate.IsSet()
}

// HasHourlyRate returns a boolean if a field has been set.
func (o *WorkRoleLocation) HasHourlyRate() bool {
	if o != nil && o.HourlyRate.IsSet() {
		return true
	}

	return false
}

// SetHourlyRate gets a reference to the given NullableFloat64 and assigns it to the HourlyRate field.
func (o *WorkRoleLocation) SetHourlyRate(v float64) {
	o.HourlyRate.Set(&v)
}
// SetHourlyRateNil sets the value for HourlyRate to be an explicit nil
func (o *WorkRoleLocation) SetHourlyRateNil() {
	o.HourlyRate.Set(nil)
}

// UnsetHourlyRate ensures that no value is present for HourlyRate, not even an explicit nil
func (o *WorkRoleLocation) UnsetHourlyRate() {
	o.HourlyRate.Unset()
}

// GetWorkRole returns the WorkRole field value if set, zero value otherwise.
func (o *WorkRoleLocation) GetWorkRole() WorkRoleReference {
	if o == nil || IsNil(o.WorkRole) {
		var ret WorkRoleReference
		return ret
	}
	return *o.WorkRole
}

// GetWorkRoleOk returns a tuple with the WorkRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRoleLocation) GetWorkRoleOk() (*WorkRoleReference, bool) {
	if o == nil || IsNil(o.WorkRole) {
		return nil, false
	}
	return o.WorkRole, true
}

// HasWorkRole returns a boolean if a field has been set.
func (o *WorkRoleLocation) HasWorkRole() bool {
	if o != nil && !IsNil(o.WorkRole) {
		return true
	}

	return false
}

// SetWorkRole gets a reference to the given WorkRoleReference and assigns it to the WorkRole field.
func (o *WorkRoleLocation) SetWorkRole(v WorkRoleReference) {
	o.WorkRole = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WorkRoleLocation) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkRoleLocation) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WorkRoleLocation) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WorkRoleLocation) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WorkRoleLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkRoleLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["location"] = o.Location
	if o.HourlyRate.IsSet() {
		toSerialize["hourlyRate"] = o.HourlyRate.Get()
	}
	if !IsNil(o.WorkRole) {
		toSerialize["workRole"] = o.WorkRole
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *WorkRoleLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkRoleLocation := _WorkRoleLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkRoleLocation)

	if err != nil {
		return err
	}

	*o = WorkRoleLocation(varWorkRoleLocation)

	return err
}

type NullableWorkRoleLocation struct {
	value *WorkRoleLocation
	isSet bool
}

func (v NullableWorkRoleLocation) Get() *WorkRoleLocation {
	return v.value
}

func (v *NullableWorkRoleLocation) Set(val *WorkRoleLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkRoleLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkRoleLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkRoleLocation(val *WorkRoleLocation) *NullableWorkRoleLocation {
	return &NullableWorkRoleLocation{value: val, isSet: true}
}

func (v NullableWorkRoleLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkRoleLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


