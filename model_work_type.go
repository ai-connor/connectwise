/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkType{}

// WorkType struct for WorkType
type WorkType struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 50;
	Name string `json:"name"`
	BillTime NullableString `json:"billTime"`
	RateType NullableString `json:"rateType"`
	Rate NullableFloat64 `json:"rate"`
	HoursMin NullableFloat64 `json:"hoursMin,omitempty"`
	HoursMax NullableFloat64 `json:"hoursMax,omitempty"`
	RoundBillHoursTo NullableFloat64 `json:"roundBillHoursTo,omitempty"`
	AccrualType NullableString `json:"accrualType,omitempty"`
	InactiveFlag NullableBool `json:"inactiveFlag,omitempty"`
	OverallDefaultFlag NullableBool `json:"overallDefaultFlag,omitempty"`
	ActivityDefaultFlag NullableBool `json:"activityDefaultFlag,omitempty"`
	UtilizationFlag NullableBool `json:"utilizationFlag,omitempty"`
	CostMultiplier NullableFloat64 `json:"costMultiplier,omitempty"`
	//  Max length: 50;
	IntegrationXRef *string `json:"integrationXRef,omitempty"`
	// Used only on create to add the work type to all agreement and agreement type exclusion lists
	AddAllAgreementExclusions NullableBool `json:"addAllAgreementExclusions,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _WorkType WorkType

// NewWorkType instantiates a new WorkType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkType(name string, billTime NullableString, rateType NullableString, rate NullableFloat64) *WorkType {
	this := WorkType{}
	this.Name = name
	this.BillTime = billTime
	this.RateType = rateType
	this.Rate = rate
	return &this
}

// NewWorkTypeWithDefaults instantiates a new WorkType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkTypeWithDefaults() *WorkType {
	this := WorkType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WorkType) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *WorkType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkType) SetName(v string) {
	o.Name = v
}

// GetBillTime returns the BillTime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WorkType) GetBillTime() string {
	if o == nil || o.BillTime.Get() == nil {
		var ret string
		return ret
	}

	return *o.BillTime.Get()
}

// GetBillTimeOk returns a tuple with the BillTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetBillTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillTime.Get(), o.BillTime.IsSet()
}

// SetBillTime sets field value
func (o *WorkType) SetBillTime(v string) {
	o.BillTime.Set(&v)
}

// GetRateType returns the RateType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WorkType) GetRateType() string {
	if o == nil || o.RateType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RateType.Get()
}

// GetRateTypeOk returns a tuple with the RateType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetRateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateType.Get(), o.RateType.IsSet()
}

// SetRateType sets field value
func (o *WorkType) SetRateType(v string) {
	o.RateType.Set(&v)
}

// GetRate returns the Rate field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *WorkType) GetRate() float64 {
	if o == nil || o.Rate.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// SetRate sets field value
func (o *WorkType) SetRate(v float64) {
	o.Rate.Set(&v)
}

// GetHoursMin returns the HoursMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetHoursMin() float64 {
	if o == nil || IsNil(o.HoursMin.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursMin.Get()
}

// GetHoursMinOk returns a tuple with the HoursMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetHoursMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursMin.Get(), o.HoursMin.IsSet()
}

// HasHoursMin returns a boolean if a field has been set.
func (o *WorkType) HasHoursMin() bool {
	if o != nil && o.HoursMin.IsSet() {
		return true
	}

	return false
}

// SetHoursMin gets a reference to the given NullableFloat64 and assigns it to the HoursMin field.
func (o *WorkType) SetHoursMin(v float64) {
	o.HoursMin.Set(&v)
}
// SetHoursMinNil sets the value for HoursMin to be an explicit nil
func (o *WorkType) SetHoursMinNil() {
	o.HoursMin.Set(nil)
}

// UnsetHoursMin ensures that no value is present for HoursMin, not even an explicit nil
func (o *WorkType) UnsetHoursMin() {
	o.HoursMin.Unset()
}

// GetHoursMax returns the HoursMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetHoursMax() float64 {
	if o == nil || IsNil(o.HoursMax.Get()) {
		var ret float64
		return ret
	}
	return *o.HoursMax.Get()
}

// GetHoursMaxOk returns a tuple with the HoursMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetHoursMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoursMax.Get(), o.HoursMax.IsSet()
}

// HasHoursMax returns a boolean if a field has been set.
func (o *WorkType) HasHoursMax() bool {
	if o != nil && o.HoursMax.IsSet() {
		return true
	}

	return false
}

// SetHoursMax gets a reference to the given NullableFloat64 and assigns it to the HoursMax field.
func (o *WorkType) SetHoursMax(v float64) {
	o.HoursMax.Set(&v)
}
// SetHoursMaxNil sets the value for HoursMax to be an explicit nil
func (o *WorkType) SetHoursMaxNil() {
	o.HoursMax.Set(nil)
}

// UnsetHoursMax ensures that no value is present for HoursMax, not even an explicit nil
func (o *WorkType) UnsetHoursMax() {
	o.HoursMax.Unset()
}

// GetRoundBillHoursTo returns the RoundBillHoursTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetRoundBillHoursTo() float64 {
	if o == nil || IsNil(o.RoundBillHoursTo.Get()) {
		var ret float64
		return ret
	}
	return *o.RoundBillHoursTo.Get()
}

// GetRoundBillHoursToOk returns a tuple with the RoundBillHoursTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetRoundBillHoursToOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundBillHoursTo.Get(), o.RoundBillHoursTo.IsSet()
}

// HasRoundBillHoursTo returns a boolean if a field has been set.
func (o *WorkType) HasRoundBillHoursTo() bool {
	if o != nil && o.RoundBillHoursTo.IsSet() {
		return true
	}

	return false
}

// SetRoundBillHoursTo gets a reference to the given NullableFloat64 and assigns it to the RoundBillHoursTo field.
func (o *WorkType) SetRoundBillHoursTo(v float64) {
	o.RoundBillHoursTo.Set(&v)
}
// SetRoundBillHoursToNil sets the value for RoundBillHoursTo to be an explicit nil
func (o *WorkType) SetRoundBillHoursToNil() {
	o.RoundBillHoursTo.Set(nil)
}

// UnsetRoundBillHoursTo ensures that no value is present for RoundBillHoursTo, not even an explicit nil
func (o *WorkType) UnsetRoundBillHoursTo() {
	o.RoundBillHoursTo.Unset()
}

// GetAccrualType returns the AccrualType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetAccrualType() string {
	if o == nil || IsNil(o.AccrualType.Get()) {
		var ret string
		return ret
	}
	return *o.AccrualType.Get()
}

// GetAccrualTypeOk returns a tuple with the AccrualType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetAccrualTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccrualType.Get(), o.AccrualType.IsSet()
}

// HasAccrualType returns a boolean if a field has been set.
func (o *WorkType) HasAccrualType() bool {
	if o != nil && o.AccrualType.IsSet() {
		return true
	}

	return false
}

// SetAccrualType gets a reference to the given NullableString and assigns it to the AccrualType field.
func (o *WorkType) SetAccrualType(v string) {
	o.AccrualType.Set(&v)
}
// SetAccrualTypeNil sets the value for AccrualType to be an explicit nil
func (o *WorkType) SetAccrualTypeNil() {
	o.AccrualType.Set(nil)
}

// UnsetAccrualType ensures that no value is present for AccrualType, not even an explicit nil
func (o *WorkType) UnsetAccrualType() {
	o.AccrualType.Unset()
}

// GetInactiveFlag returns the InactiveFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetInactiveFlag() bool {
	if o == nil || IsNil(o.InactiveFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.InactiveFlag.Get()
}

// GetInactiveFlagOk returns a tuple with the InactiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetInactiveFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactiveFlag.Get(), o.InactiveFlag.IsSet()
}

// HasInactiveFlag returns a boolean if a field has been set.
func (o *WorkType) HasInactiveFlag() bool {
	if o != nil && o.InactiveFlag.IsSet() {
		return true
	}

	return false
}

// SetInactiveFlag gets a reference to the given NullableBool and assigns it to the InactiveFlag field.
func (o *WorkType) SetInactiveFlag(v bool) {
	o.InactiveFlag.Set(&v)
}
// SetInactiveFlagNil sets the value for InactiveFlag to be an explicit nil
func (o *WorkType) SetInactiveFlagNil() {
	o.InactiveFlag.Set(nil)
}

// UnsetInactiveFlag ensures that no value is present for InactiveFlag, not even an explicit nil
func (o *WorkType) UnsetInactiveFlag() {
	o.InactiveFlag.Unset()
}

// GetOverallDefaultFlag returns the OverallDefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetOverallDefaultFlag() bool {
	if o == nil || IsNil(o.OverallDefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.OverallDefaultFlag.Get()
}

// GetOverallDefaultFlagOk returns a tuple with the OverallDefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetOverallDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverallDefaultFlag.Get(), o.OverallDefaultFlag.IsSet()
}

// HasOverallDefaultFlag returns a boolean if a field has been set.
func (o *WorkType) HasOverallDefaultFlag() bool {
	if o != nil && o.OverallDefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetOverallDefaultFlag gets a reference to the given NullableBool and assigns it to the OverallDefaultFlag field.
func (o *WorkType) SetOverallDefaultFlag(v bool) {
	o.OverallDefaultFlag.Set(&v)
}
// SetOverallDefaultFlagNil sets the value for OverallDefaultFlag to be an explicit nil
func (o *WorkType) SetOverallDefaultFlagNil() {
	o.OverallDefaultFlag.Set(nil)
}

// UnsetOverallDefaultFlag ensures that no value is present for OverallDefaultFlag, not even an explicit nil
func (o *WorkType) UnsetOverallDefaultFlag() {
	o.OverallDefaultFlag.Unset()
}

// GetActivityDefaultFlag returns the ActivityDefaultFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetActivityDefaultFlag() bool {
	if o == nil || IsNil(o.ActivityDefaultFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ActivityDefaultFlag.Get()
}

// GetActivityDefaultFlagOk returns a tuple with the ActivityDefaultFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetActivityDefaultFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityDefaultFlag.Get(), o.ActivityDefaultFlag.IsSet()
}

// HasActivityDefaultFlag returns a boolean if a field has been set.
func (o *WorkType) HasActivityDefaultFlag() bool {
	if o != nil && o.ActivityDefaultFlag.IsSet() {
		return true
	}

	return false
}

// SetActivityDefaultFlag gets a reference to the given NullableBool and assigns it to the ActivityDefaultFlag field.
func (o *WorkType) SetActivityDefaultFlag(v bool) {
	o.ActivityDefaultFlag.Set(&v)
}
// SetActivityDefaultFlagNil sets the value for ActivityDefaultFlag to be an explicit nil
func (o *WorkType) SetActivityDefaultFlagNil() {
	o.ActivityDefaultFlag.Set(nil)
}

// UnsetActivityDefaultFlag ensures that no value is present for ActivityDefaultFlag, not even an explicit nil
func (o *WorkType) UnsetActivityDefaultFlag() {
	o.ActivityDefaultFlag.Unset()
}

// GetUtilizationFlag returns the UtilizationFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetUtilizationFlag() bool {
	if o == nil || IsNil(o.UtilizationFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.UtilizationFlag.Get()
}

// GetUtilizationFlagOk returns a tuple with the UtilizationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetUtilizationFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UtilizationFlag.Get(), o.UtilizationFlag.IsSet()
}

// HasUtilizationFlag returns a boolean if a field has been set.
func (o *WorkType) HasUtilizationFlag() bool {
	if o != nil && o.UtilizationFlag.IsSet() {
		return true
	}

	return false
}

// SetUtilizationFlag gets a reference to the given NullableBool and assigns it to the UtilizationFlag field.
func (o *WorkType) SetUtilizationFlag(v bool) {
	o.UtilizationFlag.Set(&v)
}
// SetUtilizationFlagNil sets the value for UtilizationFlag to be an explicit nil
func (o *WorkType) SetUtilizationFlagNil() {
	o.UtilizationFlag.Set(nil)
}

// UnsetUtilizationFlag ensures that no value is present for UtilizationFlag, not even an explicit nil
func (o *WorkType) UnsetUtilizationFlag() {
	o.UtilizationFlag.Unset()
}

// GetCostMultiplier returns the CostMultiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetCostMultiplier() float64 {
	if o == nil || IsNil(o.CostMultiplier.Get()) {
		var ret float64
		return ret
	}
	return *o.CostMultiplier.Get()
}

// GetCostMultiplierOk returns a tuple with the CostMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetCostMultiplierOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CostMultiplier.Get(), o.CostMultiplier.IsSet()
}

// HasCostMultiplier returns a boolean if a field has been set.
func (o *WorkType) HasCostMultiplier() bool {
	if o != nil && o.CostMultiplier.IsSet() {
		return true
	}

	return false
}

// SetCostMultiplier gets a reference to the given NullableFloat64 and assigns it to the CostMultiplier field.
func (o *WorkType) SetCostMultiplier(v float64) {
	o.CostMultiplier.Set(&v)
}
// SetCostMultiplierNil sets the value for CostMultiplier to be an explicit nil
func (o *WorkType) SetCostMultiplierNil() {
	o.CostMultiplier.Set(nil)
}

// UnsetCostMultiplier ensures that no value is present for CostMultiplier, not even an explicit nil
func (o *WorkType) UnsetCostMultiplier() {
	o.CostMultiplier.Unset()
}

// GetIntegrationXRef returns the IntegrationXRef field value if set, zero value otherwise.
func (o *WorkType) GetIntegrationXRef() string {
	if o == nil || IsNil(o.IntegrationXRef) {
		var ret string
		return ret
	}
	return *o.IntegrationXRef
}

// GetIntegrationXRefOk returns a tuple with the IntegrationXRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkType) GetIntegrationXRefOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationXRef) {
		return nil, false
	}
	return o.IntegrationXRef, true
}

// HasIntegrationXRef returns a boolean if a field has been set.
func (o *WorkType) HasIntegrationXRef() bool {
	if o != nil && !IsNil(o.IntegrationXRef) {
		return true
	}

	return false
}

// SetIntegrationXRef gets a reference to the given string and assigns it to the IntegrationXRef field.
func (o *WorkType) SetIntegrationXRef(v string) {
	o.IntegrationXRef = &v
}

// GetAddAllAgreementExclusions returns the AddAllAgreementExclusions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkType) GetAddAllAgreementExclusions() bool {
	if o == nil || IsNil(o.AddAllAgreementExclusions.Get()) {
		var ret bool
		return ret
	}
	return *o.AddAllAgreementExclusions.Get()
}

// GetAddAllAgreementExclusionsOk returns a tuple with the AddAllAgreementExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkType) GetAddAllAgreementExclusionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddAllAgreementExclusions.Get(), o.AddAllAgreementExclusions.IsSet()
}

// HasAddAllAgreementExclusions returns a boolean if a field has been set.
func (o *WorkType) HasAddAllAgreementExclusions() bool {
	if o != nil && o.AddAllAgreementExclusions.IsSet() {
		return true
	}

	return false
}

// SetAddAllAgreementExclusions gets a reference to the given NullableBool and assigns it to the AddAllAgreementExclusions field.
func (o *WorkType) SetAddAllAgreementExclusions(v bool) {
	o.AddAllAgreementExclusions.Set(&v)
}
// SetAddAllAgreementExclusionsNil sets the value for AddAllAgreementExclusions to be an explicit nil
func (o *WorkType) SetAddAllAgreementExclusionsNil() {
	o.AddAllAgreementExclusions.Set(nil)
}

// UnsetAddAllAgreementExclusions ensures that no value is present for AddAllAgreementExclusions, not even an explicit nil
func (o *WorkType) UnsetAddAllAgreementExclusions() {
	o.AddAllAgreementExclusions.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *WorkType) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkType) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *WorkType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *WorkType) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o WorkType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["billTime"] = o.BillTime.Get()
	toSerialize["rateType"] = o.RateType.Get()
	toSerialize["rate"] = o.Rate.Get()
	if o.HoursMin.IsSet() {
		toSerialize["hoursMin"] = o.HoursMin.Get()
	}
	if o.HoursMax.IsSet() {
		toSerialize["hoursMax"] = o.HoursMax.Get()
	}
	if o.RoundBillHoursTo.IsSet() {
		toSerialize["roundBillHoursTo"] = o.RoundBillHoursTo.Get()
	}
	if o.AccrualType.IsSet() {
		toSerialize["accrualType"] = o.AccrualType.Get()
	}
	if o.InactiveFlag.IsSet() {
		toSerialize["inactiveFlag"] = o.InactiveFlag.Get()
	}
	if o.OverallDefaultFlag.IsSet() {
		toSerialize["overallDefaultFlag"] = o.OverallDefaultFlag.Get()
	}
	if o.ActivityDefaultFlag.IsSet() {
		toSerialize["activityDefaultFlag"] = o.ActivityDefaultFlag.Get()
	}
	if o.UtilizationFlag.IsSet() {
		toSerialize["utilizationFlag"] = o.UtilizationFlag.Get()
	}
	if o.CostMultiplier.IsSet() {
		toSerialize["costMultiplier"] = o.CostMultiplier.Get()
	}
	if !IsNil(o.IntegrationXRef) {
		toSerialize["integrationXRef"] = o.IntegrationXRef
	}
	if o.AddAllAgreementExclusions.IsSet() {
		toSerialize["addAllAgreementExclusions"] = o.AddAllAgreementExclusions.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *WorkType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"billTime",
		"rateType",
		"rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkType := _WorkType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkType)

	if err != nil {
		return err
	}

	*o = WorkType(varWorkType)

	return err
}

type NullableWorkType struct {
	value *WorkType
	isSet bool
}

func (v NullableWorkType) Get() *WorkType {
	return v.value
}

func (v *NullableWorkType) Set(val *WorkType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkType(val *WorkType) *NullableWorkType {
	return &NullableWorkType{value: val, isSet: true}
}

func (v NullableWorkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


