/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Workflow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workflow{}

// Workflow struct for Workflow
type Workflow struct {
	Id *int32 `json:"id,omitempty"`
	//  Max length: 100;
	Name string `json:"name"`
	TableType WorkflowTableTypeReference `json:"tableType"`
	Location *SystemLocationReference `json:"location,omitempty"`
	Department *SystemDepartmentReference `json:"department,omitempty"`
	// Batches can not be turned on until after the workflow is created and it has atleast one event associated with it
	ActivateFlag NullableBool `json:"activateFlag,omitempty"`
	BatchInterval NullableInt32 `json:"batchInterval,omitempty"`
	// If not specified, defaults to Minutes. Months is not supported as month length varies
	BatchFrequencyUnit NullableString `json:"batchFrequencyUnit,omitempty"`
	BatchLastRan *time.Time `json:"batchLastRan,omitempty"`
	// If activateFlag is true, batchSchedule is required
	BatchSchedule NullableString `json:"batchSchedule,omitempty"`
	Board *BoardReference `json:"board,omitempty"`
	ConnectWiseID *string `json:"connectWiseID,omitempty"`
	Info *map[string]string `json:"_info,omitempty"`
}

type _Workflow Workflow

// NewWorkflow instantiates a new Workflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflow(name string, tableType WorkflowTableTypeReference) *Workflow {
	this := Workflow{}
	this.Name = name
	this.TableType = tableType
	return &this
}

// NewWorkflowWithDefaults instantiates a new Workflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowWithDefaults() *Workflow {
	this := Workflow{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Workflow) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Workflow) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Workflow) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Workflow) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Workflow) SetName(v string) {
	o.Name = v
}

// GetTableType returns the TableType field value
func (o *Workflow) GetTableType() WorkflowTableTypeReference {
	if o == nil {
		var ret WorkflowTableTypeReference
		return ret
	}

	return o.TableType
}

// GetTableTypeOk returns a tuple with the TableType field value
// and a boolean to check if the value has been set.
func (o *Workflow) GetTableTypeOk() (*WorkflowTableTypeReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableType, true
}

// SetTableType sets field value
func (o *Workflow) SetTableType(v WorkflowTableTypeReference) {
	o.TableType = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Workflow) GetLocation() SystemLocationReference {
	if o == nil || IsNil(o.Location) {
		var ret SystemLocationReference
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetLocationOk() (*SystemLocationReference, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Workflow) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SystemLocationReference and assigns it to the Location field.
func (o *Workflow) SetLocation(v SystemLocationReference) {
	o.Location = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *Workflow) GetDepartment() SystemDepartmentReference {
	if o == nil || IsNil(o.Department) {
		var ret SystemDepartmentReference
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetDepartmentOk() (*SystemDepartmentReference, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *Workflow) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given SystemDepartmentReference and assigns it to the Department field.
func (o *Workflow) SetDepartment(v SystemDepartmentReference) {
	o.Department = &v
}

// GetActivateFlag returns the ActivateFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Workflow) GetActivateFlag() bool {
	if o == nil || IsNil(o.ActivateFlag.Get()) {
		var ret bool
		return ret
	}
	return *o.ActivateFlag.Get()
}

// GetActivateFlagOk returns a tuple with the ActivateFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Workflow) GetActivateFlagOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivateFlag.Get(), o.ActivateFlag.IsSet()
}

// HasActivateFlag returns a boolean if a field has been set.
func (o *Workflow) HasActivateFlag() bool {
	if o != nil && o.ActivateFlag.IsSet() {
		return true
	}

	return false
}

// SetActivateFlag gets a reference to the given NullableBool and assigns it to the ActivateFlag field.
func (o *Workflow) SetActivateFlag(v bool) {
	o.ActivateFlag.Set(&v)
}
// SetActivateFlagNil sets the value for ActivateFlag to be an explicit nil
func (o *Workflow) SetActivateFlagNil() {
	o.ActivateFlag.Set(nil)
}

// UnsetActivateFlag ensures that no value is present for ActivateFlag, not even an explicit nil
func (o *Workflow) UnsetActivateFlag() {
	o.ActivateFlag.Unset()
}

// GetBatchInterval returns the BatchInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Workflow) GetBatchInterval() int32 {
	if o == nil || IsNil(o.BatchInterval.Get()) {
		var ret int32
		return ret
	}
	return *o.BatchInterval.Get()
}

// GetBatchIntervalOk returns a tuple with the BatchInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Workflow) GetBatchIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchInterval.Get(), o.BatchInterval.IsSet()
}

// HasBatchInterval returns a boolean if a field has been set.
func (o *Workflow) HasBatchInterval() bool {
	if o != nil && o.BatchInterval.IsSet() {
		return true
	}

	return false
}

// SetBatchInterval gets a reference to the given NullableInt32 and assigns it to the BatchInterval field.
func (o *Workflow) SetBatchInterval(v int32) {
	o.BatchInterval.Set(&v)
}
// SetBatchIntervalNil sets the value for BatchInterval to be an explicit nil
func (o *Workflow) SetBatchIntervalNil() {
	o.BatchInterval.Set(nil)
}

// UnsetBatchInterval ensures that no value is present for BatchInterval, not even an explicit nil
func (o *Workflow) UnsetBatchInterval() {
	o.BatchInterval.Unset()
}

// GetBatchFrequencyUnit returns the BatchFrequencyUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Workflow) GetBatchFrequencyUnit() string {
	if o == nil || IsNil(o.BatchFrequencyUnit.Get()) {
		var ret string
		return ret
	}
	return *o.BatchFrequencyUnit.Get()
}

// GetBatchFrequencyUnitOk returns a tuple with the BatchFrequencyUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Workflow) GetBatchFrequencyUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchFrequencyUnit.Get(), o.BatchFrequencyUnit.IsSet()
}

// HasBatchFrequencyUnit returns a boolean if a field has been set.
func (o *Workflow) HasBatchFrequencyUnit() bool {
	if o != nil && o.BatchFrequencyUnit.IsSet() {
		return true
	}

	return false
}

// SetBatchFrequencyUnit gets a reference to the given NullableString and assigns it to the BatchFrequencyUnit field.
func (o *Workflow) SetBatchFrequencyUnit(v string) {
	o.BatchFrequencyUnit.Set(&v)
}
// SetBatchFrequencyUnitNil sets the value for BatchFrequencyUnit to be an explicit nil
func (o *Workflow) SetBatchFrequencyUnitNil() {
	o.BatchFrequencyUnit.Set(nil)
}

// UnsetBatchFrequencyUnit ensures that no value is present for BatchFrequencyUnit, not even an explicit nil
func (o *Workflow) UnsetBatchFrequencyUnit() {
	o.BatchFrequencyUnit.Unset()
}

// GetBatchLastRan returns the BatchLastRan field value if set, zero value otherwise.
func (o *Workflow) GetBatchLastRan() time.Time {
	if o == nil || IsNil(o.BatchLastRan) {
		var ret time.Time
		return ret
	}
	return *o.BatchLastRan
}

// GetBatchLastRanOk returns a tuple with the BatchLastRan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetBatchLastRanOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BatchLastRan) {
		return nil, false
	}
	return o.BatchLastRan, true
}

// HasBatchLastRan returns a boolean if a field has been set.
func (o *Workflow) HasBatchLastRan() bool {
	if o != nil && !IsNil(o.BatchLastRan) {
		return true
	}

	return false
}

// SetBatchLastRan gets a reference to the given time.Time and assigns it to the BatchLastRan field.
func (o *Workflow) SetBatchLastRan(v time.Time) {
	o.BatchLastRan = &v
}

// GetBatchSchedule returns the BatchSchedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Workflow) GetBatchSchedule() string {
	if o == nil || IsNil(o.BatchSchedule.Get()) {
		var ret string
		return ret
	}
	return *o.BatchSchedule.Get()
}

// GetBatchScheduleOk returns a tuple with the BatchSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Workflow) GetBatchScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchSchedule.Get(), o.BatchSchedule.IsSet()
}

// HasBatchSchedule returns a boolean if a field has been set.
func (o *Workflow) HasBatchSchedule() bool {
	if o != nil && o.BatchSchedule.IsSet() {
		return true
	}

	return false
}

// SetBatchSchedule gets a reference to the given NullableString and assigns it to the BatchSchedule field.
func (o *Workflow) SetBatchSchedule(v string) {
	o.BatchSchedule.Set(&v)
}
// SetBatchScheduleNil sets the value for BatchSchedule to be an explicit nil
func (o *Workflow) SetBatchScheduleNil() {
	o.BatchSchedule.Set(nil)
}

// UnsetBatchSchedule ensures that no value is present for BatchSchedule, not even an explicit nil
func (o *Workflow) UnsetBatchSchedule() {
	o.BatchSchedule.Unset()
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *Workflow) GetBoard() BoardReference {
	if o == nil || IsNil(o.Board) {
		var ret BoardReference
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetBoardOk() (*BoardReference, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *Workflow) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given BoardReference and assigns it to the Board field.
func (o *Workflow) SetBoard(v BoardReference) {
	o.Board = &v
}

// GetConnectWiseID returns the ConnectWiseID field value if set, zero value otherwise.
func (o *Workflow) GetConnectWiseID() string {
	if o == nil || IsNil(o.ConnectWiseID) {
		var ret string
		return ret
	}
	return *o.ConnectWiseID
}

// GetConnectWiseIDOk returns a tuple with the ConnectWiseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetConnectWiseIDOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectWiseID) {
		return nil, false
	}
	return o.ConnectWiseID, true
}

// HasConnectWiseID returns a boolean if a field has been set.
func (o *Workflow) HasConnectWiseID() bool {
	if o != nil && !IsNil(o.ConnectWiseID) {
		return true
	}

	return false
}

// SetConnectWiseID gets a reference to the given string and assigns it to the ConnectWiseID field.
func (o *Workflow) SetConnectWiseID(v string) {
	o.ConnectWiseID = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Workflow) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workflow) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Workflow) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *Workflow) SetInfo(v map[string]string) {
	o.Info = &v
}

func (o Workflow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workflow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["tableType"] = o.TableType
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if o.ActivateFlag.IsSet() {
		toSerialize["activateFlag"] = o.ActivateFlag.Get()
	}
	if o.BatchInterval.IsSet() {
		toSerialize["batchInterval"] = o.BatchInterval.Get()
	}
	if o.BatchFrequencyUnit.IsSet() {
		toSerialize["batchFrequencyUnit"] = o.BatchFrequencyUnit.Get()
	}
	if !IsNil(o.BatchLastRan) {
		toSerialize["batchLastRan"] = o.BatchLastRan
	}
	if o.BatchSchedule.IsSet() {
		toSerialize["batchSchedule"] = o.BatchSchedule.Get()
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.ConnectWiseID) {
		toSerialize["connectWiseID"] = o.ConnectWiseID
	}
	if !IsNil(o.Info) {
		toSerialize["_info"] = o.Info
	}
	return toSerialize, nil
}

func (o *Workflow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"tableType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkflow := _Workflow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkflow)

	if err != nil {
		return err
	}

	*o = Workflow(varWorkflow)

	return err
}

type NullableWorkflow struct {
	value *Workflow
	isSet bool
}

func (v NullableWorkflow) Get() *Workflow {
	return v.value
}

func (v *NullableWorkflow) Set(val *Workflow) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflow) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflow(val *Workflow) *NullableWorkflow {
	return &NullableWorkflow{value: val, isSet: true}
}

func (v NullableWorkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


